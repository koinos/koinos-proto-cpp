// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/chain/chain_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fchain_2fchain_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fchain_2fchain_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/common.pb.h"
#include "koinos/protocol/protocol.pb.h"
#include "koinos/rpc/rpc.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
namespace koinos {
namespace rpc {
namespace chain {
class chain_request;
class chain_requestDefaultTypeInternal;
extern chain_requestDefaultTypeInternal _chain_request_default_instance_;
class chain_response;
class chain_responseDefaultTypeInternal;
extern chain_responseDefaultTypeInternal _chain_response_default_instance_;
class get_account_nonce_request;
class get_account_nonce_requestDefaultTypeInternal;
extern get_account_nonce_requestDefaultTypeInternal _get_account_nonce_request_default_instance_;
class get_account_nonce_response;
class get_account_nonce_responseDefaultTypeInternal;
extern get_account_nonce_responseDefaultTypeInternal _get_account_nonce_response_default_instance_;
class get_chain_id_request;
class get_chain_id_requestDefaultTypeInternal;
extern get_chain_id_requestDefaultTypeInternal _get_chain_id_request_default_instance_;
class get_chain_id_response;
class get_chain_id_responseDefaultTypeInternal;
extern get_chain_id_responseDefaultTypeInternal _get_chain_id_response_default_instance_;
class get_fork_heads_request;
class get_fork_heads_requestDefaultTypeInternal;
extern get_fork_heads_requestDefaultTypeInternal _get_fork_heads_request_default_instance_;
class get_fork_heads_response;
class get_fork_heads_responseDefaultTypeInternal;
extern get_fork_heads_responseDefaultTypeInternal _get_fork_heads_response_default_instance_;
class get_head_info_request;
class get_head_info_requestDefaultTypeInternal;
extern get_head_info_requestDefaultTypeInternal _get_head_info_request_default_instance_;
class get_head_info_response;
class get_head_info_responseDefaultTypeInternal;
extern get_head_info_responseDefaultTypeInternal _get_head_info_response_default_instance_;
class read_contract_request;
class read_contract_requestDefaultTypeInternal;
extern read_contract_requestDefaultTypeInternal _read_contract_request_default_instance_;
class read_contract_response;
class read_contract_responseDefaultTypeInternal;
extern read_contract_responseDefaultTypeInternal _read_contract_response_default_instance_;
class submit_block_request;
class submit_block_requestDefaultTypeInternal;
extern submit_block_requestDefaultTypeInternal _submit_block_request_default_instance_;
class submit_block_response;
class submit_block_responseDefaultTypeInternal;
extern submit_block_responseDefaultTypeInternal _submit_block_response_default_instance_;
class submit_transaction_request;
class submit_transaction_requestDefaultTypeInternal;
extern submit_transaction_requestDefaultTypeInternal _submit_transaction_request_default_instance_;
class submit_transaction_response;
class submit_transaction_responseDefaultTypeInternal;
extern submit_transaction_responseDefaultTypeInternal _submit_transaction_response_default_instance_;
}  // namespace chain
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::rpc::chain::chain_request* Arena::CreateMaybeMessage<::koinos::rpc::chain::chain_request>(Arena*);
template<> ::koinos::rpc::chain::chain_response* Arena::CreateMaybeMessage<::koinos::rpc::chain::chain_response>(Arena*);
template<> ::koinos::rpc::chain::get_account_nonce_request* Arena::CreateMaybeMessage<::koinos::rpc::chain::get_account_nonce_request>(Arena*);
template<> ::koinos::rpc::chain::get_account_nonce_response* Arena::CreateMaybeMessage<::koinos::rpc::chain::get_account_nonce_response>(Arena*);
template<> ::koinos::rpc::chain::get_chain_id_request* Arena::CreateMaybeMessage<::koinos::rpc::chain::get_chain_id_request>(Arena*);
template<> ::koinos::rpc::chain::get_chain_id_response* Arena::CreateMaybeMessage<::koinos::rpc::chain::get_chain_id_response>(Arena*);
template<> ::koinos::rpc::chain::get_fork_heads_request* Arena::CreateMaybeMessage<::koinos::rpc::chain::get_fork_heads_request>(Arena*);
template<> ::koinos::rpc::chain::get_fork_heads_response* Arena::CreateMaybeMessage<::koinos::rpc::chain::get_fork_heads_response>(Arena*);
template<> ::koinos::rpc::chain::get_head_info_request* Arena::CreateMaybeMessage<::koinos::rpc::chain::get_head_info_request>(Arena*);
template<> ::koinos::rpc::chain::get_head_info_response* Arena::CreateMaybeMessage<::koinos::rpc::chain::get_head_info_response>(Arena*);
template<> ::koinos::rpc::chain::read_contract_request* Arena::CreateMaybeMessage<::koinos::rpc::chain::read_contract_request>(Arena*);
template<> ::koinos::rpc::chain::read_contract_response* Arena::CreateMaybeMessage<::koinos::rpc::chain::read_contract_response>(Arena*);
template<> ::koinos::rpc::chain::submit_block_request* Arena::CreateMaybeMessage<::koinos::rpc::chain::submit_block_request>(Arena*);
template<> ::koinos::rpc::chain::submit_block_response* Arena::CreateMaybeMessage<::koinos::rpc::chain::submit_block_response>(Arena*);
template<> ::koinos::rpc::chain::submit_transaction_request* Arena::CreateMaybeMessage<::koinos::rpc::chain::submit_transaction_request>(Arena*);
template<> ::koinos::rpc::chain::submit_transaction_response* Arena::CreateMaybeMessage<::koinos::rpc::chain::submit_transaction_response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace rpc {
namespace chain {

// ===================================================================

class submit_block_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.submit_block_request) */ {
 public:
  inline submit_block_request() : submit_block_request(nullptr) {}
  virtual ~submit_block_request();

  submit_block_request(const submit_block_request& from);
  submit_block_request(submit_block_request&& from) noexcept
    : submit_block_request() {
    *this = ::std::move(from);
  }

  inline submit_block_request& operator=(const submit_block_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline submit_block_request& operator=(submit_block_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const submit_block_request& default_instance();

  static inline const submit_block_request* internal_default_instance() {
    return reinterpret_cast<const submit_block_request*>(
               &_submit_block_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(submit_block_request& a, submit_block_request& b) {
    a.Swap(&b);
  }
  inline void Swap(submit_block_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(submit_block_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline submit_block_request* New() const final {
    return CreateMaybeMessage<submit_block_request>(nullptr);
  }

  submit_block_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<submit_block_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const submit_block_request& from);
  void MergeFrom(const submit_block_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(submit_block_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.submit_block_request";
  }
  protected:
  explicit submit_block_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
    kVerifyPassiveDataFieldNumber = 2,
    kVerifyBlockSignatureFieldNumber = 3,
    kVerifyTransactionSignatureFieldNumber = 4,
  };
  // .koinos.protocol.block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::koinos::protocol::block& block() const;
  ::koinos::protocol::block* release_block();
  ::koinos::protocol::block* mutable_block();
  void set_allocated_block(::koinos::protocol::block* block);
  private:
  const ::koinos::protocol::block& _internal_block() const;
  ::koinos::protocol::block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::koinos::protocol::block* block);
  ::koinos::protocol::block* unsafe_arena_release_block();

  // bool verify_passive_data = 2;
  void clear_verify_passive_data();
  bool verify_passive_data() const;
  void set_verify_passive_data(bool value);
  private:
  bool _internal_verify_passive_data() const;
  void _internal_set_verify_passive_data(bool value);
  public:

  // bool verify_block_signature = 3;
  void clear_verify_block_signature();
  bool verify_block_signature() const;
  void set_verify_block_signature(bool value);
  private:
  bool _internal_verify_block_signature() const;
  void _internal_set_verify_block_signature(bool value);
  public:

  // bool verify_transaction_signature = 4;
  void clear_verify_transaction_signature();
  bool verify_transaction_signature() const;
  void set_verify_transaction_signature(bool value);
  private:
  bool _internal_verify_transaction_signature() const;
  void _internal_set_verify_transaction_signature(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.submit_block_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::block* block_;
  bool verify_passive_data_;
  bool verify_block_signature_;
  bool verify_transaction_signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class submit_block_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.submit_block_response) */ {
 public:
  inline submit_block_response() : submit_block_response(nullptr) {}
  virtual ~submit_block_response();

  submit_block_response(const submit_block_response& from);
  submit_block_response(submit_block_response&& from) noexcept
    : submit_block_response() {
    *this = ::std::move(from);
  }

  inline submit_block_response& operator=(const submit_block_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline submit_block_response& operator=(submit_block_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const submit_block_response& default_instance();

  static inline const submit_block_response* internal_default_instance() {
    return reinterpret_cast<const submit_block_response*>(
               &_submit_block_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(submit_block_response& a, submit_block_response& b) {
    a.Swap(&b);
  }
  inline void Swap(submit_block_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(submit_block_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline submit_block_response* New() const final {
    return CreateMaybeMessage<submit_block_response>(nullptr);
  }

  submit_block_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<submit_block_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const submit_block_response& from);
  void MergeFrom(const submit_block_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(submit_block_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.submit_block_response";
  }
  protected:
  explicit submit_block_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.submit_block_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class submit_transaction_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.submit_transaction_request) */ {
 public:
  inline submit_transaction_request() : submit_transaction_request(nullptr) {}
  virtual ~submit_transaction_request();

  submit_transaction_request(const submit_transaction_request& from);
  submit_transaction_request(submit_transaction_request&& from) noexcept
    : submit_transaction_request() {
    *this = ::std::move(from);
  }

  inline submit_transaction_request& operator=(const submit_transaction_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline submit_transaction_request& operator=(submit_transaction_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const submit_transaction_request& default_instance();

  static inline const submit_transaction_request* internal_default_instance() {
    return reinterpret_cast<const submit_transaction_request*>(
               &_submit_transaction_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(submit_transaction_request& a, submit_transaction_request& b) {
    a.Swap(&b);
  }
  inline void Swap(submit_transaction_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(submit_transaction_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline submit_transaction_request* New() const final {
    return CreateMaybeMessage<submit_transaction_request>(nullptr);
  }

  submit_transaction_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<submit_transaction_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const submit_transaction_request& from);
  void MergeFrom(const submit_transaction_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(submit_transaction_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.submit_transaction_request";
  }
  protected:
  explicit submit_transaction_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
    kVerifyPassiveDataFieldNumber = 2,
    kVerifyTransactionSignatureFieldNumber = 3,
  };
  // .koinos.protocol.transaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::koinos::protocol::transaction& transaction() const;
  ::koinos::protocol::transaction* release_transaction();
  ::koinos::protocol::transaction* mutable_transaction();
  void set_allocated_transaction(::koinos::protocol::transaction* transaction);
  private:
  const ::koinos::protocol::transaction& _internal_transaction() const;
  ::koinos::protocol::transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::koinos::protocol::transaction* transaction);
  ::koinos::protocol::transaction* unsafe_arena_release_transaction();

  // bool verify_passive_data = 2;
  void clear_verify_passive_data();
  bool verify_passive_data() const;
  void set_verify_passive_data(bool value);
  private:
  bool _internal_verify_passive_data() const;
  void _internal_set_verify_passive_data(bool value);
  public:

  // bool verify_transaction_signature = 3;
  void clear_verify_transaction_signature();
  bool verify_transaction_signature() const;
  void set_verify_transaction_signature(bool value);
  private:
  bool _internal_verify_transaction_signature() const;
  void _internal_set_verify_transaction_signature(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.submit_transaction_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::transaction* transaction_;
  bool verify_passive_data_;
  bool verify_transaction_signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class submit_transaction_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.submit_transaction_response) */ {
 public:
  inline submit_transaction_response() : submit_transaction_response(nullptr) {}
  virtual ~submit_transaction_response();

  submit_transaction_response(const submit_transaction_response& from);
  submit_transaction_response(submit_transaction_response&& from) noexcept
    : submit_transaction_response() {
    *this = ::std::move(from);
  }

  inline submit_transaction_response& operator=(const submit_transaction_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline submit_transaction_response& operator=(submit_transaction_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const submit_transaction_response& default_instance();

  static inline const submit_transaction_response* internal_default_instance() {
    return reinterpret_cast<const submit_transaction_response*>(
               &_submit_transaction_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(submit_transaction_response& a, submit_transaction_response& b) {
    a.Swap(&b);
  }
  inline void Swap(submit_transaction_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(submit_transaction_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline submit_transaction_response* New() const final {
    return CreateMaybeMessage<submit_transaction_response>(nullptr);
  }

  submit_transaction_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<submit_transaction_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const submit_transaction_response& from);
  void MergeFrom(const submit_transaction_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(submit_transaction_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.submit_transaction_response";
  }
  protected:
  explicit submit_transaction_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.submit_transaction_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_head_info_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.get_head_info_request) */ {
 public:
  inline get_head_info_request() : get_head_info_request(nullptr) {}
  virtual ~get_head_info_request();

  get_head_info_request(const get_head_info_request& from);
  get_head_info_request(get_head_info_request&& from) noexcept
    : get_head_info_request() {
    *this = ::std::move(from);
  }

  inline get_head_info_request& operator=(const get_head_info_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_head_info_request& operator=(get_head_info_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_head_info_request& default_instance();

  static inline const get_head_info_request* internal_default_instance() {
    return reinterpret_cast<const get_head_info_request*>(
               &_get_head_info_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(get_head_info_request& a, get_head_info_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_head_info_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_head_info_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_head_info_request* New() const final {
    return CreateMaybeMessage<get_head_info_request>(nullptr);
  }

  get_head_info_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_head_info_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_head_info_request& from);
  void MergeFrom(const get_head_info_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_head_info_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.get_head_info_request";
  }
  protected:
  explicit get_head_info_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.get_head_info_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_head_info_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.get_head_info_response) */ {
 public:
  inline get_head_info_response() : get_head_info_response(nullptr) {}
  virtual ~get_head_info_response();

  get_head_info_response(const get_head_info_response& from);
  get_head_info_response(get_head_info_response&& from) noexcept
    : get_head_info_response() {
    *this = ::std::move(from);
  }

  inline get_head_info_response& operator=(const get_head_info_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_head_info_response& operator=(get_head_info_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_head_info_response& default_instance();

  static inline const get_head_info_response* internal_default_instance() {
    return reinterpret_cast<const get_head_info_response*>(
               &_get_head_info_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(get_head_info_response& a, get_head_info_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_head_info_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_head_info_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_head_info_response* New() const final {
    return CreateMaybeMessage<get_head_info_response>(nullptr);
  }

  get_head_info_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_head_info_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_head_info_response& from);
  void MergeFrom(const get_head_info_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_head_info_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.get_head_info_response";
  }
  protected:
  explicit get_head_info_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadTopologyFieldNumber = 1,
    kLastIrreversibleBlockFieldNumber = 2,
  };
  // .koinos.block_topology head_topology = 1;
  bool has_head_topology() const;
  private:
  bool _internal_has_head_topology() const;
  public:
  void clear_head_topology();
  const ::koinos::block_topology& head_topology() const;
  ::koinos::block_topology* release_head_topology();
  ::koinos::block_topology* mutable_head_topology();
  void set_allocated_head_topology(::koinos::block_topology* head_topology);
  private:
  const ::koinos::block_topology& _internal_head_topology() const;
  ::koinos::block_topology* _internal_mutable_head_topology();
  public:
  void unsafe_arena_set_allocated_head_topology(
      ::koinos::block_topology* head_topology);
  ::koinos::block_topology* unsafe_arena_release_head_topology();

  // uint64 last_irreversible_block = 2;
  void clear_last_irreversible_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_irreversible_block() const;
  void set_last_irreversible_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_irreversible_block() const;
  void _internal_set_last_irreversible_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.get_head_info_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::block_topology* head_topology_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_irreversible_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_chain_id_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.get_chain_id_request) */ {
 public:
  inline get_chain_id_request() : get_chain_id_request(nullptr) {}
  virtual ~get_chain_id_request();

  get_chain_id_request(const get_chain_id_request& from);
  get_chain_id_request(get_chain_id_request&& from) noexcept
    : get_chain_id_request() {
    *this = ::std::move(from);
  }

  inline get_chain_id_request& operator=(const get_chain_id_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_chain_id_request& operator=(get_chain_id_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_chain_id_request& default_instance();

  static inline const get_chain_id_request* internal_default_instance() {
    return reinterpret_cast<const get_chain_id_request*>(
               &_get_chain_id_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(get_chain_id_request& a, get_chain_id_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_chain_id_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_chain_id_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_chain_id_request* New() const final {
    return CreateMaybeMessage<get_chain_id_request>(nullptr);
  }

  get_chain_id_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_chain_id_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_chain_id_request& from);
  void MergeFrom(const get_chain_id_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_chain_id_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.get_chain_id_request";
  }
  protected:
  explicit get_chain_id_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.get_chain_id_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_chain_id_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.get_chain_id_response) */ {
 public:
  inline get_chain_id_response() : get_chain_id_response(nullptr) {}
  virtual ~get_chain_id_response();

  get_chain_id_response(const get_chain_id_response& from);
  get_chain_id_response(get_chain_id_response&& from) noexcept
    : get_chain_id_response() {
    *this = ::std::move(from);
  }

  inline get_chain_id_response& operator=(const get_chain_id_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_chain_id_response& operator=(get_chain_id_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_chain_id_response& default_instance();

  static inline const get_chain_id_response* internal_default_instance() {
    return reinterpret_cast<const get_chain_id_response*>(
               &_get_chain_id_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(get_chain_id_response& a, get_chain_id_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_chain_id_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_chain_id_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_chain_id_response* New() const final {
    return CreateMaybeMessage<get_chain_id_response>(nullptr);
  }

  get_chain_id_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_chain_id_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_chain_id_response& from);
  void MergeFrom(const get_chain_id_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_chain_id_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.get_chain_id_response";
  }
  protected:
  explicit get_chain_id_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 1,
  };
  // bytes chain_id = 1;
  void clear_chain_id();
  const std::string& chain_id() const;
  void set_chain_id(const std::string& value);
  void set_chain_id(std::string&& value);
  void set_chain_id(const char* value);
  void set_chain_id(const void* value, size_t size);
  std::string* mutable_chain_id();
  std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.get_chain_id_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_fork_heads_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.get_fork_heads_request) */ {
 public:
  inline get_fork_heads_request() : get_fork_heads_request(nullptr) {}
  virtual ~get_fork_heads_request();

  get_fork_heads_request(const get_fork_heads_request& from);
  get_fork_heads_request(get_fork_heads_request&& from) noexcept
    : get_fork_heads_request() {
    *this = ::std::move(from);
  }

  inline get_fork_heads_request& operator=(const get_fork_heads_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_fork_heads_request& operator=(get_fork_heads_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_fork_heads_request& default_instance();

  static inline const get_fork_heads_request* internal_default_instance() {
    return reinterpret_cast<const get_fork_heads_request*>(
               &_get_fork_heads_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(get_fork_heads_request& a, get_fork_heads_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_fork_heads_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_fork_heads_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_fork_heads_request* New() const final {
    return CreateMaybeMessage<get_fork_heads_request>(nullptr);
  }

  get_fork_heads_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_fork_heads_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_fork_heads_request& from);
  void MergeFrom(const get_fork_heads_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_fork_heads_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.get_fork_heads_request";
  }
  protected:
  explicit get_fork_heads_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.get_fork_heads_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_fork_heads_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.get_fork_heads_response) */ {
 public:
  inline get_fork_heads_response() : get_fork_heads_response(nullptr) {}
  virtual ~get_fork_heads_response();

  get_fork_heads_response(const get_fork_heads_response& from);
  get_fork_heads_response(get_fork_heads_response&& from) noexcept
    : get_fork_heads_response() {
    *this = ::std::move(from);
  }

  inline get_fork_heads_response& operator=(const get_fork_heads_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_fork_heads_response& operator=(get_fork_heads_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_fork_heads_response& default_instance();

  static inline const get_fork_heads_response* internal_default_instance() {
    return reinterpret_cast<const get_fork_heads_response*>(
               &_get_fork_heads_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(get_fork_heads_response& a, get_fork_heads_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_fork_heads_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_fork_heads_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_fork_heads_response* New() const final {
    return CreateMaybeMessage<get_fork_heads_response>(nullptr);
  }

  get_fork_heads_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_fork_heads_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_fork_heads_response& from);
  void MergeFrom(const get_fork_heads_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_fork_heads_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.get_fork_heads_response";
  }
  protected:
  explicit get_fork_heads_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForkHeadsFieldNumber = 2,
    kLastIrreversibleBlockFieldNumber = 1,
  };
  // repeated .koinos.block_topology fork_heads = 2;
  int fork_heads_size() const;
  private:
  int _internal_fork_heads_size() const;
  public:
  void clear_fork_heads();
  ::koinos::block_topology* mutable_fork_heads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_topology >*
      mutable_fork_heads();
  private:
  const ::koinos::block_topology& _internal_fork_heads(int index) const;
  ::koinos::block_topology* _internal_add_fork_heads();
  public:
  const ::koinos::block_topology& fork_heads(int index) const;
  ::koinos::block_topology* add_fork_heads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_topology >&
      fork_heads() const;

  // .koinos.block_topology last_irreversible_block = 1;
  bool has_last_irreversible_block() const;
  private:
  bool _internal_has_last_irreversible_block() const;
  public:
  void clear_last_irreversible_block();
  const ::koinos::block_topology& last_irreversible_block() const;
  ::koinos::block_topology* release_last_irreversible_block();
  ::koinos::block_topology* mutable_last_irreversible_block();
  void set_allocated_last_irreversible_block(::koinos::block_topology* last_irreversible_block);
  private:
  const ::koinos::block_topology& _internal_last_irreversible_block() const;
  ::koinos::block_topology* _internal_mutable_last_irreversible_block();
  public:
  void unsafe_arena_set_allocated_last_irreversible_block(
      ::koinos::block_topology* last_irreversible_block);
  ::koinos::block_topology* unsafe_arena_release_last_irreversible_block();

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.get_fork_heads_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_topology > fork_heads_;
  ::koinos::block_topology* last_irreversible_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class read_contract_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.read_contract_request) */ {
 public:
  inline read_contract_request() : read_contract_request(nullptr) {}
  virtual ~read_contract_request();

  read_contract_request(const read_contract_request& from);
  read_contract_request(read_contract_request&& from) noexcept
    : read_contract_request() {
    *this = ::std::move(from);
  }

  inline read_contract_request& operator=(const read_contract_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline read_contract_request& operator=(read_contract_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const read_contract_request& default_instance();

  static inline const read_contract_request* internal_default_instance() {
    return reinterpret_cast<const read_contract_request*>(
               &_read_contract_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(read_contract_request& a, read_contract_request& b) {
    a.Swap(&b);
  }
  inline void Swap(read_contract_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(read_contract_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline read_contract_request* New() const final {
    return CreateMaybeMessage<read_contract_request>(nullptr);
  }

  read_contract_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<read_contract_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const read_contract_request& from);
  void MergeFrom(const read_contract_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(read_contract_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.read_contract_request";
  }
  protected:
  explicit read_contract_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kArgsFieldNumber = 3,
    kEntryPointFieldNumber = 2,
  };
  // bytes contract_id = 1;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const void* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // bytes args = 3;
  void clear_args();
  const std::string& args() const;
  void set_args(const std::string& value);
  void set_args(std::string&& value);
  void set_args(const char* value);
  void set_args(const void* value, size_t size);
  std::string* mutable_args();
  std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // uint32 entry_point = 2;
  void clear_entry_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point() const;
  void set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entry_point() const;
  void _internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.read_contract_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class read_contract_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.read_contract_response) */ {
 public:
  inline read_contract_response() : read_contract_response(nullptr) {}
  virtual ~read_contract_response();

  read_contract_response(const read_contract_response& from);
  read_contract_response(read_contract_response&& from) noexcept
    : read_contract_response() {
    *this = ::std::move(from);
  }

  inline read_contract_response& operator=(const read_contract_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline read_contract_response& operator=(read_contract_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const read_contract_response& default_instance();

  static inline const read_contract_response* internal_default_instance() {
    return reinterpret_cast<const read_contract_response*>(
               &_read_contract_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(read_contract_response& a, read_contract_response& b) {
    a.Swap(&b);
  }
  inline void Swap(read_contract_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(read_contract_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline read_contract_response* New() const final {
    return CreateMaybeMessage<read_contract_response>(nullptr);
  }

  read_contract_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<read_contract_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const read_contract_response& from);
  void MergeFrom(const read_contract_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(read_contract_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.read_contract_response";
  }
  protected:
  explicit read_contract_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kLogsFieldNumber = 2,
  };
  // bytes result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const void* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // string logs = 2;
  void clear_logs();
  const std::string& logs() const;
  void set_logs(const std::string& value);
  void set_logs(std::string&& value);
  void set_logs(const char* value);
  void set_logs(const char* value, size_t size);
  std::string* mutable_logs();
  std::string* release_logs();
  void set_allocated_logs(std::string* logs);
  private:
  const std::string& _internal_logs() const;
  void _internal_set_logs(const std::string& value);
  std::string* _internal_mutable_logs();
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.read_contract_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_account_nonce_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.get_account_nonce_request) */ {
 public:
  inline get_account_nonce_request() : get_account_nonce_request(nullptr) {}
  virtual ~get_account_nonce_request();

  get_account_nonce_request(const get_account_nonce_request& from);
  get_account_nonce_request(get_account_nonce_request&& from) noexcept
    : get_account_nonce_request() {
    *this = ::std::move(from);
  }

  inline get_account_nonce_request& operator=(const get_account_nonce_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_account_nonce_request& operator=(get_account_nonce_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_account_nonce_request& default_instance();

  static inline const get_account_nonce_request* internal_default_instance() {
    return reinterpret_cast<const get_account_nonce_request*>(
               &_get_account_nonce_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(get_account_nonce_request& a, get_account_nonce_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_account_nonce_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_account_nonce_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_account_nonce_request* New() const final {
    return CreateMaybeMessage<get_account_nonce_request>(nullptr);
  }

  get_account_nonce_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_account_nonce_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_account_nonce_request& from);
  void MergeFrom(const get_account_nonce_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_account_nonce_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.get_account_nonce_request";
  }
  protected:
  explicit get_account_nonce_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.get_account_nonce_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_account_nonce_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.get_account_nonce_response) */ {
 public:
  inline get_account_nonce_response() : get_account_nonce_response(nullptr) {}
  virtual ~get_account_nonce_response();

  get_account_nonce_response(const get_account_nonce_response& from);
  get_account_nonce_response(get_account_nonce_response&& from) noexcept
    : get_account_nonce_response() {
    *this = ::std::move(from);
  }

  inline get_account_nonce_response& operator=(const get_account_nonce_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_account_nonce_response& operator=(get_account_nonce_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_account_nonce_response& default_instance();

  static inline const get_account_nonce_response* internal_default_instance() {
    return reinterpret_cast<const get_account_nonce_response*>(
               &_get_account_nonce_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(get_account_nonce_response& a, get_account_nonce_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_account_nonce_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_account_nonce_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_account_nonce_response* New() const final {
    return CreateMaybeMessage<get_account_nonce_response>(nullptr);
  }

  get_account_nonce_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_account_nonce_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_account_nonce_response& from);
  void MergeFrom(const get_account_nonce_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_account_nonce_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.get_account_nonce_response";
  }
  protected:
  explicit get_account_nonce_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceFieldNumber = 1,
  };
  // uint64 nonce = 1;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.get_account_nonce_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class chain_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.chain_request) */ {
 public:
  inline chain_request() : chain_request(nullptr) {}
  virtual ~chain_request();

  chain_request(const chain_request& from);
  chain_request(chain_request&& from) noexcept
    : chain_request() {
    *this = ::std::move(from);
  }

  inline chain_request& operator=(const chain_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline chain_request& operator=(chain_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chain_request& default_instance();

  enum RequestCase {
    kReserved = 1,
    kSubmitBlock = 2,
    kSubmitTransaction = 3,
    kGetHeadInfo = 4,
    kGetChainId = 5,
    kGetForkHeads = 6,
    kReadContract = 7,
    kGetAccountNonce = 8,
    REQUEST_NOT_SET = 0,
  };

  static inline const chain_request* internal_default_instance() {
    return reinterpret_cast<const chain_request*>(
               &_chain_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(chain_request& a, chain_request& b) {
    a.Swap(&b);
  }
  inline void Swap(chain_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(chain_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chain_request* New() const final {
    return CreateMaybeMessage<chain_request>(nullptr);
  }

  chain_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chain_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chain_request& from);
  void MergeFrom(const chain_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chain_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.chain_request";
  }
  protected:
  explicit chain_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kSubmitBlockFieldNumber = 2,
    kSubmitTransactionFieldNumber = 3,
    kGetHeadInfoFieldNumber = 4,
    kGetChainIdFieldNumber = 5,
    kGetForkHeadsFieldNumber = 6,
    kReadContractFieldNumber = 7,
    kGetAccountNonceFieldNumber = 8,
  };
  // .koinos.rpc.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::rpc::reserved_rpc& reserved() const;
  ::koinos::rpc::reserved_rpc* release_reserved();
  ::koinos::rpc::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved);
  private:
  const ::koinos::rpc::reserved_rpc& _internal_reserved() const;
  ::koinos::rpc::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::rpc::reserved_rpc* reserved);
  ::koinos::rpc::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.rpc.chain.submit_block_request submit_block = 2;
  bool has_submit_block() const;
  private:
  bool _internal_has_submit_block() const;
  public:
  void clear_submit_block();
  const ::koinos::rpc::chain::submit_block_request& submit_block() const;
  ::koinos::rpc::chain::submit_block_request* release_submit_block();
  ::koinos::rpc::chain::submit_block_request* mutable_submit_block();
  void set_allocated_submit_block(::koinos::rpc::chain::submit_block_request* submit_block);
  private:
  const ::koinos::rpc::chain::submit_block_request& _internal_submit_block() const;
  ::koinos::rpc::chain::submit_block_request* _internal_mutable_submit_block();
  public:
  void unsafe_arena_set_allocated_submit_block(
      ::koinos::rpc::chain::submit_block_request* submit_block);
  ::koinos::rpc::chain::submit_block_request* unsafe_arena_release_submit_block();

  // .koinos.rpc.chain.submit_transaction_request submit_transaction = 3;
  bool has_submit_transaction() const;
  private:
  bool _internal_has_submit_transaction() const;
  public:
  void clear_submit_transaction();
  const ::koinos::rpc::chain::submit_transaction_request& submit_transaction() const;
  ::koinos::rpc::chain::submit_transaction_request* release_submit_transaction();
  ::koinos::rpc::chain::submit_transaction_request* mutable_submit_transaction();
  void set_allocated_submit_transaction(::koinos::rpc::chain::submit_transaction_request* submit_transaction);
  private:
  const ::koinos::rpc::chain::submit_transaction_request& _internal_submit_transaction() const;
  ::koinos::rpc::chain::submit_transaction_request* _internal_mutable_submit_transaction();
  public:
  void unsafe_arena_set_allocated_submit_transaction(
      ::koinos::rpc::chain::submit_transaction_request* submit_transaction);
  ::koinos::rpc::chain::submit_transaction_request* unsafe_arena_release_submit_transaction();

  // .koinos.rpc.chain.get_head_info_request get_head_info = 4;
  bool has_get_head_info() const;
  private:
  bool _internal_has_get_head_info() const;
  public:
  void clear_get_head_info();
  const ::koinos::rpc::chain::get_head_info_request& get_head_info() const;
  ::koinos::rpc::chain::get_head_info_request* release_get_head_info();
  ::koinos::rpc::chain::get_head_info_request* mutable_get_head_info();
  void set_allocated_get_head_info(::koinos::rpc::chain::get_head_info_request* get_head_info);
  private:
  const ::koinos::rpc::chain::get_head_info_request& _internal_get_head_info() const;
  ::koinos::rpc::chain::get_head_info_request* _internal_mutable_get_head_info();
  public:
  void unsafe_arena_set_allocated_get_head_info(
      ::koinos::rpc::chain::get_head_info_request* get_head_info);
  ::koinos::rpc::chain::get_head_info_request* unsafe_arena_release_get_head_info();

  // .koinos.rpc.chain.get_chain_id_request get_chain_id = 5;
  bool has_get_chain_id() const;
  private:
  bool _internal_has_get_chain_id() const;
  public:
  void clear_get_chain_id();
  const ::koinos::rpc::chain::get_chain_id_request& get_chain_id() const;
  ::koinos::rpc::chain::get_chain_id_request* release_get_chain_id();
  ::koinos::rpc::chain::get_chain_id_request* mutable_get_chain_id();
  void set_allocated_get_chain_id(::koinos::rpc::chain::get_chain_id_request* get_chain_id);
  private:
  const ::koinos::rpc::chain::get_chain_id_request& _internal_get_chain_id() const;
  ::koinos::rpc::chain::get_chain_id_request* _internal_mutable_get_chain_id();
  public:
  void unsafe_arena_set_allocated_get_chain_id(
      ::koinos::rpc::chain::get_chain_id_request* get_chain_id);
  ::koinos::rpc::chain::get_chain_id_request* unsafe_arena_release_get_chain_id();

  // .koinos.rpc.chain.get_fork_heads_request get_fork_heads = 6;
  bool has_get_fork_heads() const;
  private:
  bool _internal_has_get_fork_heads() const;
  public:
  void clear_get_fork_heads();
  const ::koinos::rpc::chain::get_fork_heads_request& get_fork_heads() const;
  ::koinos::rpc::chain::get_fork_heads_request* release_get_fork_heads();
  ::koinos::rpc::chain::get_fork_heads_request* mutable_get_fork_heads();
  void set_allocated_get_fork_heads(::koinos::rpc::chain::get_fork_heads_request* get_fork_heads);
  private:
  const ::koinos::rpc::chain::get_fork_heads_request& _internal_get_fork_heads() const;
  ::koinos::rpc::chain::get_fork_heads_request* _internal_mutable_get_fork_heads();
  public:
  void unsafe_arena_set_allocated_get_fork_heads(
      ::koinos::rpc::chain::get_fork_heads_request* get_fork_heads);
  ::koinos::rpc::chain::get_fork_heads_request* unsafe_arena_release_get_fork_heads();

  // .koinos.rpc.chain.read_contract_request read_contract = 7;
  bool has_read_contract() const;
  private:
  bool _internal_has_read_contract() const;
  public:
  void clear_read_contract();
  const ::koinos::rpc::chain::read_contract_request& read_contract() const;
  ::koinos::rpc::chain::read_contract_request* release_read_contract();
  ::koinos::rpc::chain::read_contract_request* mutable_read_contract();
  void set_allocated_read_contract(::koinos::rpc::chain::read_contract_request* read_contract);
  private:
  const ::koinos::rpc::chain::read_contract_request& _internal_read_contract() const;
  ::koinos::rpc::chain::read_contract_request* _internal_mutable_read_contract();
  public:
  void unsafe_arena_set_allocated_read_contract(
      ::koinos::rpc::chain::read_contract_request* read_contract);
  ::koinos::rpc::chain::read_contract_request* unsafe_arena_release_read_contract();

  // .koinos.rpc.chain.get_account_nonce_request get_account_nonce = 8;
  bool has_get_account_nonce() const;
  private:
  bool _internal_has_get_account_nonce() const;
  public:
  void clear_get_account_nonce();
  const ::koinos::rpc::chain::get_account_nonce_request& get_account_nonce() const;
  ::koinos::rpc::chain::get_account_nonce_request* release_get_account_nonce();
  ::koinos::rpc::chain::get_account_nonce_request* mutable_get_account_nonce();
  void set_allocated_get_account_nonce(::koinos::rpc::chain::get_account_nonce_request* get_account_nonce);
  private:
  const ::koinos::rpc::chain::get_account_nonce_request& _internal_get_account_nonce() const;
  ::koinos::rpc::chain::get_account_nonce_request* _internal_mutable_get_account_nonce();
  public:
  void unsafe_arena_set_allocated_get_account_nonce(
      ::koinos::rpc::chain::get_account_nonce_request* get_account_nonce);
  ::koinos::rpc::chain::get_account_nonce_request* unsafe_arena_release_get_account_nonce();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.chain_request)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_submit_block();
  void set_has_submit_transaction();
  void set_has_get_head_info();
  void set_has_get_chain_id();
  void set_has_get_fork_heads();
  void set_has_read_contract();
  void set_has_get_account_nonce();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestUnion {
    RequestUnion() {}
    ::koinos::rpc::reserved_rpc* reserved_;
    ::koinos::rpc::chain::submit_block_request* submit_block_;
    ::koinos::rpc::chain::submit_transaction_request* submit_transaction_;
    ::koinos::rpc::chain::get_head_info_request* get_head_info_;
    ::koinos::rpc::chain::get_chain_id_request* get_chain_id_;
    ::koinos::rpc::chain::get_fork_heads_request* get_fork_heads_;
    ::koinos::rpc::chain::read_contract_request* read_contract_;
    ::koinos::rpc::chain::get_account_nonce_request* get_account_nonce_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// -------------------------------------------------------------------

class chain_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.chain.chain_response) */ {
 public:
  inline chain_response() : chain_response(nullptr) {}
  virtual ~chain_response();

  chain_response(const chain_response& from);
  chain_response(chain_response&& from) noexcept
    : chain_response() {
    *this = ::std::move(from);
  }

  inline chain_response& operator=(const chain_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline chain_response& operator=(chain_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chain_response& default_instance();

  enum ResponseCase {
    kReserved = 1,
    kError = 2,
    kSubmitBlock = 3,
    kSubmitTransaction = 4,
    kGetHeadInfo = 5,
    kGetChainId = 6,
    kGetForkHeads = 7,
    kReadContract = 8,
    kGetAccountNonce = 9,
    RESPONSE_NOT_SET = 0,
  };

  static inline const chain_response* internal_default_instance() {
    return reinterpret_cast<const chain_response*>(
               &_chain_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(chain_response& a, chain_response& b) {
    a.Swap(&b);
  }
  inline void Swap(chain_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(chain_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chain_response* New() const final {
    return CreateMaybeMessage<chain_response>(nullptr);
  }

  chain_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chain_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chain_response& from);
  void MergeFrom(const chain_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chain_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.chain.chain_response";
  }
  protected:
  explicit chain_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kErrorFieldNumber = 2,
    kSubmitBlockFieldNumber = 3,
    kSubmitTransactionFieldNumber = 4,
    kGetHeadInfoFieldNumber = 5,
    kGetChainIdFieldNumber = 6,
    kGetForkHeadsFieldNumber = 7,
    kReadContractFieldNumber = 8,
    kGetAccountNonceFieldNumber = 9,
  };
  // .koinos.rpc.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::rpc::reserved_rpc& reserved() const;
  ::koinos::rpc::reserved_rpc* release_reserved();
  ::koinos::rpc::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved);
  private:
  const ::koinos::rpc::reserved_rpc& _internal_reserved() const;
  ::koinos::rpc::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::rpc::reserved_rpc* reserved);
  ::koinos::rpc::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.rpc.error_response error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::koinos::rpc::error_response& error() const;
  ::koinos::rpc::error_response* release_error();
  ::koinos::rpc::error_response* mutable_error();
  void set_allocated_error(::koinos::rpc::error_response* error);
  private:
  const ::koinos::rpc::error_response& _internal_error() const;
  ::koinos::rpc::error_response* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::koinos::rpc::error_response* error);
  ::koinos::rpc::error_response* unsafe_arena_release_error();

  // .koinos.rpc.chain.submit_block_response submit_block = 3;
  bool has_submit_block() const;
  private:
  bool _internal_has_submit_block() const;
  public:
  void clear_submit_block();
  const ::koinos::rpc::chain::submit_block_response& submit_block() const;
  ::koinos::rpc::chain::submit_block_response* release_submit_block();
  ::koinos::rpc::chain::submit_block_response* mutable_submit_block();
  void set_allocated_submit_block(::koinos::rpc::chain::submit_block_response* submit_block);
  private:
  const ::koinos::rpc::chain::submit_block_response& _internal_submit_block() const;
  ::koinos::rpc::chain::submit_block_response* _internal_mutable_submit_block();
  public:
  void unsafe_arena_set_allocated_submit_block(
      ::koinos::rpc::chain::submit_block_response* submit_block);
  ::koinos::rpc::chain::submit_block_response* unsafe_arena_release_submit_block();

  // .koinos.rpc.chain.submit_transaction_response submit_transaction = 4;
  bool has_submit_transaction() const;
  private:
  bool _internal_has_submit_transaction() const;
  public:
  void clear_submit_transaction();
  const ::koinos::rpc::chain::submit_transaction_response& submit_transaction() const;
  ::koinos::rpc::chain::submit_transaction_response* release_submit_transaction();
  ::koinos::rpc::chain::submit_transaction_response* mutable_submit_transaction();
  void set_allocated_submit_transaction(::koinos::rpc::chain::submit_transaction_response* submit_transaction);
  private:
  const ::koinos::rpc::chain::submit_transaction_response& _internal_submit_transaction() const;
  ::koinos::rpc::chain::submit_transaction_response* _internal_mutable_submit_transaction();
  public:
  void unsafe_arena_set_allocated_submit_transaction(
      ::koinos::rpc::chain::submit_transaction_response* submit_transaction);
  ::koinos::rpc::chain::submit_transaction_response* unsafe_arena_release_submit_transaction();

  // .koinos.rpc.chain.get_head_info_response get_head_info = 5;
  bool has_get_head_info() const;
  private:
  bool _internal_has_get_head_info() const;
  public:
  void clear_get_head_info();
  const ::koinos::rpc::chain::get_head_info_response& get_head_info() const;
  ::koinos::rpc::chain::get_head_info_response* release_get_head_info();
  ::koinos::rpc::chain::get_head_info_response* mutable_get_head_info();
  void set_allocated_get_head_info(::koinos::rpc::chain::get_head_info_response* get_head_info);
  private:
  const ::koinos::rpc::chain::get_head_info_response& _internal_get_head_info() const;
  ::koinos::rpc::chain::get_head_info_response* _internal_mutable_get_head_info();
  public:
  void unsafe_arena_set_allocated_get_head_info(
      ::koinos::rpc::chain::get_head_info_response* get_head_info);
  ::koinos::rpc::chain::get_head_info_response* unsafe_arena_release_get_head_info();

  // .koinos.rpc.chain.get_chain_id_response get_chain_id = 6;
  bool has_get_chain_id() const;
  private:
  bool _internal_has_get_chain_id() const;
  public:
  void clear_get_chain_id();
  const ::koinos::rpc::chain::get_chain_id_response& get_chain_id() const;
  ::koinos::rpc::chain::get_chain_id_response* release_get_chain_id();
  ::koinos::rpc::chain::get_chain_id_response* mutable_get_chain_id();
  void set_allocated_get_chain_id(::koinos::rpc::chain::get_chain_id_response* get_chain_id);
  private:
  const ::koinos::rpc::chain::get_chain_id_response& _internal_get_chain_id() const;
  ::koinos::rpc::chain::get_chain_id_response* _internal_mutable_get_chain_id();
  public:
  void unsafe_arena_set_allocated_get_chain_id(
      ::koinos::rpc::chain::get_chain_id_response* get_chain_id);
  ::koinos::rpc::chain::get_chain_id_response* unsafe_arena_release_get_chain_id();

  // .koinos.rpc.chain.get_fork_heads_response get_fork_heads = 7;
  bool has_get_fork_heads() const;
  private:
  bool _internal_has_get_fork_heads() const;
  public:
  void clear_get_fork_heads();
  const ::koinos::rpc::chain::get_fork_heads_response& get_fork_heads() const;
  ::koinos::rpc::chain::get_fork_heads_response* release_get_fork_heads();
  ::koinos::rpc::chain::get_fork_heads_response* mutable_get_fork_heads();
  void set_allocated_get_fork_heads(::koinos::rpc::chain::get_fork_heads_response* get_fork_heads);
  private:
  const ::koinos::rpc::chain::get_fork_heads_response& _internal_get_fork_heads() const;
  ::koinos::rpc::chain::get_fork_heads_response* _internal_mutable_get_fork_heads();
  public:
  void unsafe_arena_set_allocated_get_fork_heads(
      ::koinos::rpc::chain::get_fork_heads_response* get_fork_heads);
  ::koinos::rpc::chain::get_fork_heads_response* unsafe_arena_release_get_fork_heads();

  // .koinos.rpc.chain.read_contract_response read_contract = 8;
  bool has_read_contract() const;
  private:
  bool _internal_has_read_contract() const;
  public:
  void clear_read_contract();
  const ::koinos::rpc::chain::read_contract_response& read_contract() const;
  ::koinos::rpc::chain::read_contract_response* release_read_contract();
  ::koinos::rpc::chain::read_contract_response* mutable_read_contract();
  void set_allocated_read_contract(::koinos::rpc::chain::read_contract_response* read_contract);
  private:
  const ::koinos::rpc::chain::read_contract_response& _internal_read_contract() const;
  ::koinos::rpc::chain::read_contract_response* _internal_mutable_read_contract();
  public:
  void unsafe_arena_set_allocated_read_contract(
      ::koinos::rpc::chain::read_contract_response* read_contract);
  ::koinos::rpc::chain::read_contract_response* unsafe_arena_release_read_contract();

  // .koinos.rpc.chain.get_account_nonce_response get_account_nonce = 9;
  bool has_get_account_nonce() const;
  private:
  bool _internal_has_get_account_nonce() const;
  public:
  void clear_get_account_nonce();
  const ::koinos::rpc::chain::get_account_nonce_response& get_account_nonce() const;
  ::koinos::rpc::chain::get_account_nonce_response* release_get_account_nonce();
  ::koinos::rpc::chain::get_account_nonce_response* mutable_get_account_nonce();
  void set_allocated_get_account_nonce(::koinos::rpc::chain::get_account_nonce_response* get_account_nonce);
  private:
  const ::koinos::rpc::chain::get_account_nonce_response& _internal_get_account_nonce() const;
  ::koinos::rpc::chain::get_account_nonce_response* _internal_mutable_get_account_nonce();
  public:
  void unsafe_arena_set_allocated_get_account_nonce(
      ::koinos::rpc::chain::get_account_nonce_response* get_account_nonce);
  ::koinos::rpc::chain::get_account_nonce_response* unsafe_arena_release_get_account_nonce();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.chain.chain_response)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_error();
  void set_has_submit_block();
  void set_has_submit_transaction();
  void set_has_get_head_info();
  void set_has_get_chain_id();
  void set_has_get_fork_heads();
  void set_has_read_contract();
  void set_has_get_account_nonce();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResponseUnion {
    ResponseUnion() {}
    ::koinos::rpc::reserved_rpc* reserved_;
    ::koinos::rpc::error_response* error_;
    ::koinos::rpc::chain::submit_block_response* submit_block_;
    ::koinos::rpc::chain::submit_transaction_response* submit_transaction_;
    ::koinos::rpc::chain::get_head_info_response* get_head_info_;
    ::koinos::rpc::chain::get_chain_id_response* get_chain_id_;
    ::koinos::rpc::chain::get_fork_heads_response* get_fork_heads_;
    ::koinos::rpc::chain::read_contract_response* read_contract_;
    ::koinos::rpc::chain::get_account_nonce_response* get_account_nonce_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// submit_block_request

// .koinos.protocol.block block = 1;
inline bool submit_block_request::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool submit_block_request::has_block() const {
  return _internal_has_block();
}
inline const ::koinos::protocol::block& submit_block_request::_internal_block() const {
  const ::koinos::protocol::block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block&>(
      ::koinos::protocol::_block_default_instance_);
}
inline const ::koinos::protocol::block& submit_block_request::block() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.submit_block_request.block)
  return _internal_block();
}
inline void submit_block_request::unsafe_arena_set_allocated_block(
    ::koinos::protocol::block* block) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.submit_block_request.block)
}
inline ::koinos::protocol::block* submit_block_request::release_block() {
  
  ::koinos::protocol::block* temp = block_;
  block_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::block* submit_block_request::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.submit_block_request.block)
  
  ::koinos::protocol::block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block* submit_block_request::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block>(GetArena());
    block_ = p;
  }
  return block_;
}
inline ::koinos::protocol::block* submit_block_request::mutable_block() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.submit_block_request.block)
  return _internal_mutable_block();
}
inline void submit_block_request::set_allocated_block(::koinos::protocol::block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block)->GetArena();
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.submit_block_request.block)
}

// bool verify_passive_data = 2;
inline void submit_block_request::clear_verify_passive_data() {
  verify_passive_data_ = false;
}
inline bool submit_block_request::_internal_verify_passive_data() const {
  return verify_passive_data_;
}
inline bool submit_block_request::verify_passive_data() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.submit_block_request.verify_passive_data)
  return _internal_verify_passive_data();
}
inline void submit_block_request::_internal_set_verify_passive_data(bool value) {
  
  verify_passive_data_ = value;
}
inline void submit_block_request::set_verify_passive_data(bool value) {
  _internal_set_verify_passive_data(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.submit_block_request.verify_passive_data)
}

// bool verify_block_signature = 3;
inline void submit_block_request::clear_verify_block_signature() {
  verify_block_signature_ = false;
}
inline bool submit_block_request::_internal_verify_block_signature() const {
  return verify_block_signature_;
}
inline bool submit_block_request::verify_block_signature() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.submit_block_request.verify_block_signature)
  return _internal_verify_block_signature();
}
inline void submit_block_request::_internal_set_verify_block_signature(bool value) {
  
  verify_block_signature_ = value;
}
inline void submit_block_request::set_verify_block_signature(bool value) {
  _internal_set_verify_block_signature(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.submit_block_request.verify_block_signature)
}

// bool verify_transaction_signature = 4;
inline void submit_block_request::clear_verify_transaction_signature() {
  verify_transaction_signature_ = false;
}
inline bool submit_block_request::_internal_verify_transaction_signature() const {
  return verify_transaction_signature_;
}
inline bool submit_block_request::verify_transaction_signature() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.submit_block_request.verify_transaction_signature)
  return _internal_verify_transaction_signature();
}
inline void submit_block_request::_internal_set_verify_transaction_signature(bool value) {
  
  verify_transaction_signature_ = value;
}
inline void submit_block_request::set_verify_transaction_signature(bool value) {
  _internal_set_verify_transaction_signature(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.submit_block_request.verify_transaction_signature)
}

// -------------------------------------------------------------------

// submit_block_response

// -------------------------------------------------------------------

// submit_transaction_request

// .koinos.protocol.transaction transaction = 1;
inline bool submit_transaction_request::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool submit_transaction_request::has_transaction() const {
  return _internal_has_transaction();
}
inline const ::koinos::protocol::transaction& submit_transaction_request::_internal_transaction() const {
  const ::koinos::protocol::transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::transaction&>(
      ::koinos::protocol::_transaction_default_instance_);
}
inline const ::koinos::protocol::transaction& submit_transaction_request::transaction() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.submit_transaction_request.transaction)
  return _internal_transaction();
}
inline void submit_transaction_request::unsafe_arena_set_allocated_transaction(
    ::koinos::protocol::transaction* transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.submit_transaction_request.transaction)
}
inline ::koinos::protocol::transaction* submit_transaction_request::release_transaction() {
  
  ::koinos::protocol::transaction* temp = transaction_;
  transaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::transaction* submit_transaction_request::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.submit_transaction_request.transaction)
  
  ::koinos::protocol::transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::koinos::protocol::transaction* submit_transaction_request::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::transaction>(GetArena());
    transaction_ = p;
  }
  return transaction_;
}
inline ::koinos::protocol::transaction* submit_transaction_request::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.submit_transaction_request.transaction)
  return _internal_mutable_transaction();
}
inline void submit_transaction_request::set_allocated_transaction(::koinos::protocol::transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction)->GetArena();
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.submit_transaction_request.transaction)
}

// bool verify_passive_data = 2;
inline void submit_transaction_request::clear_verify_passive_data() {
  verify_passive_data_ = false;
}
inline bool submit_transaction_request::_internal_verify_passive_data() const {
  return verify_passive_data_;
}
inline bool submit_transaction_request::verify_passive_data() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.submit_transaction_request.verify_passive_data)
  return _internal_verify_passive_data();
}
inline void submit_transaction_request::_internal_set_verify_passive_data(bool value) {
  
  verify_passive_data_ = value;
}
inline void submit_transaction_request::set_verify_passive_data(bool value) {
  _internal_set_verify_passive_data(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.submit_transaction_request.verify_passive_data)
}

// bool verify_transaction_signature = 3;
inline void submit_transaction_request::clear_verify_transaction_signature() {
  verify_transaction_signature_ = false;
}
inline bool submit_transaction_request::_internal_verify_transaction_signature() const {
  return verify_transaction_signature_;
}
inline bool submit_transaction_request::verify_transaction_signature() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.submit_transaction_request.verify_transaction_signature)
  return _internal_verify_transaction_signature();
}
inline void submit_transaction_request::_internal_set_verify_transaction_signature(bool value) {
  
  verify_transaction_signature_ = value;
}
inline void submit_transaction_request::set_verify_transaction_signature(bool value) {
  _internal_set_verify_transaction_signature(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.submit_transaction_request.verify_transaction_signature)
}

// -------------------------------------------------------------------

// submit_transaction_response

// -------------------------------------------------------------------

// get_head_info_request

// -------------------------------------------------------------------

// get_head_info_response

// .koinos.block_topology head_topology = 1;
inline bool get_head_info_response::_internal_has_head_topology() const {
  return this != internal_default_instance() && head_topology_ != nullptr;
}
inline bool get_head_info_response::has_head_topology() const {
  return _internal_has_head_topology();
}
inline const ::koinos::block_topology& get_head_info_response::_internal_head_topology() const {
  const ::koinos::block_topology* p = head_topology_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::block_topology&>(
      ::koinos::_block_topology_default_instance_);
}
inline const ::koinos::block_topology& get_head_info_response::head_topology() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.get_head_info_response.head_topology)
  return _internal_head_topology();
}
inline void get_head_info_response::unsafe_arena_set_allocated_head_topology(
    ::koinos::block_topology* head_topology) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_topology_);
  }
  head_topology_ = head_topology;
  if (head_topology) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.get_head_info_response.head_topology)
}
inline ::koinos::block_topology* get_head_info_response::release_head_topology() {
  
  ::koinos::block_topology* temp = head_topology_;
  head_topology_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::block_topology* get_head_info_response::unsafe_arena_release_head_topology() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.get_head_info_response.head_topology)
  
  ::koinos::block_topology* temp = head_topology_;
  head_topology_ = nullptr;
  return temp;
}
inline ::koinos::block_topology* get_head_info_response::_internal_mutable_head_topology() {
  
  if (head_topology_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::block_topology>(GetArena());
    head_topology_ = p;
  }
  return head_topology_;
}
inline ::koinos::block_topology* get_head_info_response::mutable_head_topology() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.get_head_info_response.head_topology)
  return _internal_mutable_head_topology();
}
inline void get_head_info_response::set_allocated_head_topology(::koinos::block_topology* head_topology) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_topology_);
  }
  if (head_topology) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_topology)->GetArena();
    if (message_arena != submessage_arena) {
      head_topology = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head_topology, submessage_arena);
    }
    
  } else {
    
  }
  head_topology_ = head_topology;
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.get_head_info_response.head_topology)
}

// uint64 last_irreversible_block = 2;
inline void get_head_info_response::clear_last_irreversible_block() {
  last_irreversible_block_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_head_info_response::_internal_last_irreversible_block() const {
  return last_irreversible_block_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_head_info_response::last_irreversible_block() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.get_head_info_response.last_irreversible_block)
  return _internal_last_irreversible_block();
}
inline void get_head_info_response::_internal_set_last_irreversible_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_irreversible_block_ = value;
}
inline void get_head_info_response::set_last_irreversible_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_irreversible_block(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.get_head_info_response.last_irreversible_block)
}

// -------------------------------------------------------------------

// get_chain_id_request

// -------------------------------------------------------------------

// get_chain_id_response

// bytes chain_id = 1;
inline void get_chain_id_response::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& get_chain_id_response::chain_id() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.get_chain_id_response.chain_id)
  return _internal_chain_id();
}
inline void get_chain_id_response::set_chain_id(const std::string& value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.get_chain_id_response.chain_id)
}
inline std::string* get_chain_id_response::mutable_chain_id() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.get_chain_id_response.chain_id)
  return _internal_mutable_chain_id();
}
inline const std::string& get_chain_id_response::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void get_chain_id_response::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void get_chain_id_response::set_chain_id(std::string&& value) {
  
  chain_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.rpc.chain.get_chain_id_response.chain_id)
}
inline void get_chain_id_response::set_chain_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.rpc.chain.get_chain_id_response.chain_id)
}
inline void get_chain_id_response::set_chain_id(const void* value,
    size_t size) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.rpc.chain.get_chain_id_response.chain_id)
}
inline std::string* get_chain_id_response::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* get_chain_id_response::release_chain_id() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.get_chain_id_response.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_chain_id_response::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.get_chain_id_response.chain_id)
}

// -------------------------------------------------------------------

// get_fork_heads_request

// -------------------------------------------------------------------

// get_fork_heads_response

// .koinos.block_topology last_irreversible_block = 1;
inline bool get_fork_heads_response::_internal_has_last_irreversible_block() const {
  return this != internal_default_instance() && last_irreversible_block_ != nullptr;
}
inline bool get_fork_heads_response::has_last_irreversible_block() const {
  return _internal_has_last_irreversible_block();
}
inline const ::koinos::block_topology& get_fork_heads_response::_internal_last_irreversible_block() const {
  const ::koinos::block_topology* p = last_irreversible_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::block_topology&>(
      ::koinos::_block_topology_default_instance_);
}
inline const ::koinos::block_topology& get_fork_heads_response::last_irreversible_block() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.get_fork_heads_response.last_irreversible_block)
  return _internal_last_irreversible_block();
}
inline void get_fork_heads_response::unsafe_arena_set_allocated_last_irreversible_block(
    ::koinos::block_topology* last_irreversible_block) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_irreversible_block_);
  }
  last_irreversible_block_ = last_irreversible_block;
  if (last_irreversible_block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.get_fork_heads_response.last_irreversible_block)
}
inline ::koinos::block_topology* get_fork_heads_response::release_last_irreversible_block() {
  
  ::koinos::block_topology* temp = last_irreversible_block_;
  last_irreversible_block_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::block_topology* get_fork_heads_response::unsafe_arena_release_last_irreversible_block() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.get_fork_heads_response.last_irreversible_block)
  
  ::koinos::block_topology* temp = last_irreversible_block_;
  last_irreversible_block_ = nullptr;
  return temp;
}
inline ::koinos::block_topology* get_fork_heads_response::_internal_mutable_last_irreversible_block() {
  
  if (last_irreversible_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::block_topology>(GetArena());
    last_irreversible_block_ = p;
  }
  return last_irreversible_block_;
}
inline ::koinos::block_topology* get_fork_heads_response::mutable_last_irreversible_block() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.get_fork_heads_response.last_irreversible_block)
  return _internal_mutable_last_irreversible_block();
}
inline void get_fork_heads_response::set_allocated_last_irreversible_block(::koinos::block_topology* last_irreversible_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_irreversible_block_);
  }
  if (last_irreversible_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_irreversible_block)->GetArena();
    if (message_arena != submessage_arena) {
      last_irreversible_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_irreversible_block, submessage_arena);
    }
    
  } else {
    
  }
  last_irreversible_block_ = last_irreversible_block;
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.get_fork_heads_response.last_irreversible_block)
}

// repeated .koinos.block_topology fork_heads = 2;
inline int get_fork_heads_response::_internal_fork_heads_size() const {
  return fork_heads_.size();
}
inline int get_fork_heads_response::fork_heads_size() const {
  return _internal_fork_heads_size();
}
inline ::koinos::block_topology* get_fork_heads_response::mutable_fork_heads(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.get_fork_heads_response.fork_heads)
  return fork_heads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_topology >*
get_fork_heads_response::mutable_fork_heads() {
  // @@protoc_insertion_point(field_mutable_list:koinos.rpc.chain.get_fork_heads_response.fork_heads)
  return &fork_heads_;
}
inline const ::koinos::block_topology& get_fork_heads_response::_internal_fork_heads(int index) const {
  return fork_heads_.Get(index);
}
inline const ::koinos::block_topology& get_fork_heads_response::fork_heads(int index) const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.get_fork_heads_response.fork_heads)
  return _internal_fork_heads(index);
}
inline ::koinos::block_topology* get_fork_heads_response::_internal_add_fork_heads() {
  return fork_heads_.Add();
}
inline ::koinos::block_topology* get_fork_heads_response::add_fork_heads() {
  // @@protoc_insertion_point(field_add:koinos.rpc.chain.get_fork_heads_response.fork_heads)
  return _internal_add_fork_heads();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_topology >&
get_fork_heads_response::fork_heads() const {
  // @@protoc_insertion_point(field_list:koinos.rpc.chain.get_fork_heads_response.fork_heads)
  return fork_heads_;
}

// -------------------------------------------------------------------

// read_contract_request

// bytes contract_id = 1;
inline void read_contract_request::clear_contract_id() {
  contract_id_.ClearToEmpty();
}
inline const std::string& read_contract_request::contract_id() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.read_contract_request.contract_id)
  return _internal_contract_id();
}
inline void read_contract_request::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.read_contract_request.contract_id)
}
inline std::string* read_contract_request::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.read_contract_request.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& read_contract_request::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void read_contract_request::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void read_contract_request::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.rpc.chain.read_contract_request.contract_id)
}
inline void read_contract_request::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.rpc.chain.read_contract_request.contract_id)
}
inline void read_contract_request::set_contract_id(const void* value,
    size_t size) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.rpc.chain.read_contract_request.contract_id)
}
inline std::string* read_contract_request::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* read_contract_request::release_contract_id() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.read_contract_request.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void read_contract_request::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.read_contract_request.contract_id)
}

// uint32 entry_point = 2;
inline void read_contract_request::clear_entry_point() {
  entry_point_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 read_contract_request::_internal_entry_point() const {
  return entry_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 read_contract_request::entry_point() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.read_contract_request.entry_point)
  return _internal_entry_point();
}
inline void read_contract_request::_internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entry_point_ = value;
}
inline void read_contract_request::set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entry_point(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.read_contract_request.entry_point)
}

// bytes args = 3;
inline void read_contract_request::clear_args() {
  args_.ClearToEmpty();
}
inline const std::string& read_contract_request::args() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.read_contract_request.args)
  return _internal_args();
}
inline void read_contract_request::set_args(const std::string& value) {
  _internal_set_args(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.read_contract_request.args)
}
inline std::string* read_contract_request::mutable_args() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.read_contract_request.args)
  return _internal_mutable_args();
}
inline const std::string& read_contract_request::_internal_args() const {
  return args_.Get();
}
inline void read_contract_request::_internal_set_args(const std::string& value) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void read_contract_request::set_args(std::string&& value) {
  
  args_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.rpc.chain.read_contract_request.args)
}
inline void read_contract_request::set_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.rpc.chain.read_contract_request.args)
}
inline void read_contract_request::set_args(const void* value,
    size_t size) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.rpc.chain.read_contract_request.args)
}
inline std::string* read_contract_request::_internal_mutable_args() {
  
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* read_contract_request::release_args() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.read_contract_request.args)
  return args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void read_contract_request::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.read_contract_request.args)
}

// -------------------------------------------------------------------

// read_contract_response

// bytes result = 1;
inline void read_contract_response::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& read_contract_response::result() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.read_contract_response.result)
  return _internal_result();
}
inline void read_contract_response::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.read_contract_response.result)
}
inline std::string* read_contract_response::mutable_result() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.read_contract_response.result)
  return _internal_mutable_result();
}
inline const std::string& read_contract_response::_internal_result() const {
  return result_.Get();
}
inline void read_contract_response::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void read_contract_response::set_result(std::string&& value) {
  
  result_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.rpc.chain.read_contract_response.result)
}
inline void read_contract_response::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.rpc.chain.read_contract_response.result)
}
inline void read_contract_response::set_result(const void* value,
    size_t size) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.rpc.chain.read_contract_response.result)
}
inline std::string* read_contract_response::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* read_contract_response::release_result() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.read_contract_response.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void read_contract_response::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.read_contract_response.result)
}

// string logs = 2;
inline void read_contract_response::clear_logs() {
  logs_.ClearToEmpty();
}
inline const std::string& read_contract_response::logs() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.read_contract_response.logs)
  return _internal_logs();
}
inline void read_contract_response::set_logs(const std::string& value) {
  _internal_set_logs(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.read_contract_response.logs)
}
inline std::string* read_contract_response::mutable_logs() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.read_contract_response.logs)
  return _internal_mutable_logs();
}
inline const std::string& read_contract_response::_internal_logs() const {
  return logs_.Get();
}
inline void read_contract_response::_internal_set_logs(const std::string& value) {
  
  logs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void read_contract_response::set_logs(std::string&& value) {
  
  logs_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.rpc.chain.read_contract_response.logs)
}
inline void read_contract_response::set_logs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.rpc.chain.read_contract_response.logs)
}
inline void read_contract_response::set_logs(const char* value,
    size_t size) {
  
  logs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.rpc.chain.read_contract_response.logs)
}
inline std::string* read_contract_response::_internal_mutable_logs() {
  
  return logs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* read_contract_response::release_logs() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.read_contract_response.logs)
  return logs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void read_contract_response::set_allocated_logs(std::string* logs) {
  if (logs != nullptr) {
    
  } else {
    
  }
  logs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.read_contract_response.logs)
}

// -------------------------------------------------------------------

// get_account_nonce_request

// bytes account = 1;
inline void get_account_nonce_request::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& get_account_nonce_request::account() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.get_account_nonce_request.account)
  return _internal_account();
}
inline void get_account_nonce_request::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.get_account_nonce_request.account)
}
inline std::string* get_account_nonce_request::mutable_account() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.get_account_nonce_request.account)
  return _internal_mutable_account();
}
inline const std::string& get_account_nonce_request::_internal_account() const {
  return account_.Get();
}
inline void get_account_nonce_request::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void get_account_nonce_request::set_account(std::string&& value) {
  
  account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.rpc.chain.get_account_nonce_request.account)
}
inline void get_account_nonce_request::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.rpc.chain.get_account_nonce_request.account)
}
inline void get_account_nonce_request::set_account(const void* value,
    size_t size) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.rpc.chain.get_account_nonce_request.account)
}
inline std::string* get_account_nonce_request::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* get_account_nonce_request::release_account() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.get_account_nonce_request.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_account_nonce_request::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.get_account_nonce_request.account)
}

// -------------------------------------------------------------------

// get_account_nonce_response

// uint64 nonce = 1;
inline void get_account_nonce_response::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_account_nonce_response::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_account_nonce_response::nonce() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.get_account_nonce_response.nonce)
  return _internal_nonce();
}
inline void get_account_nonce_response::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void get_account_nonce_response::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.chain.get_account_nonce_response.nonce)
}

// -------------------------------------------------------------------

// chain_request

// .koinos.rpc.reserved_rpc reserved = 1;
inline bool chain_request::_internal_has_reserved() const {
  return request_case() == kReserved;
}
inline bool chain_request::has_reserved() const {
  return _internal_has_reserved();
}
inline void chain_request::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::rpc::reserved_rpc* chain_request::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
      ::koinos::rpc::reserved_rpc* temp = request_.reserved_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::reserved_rpc& chain_request::_internal_reserved() const {
  return _internal_has_reserved()
      ? *request_.reserved_
      : reinterpret_cast< ::koinos::rpc::reserved_rpc&>(::koinos::rpc::_reserved_rpc_default_instance_);
}
inline const ::koinos::rpc::reserved_rpc& chain_request::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_request.reserved)
  return _internal_reserved();
}
inline ::koinos::rpc::reserved_rpc* chain_request::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
    ::koinos::rpc::reserved_rpc* temp = request_.reserved_;
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_request::unsafe_arena_set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  clear_request();
  if (reserved) {
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_request.reserved)
}
inline ::koinos::rpc::reserved_rpc* chain_request::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_request();
    set_has_reserved();
    request_.reserved_ = CreateMaybeMessage< ::koinos::rpc::reserved_rpc >(GetArena());
  }
  return request_.reserved_;
}
inline ::koinos::rpc::reserved_rpc* chain_request::mutable_reserved() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_request.reserved)
  return _internal_mutable_reserved();
}

// .koinos.rpc.chain.submit_block_request submit_block = 2;
inline bool chain_request::_internal_has_submit_block() const {
  return request_case() == kSubmitBlock;
}
inline bool chain_request::has_submit_block() const {
  return _internal_has_submit_block();
}
inline void chain_request::set_has_submit_block() {
  _oneof_case_[0] = kSubmitBlock;
}
inline void chain_request::clear_submit_block() {
  if (_internal_has_submit_block()) {
    if (GetArena() == nullptr) {
      delete request_.submit_block_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::chain::submit_block_request* chain_request::release_submit_block() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_request.submit_block)
  if (_internal_has_submit_block()) {
    clear_has_request();
      ::koinos::rpc::chain::submit_block_request* temp = request_.submit_block_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.submit_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::submit_block_request& chain_request::_internal_submit_block() const {
  return _internal_has_submit_block()
      ? *request_.submit_block_
      : reinterpret_cast< ::koinos::rpc::chain::submit_block_request&>(::koinos::rpc::chain::_submit_block_request_default_instance_);
}
inline const ::koinos::rpc::chain::submit_block_request& chain_request::submit_block() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_request.submit_block)
  return _internal_submit_block();
}
inline ::koinos::rpc::chain::submit_block_request* chain_request::unsafe_arena_release_submit_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_request.submit_block)
  if (_internal_has_submit_block()) {
    clear_has_request();
    ::koinos::rpc::chain::submit_block_request* temp = request_.submit_block_;
    request_.submit_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_request::unsafe_arena_set_allocated_submit_block(::koinos::rpc::chain::submit_block_request* submit_block) {
  clear_request();
  if (submit_block) {
    set_has_submit_block();
    request_.submit_block_ = submit_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_request.submit_block)
}
inline ::koinos::rpc::chain::submit_block_request* chain_request::_internal_mutable_submit_block() {
  if (!_internal_has_submit_block()) {
    clear_request();
    set_has_submit_block();
    request_.submit_block_ = CreateMaybeMessage< ::koinos::rpc::chain::submit_block_request >(GetArena());
  }
  return request_.submit_block_;
}
inline ::koinos::rpc::chain::submit_block_request* chain_request::mutable_submit_block() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_request.submit_block)
  return _internal_mutable_submit_block();
}

// .koinos.rpc.chain.submit_transaction_request submit_transaction = 3;
inline bool chain_request::_internal_has_submit_transaction() const {
  return request_case() == kSubmitTransaction;
}
inline bool chain_request::has_submit_transaction() const {
  return _internal_has_submit_transaction();
}
inline void chain_request::set_has_submit_transaction() {
  _oneof_case_[0] = kSubmitTransaction;
}
inline void chain_request::clear_submit_transaction() {
  if (_internal_has_submit_transaction()) {
    if (GetArena() == nullptr) {
      delete request_.submit_transaction_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::chain::submit_transaction_request* chain_request::release_submit_transaction() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_request.submit_transaction)
  if (_internal_has_submit_transaction()) {
    clear_has_request();
      ::koinos::rpc::chain::submit_transaction_request* temp = request_.submit_transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.submit_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::submit_transaction_request& chain_request::_internal_submit_transaction() const {
  return _internal_has_submit_transaction()
      ? *request_.submit_transaction_
      : reinterpret_cast< ::koinos::rpc::chain::submit_transaction_request&>(::koinos::rpc::chain::_submit_transaction_request_default_instance_);
}
inline const ::koinos::rpc::chain::submit_transaction_request& chain_request::submit_transaction() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_request.submit_transaction)
  return _internal_submit_transaction();
}
inline ::koinos::rpc::chain::submit_transaction_request* chain_request::unsafe_arena_release_submit_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_request.submit_transaction)
  if (_internal_has_submit_transaction()) {
    clear_has_request();
    ::koinos::rpc::chain::submit_transaction_request* temp = request_.submit_transaction_;
    request_.submit_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_request::unsafe_arena_set_allocated_submit_transaction(::koinos::rpc::chain::submit_transaction_request* submit_transaction) {
  clear_request();
  if (submit_transaction) {
    set_has_submit_transaction();
    request_.submit_transaction_ = submit_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_request.submit_transaction)
}
inline ::koinos::rpc::chain::submit_transaction_request* chain_request::_internal_mutable_submit_transaction() {
  if (!_internal_has_submit_transaction()) {
    clear_request();
    set_has_submit_transaction();
    request_.submit_transaction_ = CreateMaybeMessage< ::koinos::rpc::chain::submit_transaction_request >(GetArena());
  }
  return request_.submit_transaction_;
}
inline ::koinos::rpc::chain::submit_transaction_request* chain_request::mutable_submit_transaction() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_request.submit_transaction)
  return _internal_mutable_submit_transaction();
}

// .koinos.rpc.chain.get_head_info_request get_head_info = 4;
inline bool chain_request::_internal_has_get_head_info() const {
  return request_case() == kGetHeadInfo;
}
inline bool chain_request::has_get_head_info() const {
  return _internal_has_get_head_info();
}
inline void chain_request::set_has_get_head_info() {
  _oneof_case_[0] = kGetHeadInfo;
}
inline void chain_request::clear_get_head_info() {
  if (_internal_has_get_head_info()) {
    if (GetArena() == nullptr) {
      delete request_.get_head_info_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::chain::get_head_info_request* chain_request::release_get_head_info() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_request.get_head_info)
  if (_internal_has_get_head_info()) {
    clear_has_request();
      ::koinos::rpc::chain::get_head_info_request* temp = request_.get_head_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_head_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::get_head_info_request& chain_request::_internal_get_head_info() const {
  return _internal_has_get_head_info()
      ? *request_.get_head_info_
      : reinterpret_cast< ::koinos::rpc::chain::get_head_info_request&>(::koinos::rpc::chain::_get_head_info_request_default_instance_);
}
inline const ::koinos::rpc::chain::get_head_info_request& chain_request::get_head_info() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_request.get_head_info)
  return _internal_get_head_info();
}
inline ::koinos::rpc::chain::get_head_info_request* chain_request::unsafe_arena_release_get_head_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_request.get_head_info)
  if (_internal_has_get_head_info()) {
    clear_has_request();
    ::koinos::rpc::chain::get_head_info_request* temp = request_.get_head_info_;
    request_.get_head_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_request::unsafe_arena_set_allocated_get_head_info(::koinos::rpc::chain::get_head_info_request* get_head_info) {
  clear_request();
  if (get_head_info) {
    set_has_get_head_info();
    request_.get_head_info_ = get_head_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_request.get_head_info)
}
inline ::koinos::rpc::chain::get_head_info_request* chain_request::_internal_mutable_get_head_info() {
  if (!_internal_has_get_head_info()) {
    clear_request();
    set_has_get_head_info();
    request_.get_head_info_ = CreateMaybeMessage< ::koinos::rpc::chain::get_head_info_request >(GetArena());
  }
  return request_.get_head_info_;
}
inline ::koinos::rpc::chain::get_head_info_request* chain_request::mutable_get_head_info() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_request.get_head_info)
  return _internal_mutable_get_head_info();
}

// .koinos.rpc.chain.get_chain_id_request get_chain_id = 5;
inline bool chain_request::_internal_has_get_chain_id() const {
  return request_case() == kGetChainId;
}
inline bool chain_request::has_get_chain_id() const {
  return _internal_has_get_chain_id();
}
inline void chain_request::set_has_get_chain_id() {
  _oneof_case_[0] = kGetChainId;
}
inline void chain_request::clear_get_chain_id() {
  if (_internal_has_get_chain_id()) {
    if (GetArena() == nullptr) {
      delete request_.get_chain_id_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::chain::get_chain_id_request* chain_request::release_get_chain_id() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_request.get_chain_id)
  if (_internal_has_get_chain_id()) {
    clear_has_request();
      ::koinos::rpc::chain::get_chain_id_request* temp = request_.get_chain_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_chain_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::get_chain_id_request& chain_request::_internal_get_chain_id() const {
  return _internal_has_get_chain_id()
      ? *request_.get_chain_id_
      : reinterpret_cast< ::koinos::rpc::chain::get_chain_id_request&>(::koinos::rpc::chain::_get_chain_id_request_default_instance_);
}
inline const ::koinos::rpc::chain::get_chain_id_request& chain_request::get_chain_id() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_request.get_chain_id)
  return _internal_get_chain_id();
}
inline ::koinos::rpc::chain::get_chain_id_request* chain_request::unsafe_arena_release_get_chain_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_request.get_chain_id)
  if (_internal_has_get_chain_id()) {
    clear_has_request();
    ::koinos::rpc::chain::get_chain_id_request* temp = request_.get_chain_id_;
    request_.get_chain_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_request::unsafe_arena_set_allocated_get_chain_id(::koinos::rpc::chain::get_chain_id_request* get_chain_id) {
  clear_request();
  if (get_chain_id) {
    set_has_get_chain_id();
    request_.get_chain_id_ = get_chain_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_request.get_chain_id)
}
inline ::koinos::rpc::chain::get_chain_id_request* chain_request::_internal_mutable_get_chain_id() {
  if (!_internal_has_get_chain_id()) {
    clear_request();
    set_has_get_chain_id();
    request_.get_chain_id_ = CreateMaybeMessage< ::koinos::rpc::chain::get_chain_id_request >(GetArena());
  }
  return request_.get_chain_id_;
}
inline ::koinos::rpc::chain::get_chain_id_request* chain_request::mutable_get_chain_id() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_request.get_chain_id)
  return _internal_mutable_get_chain_id();
}

// .koinos.rpc.chain.get_fork_heads_request get_fork_heads = 6;
inline bool chain_request::_internal_has_get_fork_heads() const {
  return request_case() == kGetForkHeads;
}
inline bool chain_request::has_get_fork_heads() const {
  return _internal_has_get_fork_heads();
}
inline void chain_request::set_has_get_fork_heads() {
  _oneof_case_[0] = kGetForkHeads;
}
inline void chain_request::clear_get_fork_heads() {
  if (_internal_has_get_fork_heads()) {
    if (GetArena() == nullptr) {
      delete request_.get_fork_heads_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::chain::get_fork_heads_request* chain_request::release_get_fork_heads() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_request.get_fork_heads)
  if (_internal_has_get_fork_heads()) {
    clear_has_request();
      ::koinos::rpc::chain::get_fork_heads_request* temp = request_.get_fork_heads_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_fork_heads_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::get_fork_heads_request& chain_request::_internal_get_fork_heads() const {
  return _internal_has_get_fork_heads()
      ? *request_.get_fork_heads_
      : reinterpret_cast< ::koinos::rpc::chain::get_fork_heads_request&>(::koinos::rpc::chain::_get_fork_heads_request_default_instance_);
}
inline const ::koinos::rpc::chain::get_fork_heads_request& chain_request::get_fork_heads() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_request.get_fork_heads)
  return _internal_get_fork_heads();
}
inline ::koinos::rpc::chain::get_fork_heads_request* chain_request::unsafe_arena_release_get_fork_heads() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_request.get_fork_heads)
  if (_internal_has_get_fork_heads()) {
    clear_has_request();
    ::koinos::rpc::chain::get_fork_heads_request* temp = request_.get_fork_heads_;
    request_.get_fork_heads_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_request::unsafe_arena_set_allocated_get_fork_heads(::koinos::rpc::chain::get_fork_heads_request* get_fork_heads) {
  clear_request();
  if (get_fork_heads) {
    set_has_get_fork_heads();
    request_.get_fork_heads_ = get_fork_heads;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_request.get_fork_heads)
}
inline ::koinos::rpc::chain::get_fork_heads_request* chain_request::_internal_mutable_get_fork_heads() {
  if (!_internal_has_get_fork_heads()) {
    clear_request();
    set_has_get_fork_heads();
    request_.get_fork_heads_ = CreateMaybeMessage< ::koinos::rpc::chain::get_fork_heads_request >(GetArena());
  }
  return request_.get_fork_heads_;
}
inline ::koinos::rpc::chain::get_fork_heads_request* chain_request::mutable_get_fork_heads() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_request.get_fork_heads)
  return _internal_mutable_get_fork_heads();
}

// .koinos.rpc.chain.read_contract_request read_contract = 7;
inline bool chain_request::_internal_has_read_contract() const {
  return request_case() == kReadContract;
}
inline bool chain_request::has_read_contract() const {
  return _internal_has_read_contract();
}
inline void chain_request::set_has_read_contract() {
  _oneof_case_[0] = kReadContract;
}
inline void chain_request::clear_read_contract() {
  if (_internal_has_read_contract()) {
    if (GetArena() == nullptr) {
      delete request_.read_contract_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::chain::read_contract_request* chain_request::release_read_contract() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_request.read_contract)
  if (_internal_has_read_contract()) {
    clear_has_request();
      ::koinos::rpc::chain::read_contract_request* temp = request_.read_contract_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.read_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::read_contract_request& chain_request::_internal_read_contract() const {
  return _internal_has_read_contract()
      ? *request_.read_contract_
      : reinterpret_cast< ::koinos::rpc::chain::read_contract_request&>(::koinos::rpc::chain::_read_contract_request_default_instance_);
}
inline const ::koinos::rpc::chain::read_contract_request& chain_request::read_contract() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_request.read_contract)
  return _internal_read_contract();
}
inline ::koinos::rpc::chain::read_contract_request* chain_request::unsafe_arena_release_read_contract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_request.read_contract)
  if (_internal_has_read_contract()) {
    clear_has_request();
    ::koinos::rpc::chain::read_contract_request* temp = request_.read_contract_;
    request_.read_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_request::unsafe_arena_set_allocated_read_contract(::koinos::rpc::chain::read_contract_request* read_contract) {
  clear_request();
  if (read_contract) {
    set_has_read_contract();
    request_.read_contract_ = read_contract;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_request.read_contract)
}
inline ::koinos::rpc::chain::read_contract_request* chain_request::_internal_mutable_read_contract() {
  if (!_internal_has_read_contract()) {
    clear_request();
    set_has_read_contract();
    request_.read_contract_ = CreateMaybeMessage< ::koinos::rpc::chain::read_contract_request >(GetArena());
  }
  return request_.read_contract_;
}
inline ::koinos::rpc::chain::read_contract_request* chain_request::mutable_read_contract() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_request.read_contract)
  return _internal_mutable_read_contract();
}

// .koinos.rpc.chain.get_account_nonce_request get_account_nonce = 8;
inline bool chain_request::_internal_has_get_account_nonce() const {
  return request_case() == kGetAccountNonce;
}
inline bool chain_request::has_get_account_nonce() const {
  return _internal_has_get_account_nonce();
}
inline void chain_request::set_has_get_account_nonce() {
  _oneof_case_[0] = kGetAccountNonce;
}
inline void chain_request::clear_get_account_nonce() {
  if (_internal_has_get_account_nonce()) {
    if (GetArena() == nullptr) {
      delete request_.get_account_nonce_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::chain::get_account_nonce_request* chain_request::release_get_account_nonce() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_request.get_account_nonce)
  if (_internal_has_get_account_nonce()) {
    clear_has_request();
      ::koinos::rpc::chain::get_account_nonce_request* temp = request_.get_account_nonce_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_account_nonce_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::get_account_nonce_request& chain_request::_internal_get_account_nonce() const {
  return _internal_has_get_account_nonce()
      ? *request_.get_account_nonce_
      : reinterpret_cast< ::koinos::rpc::chain::get_account_nonce_request&>(::koinos::rpc::chain::_get_account_nonce_request_default_instance_);
}
inline const ::koinos::rpc::chain::get_account_nonce_request& chain_request::get_account_nonce() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_request.get_account_nonce)
  return _internal_get_account_nonce();
}
inline ::koinos::rpc::chain::get_account_nonce_request* chain_request::unsafe_arena_release_get_account_nonce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_request.get_account_nonce)
  if (_internal_has_get_account_nonce()) {
    clear_has_request();
    ::koinos::rpc::chain::get_account_nonce_request* temp = request_.get_account_nonce_;
    request_.get_account_nonce_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_request::unsafe_arena_set_allocated_get_account_nonce(::koinos::rpc::chain::get_account_nonce_request* get_account_nonce) {
  clear_request();
  if (get_account_nonce) {
    set_has_get_account_nonce();
    request_.get_account_nonce_ = get_account_nonce;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_request.get_account_nonce)
}
inline ::koinos::rpc::chain::get_account_nonce_request* chain_request::_internal_mutable_get_account_nonce() {
  if (!_internal_has_get_account_nonce()) {
    clear_request();
    set_has_get_account_nonce();
    request_.get_account_nonce_ = CreateMaybeMessage< ::koinos::rpc::chain::get_account_nonce_request >(GetArena());
  }
  return request_.get_account_nonce_;
}
inline ::koinos::rpc::chain::get_account_nonce_request* chain_request::mutable_get_account_nonce() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_request.get_account_nonce)
  return _internal_mutable_get_account_nonce();
}

inline bool chain_request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void chain_request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline chain_request::RequestCase chain_request::request_case() const {
  return chain_request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// chain_response

// .koinos.rpc.reserved_rpc reserved = 1;
inline bool chain_response::_internal_has_reserved() const {
  return response_case() == kReserved;
}
inline bool chain_response::has_reserved() const {
  return _internal_has_reserved();
}
inline void chain_response::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::rpc::reserved_rpc* chain_response::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
      ::koinos::rpc::reserved_rpc* temp = response_.reserved_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::reserved_rpc& chain_response::_internal_reserved() const {
  return _internal_has_reserved()
      ? *response_.reserved_
      : reinterpret_cast< ::koinos::rpc::reserved_rpc&>(::koinos::rpc::_reserved_rpc_default_instance_);
}
inline const ::koinos::rpc::reserved_rpc& chain_response::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_response.reserved)
  return _internal_reserved();
}
inline ::koinos::rpc::reserved_rpc* chain_response::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
    ::koinos::rpc::reserved_rpc* temp = response_.reserved_;
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_response::unsafe_arena_set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  clear_response();
  if (reserved) {
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_response.reserved)
}
inline ::koinos::rpc::reserved_rpc* chain_response::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_response();
    set_has_reserved();
    response_.reserved_ = CreateMaybeMessage< ::koinos::rpc::reserved_rpc >(GetArena());
  }
  return response_.reserved_;
}
inline ::koinos::rpc::reserved_rpc* chain_response::mutable_reserved() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_response.reserved)
  return _internal_mutable_reserved();
}

// .koinos.rpc.error_response error = 2;
inline bool chain_response::_internal_has_error() const {
  return response_case() == kError;
}
inline bool chain_response::has_error() const {
  return _internal_has_error();
}
inline void chain_response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::koinos::rpc::error_response* chain_response::release_error() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_response.error)
  if (_internal_has_error()) {
    clear_has_response();
      ::koinos::rpc::error_response* temp = response_.error_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::error_response& chain_response::_internal_error() const {
  return _internal_has_error()
      ? *response_.error_
      : reinterpret_cast< ::koinos::rpc::error_response&>(::koinos::rpc::_error_response_default_instance_);
}
inline const ::koinos::rpc::error_response& chain_response::error() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_response.error)
  return _internal_error();
}
inline ::koinos::rpc::error_response* chain_response::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_response.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::koinos::rpc::error_response* temp = response_.error_;
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_response::unsafe_arena_set_allocated_error(::koinos::rpc::error_response* error) {
  clear_response();
  if (error) {
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_response.error)
}
inline ::koinos::rpc::error_response* chain_response::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_response();
    set_has_error();
    response_.error_ = CreateMaybeMessage< ::koinos::rpc::error_response >(GetArena());
  }
  return response_.error_;
}
inline ::koinos::rpc::error_response* chain_response::mutable_error() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_response.error)
  return _internal_mutable_error();
}

// .koinos.rpc.chain.submit_block_response submit_block = 3;
inline bool chain_response::_internal_has_submit_block() const {
  return response_case() == kSubmitBlock;
}
inline bool chain_response::has_submit_block() const {
  return _internal_has_submit_block();
}
inline void chain_response::set_has_submit_block() {
  _oneof_case_[0] = kSubmitBlock;
}
inline void chain_response::clear_submit_block() {
  if (_internal_has_submit_block()) {
    if (GetArena() == nullptr) {
      delete response_.submit_block_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::chain::submit_block_response* chain_response::release_submit_block() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_response.submit_block)
  if (_internal_has_submit_block()) {
    clear_has_response();
      ::koinos::rpc::chain::submit_block_response* temp = response_.submit_block_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.submit_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::submit_block_response& chain_response::_internal_submit_block() const {
  return _internal_has_submit_block()
      ? *response_.submit_block_
      : reinterpret_cast< ::koinos::rpc::chain::submit_block_response&>(::koinos::rpc::chain::_submit_block_response_default_instance_);
}
inline const ::koinos::rpc::chain::submit_block_response& chain_response::submit_block() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_response.submit_block)
  return _internal_submit_block();
}
inline ::koinos::rpc::chain::submit_block_response* chain_response::unsafe_arena_release_submit_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_response.submit_block)
  if (_internal_has_submit_block()) {
    clear_has_response();
    ::koinos::rpc::chain::submit_block_response* temp = response_.submit_block_;
    response_.submit_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_response::unsafe_arena_set_allocated_submit_block(::koinos::rpc::chain::submit_block_response* submit_block) {
  clear_response();
  if (submit_block) {
    set_has_submit_block();
    response_.submit_block_ = submit_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_response.submit_block)
}
inline ::koinos::rpc::chain::submit_block_response* chain_response::_internal_mutable_submit_block() {
  if (!_internal_has_submit_block()) {
    clear_response();
    set_has_submit_block();
    response_.submit_block_ = CreateMaybeMessage< ::koinos::rpc::chain::submit_block_response >(GetArena());
  }
  return response_.submit_block_;
}
inline ::koinos::rpc::chain::submit_block_response* chain_response::mutable_submit_block() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_response.submit_block)
  return _internal_mutable_submit_block();
}

// .koinos.rpc.chain.submit_transaction_response submit_transaction = 4;
inline bool chain_response::_internal_has_submit_transaction() const {
  return response_case() == kSubmitTransaction;
}
inline bool chain_response::has_submit_transaction() const {
  return _internal_has_submit_transaction();
}
inline void chain_response::set_has_submit_transaction() {
  _oneof_case_[0] = kSubmitTransaction;
}
inline void chain_response::clear_submit_transaction() {
  if (_internal_has_submit_transaction()) {
    if (GetArena() == nullptr) {
      delete response_.submit_transaction_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::chain::submit_transaction_response* chain_response::release_submit_transaction() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_response.submit_transaction)
  if (_internal_has_submit_transaction()) {
    clear_has_response();
      ::koinos::rpc::chain::submit_transaction_response* temp = response_.submit_transaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.submit_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::submit_transaction_response& chain_response::_internal_submit_transaction() const {
  return _internal_has_submit_transaction()
      ? *response_.submit_transaction_
      : reinterpret_cast< ::koinos::rpc::chain::submit_transaction_response&>(::koinos::rpc::chain::_submit_transaction_response_default_instance_);
}
inline const ::koinos::rpc::chain::submit_transaction_response& chain_response::submit_transaction() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_response.submit_transaction)
  return _internal_submit_transaction();
}
inline ::koinos::rpc::chain::submit_transaction_response* chain_response::unsafe_arena_release_submit_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_response.submit_transaction)
  if (_internal_has_submit_transaction()) {
    clear_has_response();
    ::koinos::rpc::chain::submit_transaction_response* temp = response_.submit_transaction_;
    response_.submit_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_response::unsafe_arena_set_allocated_submit_transaction(::koinos::rpc::chain::submit_transaction_response* submit_transaction) {
  clear_response();
  if (submit_transaction) {
    set_has_submit_transaction();
    response_.submit_transaction_ = submit_transaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_response.submit_transaction)
}
inline ::koinos::rpc::chain::submit_transaction_response* chain_response::_internal_mutable_submit_transaction() {
  if (!_internal_has_submit_transaction()) {
    clear_response();
    set_has_submit_transaction();
    response_.submit_transaction_ = CreateMaybeMessage< ::koinos::rpc::chain::submit_transaction_response >(GetArena());
  }
  return response_.submit_transaction_;
}
inline ::koinos::rpc::chain::submit_transaction_response* chain_response::mutable_submit_transaction() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_response.submit_transaction)
  return _internal_mutable_submit_transaction();
}

// .koinos.rpc.chain.get_head_info_response get_head_info = 5;
inline bool chain_response::_internal_has_get_head_info() const {
  return response_case() == kGetHeadInfo;
}
inline bool chain_response::has_get_head_info() const {
  return _internal_has_get_head_info();
}
inline void chain_response::set_has_get_head_info() {
  _oneof_case_[0] = kGetHeadInfo;
}
inline void chain_response::clear_get_head_info() {
  if (_internal_has_get_head_info()) {
    if (GetArena() == nullptr) {
      delete response_.get_head_info_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::chain::get_head_info_response* chain_response::release_get_head_info() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_response.get_head_info)
  if (_internal_has_get_head_info()) {
    clear_has_response();
      ::koinos::rpc::chain::get_head_info_response* temp = response_.get_head_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_head_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::get_head_info_response& chain_response::_internal_get_head_info() const {
  return _internal_has_get_head_info()
      ? *response_.get_head_info_
      : reinterpret_cast< ::koinos::rpc::chain::get_head_info_response&>(::koinos::rpc::chain::_get_head_info_response_default_instance_);
}
inline const ::koinos::rpc::chain::get_head_info_response& chain_response::get_head_info() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_response.get_head_info)
  return _internal_get_head_info();
}
inline ::koinos::rpc::chain::get_head_info_response* chain_response::unsafe_arena_release_get_head_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_response.get_head_info)
  if (_internal_has_get_head_info()) {
    clear_has_response();
    ::koinos::rpc::chain::get_head_info_response* temp = response_.get_head_info_;
    response_.get_head_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_response::unsafe_arena_set_allocated_get_head_info(::koinos::rpc::chain::get_head_info_response* get_head_info) {
  clear_response();
  if (get_head_info) {
    set_has_get_head_info();
    response_.get_head_info_ = get_head_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_response.get_head_info)
}
inline ::koinos::rpc::chain::get_head_info_response* chain_response::_internal_mutable_get_head_info() {
  if (!_internal_has_get_head_info()) {
    clear_response();
    set_has_get_head_info();
    response_.get_head_info_ = CreateMaybeMessage< ::koinos::rpc::chain::get_head_info_response >(GetArena());
  }
  return response_.get_head_info_;
}
inline ::koinos::rpc::chain::get_head_info_response* chain_response::mutable_get_head_info() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_response.get_head_info)
  return _internal_mutable_get_head_info();
}

// .koinos.rpc.chain.get_chain_id_response get_chain_id = 6;
inline bool chain_response::_internal_has_get_chain_id() const {
  return response_case() == kGetChainId;
}
inline bool chain_response::has_get_chain_id() const {
  return _internal_has_get_chain_id();
}
inline void chain_response::set_has_get_chain_id() {
  _oneof_case_[0] = kGetChainId;
}
inline void chain_response::clear_get_chain_id() {
  if (_internal_has_get_chain_id()) {
    if (GetArena() == nullptr) {
      delete response_.get_chain_id_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::chain::get_chain_id_response* chain_response::release_get_chain_id() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_response.get_chain_id)
  if (_internal_has_get_chain_id()) {
    clear_has_response();
      ::koinos::rpc::chain::get_chain_id_response* temp = response_.get_chain_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_chain_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::get_chain_id_response& chain_response::_internal_get_chain_id() const {
  return _internal_has_get_chain_id()
      ? *response_.get_chain_id_
      : reinterpret_cast< ::koinos::rpc::chain::get_chain_id_response&>(::koinos::rpc::chain::_get_chain_id_response_default_instance_);
}
inline const ::koinos::rpc::chain::get_chain_id_response& chain_response::get_chain_id() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_response.get_chain_id)
  return _internal_get_chain_id();
}
inline ::koinos::rpc::chain::get_chain_id_response* chain_response::unsafe_arena_release_get_chain_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_response.get_chain_id)
  if (_internal_has_get_chain_id()) {
    clear_has_response();
    ::koinos::rpc::chain::get_chain_id_response* temp = response_.get_chain_id_;
    response_.get_chain_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_response::unsafe_arena_set_allocated_get_chain_id(::koinos::rpc::chain::get_chain_id_response* get_chain_id) {
  clear_response();
  if (get_chain_id) {
    set_has_get_chain_id();
    response_.get_chain_id_ = get_chain_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_response.get_chain_id)
}
inline ::koinos::rpc::chain::get_chain_id_response* chain_response::_internal_mutable_get_chain_id() {
  if (!_internal_has_get_chain_id()) {
    clear_response();
    set_has_get_chain_id();
    response_.get_chain_id_ = CreateMaybeMessage< ::koinos::rpc::chain::get_chain_id_response >(GetArena());
  }
  return response_.get_chain_id_;
}
inline ::koinos::rpc::chain::get_chain_id_response* chain_response::mutable_get_chain_id() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_response.get_chain_id)
  return _internal_mutable_get_chain_id();
}

// .koinos.rpc.chain.get_fork_heads_response get_fork_heads = 7;
inline bool chain_response::_internal_has_get_fork_heads() const {
  return response_case() == kGetForkHeads;
}
inline bool chain_response::has_get_fork_heads() const {
  return _internal_has_get_fork_heads();
}
inline void chain_response::set_has_get_fork_heads() {
  _oneof_case_[0] = kGetForkHeads;
}
inline void chain_response::clear_get_fork_heads() {
  if (_internal_has_get_fork_heads()) {
    if (GetArena() == nullptr) {
      delete response_.get_fork_heads_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::chain::get_fork_heads_response* chain_response::release_get_fork_heads() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_response.get_fork_heads)
  if (_internal_has_get_fork_heads()) {
    clear_has_response();
      ::koinos::rpc::chain::get_fork_heads_response* temp = response_.get_fork_heads_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_fork_heads_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::get_fork_heads_response& chain_response::_internal_get_fork_heads() const {
  return _internal_has_get_fork_heads()
      ? *response_.get_fork_heads_
      : reinterpret_cast< ::koinos::rpc::chain::get_fork_heads_response&>(::koinos::rpc::chain::_get_fork_heads_response_default_instance_);
}
inline const ::koinos::rpc::chain::get_fork_heads_response& chain_response::get_fork_heads() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_response.get_fork_heads)
  return _internal_get_fork_heads();
}
inline ::koinos::rpc::chain::get_fork_heads_response* chain_response::unsafe_arena_release_get_fork_heads() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_response.get_fork_heads)
  if (_internal_has_get_fork_heads()) {
    clear_has_response();
    ::koinos::rpc::chain::get_fork_heads_response* temp = response_.get_fork_heads_;
    response_.get_fork_heads_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_response::unsafe_arena_set_allocated_get_fork_heads(::koinos::rpc::chain::get_fork_heads_response* get_fork_heads) {
  clear_response();
  if (get_fork_heads) {
    set_has_get_fork_heads();
    response_.get_fork_heads_ = get_fork_heads;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_response.get_fork_heads)
}
inline ::koinos::rpc::chain::get_fork_heads_response* chain_response::_internal_mutable_get_fork_heads() {
  if (!_internal_has_get_fork_heads()) {
    clear_response();
    set_has_get_fork_heads();
    response_.get_fork_heads_ = CreateMaybeMessage< ::koinos::rpc::chain::get_fork_heads_response >(GetArena());
  }
  return response_.get_fork_heads_;
}
inline ::koinos::rpc::chain::get_fork_heads_response* chain_response::mutable_get_fork_heads() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_response.get_fork_heads)
  return _internal_mutable_get_fork_heads();
}

// .koinos.rpc.chain.read_contract_response read_contract = 8;
inline bool chain_response::_internal_has_read_contract() const {
  return response_case() == kReadContract;
}
inline bool chain_response::has_read_contract() const {
  return _internal_has_read_contract();
}
inline void chain_response::set_has_read_contract() {
  _oneof_case_[0] = kReadContract;
}
inline void chain_response::clear_read_contract() {
  if (_internal_has_read_contract()) {
    if (GetArena() == nullptr) {
      delete response_.read_contract_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::chain::read_contract_response* chain_response::release_read_contract() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_response.read_contract)
  if (_internal_has_read_contract()) {
    clear_has_response();
      ::koinos::rpc::chain::read_contract_response* temp = response_.read_contract_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.read_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::read_contract_response& chain_response::_internal_read_contract() const {
  return _internal_has_read_contract()
      ? *response_.read_contract_
      : reinterpret_cast< ::koinos::rpc::chain::read_contract_response&>(::koinos::rpc::chain::_read_contract_response_default_instance_);
}
inline const ::koinos::rpc::chain::read_contract_response& chain_response::read_contract() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_response.read_contract)
  return _internal_read_contract();
}
inline ::koinos::rpc::chain::read_contract_response* chain_response::unsafe_arena_release_read_contract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_response.read_contract)
  if (_internal_has_read_contract()) {
    clear_has_response();
    ::koinos::rpc::chain::read_contract_response* temp = response_.read_contract_;
    response_.read_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_response::unsafe_arena_set_allocated_read_contract(::koinos::rpc::chain::read_contract_response* read_contract) {
  clear_response();
  if (read_contract) {
    set_has_read_contract();
    response_.read_contract_ = read_contract;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_response.read_contract)
}
inline ::koinos::rpc::chain::read_contract_response* chain_response::_internal_mutable_read_contract() {
  if (!_internal_has_read_contract()) {
    clear_response();
    set_has_read_contract();
    response_.read_contract_ = CreateMaybeMessage< ::koinos::rpc::chain::read_contract_response >(GetArena());
  }
  return response_.read_contract_;
}
inline ::koinos::rpc::chain::read_contract_response* chain_response::mutable_read_contract() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_response.read_contract)
  return _internal_mutable_read_contract();
}

// .koinos.rpc.chain.get_account_nonce_response get_account_nonce = 9;
inline bool chain_response::_internal_has_get_account_nonce() const {
  return response_case() == kGetAccountNonce;
}
inline bool chain_response::has_get_account_nonce() const {
  return _internal_has_get_account_nonce();
}
inline void chain_response::set_has_get_account_nonce() {
  _oneof_case_[0] = kGetAccountNonce;
}
inline void chain_response::clear_get_account_nonce() {
  if (_internal_has_get_account_nonce()) {
    if (GetArena() == nullptr) {
      delete response_.get_account_nonce_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::chain::get_account_nonce_response* chain_response::release_get_account_nonce() {
  // @@protoc_insertion_point(field_release:koinos.rpc.chain.chain_response.get_account_nonce)
  if (_internal_has_get_account_nonce()) {
    clear_has_response();
      ::koinos::rpc::chain::get_account_nonce_response* temp = response_.get_account_nonce_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_account_nonce_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::chain::get_account_nonce_response& chain_response::_internal_get_account_nonce() const {
  return _internal_has_get_account_nonce()
      ? *response_.get_account_nonce_
      : reinterpret_cast< ::koinos::rpc::chain::get_account_nonce_response&>(::koinos::rpc::chain::_get_account_nonce_response_default_instance_);
}
inline const ::koinos::rpc::chain::get_account_nonce_response& chain_response::get_account_nonce() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.chain.chain_response.get_account_nonce)
  return _internal_get_account_nonce();
}
inline ::koinos::rpc::chain::get_account_nonce_response* chain_response::unsafe_arena_release_get_account_nonce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.chain.chain_response.get_account_nonce)
  if (_internal_has_get_account_nonce()) {
    clear_has_response();
    ::koinos::rpc::chain::get_account_nonce_response* temp = response_.get_account_nonce_;
    response_.get_account_nonce_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void chain_response::unsafe_arena_set_allocated_get_account_nonce(::koinos::rpc::chain::get_account_nonce_response* get_account_nonce) {
  clear_response();
  if (get_account_nonce) {
    set_has_get_account_nonce();
    response_.get_account_nonce_ = get_account_nonce;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.chain.chain_response.get_account_nonce)
}
inline ::koinos::rpc::chain::get_account_nonce_response* chain_response::_internal_mutable_get_account_nonce() {
  if (!_internal_has_get_account_nonce()) {
    clear_response();
    set_has_get_account_nonce();
    response_.get_account_nonce_ = CreateMaybeMessage< ::koinos::rpc::chain::get_account_nonce_response >(GetArena());
  }
  return response_.get_account_nonce_;
}
inline ::koinos::rpc::chain::get_account_nonce_response* chain_response::mutable_get_account_nonce() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.chain.chain_response.get_account_nonce)
  return _internal_mutable_get_account_nonce();
}

inline bool chain_response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void chain_response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline chain_response::ResponseCase chain_response::response_case() const {
  return chain_response::ResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chain
}  // namespace rpc
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fchain_2fchain_5frpc_2eproto
