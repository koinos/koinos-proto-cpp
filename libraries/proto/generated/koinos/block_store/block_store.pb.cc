// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/block_store/block_store.proto

#include "koinos/block_store/block_store.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace block_store {
constexpr block_item::block_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_(nullptr)
  , receipt_(nullptr)
  , block_height_(uint64_t{0u}){}
struct block_itemDefaultTypeInternal {
  constexpr block_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_itemDefaultTypeInternal() {}
  union {
    block_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_itemDefaultTypeInternal _block_item_default_instance_;
constexpr block_record::block_record(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : previous_block_ids_()
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_(nullptr)
  , receipt_(nullptr)
  , block_height_(uint64_t{0u}){}
struct block_recordDefaultTypeInternal {
  constexpr block_recordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_recordDefaultTypeInternal() {}
  union {
    block_record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_recordDefaultTypeInternal _block_record_default_instance_;
}  // namespace block_store
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fblock_5fstore_2fblock_5fstore_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fblock_5fstore_2fblock_5fstore_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fblock_5fstore_2fblock_5fstore_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fblock_5fstore_2fblock_5fstore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::block_store::block_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::block_store::block_item, block_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::block_store::block_item, block_height_),
  PROTOBUF_FIELD_OFFSET(::koinos::block_store::block_item, block_),
  PROTOBUF_FIELD_OFFSET(::koinos::block_store::block_item, receipt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::block_store::block_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::block_store::block_record, block_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::block_store::block_record, block_height_),
  PROTOBUF_FIELD_OFFSET(::koinos::block_store::block_record, block_),
  PROTOBUF_FIELD_OFFSET(::koinos::block_store::block_record, receipt_),
  PROTOBUF_FIELD_OFFSET(::koinos::block_store::block_record, previous_block_ids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::block_store::block_item)},
  { 9, -1, sizeof(::koinos::block_store::block_record)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::block_store::_block_item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::block_store::_block_record_default_instance_),
};

const char descriptor_table_protodef_koinos_2fblock_5fstore_2fblock_5fstore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$koinos/block_store/block_store.proto\022\022"
  "koinos.block_store\032\024koinos/options.proto"
  "\032\036koinos/protocol/protocol.proto\"\226\001\n\nblo"
  "ck_item\022\026\n\010block_id\030\001 \001(\014B\004\200\265\030\003\022\030\n\014block"
  "_height\030\002 \001(\004B\0020\001\022%\n\005block\030\003 \001(\0132\026.koino"
  "s.protocol.block\022/\n\007receipt\030\004 \001(\0132\036.koin"
  "os.protocol.block_receipt\"\272\001\n\014block_reco"
  "rd\022\026\n\010block_id\030\001 \001(\014B\004\200\265\030\003\022\030\n\014block_heig"
  "ht\030\002 \001(\004B\0020\001\022%\n\005block\030\003 \001(\0132\026.koinos.pro"
  "tocol.block\022/\n\007receipt\030\004 \001(\0132\036.koinos.pr"
  "otocol.block_receipt\022 \n\022previous_block_i"
  "ds\030\005 \003(\014B\004\200\265\030\003B>Z<github.com/koinos/koin"
  "os-proto-golang/koinos/rpc/block_storeb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto_deps[2] = {
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto = {
  false, false, 526, descriptor_table_protodef_koinos_2fblock_5fstore_2fblock_5fstore_2eproto, "koinos/block_store/block_store.proto", 
  &descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto_once, descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_koinos_2fblock_5fstore_2fblock_5fstore_2eproto::offsets,
  file_level_metadata_koinos_2fblock_5fstore_2fblock_5fstore_2eproto, file_level_enum_descriptors_koinos_2fblock_5fstore_2fblock_5fstore_2eproto, file_level_service_descriptors_koinos_2fblock_5fstore_2fblock_5fstore_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto_getter() {
  return &descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fblock_5fstore_2fblock_5fstore_2eproto(&descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto);
namespace koinos {
namespace block_store {

// ===================================================================

class block_item::_Internal {
 public:
  static const ::koinos::protocol::block& block(const block_item* msg);
  static const ::koinos::protocol::block_receipt& receipt(const block_item* msg);
};

const ::koinos::protocol::block&
block_item::_Internal::block(const block_item* msg) {
  return *msg->block_;
}
const ::koinos::protocol::block_receipt&
block_item::_Internal::receipt(const block_item* msg) {
  return *msg->receipt_;
}
void block_item::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
void block_item::clear_receipt() {
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
}
block_item::block_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.block_store.block_item)
}
block_item::block_item(const block_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_block()) {
    block_ = new ::koinos::protocol::block(*from.block_);
  } else {
    block_ = nullptr;
  }
  if (from._internal_has_receipt()) {
    receipt_ = new ::koinos::protocol::block_receipt(*from.receipt_);
  } else {
    receipt_ = nullptr;
  }
  block_height_ = from.block_height_;
  // @@protoc_insertion_point(copy_constructor:koinos.block_store.block_item)
}

inline void block_item::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_height_) -
    reinterpret_cast<char*>(&block_)) + sizeof(block_height_));
}

block_item::~block_item() {
  // @@protoc_insertion_point(destructor:koinos.block_store.block_item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_;
  if (this != internal_default_instance()) delete receipt_;
}

void block_item::ArenaDtor(void* object) {
  block_item* _this = reinterpret_cast< block_item* >(object);
  (void)_this;
}
void block_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_item::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.block_store.block_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
  block_height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_id = 1 [(.koinos.koinos_bytes_type) = BLOCK_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_height = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.block block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.block_receipt receipt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.block_store.block_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1 [(.koinos.koinos_bytes_type) = BLOCK_ID];
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // uint64 block_height = 2 [jstype = JS_STRING];
  if (this->_internal_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_height(), target);
  }

  // .koinos.protocol.block block = 3;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::block(this), target, stream);
  }

  // .koinos.protocol.block_receipt receipt = 4;
  if (this->_internal_has_receipt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::receipt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.block_store.block_item)
  return target;
}

size_t block_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.block_store.block_item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1 [(.koinos.koinos_bytes_type) = BLOCK_ID];
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // .koinos.protocol.block block = 3;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .koinos.protocol.block_receipt receipt = 4;
  if (this->_internal_has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_);
  }

  // uint64 block_height = 2 [jstype = JS_STRING];
  if (this->_internal_block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_item::GetClassData() const { return &_class_data_; }

void block_item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block_item *>(to)->MergeFrom(
      static_cast<const block_item &>(from));
}


void block_item::MergeFrom(const block_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.block_store.block_item)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (from._internal_has_block()) {
    _internal_mutable_block()->::koinos::protocol::block::MergeFrom(from._internal_block());
  }
  if (from._internal_has_receipt()) {
    _internal_mutable_receipt()->::koinos::protocol::block_receipt::MergeFrom(from._internal_receipt());
  }
  if (from._internal_block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_item::CopyFrom(const block_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.block_store.block_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_item::IsInitialized() const {
  return true;
}

void block_item::InternalSwap(block_item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, GetArenaForAllocation(),
      &other->block_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(block_item, block_height_)
      + sizeof(block_item::block_height_)
      - PROTOBUF_FIELD_OFFSET(block_item, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata block_item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto_getter, &descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto_once,
      file_level_metadata_koinos_2fblock_5fstore_2fblock_5fstore_2eproto[0]);
}

// ===================================================================

class block_record::_Internal {
 public:
  static const ::koinos::protocol::block& block(const block_record* msg);
  static const ::koinos::protocol::block_receipt& receipt(const block_record* msg);
};

const ::koinos::protocol::block&
block_record::_Internal::block(const block_record* msg) {
  return *msg->block_;
}
const ::koinos::protocol::block_receipt&
block_record::_Internal::receipt(const block_record* msg) {
  return *msg->receipt_;
}
void block_record::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
void block_record::clear_receipt() {
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
}
block_record::block_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  previous_block_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.block_store.block_record)
}
block_record::block_record(const block_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      previous_block_ids_(from.previous_block_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_block()) {
    block_ = new ::koinos::protocol::block(*from.block_);
  } else {
    block_ = nullptr;
  }
  if (from._internal_has_receipt()) {
    receipt_ = new ::koinos::protocol::block_receipt(*from.receipt_);
  } else {
    receipt_ = nullptr;
  }
  block_height_ = from.block_height_;
  // @@protoc_insertion_point(copy_constructor:koinos.block_store.block_record)
}

inline void block_record::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_height_) -
    reinterpret_cast<char*>(&block_)) + sizeof(block_height_));
}

block_record::~block_record() {
  // @@protoc_insertion_point(destructor:koinos.block_store.block_record)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_;
  if (this != internal_default_instance()) delete receipt_;
}

void block_record::ArenaDtor(void* object) {
  block_record* _this = reinterpret_cast< block_record* >(object);
  (void)_this;
}
void block_record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_record::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.block_store.block_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previous_block_ids_.Clear();
  block_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
  block_height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_id = 1 [(.koinos.koinos_bytes_type) = BLOCK_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_height = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.block block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.block_receipt receipt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes previous_block_ids = 5 [(.koinos.koinos_bytes_type) = BLOCK_ID];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_previous_block_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.block_store.block_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1 [(.koinos.koinos_bytes_type) = BLOCK_ID];
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // uint64 block_height = 2 [jstype = JS_STRING];
  if (this->_internal_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_height(), target);
  }

  // .koinos.protocol.block block = 3;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::block(this), target, stream);
  }

  // .koinos.protocol.block_receipt receipt = 4;
  if (this->_internal_has_receipt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::receipt(this), target, stream);
  }

  // repeated bytes previous_block_ids = 5 [(.koinos.koinos_bytes_type) = BLOCK_ID];
  for (int i = 0, n = this->_internal_previous_block_ids_size(); i < n; i++) {
    const auto& s = this->_internal_previous_block_ids(i);
    target = stream->WriteBytes(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.block_store.block_record)
  return target;
}

size_t block_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.block_store.block_record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes previous_block_ids = 5 [(.koinos.koinos_bytes_type) = BLOCK_ID];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(previous_block_ids_.size());
  for (int i = 0, n = previous_block_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      previous_block_ids_.Get(i));
  }

  // bytes block_id = 1 [(.koinos.koinos_bytes_type) = BLOCK_ID];
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // .koinos.protocol.block block = 3;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .koinos.protocol.block_receipt receipt = 4;
  if (this->_internal_has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_);
  }

  // uint64 block_height = 2 [jstype = JS_STRING];
  if (this->_internal_block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_record::GetClassData() const { return &_class_data_; }

void block_record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block_record *>(to)->MergeFrom(
      static_cast<const block_record &>(from));
}


void block_record::MergeFrom(const block_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.block_store.block_record)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  previous_block_ids_.MergeFrom(from.previous_block_ids_);
  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (from._internal_has_block()) {
    _internal_mutable_block()->::koinos::protocol::block::MergeFrom(from._internal_block());
  }
  if (from._internal_has_receipt()) {
    _internal_mutable_receipt()->::koinos::protocol::block_receipt::MergeFrom(from._internal_receipt());
  }
  if (from._internal_block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_record::CopyFrom(const block_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.block_store.block_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_record::IsInitialized() const {
  return true;
}

void block_record::InternalSwap(block_record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  previous_block_ids_.InternalSwap(&other->previous_block_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, GetArenaForAllocation(),
      &other->block_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(block_record, block_height_)
      + sizeof(block_record::block_height_)
      - PROTOBUF_FIELD_OFFSET(block_record, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata block_record::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto_getter, &descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto_once,
      file_level_metadata_koinos_2fblock_5fstore_2fblock_5fstore_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace block_store
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::block_store::block_item* Arena::CreateMaybeMessage< ::koinos::block_store::block_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::block_store::block_item >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::block_store::block_record* Arena::CreateMaybeMessage< ::koinos::block_store::block_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::block_store::block_record >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
