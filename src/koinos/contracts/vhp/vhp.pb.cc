// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/contracts/vhp/vhp.proto

#include "koinos/contracts/vhp/vhp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace contracts {
namespace vhp {
constexpr effective_balance_of_arguments::effective_balance_of_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct effective_balance_of_argumentsDefaultTypeInternal {
  constexpr effective_balance_of_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~effective_balance_of_argumentsDefaultTypeInternal() {}
  union {
    effective_balance_of_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT effective_balance_of_argumentsDefaultTypeInternal _effective_balance_of_arguments_default_instance_;
constexpr effective_balance_of_result::effective_balance_of_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct effective_balance_of_resultDefaultTypeInternal {
  constexpr effective_balance_of_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~effective_balance_of_resultDefaultTypeInternal() {}
  union {
    effective_balance_of_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT effective_balance_of_resultDefaultTypeInternal _effective_balance_of_result_default_instance_;
constexpr balance_entry::balance_entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_height_(uint64_t{0u})
  , balance_(uint64_t{0u}){}
struct balance_entryDefaultTypeInternal {
  constexpr balance_entryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~balance_entryDefaultTypeInternal() {}
  union {
    balance_entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT balance_entryDefaultTypeInternal _balance_entry_default_instance_;
constexpr effective_balance_object::effective_balance_object(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : past_balances_()
  , current_balance_(uint64_t{0u}){}
struct effective_balance_objectDefaultTypeInternal {
  constexpr effective_balance_objectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~effective_balance_objectDefaultTypeInternal() {}
  union {
    effective_balance_object _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT effective_balance_objectDefaultTypeInternal _effective_balance_object_default_instance_;
}  // namespace vhp
}  // namespace contracts
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fcontracts_2fvhp_2fvhp_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fcontracts_2fvhp_2fvhp_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fcontracts_2fvhp_2fvhp_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fcontracts_2fvhp_2fvhp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::vhp::effective_balance_of_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::vhp::effective_balance_of_arguments, owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::vhp::effective_balance_of_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::vhp::effective_balance_of_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::vhp::balance_entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::vhp::balance_entry, block_height_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::vhp::balance_entry, balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::vhp::effective_balance_object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::vhp::effective_balance_object, current_balance_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::vhp::effective_balance_object, past_balances_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::contracts::vhp::effective_balance_of_arguments)},
  { 6, -1, sizeof(::koinos::contracts::vhp::effective_balance_of_result)},
  { 12, -1, sizeof(::koinos::contracts::vhp::balance_entry)},
  { 19, -1, sizeof(::koinos::contracts::vhp::effective_balance_object)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::vhp::_effective_balance_of_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::vhp::_effective_balance_of_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::vhp::_balance_entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::vhp::_effective_balance_object_default_instance_),
};

const char descriptor_table_protodef_koinos_2fcontracts_2fvhp_2fvhp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036koinos/contracts/vhp/vhp.proto\022\024koinos"
  ".contracts.vhp\032\024koinos/options.proto\"5\n\036"
  "effective_balance_of_arguments\022\023\n\005owner\030"
  "\001 \001(\014B\004\200\265\030\006\"0\n\033effective_balance_of_resu"
  "lt\022\021\n\005value\030\001 \001(\004B\0020\001\">\n\rbalance_entry\022\030"
  "\n\014block_height\030\001 \001(\004B\0020\001\022\023\n\007balance\030\002 \001("
  "\004B\0020\001\"s\n\030effective_balance_object\022\033\n\017cur"
  "rent_balance\030\001 \001(\004B\0020\001\022:\n\rpast_balances\030"
  "\002 \003(\0132#.koinos.contracts.vhp.balance_ent"
  "ryB\?Z=github.com/koinos/koinos-proto-gol"
  "ang/v2/koinos/contracts/vhpb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto_deps[1] = {
  &::descriptor_table_koinos_2foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto = {
  false, false, 435, descriptor_table_protodef_koinos_2fcontracts_2fvhp_2fvhp_2eproto, "koinos/contracts/vhp/vhp.proto", 
  &descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto_once, descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_koinos_2fcontracts_2fvhp_2fvhp_2eproto::offsets,
  file_level_metadata_koinos_2fcontracts_2fvhp_2fvhp_2eproto, file_level_enum_descriptors_koinos_2fcontracts_2fvhp_2fvhp_2eproto, file_level_service_descriptors_koinos_2fcontracts_2fvhp_2fvhp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto_getter() {
  return &descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fcontracts_2fvhp_2fvhp_2eproto(&descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto);
namespace koinos {
namespace contracts {
namespace vhp {

// ===================================================================

class effective_balance_of_arguments::_Internal {
 public:
};

effective_balance_of_arguments::effective_balance_of_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.vhp.effective_balance_of_arguments)
}
effective_balance_of_arguments::effective_balance_of_arguments(const effective_balance_of_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.vhp.effective_balance_of_arguments)
}

inline void effective_balance_of_arguments::SharedCtor() {
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

effective_balance_of_arguments::~effective_balance_of_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.vhp.effective_balance_of_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void effective_balance_of_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void effective_balance_of_arguments::ArenaDtor(void* object) {
  effective_balance_of_arguments* _this = reinterpret_cast< effective_balance_of_arguments* >(object);
  (void)_this;
}
void effective_balance_of_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void effective_balance_of_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void effective_balance_of_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.vhp.effective_balance_of_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* effective_balance_of_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* effective_balance_of_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.vhp.effective_balance_of_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.vhp.effective_balance_of_arguments)
  return target;
}

size_t effective_balance_of_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.vhp.effective_balance_of_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData effective_balance_of_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    effective_balance_of_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*effective_balance_of_arguments::GetClassData() const { return &_class_data_; }

void effective_balance_of_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<effective_balance_of_arguments *>(to)->MergeFrom(
      static_cast<const effective_balance_of_arguments &>(from));
}


void effective_balance_of_arguments::MergeFrom(const effective_balance_of_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.vhp.effective_balance_of_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void effective_balance_of_arguments::CopyFrom(const effective_balance_of_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.vhp.effective_balance_of_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool effective_balance_of_arguments::IsInitialized() const {
  return true;
}

void effective_balance_of_arguments::InternalSwap(effective_balance_of_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata effective_balance_of_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fvhp_2fvhp_2eproto[0]);
}

// ===================================================================

class effective_balance_of_result::_Internal {
 public:
};

effective_balance_of_result::effective_balance_of_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.vhp.effective_balance_of_result)
}
effective_balance_of_result::effective_balance_of_result(const effective_balance_of_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.vhp.effective_balance_of_result)
}

inline void effective_balance_of_result::SharedCtor() {
value_ = uint64_t{0u};
}

effective_balance_of_result::~effective_balance_of_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.vhp.effective_balance_of_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void effective_balance_of_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void effective_balance_of_result::ArenaDtor(void* object) {
  effective_balance_of_result* _this = reinterpret_cast< effective_balance_of_result* >(object);
  (void)_this;
}
void effective_balance_of_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void effective_balance_of_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void effective_balance_of_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.vhp.effective_balance_of_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* effective_balance_of_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* effective_balance_of_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.vhp.effective_balance_of_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.vhp.effective_balance_of_result)
  return target;
}

size_t effective_balance_of_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.vhp.effective_balance_of_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData effective_balance_of_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    effective_balance_of_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*effective_balance_of_result::GetClassData() const { return &_class_data_; }

void effective_balance_of_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<effective_balance_of_result *>(to)->MergeFrom(
      static_cast<const effective_balance_of_result &>(from));
}


void effective_balance_of_result::MergeFrom(const effective_balance_of_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.vhp.effective_balance_of_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void effective_balance_of_result::CopyFrom(const effective_balance_of_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.vhp.effective_balance_of_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool effective_balance_of_result::IsInitialized() const {
  return true;
}

void effective_balance_of_result::InternalSwap(effective_balance_of_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata effective_balance_of_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fvhp_2fvhp_2eproto[1]);
}

// ===================================================================

class balance_entry::_Internal {
 public:
};

balance_entry::balance_entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.vhp.balance_entry)
}
balance_entry::balance_entry(const balance_entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&block_height_, &from.block_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&balance_) -
    reinterpret_cast<char*>(&block_height_)) + sizeof(balance_));
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.vhp.balance_entry)
}

inline void balance_entry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&balance_) -
    reinterpret_cast<char*>(&block_height_)) + sizeof(balance_));
}

balance_entry::~balance_entry() {
  // @@protoc_insertion_point(destructor:koinos.contracts.vhp.balance_entry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void balance_entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void balance_entry::ArenaDtor(void* object) {
  balance_entry* _this = reinterpret_cast< balance_entry* >(object);
  (void)_this;
}
void balance_entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void balance_entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void balance_entry::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.vhp.balance_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&block_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&balance_) -
      reinterpret_cast<char*>(&block_height_)) + sizeof(balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* balance_entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_height = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 balance = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* balance_entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.vhp.balance_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_height = 1 [jstype = JS_STRING];
  if (this->_internal_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_height(), target);
  }

  // uint64 balance = 2 [jstype = JS_STRING];
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.vhp.balance_entry)
  return target;
}

size_t balance_entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.vhp.balance_entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_height = 1 [jstype = JS_STRING];
  if (this->_internal_block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_height());
  }

  // uint64 balance = 2 [jstype = JS_STRING];
  if (this->_internal_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData balance_entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    balance_entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*balance_entry::GetClassData() const { return &_class_data_; }

void balance_entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<balance_entry *>(to)->MergeFrom(
      static_cast<const balance_entry &>(from));
}


void balance_entry::MergeFrom(const balance_entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.vhp.balance_entry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  if (from._internal_balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void balance_entry::CopyFrom(const balance_entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.vhp.balance_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool balance_entry::IsInitialized() const {
  return true;
}

void balance_entry::InternalSwap(balance_entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(balance_entry, balance_)
      + sizeof(balance_entry::balance_)
      - PROTOBUF_FIELD_OFFSET(balance_entry, block_height_)>(
          reinterpret_cast<char*>(&block_height_),
          reinterpret_cast<char*>(&other->block_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata balance_entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fvhp_2fvhp_2eproto[2]);
}

// ===================================================================

class effective_balance_object::_Internal {
 public:
};

effective_balance_object::effective_balance_object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  past_balances_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.vhp.effective_balance_object)
}
effective_balance_object::effective_balance_object(const effective_balance_object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      past_balances_(from.past_balances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_balance_ = from.current_balance_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.vhp.effective_balance_object)
}

inline void effective_balance_object::SharedCtor() {
current_balance_ = uint64_t{0u};
}

effective_balance_object::~effective_balance_object() {
  // @@protoc_insertion_point(destructor:koinos.contracts.vhp.effective_balance_object)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void effective_balance_object::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void effective_balance_object::ArenaDtor(void* object) {
  effective_balance_object* _this = reinterpret_cast< effective_balance_object* >(object);
  (void)_this;
}
void effective_balance_object::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void effective_balance_object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void effective_balance_object::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.vhp.effective_balance_object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  past_balances_.Clear();
  current_balance_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* effective_balance_object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 current_balance = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          current_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .koinos.contracts.vhp.balance_entry past_balances = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_past_balances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* effective_balance_object::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.vhp.effective_balance_object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 current_balance = 1 [jstype = JS_STRING];
  if (this->_internal_current_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_current_balance(), target);
  }

  // repeated .koinos.contracts.vhp.balance_entry past_balances = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_past_balances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_past_balances(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.vhp.effective_balance_object)
  return target;
}

size_t effective_balance_object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.vhp.effective_balance_object)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.contracts.vhp.balance_entry past_balances = 2;
  total_size += 1UL * this->_internal_past_balances_size();
  for (const auto& msg : this->past_balances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 current_balance = 1 [jstype = JS_STRING];
  if (this->_internal_current_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_current_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData effective_balance_object::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    effective_balance_object::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*effective_balance_object::GetClassData() const { return &_class_data_; }

void effective_balance_object::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<effective_balance_object *>(to)->MergeFrom(
      static_cast<const effective_balance_object &>(from));
}


void effective_balance_object::MergeFrom(const effective_balance_object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.vhp.effective_balance_object)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  past_balances_.MergeFrom(from.past_balances_);
  if (from._internal_current_balance() != 0) {
    _internal_set_current_balance(from._internal_current_balance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void effective_balance_object::CopyFrom(const effective_balance_object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.vhp.effective_balance_object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool effective_balance_object::IsInitialized() const {
  return true;
}

void effective_balance_object::InternalSwap(effective_balance_object* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  past_balances_.InternalSwap(&other->past_balances_);
  swap(current_balance_, other->current_balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata effective_balance_object::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fvhp_2fvhp_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fvhp_2fvhp_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace vhp
}  // namespace contracts
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::contracts::vhp::effective_balance_of_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::vhp::effective_balance_of_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::vhp::effective_balance_of_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::vhp::effective_balance_of_result* Arena::CreateMaybeMessage< ::koinos::contracts::vhp::effective_balance_of_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::vhp::effective_balance_of_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::vhp::balance_entry* Arena::CreateMaybeMessage< ::koinos::contracts::vhp::balance_entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::vhp::balance_entry >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::vhp::effective_balance_object* Arena::CreateMaybeMessage< ::koinos::contracts::vhp::effective_balance_object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::vhp::effective_balance_object >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
