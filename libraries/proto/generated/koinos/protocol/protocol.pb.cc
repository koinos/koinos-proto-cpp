// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/protocol/protocol.proto

#include "koinos/protocol/protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_active_block_data_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_active_transaction_data_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_block_active_data_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_block_header_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_block_passive_data_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_call_contract_operation_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_contract_call_bundle_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_operation_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_passive_block_data_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_passive_transaction_data_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_set_system_call_operation_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_system_call_target_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_transaction_active_data_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_transaction_passive_data_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_upload_contract_operation_koinos_2fprotocol_2fprotocol_2eproto;
namespace koinos {
namespace protocol {
class contract_call_bundleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<contract_call_bundle> _instance;
} _contract_call_bundle_default_instance_;
class system_call_targetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<system_call_target> _instance;
} _system_call_target_default_instance_;
class upload_contract_operationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<upload_contract_operation> _instance;
} _upload_contract_operation_default_instance_;
class call_contract_operationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<call_contract_operation> _instance;
} _call_contract_operation_default_instance_;
class set_system_call_operationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<set_system_call_operation> _instance;
} _set_system_call_operation_default_instance_;
class operationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<operation> _instance;
} _operation_default_instance_;
class active_transaction_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<active_transaction_data> _instance;
} _active_transaction_data_default_instance_;
class passive_transaction_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<passive_transaction_data> _instance;
} _passive_transaction_data_default_instance_;
class transaction_active_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<transaction_active_data> _instance;
} _transaction_active_data_default_instance_;
class transaction_passive_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<transaction_passive_data> _instance;
} _transaction_passive_data_default_instance_;
class transactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<transaction> _instance;
} _transaction_default_instance_;
class active_block_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<active_block_data> _instance;
} _active_block_data_default_instance_;
class passive_block_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<passive_block_data> _instance;
} _passive_block_data_default_instance_;
class block_headerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<block_header> _instance;
} _block_header_default_instance_;
class block_active_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<block_active_data> _instance;
} _block_active_data_default_instance_;
class block_passive_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<block_passive_data> _instance;
} _block_passive_data_default_instance_;
class blockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<block> _instance;
} _block_default_instance_;
class block_receiptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<block_receipt> _instance;
} _block_receipt_default_instance_;
}  // namespace protocol
}  // namespace koinos
static void InitDefaultsscc_info_active_block_data_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_active_block_data_default_instance_;
    new (ptr) ::koinos::protocol::active_block_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_active_block_data_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_active_block_data_koinos_2fprotocol_2fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_active_transaction_data_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_active_transaction_data_default_instance_;
    new (ptr) ::koinos::protocol::active_transaction_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_active_transaction_data_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_active_transaction_data_koinos_2fprotocol_2fprotocol_2eproto}, {
      &scc_info_operation_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_block_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_block_default_instance_;
    new (ptr) ::koinos::protocol::block();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_block_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_block_koinos_2fprotocol_2fprotocol_2eproto}, {
      &scc_info_block_header_koinos_2fprotocol_2fprotocol_2eproto.base,
      &scc_info_block_active_data_koinos_2fprotocol_2fprotocol_2eproto.base,
      &scc_info_block_passive_data_koinos_2fprotocol_2fprotocol_2eproto.base,
      &scc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_block_active_data_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_block_active_data_default_instance_;
    new (ptr) ::koinos::protocol::block_active_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_block_active_data_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_block_active_data_koinos_2fprotocol_2fprotocol_2eproto}, {
      &scc_info_active_block_data_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_block_header_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_block_header_default_instance_;
    new (ptr) ::koinos::protocol::block_header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_block_header_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_block_header_koinos_2fprotocol_2fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_block_passive_data_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_block_passive_data_default_instance_;
    new (ptr) ::koinos::protocol::block_passive_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_block_passive_data_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_block_passive_data_koinos_2fprotocol_2fprotocol_2eproto}, {
      &scc_info_passive_block_data_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_block_receipt_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_block_receipt_default_instance_;
    new (ptr) ::koinos::protocol::block_receipt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_block_receipt_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_block_receipt_koinos_2fprotocol_2fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_call_contract_operation_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_call_contract_operation_default_instance_;
    new (ptr) ::koinos::protocol::call_contract_operation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_call_contract_operation_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_call_contract_operation_koinos_2fprotocol_2fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_contract_call_bundle_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_contract_call_bundle_default_instance_;
    new (ptr) ::koinos::protocol::contract_call_bundle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_contract_call_bundle_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_contract_call_bundle_koinos_2fprotocol_2fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_operation_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_operation_default_instance_;
    new (ptr) ::koinos::protocol::operation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_operation_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_operation_koinos_2fprotocol_2fprotocol_2eproto}, {
      &scc_info_upload_contract_operation_koinos_2fprotocol_2fprotocol_2eproto.base,
      &scc_info_call_contract_operation_koinos_2fprotocol_2fprotocol_2eproto.base,
      &scc_info_set_system_call_operation_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_passive_block_data_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_passive_block_data_default_instance_;
    new (ptr) ::koinos::protocol::passive_block_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_passive_block_data_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_passive_block_data_koinos_2fprotocol_2fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_passive_transaction_data_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_passive_transaction_data_default_instance_;
    new (ptr) ::koinos::protocol::passive_transaction_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_passive_transaction_data_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_passive_transaction_data_koinos_2fprotocol_2fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_set_system_call_operation_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_set_system_call_operation_default_instance_;
    new (ptr) ::koinos::protocol::set_system_call_operation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_set_system_call_operation_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_set_system_call_operation_koinos_2fprotocol_2fprotocol_2eproto}, {
      &scc_info_system_call_target_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_system_call_target_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_system_call_target_default_instance_;
    new (ptr) ::koinos::protocol::system_call_target();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_system_call_target_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_system_call_target_koinos_2fprotocol_2fprotocol_2eproto}, {
      &scc_info_contract_call_bundle_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_transaction_default_instance_;
    new (ptr) ::koinos::protocol::transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto}, {
      &scc_info_transaction_active_data_koinos_2fprotocol_2fprotocol_2eproto.base,
      &scc_info_transaction_passive_data_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_transaction_active_data_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_transaction_active_data_default_instance_;
    new (ptr) ::koinos::protocol::transaction_active_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_transaction_active_data_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_transaction_active_data_koinos_2fprotocol_2fprotocol_2eproto}, {
      &scc_info_active_transaction_data_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_transaction_passive_data_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_transaction_passive_data_default_instance_;
    new (ptr) ::koinos::protocol::transaction_passive_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_transaction_passive_data_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_transaction_passive_data_koinos_2fprotocol_2fprotocol_2eproto}, {
      &scc_info_passive_transaction_data_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_upload_contract_operation_koinos_2fprotocol_2fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::protocol::_upload_contract_operation_default_instance_;
    new (ptr) ::koinos::protocol::upload_contract_operation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_upload_contract_operation_koinos_2fprotocol_2fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_upload_contract_operation_koinos_2fprotocol_2fprotocol_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fprotocol_2fprotocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fprotocol_2fprotocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fprotocol_2fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::contract_call_bundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::contract_call_bundle, contract_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::contract_call_bundle, entry_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::system_call_target, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::system_call_target, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::system_call_target, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::upload_contract_operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::upload_contract_operation, contract_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::upload_contract_operation, bytecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::call_contract_operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::call_contract_operation, contract_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::call_contract_operation, entry_point_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::call_contract_operation, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::set_system_call_operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::set_system_call_operation, call_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::set_system_call_operation, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::operation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::operation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::operation, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::active_transaction_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::active_transaction_data, resource_limit_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::active_transaction_data, nonce_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::active_transaction_data, operations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::passive_transaction_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_active_data, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_active_data, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_active_data, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_passive_data, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_passive_data, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_passive_data, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction, id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction, active_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction, passive_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction, signature_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::active_block_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::active_block_data, transaction_merkle_root_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::active_block_data, passive_data_merkle_root_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::active_block_data, signer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::passive_block_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_header, previous_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_header, height_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_header, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_active_data, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_active_data, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_active_data, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_passive_data, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_passive_data, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_passive_data, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block, id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block, header_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block, active_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block, passive_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block, signature_data_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::protocol::contract_call_bundle)},
  { 7, -1, sizeof(::koinos::protocol::system_call_target)},
  { 15, -1, sizeof(::koinos::protocol::upload_contract_operation)},
  { 22, -1, sizeof(::koinos::protocol::call_contract_operation)},
  { 30, -1, sizeof(::koinos::protocol::set_system_call_operation)},
  { 37, -1, sizeof(::koinos::protocol::operation)},
  { 46, -1, sizeof(::koinos::protocol::active_transaction_data)},
  { 54, -1, sizeof(::koinos::protocol::passive_transaction_data)},
  { 59, -1, sizeof(::koinos::protocol::transaction_active_data)},
  { 67, -1, sizeof(::koinos::protocol::transaction_passive_data)},
  { 75, -1, sizeof(::koinos::protocol::transaction)},
  { 84, -1, sizeof(::koinos::protocol::active_block_data)},
  { 92, -1, sizeof(::koinos::protocol::passive_block_data)},
  { 97, -1, sizeof(::koinos::protocol::block_header)},
  { 105, -1, sizeof(::koinos::protocol::block_active_data)},
  { 113, -1, sizeof(::koinos::protocol::block_passive_data)},
  { 121, -1, sizeof(::koinos::protocol::block)},
  { 132, -1, sizeof(::koinos::protocol::block_receipt)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_contract_call_bundle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_system_call_target_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_upload_contract_operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_call_contract_operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_set_system_call_operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_active_transaction_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_passive_transaction_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_transaction_active_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_transaction_passive_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_active_block_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_passive_block_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_block_header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_block_active_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_block_passive_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_block_receipt_default_instance_),
};

const char descriptor_table_protodef_koinos_2fprotocol_2fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036koinos/protocol/protocol.proto\022\017koinos"
  ".protocol\"@\n\024contract_call_bundle\022\023\n\013con"
  "tract_id\030\001 \001(\014\022\023\n\013entry_point\030\002 \001(\r\"w\n\022s"
  "ystem_call_target\022\022\n\010thunk_id\030\001 \001(\rH\000\022C\n"
  "\022system_call_bundle\030\002 \001(\0132%.koinos.proto"
  "col.contract_call_bundleH\000B\010\n\006target\"B\n\031"
  "upload_contract_operation\022\023\n\013contract_id"
  "\030\001 \001(\014\022\020\n\010bytecode\030\002 \001(\014\"Q\n\027call_contrac"
  "t_operation\022\023\n\013contract_id\030\001 \001(\014\022\023\n\013entr"
  "y_point\030\002 \001(\r\022\014\n\004args\030\003 \001(\014\"a\n\031set_syste"
  "m_call_operation\022\017\n\007call_id\030\001 \001(\r\0223\n\006tar"
  "get\030\002 \001(\0132#.koinos.protocol.system_call_"
  "target\"\342\001\n\toperation\022E\n\017upload_contract\030"
  "\001 \001(\0132*.koinos.protocol.upload_contract_"
  "operationH\000\022A\n\rcall_contract\030\002 \001(\0132(.koi"
  "nos.protocol.call_contract_operationH\000\022E"
  "\n\017set_system_call\030\003 \001(\0132*.koinos.protoco"
  "l.set_system_call_operationH\000B\004\n\002op\"p\n\027a"
  "ctive_transaction_data\022\026\n\016resource_limit"
  "\030\001 \001(\004\022\r\n\005nonce\030\002 \001(\004\022.\n\noperations\030\003 \003("
  "\0132\032.koinos.protocol.operation\"\032\n\030passive"
  "_transaction_data\"m\n\027transaction_active_"
  "data\022:\n\006native\030\001 \001(\0132(.koinos.protocol.a"
  "ctive_transaction_dataH\000\022\016\n\004blob\030\002 \001(\014H\000"
  "B\006\n\004data\"o\n\030transaction_passive_data\022;\n\006"
  "native\030\001 \001(\0132).koinos.protocol.passive_t"
  "ransaction_dataH\000\022\016\n\004blob\030\002 \001(\014H\000B\006\n\004dat"
  "a\"\247\001\n\013transaction\022\n\n\002id\030\001 \001(\014\0228\n\006active\030"
  "\002 \001(\0132(.koinos.protocol.transaction_acti"
  "ve_data\022:\n\007passive\030\003 \001(\0132).koinos.protoc"
  "ol.transaction_passive_data\022\026\n\016signature"
  "_data\030\004 \001(\014\"f\n\021active_block_data\022\037\n\027tran"
  "saction_merkle_root\030\001 \001(\014\022 \n\030passive_dat"
  "a_merkle_root\030\002 \001(\014\022\016\n\006signer\030\003 \001(\014\"\024\n\022p"
  "assive_block_data\"C\n\014block_header\022\020\n\010pre"
  "vious\030\001 \001(\014\022\016\n\006height\030\002 \001(\004\022\021\n\ttimestamp"
  "\030\003 \001(\004\"a\n\021block_active_data\0224\n\006native\030\001 "
  "\001(\0132\".koinos.protocol.active_block_dataH"
  "\000\022\016\n\004blob\030\002 \001(\014H\000B\006\n\004data\"c\n\022block_passi"
  "ve_data\0225\n\006native\030\001 \001(\0132#.koinos.protoco"
  "l.passive_block_dataH\000\022\016\n\004blob\030\002 \001(\014H\000B\006"
  "\n\004data\"\370\001\n\005block\022\n\n\002id\030\001 \001(\014\022-\n\006header\030\002"
  " \001(\0132\035.koinos.protocol.block_header\0222\n\006a"
  "ctive\030\003 \001(\0132\".koinos.protocol.block_acti"
  "ve_data\0224\n\007passive\030\004 \001(\0132#.koinos.protoc"
  "ol.block_passive_data\022\026\n\016signature_data\030"
  "\005 \001(\014\0222\n\014transactions\030\006 \003(\0132\034.koinos.pro"
  "tocol.transaction\"\017\n\rblock_receiptB7Z5gi"
  "thub.com/koinos/koinos-proto-golang/koin"
  "os/protocolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_sccs[18] = {
  &scc_info_active_block_data_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_active_transaction_data_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_block_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_block_active_data_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_block_header_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_block_passive_data_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_block_receipt_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_call_contract_operation_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_contract_call_bundle_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_operation_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_passive_block_data_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_passive_transaction_data_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_set_system_call_operation_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_system_call_target_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_transaction_active_data_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_transaction_passive_data_koinos_2fprotocol_2fprotocol_2eproto.base,
  &scc_info_upload_contract_operation_koinos_2fprotocol_2fprotocol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fprotocol_2fprotocol_2eproto = {
  false, false, descriptor_table_protodef_koinos_2fprotocol_2fprotocol_2eproto, "koinos/protocol/protocol.proto", 1979,
  &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once, descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_sccs, descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_deps, 18, 0,
  schemas, file_default_instances, TableStruct_koinos_2fprotocol_2fprotocol_2eproto::offsets,
  file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto, 18, file_level_enum_descriptors_koinos_2fprotocol_2fprotocol_2eproto, file_level_service_descriptors_koinos_2fprotocol_2fprotocol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_koinos_2fprotocol_2fprotocol_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_koinos_2fprotocol_2fprotocol_2eproto)), true);
namespace koinos {
namespace protocol {

// ===================================================================

class contract_call_bundle::_Internal {
 public:
};

contract_call_bundle::contract_call_bundle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.contract_call_bundle)
}
contract_call_bundle::contract_call_bundle(const contract_call_bundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_id(), 
      GetArena());
  }
  entry_point_ = from.entry_point_;
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.contract_call_bundle)
}

void contract_call_bundle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_contract_call_bundle_koinos_2fprotocol_2fprotocol_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_point_ = 0u;
}

contract_call_bundle::~contract_call_bundle() {
  // @@protoc_insertion_point(destructor:koinos.protocol.contract_call_bundle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void contract_call_bundle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void contract_call_bundle::ArenaDtor(void* object) {
  contract_call_bundle* _this = reinterpret_cast< contract_call_bundle* >(object);
  (void)_this;
}
void contract_call_bundle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void contract_call_bundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const contract_call_bundle& contract_call_bundle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_contract_call_bundle_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void contract_call_bundle::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.contract_call_bundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty();
  entry_point_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contract_call_bundle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 entry_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entry_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* contract_call_bundle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.contract_call_bundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contract_id = 1;
  if (this->contract_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // uint32 entry_point = 2;
  if (this->entry_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entry_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.contract_call_bundle)
  return target;
}

size_t contract_call_bundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.contract_call_bundle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contract_id = 1;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_id());
  }

  // uint32 entry_point = 2;
  if (this->entry_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entry_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void contract_call_bundle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.contract_call_bundle)
  GOOGLE_DCHECK_NE(&from, this);
  const contract_call_bundle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<contract_call_bundle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.contract_call_bundle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.contract_call_bundle)
    MergeFrom(*source);
  }
}

void contract_call_bundle::MergeFrom(const contract_call_bundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.contract_call_bundle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.entry_point() != 0) {
    _internal_set_entry_point(from._internal_entry_point());
  }
}

void contract_call_bundle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.contract_call_bundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void contract_call_bundle::CopyFrom(const contract_call_bundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.contract_call_bundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contract_call_bundle::IsInitialized() const {
  return true;
}

void contract_call_bundle::InternalSwap(contract_call_bundle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(entry_point_, other->entry_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata contract_call_bundle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class system_call_target::_Internal {
 public:
  static const ::koinos::protocol::contract_call_bundle& system_call_bundle(const system_call_target* msg);
};

const ::koinos::protocol::contract_call_bundle&
system_call_target::_Internal::system_call_bundle(const system_call_target* msg) {
  return *msg->target_.system_call_bundle_;
}
void system_call_target::set_allocated_system_call_bundle(::koinos::protocol::contract_call_bundle* system_call_bundle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_target();
  if (system_call_bundle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(system_call_bundle);
    if (message_arena != submessage_arena) {
      system_call_bundle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_call_bundle, submessage_arena);
    }
    set_has_system_call_bundle();
    target_.system_call_bundle_ = system_call_bundle;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.system_call_target.system_call_bundle)
}
system_call_target::system_call_target(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.system_call_target)
}
system_call_target::system_call_target(const system_call_target& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_target();
  switch (from.target_case()) {
    case kThunkId: {
      _internal_set_thunk_id(from._internal_thunk_id());
      break;
    }
    case kSystemCallBundle: {
      _internal_mutable_system_call_bundle()->::koinos::protocol::contract_call_bundle::MergeFrom(from._internal_system_call_bundle());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.system_call_target)
}

void system_call_target::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_system_call_target_koinos_2fprotocol_2fprotocol_2eproto.base);
  clear_has_target();
}

system_call_target::~system_call_target() {
  // @@protoc_insertion_point(destructor:koinos.protocol.system_call_target)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void system_call_target::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_target()) {
    clear_target();
  }
}

void system_call_target::ArenaDtor(void* object) {
  system_call_target* _this = reinterpret_cast< system_call_target* >(object);
  (void)_this;
}
void system_call_target::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void system_call_target::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const system_call_target& system_call_target::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_system_call_target_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void system_call_target::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:koinos.protocol.system_call_target)
  switch (target_case()) {
    case kThunkId: {
      // No need to clear
      break;
    }
    case kSystemCallBundle: {
      if (GetArena() == nullptr) {
        delete target_.system_call_bundle_;
      }
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void system_call_target::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.system_call_target)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_target();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* system_call_target::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 thunk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_thunk_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.contract_call_bundle system_call_bundle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_call_bundle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* system_call_target::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.system_call_target)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 thunk_id = 1;
  if (_internal_has_thunk_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_thunk_id(), target);
  }

  // .koinos.protocol.contract_call_bundle system_call_bundle = 2;
  if (_internal_has_system_call_bundle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::system_call_bundle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.system_call_target)
  return target;
}

size_t system_call_target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.system_call_target)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (target_case()) {
    // uint32 thunk_id = 1;
    case kThunkId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_thunk_id());
      break;
    }
    // .koinos.protocol.contract_call_bundle system_call_bundle = 2;
    case kSystemCallBundle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_.system_call_bundle_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void system_call_target::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.system_call_target)
  GOOGLE_DCHECK_NE(&from, this);
  const system_call_target* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<system_call_target>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.system_call_target)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.system_call_target)
    MergeFrom(*source);
  }
}

void system_call_target::MergeFrom(const system_call_target& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.system_call_target)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.target_case()) {
    case kThunkId: {
      _internal_set_thunk_id(from._internal_thunk_id());
      break;
    }
    case kSystemCallBundle: {
      _internal_mutable_system_call_bundle()->::koinos::protocol::contract_call_bundle::MergeFrom(from._internal_system_call_bundle());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void system_call_target::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.system_call_target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_call_target::CopyFrom(const system_call_target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.system_call_target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_call_target::IsInitialized() const {
  return true;
}

void system_call_target::InternalSwap(system_call_target* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata system_call_target::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class upload_contract_operation::_Internal {
 public:
};

upload_contract_operation::upload_contract_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.upload_contract_operation)
}
upload_contract_operation::upload_contract_operation(const upload_contract_operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_id(), 
      GetArena());
  }
  bytecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bytecode().empty()) {
    bytecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bytecode(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.upload_contract_operation)
}

void upload_contract_operation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_upload_contract_operation_koinos_2fprotocol_2fprotocol_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

upload_contract_operation::~upload_contract_operation() {
  // @@protoc_insertion_point(destructor:koinos.protocol.upload_contract_operation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void upload_contract_operation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void upload_contract_operation::ArenaDtor(void* object) {
  upload_contract_operation* _this = reinterpret_cast< upload_contract_operation* >(object);
  (void)_this;
}
void upload_contract_operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void upload_contract_operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const upload_contract_operation& upload_contract_operation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_upload_contract_operation_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void upload_contract_operation::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.upload_contract_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty();
  bytecode_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* upload_contract_operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bytecode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bytecode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* upload_contract_operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.upload_contract_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contract_id = 1;
  if (this->contract_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // bytes bytecode = 2;
  if (this->bytecode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bytecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.upload_contract_operation)
  return target;
}

size_t upload_contract_operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.upload_contract_operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contract_id = 1;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_id());
  }

  // bytes bytecode = 2;
  if (this->bytecode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytecode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void upload_contract_operation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.upload_contract_operation)
  GOOGLE_DCHECK_NE(&from, this);
  const upload_contract_operation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<upload_contract_operation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.upload_contract_operation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.upload_contract_operation)
    MergeFrom(*source);
  }
}

void upload_contract_operation::MergeFrom(const upload_contract_operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.upload_contract_operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.bytecode().size() > 0) {
    _internal_set_bytecode(from._internal_bytecode());
  }
}

void upload_contract_operation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.upload_contract_operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void upload_contract_operation::CopyFrom(const upload_contract_operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.upload_contract_operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upload_contract_operation::IsInitialized() const {
  return true;
}

void upload_contract_operation::InternalSwap(upload_contract_operation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bytecode_.Swap(&other->bytecode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata upload_contract_operation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class call_contract_operation::_Internal {
 public:
};

call_contract_operation::call_contract_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.call_contract_operation)
}
call_contract_operation::call_contract_operation(const call_contract_operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_id(), 
      GetArena());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArena());
  }
  entry_point_ = from.entry_point_;
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.call_contract_operation)
}

void call_contract_operation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_call_contract_operation_koinos_2fprotocol_2fprotocol_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_point_ = 0u;
}

call_contract_operation::~call_contract_operation() {
  // @@protoc_insertion_point(destructor:koinos.protocol.call_contract_operation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void call_contract_operation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void call_contract_operation::ArenaDtor(void* object) {
  call_contract_operation* _this = reinterpret_cast< call_contract_operation* >(object);
  (void)_this;
}
void call_contract_operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void call_contract_operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const call_contract_operation& call_contract_operation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_call_contract_operation_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void call_contract_operation::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.call_contract_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty();
  args_.ClearToEmpty();
  entry_point_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* call_contract_operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 entry_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entry_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* call_contract_operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.call_contract_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contract_id = 1;
  if (this->contract_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // uint32 entry_point = 2;
  if (this->entry_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entry_point(), target);
  }

  // bytes args = 3;
  if (this->args().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.call_contract_operation)
  return target;
}

size_t call_contract_operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.call_contract_operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contract_id = 1;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_id());
  }

  // bytes args = 3;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // uint32 entry_point = 2;
  if (this->entry_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entry_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void call_contract_operation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.call_contract_operation)
  GOOGLE_DCHECK_NE(&from, this);
  const call_contract_operation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<call_contract_operation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.call_contract_operation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.call_contract_operation)
    MergeFrom(*source);
  }
}

void call_contract_operation::MergeFrom(const call_contract_operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.call_contract_operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.args().size() > 0) {
    _internal_set_args(from._internal_args());
  }
  if (from.entry_point() != 0) {
    _internal_set_entry_point(from._internal_entry_point());
  }
}

void call_contract_operation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.call_contract_operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void call_contract_operation::CopyFrom(const call_contract_operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.call_contract_operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool call_contract_operation::IsInitialized() const {
  return true;
}

void call_contract_operation::InternalSwap(call_contract_operation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(entry_point_, other->entry_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata call_contract_operation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class set_system_call_operation::_Internal {
 public:
  static const ::koinos::protocol::system_call_target& target(const set_system_call_operation* msg);
};

const ::koinos::protocol::system_call_target&
set_system_call_operation::_Internal::target(const set_system_call_operation* msg) {
  return *msg->target_;
}
set_system_call_operation::set_system_call_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.set_system_call_operation)
}
set_system_call_operation::set_system_call_operation(const set_system_call_operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::koinos::protocol::system_call_target(*from.target_);
  } else {
    target_ = nullptr;
  }
  call_id_ = from.call_id_;
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.set_system_call_operation)
}

void set_system_call_operation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_set_system_call_operation_koinos_2fprotocol_2fprotocol_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&target_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&call_id_) -
      reinterpret_cast<char*>(&target_)) + sizeof(call_id_));
}

set_system_call_operation::~set_system_call_operation() {
  // @@protoc_insertion_point(destructor:koinos.protocol.set_system_call_operation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void set_system_call_operation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete target_;
}

void set_system_call_operation::ArenaDtor(void* object) {
  set_system_call_operation* _this = reinterpret_cast< set_system_call_operation* >(object);
  (void)_this;
}
void set_system_call_operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_system_call_operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const set_system_call_operation& set_system_call_operation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_set_system_call_operation_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void set_system_call_operation::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.set_system_call_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  call_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_system_call_operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 call_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          call_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.system_call_target target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_system_call_operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.set_system_call_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 call_id = 1;
  if (this->call_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_call_id(), target);
  }

  // .koinos.protocol.system_call_target target = 2;
  if (this->has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.set_system_call_operation)
  return target;
}

size_t set_system_call_operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.set_system_call_operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.system_call_target target = 2;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // uint32 call_id = 1;
  if (this->call_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_call_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void set_system_call_operation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.set_system_call_operation)
  GOOGLE_DCHECK_NE(&from, this);
  const set_system_call_operation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<set_system_call_operation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.set_system_call_operation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.set_system_call_operation)
    MergeFrom(*source);
  }
}

void set_system_call_operation::MergeFrom(const set_system_call_operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.set_system_call_operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    _internal_mutable_target()->::koinos::protocol::system_call_target::MergeFrom(from._internal_target());
  }
  if (from.call_id() != 0) {
    _internal_set_call_id(from._internal_call_id());
  }
}

void set_system_call_operation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.set_system_call_operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_system_call_operation::CopyFrom(const set_system_call_operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.set_system_call_operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_system_call_operation::IsInitialized() const {
  return true;
}

void set_system_call_operation::InternalSwap(set_system_call_operation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(set_system_call_operation, call_id_)
      + sizeof(set_system_call_operation::call_id_)
      - PROTOBUF_FIELD_OFFSET(set_system_call_operation, target_)>(
          reinterpret_cast<char*>(&target_),
          reinterpret_cast<char*>(&other->target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata set_system_call_operation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class operation::_Internal {
 public:
  static const ::koinos::protocol::upload_contract_operation& upload_contract(const operation* msg);
  static const ::koinos::protocol::call_contract_operation& call_contract(const operation* msg);
  static const ::koinos::protocol::set_system_call_operation& set_system_call(const operation* msg);
};

const ::koinos::protocol::upload_contract_operation&
operation::_Internal::upload_contract(const operation* msg) {
  return *msg->op_.upload_contract_;
}
const ::koinos::protocol::call_contract_operation&
operation::_Internal::call_contract(const operation* msg) {
  return *msg->op_.call_contract_;
}
const ::koinos::protocol::set_system_call_operation&
operation::_Internal::set_system_call(const operation* msg) {
  return *msg->op_.set_system_call_;
}
void operation::set_allocated_upload_contract(::koinos::protocol::upload_contract_operation* upload_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (upload_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(upload_contract);
    if (message_arena != submessage_arena) {
      upload_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upload_contract, submessage_arena);
    }
    set_has_upload_contract();
    op_.upload_contract_ = upload_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.operation.upload_contract)
}
void operation::set_allocated_call_contract(::koinos::protocol::call_contract_operation* call_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (call_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(call_contract);
    if (message_arena != submessage_arena) {
      call_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_contract, submessage_arena);
    }
    set_has_call_contract();
    op_.call_contract_ = call_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.operation.call_contract)
}
void operation::set_allocated_set_system_call(::koinos::protocol::set_system_call_operation* set_system_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (set_system_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_system_call);
    if (message_arena != submessage_arena) {
      set_system_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_system_call, submessage_arena);
    }
    set_has_set_system_call();
    op_.set_system_call_ = set_system_call;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.operation.set_system_call)
}
operation::operation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.operation)
}
operation::operation(const operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_op();
  switch (from.op_case()) {
    case kUploadContract: {
      _internal_mutable_upload_contract()->::koinos::protocol::upload_contract_operation::MergeFrom(from._internal_upload_contract());
      break;
    }
    case kCallContract: {
      _internal_mutable_call_contract()->::koinos::protocol::call_contract_operation::MergeFrom(from._internal_call_contract());
      break;
    }
    case kSetSystemCall: {
      _internal_mutable_set_system_call()->::koinos::protocol::set_system_call_operation::MergeFrom(from._internal_set_system_call());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.operation)
}

void operation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_operation_koinos_2fprotocol_2fprotocol_2eproto.base);
  clear_has_op();
}

operation::~operation() {
  // @@protoc_insertion_point(destructor:koinos.protocol.operation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void operation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_op()) {
    clear_op();
  }
}

void operation::ArenaDtor(void* object) {
  operation* _this = reinterpret_cast< operation* >(object);
  (void)_this;
}
void operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const operation& operation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_operation_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void operation::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:koinos.protocol.operation)
  switch (op_case()) {
    case kUploadContract: {
      if (GetArena() == nullptr) {
        delete op_.upload_contract_;
      }
      break;
    }
    case kCallContract: {
      if (GetArena() == nullptr) {
        delete op_.call_contract_;
      }
      break;
    }
    case kSetSystemCall: {
      if (GetArena() == nullptr) {
        delete op_.set_system_call_;
      }
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_NOT_SET;
}


void operation::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_op();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.upload_contract_operation upload_contract = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_upload_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.call_contract_operation call_contract = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.set_system_call_operation set_system_call = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_system_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.upload_contract_operation upload_contract = 1;
  if (_internal_has_upload_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::upload_contract(this), target, stream);
  }

  // .koinos.protocol.call_contract_operation call_contract = 2;
  if (_internal_has_call_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::call_contract(this), target, stream);
  }

  // .koinos.protocol.set_system_call_operation set_system_call = 3;
  if (_internal_has_set_system_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::set_system_call(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.operation)
  return target;
}

size_t operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (op_case()) {
    // .koinos.protocol.upload_contract_operation upload_contract = 1;
    case kUploadContract: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.upload_contract_);
      break;
    }
    // .koinos.protocol.call_contract_operation call_contract = 2;
    case kCallContract: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.call_contract_);
      break;
    }
    // .koinos.protocol.set_system_call_operation set_system_call = 3;
    case kSetSystemCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.set_system_call_);
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void operation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.operation)
  GOOGLE_DCHECK_NE(&from, this);
  const operation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<operation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.operation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.operation)
    MergeFrom(*source);
  }
}

void operation::MergeFrom(const operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.op_case()) {
    case kUploadContract: {
      _internal_mutable_upload_contract()->::koinos::protocol::upload_contract_operation::MergeFrom(from._internal_upload_contract());
      break;
    }
    case kCallContract: {
      _internal_mutable_call_contract()->::koinos::protocol::call_contract_operation::MergeFrom(from._internal_call_contract());
      break;
    }
    case kSetSystemCall: {
      _internal_mutable_set_system_call()->::koinos::protocol::set_system_call_operation::MergeFrom(from._internal_set_system_call());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
}

void operation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operation::CopyFrom(const operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operation::IsInitialized() const {
  return true;
}

void operation::InternalSwap(operation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(op_, other->op_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata operation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class active_transaction_data::_Internal {
 public:
};

active_transaction_data::active_transaction_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  operations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.active_transaction_data)
}
active_transaction_data::active_transaction_data(const active_transaction_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&resource_limit_, &from.resource_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&resource_limit_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.active_transaction_data)
}

void active_transaction_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_active_transaction_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&resource_limit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&resource_limit_)) + sizeof(nonce_));
}

active_transaction_data::~active_transaction_data() {
  // @@protoc_insertion_point(destructor:koinos.protocol.active_transaction_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void active_transaction_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void active_transaction_data::ArenaDtor(void* object) {
  active_transaction_data* _this = reinterpret_cast< active_transaction_data* >(object);
  (void)_this;
}
void active_transaction_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void active_transaction_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const active_transaction_data& active_transaction_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_active_transaction_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void active_transaction_data::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.active_transaction_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  ::memset(&resource_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&resource_limit_)) + sizeof(nonce_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* active_transaction_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 resource_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          resource_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .koinos.protocol.operation operations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* active_transaction_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.active_transaction_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 resource_limit = 1;
  if (this->resource_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_resource_limit(), target);
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  // repeated .koinos.protocol.operation operations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_operations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.active_transaction_data)
  return target;
}

size_t active_transaction_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.active_transaction_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.protocol.operation operations = 3;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 resource_limit = 1;
  if (this->resource_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_resource_limit());
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void active_transaction_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.active_transaction_data)
  GOOGLE_DCHECK_NE(&from, this);
  const active_transaction_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<active_transaction_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.active_transaction_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.active_transaction_data)
    MergeFrom(*source);
  }
}

void active_transaction_data::MergeFrom(const active_transaction_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.active_transaction_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  if (from.resource_limit() != 0) {
    _internal_set_resource_limit(from._internal_resource_limit());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
}

void active_transaction_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.active_transaction_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void active_transaction_data::CopyFrom(const active_transaction_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.active_transaction_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool active_transaction_data::IsInitialized() const {
  return true;
}

void active_transaction_data::InternalSwap(active_transaction_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  operations_.InternalSwap(&other->operations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(active_transaction_data, nonce_)
      + sizeof(active_transaction_data::nonce_)
      - PROTOBUF_FIELD_OFFSET(active_transaction_data, resource_limit_)>(
          reinterpret_cast<char*>(&resource_limit_),
          reinterpret_cast<char*>(&other->resource_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata active_transaction_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class passive_transaction_data::_Internal {
 public:
};

passive_transaction_data::passive_transaction_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.passive_transaction_data)
}
passive_transaction_data::passive_transaction_data(const passive_transaction_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.passive_transaction_data)
}

void passive_transaction_data::SharedCtor() {
}

passive_transaction_data::~passive_transaction_data() {
  // @@protoc_insertion_point(destructor:koinos.protocol.passive_transaction_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void passive_transaction_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void passive_transaction_data::ArenaDtor(void* object) {
  passive_transaction_data* _this = reinterpret_cast< passive_transaction_data* >(object);
  (void)_this;
}
void passive_transaction_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void passive_transaction_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const passive_transaction_data& passive_transaction_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_passive_transaction_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void passive_transaction_data::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.passive_transaction_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* passive_transaction_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* passive_transaction_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.passive_transaction_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.passive_transaction_data)
  return target;
}

size_t passive_transaction_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.passive_transaction_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void passive_transaction_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.passive_transaction_data)
  GOOGLE_DCHECK_NE(&from, this);
  const passive_transaction_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<passive_transaction_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.passive_transaction_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.passive_transaction_data)
    MergeFrom(*source);
  }
}

void passive_transaction_data::MergeFrom(const passive_transaction_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.passive_transaction_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void passive_transaction_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.passive_transaction_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void passive_transaction_data::CopyFrom(const passive_transaction_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.passive_transaction_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool passive_transaction_data::IsInitialized() const {
  return true;
}

void passive_transaction_data::InternalSwap(passive_transaction_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata passive_transaction_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class transaction_active_data::_Internal {
 public:
  static const ::koinos::protocol::active_transaction_data& native(const transaction_active_data* msg);
};

const ::koinos::protocol::active_transaction_data&
transaction_active_data::_Internal::native(const transaction_active_data* msg) {
  return *msg->data_.native_;
}
void transaction_active_data::set_allocated_native(::koinos::protocol::active_transaction_data* native) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (native) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(native);
    if (message_arena != submessage_arena) {
      native = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, native, submessage_arena);
    }
    set_has_native();
    data_.native_ = native;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction_active_data.native)
}
transaction_active_data::transaction_active_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.transaction_active_data)
}
transaction_active_data::transaction_active_data(const transaction_active_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kNative: {
      _internal_mutable_native()->::koinos::protocol::active_transaction_data::MergeFrom(from._internal_native());
      break;
    }
    case kBlob: {
      _internal_set_blob(from._internal_blob());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.transaction_active_data)
}

void transaction_active_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_transaction_active_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  clear_has_data();
}

transaction_active_data::~transaction_active_data() {
  // @@protoc_insertion_point(destructor:koinos.protocol.transaction_active_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void transaction_active_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void transaction_active_data::ArenaDtor(void* object) {
  transaction_active_data* _this = reinterpret_cast< transaction_active_data* >(object);
  (void)_this;
}
void transaction_active_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_active_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const transaction_active_data& transaction_active_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_transaction_active_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void transaction_active_data::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:koinos.protocol.transaction_active_data)
  switch (data_case()) {
    case kNative: {
      if (GetArena() == nullptr) {
        delete data_.native_;
      }
      break;
    }
    case kBlob: {
      data_.blob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void transaction_active_data::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.transaction_active_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_active_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.active_transaction_data native = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_native(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes blob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction_active_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.transaction_active_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.active_transaction_data native = 1;
  if (_internal_has_native()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::native(this), target, stream);
  }

  // bytes blob = 2;
  if (_internal_has_blob()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.transaction_active_data)
  return target;
}

size_t transaction_active_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.transaction_active_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .koinos.protocol.active_transaction_data native = 1;
    case kNative: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.native_);
      break;
    }
    // bytes blob = 2;
    case kBlob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_blob());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void transaction_active_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.transaction_active_data)
  GOOGLE_DCHECK_NE(&from, this);
  const transaction_active_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<transaction_active_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.transaction_active_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.transaction_active_data)
    MergeFrom(*source);
  }
}

void transaction_active_data::MergeFrom(const transaction_active_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.transaction_active_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kNative: {
      _internal_mutable_native()->::koinos::protocol::active_transaction_data::MergeFrom(from._internal_native());
      break;
    }
    case kBlob: {
      _internal_set_blob(from._internal_blob());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void transaction_active_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.transaction_active_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transaction_active_data::CopyFrom(const transaction_active_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.transaction_active_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_active_data::IsInitialized() const {
  return true;
}

void transaction_active_data::InternalSwap(transaction_active_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_active_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class transaction_passive_data::_Internal {
 public:
  static const ::koinos::protocol::passive_transaction_data& native(const transaction_passive_data* msg);
};

const ::koinos::protocol::passive_transaction_data&
transaction_passive_data::_Internal::native(const transaction_passive_data* msg) {
  return *msg->data_.native_;
}
void transaction_passive_data::set_allocated_native(::koinos::protocol::passive_transaction_data* native) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (native) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(native);
    if (message_arena != submessage_arena) {
      native = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, native, submessage_arena);
    }
    set_has_native();
    data_.native_ = native;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction_passive_data.native)
}
transaction_passive_data::transaction_passive_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.transaction_passive_data)
}
transaction_passive_data::transaction_passive_data(const transaction_passive_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kNative: {
      _internal_mutable_native()->::koinos::protocol::passive_transaction_data::MergeFrom(from._internal_native());
      break;
    }
    case kBlob: {
      _internal_set_blob(from._internal_blob());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.transaction_passive_data)
}

void transaction_passive_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_transaction_passive_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  clear_has_data();
}

transaction_passive_data::~transaction_passive_data() {
  // @@protoc_insertion_point(destructor:koinos.protocol.transaction_passive_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void transaction_passive_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void transaction_passive_data::ArenaDtor(void* object) {
  transaction_passive_data* _this = reinterpret_cast< transaction_passive_data* >(object);
  (void)_this;
}
void transaction_passive_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_passive_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const transaction_passive_data& transaction_passive_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_transaction_passive_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void transaction_passive_data::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:koinos.protocol.transaction_passive_data)
  switch (data_case()) {
    case kNative: {
      if (GetArena() == nullptr) {
        delete data_.native_;
      }
      break;
    }
    case kBlob: {
      data_.blob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void transaction_passive_data::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.transaction_passive_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_passive_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.passive_transaction_data native = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_native(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes blob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction_passive_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.transaction_passive_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.passive_transaction_data native = 1;
  if (_internal_has_native()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::native(this), target, stream);
  }

  // bytes blob = 2;
  if (_internal_has_blob()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.transaction_passive_data)
  return target;
}

size_t transaction_passive_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.transaction_passive_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .koinos.protocol.passive_transaction_data native = 1;
    case kNative: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.native_);
      break;
    }
    // bytes blob = 2;
    case kBlob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_blob());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void transaction_passive_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.transaction_passive_data)
  GOOGLE_DCHECK_NE(&from, this);
  const transaction_passive_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<transaction_passive_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.transaction_passive_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.transaction_passive_data)
    MergeFrom(*source);
  }
}

void transaction_passive_data::MergeFrom(const transaction_passive_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.transaction_passive_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kNative: {
      _internal_mutable_native()->::koinos::protocol::passive_transaction_data::MergeFrom(from._internal_native());
      break;
    }
    case kBlob: {
      _internal_set_blob(from._internal_blob());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void transaction_passive_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.transaction_passive_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transaction_passive_data::CopyFrom(const transaction_passive_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.transaction_passive_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_passive_data::IsInitialized() const {
  return true;
}

void transaction_passive_data::InternalSwap(transaction_passive_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_passive_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class transaction::_Internal {
 public:
  static const ::koinos::protocol::transaction_active_data& active(const transaction* msg);
  static const ::koinos::protocol::transaction_passive_data& passive(const transaction* msg);
};

const ::koinos::protocol::transaction_active_data&
transaction::_Internal::active(const transaction* msg) {
  return *msg->active_;
}
const ::koinos::protocol::transaction_passive_data&
transaction::_Internal::passive(const transaction* msg) {
  return *msg->passive_;
}
transaction::transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.transaction)
}
transaction::transaction(const transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  signature_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature_data().empty()) {
    signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature_data(), 
      GetArena());
  }
  if (from._internal_has_active()) {
    active_ = new ::koinos::protocol::transaction_active_data(*from.active_);
  } else {
    active_ = nullptr;
  }
  if (from._internal_has_passive()) {
    passive_ = new ::koinos::protocol::transaction_passive_data(*from.passive_);
  } else {
    passive_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.transaction)
}

void transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&active_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&passive_) -
      reinterpret_cast<char*>(&active_)) + sizeof(passive_));
}

transaction::~transaction() {
  // @@protoc_insertion_point(destructor:koinos.protocol.transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete active_;
  if (this != internal_default_instance()) delete passive_;
}

void transaction::ArenaDtor(void* object) {
  transaction* _this = reinterpret_cast< transaction* >(object);
  (void)_this;
}
void transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const transaction& transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  signature_data_.ClearToEmpty();
  if (GetArena() == nullptr && active_ != nullptr) {
    delete active_;
  }
  active_ = nullptr;
  if (GetArena() == nullptr && passive_ != nullptr) {
    delete passive_;
  }
  passive_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.transaction_active_data active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_active(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.transaction_passive_data passive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_passive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_signature_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .koinos.protocol.transaction_active_data active = 2;
  if (this->has_active()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::active(this), target, stream);
  }

  // .koinos.protocol.transaction_passive_data passive = 3;
  if (this->has_passive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::passive(this), target, stream);
  }

  // bytes signature_data = 4;
  if (this->signature_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_signature_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.transaction)
  return target;
}

size_t transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes signature_data = 4;
  if (this->signature_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature_data());
  }

  // .koinos.protocol.transaction_active_data active = 2;
  if (this->has_active()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *active_);
  }

  // .koinos.protocol.transaction_passive_data passive = 3;
  if (this->has_passive()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *passive_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.transaction)
    MergeFrom(*source);
  }
}

void transaction::MergeFrom(const transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.signature_data().size() > 0) {
    _internal_set_signature_data(from._internal_signature_data());
  }
  if (from.has_active()) {
    _internal_mutable_active()->::koinos::protocol::transaction_active_data::MergeFrom(from._internal_active());
  }
  if (from.has_passive()) {
    _internal_mutable_passive()->::koinos::protocol::transaction_passive_data::MergeFrom(from._internal_passive());
  }
}

void transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transaction::CopyFrom(const transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction::IsInitialized() const {
  return true;
}

void transaction::InternalSwap(transaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_data_.Swap(&other->signature_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transaction, passive_)
      + sizeof(transaction::passive_)
      - PROTOBUF_FIELD_OFFSET(transaction, active_)>(
          reinterpret_cast<char*>(&active_),
          reinterpret_cast<char*>(&other->active_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class active_block_data::_Internal {
 public:
};

active_block_data::active_block_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.active_block_data)
}
active_block_data::active_block_data(const active_block_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_merkle_root().empty()) {
    transaction_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_merkle_root(), 
      GetArena());
  }
  passive_data_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passive_data_merkle_root().empty()) {
    passive_data_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_passive_data_merkle_root(), 
      GetArena());
  }
  signer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signer().empty()) {
    signer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signer(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.active_block_data)
}

void active_block_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_active_block_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  transaction_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passive_data_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

active_block_data::~active_block_data() {
  // @@protoc_insertion_point(destructor:koinos.protocol.active_block_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void active_block_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transaction_merkle_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passive_data_merkle_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void active_block_data::ArenaDtor(void* object) {
  active_block_data* _this = reinterpret_cast< active_block_data* >(object);
  (void)_this;
}
void active_block_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void active_block_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const active_block_data& active_block_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_active_block_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void active_block_data::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.active_block_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_merkle_root_.ClearToEmpty();
  passive_data_merkle_root_.ClearToEmpty();
  signer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* active_block_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes transaction_merkle_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transaction_merkle_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes passive_data_merkle_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_passive_data_merkle_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* active_block_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.active_block_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction_merkle_root = 1;
  if (this->transaction_merkle_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transaction_merkle_root(), target);
  }

  // bytes passive_data_merkle_root = 2;
  if (this->passive_data_merkle_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_passive_data_merkle_root(), target);
  }

  // bytes signer = 3;
  if (this->signer().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.active_block_data)
  return target;
}

size_t active_block_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.active_block_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction_merkle_root = 1;
  if (this->transaction_merkle_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_merkle_root());
  }

  // bytes passive_data_merkle_root = 2;
  if (this->passive_data_merkle_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_passive_data_merkle_root());
  }

  // bytes signer = 3;
  if (this->signer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void active_block_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.active_block_data)
  GOOGLE_DCHECK_NE(&from, this);
  const active_block_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<active_block_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.active_block_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.active_block_data)
    MergeFrom(*source);
  }
}

void active_block_data::MergeFrom(const active_block_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.active_block_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction_merkle_root().size() > 0) {
    _internal_set_transaction_merkle_root(from._internal_transaction_merkle_root());
  }
  if (from.passive_data_merkle_root().size() > 0) {
    _internal_set_passive_data_merkle_root(from._internal_passive_data_merkle_root());
  }
  if (from.signer().size() > 0) {
    _internal_set_signer(from._internal_signer());
  }
}

void active_block_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.active_block_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void active_block_data::CopyFrom(const active_block_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.active_block_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool active_block_data::IsInitialized() const {
  return true;
}

void active_block_data::InternalSwap(active_block_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transaction_merkle_root_.Swap(&other->transaction_merkle_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  passive_data_merkle_root_.Swap(&other->passive_data_merkle_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signer_.Swap(&other->signer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata active_block_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class passive_block_data::_Internal {
 public:
};

passive_block_data::passive_block_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.passive_block_data)
}
passive_block_data::passive_block_data(const passive_block_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.passive_block_data)
}

void passive_block_data::SharedCtor() {
}

passive_block_data::~passive_block_data() {
  // @@protoc_insertion_point(destructor:koinos.protocol.passive_block_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void passive_block_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void passive_block_data::ArenaDtor(void* object) {
  passive_block_data* _this = reinterpret_cast< passive_block_data* >(object);
  (void)_this;
}
void passive_block_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void passive_block_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const passive_block_data& passive_block_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_passive_block_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void passive_block_data::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.passive_block_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* passive_block_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* passive_block_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.passive_block_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.passive_block_data)
  return target;
}

size_t passive_block_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.passive_block_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void passive_block_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.passive_block_data)
  GOOGLE_DCHECK_NE(&from, this);
  const passive_block_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<passive_block_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.passive_block_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.passive_block_data)
    MergeFrom(*source);
  }
}

void passive_block_data::MergeFrom(const passive_block_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.passive_block_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void passive_block_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.passive_block_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void passive_block_data::CopyFrom(const passive_block_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.passive_block_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool passive_block_data::IsInitialized() const {
  return true;
}

void passive_block_data::InternalSwap(passive_block_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata passive_block_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class block_header::_Internal {
 public:
};

block_header::block_header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.block_header)
}
block_header::block_header(const block_header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  previous_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous().empty()) {
    previous_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous(), 
      GetArena());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&height_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.block_header)
}

void block_header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_block_header_koinos_2fprotocol_2fprotocol_2eproto.base);
  previous_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&height_)) + sizeof(timestamp_));
}

block_header::~block_header() {
  // @@protoc_insertion_point(destructor:koinos.protocol.block_header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void block_header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  previous_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void block_header::ArenaDtor(void* object) {
  block_header* _this = reinterpret_cast< block_header* >(object);
  (void)_this;
}
void block_header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const block_header& block_header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_block_header_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void block_header::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.block_header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previous_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&height_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes previous = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_previous();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.block_header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes previous = 1;
  if (this->previous().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_previous(), target);
  }

  // uint64 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.block_header)
  return target;
}

size_t block_header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.block_header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes previous = 1;
  if (this->previous().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previous());
  }

  // uint64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void block_header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.block_header)
  GOOGLE_DCHECK_NE(&from, this);
  const block_header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<block_header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.block_header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.block_header)
    MergeFrom(*source);
  }
}

void block_header::MergeFrom(const block_header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.block_header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.previous().size() > 0) {
    _internal_set_previous(from._internal_previous());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void block_header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.block_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void block_header::CopyFrom(const block_header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.block_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_header::IsInitialized() const {
  return true;
}

void block_header::InternalSwap(block_header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  previous_.Swap(&other->previous_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(block_header, timestamp_)
      + sizeof(block_header::timestamp_)
      - PROTOBUF_FIELD_OFFSET(block_header, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata block_header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class block_active_data::_Internal {
 public:
  static const ::koinos::protocol::active_block_data& native(const block_active_data* msg);
};

const ::koinos::protocol::active_block_data&
block_active_data::_Internal::native(const block_active_data* msg) {
  return *msg->data_.native_;
}
void block_active_data::set_allocated_native(::koinos::protocol::active_block_data* native) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (native) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(native);
    if (message_arena != submessage_arena) {
      native = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, native, submessage_arena);
    }
    set_has_native();
    data_.native_ = native;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block_active_data.native)
}
block_active_data::block_active_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.block_active_data)
}
block_active_data::block_active_data(const block_active_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kNative: {
      _internal_mutable_native()->::koinos::protocol::active_block_data::MergeFrom(from._internal_native());
      break;
    }
    case kBlob: {
      _internal_set_blob(from._internal_blob());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.block_active_data)
}

void block_active_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_block_active_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  clear_has_data();
}

block_active_data::~block_active_data() {
  // @@protoc_insertion_point(destructor:koinos.protocol.block_active_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void block_active_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void block_active_data::ArenaDtor(void* object) {
  block_active_data* _this = reinterpret_cast< block_active_data* >(object);
  (void)_this;
}
void block_active_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_active_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const block_active_data& block_active_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_block_active_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void block_active_data::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:koinos.protocol.block_active_data)
  switch (data_case()) {
    case kNative: {
      if (GetArena() == nullptr) {
        delete data_.native_;
      }
      break;
    }
    case kBlob: {
      data_.blob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void block_active_data::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.block_active_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_active_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.active_block_data native = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_native(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes blob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_active_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.block_active_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.active_block_data native = 1;
  if (_internal_has_native()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::native(this), target, stream);
  }

  // bytes blob = 2;
  if (_internal_has_blob()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.block_active_data)
  return target;
}

size_t block_active_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.block_active_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .koinos.protocol.active_block_data native = 1;
    case kNative: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.native_);
      break;
    }
    // bytes blob = 2;
    case kBlob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_blob());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void block_active_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.block_active_data)
  GOOGLE_DCHECK_NE(&from, this);
  const block_active_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<block_active_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.block_active_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.block_active_data)
    MergeFrom(*source);
  }
}

void block_active_data::MergeFrom(const block_active_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.block_active_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kNative: {
      _internal_mutable_native()->::koinos::protocol::active_block_data::MergeFrom(from._internal_native());
      break;
    }
    case kBlob: {
      _internal_set_blob(from._internal_blob());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void block_active_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.block_active_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void block_active_data::CopyFrom(const block_active_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.block_active_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_active_data::IsInitialized() const {
  return true;
}

void block_active_data::InternalSwap(block_active_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata block_active_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class block_passive_data::_Internal {
 public:
  static const ::koinos::protocol::passive_block_data& native(const block_passive_data* msg);
};

const ::koinos::protocol::passive_block_data&
block_passive_data::_Internal::native(const block_passive_data* msg) {
  return *msg->data_.native_;
}
void block_passive_data::set_allocated_native(::koinos::protocol::passive_block_data* native) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (native) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(native);
    if (message_arena != submessage_arena) {
      native = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, native, submessage_arena);
    }
    set_has_native();
    data_.native_ = native;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block_passive_data.native)
}
block_passive_data::block_passive_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.block_passive_data)
}
block_passive_data::block_passive_data(const block_passive_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kNative: {
      _internal_mutable_native()->::koinos::protocol::passive_block_data::MergeFrom(from._internal_native());
      break;
    }
    case kBlob: {
      _internal_set_blob(from._internal_blob());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.block_passive_data)
}

void block_passive_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_block_passive_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  clear_has_data();
}

block_passive_data::~block_passive_data() {
  // @@protoc_insertion_point(destructor:koinos.protocol.block_passive_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void block_passive_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void block_passive_data::ArenaDtor(void* object) {
  block_passive_data* _this = reinterpret_cast< block_passive_data* >(object);
  (void)_this;
}
void block_passive_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_passive_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const block_passive_data& block_passive_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_block_passive_data_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void block_passive_data::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:koinos.protocol.block_passive_data)
  switch (data_case()) {
    case kNative: {
      if (GetArena() == nullptr) {
        delete data_.native_;
      }
      break;
    }
    case kBlob: {
      data_.blob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void block_passive_data::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.block_passive_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_passive_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.passive_block_data native = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_native(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes blob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_passive_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.block_passive_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.passive_block_data native = 1;
  if (_internal_has_native()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::native(this), target, stream);
  }

  // bytes blob = 2;
  if (_internal_has_blob()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.block_passive_data)
  return target;
}

size_t block_passive_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.block_passive_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .koinos.protocol.passive_block_data native = 1;
    case kNative: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.native_);
      break;
    }
    // bytes blob = 2;
    case kBlob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_blob());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void block_passive_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.block_passive_data)
  GOOGLE_DCHECK_NE(&from, this);
  const block_passive_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<block_passive_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.block_passive_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.block_passive_data)
    MergeFrom(*source);
  }
}

void block_passive_data::MergeFrom(const block_passive_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.block_passive_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kNative: {
      _internal_mutable_native()->::koinos::protocol::passive_block_data::MergeFrom(from._internal_native());
      break;
    }
    case kBlob: {
      _internal_set_blob(from._internal_blob());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void block_passive_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.block_passive_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void block_passive_data::CopyFrom(const block_passive_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.block_passive_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_passive_data::IsInitialized() const {
  return true;
}

void block_passive_data::InternalSwap(block_passive_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata block_passive_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class block::_Internal {
 public:
  static const ::koinos::protocol::block_header& header(const block* msg);
  static const ::koinos::protocol::block_active_data& active(const block* msg);
  static const ::koinos::protocol::block_passive_data& passive(const block* msg);
};

const ::koinos::protocol::block_header&
block::_Internal::header(const block* msg) {
  return *msg->header_;
}
const ::koinos::protocol::block_active_data&
block::_Internal::active(const block* msg) {
  return *msg->active_;
}
const ::koinos::protocol::block_passive_data&
block::_Internal::passive(const block* msg) {
  return *msg->passive_;
}
block::block(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.block)
}
block::block(const block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  signature_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature_data().empty()) {
    signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature_data(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::koinos::protocol::block_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_active()) {
    active_ = new ::koinos::protocol::block_active_data(*from.active_);
  } else {
    active_ = nullptr;
  }
  if (from._internal_has_passive()) {
    passive_ = new ::koinos::protocol::block_passive_data(*from.passive_);
  } else {
    passive_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.block)
}

void block::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_block_koinos_2fprotocol_2fprotocol_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&passive_) -
      reinterpret_cast<char*>(&header_)) + sizeof(passive_));
}

block::~block() {
  // @@protoc_insertion_point(destructor:koinos.protocol.block)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void block::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete active_;
  if (this != internal_default_instance()) delete passive_;
}

void block::ArenaDtor(void* object) {
  block* _this = reinterpret_cast< block* >(object);
  (void)_this;
}
void block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const block& block::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_block_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void block::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  id_.ClearToEmpty();
  signature_data_.ClearToEmpty();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && active_ != nullptr) {
    delete active_;
  }
  active_ = nullptr;
  if (GetArena() == nullptr && passive_ != nullptr) {
    delete passive_;
  }
  passive_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.block_header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.block_active_data active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_active(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.block_passive_data passive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_passive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_signature_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .koinos.protocol.transaction transactions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .koinos.protocol.block_header header = 2;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  // .koinos.protocol.block_active_data active = 3;
  if (this->has_active()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::active(this), target, stream);
  }

  // .koinos.protocol.block_passive_data passive = 4;
  if (this->has_passive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::passive(this), target, stream);
  }

  // bytes signature_data = 5;
  if (this->signature_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_signature_data(), target);
  }

  // repeated .koinos.protocol.transaction transactions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.block)
  return target;
}

size_t block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.protocol.transaction transactions = 6;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes signature_data = 5;
  if (this->signature_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature_data());
  }

  // .koinos.protocol.block_header header = 2;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .koinos.protocol.block_active_data active = 3;
  if (this->has_active()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *active_);
  }

  // .koinos.protocol.block_passive_data passive = 4;
  if (this->has_passive()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *passive_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.block)
  GOOGLE_DCHECK_NE(&from, this);
  const block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.block)
    MergeFrom(*source);
  }
}

void block::MergeFrom(const block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.signature_data().size() > 0) {
    _internal_set_signature_data(from._internal_signature_data());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::koinos::protocol::block_header::MergeFrom(from._internal_header());
  }
  if (from.has_active()) {
    _internal_mutable_active()->::koinos::protocol::block_active_data::MergeFrom(from._internal_active());
  }
  if (from.has_passive()) {
    _internal_mutable_passive()->::koinos::protocol::block_passive_data::MergeFrom(from._internal_passive());
  }
}

void block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void block::CopyFrom(const block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block::IsInitialized() const {
  return true;
}

void block::InternalSwap(block* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_data_.Swap(&other->signature_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(block, passive_)
      + sizeof(block::passive_)
      - PROTOBUF_FIELD_OFFSET(block, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata block::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class block_receipt::_Internal {
 public:
};

block_receipt::block_receipt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.block_receipt)
}
block_receipt::block_receipt(const block_receipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.block_receipt)
}

void block_receipt::SharedCtor() {
}

block_receipt::~block_receipt() {
  // @@protoc_insertion_point(destructor:koinos.protocol.block_receipt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void block_receipt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void block_receipt::ArenaDtor(void* object) {
  block_receipt* _this = reinterpret_cast< block_receipt* >(object);
  (void)_this;
}
void block_receipt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_receipt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const block_receipt& block_receipt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_block_receipt_koinos_2fprotocol_2fprotocol_2eproto.base);
  return *internal_default_instance();
}


void block_receipt::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.block_receipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_receipt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_receipt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.block_receipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.block_receipt)
  return target;
}

size_t block_receipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.block_receipt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void block_receipt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.protocol.block_receipt)
  GOOGLE_DCHECK_NE(&from, this);
  const block_receipt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<block_receipt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.protocol.block_receipt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.protocol.block_receipt)
    MergeFrom(*source);
  }
}

void block_receipt::MergeFrom(const block_receipt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.block_receipt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void block_receipt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.protocol.block_receipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void block_receipt::CopyFrom(const block_receipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.block_receipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_receipt::IsInitialized() const {
  return true;
}

void block_receipt::InternalSwap(block_receipt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata block_receipt::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::protocol::contract_call_bundle* Arena::CreateMaybeMessage< ::koinos::protocol::contract_call_bundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::contract_call_bundle >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::system_call_target* Arena::CreateMaybeMessage< ::koinos::protocol::system_call_target >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::system_call_target >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::upload_contract_operation* Arena::CreateMaybeMessage< ::koinos::protocol::upload_contract_operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::upload_contract_operation >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::call_contract_operation* Arena::CreateMaybeMessage< ::koinos::protocol::call_contract_operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::call_contract_operation >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::set_system_call_operation* Arena::CreateMaybeMessage< ::koinos::protocol::set_system_call_operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::set_system_call_operation >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::operation* Arena::CreateMaybeMessage< ::koinos::protocol::operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::operation >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::active_transaction_data* Arena::CreateMaybeMessage< ::koinos::protocol::active_transaction_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::active_transaction_data >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::passive_transaction_data* Arena::CreateMaybeMessage< ::koinos::protocol::passive_transaction_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::passive_transaction_data >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::transaction_active_data* Arena::CreateMaybeMessage< ::koinos::protocol::transaction_active_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::transaction_active_data >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::transaction_passive_data* Arena::CreateMaybeMessage< ::koinos::protocol::transaction_passive_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::transaction_passive_data >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::transaction* Arena::CreateMaybeMessage< ::koinos::protocol::transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::active_block_data* Arena::CreateMaybeMessage< ::koinos::protocol::active_block_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::active_block_data >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::passive_block_data* Arena::CreateMaybeMessage< ::koinos::protocol::passive_block_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::passive_block_data >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::block_header* Arena::CreateMaybeMessage< ::koinos::protocol::block_header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::block_header >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::block_active_data* Arena::CreateMaybeMessage< ::koinos::protocol::block_active_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::block_active_data >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::block_passive_data* Arena::CreateMaybeMessage< ::koinos::protocol::block_passive_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::block_passive_data >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::block* Arena::CreateMaybeMessage< ::koinos::protocol::block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::block >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::block_receipt* Arena::CreateMaybeMessage< ::koinos::protocol::block_receipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::block_receipt >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
