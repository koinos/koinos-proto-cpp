// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/p2p/p2p_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/rpc/rpc.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto;
namespace koinos {
namespace rpc {
namespace p2p {
class get_gossip_status_request;
struct get_gossip_status_requestDefaultTypeInternal;
extern get_gossip_status_requestDefaultTypeInternal _get_gossip_status_request_default_instance_;
class get_gossip_status_response;
struct get_gossip_status_responseDefaultTypeInternal;
extern get_gossip_status_responseDefaultTypeInternal _get_gossip_status_response_default_instance_;
class p2p_request;
struct p2p_requestDefaultTypeInternal;
extern p2p_requestDefaultTypeInternal _p2p_request_default_instance_;
class p2p_response;
struct p2p_responseDefaultTypeInternal;
extern p2p_responseDefaultTypeInternal _p2p_response_default_instance_;
}  // namespace p2p
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::rpc::p2p::get_gossip_status_request* Arena::CreateMaybeMessage<::koinos::rpc::p2p::get_gossip_status_request>(Arena*);
template<> ::koinos::rpc::p2p::get_gossip_status_response* Arena::CreateMaybeMessage<::koinos::rpc::p2p::get_gossip_status_response>(Arena*);
template<> ::koinos::rpc::p2p::p2p_request* Arena::CreateMaybeMessage<::koinos::rpc::p2p::p2p_request>(Arena*);
template<> ::koinos::rpc::p2p::p2p_response* Arena::CreateMaybeMessage<::koinos::rpc::p2p::p2p_response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace rpc {
namespace p2p {

// ===================================================================

class get_gossip_status_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.p2p.get_gossip_status_request) */ {
 public:
  inline get_gossip_status_request() : get_gossip_status_request(nullptr) {}
  ~get_gossip_status_request() override;
  explicit constexpr get_gossip_status_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_gossip_status_request(const get_gossip_status_request& from);
  get_gossip_status_request(get_gossip_status_request&& from) noexcept
    : get_gossip_status_request() {
    *this = ::std::move(from);
  }

  inline get_gossip_status_request& operator=(const get_gossip_status_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_gossip_status_request& operator=(get_gossip_status_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_gossip_status_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_gossip_status_request* internal_default_instance() {
    return reinterpret_cast<const get_gossip_status_request*>(
               &_get_gossip_status_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(get_gossip_status_request& a, get_gossip_status_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_gossip_status_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_gossip_status_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_gossip_status_request* New() const final {
    return new get_gossip_status_request();
  }

  get_gossip_status_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_gossip_status_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_gossip_status_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_gossip_status_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_gossip_status_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.p2p.get_gossip_status_request";
  }
  protected:
  explicit get_gossip_status_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.rpc.p2p.get_gossip_status_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_gossip_status_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.p2p.get_gossip_status_response) */ {
 public:
  inline get_gossip_status_response() : get_gossip_status_response(nullptr) {}
  ~get_gossip_status_response() override;
  explicit constexpr get_gossip_status_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_gossip_status_response(const get_gossip_status_response& from);
  get_gossip_status_response(get_gossip_status_response&& from) noexcept
    : get_gossip_status_response() {
    *this = ::std::move(from);
  }

  inline get_gossip_status_response& operator=(const get_gossip_status_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_gossip_status_response& operator=(get_gossip_status_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_gossip_status_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_gossip_status_response* internal_default_instance() {
    return reinterpret_cast<const get_gossip_status_response*>(
               &_get_gossip_status_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(get_gossip_status_response& a, get_gossip_status_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_gossip_status_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_gossip_status_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_gossip_status_response* New() const final {
    return new get_gossip_status_response();
  }

  get_gossip_status_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_gossip_status_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_gossip_status_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_gossip_status_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_gossip_status_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.p2p.get_gossip_status_response";
  }
  protected:
  explicit get_gossip_status_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.p2p.get_gossip_status_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto;
};
// -------------------------------------------------------------------

class p2p_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.p2p.p2p_request) */ {
 public:
  inline p2p_request() : p2p_request(nullptr) {}
  ~p2p_request() override;
  explicit constexpr p2p_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  p2p_request(const p2p_request& from);
  p2p_request(p2p_request&& from) noexcept
    : p2p_request() {
    *this = ::std::move(from);
  }

  inline p2p_request& operator=(const p2p_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline p2p_request& operator=(p2p_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const p2p_request& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kReserved = 1,
    kGetGossipStatus = 2,
    REQUEST_NOT_SET = 0,
  };

  static inline const p2p_request* internal_default_instance() {
    return reinterpret_cast<const p2p_request*>(
               &_p2p_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(p2p_request& a, p2p_request& b) {
    a.Swap(&b);
  }
  inline void Swap(p2p_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(p2p_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline p2p_request* New() const final {
    return new p2p_request();
  }

  p2p_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<p2p_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const p2p_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const p2p_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(p2p_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.p2p.p2p_request";
  }
  protected:
  explicit p2p_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kGetGossipStatusFieldNumber = 2,
  };
  // .koinos.rpc.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::rpc::reserved_rpc& reserved() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::reserved_rpc* release_reserved();
  ::koinos::rpc::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved);
  private:
  const ::koinos::rpc::reserved_rpc& _internal_reserved() const;
  ::koinos::rpc::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::rpc::reserved_rpc* reserved);
  ::koinos::rpc::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.rpc.p2p.get_gossip_status_request get_gossip_status = 2;
  bool has_get_gossip_status() const;
  private:
  bool _internal_has_get_gossip_status() const;
  public:
  void clear_get_gossip_status();
  const ::koinos::rpc::p2p::get_gossip_status_request& get_gossip_status() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::p2p::get_gossip_status_request* release_get_gossip_status();
  ::koinos::rpc::p2p::get_gossip_status_request* mutable_get_gossip_status();
  void set_allocated_get_gossip_status(::koinos::rpc::p2p::get_gossip_status_request* get_gossip_status);
  private:
  const ::koinos::rpc::p2p::get_gossip_status_request& _internal_get_gossip_status() const;
  ::koinos::rpc::p2p::get_gossip_status_request* _internal_mutable_get_gossip_status();
  public:
  void unsafe_arena_set_allocated_get_gossip_status(
      ::koinos::rpc::p2p::get_gossip_status_request* get_gossip_status);
  ::koinos::rpc::p2p::get_gossip_status_request* unsafe_arena_release_get_gossip_status();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.p2p.p2p_request)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_get_gossip_status();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestUnion {
    constexpr RequestUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::rpc::reserved_rpc* reserved_;
    ::koinos::rpc::p2p::get_gossip_status_request* get_gossip_status_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto;
};
// -------------------------------------------------------------------

class p2p_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.p2p.p2p_response) */ {
 public:
  inline p2p_response() : p2p_response(nullptr) {}
  ~p2p_response() override;
  explicit constexpr p2p_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  p2p_response(const p2p_response& from);
  p2p_response(p2p_response&& from) noexcept
    : p2p_response() {
    *this = ::std::move(from);
  }

  inline p2p_response& operator=(const p2p_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline p2p_response& operator=(p2p_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const p2p_response& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kReserved = 1,
    kError = 2,
    kGetGossipStatus = 3,
    RESPONSE_NOT_SET = 0,
  };

  static inline const p2p_response* internal_default_instance() {
    return reinterpret_cast<const p2p_response*>(
               &_p2p_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(p2p_response& a, p2p_response& b) {
    a.Swap(&b);
  }
  inline void Swap(p2p_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(p2p_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline p2p_response* New() const final {
    return new p2p_response();
  }

  p2p_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<p2p_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const p2p_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const p2p_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(p2p_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.p2p.p2p_response";
  }
  protected:
  explicit p2p_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kErrorFieldNumber = 2,
    kGetGossipStatusFieldNumber = 3,
  };
  // .koinos.rpc.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::rpc::reserved_rpc& reserved() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::reserved_rpc* release_reserved();
  ::koinos::rpc::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved);
  private:
  const ::koinos::rpc::reserved_rpc& _internal_reserved() const;
  ::koinos::rpc::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::rpc::reserved_rpc* reserved);
  ::koinos::rpc::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.rpc.error_response error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::koinos::rpc::error_response& error() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::error_response* release_error();
  ::koinos::rpc::error_response* mutable_error();
  void set_allocated_error(::koinos::rpc::error_response* error);
  private:
  const ::koinos::rpc::error_response& _internal_error() const;
  ::koinos::rpc::error_response* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::koinos::rpc::error_response* error);
  ::koinos::rpc::error_response* unsafe_arena_release_error();

  // .koinos.rpc.p2p.get_gossip_status_response get_gossip_status = 3;
  bool has_get_gossip_status() const;
  private:
  bool _internal_has_get_gossip_status() const;
  public:
  void clear_get_gossip_status();
  const ::koinos::rpc::p2p::get_gossip_status_response& get_gossip_status() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::p2p::get_gossip_status_response* release_get_gossip_status();
  ::koinos::rpc::p2p::get_gossip_status_response* mutable_get_gossip_status();
  void set_allocated_get_gossip_status(::koinos::rpc::p2p::get_gossip_status_response* get_gossip_status);
  private:
  const ::koinos::rpc::p2p::get_gossip_status_response& _internal_get_gossip_status() const;
  ::koinos::rpc::p2p::get_gossip_status_response* _internal_mutable_get_gossip_status();
  public:
  void unsafe_arena_set_allocated_get_gossip_status(
      ::koinos::rpc::p2p::get_gossip_status_response* get_gossip_status);
  ::koinos::rpc::p2p::get_gossip_status_response* unsafe_arena_release_get_gossip_status();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.p2p.p2p_response)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_error();
  void set_has_get_gossip_status();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResponseUnion {
    constexpr ResponseUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::rpc::reserved_rpc* reserved_;
    ::koinos::rpc::error_response* error_;
    ::koinos::rpc::p2p::get_gossip_status_response* get_gossip_status_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// get_gossip_status_request

// -------------------------------------------------------------------

// get_gossip_status_response

// bool enabled = 1;
inline void get_gossip_status_response::clear_enabled() {
  enabled_ = false;
}
inline bool get_gossip_status_response::_internal_enabled() const {
  return enabled_;
}
inline bool get_gossip_status_response::enabled() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.p2p.get_gossip_status_response.enabled)
  return _internal_enabled();
}
inline void get_gossip_status_response::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void get_gossip_status_response::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.p2p.get_gossip_status_response.enabled)
}

// -------------------------------------------------------------------

// p2p_request

// .koinos.rpc.reserved_rpc reserved = 1;
inline bool p2p_request::_internal_has_reserved() const {
  return request_case() == kReserved;
}
inline bool p2p_request::has_reserved() const {
  return _internal_has_reserved();
}
inline void p2p_request::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::rpc::reserved_rpc* p2p_request::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.rpc.p2p.p2p_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
      ::koinos::rpc::reserved_rpc* temp = request_.reserved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::reserved_rpc& p2p_request::_internal_reserved() const {
  return _internal_has_reserved()
      ? *request_.reserved_
      : reinterpret_cast< ::koinos::rpc::reserved_rpc&>(::koinos::rpc::_reserved_rpc_default_instance_);
}
inline const ::koinos::rpc::reserved_rpc& p2p_request::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.p2p.p2p_request.reserved)
  return _internal_reserved();
}
inline ::koinos::rpc::reserved_rpc* p2p_request::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.p2p.p2p_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
    ::koinos::rpc::reserved_rpc* temp = request_.reserved_;
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void p2p_request::unsafe_arena_set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  clear_request();
  if (reserved) {
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.p2p.p2p_request.reserved)
}
inline ::koinos::rpc::reserved_rpc* p2p_request::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_request();
    set_has_reserved();
    request_.reserved_ = CreateMaybeMessage< ::koinos::rpc::reserved_rpc >(GetArenaForAllocation());
  }
  return request_.reserved_;
}
inline ::koinos::rpc::reserved_rpc* p2p_request::mutable_reserved() {
  ::koinos::rpc::reserved_rpc* _msg = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.p2p.p2p_request.reserved)
  return _msg;
}

// .koinos.rpc.p2p.get_gossip_status_request get_gossip_status = 2;
inline bool p2p_request::_internal_has_get_gossip_status() const {
  return request_case() == kGetGossipStatus;
}
inline bool p2p_request::has_get_gossip_status() const {
  return _internal_has_get_gossip_status();
}
inline void p2p_request::set_has_get_gossip_status() {
  _oneof_case_[0] = kGetGossipStatus;
}
inline void p2p_request::clear_get_gossip_status() {
  if (_internal_has_get_gossip_status()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_gossip_status_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::p2p::get_gossip_status_request* p2p_request::release_get_gossip_status() {
  // @@protoc_insertion_point(field_release:koinos.rpc.p2p.p2p_request.get_gossip_status)
  if (_internal_has_get_gossip_status()) {
    clear_has_request();
      ::koinos::rpc::p2p::get_gossip_status_request* temp = request_.get_gossip_status_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_gossip_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::p2p::get_gossip_status_request& p2p_request::_internal_get_gossip_status() const {
  return _internal_has_get_gossip_status()
      ? *request_.get_gossip_status_
      : reinterpret_cast< ::koinos::rpc::p2p::get_gossip_status_request&>(::koinos::rpc::p2p::_get_gossip_status_request_default_instance_);
}
inline const ::koinos::rpc::p2p::get_gossip_status_request& p2p_request::get_gossip_status() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.p2p.p2p_request.get_gossip_status)
  return _internal_get_gossip_status();
}
inline ::koinos::rpc::p2p::get_gossip_status_request* p2p_request::unsafe_arena_release_get_gossip_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.p2p.p2p_request.get_gossip_status)
  if (_internal_has_get_gossip_status()) {
    clear_has_request();
    ::koinos::rpc::p2p::get_gossip_status_request* temp = request_.get_gossip_status_;
    request_.get_gossip_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void p2p_request::unsafe_arena_set_allocated_get_gossip_status(::koinos::rpc::p2p::get_gossip_status_request* get_gossip_status) {
  clear_request();
  if (get_gossip_status) {
    set_has_get_gossip_status();
    request_.get_gossip_status_ = get_gossip_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.p2p.p2p_request.get_gossip_status)
}
inline ::koinos::rpc::p2p::get_gossip_status_request* p2p_request::_internal_mutable_get_gossip_status() {
  if (!_internal_has_get_gossip_status()) {
    clear_request();
    set_has_get_gossip_status();
    request_.get_gossip_status_ = CreateMaybeMessage< ::koinos::rpc::p2p::get_gossip_status_request >(GetArenaForAllocation());
  }
  return request_.get_gossip_status_;
}
inline ::koinos::rpc::p2p::get_gossip_status_request* p2p_request::mutable_get_gossip_status() {
  ::koinos::rpc::p2p::get_gossip_status_request* _msg = _internal_mutable_get_gossip_status();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.p2p.p2p_request.get_gossip_status)
  return _msg;
}

inline bool p2p_request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void p2p_request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline p2p_request::RequestCase p2p_request::request_case() const {
  return p2p_request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// p2p_response

// .koinos.rpc.reserved_rpc reserved = 1;
inline bool p2p_response::_internal_has_reserved() const {
  return response_case() == kReserved;
}
inline bool p2p_response::has_reserved() const {
  return _internal_has_reserved();
}
inline void p2p_response::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::rpc::reserved_rpc* p2p_response::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.rpc.p2p.p2p_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
      ::koinos::rpc::reserved_rpc* temp = response_.reserved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::reserved_rpc& p2p_response::_internal_reserved() const {
  return _internal_has_reserved()
      ? *response_.reserved_
      : reinterpret_cast< ::koinos::rpc::reserved_rpc&>(::koinos::rpc::_reserved_rpc_default_instance_);
}
inline const ::koinos::rpc::reserved_rpc& p2p_response::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.p2p.p2p_response.reserved)
  return _internal_reserved();
}
inline ::koinos::rpc::reserved_rpc* p2p_response::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.p2p.p2p_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
    ::koinos::rpc::reserved_rpc* temp = response_.reserved_;
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void p2p_response::unsafe_arena_set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  clear_response();
  if (reserved) {
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.p2p.p2p_response.reserved)
}
inline ::koinos::rpc::reserved_rpc* p2p_response::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_response();
    set_has_reserved();
    response_.reserved_ = CreateMaybeMessage< ::koinos::rpc::reserved_rpc >(GetArenaForAllocation());
  }
  return response_.reserved_;
}
inline ::koinos::rpc::reserved_rpc* p2p_response::mutable_reserved() {
  ::koinos::rpc::reserved_rpc* _msg = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.p2p.p2p_response.reserved)
  return _msg;
}

// .koinos.rpc.error_response error = 2;
inline bool p2p_response::_internal_has_error() const {
  return response_case() == kError;
}
inline bool p2p_response::has_error() const {
  return _internal_has_error();
}
inline void p2p_response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::koinos::rpc::error_response* p2p_response::release_error() {
  // @@protoc_insertion_point(field_release:koinos.rpc.p2p.p2p_response.error)
  if (_internal_has_error()) {
    clear_has_response();
      ::koinos::rpc::error_response* temp = response_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::error_response& p2p_response::_internal_error() const {
  return _internal_has_error()
      ? *response_.error_
      : reinterpret_cast< ::koinos::rpc::error_response&>(::koinos::rpc::_error_response_default_instance_);
}
inline const ::koinos::rpc::error_response& p2p_response::error() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.p2p.p2p_response.error)
  return _internal_error();
}
inline ::koinos::rpc::error_response* p2p_response::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.p2p.p2p_response.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::koinos::rpc::error_response* temp = response_.error_;
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void p2p_response::unsafe_arena_set_allocated_error(::koinos::rpc::error_response* error) {
  clear_response();
  if (error) {
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.p2p.p2p_response.error)
}
inline ::koinos::rpc::error_response* p2p_response::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_response();
    set_has_error();
    response_.error_ = CreateMaybeMessage< ::koinos::rpc::error_response >(GetArenaForAllocation());
  }
  return response_.error_;
}
inline ::koinos::rpc::error_response* p2p_response::mutable_error() {
  ::koinos::rpc::error_response* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.p2p.p2p_response.error)
  return _msg;
}

// .koinos.rpc.p2p.get_gossip_status_response get_gossip_status = 3;
inline bool p2p_response::_internal_has_get_gossip_status() const {
  return response_case() == kGetGossipStatus;
}
inline bool p2p_response::has_get_gossip_status() const {
  return _internal_has_get_gossip_status();
}
inline void p2p_response::set_has_get_gossip_status() {
  _oneof_case_[0] = kGetGossipStatus;
}
inline void p2p_response::clear_get_gossip_status() {
  if (_internal_has_get_gossip_status()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.get_gossip_status_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::p2p::get_gossip_status_response* p2p_response::release_get_gossip_status() {
  // @@protoc_insertion_point(field_release:koinos.rpc.p2p.p2p_response.get_gossip_status)
  if (_internal_has_get_gossip_status()) {
    clear_has_response();
      ::koinos::rpc::p2p::get_gossip_status_response* temp = response_.get_gossip_status_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_gossip_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::p2p::get_gossip_status_response& p2p_response::_internal_get_gossip_status() const {
  return _internal_has_get_gossip_status()
      ? *response_.get_gossip_status_
      : reinterpret_cast< ::koinos::rpc::p2p::get_gossip_status_response&>(::koinos::rpc::p2p::_get_gossip_status_response_default_instance_);
}
inline const ::koinos::rpc::p2p::get_gossip_status_response& p2p_response::get_gossip_status() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.p2p.p2p_response.get_gossip_status)
  return _internal_get_gossip_status();
}
inline ::koinos::rpc::p2p::get_gossip_status_response* p2p_response::unsafe_arena_release_get_gossip_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.p2p.p2p_response.get_gossip_status)
  if (_internal_has_get_gossip_status()) {
    clear_has_response();
    ::koinos::rpc::p2p::get_gossip_status_response* temp = response_.get_gossip_status_;
    response_.get_gossip_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void p2p_response::unsafe_arena_set_allocated_get_gossip_status(::koinos::rpc::p2p::get_gossip_status_response* get_gossip_status) {
  clear_response();
  if (get_gossip_status) {
    set_has_get_gossip_status();
    response_.get_gossip_status_ = get_gossip_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.p2p.p2p_response.get_gossip_status)
}
inline ::koinos::rpc::p2p::get_gossip_status_response* p2p_response::_internal_mutable_get_gossip_status() {
  if (!_internal_has_get_gossip_status()) {
    clear_response();
    set_has_get_gossip_status();
    response_.get_gossip_status_ = CreateMaybeMessage< ::koinos::rpc::p2p::get_gossip_status_response >(GetArenaForAllocation());
  }
  return response_.get_gossip_status_;
}
inline ::koinos::rpc::p2p::get_gossip_status_response* p2p_response::mutable_get_gossip_status() {
  ::koinos::rpc::p2p::get_gossip_status_response* _msg = _internal_mutable_get_gossip_status();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.p2p.p2p_response.get_gossip_status)
  return _msg;
}

inline bool p2p_response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void p2p_response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline p2p_response::ResponseCase p2p_response::response_case() const {
  return p2p_response::ResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace p2p
}  // namespace rpc
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto
