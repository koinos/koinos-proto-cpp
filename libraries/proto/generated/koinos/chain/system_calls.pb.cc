// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/chain/system_calls.proto

#include "koinos/chain/system_calls.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace chain {
constexpr event_arguments::event_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : impacted_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct event_argumentsDefaultTypeInternal {
  constexpr event_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~event_argumentsDefaultTypeInternal() {}
  union {
    event_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT event_argumentsDefaultTypeInternal _event_arguments_default_instance_;
constexpr event_result::event_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct event_resultDefaultTypeInternal {
  constexpr event_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~event_resultDefaultTypeInternal() {}
  union {
    event_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT event_resultDefaultTypeInternal _event_result_default_instance_;
constexpr prints_arguments::prints_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct prints_argumentsDefaultTypeInternal {
  constexpr prints_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~prints_argumentsDefaultTypeInternal() {}
  union {
    prints_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT prints_argumentsDefaultTypeInternal _prints_arguments_default_instance_;
constexpr prints_result::prints_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct prints_resultDefaultTypeInternal {
  constexpr prints_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~prints_resultDefaultTypeInternal() {}
  union {
    prints_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT prints_resultDefaultTypeInternal _prints_result_default_instance_;
constexpr process_block_signature_arguments::process_block_signature_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct process_block_signature_argumentsDefaultTypeInternal {
  constexpr process_block_signature_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~process_block_signature_argumentsDefaultTypeInternal() {}
  union {
    process_block_signature_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT process_block_signature_argumentsDefaultTypeInternal _process_block_signature_arguments_default_instance_;
constexpr process_block_signature_result::process_block_signature_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct process_block_signature_resultDefaultTypeInternal {
  constexpr process_block_signature_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~process_block_signature_resultDefaultTypeInternal() {}
  union {
    process_block_signature_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT process_block_signature_resultDefaultTypeInternal _process_block_signature_result_default_instance_;
constexpr verify_merkle_root_arguments::verify_merkle_root_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hashes_()
  , root_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct verify_merkle_root_argumentsDefaultTypeInternal {
  constexpr verify_merkle_root_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~verify_merkle_root_argumentsDefaultTypeInternal() {}
  union {
    verify_merkle_root_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT verify_merkle_root_argumentsDefaultTypeInternal _verify_merkle_root_arguments_default_instance_;
constexpr verify_merkle_root_result::verify_merkle_root_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct verify_merkle_root_resultDefaultTypeInternal {
  constexpr verify_merkle_root_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~verify_merkle_root_resultDefaultTypeInternal() {}
  union {
    verify_merkle_root_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT verify_merkle_root_resultDefaultTypeInternal _verify_merkle_root_result_default_instance_;
constexpr apply_block_arguments::apply_block_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr){}
struct apply_block_argumentsDefaultTypeInternal {
  constexpr apply_block_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~apply_block_argumentsDefaultTypeInternal() {}
  union {
    apply_block_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT apply_block_argumentsDefaultTypeInternal _apply_block_arguments_default_instance_;
constexpr apply_block_result::apply_block_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct apply_block_resultDefaultTypeInternal {
  constexpr apply_block_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~apply_block_resultDefaultTypeInternal() {}
  union {
    apply_block_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT apply_block_resultDefaultTypeInternal _apply_block_result_default_instance_;
constexpr apply_transaction_arguments::apply_transaction_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(nullptr){}
struct apply_transaction_argumentsDefaultTypeInternal {
  constexpr apply_transaction_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~apply_transaction_argumentsDefaultTypeInternal() {}
  union {
    apply_transaction_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT apply_transaction_argumentsDefaultTypeInternal _apply_transaction_arguments_default_instance_;
constexpr apply_transaction_result::apply_transaction_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct apply_transaction_resultDefaultTypeInternal {
  constexpr apply_transaction_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~apply_transaction_resultDefaultTypeInternal() {}
  union {
    apply_transaction_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT apply_transaction_resultDefaultTypeInternal _apply_transaction_result_default_instance_;
constexpr apply_upload_contract_operation_arguments::apply_upload_contract_operation_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : op_(nullptr){}
struct apply_upload_contract_operation_argumentsDefaultTypeInternal {
  constexpr apply_upload_contract_operation_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~apply_upload_contract_operation_argumentsDefaultTypeInternal() {}
  union {
    apply_upload_contract_operation_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT apply_upload_contract_operation_argumentsDefaultTypeInternal _apply_upload_contract_operation_arguments_default_instance_;
constexpr apply_upload_contract_operation_result::apply_upload_contract_operation_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct apply_upload_contract_operation_resultDefaultTypeInternal {
  constexpr apply_upload_contract_operation_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~apply_upload_contract_operation_resultDefaultTypeInternal() {}
  union {
    apply_upload_contract_operation_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT apply_upload_contract_operation_resultDefaultTypeInternal _apply_upload_contract_operation_result_default_instance_;
constexpr apply_call_contract_operation_arguments::apply_call_contract_operation_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : op_(nullptr){}
struct apply_call_contract_operation_argumentsDefaultTypeInternal {
  constexpr apply_call_contract_operation_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~apply_call_contract_operation_argumentsDefaultTypeInternal() {}
  union {
    apply_call_contract_operation_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT apply_call_contract_operation_argumentsDefaultTypeInternal _apply_call_contract_operation_arguments_default_instance_;
constexpr apply_call_contract_operation_result::apply_call_contract_operation_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct apply_call_contract_operation_resultDefaultTypeInternal {
  constexpr apply_call_contract_operation_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~apply_call_contract_operation_resultDefaultTypeInternal() {}
  union {
    apply_call_contract_operation_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT apply_call_contract_operation_resultDefaultTypeInternal _apply_call_contract_operation_result_default_instance_;
constexpr apply_set_system_call_operation_arguments::apply_set_system_call_operation_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : op_(nullptr){}
struct apply_set_system_call_operation_argumentsDefaultTypeInternal {
  constexpr apply_set_system_call_operation_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~apply_set_system_call_operation_argumentsDefaultTypeInternal() {}
  union {
    apply_set_system_call_operation_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT apply_set_system_call_operation_argumentsDefaultTypeInternal _apply_set_system_call_operation_arguments_default_instance_;
constexpr apply_set_system_call_operation_result::apply_set_system_call_operation_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct apply_set_system_call_operation_resultDefaultTypeInternal {
  constexpr apply_set_system_call_operation_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~apply_set_system_call_operation_resultDefaultTypeInternal() {}
  union {
    apply_set_system_call_operation_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT apply_set_system_call_operation_resultDefaultTypeInternal _apply_set_system_call_operation_result_default_instance_;
constexpr apply_set_system_contract_operation_arguments::apply_set_system_contract_operation_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : op_(nullptr){}
struct apply_set_system_contract_operation_argumentsDefaultTypeInternal {
  constexpr apply_set_system_contract_operation_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~apply_set_system_contract_operation_argumentsDefaultTypeInternal() {}
  union {
    apply_set_system_contract_operation_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT apply_set_system_contract_operation_argumentsDefaultTypeInternal _apply_set_system_contract_operation_arguments_default_instance_;
constexpr apply_set_system_contract_operation_result::apply_set_system_contract_operation_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct apply_set_system_contract_operation_resultDefaultTypeInternal {
  constexpr apply_set_system_contract_operation_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~apply_set_system_contract_operation_resultDefaultTypeInternal() {}
  union {
    apply_set_system_contract_operation_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT apply_set_system_contract_operation_resultDefaultTypeInternal _apply_set_system_contract_operation_result_default_instance_;
constexpr put_object_arguments::put_object_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , obj_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , space_(nullptr){}
struct put_object_argumentsDefaultTypeInternal {
  constexpr put_object_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~put_object_argumentsDefaultTypeInternal() {}
  union {
    put_object_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT put_object_argumentsDefaultTypeInternal _put_object_arguments_default_instance_;
constexpr put_object_result::put_object_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct put_object_resultDefaultTypeInternal {
  constexpr put_object_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~put_object_resultDefaultTypeInternal() {}
  union {
    put_object_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT put_object_resultDefaultTypeInternal _put_object_result_default_instance_;
constexpr remove_object_arguments::remove_object_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , space_(nullptr){}
struct remove_object_argumentsDefaultTypeInternal {
  constexpr remove_object_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~remove_object_argumentsDefaultTypeInternal() {}
  union {
    remove_object_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT remove_object_argumentsDefaultTypeInternal _remove_object_arguments_default_instance_;
constexpr remove_object_result::remove_object_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct remove_object_resultDefaultTypeInternal {
  constexpr remove_object_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~remove_object_resultDefaultTypeInternal() {}
  union {
    remove_object_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT remove_object_resultDefaultTypeInternal _remove_object_result_default_instance_;
constexpr get_object_arguments::get_object_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , space_(nullptr){}
struct get_object_argumentsDefaultTypeInternal {
  constexpr get_object_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_object_argumentsDefaultTypeInternal() {}
  union {
    get_object_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_object_argumentsDefaultTypeInternal _get_object_arguments_default_instance_;
constexpr database_object::database_object(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exists_(false){}
struct database_objectDefaultTypeInternal {
  constexpr database_objectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~database_objectDefaultTypeInternal() {}
  union {
    database_object _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT database_objectDefaultTypeInternal _database_object_default_instance_;
constexpr get_object_result::get_object_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr){}
struct get_object_resultDefaultTypeInternal {
  constexpr get_object_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_object_resultDefaultTypeInternal() {}
  union {
    get_object_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_object_resultDefaultTypeInternal _get_object_result_default_instance_;
constexpr get_next_object_arguments::get_next_object_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , space_(nullptr){}
struct get_next_object_argumentsDefaultTypeInternal {
  constexpr get_next_object_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_next_object_argumentsDefaultTypeInternal() {}
  union {
    get_next_object_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_next_object_argumentsDefaultTypeInternal _get_next_object_arguments_default_instance_;
constexpr get_next_object_result::get_next_object_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr){}
struct get_next_object_resultDefaultTypeInternal {
  constexpr get_next_object_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_next_object_resultDefaultTypeInternal() {}
  union {
    get_next_object_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_next_object_resultDefaultTypeInternal _get_next_object_result_default_instance_;
constexpr get_prev_object_arguments::get_prev_object_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , space_(nullptr){}
struct get_prev_object_argumentsDefaultTypeInternal {
  constexpr get_prev_object_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_prev_object_argumentsDefaultTypeInternal() {}
  union {
    get_prev_object_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_prev_object_argumentsDefaultTypeInternal _get_prev_object_arguments_default_instance_;
constexpr get_prev_object_result::get_prev_object_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr){}
struct get_prev_object_resultDefaultTypeInternal {
  constexpr get_prev_object_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_prev_object_resultDefaultTypeInternal() {}
  union {
    get_prev_object_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_prev_object_resultDefaultTypeInternal _get_prev_object_result_default_instance_;
constexpr call_contract_arguments::call_contract_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , args_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entry_point_(0u){}
struct call_contract_argumentsDefaultTypeInternal {
  constexpr call_contract_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~call_contract_argumentsDefaultTypeInternal() {}
  union {
    call_contract_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT call_contract_argumentsDefaultTypeInternal _call_contract_arguments_default_instance_;
constexpr call_contract_result::call_contract_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct call_contract_resultDefaultTypeInternal {
  constexpr call_contract_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~call_contract_resultDefaultTypeInternal() {}
  union {
    call_contract_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT call_contract_resultDefaultTypeInternal _call_contract_result_default_instance_;
constexpr get_entry_point_arguments::get_entry_point_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_entry_point_argumentsDefaultTypeInternal {
  constexpr get_entry_point_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_entry_point_argumentsDefaultTypeInternal() {}
  union {
    get_entry_point_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_entry_point_argumentsDefaultTypeInternal _get_entry_point_arguments_default_instance_;
constexpr get_entry_point_result::get_entry_point_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u){}
struct get_entry_point_resultDefaultTypeInternal {
  constexpr get_entry_point_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_entry_point_resultDefaultTypeInternal() {}
  union {
    get_entry_point_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_entry_point_resultDefaultTypeInternal _get_entry_point_result_default_instance_;
constexpr get_contract_arguments_size_arguments::get_contract_arguments_size_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_contract_arguments_size_argumentsDefaultTypeInternal {
  constexpr get_contract_arguments_size_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_contract_arguments_size_argumentsDefaultTypeInternal() {}
  union {
    get_contract_arguments_size_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_contract_arguments_size_argumentsDefaultTypeInternal _get_contract_arguments_size_arguments_default_instance_;
constexpr get_contract_arguments_size_result::get_contract_arguments_size_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u){}
struct get_contract_arguments_size_resultDefaultTypeInternal {
  constexpr get_contract_arguments_size_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_contract_arguments_size_resultDefaultTypeInternal() {}
  union {
    get_contract_arguments_size_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_contract_arguments_size_resultDefaultTypeInternal _get_contract_arguments_size_result_default_instance_;
constexpr get_contract_arguments_arguments::get_contract_arguments_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_contract_arguments_argumentsDefaultTypeInternal {
  constexpr get_contract_arguments_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_contract_arguments_argumentsDefaultTypeInternal() {}
  union {
    get_contract_arguments_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_contract_arguments_argumentsDefaultTypeInternal _get_contract_arguments_arguments_default_instance_;
constexpr get_contract_arguments_result::get_contract_arguments_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_contract_arguments_resultDefaultTypeInternal {
  constexpr get_contract_arguments_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_contract_arguments_resultDefaultTypeInternal() {}
  union {
    get_contract_arguments_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_contract_arguments_resultDefaultTypeInternal _get_contract_arguments_result_default_instance_;
constexpr set_contract_result_arguments::set_contract_result_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct set_contract_result_argumentsDefaultTypeInternal {
  constexpr set_contract_result_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_contract_result_argumentsDefaultTypeInternal() {}
  union {
    set_contract_result_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_contract_result_argumentsDefaultTypeInternal _set_contract_result_arguments_default_instance_;
constexpr set_contract_result_result::set_contract_result_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct set_contract_result_resultDefaultTypeInternal {
  constexpr set_contract_result_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_contract_result_resultDefaultTypeInternal() {}
  union {
    set_contract_result_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_contract_result_resultDefaultTypeInternal _set_contract_result_result_default_instance_;
constexpr exit_contract_arguments::exit_contract_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exit_code_(0u){}
struct exit_contract_argumentsDefaultTypeInternal {
  constexpr exit_contract_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~exit_contract_argumentsDefaultTypeInternal() {}
  union {
    exit_contract_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT exit_contract_argumentsDefaultTypeInternal _exit_contract_arguments_default_instance_;
constexpr exit_contract_result::exit_contract_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct exit_contract_resultDefaultTypeInternal {
  constexpr exit_contract_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~exit_contract_resultDefaultTypeInternal() {}
  union {
    exit_contract_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT exit_contract_resultDefaultTypeInternal _exit_contract_result_default_instance_;
constexpr get_head_info_arguments::get_head_info_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_head_info_argumentsDefaultTypeInternal {
  constexpr get_head_info_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_head_info_argumentsDefaultTypeInternal() {}
  union {
    get_head_info_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_head_info_argumentsDefaultTypeInternal _get_head_info_arguments_default_instance_;
constexpr get_head_info_result::get_head_info_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr){}
struct get_head_info_resultDefaultTypeInternal {
  constexpr get_head_info_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_head_info_resultDefaultTypeInternal() {}
  union {
    get_head_info_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_head_info_resultDefaultTypeInternal _get_head_info_result_default_instance_;
constexpr hash_arguments::hash_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : obj_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(uint64_t{0u})
  , size_(uint64_t{0u}){}
struct hash_argumentsDefaultTypeInternal {
  constexpr hash_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~hash_argumentsDefaultTypeInternal() {}
  union {
    hash_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT hash_argumentsDefaultTypeInternal _hash_arguments_default_instance_;
constexpr hash_result::hash_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct hash_resultDefaultTypeInternal {
  constexpr hash_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~hash_resultDefaultTypeInternal() {}
  union {
    hash_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT hash_resultDefaultTypeInternal _hash_result_default_instance_;
constexpr recover_public_key_arguments::recover_public_key_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , digest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct recover_public_key_argumentsDefaultTypeInternal {
  constexpr recover_public_key_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~recover_public_key_argumentsDefaultTypeInternal() {}
  union {
    recover_public_key_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT recover_public_key_argumentsDefaultTypeInternal _recover_public_key_arguments_default_instance_;
constexpr recover_public_key_result::recover_public_key_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct recover_public_key_resultDefaultTypeInternal {
  constexpr recover_public_key_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~recover_public_key_resultDefaultTypeInternal() {}
  union {
    recover_public_key_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT recover_public_key_resultDefaultTypeInternal _recover_public_key_result_default_instance_;
constexpr get_transaction_payer_arguments::get_transaction_payer_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(nullptr){}
struct get_transaction_payer_argumentsDefaultTypeInternal {
  constexpr get_transaction_payer_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_transaction_payer_argumentsDefaultTypeInternal() {}
  union {
    get_transaction_payer_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_transaction_payer_argumentsDefaultTypeInternal _get_transaction_payer_arguments_default_instance_;
constexpr get_transaction_payer_result::get_transaction_payer_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_transaction_payer_resultDefaultTypeInternal {
  constexpr get_transaction_payer_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_transaction_payer_resultDefaultTypeInternal() {}
  union {
    get_transaction_payer_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_transaction_payer_resultDefaultTypeInternal _get_transaction_payer_result_default_instance_;
constexpr get_account_rc_arguments::get_account_rc_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_account_rc_argumentsDefaultTypeInternal {
  constexpr get_account_rc_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_account_rc_argumentsDefaultTypeInternal() {}
  union {
    get_account_rc_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_account_rc_argumentsDefaultTypeInternal _get_account_rc_arguments_default_instance_;
constexpr get_account_rc_result::get_account_rc_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct get_account_rc_resultDefaultTypeInternal {
  constexpr get_account_rc_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_account_rc_resultDefaultTypeInternal() {}
  union {
    get_account_rc_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_account_rc_resultDefaultTypeInternal _get_account_rc_result_default_instance_;
constexpr consume_account_rc_arguments::consume_account_rc_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct consume_account_rc_argumentsDefaultTypeInternal {
  constexpr consume_account_rc_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~consume_account_rc_argumentsDefaultTypeInternal() {}
  union {
    consume_account_rc_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT consume_account_rc_argumentsDefaultTypeInternal _consume_account_rc_arguments_default_instance_;
constexpr consume_account_rc_result::consume_account_rc_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct consume_account_rc_resultDefaultTypeInternal {
  constexpr consume_account_rc_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~consume_account_rc_resultDefaultTypeInternal() {}
  union {
    consume_account_rc_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT consume_account_rc_resultDefaultTypeInternal _consume_account_rc_result_default_instance_;
constexpr get_resource_limits_arguments::get_resource_limits_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_resource_limits_argumentsDefaultTypeInternal {
  constexpr get_resource_limits_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_resource_limits_argumentsDefaultTypeInternal() {}
  union {
    get_resource_limits_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_resource_limits_argumentsDefaultTypeInternal _get_resource_limits_arguments_default_instance_;
constexpr get_resource_limits_result::get_resource_limits_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr){}
struct get_resource_limits_resultDefaultTypeInternal {
  constexpr get_resource_limits_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_resource_limits_resultDefaultTypeInternal() {}
  union {
    get_resource_limits_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_resource_limits_resultDefaultTypeInternal _get_resource_limits_result_default_instance_;
constexpr consume_block_resources_arguments::consume_block_resources_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : disk_storage_consumed_(uint64_t{0u})
  , network_bandwidth_consumed_(uint64_t{0u})
  , compute_bandwidth_consumed_(uint64_t{0u}){}
struct consume_block_resources_argumentsDefaultTypeInternal {
  constexpr consume_block_resources_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~consume_block_resources_argumentsDefaultTypeInternal() {}
  union {
    consume_block_resources_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT consume_block_resources_argumentsDefaultTypeInternal _consume_block_resources_arguments_default_instance_;
constexpr consume_block_resources_result::consume_block_resources_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct consume_block_resources_resultDefaultTypeInternal {
  constexpr consume_block_resources_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~consume_block_resources_resultDefaultTypeInternal() {}
  union {
    consume_block_resources_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT consume_block_resources_resultDefaultTypeInternal _consume_block_resources_result_default_instance_;
constexpr get_transaction_rc_limit_arguments::get_transaction_rc_limit_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(nullptr){}
struct get_transaction_rc_limit_argumentsDefaultTypeInternal {
  constexpr get_transaction_rc_limit_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_transaction_rc_limit_argumentsDefaultTypeInternal() {}
  union {
    get_transaction_rc_limit_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_transaction_rc_limit_argumentsDefaultTypeInternal _get_transaction_rc_limit_arguments_default_instance_;
constexpr get_transaction_rc_limit_result::get_transaction_rc_limit_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct get_transaction_rc_limit_resultDefaultTypeInternal {
  constexpr get_transaction_rc_limit_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_transaction_rc_limit_resultDefaultTypeInternal() {}
  union {
    get_transaction_rc_limit_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_transaction_rc_limit_resultDefaultTypeInternal _get_transaction_rc_limit_result_default_instance_;
constexpr get_last_irreversible_block_arguments::get_last_irreversible_block_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_last_irreversible_block_argumentsDefaultTypeInternal {
  constexpr get_last_irreversible_block_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_last_irreversible_block_argumentsDefaultTypeInternal() {}
  union {
    get_last_irreversible_block_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_last_irreversible_block_argumentsDefaultTypeInternal _get_last_irreversible_block_arguments_default_instance_;
constexpr get_last_irreversible_block_result::get_last_irreversible_block_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct get_last_irreversible_block_resultDefaultTypeInternal {
  constexpr get_last_irreversible_block_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_last_irreversible_block_resultDefaultTypeInternal() {}
  union {
    get_last_irreversible_block_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_last_irreversible_block_resultDefaultTypeInternal _get_last_irreversible_block_result_default_instance_;
constexpr get_caller_arguments::get_caller_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_caller_argumentsDefaultTypeInternal {
  constexpr get_caller_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_caller_argumentsDefaultTypeInternal() {}
  union {
    get_caller_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_caller_argumentsDefaultTypeInternal _get_caller_arguments_default_instance_;
constexpr get_caller_result::get_caller_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr){}
struct get_caller_resultDefaultTypeInternal {
  constexpr get_caller_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_caller_resultDefaultTypeInternal() {}
  union {
    get_caller_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_caller_resultDefaultTypeInternal _get_caller_result_default_instance_;
constexpr require_authority_arguments::require_authority_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct require_authority_argumentsDefaultTypeInternal {
  constexpr require_authority_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~require_authority_argumentsDefaultTypeInternal() {}
  union {
    require_authority_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT require_authority_argumentsDefaultTypeInternal _require_authority_arguments_default_instance_;
constexpr require_authority_result::require_authority_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct require_authority_resultDefaultTypeInternal {
  constexpr require_authority_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~require_authority_resultDefaultTypeInternal() {}
  union {
    require_authority_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT require_authority_resultDefaultTypeInternal _require_authority_result_default_instance_;
constexpr get_transaction_signature_arguments::get_transaction_signature_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_transaction_signature_argumentsDefaultTypeInternal {
  constexpr get_transaction_signature_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_transaction_signature_argumentsDefaultTypeInternal() {}
  union {
    get_transaction_signature_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_transaction_signature_argumentsDefaultTypeInternal _get_transaction_signature_arguments_default_instance_;
constexpr get_transaction_signature_result::get_transaction_signature_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_transaction_signature_resultDefaultTypeInternal {
  constexpr get_transaction_signature_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_transaction_signature_resultDefaultTypeInternal() {}
  union {
    get_transaction_signature_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_transaction_signature_resultDefaultTypeInternal _get_transaction_signature_result_default_instance_;
constexpr get_contract_id_arguments::get_contract_id_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_contract_id_argumentsDefaultTypeInternal {
  constexpr get_contract_id_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_contract_id_argumentsDefaultTypeInternal() {}
  union {
    get_contract_id_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_contract_id_argumentsDefaultTypeInternal _get_contract_id_arguments_default_instance_;
constexpr get_contract_id_result::get_contract_id_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_contract_id_resultDefaultTypeInternal {
  constexpr get_contract_id_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_contract_id_resultDefaultTypeInternal() {}
  union {
    get_contract_id_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_contract_id_resultDefaultTypeInternal _get_contract_id_result_default_instance_;
constexpr get_account_nonce_arguments::get_account_nonce_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_account_nonce_argumentsDefaultTypeInternal {
  constexpr get_account_nonce_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_account_nonce_argumentsDefaultTypeInternal() {}
  union {
    get_account_nonce_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_account_nonce_argumentsDefaultTypeInternal _get_account_nonce_arguments_default_instance_;
constexpr get_account_nonce_result::get_account_nonce_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct get_account_nonce_resultDefaultTypeInternal {
  constexpr get_account_nonce_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_account_nonce_resultDefaultTypeInternal() {}
  union {
    get_account_nonce_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_account_nonce_resultDefaultTypeInternal _get_account_nonce_result_default_instance_;
}  // namespace chain
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[73];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fchain_2fsystem_5fcalls_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fchain_2fsystem_5fcalls_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fchain_2fsystem_5fcalls_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::event_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::event_arguments, name_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::event_arguments, data_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::event_arguments, impacted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::event_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::prints_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::prints_arguments, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::prints_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::process_block_signature_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::process_block_signature_arguments, digest_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::process_block_signature_arguments, header_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::process_block_signature_arguments, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::process_block_signature_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::process_block_signature_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_merkle_root_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_merkle_root_arguments, root_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_merkle_root_arguments, hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_merkle_root_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_merkle_root_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_block_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_block_arguments, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_block_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_transaction_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_transaction_arguments, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_transaction_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_upload_contract_operation_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_upload_contract_operation_arguments, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_upload_contract_operation_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_call_contract_operation_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_call_contract_operation_arguments, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_call_contract_operation_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_set_system_call_operation_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_set_system_call_operation_arguments, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_set_system_call_operation_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_set_system_contract_operation_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_set_system_contract_operation_arguments, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_set_system_contract_operation_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::put_object_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::put_object_arguments, space_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::put_object_arguments, key_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::put_object_arguments, obj_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::put_object_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::put_object_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::remove_object_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::remove_object_arguments, space_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::remove_object_arguments, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::remove_object_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_object_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_object_arguments, space_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_object_arguments, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::database_object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::database_object, exists_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::database_object, value_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::database_object, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_object_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_object_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_next_object_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_next_object_arguments, space_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_next_object_arguments, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_next_object_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_next_object_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_prev_object_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_prev_object_arguments, space_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_prev_object_arguments, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_prev_object_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_prev_object_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::call_contract_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::call_contract_arguments, contract_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::call_contract_arguments, entry_point_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::call_contract_arguments, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::call_contract_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::call_contract_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_entry_point_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_entry_point_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_entry_point_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_arguments_size_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_arguments_size_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_arguments_size_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_arguments_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_arguments_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_arguments_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::set_contract_result_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::set_contract_result_arguments, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::set_contract_result_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::exit_contract_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::exit_contract_arguments, exit_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::exit_contract_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_head_info_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_head_info_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_head_info_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::hash_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::hash_arguments, code_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::hash_arguments, obj_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::hash_arguments, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::hash_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::hash_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::recover_public_key_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::recover_public_key_arguments, signature_data_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::recover_public_key_arguments, digest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::recover_public_key_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::recover_public_key_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_payer_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_payer_arguments, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_payer_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_payer_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_account_rc_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_account_rc_arguments, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_account_rc_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_account_rc_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::consume_account_rc_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::consume_account_rc_arguments, account_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::consume_account_rc_arguments, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::consume_account_rc_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::consume_account_rc_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_resource_limits_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_resource_limits_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_resource_limits_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::consume_block_resources_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::consume_block_resources_arguments, disk_storage_consumed_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::consume_block_resources_arguments, network_bandwidth_consumed_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::consume_block_resources_arguments, compute_bandwidth_consumed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::consume_block_resources_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::consume_block_resources_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_rc_limit_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_rc_limit_arguments, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_rc_limit_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_rc_limit_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_last_irreversible_block_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_last_irreversible_block_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_last_irreversible_block_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_caller_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_caller_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_caller_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::require_authority_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::require_authority_arguments, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::require_authority_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_signature_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_signature_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_signature_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_id_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_id_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_id_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_account_nonce_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_account_nonce_arguments, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_account_nonce_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_account_nonce_result, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::chain::event_arguments)},
  { 8, -1, sizeof(::koinos::chain::event_result)},
  { 13, -1, sizeof(::koinos::chain::prints_arguments)},
  { 19, -1, sizeof(::koinos::chain::prints_result)},
  { 24, -1, sizeof(::koinos::chain::process_block_signature_arguments)},
  { 32, -1, sizeof(::koinos::chain::process_block_signature_result)},
  { 38, -1, sizeof(::koinos::chain::verify_merkle_root_arguments)},
  { 45, -1, sizeof(::koinos::chain::verify_merkle_root_result)},
  { 51, -1, sizeof(::koinos::chain::apply_block_arguments)},
  { 57, -1, sizeof(::koinos::chain::apply_block_result)},
  { 62, -1, sizeof(::koinos::chain::apply_transaction_arguments)},
  { 68, -1, sizeof(::koinos::chain::apply_transaction_result)},
  { 73, -1, sizeof(::koinos::chain::apply_upload_contract_operation_arguments)},
  { 79, -1, sizeof(::koinos::chain::apply_upload_contract_operation_result)},
  { 84, -1, sizeof(::koinos::chain::apply_call_contract_operation_arguments)},
  { 90, -1, sizeof(::koinos::chain::apply_call_contract_operation_result)},
  { 95, -1, sizeof(::koinos::chain::apply_set_system_call_operation_arguments)},
  { 101, -1, sizeof(::koinos::chain::apply_set_system_call_operation_result)},
  { 106, -1, sizeof(::koinos::chain::apply_set_system_contract_operation_arguments)},
  { 112, -1, sizeof(::koinos::chain::apply_set_system_contract_operation_result)},
  { 117, -1, sizeof(::koinos::chain::put_object_arguments)},
  { 125, -1, sizeof(::koinos::chain::put_object_result)},
  { 131, -1, sizeof(::koinos::chain::remove_object_arguments)},
  { 138, -1, sizeof(::koinos::chain::remove_object_result)},
  { 143, -1, sizeof(::koinos::chain::get_object_arguments)},
  { 150, -1, sizeof(::koinos::chain::database_object)},
  { 158, -1, sizeof(::koinos::chain::get_object_result)},
  { 164, -1, sizeof(::koinos::chain::get_next_object_arguments)},
  { 171, -1, sizeof(::koinos::chain::get_next_object_result)},
  { 177, -1, sizeof(::koinos::chain::get_prev_object_arguments)},
  { 184, -1, sizeof(::koinos::chain::get_prev_object_result)},
  { 190, -1, sizeof(::koinos::chain::call_contract_arguments)},
  { 198, -1, sizeof(::koinos::chain::call_contract_result)},
  { 204, -1, sizeof(::koinos::chain::get_entry_point_arguments)},
  { 209, -1, sizeof(::koinos::chain::get_entry_point_result)},
  { 215, -1, sizeof(::koinos::chain::get_contract_arguments_size_arguments)},
  { 220, -1, sizeof(::koinos::chain::get_contract_arguments_size_result)},
  { 226, -1, sizeof(::koinos::chain::get_contract_arguments_arguments)},
  { 231, -1, sizeof(::koinos::chain::get_contract_arguments_result)},
  { 237, -1, sizeof(::koinos::chain::set_contract_result_arguments)},
  { 243, -1, sizeof(::koinos::chain::set_contract_result_result)},
  { 248, -1, sizeof(::koinos::chain::exit_contract_arguments)},
  { 254, -1, sizeof(::koinos::chain::exit_contract_result)},
  { 259, -1, sizeof(::koinos::chain::get_head_info_arguments)},
  { 264, -1, sizeof(::koinos::chain::get_head_info_result)},
  { 270, -1, sizeof(::koinos::chain::hash_arguments)},
  { 278, -1, sizeof(::koinos::chain::hash_result)},
  { 284, -1, sizeof(::koinos::chain::recover_public_key_arguments)},
  { 291, -1, sizeof(::koinos::chain::recover_public_key_result)},
  { 297, -1, sizeof(::koinos::chain::get_transaction_payer_arguments)},
  { 303, -1, sizeof(::koinos::chain::get_transaction_payer_result)},
  { 309, -1, sizeof(::koinos::chain::get_account_rc_arguments)},
  { 315, -1, sizeof(::koinos::chain::get_account_rc_result)},
  { 321, -1, sizeof(::koinos::chain::consume_account_rc_arguments)},
  { 328, -1, sizeof(::koinos::chain::consume_account_rc_result)},
  { 334, -1, sizeof(::koinos::chain::get_resource_limits_arguments)},
  { 339, -1, sizeof(::koinos::chain::get_resource_limits_result)},
  { 345, -1, sizeof(::koinos::chain::consume_block_resources_arguments)},
  { 353, -1, sizeof(::koinos::chain::consume_block_resources_result)},
  { 359, -1, sizeof(::koinos::chain::get_transaction_rc_limit_arguments)},
  { 365, -1, sizeof(::koinos::chain::get_transaction_rc_limit_result)},
  { 371, -1, sizeof(::koinos::chain::get_last_irreversible_block_arguments)},
  { 376, -1, sizeof(::koinos::chain::get_last_irreversible_block_result)},
  { 382, -1, sizeof(::koinos::chain::get_caller_arguments)},
  { 387, -1, sizeof(::koinos::chain::get_caller_result)},
  { 393, -1, sizeof(::koinos::chain::require_authority_arguments)},
  { 399, -1, sizeof(::koinos::chain::require_authority_result)},
  { 404, -1, sizeof(::koinos::chain::get_transaction_signature_arguments)},
  { 409, -1, sizeof(::koinos::chain::get_transaction_signature_result)},
  { 415, -1, sizeof(::koinos::chain::get_contract_id_arguments)},
  { 420, -1, sizeof(::koinos::chain::get_contract_id_result)},
  { 426, -1, sizeof(::koinos::chain::get_account_nonce_arguments)},
  { 432, -1, sizeof(::koinos::chain::get_account_nonce_result)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_event_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_event_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_prints_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_prints_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_process_block_signature_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_process_block_signature_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_verify_merkle_root_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_verify_merkle_root_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_block_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_block_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_transaction_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_transaction_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_upload_contract_operation_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_upload_contract_operation_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_call_contract_operation_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_call_contract_operation_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_set_system_call_operation_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_set_system_call_operation_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_set_system_contract_operation_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_set_system_contract_operation_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_put_object_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_put_object_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_remove_object_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_remove_object_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_object_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_database_object_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_object_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_next_object_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_next_object_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_prev_object_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_prev_object_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_call_contract_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_call_contract_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_entry_point_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_entry_point_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_contract_arguments_size_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_contract_arguments_size_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_contract_arguments_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_contract_arguments_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_set_contract_result_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_set_contract_result_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_exit_contract_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_exit_contract_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_head_info_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_head_info_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_hash_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_hash_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_recover_public_key_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_recover_public_key_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_transaction_payer_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_transaction_payer_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_account_rc_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_account_rc_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_consume_account_rc_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_consume_account_rc_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_resource_limits_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_resource_limits_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_consume_block_resources_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_consume_block_resources_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_transaction_rc_limit_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_transaction_rc_limit_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_last_irreversible_block_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_last_irreversible_block_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_caller_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_caller_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_require_authority_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_require_authority_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_transaction_signature_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_transaction_signature_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_contract_id_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_contract_id_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_account_nonce_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_account_nonce_result_default_instance_),
};

const char descriptor_table_protodef_koinos_2fchain_2fsystem_5fcalls_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037koinos/chain/system_calls.proto\022\014koino"
  "s.chain\032\024koinos/options.proto\032\023koinos/co"
  "mmon.proto\032\036koinos/protocol/protocol.pro"
  "to\032\030koinos/chain/chain.proto\"E\n\017event_ar"
  "guments\022\014\n\004name\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\022\026\n\010i"
  "mpacted\030\003 \003(\014B\004\200\265\030\006\"\016\n\014event_result\"#\n\020p"
  "rints_arguments\022\017\n\007message\030\001 \001(\t\"\017\n\rprin"
  "ts_result\"u\n!process_block_signature_arg"
  "uments\022\016\n\006digest\030\001 \001(\014\022-\n\006header\030\002 \001(\0132\035"
  ".koinos.protocol.block_header\022\021\n\tsignatu"
  "re\030\003 \001(\014\"/\n\036process_block_signature_resu"
  "lt\022\r\n\005value\030\001 \001(\010\"<\n\034verify_merkle_root_"
  "arguments\022\014\n\004root\030\001 \001(\014\022\016\n\006hashes\030\002 \003(\014\""
  "*\n\031verify_merkle_root_result\022\r\n\005value\030\001 "
  "\001(\010\">\n\025apply_block_arguments\022%\n\005block\030\001 "
  "\001(\0132\026.koinos.protocol.block\"\024\n\022apply_blo"
  "ck_result\"P\n\033apply_transaction_arguments"
  "\0221\n\013transaction\030\001 \001(\0132\034.koinos.protocol."
  "transaction\"\032\n\030apply_transaction_result\""
  "c\n)apply_upload_contract_operation_argum"
  "ents\0226\n\002op\030\001 \001(\0132*.koinos.protocol.uploa"
  "d_contract_operation\"(\n&apply_upload_con"
  "tract_operation_result\"_\n\'apply_call_con"
  "tract_operation_arguments\0224\n\002op\030\001 \001(\0132(."
  "koinos.protocol.call_contract_operation\""
  "&\n$apply_call_contract_operation_result\""
  "c\n)apply_set_system_call_operation_argum"
  "ents\0226\n\002op\030\001 \001(\0132*.koinos.protocol.set_s"
  "ystem_call_operation\"(\n&apply_set_system"
  "_call_operation_result\"k\n-apply_set_syst"
  "em_contract_operation_arguments\022:\n\002op\030\001 "
  "\001(\0132..koinos.protocol.set_system_contrac"
  "t_operation\",\n*apply_set_system_contract"
  "_operation_result\"[\n\024put_object_argument"
  "s\022)\n\005space\030\001 \001(\0132\032.koinos.chain.object_s"
  "pace\022\013\n\003key\030\002 \001(\014\022\013\n\003obj\030\003 \001(\014\"\"\n\021put_ob"
  "ject_result\022\r\n\005value\030\001 \001(\010\"Q\n\027remove_obj"
  "ect_arguments\022)\n\005space\030\001 \001(\0132\032.koinos.ch"
  "ain.object_space\022\013\n\003key\030\002 \001(\014\"\026\n\024remove_"
  "object_result\"N\n\024get_object_arguments\022)\n"
  "\005space\030\001 \001(\0132\032.koinos.chain.object_space"
  "\022\013\n\003key\030\002 \001(\014\"=\n\017database_object\022\016\n\006exis"
  "ts\030\001 \001(\010\022\r\n\005value\030\002 \001(\014\022\013\n\003key\030\003 \001(\014\"A\n\021"
  "get_object_result\022,\n\005value\030\001 \001(\0132\035.koino"
  "s.chain.database_object\"S\n\031get_next_obje"
  "ct_arguments\022)\n\005space\030\001 \001(\0132\032.koinos.cha"
  "in.object_space\022\013\n\003key\030\002 \001(\014\"F\n\026get_next"
  "_object_result\022,\n\005value\030\001 \001(\0132\035.koinos.c"
  "hain.database_object\"S\n\031get_prev_object_"
  "arguments\022)\n\005space\030\001 \001(\0132\032.koinos.chain."
  "object_space\022\013\n\003key\030\002 \001(\014\"F\n\026get_prev_ob"
  "ject_result\022,\n\005value\030\001 \001(\0132\035.koinos.chai"
  "n.database_object\"W\n\027call_contract_argum"
  "ents\022\031\n\013contract_id\030\001 \001(\014B\004\200\265\030\005\022\023\n\013entry"
  "_point\030\002 \001(\r\022\014\n\004args\030\003 \001(\014\"%\n\024call_contr"
  "act_result\022\r\n\005value\030\001 \001(\014\"\033\n\031get_entry_p"
  "oint_arguments\"\'\n\026get_entry_point_result"
  "\022\r\n\005value\030\001 \001(\r\"\'\n%get_contract_argument"
  "s_size_arguments\"3\n\"get_contract_argumen"
  "ts_size_result\022\r\n\005value\030\001 \001(\r\"\"\n get_con"
  "tract_arguments_arguments\".\n\035get_contrac"
  "t_arguments_result\022\r\n\005value\030\001 \001(\014\".\n\035set"
  "_contract_result_arguments\022\r\n\005value\030\001 \001("
  "\014\"\034\n\032set_contract_result_result\",\n\027exit_"
  "contract_arguments\022\021\n\texit_code\030\001 \001(\r\"\026\n"
  "\024exit_contract_result\"\031\n\027get_head_info_a"
  "rguments\">\n\024get_head_info_result\022&\n\005valu"
  "e\030\001 \001(\0132\027.koinos.chain.head_info\"A\n\016hash"
  "_arguments\022\020\n\004code\030\001 \001(\004B\0020\001\022\013\n\003obj\030\002 \001("
  "\014\022\020\n\004size\030\003 \001(\004B\0020\001\"\034\n\013hash_result\022\r\n\005va"
  "lue\030\001 \001(\014\"F\n\034recover_public_key_argument"
  "s\022\026\n\016signature_data\030\001 \001(\014\022\016\n\006digest\030\002 \001("
  "\014\"0\n\031recover_public_key_result\022\023\n\005value\030"
  "\001 \001(\014B\004\200\265\030\006\"T\n\037get_transaction_payer_arg"
  "uments\0221\n\013transaction\030\001 \001(\0132\034.koinos.pro"
  "tocol.transaction\"3\n\034get_transaction_pay"
  "er_result\022\023\n\005value\030\001 \001(\014B\004\200\265\030\006\"1\n\030get_ac"
  "count_rc_arguments\022\025\n\007account\030\001 \001(\014B\004\200\265\030"
  "\006\"*\n\025get_account_rc_result\022\021\n\005value\030\001 \001("
  "\004B\0020\001\"H\n\034consume_account_rc_arguments\022\025\n"
  "\007account\030\001 \001(\014B\004\200\265\030\006\022\021\n\005value\030\002 \001(\004B\0020\001\""
  "*\n\031consume_account_rc_result\022\r\n\005value\030\001 "
  "\001(\010\"\037\n\035get_resource_limits_arguments\"N\n\032"
  "get_resource_limits_result\0220\n\005value\030\001 \001("
  "\0132!.koinos.chain.resource_limit_data\"\226\001\n"
  "!consume_block_resources_arguments\022!\n\025di"
  "sk_storage_consumed\030\001 \001(\004B\0020\001\022&\n\032network"
  "_bandwidth_consumed\030\002 \001(\004B\0020\001\022&\n\032compute"
  "_bandwidth_consumed\030\003 \001(\004B\0020\001\"/\n\036consume"
  "_block_resources_result\022\r\n\005value\030\001 \001(\010\"W"
  "\n\"get_transaction_rc_limit_arguments\0221\n\013"
  "transaction\030\001 \001(\0132\034.koinos.protocol.tran"
  "saction\"4\n\037get_transaction_rc_limit_resu"
  "lt\022\021\n\005value\030\001 \001(\004B\0020\001\"\'\n%get_last_irreve"
  "rsible_block_arguments\"7\n\"get_last_irrev"
  "ersible_block_result\022\021\n\005value\030\001 \001(\004B\0020\001\""
  "\026\n\024get_caller_arguments\"=\n\021get_caller_re"
  "sult\022(\n\005value\030\001 \001(\0132\031.koinos.chain.calle"
  "r_data\"4\n\033require_authority_arguments\022\025\n"
  "\007account\030\001 \001(\014B\004\200\265\030\006\"\032\n\030require_authorit"
  "y_result\"%\n#get_transaction_signature_ar"
  "guments\"1\n get_transaction_signature_res"
  "ult\022\r\n\005value\030\001 \001(\014\"\033\n\031get_contract_id_ar"
  "guments\"-\n\026get_contract_id_result\022\023\n\005val"
  "ue\030\001 \001(\014B\004\200\265\030\005\"4\n\033get_account_nonce_argu"
  "ments\022\025\n\007account\030\001 \001(\014B\004\200\265\030\006\"-\n\030get_acco"
  "unt_nonce_result\022\021\n\005value\030\001 \001(\004B\0020\001B4Z2g"
  "ithub.com/koinos/koinos-proto-golang/koi"
  "nos/chainb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_deps[4] = {
  &::descriptor_table_koinos_2fchain_2fchain_2eproto,
  &::descriptor_table_koinos_2fcommon_2eproto,
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto = {
  false, false, 4337, descriptor_table_protodef_koinos_2fchain_2fsystem_5fcalls_2eproto, "koinos/chain/system_calls.proto", 
  &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once, descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_deps, 4, 73,
  schemas, file_default_instances, TableStruct_koinos_2fchain_2fsystem_5fcalls_2eproto::offsets,
  file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto, file_level_enum_descriptors_koinos_2fchain_2fsystem_5fcalls_2eproto, file_level_service_descriptors_koinos_2fchain_2fsystem_5fcalls_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter() {
  return &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fchain_2fsystem_5fcalls_2eproto(&descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto);
namespace koinos {
namespace chain {

// ===================================================================

class event_arguments::_Internal {
 public:
};

event_arguments::event_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  impacted_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.event_arguments)
}
event_arguments::event_arguments(const event_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      impacted_(from.impacted_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.event_arguments)
}

inline void event_arguments::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

event_arguments::~event_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.event_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void event_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void event_arguments::ArenaDtor(void* object) {
  event_arguments* _this = reinterpret_cast< event_arguments* >(object);
  (void)_this;
}
void event_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void event_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void event_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.event_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  impacted_.Clear();
  name_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* event_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.chain.event_arguments.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes impacted = 3 [(.koinos.btype) = ADDRESS];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_impacted();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* event_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.event_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.chain.event_arguments.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // repeated bytes impacted = 3 [(.koinos.btype) = ADDRESS];
  for (int i = 0, n = this->_internal_impacted_size(); i < n; i++) {
    const auto& s = this->_internal_impacted(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.event_arguments)
  return target;
}

size_t event_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.event_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes impacted = 3 [(.koinos.btype) = ADDRESS];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(impacted_.size());
  for (int i = 0, n = impacted_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      impacted_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData event_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    event_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*event_arguments::GetClassData() const { return &_class_data_; }

void event_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<event_arguments *>(to)->MergeFrom(
      static_cast<const event_arguments &>(from));
}


void event_arguments::MergeFrom(const event_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.event_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  impacted_.MergeFrom(from.impacted_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void event_arguments::CopyFrom(const event_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.event_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_arguments::IsInitialized() const {
  return true;
}

void event_arguments::InternalSwap(event_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  impacted_.InternalSwap(&other->impacted_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata event_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[0]);
}

// ===================================================================

class event_result::_Internal {
 public:
};

event_result::event_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.event_result)
}
event_result::event_result(const event_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.event_result)
}

inline void event_result::SharedCtor() {
}

event_result::~event_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.event_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void event_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void event_result::ArenaDtor(void* object) {
  event_result* _this = reinterpret_cast< event_result* >(object);
  (void)_this;
}
void event_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void event_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void event_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.event_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* event_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* event_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.event_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.event_result)
  return target;
}

size_t event_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.event_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData event_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    event_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*event_result::GetClassData() const { return &_class_data_; }

void event_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<event_result *>(to)->MergeFrom(
      static_cast<const event_result &>(from));
}


void event_result::MergeFrom(const event_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.event_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void event_result::CopyFrom(const event_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.event_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_result::IsInitialized() const {
  return true;
}

void event_result::InternalSwap(event_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata event_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[1]);
}

// ===================================================================

class prints_arguments::_Internal {
 public:
};

prints_arguments::prints_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.prints_arguments)
}
prints_arguments::prints_arguments(const prints_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.prints_arguments)
}

inline void prints_arguments::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

prints_arguments::~prints_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.prints_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void prints_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void prints_arguments::ArenaDtor(void* object) {
  prints_arguments* _this = reinterpret_cast< prints_arguments* >(object);
  (void)_this;
}
void prints_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void prints_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void prints_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.prints_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* prints_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.chain.prints_arguments.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* prints_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.prints_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.chain.prints_arguments.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.prints_arguments)
  return target;
}

size_t prints_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.prints_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData prints_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    prints_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*prints_arguments::GetClassData() const { return &_class_data_; }

void prints_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<prints_arguments *>(to)->MergeFrom(
      static_cast<const prints_arguments &>(from));
}


void prints_arguments::MergeFrom(const prints_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.prints_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void prints_arguments::CopyFrom(const prints_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.prints_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool prints_arguments::IsInitialized() const {
  return true;
}

void prints_arguments::InternalSwap(prints_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata prints_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[2]);
}

// ===================================================================

class prints_result::_Internal {
 public:
};

prints_result::prints_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.prints_result)
}
prints_result::prints_result(const prints_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.prints_result)
}

inline void prints_result::SharedCtor() {
}

prints_result::~prints_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.prints_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void prints_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void prints_result::ArenaDtor(void* object) {
  prints_result* _this = reinterpret_cast< prints_result* >(object);
  (void)_this;
}
void prints_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void prints_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void prints_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.prints_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* prints_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* prints_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.prints_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.prints_result)
  return target;
}

size_t prints_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.prints_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData prints_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    prints_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*prints_result::GetClassData() const { return &_class_data_; }

void prints_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<prints_result *>(to)->MergeFrom(
      static_cast<const prints_result &>(from));
}


void prints_result::MergeFrom(const prints_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.prints_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void prints_result::CopyFrom(const prints_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.prints_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool prints_result::IsInitialized() const {
  return true;
}

void prints_result::InternalSwap(prints_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata prints_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[3]);
}

// ===================================================================

class process_block_signature_arguments::_Internal {
 public:
  static const ::koinos::protocol::block_header& header(const process_block_signature_arguments* msg);
};

const ::koinos::protocol::block_header&
process_block_signature_arguments::_Internal::header(const process_block_signature_arguments* msg) {
  return *msg->header_;
}
void process_block_signature_arguments::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
process_block_signature_arguments::process_block_signature_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.process_block_signature_arguments)
}
process_block_signature_arguments::process_block_signature_arguments(const process_block_signature_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_digest().empty()) {
    digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digest(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::koinos::protocol::block_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.process_block_signature_arguments)
}

inline void process_block_signature_arguments::SharedCtor() {
digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
header_ = nullptr;
}

process_block_signature_arguments::~process_block_signature_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.process_block_signature_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void process_block_signature_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void process_block_signature_arguments::ArenaDtor(void* object) {
  process_block_signature_arguments* _this = reinterpret_cast< process_block_signature_arguments* >(object);
  (void)_this;
}
void process_block_signature_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void process_block_signature_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void process_block_signature_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.process_block_signature_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  digest_.ClearToEmpty();
  signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* process_block_signature_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes digest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.block_header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* process_block_signature_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.process_block_signature_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes digest = 1;
  if (!this->_internal_digest().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_digest(), target);
  }

  // .koinos.protocol.block_header header = 2;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  // bytes signature = 3;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.process_block_signature_arguments)
  return target;
}

size_t process_block_signature_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.process_block_signature_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes digest = 1;
  if (!this->_internal_digest().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }

  // bytes signature = 3;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .koinos.protocol.block_header header = 2;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData process_block_signature_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    process_block_signature_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*process_block_signature_arguments::GetClassData() const { return &_class_data_; }

void process_block_signature_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<process_block_signature_arguments *>(to)->MergeFrom(
      static_cast<const process_block_signature_arguments &>(from));
}


void process_block_signature_arguments::MergeFrom(const process_block_signature_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.process_block_signature_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_digest().empty()) {
    _internal_set_digest(from._internal_digest());
  }
  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::koinos::protocol::block_header::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void process_block_signature_arguments::CopyFrom(const process_block_signature_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.process_block_signature_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool process_block_signature_arguments::IsInitialized() const {
  return true;
}

void process_block_signature_arguments::InternalSwap(process_block_signature_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &digest_, GetArenaForAllocation(),
      &other->digest_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, GetArenaForAllocation(),
      &other->signature_, other->GetArenaForAllocation()
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata process_block_signature_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[4]);
}

// ===================================================================

class process_block_signature_result::_Internal {
 public:
};

process_block_signature_result::process_block_signature_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.process_block_signature_result)
}
process_block_signature_result::process_block_signature_result(const process_block_signature_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.process_block_signature_result)
}

inline void process_block_signature_result::SharedCtor() {
value_ = false;
}

process_block_signature_result::~process_block_signature_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.process_block_signature_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void process_block_signature_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void process_block_signature_result::ArenaDtor(void* object) {
  process_block_signature_result* _this = reinterpret_cast< process_block_signature_result* >(object);
  (void)_this;
}
void process_block_signature_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void process_block_signature_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void process_block_signature_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.process_block_signature_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* process_block_signature_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* process_block_signature_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.process_block_signature_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.process_block_signature_result)
  return target;
}

size_t process_block_signature_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.process_block_signature_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData process_block_signature_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    process_block_signature_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*process_block_signature_result::GetClassData() const { return &_class_data_; }

void process_block_signature_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<process_block_signature_result *>(to)->MergeFrom(
      static_cast<const process_block_signature_result &>(from));
}


void process_block_signature_result::MergeFrom(const process_block_signature_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.process_block_signature_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void process_block_signature_result::CopyFrom(const process_block_signature_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.process_block_signature_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool process_block_signature_result::IsInitialized() const {
  return true;
}

void process_block_signature_result::InternalSwap(process_block_signature_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata process_block_signature_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[5]);
}

// ===================================================================

class verify_merkle_root_arguments::_Internal {
 public:
};

verify_merkle_root_arguments::verify_merkle_root_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hashes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.verify_merkle_root_arguments)
}
verify_merkle_root_arguments::verify_merkle_root_arguments(const verify_merkle_root_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hashes_(from.hashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_root().empty()) {
    root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_root(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.verify_merkle_root_arguments)
}

inline void verify_merkle_root_arguments::SharedCtor() {
root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

verify_merkle_root_arguments::~verify_merkle_root_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.verify_merkle_root_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void verify_merkle_root_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void verify_merkle_root_arguments::ArenaDtor(void* object) {
  verify_merkle_root_arguments* _this = reinterpret_cast< verify_merkle_root_arguments* >(object);
  (void)_this;
}
void verify_merkle_root_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void verify_merkle_root_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void verify_merkle_root_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.verify_merkle_root_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  root_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* verify_merkle_root_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes hashes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hashes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* verify_merkle_root_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.verify_merkle_root_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes root = 1;
  if (!this->_internal_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_root(), target);
  }

  // repeated bytes hashes = 2;
  for (int i = 0, n = this->_internal_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_hashes(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.verify_merkle_root_arguments)
  return target;
}

size_t verify_merkle_root_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.verify_merkle_root_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes hashes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hashes_.size());
  for (int i = 0, n = hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      hashes_.Get(i));
  }

  // bytes root = 1;
  if (!this->_internal_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_root());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData verify_merkle_root_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    verify_merkle_root_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*verify_merkle_root_arguments::GetClassData() const { return &_class_data_; }

void verify_merkle_root_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<verify_merkle_root_arguments *>(to)->MergeFrom(
      static_cast<const verify_merkle_root_arguments &>(from));
}


void verify_merkle_root_arguments::MergeFrom(const verify_merkle_root_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.verify_merkle_root_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
  if (!from._internal_root().empty()) {
    _internal_set_root(from._internal_root());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void verify_merkle_root_arguments::CopyFrom(const verify_merkle_root_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.verify_merkle_root_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_merkle_root_arguments::IsInitialized() const {
  return true;
}

void verify_merkle_root_arguments::InternalSwap(verify_merkle_root_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hashes_.InternalSwap(&other->hashes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &root_, GetArenaForAllocation(),
      &other->root_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata verify_merkle_root_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[6]);
}

// ===================================================================

class verify_merkle_root_result::_Internal {
 public:
};

verify_merkle_root_result::verify_merkle_root_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.verify_merkle_root_result)
}
verify_merkle_root_result::verify_merkle_root_result(const verify_merkle_root_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.verify_merkle_root_result)
}

inline void verify_merkle_root_result::SharedCtor() {
value_ = false;
}

verify_merkle_root_result::~verify_merkle_root_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.verify_merkle_root_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void verify_merkle_root_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void verify_merkle_root_result::ArenaDtor(void* object) {
  verify_merkle_root_result* _this = reinterpret_cast< verify_merkle_root_result* >(object);
  (void)_this;
}
void verify_merkle_root_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void verify_merkle_root_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void verify_merkle_root_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.verify_merkle_root_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* verify_merkle_root_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* verify_merkle_root_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.verify_merkle_root_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.verify_merkle_root_result)
  return target;
}

size_t verify_merkle_root_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.verify_merkle_root_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData verify_merkle_root_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    verify_merkle_root_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*verify_merkle_root_result::GetClassData() const { return &_class_data_; }

void verify_merkle_root_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<verify_merkle_root_result *>(to)->MergeFrom(
      static_cast<const verify_merkle_root_result &>(from));
}


void verify_merkle_root_result::MergeFrom(const verify_merkle_root_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.verify_merkle_root_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void verify_merkle_root_result::CopyFrom(const verify_merkle_root_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.verify_merkle_root_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_merkle_root_result::IsInitialized() const {
  return true;
}

void verify_merkle_root_result::InternalSwap(verify_merkle_root_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata verify_merkle_root_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[7]);
}

// ===================================================================

class apply_block_arguments::_Internal {
 public:
  static const ::koinos::protocol::block& block(const apply_block_arguments* msg);
};

const ::koinos::protocol::block&
apply_block_arguments::_Internal::block(const apply_block_arguments* msg) {
  return *msg->block_;
}
void apply_block_arguments::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
apply_block_arguments::apply_block_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_block_arguments)
}
apply_block_arguments::apply_block_arguments(const apply_block_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::koinos::protocol::block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_block_arguments)
}

inline void apply_block_arguments::SharedCtor() {
block_ = nullptr;
}

apply_block_arguments::~apply_block_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_block_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void apply_block_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void apply_block_arguments::ArenaDtor(void* object) {
  apply_block_arguments* _this = reinterpret_cast< apply_block_arguments* >(object);
  (void)_this;
}
void apply_block_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_block_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void apply_block_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_block_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_block_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_block_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_block_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.block block = 1;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_block_arguments)
  return target;
}

size_t apply_block_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_block_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.block block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apply_block_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    apply_block_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*apply_block_arguments::GetClassData() const { return &_class_data_; }

void apply_block_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<apply_block_arguments *>(to)->MergeFrom(
      static_cast<const apply_block_arguments &>(from));
}


void apply_block_arguments::MergeFrom(const apply_block_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_block_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::koinos::protocol::block::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void apply_block_arguments::CopyFrom(const apply_block_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_block_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_block_arguments::IsInitialized() const {
  return true;
}

void apply_block_arguments::InternalSwap(apply_block_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_block_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[8]);
}

// ===================================================================

class apply_block_result::_Internal {
 public:
};

apply_block_result::apply_block_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_block_result)
}
apply_block_result::apply_block_result(const apply_block_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_block_result)
}

inline void apply_block_result::SharedCtor() {
}

apply_block_result::~apply_block_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_block_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void apply_block_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void apply_block_result::ArenaDtor(void* object) {
  apply_block_result* _this = reinterpret_cast< apply_block_result* >(object);
  (void)_this;
}
void apply_block_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_block_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void apply_block_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_block_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_block_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_block_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_block_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_block_result)
  return target;
}

size_t apply_block_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_block_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apply_block_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    apply_block_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*apply_block_result::GetClassData() const { return &_class_data_; }

void apply_block_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<apply_block_result *>(to)->MergeFrom(
      static_cast<const apply_block_result &>(from));
}


void apply_block_result::MergeFrom(const apply_block_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_block_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void apply_block_result::CopyFrom(const apply_block_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_block_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_block_result::IsInitialized() const {
  return true;
}

void apply_block_result::InternalSwap(apply_block_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_block_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[9]);
}

// ===================================================================

class apply_transaction_arguments::_Internal {
 public:
  static const ::koinos::protocol::transaction& transaction(const apply_transaction_arguments* msg);
};

const ::koinos::protocol::transaction&
apply_transaction_arguments::_Internal::transaction(const apply_transaction_arguments* msg) {
  return *msg->transaction_;
}
void apply_transaction_arguments::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
apply_transaction_arguments::apply_transaction_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_transaction_arguments)
}
apply_transaction_arguments::apply_transaction_arguments(const apply_transaction_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::koinos::protocol::transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_transaction_arguments)
}

inline void apply_transaction_arguments::SharedCtor() {
transaction_ = nullptr;
}

apply_transaction_arguments::~apply_transaction_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_transaction_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void apply_transaction_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void apply_transaction_arguments::ArenaDtor(void* object) {
  apply_transaction_arguments* _this = reinterpret_cast< apply_transaction_arguments* >(object);
  (void)_this;
}
void apply_transaction_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_transaction_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void apply_transaction_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_transaction_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_transaction_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_transaction_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_transaction_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_transaction_arguments)
  return target;
}

size_t apply_transaction_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_transaction_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apply_transaction_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    apply_transaction_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*apply_transaction_arguments::GetClassData() const { return &_class_data_; }

void apply_transaction_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<apply_transaction_arguments *>(to)->MergeFrom(
      static_cast<const apply_transaction_arguments &>(from));
}


void apply_transaction_arguments::MergeFrom(const apply_transaction_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_transaction_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::koinos::protocol::transaction::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void apply_transaction_arguments::CopyFrom(const apply_transaction_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_transaction_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_transaction_arguments::IsInitialized() const {
  return true;
}

void apply_transaction_arguments::InternalSwap(apply_transaction_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_transaction_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[10]);
}

// ===================================================================

class apply_transaction_result::_Internal {
 public:
};

apply_transaction_result::apply_transaction_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_transaction_result)
}
apply_transaction_result::apply_transaction_result(const apply_transaction_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_transaction_result)
}

inline void apply_transaction_result::SharedCtor() {
}

apply_transaction_result::~apply_transaction_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_transaction_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void apply_transaction_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void apply_transaction_result::ArenaDtor(void* object) {
  apply_transaction_result* _this = reinterpret_cast< apply_transaction_result* >(object);
  (void)_this;
}
void apply_transaction_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_transaction_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void apply_transaction_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_transaction_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_transaction_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_transaction_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_transaction_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_transaction_result)
  return target;
}

size_t apply_transaction_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_transaction_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apply_transaction_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    apply_transaction_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*apply_transaction_result::GetClassData() const { return &_class_data_; }

void apply_transaction_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<apply_transaction_result *>(to)->MergeFrom(
      static_cast<const apply_transaction_result &>(from));
}


void apply_transaction_result::MergeFrom(const apply_transaction_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_transaction_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void apply_transaction_result::CopyFrom(const apply_transaction_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_transaction_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_transaction_result::IsInitialized() const {
  return true;
}

void apply_transaction_result::InternalSwap(apply_transaction_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_transaction_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[11]);
}

// ===================================================================

class apply_upload_contract_operation_arguments::_Internal {
 public:
  static const ::koinos::protocol::upload_contract_operation& op(const apply_upload_contract_operation_arguments* msg);
};

const ::koinos::protocol::upload_contract_operation&
apply_upload_contract_operation_arguments::_Internal::op(const apply_upload_contract_operation_arguments* msg) {
  return *msg->op_;
}
void apply_upload_contract_operation_arguments::clear_op() {
  if (GetArenaForAllocation() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
}
apply_upload_contract_operation_arguments::apply_upload_contract_operation_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_upload_contract_operation_arguments)
}
apply_upload_contract_operation_arguments::apply_upload_contract_operation_arguments(const apply_upload_contract_operation_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_op()) {
    op_ = new ::koinos::protocol::upload_contract_operation(*from.op_);
  } else {
    op_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_upload_contract_operation_arguments)
}

inline void apply_upload_contract_operation_arguments::SharedCtor() {
op_ = nullptr;
}

apply_upload_contract_operation_arguments::~apply_upload_contract_operation_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_upload_contract_operation_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void apply_upload_contract_operation_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete op_;
}

void apply_upload_contract_operation_arguments::ArenaDtor(void* object) {
  apply_upload_contract_operation_arguments* _this = reinterpret_cast< apply_upload_contract_operation_arguments* >(object);
  (void)_this;
}
void apply_upload_contract_operation_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_upload_contract_operation_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void apply_upload_contract_operation_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_upload_contract_operation_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_upload_contract_operation_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.upload_contract_operation op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_upload_contract_operation_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_upload_contract_operation_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.upload_contract_operation op = 1;
  if (this->_internal_has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::op(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_upload_contract_operation_arguments)
  return target;
}

size_t apply_upload_contract_operation_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_upload_contract_operation_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.upload_contract_operation op = 1;
  if (this->_internal_has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apply_upload_contract_operation_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    apply_upload_contract_operation_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*apply_upload_contract_operation_arguments::GetClassData() const { return &_class_data_; }

void apply_upload_contract_operation_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<apply_upload_contract_operation_arguments *>(to)->MergeFrom(
      static_cast<const apply_upload_contract_operation_arguments &>(from));
}


void apply_upload_contract_operation_arguments::MergeFrom(const apply_upload_contract_operation_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_upload_contract_operation_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_op()) {
    _internal_mutable_op()->::koinos::protocol::upload_contract_operation::MergeFrom(from._internal_op());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void apply_upload_contract_operation_arguments::CopyFrom(const apply_upload_contract_operation_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_upload_contract_operation_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_upload_contract_operation_arguments::IsInitialized() const {
  return true;
}

void apply_upload_contract_operation_arguments::InternalSwap(apply_upload_contract_operation_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_upload_contract_operation_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[12]);
}

// ===================================================================

class apply_upload_contract_operation_result::_Internal {
 public:
};

apply_upload_contract_operation_result::apply_upload_contract_operation_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_upload_contract_operation_result)
}
apply_upload_contract_operation_result::apply_upload_contract_operation_result(const apply_upload_contract_operation_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_upload_contract_operation_result)
}

inline void apply_upload_contract_operation_result::SharedCtor() {
}

apply_upload_contract_operation_result::~apply_upload_contract_operation_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_upload_contract_operation_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void apply_upload_contract_operation_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void apply_upload_contract_operation_result::ArenaDtor(void* object) {
  apply_upload_contract_operation_result* _this = reinterpret_cast< apply_upload_contract_operation_result* >(object);
  (void)_this;
}
void apply_upload_contract_operation_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_upload_contract_operation_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void apply_upload_contract_operation_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_upload_contract_operation_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_upload_contract_operation_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_upload_contract_operation_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_upload_contract_operation_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_upload_contract_operation_result)
  return target;
}

size_t apply_upload_contract_operation_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_upload_contract_operation_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apply_upload_contract_operation_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    apply_upload_contract_operation_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*apply_upload_contract_operation_result::GetClassData() const { return &_class_data_; }

void apply_upload_contract_operation_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<apply_upload_contract_operation_result *>(to)->MergeFrom(
      static_cast<const apply_upload_contract_operation_result &>(from));
}


void apply_upload_contract_operation_result::MergeFrom(const apply_upload_contract_operation_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_upload_contract_operation_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void apply_upload_contract_operation_result::CopyFrom(const apply_upload_contract_operation_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_upload_contract_operation_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_upload_contract_operation_result::IsInitialized() const {
  return true;
}

void apply_upload_contract_operation_result::InternalSwap(apply_upload_contract_operation_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_upload_contract_operation_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[13]);
}

// ===================================================================

class apply_call_contract_operation_arguments::_Internal {
 public:
  static const ::koinos::protocol::call_contract_operation& op(const apply_call_contract_operation_arguments* msg);
};

const ::koinos::protocol::call_contract_operation&
apply_call_contract_operation_arguments::_Internal::op(const apply_call_contract_operation_arguments* msg) {
  return *msg->op_;
}
void apply_call_contract_operation_arguments::clear_op() {
  if (GetArenaForAllocation() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
}
apply_call_contract_operation_arguments::apply_call_contract_operation_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_call_contract_operation_arguments)
}
apply_call_contract_operation_arguments::apply_call_contract_operation_arguments(const apply_call_contract_operation_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_op()) {
    op_ = new ::koinos::protocol::call_contract_operation(*from.op_);
  } else {
    op_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_call_contract_operation_arguments)
}

inline void apply_call_contract_operation_arguments::SharedCtor() {
op_ = nullptr;
}

apply_call_contract_operation_arguments::~apply_call_contract_operation_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_call_contract_operation_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void apply_call_contract_operation_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete op_;
}

void apply_call_contract_operation_arguments::ArenaDtor(void* object) {
  apply_call_contract_operation_arguments* _this = reinterpret_cast< apply_call_contract_operation_arguments* >(object);
  (void)_this;
}
void apply_call_contract_operation_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_call_contract_operation_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void apply_call_contract_operation_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_call_contract_operation_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_call_contract_operation_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.call_contract_operation op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_call_contract_operation_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_call_contract_operation_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.call_contract_operation op = 1;
  if (this->_internal_has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::op(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_call_contract_operation_arguments)
  return target;
}

size_t apply_call_contract_operation_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_call_contract_operation_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.call_contract_operation op = 1;
  if (this->_internal_has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apply_call_contract_operation_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    apply_call_contract_operation_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*apply_call_contract_operation_arguments::GetClassData() const { return &_class_data_; }

void apply_call_contract_operation_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<apply_call_contract_operation_arguments *>(to)->MergeFrom(
      static_cast<const apply_call_contract_operation_arguments &>(from));
}


void apply_call_contract_operation_arguments::MergeFrom(const apply_call_contract_operation_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_call_contract_operation_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_op()) {
    _internal_mutable_op()->::koinos::protocol::call_contract_operation::MergeFrom(from._internal_op());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void apply_call_contract_operation_arguments::CopyFrom(const apply_call_contract_operation_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_call_contract_operation_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_call_contract_operation_arguments::IsInitialized() const {
  return true;
}

void apply_call_contract_operation_arguments::InternalSwap(apply_call_contract_operation_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_call_contract_operation_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[14]);
}

// ===================================================================

class apply_call_contract_operation_result::_Internal {
 public:
};

apply_call_contract_operation_result::apply_call_contract_operation_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_call_contract_operation_result)
}
apply_call_contract_operation_result::apply_call_contract_operation_result(const apply_call_contract_operation_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_call_contract_operation_result)
}

inline void apply_call_contract_operation_result::SharedCtor() {
}

apply_call_contract_operation_result::~apply_call_contract_operation_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_call_contract_operation_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void apply_call_contract_operation_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void apply_call_contract_operation_result::ArenaDtor(void* object) {
  apply_call_contract_operation_result* _this = reinterpret_cast< apply_call_contract_operation_result* >(object);
  (void)_this;
}
void apply_call_contract_operation_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_call_contract_operation_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void apply_call_contract_operation_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_call_contract_operation_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_call_contract_operation_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_call_contract_operation_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_call_contract_operation_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_call_contract_operation_result)
  return target;
}

size_t apply_call_contract_operation_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_call_contract_operation_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apply_call_contract_operation_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    apply_call_contract_operation_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*apply_call_contract_operation_result::GetClassData() const { return &_class_data_; }

void apply_call_contract_operation_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<apply_call_contract_operation_result *>(to)->MergeFrom(
      static_cast<const apply_call_contract_operation_result &>(from));
}


void apply_call_contract_operation_result::MergeFrom(const apply_call_contract_operation_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_call_contract_operation_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void apply_call_contract_operation_result::CopyFrom(const apply_call_contract_operation_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_call_contract_operation_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_call_contract_operation_result::IsInitialized() const {
  return true;
}

void apply_call_contract_operation_result::InternalSwap(apply_call_contract_operation_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_call_contract_operation_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[15]);
}

// ===================================================================

class apply_set_system_call_operation_arguments::_Internal {
 public:
  static const ::koinos::protocol::set_system_call_operation& op(const apply_set_system_call_operation_arguments* msg);
};

const ::koinos::protocol::set_system_call_operation&
apply_set_system_call_operation_arguments::_Internal::op(const apply_set_system_call_operation_arguments* msg) {
  return *msg->op_;
}
void apply_set_system_call_operation_arguments::clear_op() {
  if (GetArenaForAllocation() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
}
apply_set_system_call_operation_arguments::apply_set_system_call_operation_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_set_system_call_operation_arguments)
}
apply_set_system_call_operation_arguments::apply_set_system_call_operation_arguments(const apply_set_system_call_operation_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_op()) {
    op_ = new ::koinos::protocol::set_system_call_operation(*from.op_);
  } else {
    op_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_set_system_call_operation_arguments)
}

inline void apply_set_system_call_operation_arguments::SharedCtor() {
op_ = nullptr;
}

apply_set_system_call_operation_arguments::~apply_set_system_call_operation_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_set_system_call_operation_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void apply_set_system_call_operation_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete op_;
}

void apply_set_system_call_operation_arguments::ArenaDtor(void* object) {
  apply_set_system_call_operation_arguments* _this = reinterpret_cast< apply_set_system_call_operation_arguments* >(object);
  (void)_this;
}
void apply_set_system_call_operation_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_set_system_call_operation_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void apply_set_system_call_operation_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_set_system_call_operation_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_set_system_call_operation_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.set_system_call_operation op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_set_system_call_operation_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_set_system_call_operation_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.set_system_call_operation op = 1;
  if (this->_internal_has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::op(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_set_system_call_operation_arguments)
  return target;
}

size_t apply_set_system_call_operation_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_set_system_call_operation_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.set_system_call_operation op = 1;
  if (this->_internal_has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apply_set_system_call_operation_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    apply_set_system_call_operation_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*apply_set_system_call_operation_arguments::GetClassData() const { return &_class_data_; }

void apply_set_system_call_operation_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<apply_set_system_call_operation_arguments *>(to)->MergeFrom(
      static_cast<const apply_set_system_call_operation_arguments &>(from));
}


void apply_set_system_call_operation_arguments::MergeFrom(const apply_set_system_call_operation_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_set_system_call_operation_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_op()) {
    _internal_mutable_op()->::koinos::protocol::set_system_call_operation::MergeFrom(from._internal_op());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void apply_set_system_call_operation_arguments::CopyFrom(const apply_set_system_call_operation_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_set_system_call_operation_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_set_system_call_operation_arguments::IsInitialized() const {
  return true;
}

void apply_set_system_call_operation_arguments::InternalSwap(apply_set_system_call_operation_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_set_system_call_operation_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[16]);
}

// ===================================================================

class apply_set_system_call_operation_result::_Internal {
 public:
};

apply_set_system_call_operation_result::apply_set_system_call_operation_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_set_system_call_operation_result)
}
apply_set_system_call_operation_result::apply_set_system_call_operation_result(const apply_set_system_call_operation_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_set_system_call_operation_result)
}

inline void apply_set_system_call_operation_result::SharedCtor() {
}

apply_set_system_call_operation_result::~apply_set_system_call_operation_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_set_system_call_operation_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void apply_set_system_call_operation_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void apply_set_system_call_operation_result::ArenaDtor(void* object) {
  apply_set_system_call_operation_result* _this = reinterpret_cast< apply_set_system_call_operation_result* >(object);
  (void)_this;
}
void apply_set_system_call_operation_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_set_system_call_operation_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void apply_set_system_call_operation_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_set_system_call_operation_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_set_system_call_operation_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_set_system_call_operation_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_set_system_call_operation_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_set_system_call_operation_result)
  return target;
}

size_t apply_set_system_call_operation_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_set_system_call_operation_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apply_set_system_call_operation_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    apply_set_system_call_operation_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*apply_set_system_call_operation_result::GetClassData() const { return &_class_data_; }

void apply_set_system_call_operation_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<apply_set_system_call_operation_result *>(to)->MergeFrom(
      static_cast<const apply_set_system_call_operation_result &>(from));
}


void apply_set_system_call_operation_result::MergeFrom(const apply_set_system_call_operation_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_set_system_call_operation_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void apply_set_system_call_operation_result::CopyFrom(const apply_set_system_call_operation_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_set_system_call_operation_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_set_system_call_operation_result::IsInitialized() const {
  return true;
}

void apply_set_system_call_operation_result::InternalSwap(apply_set_system_call_operation_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_set_system_call_operation_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[17]);
}

// ===================================================================

class apply_set_system_contract_operation_arguments::_Internal {
 public:
  static const ::koinos::protocol::set_system_contract_operation& op(const apply_set_system_contract_operation_arguments* msg);
};

const ::koinos::protocol::set_system_contract_operation&
apply_set_system_contract_operation_arguments::_Internal::op(const apply_set_system_contract_operation_arguments* msg) {
  return *msg->op_;
}
void apply_set_system_contract_operation_arguments::clear_op() {
  if (GetArenaForAllocation() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
}
apply_set_system_contract_operation_arguments::apply_set_system_contract_operation_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_set_system_contract_operation_arguments)
}
apply_set_system_contract_operation_arguments::apply_set_system_contract_operation_arguments(const apply_set_system_contract_operation_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_op()) {
    op_ = new ::koinos::protocol::set_system_contract_operation(*from.op_);
  } else {
    op_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_set_system_contract_operation_arguments)
}

inline void apply_set_system_contract_operation_arguments::SharedCtor() {
op_ = nullptr;
}

apply_set_system_contract_operation_arguments::~apply_set_system_contract_operation_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_set_system_contract_operation_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void apply_set_system_contract_operation_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete op_;
}

void apply_set_system_contract_operation_arguments::ArenaDtor(void* object) {
  apply_set_system_contract_operation_arguments* _this = reinterpret_cast< apply_set_system_contract_operation_arguments* >(object);
  (void)_this;
}
void apply_set_system_contract_operation_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_set_system_contract_operation_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void apply_set_system_contract_operation_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_set_system_contract_operation_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_set_system_contract_operation_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.set_system_contract_operation op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_set_system_contract_operation_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_set_system_contract_operation_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.set_system_contract_operation op = 1;
  if (this->_internal_has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::op(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_set_system_contract_operation_arguments)
  return target;
}

size_t apply_set_system_contract_operation_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_set_system_contract_operation_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.set_system_contract_operation op = 1;
  if (this->_internal_has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apply_set_system_contract_operation_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    apply_set_system_contract_operation_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*apply_set_system_contract_operation_arguments::GetClassData() const { return &_class_data_; }

void apply_set_system_contract_operation_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<apply_set_system_contract_operation_arguments *>(to)->MergeFrom(
      static_cast<const apply_set_system_contract_operation_arguments &>(from));
}


void apply_set_system_contract_operation_arguments::MergeFrom(const apply_set_system_contract_operation_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_set_system_contract_operation_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_op()) {
    _internal_mutable_op()->::koinos::protocol::set_system_contract_operation::MergeFrom(from._internal_op());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void apply_set_system_contract_operation_arguments::CopyFrom(const apply_set_system_contract_operation_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_set_system_contract_operation_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_set_system_contract_operation_arguments::IsInitialized() const {
  return true;
}

void apply_set_system_contract_operation_arguments::InternalSwap(apply_set_system_contract_operation_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_set_system_contract_operation_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[18]);
}

// ===================================================================

class apply_set_system_contract_operation_result::_Internal {
 public:
};

apply_set_system_contract_operation_result::apply_set_system_contract_operation_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_set_system_contract_operation_result)
}
apply_set_system_contract_operation_result::apply_set_system_contract_operation_result(const apply_set_system_contract_operation_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_set_system_contract_operation_result)
}

inline void apply_set_system_contract_operation_result::SharedCtor() {
}

apply_set_system_contract_operation_result::~apply_set_system_contract_operation_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_set_system_contract_operation_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void apply_set_system_contract_operation_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void apply_set_system_contract_operation_result::ArenaDtor(void* object) {
  apply_set_system_contract_operation_result* _this = reinterpret_cast< apply_set_system_contract_operation_result* >(object);
  (void)_this;
}
void apply_set_system_contract_operation_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_set_system_contract_operation_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void apply_set_system_contract_operation_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_set_system_contract_operation_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_set_system_contract_operation_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_set_system_contract_operation_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_set_system_contract_operation_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_set_system_contract_operation_result)
  return target;
}

size_t apply_set_system_contract_operation_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_set_system_contract_operation_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apply_set_system_contract_operation_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    apply_set_system_contract_operation_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*apply_set_system_contract_operation_result::GetClassData() const { return &_class_data_; }

void apply_set_system_contract_operation_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<apply_set_system_contract_operation_result *>(to)->MergeFrom(
      static_cast<const apply_set_system_contract_operation_result &>(from));
}


void apply_set_system_contract_operation_result::MergeFrom(const apply_set_system_contract_operation_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_set_system_contract_operation_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void apply_set_system_contract_operation_result::CopyFrom(const apply_set_system_contract_operation_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_set_system_contract_operation_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_set_system_contract_operation_result::IsInitialized() const {
  return true;
}

void apply_set_system_contract_operation_result::InternalSwap(apply_set_system_contract_operation_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_set_system_contract_operation_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[19]);
}

// ===================================================================

class put_object_arguments::_Internal {
 public:
  static const ::koinos::chain::object_space& space(const put_object_arguments* msg);
};

const ::koinos::chain::object_space&
put_object_arguments::_Internal::space(const put_object_arguments* msg) {
  return *msg->space_;
}
void put_object_arguments::clear_space() {
  if (GetArenaForAllocation() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
}
put_object_arguments::put_object_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.put_object_arguments)
}
put_object_arguments::put_object_arguments(const put_object_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  obj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_obj().empty()) {
    obj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_obj(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_space()) {
    space_ = new ::koinos::chain::object_space(*from.space_);
  } else {
    space_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.put_object_arguments)
}

inline void put_object_arguments::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
obj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
space_ = nullptr;
}

put_object_arguments::~put_object_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.put_object_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void put_object_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obj_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete space_;
}

void put_object_arguments::ArenaDtor(void* object) {
  put_object_arguments* _this = reinterpret_cast< put_object_arguments* >(object);
  (void)_this;
}
void put_object_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void put_object_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void put_object_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.put_object_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  obj_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* put_object_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.chain.object_space space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes obj = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_obj();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* put_object_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.put_object_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.chain.object_space space = 1;
  if (this->_internal_has_space()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::space(this), target, stream);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes obj = 3;
  if (!this->_internal_obj().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_obj(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.put_object_arguments)
  return target;
}

size_t put_object_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.put_object_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes obj = 3;
  if (!this->_internal_obj().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_obj());
  }

  // .koinos.chain.object_space space = 1;
  if (this->_internal_has_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *space_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData put_object_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    put_object_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*put_object_arguments::GetClassData() const { return &_class_data_; }

void put_object_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<put_object_arguments *>(to)->MergeFrom(
      static_cast<const put_object_arguments &>(from));
}


void put_object_arguments::MergeFrom(const put_object_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.put_object_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_obj().empty()) {
    _internal_set_obj(from._internal_obj());
  }
  if (from._internal_has_space()) {
    _internal_mutable_space()->::koinos::chain::object_space::MergeFrom(from._internal_space());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void put_object_arguments::CopyFrom(const put_object_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.put_object_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool put_object_arguments::IsInitialized() const {
  return true;
}

void put_object_arguments::InternalSwap(put_object_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &obj_, GetArenaForAllocation(),
      &other->obj_, other->GetArenaForAllocation()
  );
  swap(space_, other->space_);
}

::PROTOBUF_NAMESPACE_ID::Metadata put_object_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[20]);
}

// ===================================================================

class put_object_result::_Internal {
 public:
};

put_object_result::put_object_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.put_object_result)
}
put_object_result::put_object_result(const put_object_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.put_object_result)
}

inline void put_object_result::SharedCtor() {
value_ = false;
}

put_object_result::~put_object_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.put_object_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void put_object_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void put_object_result::ArenaDtor(void* object) {
  put_object_result* _this = reinterpret_cast< put_object_result* >(object);
  (void)_this;
}
void put_object_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void put_object_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void put_object_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.put_object_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* put_object_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* put_object_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.put_object_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.put_object_result)
  return target;
}

size_t put_object_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.put_object_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData put_object_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    put_object_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*put_object_result::GetClassData() const { return &_class_data_; }

void put_object_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<put_object_result *>(to)->MergeFrom(
      static_cast<const put_object_result &>(from));
}


void put_object_result::MergeFrom(const put_object_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.put_object_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void put_object_result::CopyFrom(const put_object_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.put_object_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool put_object_result::IsInitialized() const {
  return true;
}

void put_object_result::InternalSwap(put_object_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata put_object_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[21]);
}

// ===================================================================

class remove_object_arguments::_Internal {
 public:
  static const ::koinos::chain::object_space& space(const remove_object_arguments* msg);
};

const ::koinos::chain::object_space&
remove_object_arguments::_Internal::space(const remove_object_arguments* msg) {
  return *msg->space_;
}
void remove_object_arguments::clear_space() {
  if (GetArenaForAllocation() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
}
remove_object_arguments::remove_object_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.remove_object_arguments)
}
remove_object_arguments::remove_object_arguments(const remove_object_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_space()) {
    space_ = new ::koinos::chain::object_space(*from.space_);
  } else {
    space_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.remove_object_arguments)
}

inline void remove_object_arguments::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
space_ = nullptr;
}

remove_object_arguments::~remove_object_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.remove_object_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void remove_object_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete space_;
}

void remove_object_arguments::ArenaDtor(void* object) {
  remove_object_arguments* _this = reinterpret_cast< remove_object_arguments* >(object);
  (void)_this;
}
void remove_object_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void remove_object_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void remove_object_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.remove_object_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* remove_object_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.chain.object_space space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* remove_object_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.remove_object_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.chain.object_space space = 1;
  if (this->_internal_has_space()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::space(this), target, stream);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.remove_object_arguments)
  return target;
}

size_t remove_object_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.remove_object_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .koinos.chain.object_space space = 1;
  if (this->_internal_has_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *space_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData remove_object_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    remove_object_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*remove_object_arguments::GetClassData() const { return &_class_data_; }

void remove_object_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<remove_object_arguments *>(to)->MergeFrom(
      static_cast<const remove_object_arguments &>(from));
}


void remove_object_arguments::MergeFrom(const remove_object_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.remove_object_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_space()) {
    _internal_mutable_space()->::koinos::chain::object_space::MergeFrom(from._internal_space());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void remove_object_arguments::CopyFrom(const remove_object_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.remove_object_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool remove_object_arguments::IsInitialized() const {
  return true;
}

void remove_object_arguments::InternalSwap(remove_object_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  swap(space_, other->space_);
}

::PROTOBUF_NAMESPACE_ID::Metadata remove_object_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[22]);
}

// ===================================================================

class remove_object_result::_Internal {
 public:
};

remove_object_result::remove_object_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.remove_object_result)
}
remove_object_result::remove_object_result(const remove_object_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.remove_object_result)
}

inline void remove_object_result::SharedCtor() {
}

remove_object_result::~remove_object_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.remove_object_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void remove_object_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void remove_object_result::ArenaDtor(void* object) {
  remove_object_result* _this = reinterpret_cast< remove_object_result* >(object);
  (void)_this;
}
void remove_object_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void remove_object_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void remove_object_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.remove_object_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* remove_object_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* remove_object_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.remove_object_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.remove_object_result)
  return target;
}

size_t remove_object_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.remove_object_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData remove_object_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    remove_object_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*remove_object_result::GetClassData() const { return &_class_data_; }

void remove_object_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<remove_object_result *>(to)->MergeFrom(
      static_cast<const remove_object_result &>(from));
}


void remove_object_result::MergeFrom(const remove_object_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.remove_object_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void remove_object_result::CopyFrom(const remove_object_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.remove_object_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool remove_object_result::IsInitialized() const {
  return true;
}

void remove_object_result::InternalSwap(remove_object_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata remove_object_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[23]);
}

// ===================================================================

class get_object_arguments::_Internal {
 public:
  static const ::koinos::chain::object_space& space(const get_object_arguments* msg);
};

const ::koinos::chain::object_space&
get_object_arguments::_Internal::space(const get_object_arguments* msg) {
  return *msg->space_;
}
void get_object_arguments::clear_space() {
  if (GetArenaForAllocation() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
}
get_object_arguments::get_object_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_object_arguments)
}
get_object_arguments::get_object_arguments(const get_object_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_space()) {
    space_ = new ::koinos::chain::object_space(*from.space_);
  } else {
    space_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_object_arguments)
}

inline void get_object_arguments::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
space_ = nullptr;
}

get_object_arguments::~get_object_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_object_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_object_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete space_;
}

void get_object_arguments::ArenaDtor(void* object) {
  get_object_arguments* _this = reinterpret_cast< get_object_arguments* >(object);
  (void)_this;
}
void get_object_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_object_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_object_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_object_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_object_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.chain.object_space space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_object_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_object_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.chain.object_space space = 1;
  if (this->_internal_has_space()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::space(this), target, stream);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_object_arguments)
  return target;
}

size_t get_object_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_object_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .koinos.chain.object_space space = 1;
  if (this->_internal_has_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *space_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_object_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_object_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_object_arguments::GetClassData() const { return &_class_data_; }

void get_object_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_object_arguments *>(to)->MergeFrom(
      static_cast<const get_object_arguments &>(from));
}


void get_object_arguments::MergeFrom(const get_object_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_object_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_space()) {
    _internal_mutable_space()->::koinos::chain::object_space::MergeFrom(from._internal_space());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_object_arguments::CopyFrom(const get_object_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_object_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_object_arguments::IsInitialized() const {
  return true;
}

void get_object_arguments::InternalSwap(get_object_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  swap(space_, other->space_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_object_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[24]);
}

// ===================================================================

class database_object::_Internal {
 public:
};

database_object::database_object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.database_object)
}
database_object::database_object(const database_object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  exists_ = from.exists_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.database_object)
}

inline void database_object::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exists_ = false;
}

database_object::~database_object() {
  // @@protoc_insertion_point(destructor:koinos.chain.database_object)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void database_object::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void database_object::ArenaDtor(void* object) {
  database_object* _this = reinterpret_cast< database_object* >(object);
  (void)_this;
}
void database_object::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void database_object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void database_object::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.database_object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  key_.ClearToEmpty();
  exists_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* database_object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool exists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* database_object::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.database_object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool exists = 1;
  if (this->_internal_exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_exists(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.database_object)
  return target;
}

size_t database_object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.database_object)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bool exists = 1;
  if (this->_internal_exists() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData database_object::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    database_object::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*database_object::GetClassData() const { return &_class_data_; }

void database_object::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<database_object *>(to)->MergeFrom(
      static_cast<const database_object &>(from));
}


void database_object::MergeFrom(const database_object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.database_object)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_exists() != 0) {
    _internal_set_exists(from._internal_exists());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void database_object::CopyFrom(const database_object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.database_object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool database_object::IsInitialized() const {
  return true;
}

void database_object::InternalSwap(database_object* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  swap(exists_, other->exists_);
}

::PROTOBUF_NAMESPACE_ID::Metadata database_object::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[25]);
}

// ===================================================================

class get_object_result::_Internal {
 public:
  static const ::koinos::chain::database_object& value(const get_object_result* msg);
};

const ::koinos::chain::database_object&
get_object_result::_Internal::value(const get_object_result* msg) {
  return *msg->value_;
}
get_object_result::get_object_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_object_result)
}
get_object_result::get_object_result(const get_object_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::koinos::chain::database_object(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_object_result)
}

inline void get_object_result::SharedCtor() {
value_ = nullptr;
}

get_object_result::~get_object_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_object_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_object_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void get_object_result::ArenaDtor(void* object) {
  get_object_result* _this = reinterpret_cast< get_object_result* >(object);
  (void)_this;
}
void get_object_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_object_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_object_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_object_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_object_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.chain.database_object value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_object_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_object_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.chain.database_object value = 1;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_object_result)
  return target;
}

size_t get_object_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_object_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.chain.database_object value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_object_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_object_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_object_result::GetClassData() const { return &_class_data_; }

void get_object_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_object_result *>(to)->MergeFrom(
      static_cast<const get_object_result &>(from));
}


void get_object_result::MergeFrom(const get_object_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_object_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::koinos::chain::database_object::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_object_result::CopyFrom(const get_object_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_object_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_object_result::IsInitialized() const {
  return true;
}

void get_object_result::InternalSwap(get_object_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_object_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[26]);
}

// ===================================================================

class get_next_object_arguments::_Internal {
 public:
  static const ::koinos::chain::object_space& space(const get_next_object_arguments* msg);
};

const ::koinos::chain::object_space&
get_next_object_arguments::_Internal::space(const get_next_object_arguments* msg) {
  return *msg->space_;
}
void get_next_object_arguments::clear_space() {
  if (GetArenaForAllocation() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
}
get_next_object_arguments::get_next_object_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_next_object_arguments)
}
get_next_object_arguments::get_next_object_arguments(const get_next_object_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_space()) {
    space_ = new ::koinos::chain::object_space(*from.space_);
  } else {
    space_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_next_object_arguments)
}

inline void get_next_object_arguments::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
space_ = nullptr;
}

get_next_object_arguments::~get_next_object_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_next_object_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_next_object_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete space_;
}

void get_next_object_arguments::ArenaDtor(void* object) {
  get_next_object_arguments* _this = reinterpret_cast< get_next_object_arguments* >(object);
  (void)_this;
}
void get_next_object_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_next_object_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_next_object_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_next_object_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_next_object_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.chain.object_space space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_next_object_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_next_object_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.chain.object_space space = 1;
  if (this->_internal_has_space()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::space(this), target, stream);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_next_object_arguments)
  return target;
}

size_t get_next_object_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_next_object_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .koinos.chain.object_space space = 1;
  if (this->_internal_has_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *space_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_next_object_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_next_object_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_next_object_arguments::GetClassData() const { return &_class_data_; }

void get_next_object_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_next_object_arguments *>(to)->MergeFrom(
      static_cast<const get_next_object_arguments &>(from));
}


void get_next_object_arguments::MergeFrom(const get_next_object_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_next_object_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_space()) {
    _internal_mutable_space()->::koinos::chain::object_space::MergeFrom(from._internal_space());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_next_object_arguments::CopyFrom(const get_next_object_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_next_object_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_next_object_arguments::IsInitialized() const {
  return true;
}

void get_next_object_arguments::InternalSwap(get_next_object_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  swap(space_, other->space_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_next_object_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[27]);
}

// ===================================================================

class get_next_object_result::_Internal {
 public:
  static const ::koinos::chain::database_object& value(const get_next_object_result* msg);
};

const ::koinos::chain::database_object&
get_next_object_result::_Internal::value(const get_next_object_result* msg) {
  return *msg->value_;
}
get_next_object_result::get_next_object_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_next_object_result)
}
get_next_object_result::get_next_object_result(const get_next_object_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::koinos::chain::database_object(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_next_object_result)
}

inline void get_next_object_result::SharedCtor() {
value_ = nullptr;
}

get_next_object_result::~get_next_object_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_next_object_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_next_object_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void get_next_object_result::ArenaDtor(void* object) {
  get_next_object_result* _this = reinterpret_cast< get_next_object_result* >(object);
  (void)_this;
}
void get_next_object_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_next_object_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_next_object_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_next_object_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_next_object_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.chain.database_object value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_next_object_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_next_object_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.chain.database_object value = 1;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_next_object_result)
  return target;
}

size_t get_next_object_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_next_object_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.chain.database_object value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_next_object_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_next_object_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_next_object_result::GetClassData() const { return &_class_data_; }

void get_next_object_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_next_object_result *>(to)->MergeFrom(
      static_cast<const get_next_object_result &>(from));
}


void get_next_object_result::MergeFrom(const get_next_object_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_next_object_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::koinos::chain::database_object::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_next_object_result::CopyFrom(const get_next_object_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_next_object_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_next_object_result::IsInitialized() const {
  return true;
}

void get_next_object_result::InternalSwap(get_next_object_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_next_object_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[28]);
}

// ===================================================================

class get_prev_object_arguments::_Internal {
 public:
  static const ::koinos::chain::object_space& space(const get_prev_object_arguments* msg);
};

const ::koinos::chain::object_space&
get_prev_object_arguments::_Internal::space(const get_prev_object_arguments* msg) {
  return *msg->space_;
}
void get_prev_object_arguments::clear_space() {
  if (GetArenaForAllocation() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
}
get_prev_object_arguments::get_prev_object_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_prev_object_arguments)
}
get_prev_object_arguments::get_prev_object_arguments(const get_prev_object_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_space()) {
    space_ = new ::koinos::chain::object_space(*from.space_);
  } else {
    space_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_prev_object_arguments)
}

inline void get_prev_object_arguments::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
space_ = nullptr;
}

get_prev_object_arguments::~get_prev_object_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_prev_object_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_prev_object_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete space_;
}

void get_prev_object_arguments::ArenaDtor(void* object) {
  get_prev_object_arguments* _this = reinterpret_cast< get_prev_object_arguments* >(object);
  (void)_this;
}
void get_prev_object_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_prev_object_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_prev_object_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_prev_object_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && space_ != nullptr) {
    delete space_;
  }
  space_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_prev_object_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.chain.object_space space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_prev_object_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_prev_object_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.chain.object_space space = 1;
  if (this->_internal_has_space()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::space(this), target, stream);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_prev_object_arguments)
  return target;
}

size_t get_prev_object_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_prev_object_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // .koinos.chain.object_space space = 1;
  if (this->_internal_has_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *space_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_prev_object_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_prev_object_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_prev_object_arguments::GetClassData() const { return &_class_data_; }

void get_prev_object_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_prev_object_arguments *>(to)->MergeFrom(
      static_cast<const get_prev_object_arguments &>(from));
}


void get_prev_object_arguments::MergeFrom(const get_prev_object_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_prev_object_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_space()) {
    _internal_mutable_space()->::koinos::chain::object_space::MergeFrom(from._internal_space());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_prev_object_arguments::CopyFrom(const get_prev_object_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_prev_object_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_prev_object_arguments::IsInitialized() const {
  return true;
}

void get_prev_object_arguments::InternalSwap(get_prev_object_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  swap(space_, other->space_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_prev_object_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[29]);
}

// ===================================================================

class get_prev_object_result::_Internal {
 public:
  static const ::koinos::chain::database_object& value(const get_prev_object_result* msg);
};

const ::koinos::chain::database_object&
get_prev_object_result::_Internal::value(const get_prev_object_result* msg) {
  return *msg->value_;
}
get_prev_object_result::get_prev_object_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_prev_object_result)
}
get_prev_object_result::get_prev_object_result(const get_prev_object_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::koinos::chain::database_object(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_prev_object_result)
}

inline void get_prev_object_result::SharedCtor() {
value_ = nullptr;
}

get_prev_object_result::~get_prev_object_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_prev_object_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_prev_object_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void get_prev_object_result::ArenaDtor(void* object) {
  get_prev_object_result* _this = reinterpret_cast< get_prev_object_result* >(object);
  (void)_this;
}
void get_prev_object_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_prev_object_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_prev_object_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_prev_object_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_prev_object_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.chain.database_object value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_prev_object_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_prev_object_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.chain.database_object value = 1;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_prev_object_result)
  return target;
}

size_t get_prev_object_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_prev_object_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.chain.database_object value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_prev_object_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_prev_object_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_prev_object_result::GetClassData() const { return &_class_data_; }

void get_prev_object_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_prev_object_result *>(to)->MergeFrom(
      static_cast<const get_prev_object_result &>(from));
}


void get_prev_object_result::MergeFrom(const get_prev_object_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_prev_object_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::koinos::chain::database_object::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_prev_object_result::CopyFrom(const get_prev_object_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_prev_object_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_prev_object_result::IsInitialized() const {
  return true;
}

void get_prev_object_result::InternalSwap(get_prev_object_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_prev_object_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[30]);
}

// ===================================================================

class call_contract_arguments::_Internal {
 public:
};

call_contract_arguments::call_contract_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.call_contract_arguments)
}
call_contract_arguments::call_contract_arguments(const call_contract_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_id(), 
      GetArenaForAllocation());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArenaForAllocation());
  }
  entry_point_ = from.entry_point_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.call_contract_arguments)
}

inline void call_contract_arguments::SharedCtor() {
contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
entry_point_ = 0u;
}

call_contract_arguments::~call_contract_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.call_contract_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void call_contract_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void call_contract_arguments::ArenaDtor(void* object) {
  call_contract_arguments* _this = reinterpret_cast< call_contract_arguments* >(object);
  (void)_this;
}
void call_contract_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void call_contract_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void call_contract_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.call_contract_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty();
  args_.ClearToEmpty();
  entry_point_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* call_contract_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 entry_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entry_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* call_contract_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.call_contract_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // uint32 entry_point = 2;
  if (this->_internal_entry_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entry_point(), target);
  }

  // bytes args = 3;
  if (!this->_internal_args().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.call_contract_arguments)
  return target;
}

size_t call_contract_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.call_contract_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_id());
  }

  // bytes args = 3;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // uint32 entry_point = 2;
  if (this->_internal_entry_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entry_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData call_contract_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    call_contract_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*call_contract_arguments::GetClassData() const { return &_class_data_; }

void call_contract_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<call_contract_arguments *>(to)->MergeFrom(
      static_cast<const call_contract_arguments &>(from));
}


void call_contract_arguments::MergeFrom(const call_contract_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.call_contract_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract_id().empty()) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (!from._internal_args().empty()) {
    _internal_set_args(from._internal_args());
  }
  if (from._internal_entry_point() != 0) {
    _internal_set_entry_point(from._internal_entry_point());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void call_contract_arguments::CopyFrom(const call_contract_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.call_contract_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool call_contract_arguments::IsInitialized() const {
  return true;
}

void call_contract_arguments::InternalSwap(call_contract_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contract_id_, GetArenaForAllocation(),
      &other->contract_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &args_, GetArenaForAllocation(),
      &other->args_, other->GetArenaForAllocation()
  );
  swap(entry_point_, other->entry_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata call_contract_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[31]);
}

// ===================================================================

class call_contract_result::_Internal {
 public:
};

call_contract_result::call_contract_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.call_contract_result)
}
call_contract_result::call_contract_result(const call_contract_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.call_contract_result)
}

inline void call_contract_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

call_contract_result::~call_contract_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.call_contract_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void call_contract_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void call_contract_result::ArenaDtor(void* object) {
  call_contract_result* _this = reinterpret_cast< call_contract_result* >(object);
  (void)_this;
}
void call_contract_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void call_contract_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void call_contract_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.call_contract_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* call_contract_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* call_contract_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.call_contract_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.call_contract_result)
  return target;
}

size_t call_contract_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.call_contract_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData call_contract_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    call_contract_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*call_contract_result::GetClassData() const { return &_class_data_; }

void call_contract_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<call_contract_result *>(to)->MergeFrom(
      static_cast<const call_contract_result &>(from));
}


void call_contract_result::MergeFrom(const call_contract_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.call_contract_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void call_contract_result::CopyFrom(const call_contract_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.call_contract_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool call_contract_result::IsInitialized() const {
  return true;
}

void call_contract_result::InternalSwap(call_contract_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata call_contract_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[32]);
}

// ===================================================================

class get_entry_point_arguments::_Internal {
 public:
};

get_entry_point_arguments::get_entry_point_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_entry_point_arguments)
}
get_entry_point_arguments::get_entry_point_arguments(const get_entry_point_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_entry_point_arguments)
}

inline void get_entry_point_arguments::SharedCtor() {
}

get_entry_point_arguments::~get_entry_point_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_entry_point_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_entry_point_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_entry_point_arguments::ArenaDtor(void* object) {
  get_entry_point_arguments* _this = reinterpret_cast< get_entry_point_arguments* >(object);
  (void)_this;
}
void get_entry_point_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_entry_point_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_entry_point_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_entry_point_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_entry_point_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_entry_point_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_entry_point_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_entry_point_arguments)
  return target;
}

size_t get_entry_point_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_entry_point_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_entry_point_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_entry_point_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_entry_point_arguments::GetClassData() const { return &_class_data_; }

void get_entry_point_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_entry_point_arguments *>(to)->MergeFrom(
      static_cast<const get_entry_point_arguments &>(from));
}


void get_entry_point_arguments::MergeFrom(const get_entry_point_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_entry_point_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_entry_point_arguments::CopyFrom(const get_entry_point_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_entry_point_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_entry_point_arguments::IsInitialized() const {
  return true;
}

void get_entry_point_arguments::InternalSwap(get_entry_point_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_entry_point_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[33]);
}

// ===================================================================

class get_entry_point_result::_Internal {
 public:
};

get_entry_point_result::get_entry_point_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_entry_point_result)
}
get_entry_point_result::get_entry_point_result(const get_entry_point_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_entry_point_result)
}

inline void get_entry_point_result::SharedCtor() {
value_ = 0u;
}

get_entry_point_result::~get_entry_point_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_entry_point_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_entry_point_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_entry_point_result::ArenaDtor(void* object) {
  get_entry_point_result* _this = reinterpret_cast< get_entry_point_result* >(object);
  (void)_this;
}
void get_entry_point_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_entry_point_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_entry_point_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_entry_point_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_entry_point_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_entry_point_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_entry_point_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_entry_point_result)
  return target;
}

size_t get_entry_point_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_entry_point_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_entry_point_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_entry_point_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_entry_point_result::GetClassData() const { return &_class_data_; }

void get_entry_point_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_entry_point_result *>(to)->MergeFrom(
      static_cast<const get_entry_point_result &>(from));
}


void get_entry_point_result::MergeFrom(const get_entry_point_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_entry_point_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_entry_point_result::CopyFrom(const get_entry_point_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_entry_point_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_entry_point_result::IsInitialized() const {
  return true;
}

void get_entry_point_result::InternalSwap(get_entry_point_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_entry_point_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[34]);
}

// ===================================================================

class get_contract_arguments_size_arguments::_Internal {
 public:
};

get_contract_arguments_size_arguments::get_contract_arguments_size_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_contract_arguments_size_arguments)
}
get_contract_arguments_size_arguments::get_contract_arguments_size_arguments(const get_contract_arguments_size_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_contract_arguments_size_arguments)
}

inline void get_contract_arguments_size_arguments::SharedCtor() {
}

get_contract_arguments_size_arguments::~get_contract_arguments_size_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_contract_arguments_size_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_contract_arguments_size_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_contract_arguments_size_arguments::ArenaDtor(void* object) {
  get_contract_arguments_size_arguments* _this = reinterpret_cast< get_contract_arguments_size_arguments* >(object);
  (void)_this;
}
void get_contract_arguments_size_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_arguments_size_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_contract_arguments_size_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_contract_arguments_size_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_arguments_size_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_arguments_size_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_contract_arguments_size_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_contract_arguments_size_arguments)
  return target;
}

size_t get_contract_arguments_size_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_contract_arguments_size_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_contract_arguments_size_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_contract_arguments_size_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_contract_arguments_size_arguments::GetClassData() const { return &_class_data_; }

void get_contract_arguments_size_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_contract_arguments_size_arguments *>(to)->MergeFrom(
      static_cast<const get_contract_arguments_size_arguments &>(from));
}


void get_contract_arguments_size_arguments::MergeFrom(const get_contract_arguments_size_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_contract_arguments_size_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_contract_arguments_size_arguments::CopyFrom(const get_contract_arguments_size_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_contract_arguments_size_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_arguments_size_arguments::IsInitialized() const {
  return true;
}

void get_contract_arguments_size_arguments::InternalSwap(get_contract_arguments_size_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_arguments_size_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[35]);
}

// ===================================================================

class get_contract_arguments_size_result::_Internal {
 public:
};

get_contract_arguments_size_result::get_contract_arguments_size_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_contract_arguments_size_result)
}
get_contract_arguments_size_result::get_contract_arguments_size_result(const get_contract_arguments_size_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_contract_arguments_size_result)
}

inline void get_contract_arguments_size_result::SharedCtor() {
value_ = 0u;
}

get_contract_arguments_size_result::~get_contract_arguments_size_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_contract_arguments_size_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_contract_arguments_size_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_contract_arguments_size_result::ArenaDtor(void* object) {
  get_contract_arguments_size_result* _this = reinterpret_cast< get_contract_arguments_size_result* >(object);
  (void)_this;
}
void get_contract_arguments_size_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_arguments_size_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_contract_arguments_size_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_contract_arguments_size_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_arguments_size_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_arguments_size_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_contract_arguments_size_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_contract_arguments_size_result)
  return target;
}

size_t get_contract_arguments_size_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_contract_arguments_size_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_contract_arguments_size_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_contract_arguments_size_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_contract_arguments_size_result::GetClassData() const { return &_class_data_; }

void get_contract_arguments_size_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_contract_arguments_size_result *>(to)->MergeFrom(
      static_cast<const get_contract_arguments_size_result &>(from));
}


void get_contract_arguments_size_result::MergeFrom(const get_contract_arguments_size_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_contract_arguments_size_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_contract_arguments_size_result::CopyFrom(const get_contract_arguments_size_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_contract_arguments_size_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_arguments_size_result::IsInitialized() const {
  return true;
}

void get_contract_arguments_size_result::InternalSwap(get_contract_arguments_size_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_arguments_size_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[36]);
}

// ===================================================================

class get_contract_arguments_arguments::_Internal {
 public:
};

get_contract_arguments_arguments::get_contract_arguments_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_contract_arguments_arguments)
}
get_contract_arguments_arguments::get_contract_arguments_arguments(const get_contract_arguments_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_contract_arguments_arguments)
}

inline void get_contract_arguments_arguments::SharedCtor() {
}

get_contract_arguments_arguments::~get_contract_arguments_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_contract_arguments_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_contract_arguments_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_contract_arguments_arguments::ArenaDtor(void* object) {
  get_contract_arguments_arguments* _this = reinterpret_cast< get_contract_arguments_arguments* >(object);
  (void)_this;
}
void get_contract_arguments_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_arguments_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_contract_arguments_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_contract_arguments_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_arguments_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_arguments_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_contract_arguments_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_contract_arguments_arguments)
  return target;
}

size_t get_contract_arguments_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_contract_arguments_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_contract_arguments_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_contract_arguments_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_contract_arguments_arguments::GetClassData() const { return &_class_data_; }

void get_contract_arguments_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_contract_arguments_arguments *>(to)->MergeFrom(
      static_cast<const get_contract_arguments_arguments &>(from));
}


void get_contract_arguments_arguments::MergeFrom(const get_contract_arguments_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_contract_arguments_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_contract_arguments_arguments::CopyFrom(const get_contract_arguments_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_contract_arguments_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_arguments_arguments::IsInitialized() const {
  return true;
}

void get_contract_arguments_arguments::InternalSwap(get_contract_arguments_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_arguments_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[37]);
}

// ===================================================================

class get_contract_arguments_result::_Internal {
 public:
};

get_contract_arguments_result::get_contract_arguments_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_contract_arguments_result)
}
get_contract_arguments_result::get_contract_arguments_result(const get_contract_arguments_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_contract_arguments_result)
}

inline void get_contract_arguments_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_contract_arguments_result::~get_contract_arguments_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_contract_arguments_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_contract_arguments_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_contract_arguments_result::ArenaDtor(void* object) {
  get_contract_arguments_result* _this = reinterpret_cast< get_contract_arguments_result* >(object);
  (void)_this;
}
void get_contract_arguments_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_arguments_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_contract_arguments_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_contract_arguments_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_arguments_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_arguments_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_contract_arguments_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_contract_arguments_result)
  return target;
}

size_t get_contract_arguments_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_contract_arguments_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_contract_arguments_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_contract_arguments_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_contract_arguments_result::GetClassData() const { return &_class_data_; }

void get_contract_arguments_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_contract_arguments_result *>(to)->MergeFrom(
      static_cast<const get_contract_arguments_result &>(from));
}


void get_contract_arguments_result::MergeFrom(const get_contract_arguments_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_contract_arguments_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_contract_arguments_result::CopyFrom(const get_contract_arguments_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_contract_arguments_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_arguments_result::IsInitialized() const {
  return true;
}

void get_contract_arguments_result::InternalSwap(get_contract_arguments_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_arguments_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[38]);
}

// ===================================================================

class set_contract_result_arguments::_Internal {
 public:
};

set_contract_result_arguments::set_contract_result_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.set_contract_result_arguments)
}
set_contract_result_arguments::set_contract_result_arguments(const set_contract_result_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.set_contract_result_arguments)
}

inline void set_contract_result_arguments::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

set_contract_result_arguments::~set_contract_result_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.set_contract_result_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_contract_result_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void set_contract_result_arguments::ArenaDtor(void* object) {
  set_contract_result_arguments* _this = reinterpret_cast< set_contract_result_arguments* >(object);
  (void)_this;
}
void set_contract_result_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_contract_result_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_contract_result_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.set_contract_result_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_contract_result_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_contract_result_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.set_contract_result_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.set_contract_result_arguments)
  return target;
}

size_t set_contract_result_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.set_contract_result_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_contract_result_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_contract_result_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_contract_result_arguments::GetClassData() const { return &_class_data_; }

void set_contract_result_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_contract_result_arguments *>(to)->MergeFrom(
      static_cast<const set_contract_result_arguments &>(from));
}


void set_contract_result_arguments::MergeFrom(const set_contract_result_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.set_contract_result_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_contract_result_arguments::CopyFrom(const set_contract_result_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.set_contract_result_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_contract_result_arguments::IsInitialized() const {
  return true;
}

void set_contract_result_arguments::InternalSwap(set_contract_result_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata set_contract_result_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[39]);
}

// ===================================================================

class set_contract_result_result::_Internal {
 public:
};

set_contract_result_result::set_contract_result_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.set_contract_result_result)
}
set_contract_result_result::set_contract_result_result(const set_contract_result_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.set_contract_result_result)
}

inline void set_contract_result_result::SharedCtor() {
}

set_contract_result_result::~set_contract_result_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.set_contract_result_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_contract_result_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void set_contract_result_result::ArenaDtor(void* object) {
  set_contract_result_result* _this = reinterpret_cast< set_contract_result_result* >(object);
  (void)_this;
}
void set_contract_result_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_contract_result_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_contract_result_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.set_contract_result_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_contract_result_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_contract_result_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.set_contract_result_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.set_contract_result_result)
  return target;
}

size_t set_contract_result_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.set_contract_result_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_contract_result_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_contract_result_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_contract_result_result::GetClassData() const { return &_class_data_; }

void set_contract_result_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_contract_result_result *>(to)->MergeFrom(
      static_cast<const set_contract_result_result &>(from));
}


void set_contract_result_result::MergeFrom(const set_contract_result_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.set_contract_result_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_contract_result_result::CopyFrom(const set_contract_result_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.set_contract_result_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_contract_result_result::IsInitialized() const {
  return true;
}

void set_contract_result_result::InternalSwap(set_contract_result_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata set_contract_result_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[40]);
}

// ===================================================================

class exit_contract_arguments::_Internal {
 public:
};

exit_contract_arguments::exit_contract_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.exit_contract_arguments)
}
exit_contract_arguments::exit_contract_arguments(const exit_contract_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exit_code_ = from.exit_code_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.exit_contract_arguments)
}

inline void exit_contract_arguments::SharedCtor() {
exit_code_ = 0u;
}

exit_contract_arguments::~exit_contract_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.exit_contract_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void exit_contract_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void exit_contract_arguments::ArenaDtor(void* object) {
  exit_contract_arguments* _this = reinterpret_cast< exit_contract_arguments* >(object);
  (void)_this;
}
void exit_contract_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void exit_contract_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void exit_contract_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.exit_contract_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exit_code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* exit_contract_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 exit_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exit_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* exit_contract_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.exit_contract_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 exit_code = 1;
  if (this->_internal_exit_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_exit_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.exit_contract_arguments)
  return target;
}

size_t exit_contract_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.exit_contract_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 exit_code = 1;
  if (this->_internal_exit_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exit_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData exit_contract_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    exit_contract_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*exit_contract_arguments::GetClassData() const { return &_class_data_; }

void exit_contract_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<exit_contract_arguments *>(to)->MergeFrom(
      static_cast<const exit_contract_arguments &>(from));
}


void exit_contract_arguments::MergeFrom(const exit_contract_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.exit_contract_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_exit_code() != 0) {
    _internal_set_exit_code(from._internal_exit_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void exit_contract_arguments::CopyFrom(const exit_contract_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.exit_contract_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_contract_arguments::IsInitialized() const {
  return true;
}

void exit_contract_arguments::InternalSwap(exit_contract_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(exit_code_, other->exit_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata exit_contract_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[41]);
}

// ===================================================================

class exit_contract_result::_Internal {
 public:
};

exit_contract_result::exit_contract_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.exit_contract_result)
}
exit_contract_result::exit_contract_result(const exit_contract_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.exit_contract_result)
}

inline void exit_contract_result::SharedCtor() {
}

exit_contract_result::~exit_contract_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.exit_contract_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void exit_contract_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void exit_contract_result::ArenaDtor(void* object) {
  exit_contract_result* _this = reinterpret_cast< exit_contract_result* >(object);
  (void)_this;
}
void exit_contract_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void exit_contract_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void exit_contract_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.exit_contract_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* exit_contract_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* exit_contract_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.exit_contract_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.exit_contract_result)
  return target;
}

size_t exit_contract_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.exit_contract_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData exit_contract_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    exit_contract_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*exit_contract_result::GetClassData() const { return &_class_data_; }

void exit_contract_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<exit_contract_result *>(to)->MergeFrom(
      static_cast<const exit_contract_result &>(from));
}


void exit_contract_result::MergeFrom(const exit_contract_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.exit_contract_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void exit_contract_result::CopyFrom(const exit_contract_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.exit_contract_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_contract_result::IsInitialized() const {
  return true;
}

void exit_contract_result::InternalSwap(exit_contract_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata exit_contract_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[42]);
}

// ===================================================================

class get_head_info_arguments::_Internal {
 public:
};

get_head_info_arguments::get_head_info_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_head_info_arguments)
}
get_head_info_arguments::get_head_info_arguments(const get_head_info_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_head_info_arguments)
}

inline void get_head_info_arguments::SharedCtor() {
}

get_head_info_arguments::~get_head_info_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_head_info_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_head_info_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_head_info_arguments::ArenaDtor(void* object) {
  get_head_info_arguments* _this = reinterpret_cast< get_head_info_arguments* >(object);
  (void)_this;
}
void get_head_info_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_head_info_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_head_info_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_head_info_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_head_info_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_head_info_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_head_info_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_head_info_arguments)
  return target;
}

size_t get_head_info_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_head_info_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_head_info_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_head_info_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_head_info_arguments::GetClassData() const { return &_class_data_; }

void get_head_info_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_head_info_arguments *>(to)->MergeFrom(
      static_cast<const get_head_info_arguments &>(from));
}


void get_head_info_arguments::MergeFrom(const get_head_info_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_head_info_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_head_info_arguments::CopyFrom(const get_head_info_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_head_info_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_head_info_arguments::IsInitialized() const {
  return true;
}

void get_head_info_arguments::InternalSwap(get_head_info_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_head_info_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[43]);
}

// ===================================================================

class get_head_info_result::_Internal {
 public:
  static const ::koinos::chain::head_info& value(const get_head_info_result* msg);
};

const ::koinos::chain::head_info&
get_head_info_result::_Internal::value(const get_head_info_result* msg) {
  return *msg->value_;
}
void get_head_info_result::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
get_head_info_result::get_head_info_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_head_info_result)
}
get_head_info_result::get_head_info_result(const get_head_info_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::koinos::chain::head_info(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_head_info_result)
}

inline void get_head_info_result::SharedCtor() {
value_ = nullptr;
}

get_head_info_result::~get_head_info_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_head_info_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_head_info_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void get_head_info_result::ArenaDtor(void* object) {
  get_head_info_result* _this = reinterpret_cast< get_head_info_result* >(object);
  (void)_this;
}
void get_head_info_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_head_info_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_head_info_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_head_info_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_head_info_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.chain.head_info value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_head_info_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_head_info_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.chain.head_info value = 1;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_head_info_result)
  return target;
}

size_t get_head_info_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_head_info_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.chain.head_info value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_head_info_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_head_info_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_head_info_result::GetClassData() const { return &_class_data_; }

void get_head_info_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_head_info_result *>(to)->MergeFrom(
      static_cast<const get_head_info_result &>(from));
}


void get_head_info_result::MergeFrom(const get_head_info_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_head_info_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::koinos::chain::head_info::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_head_info_result::CopyFrom(const get_head_info_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_head_info_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_head_info_result::IsInitialized() const {
  return true;
}

void get_head_info_result::InternalSwap(get_head_info_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_head_info_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[44]);
}

// ===================================================================

class hash_arguments::_Internal {
 public:
};

hash_arguments::hash_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.hash_arguments)
}
hash_arguments::hash_arguments(const hash_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  obj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_obj().empty()) {
    obj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_obj(), 
      GetArenaForAllocation());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&code_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:koinos.chain.hash_arguments)
}

inline void hash_arguments::SharedCtor() {
obj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&code_)) + sizeof(size_));
}

hash_arguments::~hash_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.hash_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void hash_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  obj_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void hash_arguments::ArenaDtor(void* object) {
  hash_arguments* _this = reinterpret_cast< hash_arguments* >(object);
  (void)_this;
}
void hash_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hash_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void hash_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.hash_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obj_.ClearToEmpty();
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&code_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hash_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 code = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes obj = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_obj();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hash_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.hash_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 code = 1 [jstype = JS_STRING];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_code(), target);
  }

  // bytes obj = 2;
  if (!this->_internal_obj().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_obj(), target);
  }

  // uint64 size = 3 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.hash_arguments)
  return target;
}

size_t hash_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.hash_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes obj = 2;
  if (!this->_internal_obj().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_obj());
  }

  // uint64 code = 1 [jstype = JS_STRING];
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_code());
  }

  // uint64 size = 3 [jstype = JS_STRING];
  if (this->_internal_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData hash_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    hash_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*hash_arguments::GetClassData() const { return &_class_data_; }

void hash_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<hash_arguments *>(to)->MergeFrom(
      static_cast<const hash_arguments &>(from));
}


void hash_arguments::MergeFrom(const hash_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.hash_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_obj().empty()) {
    _internal_set_obj(from._internal_obj());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void hash_arguments::CopyFrom(const hash_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.hash_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hash_arguments::IsInitialized() const {
  return true;
}

void hash_arguments::InternalSwap(hash_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &obj_, GetArenaForAllocation(),
      &other->obj_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(hash_arguments, size_)
      + sizeof(hash_arguments::size_)
      - PROTOBUF_FIELD_OFFSET(hash_arguments, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata hash_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[45]);
}

// ===================================================================

class hash_result::_Internal {
 public:
};

hash_result::hash_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.hash_result)
}
hash_result::hash_result(const hash_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.hash_result)
}

inline void hash_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

hash_result::~hash_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.hash_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void hash_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void hash_result::ArenaDtor(void* object) {
  hash_result* _this = reinterpret_cast< hash_result* >(object);
  (void)_this;
}
void hash_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hash_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void hash_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.hash_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hash_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hash_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.hash_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.hash_result)
  return target;
}

size_t hash_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.hash_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData hash_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    hash_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*hash_result::GetClassData() const { return &_class_data_; }

void hash_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<hash_result *>(to)->MergeFrom(
      static_cast<const hash_result &>(from));
}


void hash_result::MergeFrom(const hash_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.hash_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void hash_result::CopyFrom(const hash_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.hash_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hash_result::IsInitialized() const {
  return true;
}

void hash_result::InternalSwap(hash_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata hash_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[46]);
}

// ===================================================================

class recover_public_key_arguments::_Internal {
 public:
};

recover_public_key_arguments::recover_public_key_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.recover_public_key_arguments)
}
recover_public_key_arguments::recover_public_key_arguments(const recover_public_key_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature_data().empty()) {
    signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature_data(), 
      GetArenaForAllocation());
  }
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_digest().empty()) {
    digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digest(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.recover_public_key_arguments)
}

inline void recover_public_key_arguments::SharedCtor() {
signature_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

recover_public_key_arguments::~recover_public_key_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.recover_public_key_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void recover_public_key_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void recover_public_key_arguments::ArenaDtor(void* object) {
  recover_public_key_arguments* _this = reinterpret_cast< recover_public_key_arguments* >(object);
  (void)_this;
}
void recover_public_key_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recover_public_key_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void recover_public_key_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.recover_public_key_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_data_.ClearToEmpty();
  digest_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recover_public_key_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signature_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signature_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes digest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* recover_public_key_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.recover_public_key_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature_data = 1;
  if (!this->_internal_signature_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature_data(), target);
  }

  // bytes digest = 2;
  if (!this->_internal_digest().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_digest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.recover_public_key_arguments)
  return target;
}

size_t recover_public_key_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.recover_public_key_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature_data = 1;
  if (!this->_internal_signature_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature_data());
  }

  // bytes digest = 2;
  if (!this->_internal_digest().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData recover_public_key_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    recover_public_key_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*recover_public_key_arguments::GetClassData() const { return &_class_data_; }

void recover_public_key_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<recover_public_key_arguments *>(to)->MergeFrom(
      static_cast<const recover_public_key_arguments &>(from));
}


void recover_public_key_arguments::MergeFrom(const recover_public_key_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.recover_public_key_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature_data().empty()) {
    _internal_set_signature_data(from._internal_signature_data());
  }
  if (!from._internal_digest().empty()) {
    _internal_set_digest(from._internal_digest());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void recover_public_key_arguments::CopyFrom(const recover_public_key_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.recover_public_key_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recover_public_key_arguments::IsInitialized() const {
  return true;
}

void recover_public_key_arguments::InternalSwap(recover_public_key_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_data_, GetArenaForAllocation(),
      &other->signature_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &digest_, GetArenaForAllocation(),
      &other->digest_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata recover_public_key_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[47]);
}

// ===================================================================

class recover_public_key_result::_Internal {
 public:
};

recover_public_key_result::recover_public_key_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.recover_public_key_result)
}
recover_public_key_result::recover_public_key_result(const recover_public_key_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.recover_public_key_result)
}

inline void recover_public_key_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

recover_public_key_result::~recover_public_key_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.recover_public_key_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void recover_public_key_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void recover_public_key_result::ArenaDtor(void* object) {
  recover_public_key_result* _this = reinterpret_cast< recover_public_key_result* >(object);
  (void)_this;
}
void recover_public_key_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recover_public_key_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void recover_public_key_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.recover_public_key_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recover_public_key_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* recover_public_key_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.recover_public_key_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.recover_public_key_result)
  return target;
}

size_t recover_public_key_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.recover_public_key_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData recover_public_key_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    recover_public_key_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*recover_public_key_result::GetClassData() const { return &_class_data_; }

void recover_public_key_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<recover_public_key_result *>(to)->MergeFrom(
      static_cast<const recover_public_key_result &>(from));
}


void recover_public_key_result::MergeFrom(const recover_public_key_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.recover_public_key_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void recover_public_key_result::CopyFrom(const recover_public_key_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.recover_public_key_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recover_public_key_result::IsInitialized() const {
  return true;
}

void recover_public_key_result::InternalSwap(recover_public_key_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata recover_public_key_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[48]);
}

// ===================================================================

class get_transaction_payer_arguments::_Internal {
 public:
  static const ::koinos::protocol::transaction& transaction(const get_transaction_payer_arguments* msg);
};

const ::koinos::protocol::transaction&
get_transaction_payer_arguments::_Internal::transaction(const get_transaction_payer_arguments* msg) {
  return *msg->transaction_;
}
void get_transaction_payer_arguments::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
get_transaction_payer_arguments::get_transaction_payer_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_transaction_payer_arguments)
}
get_transaction_payer_arguments::get_transaction_payer_arguments(const get_transaction_payer_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::koinos::protocol::transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_transaction_payer_arguments)
}

inline void get_transaction_payer_arguments::SharedCtor() {
transaction_ = nullptr;
}

get_transaction_payer_arguments::~get_transaction_payer_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_transaction_payer_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_transaction_payer_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void get_transaction_payer_arguments::ArenaDtor(void* object) {
  get_transaction_payer_arguments* _this = reinterpret_cast< get_transaction_payer_arguments* >(object);
  (void)_this;
}
void get_transaction_payer_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transaction_payer_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_transaction_payer_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_transaction_payer_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transaction_payer_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transaction_payer_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_transaction_payer_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_transaction_payer_arguments)
  return target;
}

size_t get_transaction_payer_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_transaction_payer_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_transaction_payer_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_transaction_payer_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_transaction_payer_arguments::GetClassData() const { return &_class_data_; }

void get_transaction_payer_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_transaction_payer_arguments *>(to)->MergeFrom(
      static_cast<const get_transaction_payer_arguments &>(from));
}


void get_transaction_payer_arguments::MergeFrom(const get_transaction_payer_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_transaction_payer_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::koinos::protocol::transaction::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_transaction_payer_arguments::CopyFrom(const get_transaction_payer_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_transaction_payer_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transaction_payer_arguments::IsInitialized() const {
  return true;
}

void get_transaction_payer_arguments::InternalSwap(get_transaction_payer_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transaction_payer_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[49]);
}

// ===================================================================

class get_transaction_payer_result::_Internal {
 public:
};

get_transaction_payer_result::get_transaction_payer_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_transaction_payer_result)
}
get_transaction_payer_result::get_transaction_payer_result(const get_transaction_payer_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_transaction_payer_result)
}

inline void get_transaction_payer_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_transaction_payer_result::~get_transaction_payer_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_transaction_payer_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_transaction_payer_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_transaction_payer_result::ArenaDtor(void* object) {
  get_transaction_payer_result* _this = reinterpret_cast< get_transaction_payer_result* >(object);
  (void)_this;
}
void get_transaction_payer_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transaction_payer_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_transaction_payer_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_transaction_payer_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transaction_payer_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transaction_payer_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_transaction_payer_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_transaction_payer_result)
  return target;
}

size_t get_transaction_payer_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_transaction_payer_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_transaction_payer_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_transaction_payer_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_transaction_payer_result::GetClassData() const { return &_class_data_; }

void get_transaction_payer_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_transaction_payer_result *>(to)->MergeFrom(
      static_cast<const get_transaction_payer_result &>(from));
}


void get_transaction_payer_result::MergeFrom(const get_transaction_payer_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_transaction_payer_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_transaction_payer_result::CopyFrom(const get_transaction_payer_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_transaction_payer_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transaction_payer_result::IsInitialized() const {
  return true;
}

void get_transaction_payer_result::InternalSwap(get_transaction_payer_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transaction_payer_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[50]);
}

// ===================================================================

class get_account_rc_arguments::_Internal {
 public:
};

get_account_rc_arguments::get_account_rc_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_account_rc_arguments)
}
get_account_rc_arguments::get_account_rc_arguments(const get_account_rc_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_account_rc_arguments)
}

inline void get_account_rc_arguments::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_account_rc_arguments::~get_account_rc_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_account_rc_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_account_rc_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_account_rc_arguments::ArenaDtor(void* object) {
  get_account_rc_arguments* _this = reinterpret_cast< get_account_rc_arguments* >(object);
  (void)_this;
}
void get_account_rc_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_rc_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_account_rc_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_account_rc_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_rc_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_rc_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_account_rc_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_account_rc_arguments)
  return target;
}

size_t get_account_rc_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_account_rc_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_account_rc_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_account_rc_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_account_rc_arguments::GetClassData() const { return &_class_data_; }

void get_account_rc_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_account_rc_arguments *>(to)->MergeFrom(
      static_cast<const get_account_rc_arguments &>(from));
}


void get_account_rc_arguments::MergeFrom(const get_account_rc_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_account_rc_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_account_rc_arguments::CopyFrom(const get_account_rc_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_account_rc_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_rc_arguments::IsInitialized() const {
  return true;
}

void get_account_rc_arguments::InternalSwap(get_account_rc_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_rc_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[51]);
}

// ===================================================================

class get_account_rc_result::_Internal {
 public:
};

get_account_rc_result::get_account_rc_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_account_rc_result)
}
get_account_rc_result::get_account_rc_result(const get_account_rc_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_account_rc_result)
}

inline void get_account_rc_result::SharedCtor() {
value_ = uint64_t{0u};
}

get_account_rc_result::~get_account_rc_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_account_rc_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_account_rc_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_account_rc_result::ArenaDtor(void* object) {
  get_account_rc_result* _this = reinterpret_cast< get_account_rc_result* >(object);
  (void)_this;
}
void get_account_rc_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_rc_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_account_rc_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_account_rc_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_rc_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_rc_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_account_rc_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_account_rc_result)
  return target;
}

size_t get_account_rc_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_account_rc_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_account_rc_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_account_rc_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_account_rc_result::GetClassData() const { return &_class_data_; }

void get_account_rc_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_account_rc_result *>(to)->MergeFrom(
      static_cast<const get_account_rc_result &>(from));
}


void get_account_rc_result::MergeFrom(const get_account_rc_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_account_rc_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_account_rc_result::CopyFrom(const get_account_rc_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_account_rc_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_rc_result::IsInitialized() const {
  return true;
}

void get_account_rc_result::InternalSwap(get_account_rc_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_rc_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[52]);
}

// ===================================================================

class consume_account_rc_arguments::_Internal {
 public:
};

consume_account_rc_arguments::consume_account_rc_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.consume_account_rc_arguments)
}
consume_account_rc_arguments::consume_account_rc_arguments(const consume_account_rc_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.consume_account_rc_arguments)
}

inline void consume_account_rc_arguments::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = uint64_t{0u};
}

consume_account_rc_arguments::~consume_account_rc_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.consume_account_rc_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void consume_account_rc_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void consume_account_rc_arguments::ArenaDtor(void* object) {
  consume_account_rc_arguments* _this = reinterpret_cast< consume_account_rc_arguments* >(object);
  (void)_this;
}
void consume_account_rc_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void consume_account_rc_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void consume_account_rc_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.consume_account_rc_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* consume_account_rc_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* consume_account_rc_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.consume_account_rc_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.consume_account_rc_arguments)
  return target;
}

size_t consume_account_rc_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.consume_account_rc_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData consume_account_rc_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    consume_account_rc_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*consume_account_rc_arguments::GetClassData() const { return &_class_data_; }

void consume_account_rc_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<consume_account_rc_arguments *>(to)->MergeFrom(
      static_cast<const consume_account_rc_arguments &>(from));
}


void consume_account_rc_arguments::MergeFrom(const consume_account_rc_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.consume_account_rc_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void consume_account_rc_arguments::CopyFrom(const consume_account_rc_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.consume_account_rc_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool consume_account_rc_arguments::IsInitialized() const {
  return true;
}

void consume_account_rc_arguments::InternalSwap(consume_account_rc_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata consume_account_rc_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[53]);
}

// ===================================================================

class consume_account_rc_result::_Internal {
 public:
};

consume_account_rc_result::consume_account_rc_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.consume_account_rc_result)
}
consume_account_rc_result::consume_account_rc_result(const consume_account_rc_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.consume_account_rc_result)
}

inline void consume_account_rc_result::SharedCtor() {
value_ = false;
}

consume_account_rc_result::~consume_account_rc_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.consume_account_rc_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void consume_account_rc_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void consume_account_rc_result::ArenaDtor(void* object) {
  consume_account_rc_result* _this = reinterpret_cast< consume_account_rc_result* >(object);
  (void)_this;
}
void consume_account_rc_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void consume_account_rc_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void consume_account_rc_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.consume_account_rc_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* consume_account_rc_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* consume_account_rc_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.consume_account_rc_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.consume_account_rc_result)
  return target;
}

size_t consume_account_rc_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.consume_account_rc_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData consume_account_rc_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    consume_account_rc_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*consume_account_rc_result::GetClassData() const { return &_class_data_; }

void consume_account_rc_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<consume_account_rc_result *>(to)->MergeFrom(
      static_cast<const consume_account_rc_result &>(from));
}


void consume_account_rc_result::MergeFrom(const consume_account_rc_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.consume_account_rc_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void consume_account_rc_result::CopyFrom(const consume_account_rc_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.consume_account_rc_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool consume_account_rc_result::IsInitialized() const {
  return true;
}

void consume_account_rc_result::InternalSwap(consume_account_rc_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata consume_account_rc_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[54]);
}

// ===================================================================

class get_resource_limits_arguments::_Internal {
 public:
};

get_resource_limits_arguments::get_resource_limits_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_resource_limits_arguments)
}
get_resource_limits_arguments::get_resource_limits_arguments(const get_resource_limits_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_resource_limits_arguments)
}

inline void get_resource_limits_arguments::SharedCtor() {
}

get_resource_limits_arguments::~get_resource_limits_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_resource_limits_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_resource_limits_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_resource_limits_arguments::ArenaDtor(void* object) {
  get_resource_limits_arguments* _this = reinterpret_cast< get_resource_limits_arguments* >(object);
  (void)_this;
}
void get_resource_limits_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_resource_limits_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_resource_limits_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_resource_limits_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_resource_limits_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_resource_limits_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_resource_limits_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_resource_limits_arguments)
  return target;
}

size_t get_resource_limits_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_resource_limits_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_resource_limits_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_resource_limits_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_resource_limits_arguments::GetClassData() const { return &_class_data_; }

void get_resource_limits_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_resource_limits_arguments *>(to)->MergeFrom(
      static_cast<const get_resource_limits_arguments &>(from));
}


void get_resource_limits_arguments::MergeFrom(const get_resource_limits_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_resource_limits_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_resource_limits_arguments::CopyFrom(const get_resource_limits_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_resource_limits_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_resource_limits_arguments::IsInitialized() const {
  return true;
}

void get_resource_limits_arguments::InternalSwap(get_resource_limits_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_resource_limits_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[55]);
}

// ===================================================================

class get_resource_limits_result::_Internal {
 public:
  static const ::koinos::chain::resource_limit_data& value(const get_resource_limits_result* msg);
};

const ::koinos::chain::resource_limit_data&
get_resource_limits_result::_Internal::value(const get_resource_limits_result* msg) {
  return *msg->value_;
}
void get_resource_limits_result::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
get_resource_limits_result::get_resource_limits_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_resource_limits_result)
}
get_resource_limits_result::get_resource_limits_result(const get_resource_limits_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::koinos::chain::resource_limit_data(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_resource_limits_result)
}

inline void get_resource_limits_result::SharedCtor() {
value_ = nullptr;
}

get_resource_limits_result::~get_resource_limits_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_resource_limits_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_resource_limits_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void get_resource_limits_result::ArenaDtor(void* object) {
  get_resource_limits_result* _this = reinterpret_cast< get_resource_limits_result* >(object);
  (void)_this;
}
void get_resource_limits_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_resource_limits_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_resource_limits_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_resource_limits_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_resource_limits_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.chain.resource_limit_data value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_resource_limits_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_resource_limits_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.chain.resource_limit_data value = 1;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_resource_limits_result)
  return target;
}

size_t get_resource_limits_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_resource_limits_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.chain.resource_limit_data value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_resource_limits_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_resource_limits_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_resource_limits_result::GetClassData() const { return &_class_data_; }

void get_resource_limits_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_resource_limits_result *>(to)->MergeFrom(
      static_cast<const get_resource_limits_result &>(from));
}


void get_resource_limits_result::MergeFrom(const get_resource_limits_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_resource_limits_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::koinos::chain::resource_limit_data::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_resource_limits_result::CopyFrom(const get_resource_limits_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_resource_limits_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_resource_limits_result::IsInitialized() const {
  return true;
}

void get_resource_limits_result::InternalSwap(get_resource_limits_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_resource_limits_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[56]);
}

// ===================================================================

class consume_block_resources_arguments::_Internal {
 public:
};

consume_block_resources_arguments::consume_block_resources_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.consume_block_resources_arguments)
}
consume_block_resources_arguments::consume_block_resources_arguments(const consume_block_resources_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&disk_storage_consumed_, &from.disk_storage_consumed_,
    static_cast<size_t>(reinterpret_cast<char*>(&compute_bandwidth_consumed_) -
    reinterpret_cast<char*>(&disk_storage_consumed_)) + sizeof(compute_bandwidth_consumed_));
  // @@protoc_insertion_point(copy_constructor:koinos.chain.consume_block_resources_arguments)
}

inline void consume_block_resources_arguments::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&disk_storage_consumed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compute_bandwidth_consumed_) -
    reinterpret_cast<char*>(&disk_storage_consumed_)) + sizeof(compute_bandwidth_consumed_));
}

consume_block_resources_arguments::~consume_block_resources_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.consume_block_resources_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void consume_block_resources_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void consume_block_resources_arguments::ArenaDtor(void* object) {
  consume_block_resources_arguments* _this = reinterpret_cast< consume_block_resources_arguments* >(object);
  (void)_this;
}
void consume_block_resources_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void consume_block_resources_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void consume_block_resources_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.consume_block_resources_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&disk_storage_consumed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compute_bandwidth_consumed_) -
      reinterpret_cast<char*>(&disk_storage_consumed_)) + sizeof(compute_bandwidth_consumed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* consume_block_resources_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 disk_storage_consumed = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          disk_storage_consumed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 network_bandwidth_consumed = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          network_bandwidth_consumed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 compute_bandwidth_consumed = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          compute_bandwidth_consumed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* consume_block_resources_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.consume_block_resources_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 disk_storage_consumed = 1 [jstype = JS_STRING];
  if (this->_internal_disk_storage_consumed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_disk_storage_consumed(), target);
  }

  // uint64 network_bandwidth_consumed = 2 [jstype = JS_STRING];
  if (this->_internal_network_bandwidth_consumed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_network_bandwidth_consumed(), target);
  }

  // uint64 compute_bandwidth_consumed = 3 [jstype = JS_STRING];
  if (this->_internal_compute_bandwidth_consumed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_compute_bandwidth_consumed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.consume_block_resources_arguments)
  return target;
}

size_t consume_block_resources_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.consume_block_resources_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 disk_storage_consumed = 1 [jstype = JS_STRING];
  if (this->_internal_disk_storage_consumed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_disk_storage_consumed());
  }

  // uint64 network_bandwidth_consumed = 2 [jstype = JS_STRING];
  if (this->_internal_network_bandwidth_consumed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_network_bandwidth_consumed());
  }

  // uint64 compute_bandwidth_consumed = 3 [jstype = JS_STRING];
  if (this->_internal_compute_bandwidth_consumed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_compute_bandwidth_consumed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData consume_block_resources_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    consume_block_resources_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*consume_block_resources_arguments::GetClassData() const { return &_class_data_; }

void consume_block_resources_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<consume_block_resources_arguments *>(to)->MergeFrom(
      static_cast<const consume_block_resources_arguments &>(from));
}


void consume_block_resources_arguments::MergeFrom(const consume_block_resources_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.consume_block_resources_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_disk_storage_consumed() != 0) {
    _internal_set_disk_storage_consumed(from._internal_disk_storage_consumed());
  }
  if (from._internal_network_bandwidth_consumed() != 0) {
    _internal_set_network_bandwidth_consumed(from._internal_network_bandwidth_consumed());
  }
  if (from._internal_compute_bandwidth_consumed() != 0) {
    _internal_set_compute_bandwidth_consumed(from._internal_compute_bandwidth_consumed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void consume_block_resources_arguments::CopyFrom(const consume_block_resources_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.consume_block_resources_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool consume_block_resources_arguments::IsInitialized() const {
  return true;
}

void consume_block_resources_arguments::InternalSwap(consume_block_resources_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(consume_block_resources_arguments, compute_bandwidth_consumed_)
      + sizeof(consume_block_resources_arguments::compute_bandwidth_consumed_)
      - PROTOBUF_FIELD_OFFSET(consume_block_resources_arguments, disk_storage_consumed_)>(
          reinterpret_cast<char*>(&disk_storage_consumed_),
          reinterpret_cast<char*>(&other->disk_storage_consumed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata consume_block_resources_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[57]);
}

// ===================================================================

class consume_block_resources_result::_Internal {
 public:
};

consume_block_resources_result::consume_block_resources_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.consume_block_resources_result)
}
consume_block_resources_result::consume_block_resources_result(const consume_block_resources_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.consume_block_resources_result)
}

inline void consume_block_resources_result::SharedCtor() {
value_ = false;
}

consume_block_resources_result::~consume_block_resources_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.consume_block_resources_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void consume_block_resources_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void consume_block_resources_result::ArenaDtor(void* object) {
  consume_block_resources_result* _this = reinterpret_cast< consume_block_resources_result* >(object);
  (void)_this;
}
void consume_block_resources_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void consume_block_resources_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void consume_block_resources_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.consume_block_resources_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* consume_block_resources_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* consume_block_resources_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.consume_block_resources_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.consume_block_resources_result)
  return target;
}

size_t consume_block_resources_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.consume_block_resources_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData consume_block_resources_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    consume_block_resources_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*consume_block_resources_result::GetClassData() const { return &_class_data_; }

void consume_block_resources_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<consume_block_resources_result *>(to)->MergeFrom(
      static_cast<const consume_block_resources_result &>(from));
}


void consume_block_resources_result::MergeFrom(const consume_block_resources_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.consume_block_resources_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void consume_block_resources_result::CopyFrom(const consume_block_resources_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.consume_block_resources_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool consume_block_resources_result::IsInitialized() const {
  return true;
}

void consume_block_resources_result::InternalSwap(consume_block_resources_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata consume_block_resources_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[58]);
}

// ===================================================================

class get_transaction_rc_limit_arguments::_Internal {
 public:
  static const ::koinos::protocol::transaction& transaction(const get_transaction_rc_limit_arguments* msg);
};

const ::koinos::protocol::transaction&
get_transaction_rc_limit_arguments::_Internal::transaction(const get_transaction_rc_limit_arguments* msg) {
  return *msg->transaction_;
}
void get_transaction_rc_limit_arguments::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
get_transaction_rc_limit_arguments::get_transaction_rc_limit_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_transaction_rc_limit_arguments)
}
get_transaction_rc_limit_arguments::get_transaction_rc_limit_arguments(const get_transaction_rc_limit_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::koinos::protocol::transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_transaction_rc_limit_arguments)
}

inline void get_transaction_rc_limit_arguments::SharedCtor() {
transaction_ = nullptr;
}

get_transaction_rc_limit_arguments::~get_transaction_rc_limit_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_transaction_rc_limit_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_transaction_rc_limit_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void get_transaction_rc_limit_arguments::ArenaDtor(void* object) {
  get_transaction_rc_limit_arguments* _this = reinterpret_cast< get_transaction_rc_limit_arguments* >(object);
  (void)_this;
}
void get_transaction_rc_limit_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transaction_rc_limit_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_transaction_rc_limit_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_transaction_rc_limit_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transaction_rc_limit_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transaction_rc_limit_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_transaction_rc_limit_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_transaction_rc_limit_arguments)
  return target;
}

size_t get_transaction_rc_limit_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_transaction_rc_limit_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_transaction_rc_limit_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_transaction_rc_limit_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_transaction_rc_limit_arguments::GetClassData() const { return &_class_data_; }

void get_transaction_rc_limit_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_transaction_rc_limit_arguments *>(to)->MergeFrom(
      static_cast<const get_transaction_rc_limit_arguments &>(from));
}


void get_transaction_rc_limit_arguments::MergeFrom(const get_transaction_rc_limit_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_transaction_rc_limit_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::koinos::protocol::transaction::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_transaction_rc_limit_arguments::CopyFrom(const get_transaction_rc_limit_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_transaction_rc_limit_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transaction_rc_limit_arguments::IsInitialized() const {
  return true;
}

void get_transaction_rc_limit_arguments::InternalSwap(get_transaction_rc_limit_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transaction_rc_limit_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[59]);
}

// ===================================================================

class get_transaction_rc_limit_result::_Internal {
 public:
};

get_transaction_rc_limit_result::get_transaction_rc_limit_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_transaction_rc_limit_result)
}
get_transaction_rc_limit_result::get_transaction_rc_limit_result(const get_transaction_rc_limit_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_transaction_rc_limit_result)
}

inline void get_transaction_rc_limit_result::SharedCtor() {
value_ = uint64_t{0u};
}

get_transaction_rc_limit_result::~get_transaction_rc_limit_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_transaction_rc_limit_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_transaction_rc_limit_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_transaction_rc_limit_result::ArenaDtor(void* object) {
  get_transaction_rc_limit_result* _this = reinterpret_cast< get_transaction_rc_limit_result* >(object);
  (void)_this;
}
void get_transaction_rc_limit_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transaction_rc_limit_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_transaction_rc_limit_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_transaction_rc_limit_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transaction_rc_limit_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transaction_rc_limit_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_transaction_rc_limit_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_transaction_rc_limit_result)
  return target;
}

size_t get_transaction_rc_limit_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_transaction_rc_limit_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_transaction_rc_limit_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_transaction_rc_limit_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_transaction_rc_limit_result::GetClassData() const { return &_class_data_; }

void get_transaction_rc_limit_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_transaction_rc_limit_result *>(to)->MergeFrom(
      static_cast<const get_transaction_rc_limit_result &>(from));
}


void get_transaction_rc_limit_result::MergeFrom(const get_transaction_rc_limit_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_transaction_rc_limit_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_transaction_rc_limit_result::CopyFrom(const get_transaction_rc_limit_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_transaction_rc_limit_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transaction_rc_limit_result::IsInitialized() const {
  return true;
}

void get_transaction_rc_limit_result::InternalSwap(get_transaction_rc_limit_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transaction_rc_limit_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[60]);
}

// ===================================================================

class get_last_irreversible_block_arguments::_Internal {
 public:
};

get_last_irreversible_block_arguments::get_last_irreversible_block_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_last_irreversible_block_arguments)
}
get_last_irreversible_block_arguments::get_last_irreversible_block_arguments(const get_last_irreversible_block_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_last_irreversible_block_arguments)
}

inline void get_last_irreversible_block_arguments::SharedCtor() {
}

get_last_irreversible_block_arguments::~get_last_irreversible_block_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_last_irreversible_block_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_last_irreversible_block_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_last_irreversible_block_arguments::ArenaDtor(void* object) {
  get_last_irreversible_block_arguments* _this = reinterpret_cast< get_last_irreversible_block_arguments* >(object);
  (void)_this;
}
void get_last_irreversible_block_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_last_irreversible_block_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_last_irreversible_block_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_last_irreversible_block_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_last_irreversible_block_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_last_irreversible_block_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_last_irreversible_block_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_last_irreversible_block_arguments)
  return target;
}

size_t get_last_irreversible_block_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_last_irreversible_block_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_last_irreversible_block_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_last_irreversible_block_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_last_irreversible_block_arguments::GetClassData() const { return &_class_data_; }

void get_last_irreversible_block_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_last_irreversible_block_arguments *>(to)->MergeFrom(
      static_cast<const get_last_irreversible_block_arguments &>(from));
}


void get_last_irreversible_block_arguments::MergeFrom(const get_last_irreversible_block_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_last_irreversible_block_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_last_irreversible_block_arguments::CopyFrom(const get_last_irreversible_block_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_last_irreversible_block_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_last_irreversible_block_arguments::IsInitialized() const {
  return true;
}

void get_last_irreversible_block_arguments::InternalSwap(get_last_irreversible_block_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_last_irreversible_block_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[61]);
}

// ===================================================================

class get_last_irreversible_block_result::_Internal {
 public:
};

get_last_irreversible_block_result::get_last_irreversible_block_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_last_irreversible_block_result)
}
get_last_irreversible_block_result::get_last_irreversible_block_result(const get_last_irreversible_block_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_last_irreversible_block_result)
}

inline void get_last_irreversible_block_result::SharedCtor() {
value_ = uint64_t{0u};
}

get_last_irreversible_block_result::~get_last_irreversible_block_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_last_irreversible_block_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_last_irreversible_block_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_last_irreversible_block_result::ArenaDtor(void* object) {
  get_last_irreversible_block_result* _this = reinterpret_cast< get_last_irreversible_block_result* >(object);
  (void)_this;
}
void get_last_irreversible_block_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_last_irreversible_block_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_last_irreversible_block_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_last_irreversible_block_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_last_irreversible_block_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_last_irreversible_block_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_last_irreversible_block_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_last_irreversible_block_result)
  return target;
}

size_t get_last_irreversible_block_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_last_irreversible_block_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_last_irreversible_block_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_last_irreversible_block_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_last_irreversible_block_result::GetClassData() const { return &_class_data_; }

void get_last_irreversible_block_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_last_irreversible_block_result *>(to)->MergeFrom(
      static_cast<const get_last_irreversible_block_result &>(from));
}


void get_last_irreversible_block_result::MergeFrom(const get_last_irreversible_block_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_last_irreversible_block_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_last_irreversible_block_result::CopyFrom(const get_last_irreversible_block_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_last_irreversible_block_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_last_irreversible_block_result::IsInitialized() const {
  return true;
}

void get_last_irreversible_block_result::InternalSwap(get_last_irreversible_block_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_last_irreversible_block_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[62]);
}

// ===================================================================

class get_caller_arguments::_Internal {
 public:
};

get_caller_arguments::get_caller_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_caller_arguments)
}
get_caller_arguments::get_caller_arguments(const get_caller_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_caller_arguments)
}

inline void get_caller_arguments::SharedCtor() {
}

get_caller_arguments::~get_caller_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_caller_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_caller_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_caller_arguments::ArenaDtor(void* object) {
  get_caller_arguments* _this = reinterpret_cast< get_caller_arguments* >(object);
  (void)_this;
}
void get_caller_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_caller_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_caller_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_caller_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_caller_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_caller_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_caller_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_caller_arguments)
  return target;
}

size_t get_caller_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_caller_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_caller_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_caller_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_caller_arguments::GetClassData() const { return &_class_data_; }

void get_caller_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_caller_arguments *>(to)->MergeFrom(
      static_cast<const get_caller_arguments &>(from));
}


void get_caller_arguments::MergeFrom(const get_caller_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_caller_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_caller_arguments::CopyFrom(const get_caller_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_caller_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_caller_arguments::IsInitialized() const {
  return true;
}

void get_caller_arguments::InternalSwap(get_caller_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_caller_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[63]);
}

// ===================================================================

class get_caller_result::_Internal {
 public:
  static const ::koinos::chain::caller_data& value(const get_caller_result* msg);
};

const ::koinos::chain::caller_data&
get_caller_result::_Internal::value(const get_caller_result* msg) {
  return *msg->value_;
}
void get_caller_result::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
get_caller_result::get_caller_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_caller_result)
}
get_caller_result::get_caller_result(const get_caller_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::koinos::chain::caller_data(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_caller_result)
}

inline void get_caller_result::SharedCtor() {
value_ = nullptr;
}

get_caller_result::~get_caller_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_caller_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_caller_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void get_caller_result::ArenaDtor(void* object) {
  get_caller_result* _this = reinterpret_cast< get_caller_result* >(object);
  (void)_this;
}
void get_caller_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_caller_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_caller_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_caller_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_caller_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.chain.caller_data value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_caller_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_caller_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.chain.caller_data value = 1;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_caller_result)
  return target;
}

size_t get_caller_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_caller_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.chain.caller_data value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_caller_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_caller_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_caller_result::GetClassData() const { return &_class_data_; }

void get_caller_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_caller_result *>(to)->MergeFrom(
      static_cast<const get_caller_result &>(from));
}


void get_caller_result::MergeFrom(const get_caller_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_caller_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::koinos::chain::caller_data::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_caller_result::CopyFrom(const get_caller_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_caller_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_caller_result::IsInitialized() const {
  return true;
}

void get_caller_result::InternalSwap(get_caller_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_caller_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[64]);
}

// ===================================================================

class require_authority_arguments::_Internal {
 public:
};

require_authority_arguments::require_authority_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.require_authority_arguments)
}
require_authority_arguments::require_authority_arguments(const require_authority_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.require_authority_arguments)
}

inline void require_authority_arguments::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

require_authority_arguments::~require_authority_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.require_authority_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void require_authority_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void require_authority_arguments::ArenaDtor(void* object) {
  require_authority_arguments* _this = reinterpret_cast< require_authority_arguments* >(object);
  (void)_this;
}
void require_authority_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void require_authority_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void require_authority_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.require_authority_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* require_authority_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* require_authority_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.require_authority_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.require_authority_arguments)
  return target;
}

size_t require_authority_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.require_authority_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData require_authority_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    require_authority_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*require_authority_arguments::GetClassData() const { return &_class_data_; }

void require_authority_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<require_authority_arguments *>(to)->MergeFrom(
      static_cast<const require_authority_arguments &>(from));
}


void require_authority_arguments::MergeFrom(const require_authority_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.require_authority_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void require_authority_arguments::CopyFrom(const require_authority_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.require_authority_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool require_authority_arguments::IsInitialized() const {
  return true;
}

void require_authority_arguments::InternalSwap(require_authority_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata require_authority_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[65]);
}

// ===================================================================

class require_authority_result::_Internal {
 public:
};

require_authority_result::require_authority_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.require_authority_result)
}
require_authority_result::require_authority_result(const require_authority_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.require_authority_result)
}

inline void require_authority_result::SharedCtor() {
}

require_authority_result::~require_authority_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.require_authority_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void require_authority_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void require_authority_result::ArenaDtor(void* object) {
  require_authority_result* _this = reinterpret_cast< require_authority_result* >(object);
  (void)_this;
}
void require_authority_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void require_authority_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void require_authority_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.require_authority_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* require_authority_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* require_authority_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.require_authority_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.require_authority_result)
  return target;
}

size_t require_authority_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.require_authority_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData require_authority_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    require_authority_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*require_authority_result::GetClassData() const { return &_class_data_; }

void require_authority_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<require_authority_result *>(to)->MergeFrom(
      static_cast<const require_authority_result &>(from));
}


void require_authority_result::MergeFrom(const require_authority_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.require_authority_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void require_authority_result::CopyFrom(const require_authority_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.require_authority_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool require_authority_result::IsInitialized() const {
  return true;
}

void require_authority_result::InternalSwap(require_authority_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata require_authority_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[66]);
}

// ===================================================================

class get_transaction_signature_arguments::_Internal {
 public:
};

get_transaction_signature_arguments::get_transaction_signature_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_transaction_signature_arguments)
}
get_transaction_signature_arguments::get_transaction_signature_arguments(const get_transaction_signature_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_transaction_signature_arguments)
}

inline void get_transaction_signature_arguments::SharedCtor() {
}

get_transaction_signature_arguments::~get_transaction_signature_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_transaction_signature_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_transaction_signature_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_transaction_signature_arguments::ArenaDtor(void* object) {
  get_transaction_signature_arguments* _this = reinterpret_cast< get_transaction_signature_arguments* >(object);
  (void)_this;
}
void get_transaction_signature_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transaction_signature_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_transaction_signature_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_transaction_signature_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transaction_signature_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transaction_signature_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_transaction_signature_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_transaction_signature_arguments)
  return target;
}

size_t get_transaction_signature_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_transaction_signature_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_transaction_signature_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_transaction_signature_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_transaction_signature_arguments::GetClassData() const { return &_class_data_; }

void get_transaction_signature_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_transaction_signature_arguments *>(to)->MergeFrom(
      static_cast<const get_transaction_signature_arguments &>(from));
}


void get_transaction_signature_arguments::MergeFrom(const get_transaction_signature_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_transaction_signature_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_transaction_signature_arguments::CopyFrom(const get_transaction_signature_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_transaction_signature_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transaction_signature_arguments::IsInitialized() const {
  return true;
}

void get_transaction_signature_arguments::InternalSwap(get_transaction_signature_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transaction_signature_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[67]);
}

// ===================================================================

class get_transaction_signature_result::_Internal {
 public:
};

get_transaction_signature_result::get_transaction_signature_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_transaction_signature_result)
}
get_transaction_signature_result::get_transaction_signature_result(const get_transaction_signature_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_transaction_signature_result)
}

inline void get_transaction_signature_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_transaction_signature_result::~get_transaction_signature_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_transaction_signature_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_transaction_signature_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_transaction_signature_result::ArenaDtor(void* object) {
  get_transaction_signature_result* _this = reinterpret_cast< get_transaction_signature_result* >(object);
  (void)_this;
}
void get_transaction_signature_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transaction_signature_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_transaction_signature_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_transaction_signature_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transaction_signature_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transaction_signature_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_transaction_signature_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_transaction_signature_result)
  return target;
}

size_t get_transaction_signature_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_transaction_signature_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_transaction_signature_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_transaction_signature_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_transaction_signature_result::GetClassData() const { return &_class_data_; }

void get_transaction_signature_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_transaction_signature_result *>(to)->MergeFrom(
      static_cast<const get_transaction_signature_result &>(from));
}


void get_transaction_signature_result::MergeFrom(const get_transaction_signature_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_transaction_signature_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_transaction_signature_result::CopyFrom(const get_transaction_signature_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_transaction_signature_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transaction_signature_result::IsInitialized() const {
  return true;
}

void get_transaction_signature_result::InternalSwap(get_transaction_signature_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transaction_signature_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[68]);
}

// ===================================================================

class get_contract_id_arguments::_Internal {
 public:
};

get_contract_id_arguments::get_contract_id_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_contract_id_arguments)
}
get_contract_id_arguments::get_contract_id_arguments(const get_contract_id_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_contract_id_arguments)
}

inline void get_contract_id_arguments::SharedCtor() {
}

get_contract_id_arguments::~get_contract_id_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_contract_id_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_contract_id_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_contract_id_arguments::ArenaDtor(void* object) {
  get_contract_id_arguments* _this = reinterpret_cast< get_contract_id_arguments* >(object);
  (void)_this;
}
void get_contract_id_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_id_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_contract_id_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_contract_id_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_id_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_id_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_contract_id_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_contract_id_arguments)
  return target;
}

size_t get_contract_id_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_contract_id_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_contract_id_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_contract_id_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_contract_id_arguments::GetClassData() const { return &_class_data_; }

void get_contract_id_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_contract_id_arguments *>(to)->MergeFrom(
      static_cast<const get_contract_id_arguments &>(from));
}


void get_contract_id_arguments::MergeFrom(const get_contract_id_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_contract_id_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_contract_id_arguments::CopyFrom(const get_contract_id_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_contract_id_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_id_arguments::IsInitialized() const {
  return true;
}

void get_contract_id_arguments::InternalSwap(get_contract_id_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_id_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[69]);
}

// ===================================================================

class get_contract_id_result::_Internal {
 public:
};

get_contract_id_result::get_contract_id_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_contract_id_result)
}
get_contract_id_result::get_contract_id_result(const get_contract_id_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_contract_id_result)
}

inline void get_contract_id_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_contract_id_result::~get_contract_id_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_contract_id_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_contract_id_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_contract_id_result::ArenaDtor(void* object) {
  get_contract_id_result* _this = reinterpret_cast< get_contract_id_result* >(object);
  (void)_this;
}
void get_contract_id_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_id_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_contract_id_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_contract_id_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_id_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1 [(.koinos.btype) = CONTRACT_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_id_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_contract_id_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_contract_id_result)
  return target;
}

size_t get_contract_id_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_contract_id_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_contract_id_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_contract_id_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_contract_id_result::GetClassData() const { return &_class_data_; }

void get_contract_id_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_contract_id_result *>(to)->MergeFrom(
      static_cast<const get_contract_id_result &>(from));
}


void get_contract_id_result::MergeFrom(const get_contract_id_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_contract_id_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_contract_id_result::CopyFrom(const get_contract_id_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_contract_id_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_id_result::IsInitialized() const {
  return true;
}

void get_contract_id_result::InternalSwap(get_contract_id_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_id_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[70]);
}

// ===================================================================

class get_account_nonce_arguments::_Internal {
 public:
};

get_account_nonce_arguments::get_account_nonce_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_account_nonce_arguments)
}
get_account_nonce_arguments::get_account_nonce_arguments(const get_account_nonce_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_account_nonce_arguments)
}

inline void get_account_nonce_arguments::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_account_nonce_arguments::~get_account_nonce_arguments() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_account_nonce_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_account_nonce_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_account_nonce_arguments::ArenaDtor(void* object) {
  get_account_nonce_arguments* _this = reinterpret_cast< get_account_nonce_arguments* >(object);
  (void)_this;
}
void get_account_nonce_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_nonce_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_account_nonce_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_account_nonce_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_nonce_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_nonce_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_account_nonce_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_account_nonce_arguments)
  return target;
}

size_t get_account_nonce_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_account_nonce_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_account_nonce_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_account_nonce_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_account_nonce_arguments::GetClassData() const { return &_class_data_; }

void get_account_nonce_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_account_nonce_arguments *>(to)->MergeFrom(
      static_cast<const get_account_nonce_arguments &>(from));
}


void get_account_nonce_arguments::MergeFrom(const get_account_nonce_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_account_nonce_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_account_nonce_arguments::CopyFrom(const get_account_nonce_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_account_nonce_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_nonce_arguments::IsInitialized() const {
  return true;
}

void get_account_nonce_arguments::InternalSwap(get_account_nonce_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_nonce_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[71]);
}

// ===================================================================

class get_account_nonce_result::_Internal {
 public:
};

get_account_nonce_result::get_account_nonce_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_account_nonce_result)
}
get_account_nonce_result::get_account_nonce_result(const get_account_nonce_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_account_nonce_result)
}

inline void get_account_nonce_result::SharedCtor() {
value_ = uint64_t{0u};
}

get_account_nonce_result::~get_account_nonce_result() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_account_nonce_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_account_nonce_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_account_nonce_result::ArenaDtor(void* object) {
  get_account_nonce_result* _this = reinterpret_cast< get_account_nonce_result* >(object);
  (void)_this;
}
void get_account_nonce_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_nonce_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_account_nonce_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_account_nonce_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_nonce_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_nonce_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_account_nonce_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_account_nonce_result)
  return target;
}

size_t get_account_nonce_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_account_nonce_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_account_nonce_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_account_nonce_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_account_nonce_result::GetClassData() const { return &_class_data_; }

void get_account_nonce_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_account_nonce_result *>(to)->MergeFrom(
      static_cast<const get_account_nonce_result &>(from));
}


void get_account_nonce_result::MergeFrom(const get_account_nonce_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_account_nonce_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_account_nonce_result::CopyFrom(const get_account_nonce_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_account_nonce_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_nonce_result::IsInitialized() const {
  return true;
}

void get_account_nonce_result::InternalSwap(get_account_nonce_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_nonce_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_getter, &descriptor_table_koinos_2fchain_2fsystem_5fcalls_2eproto_once,
      file_level_metadata_koinos_2fchain_2fsystem_5fcalls_2eproto[72]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chain
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::chain::event_arguments* Arena::CreateMaybeMessage< ::koinos::chain::event_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::event_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::event_result* Arena::CreateMaybeMessage< ::koinos::chain::event_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::event_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::prints_arguments* Arena::CreateMaybeMessage< ::koinos::chain::prints_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::prints_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::prints_result* Arena::CreateMaybeMessage< ::koinos::chain::prints_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::prints_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::process_block_signature_arguments* Arena::CreateMaybeMessage< ::koinos::chain::process_block_signature_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::process_block_signature_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::process_block_signature_result* Arena::CreateMaybeMessage< ::koinos::chain::process_block_signature_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::process_block_signature_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::verify_merkle_root_arguments* Arena::CreateMaybeMessage< ::koinos::chain::verify_merkle_root_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::verify_merkle_root_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::verify_merkle_root_result* Arena::CreateMaybeMessage< ::koinos::chain::verify_merkle_root_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::verify_merkle_root_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_block_arguments* Arena::CreateMaybeMessage< ::koinos::chain::apply_block_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_block_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_block_result* Arena::CreateMaybeMessage< ::koinos::chain::apply_block_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_block_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_transaction_arguments* Arena::CreateMaybeMessage< ::koinos::chain::apply_transaction_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_transaction_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_transaction_result* Arena::CreateMaybeMessage< ::koinos::chain::apply_transaction_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_transaction_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_upload_contract_operation_arguments* Arena::CreateMaybeMessage< ::koinos::chain::apply_upload_contract_operation_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_upload_contract_operation_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_upload_contract_operation_result* Arena::CreateMaybeMessage< ::koinos::chain::apply_upload_contract_operation_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_upload_contract_operation_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_call_contract_operation_arguments* Arena::CreateMaybeMessage< ::koinos::chain::apply_call_contract_operation_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_call_contract_operation_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_call_contract_operation_result* Arena::CreateMaybeMessage< ::koinos::chain::apply_call_contract_operation_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_call_contract_operation_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_set_system_call_operation_arguments* Arena::CreateMaybeMessage< ::koinos::chain::apply_set_system_call_operation_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_set_system_call_operation_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_set_system_call_operation_result* Arena::CreateMaybeMessage< ::koinos::chain::apply_set_system_call_operation_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_set_system_call_operation_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_set_system_contract_operation_arguments* Arena::CreateMaybeMessage< ::koinos::chain::apply_set_system_contract_operation_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_set_system_contract_operation_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_set_system_contract_operation_result* Arena::CreateMaybeMessage< ::koinos::chain::apply_set_system_contract_operation_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_set_system_contract_operation_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::put_object_arguments* Arena::CreateMaybeMessage< ::koinos::chain::put_object_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::put_object_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::put_object_result* Arena::CreateMaybeMessage< ::koinos::chain::put_object_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::put_object_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::remove_object_arguments* Arena::CreateMaybeMessage< ::koinos::chain::remove_object_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::remove_object_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::remove_object_result* Arena::CreateMaybeMessage< ::koinos::chain::remove_object_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::remove_object_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_object_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_object_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_object_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::database_object* Arena::CreateMaybeMessage< ::koinos::chain::database_object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::database_object >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_object_result* Arena::CreateMaybeMessage< ::koinos::chain::get_object_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_object_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_next_object_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_next_object_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_next_object_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_next_object_result* Arena::CreateMaybeMessage< ::koinos::chain::get_next_object_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_next_object_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_prev_object_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_prev_object_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_prev_object_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_prev_object_result* Arena::CreateMaybeMessage< ::koinos::chain::get_prev_object_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_prev_object_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::call_contract_arguments* Arena::CreateMaybeMessage< ::koinos::chain::call_contract_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::call_contract_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::call_contract_result* Arena::CreateMaybeMessage< ::koinos::chain::call_contract_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::call_contract_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_entry_point_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_entry_point_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_entry_point_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_entry_point_result* Arena::CreateMaybeMessage< ::koinos::chain::get_entry_point_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_entry_point_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_contract_arguments_size_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_contract_arguments_size_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_contract_arguments_size_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_contract_arguments_size_result* Arena::CreateMaybeMessage< ::koinos::chain::get_contract_arguments_size_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_contract_arguments_size_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_contract_arguments_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_contract_arguments_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_contract_arguments_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_contract_arguments_result* Arena::CreateMaybeMessage< ::koinos::chain::get_contract_arguments_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_contract_arguments_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::set_contract_result_arguments* Arena::CreateMaybeMessage< ::koinos::chain::set_contract_result_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::set_contract_result_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::set_contract_result_result* Arena::CreateMaybeMessage< ::koinos::chain::set_contract_result_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::set_contract_result_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::exit_contract_arguments* Arena::CreateMaybeMessage< ::koinos::chain::exit_contract_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::exit_contract_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::exit_contract_result* Arena::CreateMaybeMessage< ::koinos::chain::exit_contract_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::exit_contract_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_head_info_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_head_info_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_head_info_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_head_info_result* Arena::CreateMaybeMessage< ::koinos::chain::get_head_info_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_head_info_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::hash_arguments* Arena::CreateMaybeMessage< ::koinos::chain::hash_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::hash_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::hash_result* Arena::CreateMaybeMessage< ::koinos::chain::hash_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::hash_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::recover_public_key_arguments* Arena::CreateMaybeMessage< ::koinos::chain::recover_public_key_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::recover_public_key_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::recover_public_key_result* Arena::CreateMaybeMessage< ::koinos::chain::recover_public_key_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::recover_public_key_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_transaction_payer_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_transaction_payer_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_transaction_payer_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_transaction_payer_result* Arena::CreateMaybeMessage< ::koinos::chain::get_transaction_payer_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_transaction_payer_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_account_rc_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_account_rc_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_account_rc_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_account_rc_result* Arena::CreateMaybeMessage< ::koinos::chain::get_account_rc_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_account_rc_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::consume_account_rc_arguments* Arena::CreateMaybeMessage< ::koinos::chain::consume_account_rc_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::consume_account_rc_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::consume_account_rc_result* Arena::CreateMaybeMessage< ::koinos::chain::consume_account_rc_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::consume_account_rc_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_resource_limits_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_resource_limits_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_resource_limits_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_resource_limits_result* Arena::CreateMaybeMessage< ::koinos::chain::get_resource_limits_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_resource_limits_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::consume_block_resources_arguments* Arena::CreateMaybeMessage< ::koinos::chain::consume_block_resources_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::consume_block_resources_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::consume_block_resources_result* Arena::CreateMaybeMessage< ::koinos::chain::consume_block_resources_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::consume_block_resources_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_transaction_rc_limit_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_transaction_rc_limit_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_transaction_rc_limit_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_transaction_rc_limit_result* Arena::CreateMaybeMessage< ::koinos::chain::get_transaction_rc_limit_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_transaction_rc_limit_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_last_irreversible_block_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_last_irreversible_block_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_last_irreversible_block_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_last_irreversible_block_result* Arena::CreateMaybeMessage< ::koinos::chain::get_last_irreversible_block_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_last_irreversible_block_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_caller_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_caller_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_caller_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_caller_result* Arena::CreateMaybeMessage< ::koinos::chain::get_caller_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_caller_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::require_authority_arguments* Arena::CreateMaybeMessage< ::koinos::chain::require_authority_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::require_authority_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::require_authority_result* Arena::CreateMaybeMessage< ::koinos::chain::require_authority_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::require_authority_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_transaction_signature_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_transaction_signature_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_transaction_signature_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_transaction_signature_result* Arena::CreateMaybeMessage< ::koinos::chain::get_transaction_signature_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_transaction_signature_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_contract_id_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_contract_id_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_contract_id_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_contract_id_result* Arena::CreateMaybeMessage< ::koinos::chain::get_contract_id_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_contract_id_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_account_nonce_arguments* Arena::CreateMaybeMessage< ::koinos::chain::get_account_nonce_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_account_nonce_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_account_nonce_result* Arena::CreateMaybeMessage< ::koinos::chain::get_account_nonce_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_account_nonce_result >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
