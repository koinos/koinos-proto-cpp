// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/contract_meta_store/contract_meta_store_rpc.proto

#include "koinos/rpc/contract_meta_store/contract_meta_store_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace rpc {
namespace contract_meta_store {
constexpr get_contract_meta_request::get_contract_meta_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_contract_meta_requestDefaultTypeInternal {
  constexpr get_contract_meta_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_contract_meta_requestDefaultTypeInternal() {}
  union {
    get_contract_meta_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_contract_meta_requestDefaultTypeInternal _get_contract_meta_request_default_instance_;
constexpr get_contract_meta_response::get_contract_meta_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : meta_(nullptr){}
struct get_contract_meta_responseDefaultTypeInternal {
  constexpr get_contract_meta_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_contract_meta_responseDefaultTypeInternal() {}
  union {
    get_contract_meta_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_contract_meta_responseDefaultTypeInternal _get_contract_meta_response_default_instance_;
constexpr contract_meta_store_request::contract_meta_store_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct contract_meta_store_requestDefaultTypeInternal {
  constexpr contract_meta_store_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~contract_meta_store_requestDefaultTypeInternal() {}
  union {
    contract_meta_store_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT contract_meta_store_requestDefaultTypeInternal _contract_meta_store_request_default_instance_;
constexpr contract_meta_store_response::contract_meta_store_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct contract_meta_store_responseDefaultTypeInternal {
  constexpr contract_meta_store_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~contract_meta_store_responseDefaultTypeInternal() {}
  union {
    contract_meta_store_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT contract_meta_store_responseDefaultTypeInternal _contract_meta_store_response_default_instance_;
}  // namespace contract_meta_store
}  // namespace rpc
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::contract_meta_store::get_contract_meta_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::contract_meta_store::get_contract_meta_request, contract_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::contract_meta_store::get_contract_meta_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::contract_meta_store::get_contract_meta_response, meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::contract_meta_store::contract_meta_store_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::contract_meta_store::contract_meta_store_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::contract_meta_store::contract_meta_store_request, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::contract_meta_store::contract_meta_store_response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::contract_meta_store::contract_meta_store_response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::contract_meta_store::contract_meta_store_response, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::rpc::contract_meta_store::get_contract_meta_request)},
  { 6, -1, sizeof(::koinos::rpc::contract_meta_store::get_contract_meta_response)},
  { 12, -1, sizeof(::koinos::rpc::contract_meta_store::contract_meta_store_request)},
  { 20, -1, sizeof(::koinos::rpc::contract_meta_store::contract_meta_store_response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::contract_meta_store::_get_contract_meta_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::contract_meta_store::_get_contract_meta_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::contract_meta_store::_contract_meta_store_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::contract_meta_store::_contract_meta_store_response_default_instance_),
};

const char descriptor_table_protodef_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n<koinos/rpc/contract_meta_store/contrac"
  "t_meta_store_rpc.proto\022\036koinos.rpc.contr"
  "act_meta_store\032\024koinos/options.proto\032\024ko"
  "inos/rpc/rpc.proto\0324koinos/contract_meta"
  "_store/contract_meta_store.proto\"6\n\031get_"
  "contract_meta_request\022\031\n\013contract_id\030\001 \001"
  "(\014B\004\200\265\030\005\"Z\n\032get_contract_meta_response\022<"
  "\n\004meta\030\001 \001(\0132..koinos.contract_meta_stor"
  "e.contract_meta_item\"\256\001\n\033contract_meta_s"
  "tore_request\022,\n\010reserved\030\001 \001(\0132\030.koinos."
  "rpc.reserved_rpcH\000\022V\n\021get_contract_meta\030"
  "\002 \001(\01329.koinos.rpc.contract_meta_store.g"
  "et_contract_meta_requestH\000B\t\n\007request\"\336\001"
  "\n\034contract_meta_store_response\022,\n\010reserv"
  "ed\030\001 \001(\0132\030.koinos.rpc.reserved_rpcH\000\022+\n\005"
  "error\030\002 \001(\0132\032.koinos.rpc.error_responseH"
  "\000\022W\n\021get_contract_meta\030\003 \001(\0132:.koinos.rp"
  "c.contract_meta_store.get_contract_meta_"
  "responseH\000B\n\n\010responseBFZDgithub.com/koi"
  "nos/koinos-proto-golang/koinos/rpc/contr"
  "act_meta_storeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto_deps[3] = {
  &::descriptor_table_koinos_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_2eproto,
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2frpc_2frpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto = {
  false, false, 822, descriptor_table_protodef_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto, "koinos/rpc/contract_meta_store/contract_meta_store_rpc.proto", 
  &descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto_once, descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto_deps, 3, 4,
  schemas, file_default_instances, TableStruct_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto::offsets,
  file_level_metadata_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto, file_level_enum_descriptors_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto, file_level_service_descriptors_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto_getter() {
  return &descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto(&descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto);
namespace koinos {
namespace rpc {
namespace contract_meta_store {

// ===================================================================

class get_contract_meta_request::_Internal {
 public:
};

get_contract_meta_request::get_contract_meta_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.contract_meta_store.get_contract_meta_request)
}
get_contract_meta_request::get_contract_meta_request(const get_contract_meta_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.contract_meta_store.get_contract_meta_request)
}

inline void get_contract_meta_request::SharedCtor() {
contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_contract_meta_request::~get_contract_meta_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.contract_meta_store.get_contract_meta_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_contract_meta_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_contract_meta_request::ArenaDtor(void* object) {
  get_contract_meta_request* _this = reinterpret_cast< get_contract_meta_request* >(object);
  (void)_this;
}
void get_contract_meta_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_meta_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_contract_meta_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.contract_meta_store.get_contract_meta_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_meta_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_meta_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.contract_meta_store.get_contract_meta_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.contract_meta_store.get_contract_meta_request)
  return target;
}

size_t get_contract_meta_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.contract_meta_store.get_contract_meta_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_contract_meta_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_contract_meta_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_contract_meta_request::GetClassData() const { return &_class_data_; }

void get_contract_meta_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_contract_meta_request *>(to)->MergeFrom(
      static_cast<const get_contract_meta_request &>(from));
}


void get_contract_meta_request::MergeFrom(const get_contract_meta_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.contract_meta_store.get_contract_meta_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract_id().empty()) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_contract_meta_request::CopyFrom(const get_contract_meta_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.contract_meta_store.get_contract_meta_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_meta_request::IsInitialized() const {
  return true;
}

void get_contract_meta_request::InternalSwap(get_contract_meta_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contract_id_, GetArenaForAllocation(),
      &other->contract_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_meta_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto[0]);
}

// ===================================================================

class get_contract_meta_response::_Internal {
 public:
  static const ::koinos::contract_meta_store::contract_meta_item& meta(const get_contract_meta_response* msg);
};

const ::koinos::contract_meta_store::contract_meta_item&
get_contract_meta_response::_Internal::meta(const get_contract_meta_response* msg) {
  return *msg->meta_;
}
void get_contract_meta_response::clear_meta() {
  if (GetArenaForAllocation() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
get_contract_meta_response::get_contract_meta_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.contract_meta_store.get_contract_meta_response)
}
get_contract_meta_response::get_contract_meta_response(const get_contract_meta_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::koinos::contract_meta_store::contract_meta_item(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.contract_meta_store.get_contract_meta_response)
}

inline void get_contract_meta_response::SharedCtor() {
meta_ = nullptr;
}

get_contract_meta_response::~get_contract_meta_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.contract_meta_store.get_contract_meta_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_contract_meta_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete meta_;
}

void get_contract_meta_response::ArenaDtor(void* object) {
  get_contract_meta_response* _this = reinterpret_cast< get_contract_meta_response* >(object);
  (void)_this;
}
void get_contract_meta_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_meta_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_contract_meta_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.contract_meta_store.get_contract_meta_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_meta_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.contract_meta_store.contract_meta_item meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_meta_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.contract_meta_store.get_contract_meta_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.contract_meta_store.contract_meta_item meta = 1;
  if (this->_internal_has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.contract_meta_store.get_contract_meta_response)
  return target;
}

size_t get_contract_meta_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.contract_meta_store.get_contract_meta_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.contract_meta_store.contract_meta_item meta = 1;
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_contract_meta_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_contract_meta_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_contract_meta_response::GetClassData() const { return &_class_data_; }

void get_contract_meta_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_contract_meta_response *>(to)->MergeFrom(
      static_cast<const get_contract_meta_response &>(from));
}


void get_contract_meta_response::MergeFrom(const get_contract_meta_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.contract_meta_store.get_contract_meta_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_meta()) {
    _internal_mutable_meta()->::koinos::contract_meta_store::contract_meta_item::MergeFrom(from._internal_meta());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_contract_meta_response::CopyFrom(const get_contract_meta_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.contract_meta_store.get_contract_meta_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_meta_response::IsInitialized() const {
  return true;
}

void get_contract_meta_response::InternalSwap(get_contract_meta_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(meta_, other->meta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_meta_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto[1]);
}

// ===================================================================

class contract_meta_store_request::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const contract_meta_store_request* msg);
  static const ::koinos::rpc::contract_meta_store::get_contract_meta_request& get_contract_meta(const contract_meta_store_request* msg);
};

const ::koinos::rpc::reserved_rpc&
contract_meta_store_request::_Internal::reserved(const contract_meta_store_request* msg) {
  return *msg->request_.reserved_;
}
const ::koinos::rpc::contract_meta_store::get_contract_meta_request&
contract_meta_store_request::_Internal::get_contract_meta(const contract_meta_store_request* msg) {
  return *msg->request_.get_contract_meta_;
}
void contract_meta_store_request::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.contract_meta_store.contract_meta_store_request.reserved)
}
void contract_meta_store_request::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.reserved_;
    }
    clear_has_request();
  }
}
void contract_meta_store_request::set_allocated_get_contract_meta(::koinos::rpc::contract_meta_store::get_contract_meta_request* get_contract_meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_contract_meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::contract_meta_store::get_contract_meta_request>::GetOwningArena(get_contract_meta);
    if (message_arena != submessage_arena) {
      get_contract_meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_contract_meta, submessage_arena);
    }
    set_has_get_contract_meta();
    request_.get_contract_meta_ = get_contract_meta;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.contract_meta_store.contract_meta_store_request.get_contract_meta)
}
contract_meta_store_request::contract_meta_store_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.contract_meta_store.contract_meta_store_request)
}
contract_meta_store_request::contract_meta_store_request(const contract_meta_store_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kGetContractMeta: {
      _internal_mutable_get_contract_meta()->::koinos::rpc::contract_meta_store::get_contract_meta_request::MergeFrom(from._internal_get_contract_meta());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.contract_meta_store.contract_meta_store_request)
}

inline void contract_meta_store_request::SharedCtor() {
clear_has_request();
}

contract_meta_store_request::~contract_meta_store_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.contract_meta_store.contract_meta_store_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void contract_meta_store_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void contract_meta_store_request::ArenaDtor(void* object) {
  contract_meta_store_request* _this = reinterpret_cast< contract_meta_store_request* >(object);
  (void)_this;
}
void contract_meta_store_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void contract_meta_store_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void contract_meta_store_request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.contract_meta_store.contract_meta_store_request)
  switch (request_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.reserved_;
      }
      break;
    }
    case kGetContractMeta: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_contract_meta_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void contract_meta_store_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.contract_meta_store.contract_meta_store_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contract_meta_store_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.contract_meta_store.get_contract_meta_request get_contract_meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_contract_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* contract_meta_store_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.contract_meta_store.contract_meta_store_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.contract_meta_store.get_contract_meta_request get_contract_meta = 2;
  if (_internal_has_get_contract_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::get_contract_meta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.contract_meta_store.contract_meta_store_request)
  return target;
}

size_t contract_meta_store_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.contract_meta_store.contract_meta_store_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.reserved_);
      break;
    }
    // .koinos.rpc.contract_meta_store.get_contract_meta_request get_contract_meta = 2;
    case kGetContractMeta: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_contract_meta_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData contract_meta_store_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    contract_meta_store_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*contract_meta_store_request::GetClassData() const { return &_class_data_; }

void contract_meta_store_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<contract_meta_store_request *>(to)->MergeFrom(
      static_cast<const contract_meta_store_request &>(from));
}


void contract_meta_store_request::MergeFrom(const contract_meta_store_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.contract_meta_store.contract_meta_store_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kGetContractMeta: {
      _internal_mutable_get_contract_meta()->::koinos::rpc::contract_meta_store::get_contract_meta_request::MergeFrom(from._internal_get_contract_meta());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void contract_meta_store_request::CopyFrom(const contract_meta_store_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.contract_meta_store.contract_meta_store_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contract_meta_store_request::IsInitialized() const {
  return true;
}

void contract_meta_store_request::InternalSwap(contract_meta_store_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata contract_meta_store_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto[2]);
}

// ===================================================================

class contract_meta_store_response::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const contract_meta_store_response* msg);
  static const ::koinos::rpc::error_response& error(const contract_meta_store_response* msg);
  static const ::koinos::rpc::contract_meta_store::get_contract_meta_response& get_contract_meta(const contract_meta_store_response* msg);
};

const ::koinos::rpc::reserved_rpc&
contract_meta_store_response::_Internal::reserved(const contract_meta_store_response* msg) {
  return *msg->response_.reserved_;
}
const ::koinos::rpc::error_response&
contract_meta_store_response::_Internal::error(const contract_meta_store_response* msg) {
  return *msg->response_.error_;
}
const ::koinos::rpc::contract_meta_store::get_contract_meta_response&
contract_meta_store_response::_Internal::get_contract_meta(const contract_meta_store_response* msg) {
  return *msg->response_.get_contract_meta_;
}
void contract_meta_store_response::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.contract_meta_store.contract_meta_store_response.reserved)
}
void contract_meta_store_response::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.reserved_;
    }
    clear_has_response();
  }
}
void contract_meta_store_response::set_allocated_error(::koinos::rpc::error_response* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.contract_meta_store.contract_meta_store_response.error)
}
void contract_meta_store_response::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
void contract_meta_store_response::set_allocated_get_contract_meta(::koinos::rpc::contract_meta_store::get_contract_meta_response* get_contract_meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_contract_meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::contract_meta_store::get_contract_meta_response>::GetOwningArena(get_contract_meta);
    if (message_arena != submessage_arena) {
      get_contract_meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_contract_meta, submessage_arena);
    }
    set_has_get_contract_meta();
    response_.get_contract_meta_ = get_contract_meta;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.contract_meta_store.contract_meta_store_response.get_contract_meta)
}
contract_meta_store_response::contract_meta_store_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.contract_meta_store.contract_meta_store_response)
}
contract_meta_store_response::contract_meta_store_response(const contract_meta_store_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_response::MergeFrom(from._internal_error());
      break;
    }
    case kGetContractMeta: {
      _internal_mutable_get_contract_meta()->::koinos::rpc::contract_meta_store::get_contract_meta_response::MergeFrom(from._internal_get_contract_meta());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.contract_meta_store.contract_meta_store_response)
}

inline void contract_meta_store_response::SharedCtor() {
clear_has_response();
}

contract_meta_store_response::~contract_meta_store_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.contract_meta_store.contract_meta_store_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void contract_meta_store_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void contract_meta_store_response::ArenaDtor(void* object) {
  contract_meta_store_response* _this = reinterpret_cast< contract_meta_store_response* >(object);
  (void)_this;
}
void contract_meta_store_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void contract_meta_store_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void contract_meta_store_response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.contract_meta_store.contract_meta_store_response)
  switch (response_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.reserved_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case kGetContractMeta: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_contract_meta_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void contract_meta_store_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.contract_meta_store.contract_meta_store_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contract_meta_store_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.error_response error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.contract_meta_store.get_contract_meta_response get_contract_meta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_contract_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* contract_meta_store_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.contract_meta_store.contract_meta_store_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.error_response error = 2;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // .koinos.rpc.contract_meta_store.get_contract_meta_response get_contract_meta = 3;
  if (_internal_has_get_contract_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get_contract_meta(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.contract_meta_store.contract_meta_store_response)
  return target;
}

size_t contract_meta_store_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.contract_meta_store.contract_meta_store_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.reserved_);
      break;
    }
    // .koinos.rpc.error_response error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    // .koinos.rpc.contract_meta_store.get_contract_meta_response get_contract_meta = 3;
    case kGetContractMeta: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_contract_meta_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData contract_meta_store_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    contract_meta_store_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*contract_meta_store_response::GetClassData() const { return &_class_data_; }

void contract_meta_store_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<contract_meta_store_response *>(to)->MergeFrom(
      static_cast<const contract_meta_store_response &>(from));
}


void contract_meta_store_response::MergeFrom(const contract_meta_store_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.contract_meta_store.contract_meta_store_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_response::MergeFrom(from._internal_error());
      break;
    }
    case kGetContractMeta: {
      _internal_mutable_get_contract_meta()->::koinos::rpc::contract_meta_store::get_contract_meta_response::MergeFrom(from._internal_get_contract_meta());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void contract_meta_store_response::CopyFrom(const contract_meta_store_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.contract_meta_store.contract_meta_store_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contract_meta_store_response::IsInitialized() const {
  return true;
}

void contract_meta_store_response::InternalSwap(contract_meta_store_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata contract_meta_store_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace contract_meta_store
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::rpc::contract_meta_store::get_contract_meta_request* Arena::CreateMaybeMessage< ::koinos::rpc::contract_meta_store::get_contract_meta_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::contract_meta_store::get_contract_meta_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::contract_meta_store::get_contract_meta_response* Arena::CreateMaybeMessage< ::koinos::rpc::contract_meta_store::get_contract_meta_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::contract_meta_store::get_contract_meta_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::contract_meta_store::contract_meta_store_request* Arena::CreateMaybeMessage< ::koinos::rpc::contract_meta_store::contract_meta_store_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::contract_meta_store::contract_meta_store_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::contract_meta_store::contract_meta_store_response* Arena::CreateMaybeMessage< ::koinos::rpc::contract_meta_store::contract_meta_store_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::contract_meta_store::contract_meta_store_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
