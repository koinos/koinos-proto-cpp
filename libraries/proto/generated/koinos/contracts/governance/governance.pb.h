// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/contracts/governance/governance.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "koinos/options.pb.h"
#include "koinos/protocol/protocol.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
namespace koinos {
namespace contracts {
namespace governance {
class block_callback_arguments;
struct block_callback_argumentsDefaultTypeInternal;
extern block_callback_argumentsDefaultTypeInternal _block_callback_arguments_default_instance_;
class block_callback_result;
struct block_callback_resultDefaultTypeInternal;
extern block_callback_resultDefaultTypeInternal _block_callback_result_default_instance_;
class get_proposal_by_id_arguments;
struct get_proposal_by_id_argumentsDefaultTypeInternal;
extern get_proposal_by_id_argumentsDefaultTypeInternal _get_proposal_by_id_arguments_default_instance_;
class get_proposal_by_id_result;
struct get_proposal_by_id_resultDefaultTypeInternal;
extern get_proposal_by_id_resultDefaultTypeInternal _get_proposal_by_id_result_default_instance_;
class get_proposals_arguments;
struct get_proposals_argumentsDefaultTypeInternal;
extern get_proposals_argumentsDefaultTypeInternal _get_proposals_arguments_default_instance_;
class get_proposals_by_status_arguments;
struct get_proposals_by_status_argumentsDefaultTypeInternal;
extern get_proposals_by_status_argumentsDefaultTypeInternal _get_proposals_by_status_arguments_default_instance_;
class get_proposals_by_status_result;
struct get_proposals_by_status_resultDefaultTypeInternal;
extern get_proposals_by_status_resultDefaultTypeInternal _get_proposals_by_status_result_default_instance_;
class get_proposals_result;
struct get_proposals_resultDefaultTypeInternal;
extern get_proposals_resultDefaultTypeInternal _get_proposals_result_default_instance_;
class proposal_record;
struct proposal_recordDefaultTypeInternal;
extern proposal_recordDefaultTypeInternal _proposal_record_default_instance_;
class proposal_status_event;
struct proposal_status_eventDefaultTypeInternal;
extern proposal_status_eventDefaultTypeInternal _proposal_status_event_default_instance_;
class proposal_submission_event;
struct proposal_submission_eventDefaultTypeInternal;
extern proposal_submission_eventDefaultTypeInternal _proposal_submission_event_default_instance_;
class proposal_vote_event;
struct proposal_vote_eventDefaultTypeInternal;
extern proposal_vote_eventDefaultTypeInternal _proposal_vote_event_default_instance_;
class submit_proposal_arguments;
struct submit_proposal_argumentsDefaultTypeInternal;
extern submit_proposal_argumentsDefaultTypeInternal _submit_proposal_arguments_default_instance_;
class submit_proposal_result;
struct submit_proposal_resultDefaultTypeInternal;
extern submit_proposal_resultDefaultTypeInternal _submit_proposal_result_default_instance_;
}  // namespace governance
}  // namespace contracts
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::contracts::governance::block_callback_arguments* Arena::CreateMaybeMessage<::koinos::contracts::governance::block_callback_arguments>(Arena*);
template<> ::koinos::contracts::governance::block_callback_result* Arena::CreateMaybeMessage<::koinos::contracts::governance::block_callback_result>(Arena*);
template<> ::koinos::contracts::governance::get_proposal_by_id_arguments* Arena::CreateMaybeMessage<::koinos::contracts::governance::get_proposal_by_id_arguments>(Arena*);
template<> ::koinos::contracts::governance::get_proposal_by_id_result* Arena::CreateMaybeMessage<::koinos::contracts::governance::get_proposal_by_id_result>(Arena*);
template<> ::koinos::contracts::governance::get_proposals_arguments* Arena::CreateMaybeMessage<::koinos::contracts::governance::get_proposals_arguments>(Arena*);
template<> ::koinos::contracts::governance::get_proposals_by_status_arguments* Arena::CreateMaybeMessage<::koinos::contracts::governance::get_proposals_by_status_arguments>(Arena*);
template<> ::koinos::contracts::governance::get_proposals_by_status_result* Arena::CreateMaybeMessage<::koinos::contracts::governance::get_proposals_by_status_result>(Arena*);
template<> ::koinos::contracts::governance::get_proposals_result* Arena::CreateMaybeMessage<::koinos::contracts::governance::get_proposals_result>(Arena*);
template<> ::koinos::contracts::governance::proposal_record* Arena::CreateMaybeMessage<::koinos::contracts::governance::proposal_record>(Arena*);
template<> ::koinos::contracts::governance::proposal_status_event* Arena::CreateMaybeMessage<::koinos::contracts::governance::proposal_status_event>(Arena*);
template<> ::koinos::contracts::governance::proposal_submission_event* Arena::CreateMaybeMessage<::koinos::contracts::governance::proposal_submission_event>(Arena*);
template<> ::koinos::contracts::governance::proposal_vote_event* Arena::CreateMaybeMessage<::koinos::contracts::governance::proposal_vote_event>(Arena*);
template<> ::koinos::contracts::governance::submit_proposal_arguments* Arena::CreateMaybeMessage<::koinos::contracts::governance::submit_proposal_arguments>(Arena*);
template<> ::koinos::contracts::governance::submit_proposal_result* Arena::CreateMaybeMessage<::koinos::contracts::governance::submit_proposal_result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace contracts {
namespace governance {

enum proposal_status : int {
  pending = 0,
  active = 1,
  approved = 2,
  expired = 3,
  applied = 4,
  proposal_status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  proposal_status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool proposal_status_IsValid(int value);
constexpr proposal_status proposal_status_MIN = pending;
constexpr proposal_status proposal_status_MAX = applied;
constexpr int proposal_status_ARRAYSIZE = proposal_status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* proposal_status_descriptor();
template<typename T>
inline const std::string& proposal_status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, proposal_status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function proposal_status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    proposal_status_descriptor(), enum_t_value);
}
inline bool proposal_status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, proposal_status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<proposal_status>(
    proposal_status_descriptor(), name, value);
}
// ===================================================================

class proposal_record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.proposal_record) */ {
 public:
  inline proposal_record() : proposal_record(nullptr) {}
  ~proposal_record() override;
  explicit constexpr proposal_record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  proposal_record(const proposal_record& from);
  proposal_record(proposal_record&& from) noexcept
    : proposal_record() {
    *this = ::std::move(from);
  }

  inline proposal_record& operator=(const proposal_record& from) {
    CopyFrom(from);
    return *this;
  }
  inline proposal_record& operator=(proposal_record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const proposal_record& default_instance() {
    return *internal_default_instance();
  }
  static inline const proposal_record* internal_default_instance() {
    return reinterpret_cast<const proposal_record*>(
               &_proposal_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(proposal_record& a, proposal_record& b) {
    a.Swap(&b);
  }
  inline void Swap(proposal_record* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(proposal_record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline proposal_record* New() const final {
    return new proposal_record();
  }

  proposal_record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<proposal_record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const proposal_record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const proposal_record& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proposal_record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.proposal_record";
  }
  protected:
  explicit proposal_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalFieldNumber = 1,
    kVoteStartHeightFieldNumber = 2,
    kVoteTallyFieldNumber = 3,
    kVoteThresholdFieldNumber = 4,
    kShallAuthorizeFieldNumber = 5,
    kUpdatesGovernanceFieldNumber = 6,
    kStatusFieldNumber = 7,
  };
  // .koinos.protocol.transaction proposal = 1;
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::koinos::protocol::transaction& proposal() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::transaction* release_proposal();
  ::koinos::protocol::transaction* mutable_proposal();
  void set_allocated_proposal(::koinos::protocol::transaction* proposal);
  private:
  const ::koinos::protocol::transaction& _internal_proposal() const;
  ::koinos::protocol::transaction* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::koinos::protocol::transaction* proposal);
  ::koinos::protocol::transaction* unsafe_arena_release_proposal();

  // uint64 vote_start_height = 2;
  void clear_vote_start_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 vote_start_height() const;
  void set_vote_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_vote_start_height() const;
  void _internal_set_vote_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 vote_tally = 3;
  void clear_vote_tally();
  ::PROTOBUF_NAMESPACE_ID::uint64 vote_tally() const;
  void set_vote_tally(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_vote_tally() const;
  void _internal_set_vote_tally(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 vote_threshold = 4;
  void clear_vote_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint64 vote_threshold() const;
  void set_vote_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_vote_threshold() const;
  void _internal_set_vote_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool shall_authorize = 5;
  void clear_shall_authorize();
  bool shall_authorize() const;
  void set_shall_authorize(bool value);
  private:
  bool _internal_shall_authorize() const;
  void _internal_set_shall_authorize(bool value);
  public:

  // bool updates_governance = 6;
  void clear_updates_governance();
  bool updates_governance() const;
  void set_updates_governance(bool value);
  private:
  bool _internal_updates_governance() const;
  void _internal_set_updates_governance(bool value);
  public:

  // .koinos.contracts.governance.proposal_status status = 7;
  void clear_status();
  ::koinos::contracts::governance::proposal_status status() const;
  void set_status(::koinos::contracts::governance::proposal_status value);
  private:
  ::koinos::contracts::governance::proposal_status _internal_status() const;
  void _internal_set_status(::koinos::contracts::governance::proposal_status value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.proposal_record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::transaction* proposal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vote_start_height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vote_tally_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vote_threshold_;
  bool shall_authorize_;
  bool updates_governance_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// -------------------------------------------------------------------

class submit_proposal_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.submit_proposal_arguments) */ {
 public:
  inline submit_proposal_arguments() : submit_proposal_arguments(nullptr) {}
  ~submit_proposal_arguments() override;
  explicit constexpr submit_proposal_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  submit_proposal_arguments(const submit_proposal_arguments& from);
  submit_proposal_arguments(submit_proposal_arguments&& from) noexcept
    : submit_proposal_arguments() {
    *this = ::std::move(from);
  }

  inline submit_proposal_arguments& operator=(const submit_proposal_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline submit_proposal_arguments& operator=(submit_proposal_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const submit_proposal_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const submit_proposal_arguments* internal_default_instance() {
    return reinterpret_cast<const submit_proposal_arguments*>(
               &_submit_proposal_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(submit_proposal_arguments& a, submit_proposal_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(submit_proposal_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(submit_proposal_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline submit_proposal_arguments* New() const final {
    return new submit_proposal_arguments();
  }

  submit_proposal_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<submit_proposal_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const submit_proposal_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const submit_proposal_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(submit_proposal_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.submit_proposal_arguments";
  }
  protected:
  explicit submit_proposal_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalFieldNumber = 1,
    kFeeFieldNumber = 2,
  };
  // .koinos.protocol.transaction proposal = 1;
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::koinos::protocol::transaction& proposal() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::transaction* release_proposal();
  ::koinos::protocol::transaction* mutable_proposal();
  void set_allocated_proposal(::koinos::protocol::transaction* proposal);
  private:
  const ::koinos::protocol::transaction& _internal_proposal() const;
  ::koinos::protocol::transaction* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::koinos::protocol::transaction* proposal);
  ::koinos::protocol::transaction* unsafe_arena_release_proposal();

  // uint64 fee = 2;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.submit_proposal_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::transaction* proposal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// -------------------------------------------------------------------

class submit_proposal_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.submit_proposal_result) */ {
 public:
  inline submit_proposal_result() : submit_proposal_result(nullptr) {}
  ~submit_proposal_result() override;
  explicit constexpr submit_proposal_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  submit_proposal_result(const submit_proposal_result& from);
  submit_proposal_result(submit_proposal_result&& from) noexcept
    : submit_proposal_result() {
    *this = ::std::move(from);
  }

  inline submit_proposal_result& operator=(const submit_proposal_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline submit_proposal_result& operator=(submit_proposal_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const submit_proposal_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const submit_proposal_result* internal_default_instance() {
    return reinterpret_cast<const submit_proposal_result*>(
               &_submit_proposal_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(submit_proposal_result& a, submit_proposal_result& b) {
    a.Swap(&b);
  }
  inline void Swap(submit_proposal_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(submit_proposal_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline submit_proposal_result* New() const final {
    return new submit_proposal_result();
  }

  submit_proposal_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<submit_proposal_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const submit_proposal_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const submit_proposal_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(submit_proposal_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.submit_proposal_result";
  }
  protected:
  explicit submit_proposal_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.submit_proposal_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// -------------------------------------------------------------------

class get_proposal_by_id_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.get_proposal_by_id_arguments) */ {
 public:
  inline get_proposal_by_id_arguments() : get_proposal_by_id_arguments(nullptr) {}
  ~get_proposal_by_id_arguments() override;
  explicit constexpr get_proposal_by_id_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_proposal_by_id_arguments(const get_proposal_by_id_arguments& from);
  get_proposal_by_id_arguments(get_proposal_by_id_arguments&& from) noexcept
    : get_proposal_by_id_arguments() {
    *this = ::std::move(from);
  }

  inline get_proposal_by_id_arguments& operator=(const get_proposal_by_id_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_proposal_by_id_arguments& operator=(get_proposal_by_id_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_proposal_by_id_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_proposal_by_id_arguments* internal_default_instance() {
    return reinterpret_cast<const get_proposal_by_id_arguments*>(
               &_get_proposal_by_id_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(get_proposal_by_id_arguments& a, get_proposal_by_id_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(get_proposal_by_id_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_proposal_by_id_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_proposal_by_id_arguments* New() const final {
    return new get_proposal_by_id_arguments();
  }

  get_proposal_by_id_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_proposal_by_id_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_proposal_by_id_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_proposal_by_id_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_proposal_by_id_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.get_proposal_by_id_arguments";
  }
  protected:
  explicit get_proposal_by_id_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // bytes proposal_id = 1 [(.koinos.btype) = TRANSACTION_ID];
  void clear_proposal_id();
  const std::string& proposal_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proposal_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proposal_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_proposal_id();
  void set_allocated_proposal_id(std::string* proposal_id);
  private:
  const std::string& _internal_proposal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposal_id(const std::string& value);
  std::string* _internal_mutable_proposal_id();
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.get_proposal_by_id_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposal_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// -------------------------------------------------------------------

class get_proposal_by_id_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.get_proposal_by_id_result) */ {
 public:
  inline get_proposal_by_id_result() : get_proposal_by_id_result(nullptr) {}
  ~get_proposal_by_id_result() override;
  explicit constexpr get_proposal_by_id_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_proposal_by_id_result(const get_proposal_by_id_result& from);
  get_proposal_by_id_result(get_proposal_by_id_result&& from) noexcept
    : get_proposal_by_id_result() {
    *this = ::std::move(from);
  }

  inline get_proposal_by_id_result& operator=(const get_proposal_by_id_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_proposal_by_id_result& operator=(get_proposal_by_id_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_proposal_by_id_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_proposal_by_id_result* internal_default_instance() {
    return reinterpret_cast<const get_proposal_by_id_result*>(
               &_get_proposal_by_id_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(get_proposal_by_id_result& a, get_proposal_by_id_result& b) {
    a.Swap(&b);
  }
  inline void Swap(get_proposal_by_id_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_proposal_by_id_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_proposal_by_id_result* New() const final {
    return new get_proposal_by_id_result();
  }

  get_proposal_by_id_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_proposal_by_id_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_proposal_by_id_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_proposal_by_id_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_proposal_by_id_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.get_proposal_by_id_result";
  }
  protected:
  explicit get_proposal_by_id_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .koinos.contracts.governance.proposal_record value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::koinos::contracts::governance::proposal_record& value() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::contracts::governance::proposal_record* release_value();
  ::koinos::contracts::governance::proposal_record* mutable_value();
  void set_allocated_value(::koinos::contracts::governance::proposal_record* value);
  private:
  const ::koinos::contracts::governance::proposal_record& _internal_value() const;
  ::koinos::contracts::governance::proposal_record* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::koinos::contracts::governance::proposal_record* value);
  ::koinos::contracts::governance::proposal_record* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.get_proposal_by_id_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::contracts::governance::proposal_record* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// -------------------------------------------------------------------

class get_proposals_by_status_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.get_proposals_by_status_arguments) */ {
 public:
  inline get_proposals_by_status_arguments() : get_proposals_by_status_arguments(nullptr) {}
  ~get_proposals_by_status_arguments() override;
  explicit constexpr get_proposals_by_status_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_proposals_by_status_arguments(const get_proposals_by_status_arguments& from);
  get_proposals_by_status_arguments(get_proposals_by_status_arguments&& from) noexcept
    : get_proposals_by_status_arguments() {
    *this = ::std::move(from);
  }

  inline get_proposals_by_status_arguments& operator=(const get_proposals_by_status_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_proposals_by_status_arguments& operator=(get_proposals_by_status_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_proposals_by_status_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_proposals_by_status_arguments* internal_default_instance() {
    return reinterpret_cast<const get_proposals_by_status_arguments*>(
               &_get_proposals_by_status_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(get_proposals_by_status_arguments& a, get_proposals_by_status_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(get_proposals_by_status_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_proposals_by_status_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_proposals_by_status_arguments* New() const final {
    return new get_proposals_by_status_arguments();
  }

  get_proposals_by_status_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_proposals_by_status_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_proposals_by_status_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_proposals_by_status_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_proposals_by_status_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.get_proposals_by_status_arguments";
  }
  protected:
  explicit get_proposals_by_status_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartProposalFieldNumber = 1,
    kLimitFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // bytes start_proposal = 1 [(.koinos.btype) = TRANSACTION_ID];
  void clear_start_proposal();
  const std::string& start_proposal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_proposal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_proposal();
  PROTOBUF_MUST_USE_RESULT std::string* release_start_proposal();
  void set_allocated_start_proposal(std::string* start_proposal);
  private:
  const std::string& _internal_start_proposal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_proposal(const std::string& value);
  std::string* _internal_mutable_start_proposal();
  public:

  // uint64 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .koinos.contracts.governance.proposal_status status = 3;
  void clear_status();
  ::koinos::contracts::governance::proposal_status status() const;
  void set_status(::koinos::contracts::governance::proposal_status value);
  private:
  ::koinos::contracts::governance::proposal_status _internal_status() const;
  void _internal_set_status(::koinos::contracts::governance::proposal_status value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.get_proposals_by_status_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_proposal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// -------------------------------------------------------------------

class get_proposals_by_status_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.get_proposals_by_status_result) */ {
 public:
  inline get_proposals_by_status_result() : get_proposals_by_status_result(nullptr) {}
  ~get_proposals_by_status_result() override;
  explicit constexpr get_proposals_by_status_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_proposals_by_status_result(const get_proposals_by_status_result& from);
  get_proposals_by_status_result(get_proposals_by_status_result&& from) noexcept
    : get_proposals_by_status_result() {
    *this = ::std::move(from);
  }

  inline get_proposals_by_status_result& operator=(const get_proposals_by_status_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_proposals_by_status_result& operator=(get_proposals_by_status_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_proposals_by_status_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_proposals_by_status_result* internal_default_instance() {
    return reinterpret_cast<const get_proposals_by_status_result*>(
               &_get_proposals_by_status_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(get_proposals_by_status_result& a, get_proposals_by_status_result& b) {
    a.Swap(&b);
  }
  inline void Swap(get_proposals_by_status_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_proposals_by_status_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_proposals_by_status_result* New() const final {
    return new get_proposals_by_status_result();
  }

  get_proposals_by_status_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_proposals_by_status_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_proposals_by_status_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_proposals_by_status_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_proposals_by_status_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.get_proposals_by_status_result";
  }
  protected:
  explicit get_proposals_by_status_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .koinos.contracts.governance.proposal_record value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::koinos::contracts::governance::proposal_record* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::contracts::governance::proposal_record >*
      mutable_value();
  private:
  const ::koinos::contracts::governance::proposal_record& _internal_value(int index) const;
  ::koinos::contracts::governance::proposal_record* _internal_add_value();
  public:
  const ::koinos::contracts::governance::proposal_record& value(int index) const;
  ::koinos::contracts::governance::proposal_record* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::contracts::governance::proposal_record >&
      value() const;

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.get_proposals_by_status_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::contracts::governance::proposal_record > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// -------------------------------------------------------------------

class get_proposals_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.get_proposals_arguments) */ {
 public:
  inline get_proposals_arguments() : get_proposals_arguments(nullptr) {}
  ~get_proposals_arguments() override;
  explicit constexpr get_proposals_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_proposals_arguments(const get_proposals_arguments& from);
  get_proposals_arguments(get_proposals_arguments&& from) noexcept
    : get_proposals_arguments() {
    *this = ::std::move(from);
  }

  inline get_proposals_arguments& operator=(const get_proposals_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_proposals_arguments& operator=(get_proposals_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_proposals_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_proposals_arguments* internal_default_instance() {
    return reinterpret_cast<const get_proposals_arguments*>(
               &_get_proposals_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(get_proposals_arguments& a, get_proposals_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(get_proposals_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_proposals_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_proposals_arguments* New() const final {
    return new get_proposals_arguments();
  }

  get_proposals_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_proposals_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_proposals_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_proposals_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_proposals_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.get_proposals_arguments";
  }
  protected:
  explicit get_proposals_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartProposalFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // bytes start_proposal = 1 [(.koinos.btype) = TRANSACTION_ID];
  void clear_start_proposal();
  const std::string& start_proposal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start_proposal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start_proposal();
  PROTOBUF_MUST_USE_RESULT std::string* release_start_proposal();
  void set_allocated_start_proposal(std::string* start_proposal);
  private:
  const std::string& _internal_start_proposal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_proposal(const std::string& value);
  std::string* _internal_mutable_start_proposal();
  public:

  // uint64 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.get_proposals_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_proposal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// -------------------------------------------------------------------

class get_proposals_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.get_proposals_result) */ {
 public:
  inline get_proposals_result() : get_proposals_result(nullptr) {}
  ~get_proposals_result() override;
  explicit constexpr get_proposals_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_proposals_result(const get_proposals_result& from);
  get_proposals_result(get_proposals_result&& from) noexcept
    : get_proposals_result() {
    *this = ::std::move(from);
  }

  inline get_proposals_result& operator=(const get_proposals_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_proposals_result& operator=(get_proposals_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_proposals_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_proposals_result* internal_default_instance() {
    return reinterpret_cast<const get_proposals_result*>(
               &_get_proposals_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(get_proposals_result& a, get_proposals_result& b) {
    a.Swap(&b);
  }
  inline void Swap(get_proposals_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_proposals_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_proposals_result* New() const final {
    return new get_proposals_result();
  }

  get_proposals_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_proposals_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_proposals_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_proposals_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_proposals_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.get_proposals_result";
  }
  protected:
  explicit get_proposals_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .koinos.contracts.governance.proposal_record value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::koinos::contracts::governance::proposal_record* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::contracts::governance::proposal_record >*
      mutable_value();
  private:
  const ::koinos::contracts::governance::proposal_record& _internal_value(int index) const;
  ::koinos::contracts::governance::proposal_record* _internal_add_value();
  public:
  const ::koinos::contracts::governance::proposal_record& value(int index) const;
  ::koinos::contracts::governance::proposal_record* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::contracts::governance::proposal_record >&
      value() const;

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.get_proposals_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::contracts::governance::proposal_record > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// -------------------------------------------------------------------

class proposal_submission_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.proposal_submission_event) */ {
 public:
  inline proposal_submission_event() : proposal_submission_event(nullptr) {}
  ~proposal_submission_event() override;
  explicit constexpr proposal_submission_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  proposal_submission_event(const proposal_submission_event& from);
  proposal_submission_event(proposal_submission_event&& from) noexcept
    : proposal_submission_event() {
    *this = ::std::move(from);
  }

  inline proposal_submission_event& operator=(const proposal_submission_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline proposal_submission_event& operator=(proposal_submission_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const proposal_submission_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const proposal_submission_event* internal_default_instance() {
    return reinterpret_cast<const proposal_submission_event*>(
               &_proposal_submission_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(proposal_submission_event& a, proposal_submission_event& b) {
    a.Swap(&b);
  }
  inline void Swap(proposal_submission_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(proposal_submission_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline proposal_submission_event* New() const final {
    return new proposal_submission_event();
  }

  proposal_submission_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<proposal_submission_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const proposal_submission_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const proposal_submission_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proposal_submission_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.proposal_submission_event";
  }
  protected:
  explicit proposal_submission_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalFieldNumber = 1,
  };
  // .koinos.contracts.governance.proposal_record proposal = 1;
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::koinos::contracts::governance::proposal_record& proposal() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::contracts::governance::proposal_record* release_proposal();
  ::koinos::contracts::governance::proposal_record* mutable_proposal();
  void set_allocated_proposal(::koinos::contracts::governance::proposal_record* proposal);
  private:
  const ::koinos::contracts::governance::proposal_record& _internal_proposal() const;
  ::koinos::contracts::governance::proposal_record* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::koinos::contracts::governance::proposal_record* proposal);
  ::koinos::contracts::governance::proposal_record* unsafe_arena_release_proposal();

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.proposal_submission_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::contracts::governance::proposal_record* proposal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// -------------------------------------------------------------------

class proposal_status_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.proposal_status_event) */ {
 public:
  inline proposal_status_event() : proposal_status_event(nullptr) {}
  ~proposal_status_event() override;
  explicit constexpr proposal_status_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  proposal_status_event(const proposal_status_event& from);
  proposal_status_event(proposal_status_event&& from) noexcept
    : proposal_status_event() {
    *this = ::std::move(from);
  }

  inline proposal_status_event& operator=(const proposal_status_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline proposal_status_event& operator=(proposal_status_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const proposal_status_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const proposal_status_event* internal_default_instance() {
    return reinterpret_cast<const proposal_status_event*>(
               &_proposal_status_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(proposal_status_event& a, proposal_status_event& b) {
    a.Swap(&b);
  }
  inline void Swap(proposal_status_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(proposal_status_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline proposal_status_event* New() const final {
    return new proposal_status_event();
  }

  proposal_status_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<proposal_status_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const proposal_status_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const proposal_status_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proposal_status_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.proposal_status_event";
  }
  protected:
  explicit proposal_status_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .koinos.contracts.governance.proposal_status status = 2;
  void clear_status();
  ::koinos::contracts::governance::proposal_status status() const;
  void set_status(::koinos::contracts::governance::proposal_status value);
  private:
  ::koinos::contracts::governance::proposal_status _internal_status() const;
  void _internal_set_status(::koinos::contracts::governance::proposal_status value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.proposal_status_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// -------------------------------------------------------------------

class proposal_vote_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.proposal_vote_event) */ {
 public:
  inline proposal_vote_event() : proposal_vote_event(nullptr) {}
  ~proposal_vote_event() override;
  explicit constexpr proposal_vote_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  proposal_vote_event(const proposal_vote_event& from);
  proposal_vote_event(proposal_vote_event&& from) noexcept
    : proposal_vote_event() {
    *this = ::std::move(from);
  }

  inline proposal_vote_event& operator=(const proposal_vote_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline proposal_vote_event& operator=(proposal_vote_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const proposal_vote_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const proposal_vote_event* internal_default_instance() {
    return reinterpret_cast<const proposal_vote_event*>(
               &_proposal_vote_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(proposal_vote_event& a, proposal_vote_event& b) {
    a.Swap(&b);
  }
  inline void Swap(proposal_vote_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(proposal_vote_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline proposal_vote_event* New() const final {
    return new proposal_vote_event();
  }

  proposal_vote_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<proposal_vote_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const proposal_vote_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const proposal_vote_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proposal_vote_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.proposal_vote_event";
  }
  protected:
  explicit proposal_vote_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVoteTallyFieldNumber = 2,
    kVoteThresholdFieldNumber = 3,
  };
  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint64 vote_tally = 2;
  void clear_vote_tally();
  ::PROTOBUF_NAMESPACE_ID::uint64 vote_tally() const;
  void set_vote_tally(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_vote_tally() const;
  void _internal_set_vote_tally(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 vote_threshold = 3;
  void clear_vote_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint64 vote_threshold() const;
  void set_vote_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_vote_threshold() const;
  void _internal_set_vote_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.proposal_vote_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vote_tally_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vote_threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// -------------------------------------------------------------------

class block_callback_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.block_callback_arguments) */ {
 public:
  inline block_callback_arguments() : block_callback_arguments(nullptr) {}
  ~block_callback_arguments() override;
  explicit constexpr block_callback_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_callback_arguments(const block_callback_arguments& from);
  block_callback_arguments(block_callback_arguments&& from) noexcept
    : block_callback_arguments() {
    *this = ::std::move(from);
  }

  inline block_callback_arguments& operator=(const block_callback_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_callback_arguments& operator=(block_callback_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_callback_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const block_callback_arguments* internal_default_instance() {
    return reinterpret_cast<const block_callback_arguments*>(
               &_block_callback_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(block_callback_arguments& a, block_callback_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(block_callback_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_callback_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_callback_arguments* New() const final {
    return new block_callback_arguments();
  }

  block_callback_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_callback_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_callback_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_callback_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_callback_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.block_callback_arguments";
  }
  protected:
  explicit block_callback_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.block_callback_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// -------------------------------------------------------------------

class block_callback_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.governance.block_callback_result) */ {
 public:
  inline block_callback_result() : block_callback_result(nullptr) {}
  ~block_callback_result() override;
  explicit constexpr block_callback_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_callback_result(const block_callback_result& from);
  block_callback_result(block_callback_result&& from) noexcept
    : block_callback_result() {
    *this = ::std::move(from);
  }

  inline block_callback_result& operator=(const block_callback_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_callback_result& operator=(block_callback_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_callback_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const block_callback_result* internal_default_instance() {
    return reinterpret_cast<const block_callback_result*>(
               &_block_callback_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(block_callback_result& a, block_callback_result& b) {
    a.Swap(&b);
  }
  inline void Swap(block_callback_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_callback_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_callback_result* New() const final {
    return new block_callback_result();
  }

  block_callback_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_callback_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_callback_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_callback_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_callback_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.governance.block_callback_result";
  }
  protected:
  explicit block_callback_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.governance.block_callback_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// proposal_record

// .koinos.protocol.transaction proposal = 1;
inline bool proposal_record::_internal_has_proposal() const {
  return this != internal_default_instance() && proposal_ != nullptr;
}
inline bool proposal_record::has_proposal() const {
  return _internal_has_proposal();
}
inline const ::koinos::protocol::transaction& proposal_record::_internal_proposal() const {
  const ::koinos::protocol::transaction* p = proposal_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::transaction&>(
      ::koinos::protocol::_transaction_default_instance_);
}
inline const ::koinos::protocol::transaction& proposal_record::proposal() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.proposal_record.proposal)
  return _internal_proposal();
}
inline void proposal_record::unsafe_arena_set_allocated_proposal(
    ::koinos::protocol::transaction* proposal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_);
  }
  proposal_ = proposal;
  if (proposal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.contracts.governance.proposal_record.proposal)
}
inline ::koinos::protocol::transaction* proposal_record::release_proposal() {
  
  ::koinos::protocol::transaction* temp = proposal_;
  proposal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::transaction* proposal_record::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_release:koinos.contracts.governance.proposal_record.proposal)
  
  ::koinos::protocol::transaction* temp = proposal_;
  proposal_ = nullptr;
  return temp;
}
inline ::koinos::protocol::transaction* proposal_record::_internal_mutable_proposal() {
  
  if (proposal_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::transaction>(GetArenaForAllocation());
    proposal_ = p;
  }
  return proposal_;
}
inline ::koinos::protocol::transaction* proposal_record::mutable_proposal() {
  ::koinos::protocol::transaction* _msg = _internal_mutable_proposal();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.governance.proposal_record.proposal)
  return _msg;
}
inline void proposal_record::set_allocated_proposal(::koinos::protocol::transaction* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_);
  }
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal));
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    
  } else {
    
  }
  proposal_ = proposal;
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.governance.proposal_record.proposal)
}

// uint64 vote_start_height = 2;
inline void proposal_record::clear_vote_start_height() {
  vote_start_height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 proposal_record::_internal_vote_start_height() const {
  return vote_start_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 proposal_record::vote_start_height() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.proposal_record.vote_start_height)
  return _internal_vote_start_height();
}
inline void proposal_record::_internal_set_vote_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  vote_start_height_ = value;
}
inline void proposal_record::set_vote_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_vote_start_height(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.proposal_record.vote_start_height)
}

// uint64 vote_tally = 3;
inline void proposal_record::clear_vote_tally() {
  vote_tally_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 proposal_record::_internal_vote_tally() const {
  return vote_tally_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 proposal_record::vote_tally() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.proposal_record.vote_tally)
  return _internal_vote_tally();
}
inline void proposal_record::_internal_set_vote_tally(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  vote_tally_ = value;
}
inline void proposal_record::set_vote_tally(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_vote_tally(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.proposal_record.vote_tally)
}

// uint64 vote_threshold = 4;
inline void proposal_record::clear_vote_threshold() {
  vote_threshold_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 proposal_record::_internal_vote_threshold() const {
  return vote_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 proposal_record::vote_threshold() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.proposal_record.vote_threshold)
  return _internal_vote_threshold();
}
inline void proposal_record::_internal_set_vote_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  vote_threshold_ = value;
}
inline void proposal_record::set_vote_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_vote_threshold(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.proposal_record.vote_threshold)
}

// bool shall_authorize = 5;
inline void proposal_record::clear_shall_authorize() {
  shall_authorize_ = false;
}
inline bool proposal_record::_internal_shall_authorize() const {
  return shall_authorize_;
}
inline bool proposal_record::shall_authorize() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.proposal_record.shall_authorize)
  return _internal_shall_authorize();
}
inline void proposal_record::_internal_set_shall_authorize(bool value) {
  
  shall_authorize_ = value;
}
inline void proposal_record::set_shall_authorize(bool value) {
  _internal_set_shall_authorize(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.proposal_record.shall_authorize)
}

// bool updates_governance = 6;
inline void proposal_record::clear_updates_governance() {
  updates_governance_ = false;
}
inline bool proposal_record::_internal_updates_governance() const {
  return updates_governance_;
}
inline bool proposal_record::updates_governance() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.proposal_record.updates_governance)
  return _internal_updates_governance();
}
inline void proposal_record::_internal_set_updates_governance(bool value) {
  
  updates_governance_ = value;
}
inline void proposal_record::set_updates_governance(bool value) {
  _internal_set_updates_governance(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.proposal_record.updates_governance)
}

// .koinos.contracts.governance.proposal_status status = 7;
inline void proposal_record::clear_status() {
  status_ = 0;
}
inline ::koinos::contracts::governance::proposal_status proposal_record::_internal_status() const {
  return static_cast< ::koinos::contracts::governance::proposal_status >(status_);
}
inline ::koinos::contracts::governance::proposal_status proposal_record::status() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.proposal_record.status)
  return _internal_status();
}
inline void proposal_record::_internal_set_status(::koinos::contracts::governance::proposal_status value) {
  
  status_ = value;
}
inline void proposal_record::set_status(::koinos::contracts::governance::proposal_status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.proposal_record.status)
}

// -------------------------------------------------------------------

// submit_proposal_arguments

// .koinos.protocol.transaction proposal = 1;
inline bool submit_proposal_arguments::_internal_has_proposal() const {
  return this != internal_default_instance() && proposal_ != nullptr;
}
inline bool submit_proposal_arguments::has_proposal() const {
  return _internal_has_proposal();
}
inline const ::koinos::protocol::transaction& submit_proposal_arguments::_internal_proposal() const {
  const ::koinos::protocol::transaction* p = proposal_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::transaction&>(
      ::koinos::protocol::_transaction_default_instance_);
}
inline const ::koinos::protocol::transaction& submit_proposal_arguments::proposal() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.submit_proposal_arguments.proposal)
  return _internal_proposal();
}
inline void submit_proposal_arguments::unsafe_arena_set_allocated_proposal(
    ::koinos::protocol::transaction* proposal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_);
  }
  proposal_ = proposal;
  if (proposal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.contracts.governance.submit_proposal_arguments.proposal)
}
inline ::koinos::protocol::transaction* submit_proposal_arguments::release_proposal() {
  
  ::koinos::protocol::transaction* temp = proposal_;
  proposal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::transaction* submit_proposal_arguments::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_release:koinos.contracts.governance.submit_proposal_arguments.proposal)
  
  ::koinos::protocol::transaction* temp = proposal_;
  proposal_ = nullptr;
  return temp;
}
inline ::koinos::protocol::transaction* submit_proposal_arguments::_internal_mutable_proposal() {
  
  if (proposal_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::transaction>(GetArenaForAllocation());
    proposal_ = p;
  }
  return proposal_;
}
inline ::koinos::protocol::transaction* submit_proposal_arguments::mutable_proposal() {
  ::koinos::protocol::transaction* _msg = _internal_mutable_proposal();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.governance.submit_proposal_arguments.proposal)
  return _msg;
}
inline void submit_proposal_arguments::set_allocated_proposal(::koinos::protocol::transaction* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_);
  }
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal));
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    
  } else {
    
  }
  proposal_ = proposal;
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.governance.submit_proposal_arguments.proposal)
}

// uint64 fee = 2;
inline void submit_proposal_arguments::clear_fee() {
  fee_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 submit_proposal_arguments::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 submit_proposal_arguments::fee() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.submit_proposal_arguments.fee)
  return _internal_fee();
}
inline void submit_proposal_arguments::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fee_ = value;
}
inline void submit_proposal_arguments::set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.submit_proposal_arguments.fee)
}

// -------------------------------------------------------------------

// submit_proposal_result

// bool value = 1;
inline void submit_proposal_result::clear_value() {
  value_ = false;
}
inline bool submit_proposal_result::_internal_value() const {
  return value_;
}
inline bool submit_proposal_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.submit_proposal_result.value)
  return _internal_value();
}
inline void submit_proposal_result::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void submit_proposal_result::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.submit_proposal_result.value)
}

// -------------------------------------------------------------------

// get_proposal_by_id_arguments

// bytes proposal_id = 1 [(.koinos.btype) = TRANSACTION_ID];
inline void get_proposal_by_id_arguments::clear_proposal_id() {
  proposal_id_.ClearToEmpty();
}
inline const std::string& get_proposal_by_id_arguments::proposal_id() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.get_proposal_by_id_arguments.proposal_id)
  return _internal_proposal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_proposal_by_id_arguments::set_proposal_id(ArgT0&& arg0, ArgT... args) {
 
 proposal_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.get_proposal_by_id_arguments.proposal_id)
}
inline std::string* get_proposal_by_id_arguments::mutable_proposal_id() {
  std::string* _s = _internal_mutable_proposal_id();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.governance.get_proposal_by_id_arguments.proposal_id)
  return _s;
}
inline const std::string& get_proposal_by_id_arguments::_internal_proposal_id() const {
  return proposal_id_.Get();
}
inline void get_proposal_by_id_arguments::_internal_set_proposal_id(const std::string& value) {
  
  proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_proposal_by_id_arguments::_internal_mutable_proposal_id() {
  
  return proposal_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_proposal_by_id_arguments::release_proposal_id() {
  // @@protoc_insertion_point(field_release:koinos.contracts.governance.get_proposal_by_id_arguments.proposal_id)
  return proposal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_proposal_by_id_arguments::set_allocated_proposal_id(std::string* proposal_id) {
  if (proposal_id != nullptr) {
    
  } else {
    
  }
  proposal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposal_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.governance.get_proposal_by_id_arguments.proposal_id)
}

// -------------------------------------------------------------------

// get_proposal_by_id_result

// .koinos.contracts.governance.proposal_record value = 1;
inline bool get_proposal_by_id_result::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool get_proposal_by_id_result::has_value() const {
  return _internal_has_value();
}
inline void get_proposal_by_id_result::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::koinos::contracts::governance::proposal_record& get_proposal_by_id_result::_internal_value() const {
  const ::koinos::contracts::governance::proposal_record* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::contracts::governance::proposal_record&>(
      ::koinos::contracts::governance::_proposal_record_default_instance_);
}
inline const ::koinos::contracts::governance::proposal_record& get_proposal_by_id_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.get_proposal_by_id_result.value)
  return _internal_value();
}
inline void get_proposal_by_id_result::unsafe_arena_set_allocated_value(
    ::koinos::contracts::governance::proposal_record* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.contracts.governance.get_proposal_by_id_result.value)
}
inline ::koinos::contracts::governance::proposal_record* get_proposal_by_id_result::release_value() {
  
  ::koinos::contracts::governance::proposal_record* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::contracts::governance::proposal_record* get_proposal_by_id_result::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:koinos.contracts.governance.get_proposal_by_id_result.value)
  
  ::koinos::contracts::governance::proposal_record* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::koinos::contracts::governance::proposal_record* get_proposal_by_id_result::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::contracts::governance::proposal_record>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::koinos::contracts::governance::proposal_record* get_proposal_by_id_result::mutable_value() {
  ::koinos::contracts::governance::proposal_record* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.governance.get_proposal_by_id_result.value)
  return _msg;
}
inline void get_proposal_by_id_result::set_allocated_value(::koinos::contracts::governance::proposal_record* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::contracts::governance::proposal_record>::GetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.governance.get_proposal_by_id_result.value)
}

// -------------------------------------------------------------------

// get_proposals_by_status_arguments

// bytes start_proposal = 1 [(.koinos.btype) = TRANSACTION_ID];
inline void get_proposals_by_status_arguments::clear_start_proposal() {
  start_proposal_.ClearToEmpty();
}
inline const std::string& get_proposals_by_status_arguments::start_proposal() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.get_proposals_by_status_arguments.start_proposal)
  return _internal_start_proposal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_proposals_by_status_arguments::set_start_proposal(ArgT0&& arg0, ArgT... args) {
 
 start_proposal_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.get_proposals_by_status_arguments.start_proposal)
}
inline std::string* get_proposals_by_status_arguments::mutable_start_proposal() {
  std::string* _s = _internal_mutable_start_proposal();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.governance.get_proposals_by_status_arguments.start_proposal)
  return _s;
}
inline const std::string& get_proposals_by_status_arguments::_internal_start_proposal() const {
  return start_proposal_.Get();
}
inline void get_proposals_by_status_arguments::_internal_set_start_proposal(const std::string& value) {
  
  start_proposal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_proposals_by_status_arguments::_internal_mutable_start_proposal() {
  
  return start_proposal_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_proposals_by_status_arguments::release_start_proposal() {
  // @@protoc_insertion_point(field_release:koinos.contracts.governance.get_proposals_by_status_arguments.start_proposal)
  return start_proposal_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_proposals_by_status_arguments::set_allocated_start_proposal(std::string* start_proposal) {
  if (start_proposal != nullptr) {
    
  } else {
    
  }
  start_proposal_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_proposal,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.governance.get_proposals_by_status_arguments.start_proposal)
}

// uint64 limit = 2;
inline void get_proposals_by_status_arguments::clear_limit() {
  limit_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_proposals_by_status_arguments::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_proposals_by_status_arguments::limit() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.get_proposals_by_status_arguments.limit)
  return _internal_limit();
}
inline void get_proposals_by_status_arguments::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  limit_ = value;
}
inline void get_proposals_by_status_arguments::set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.get_proposals_by_status_arguments.limit)
}

// .koinos.contracts.governance.proposal_status status = 3;
inline void get_proposals_by_status_arguments::clear_status() {
  status_ = 0;
}
inline ::koinos::contracts::governance::proposal_status get_proposals_by_status_arguments::_internal_status() const {
  return static_cast< ::koinos::contracts::governance::proposal_status >(status_);
}
inline ::koinos::contracts::governance::proposal_status get_proposals_by_status_arguments::status() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.get_proposals_by_status_arguments.status)
  return _internal_status();
}
inline void get_proposals_by_status_arguments::_internal_set_status(::koinos::contracts::governance::proposal_status value) {
  
  status_ = value;
}
inline void get_proposals_by_status_arguments::set_status(::koinos::contracts::governance::proposal_status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.get_proposals_by_status_arguments.status)
}

// -------------------------------------------------------------------

// get_proposals_by_status_result

// repeated .koinos.contracts.governance.proposal_record value = 1;
inline int get_proposals_by_status_result::_internal_value_size() const {
  return value_.size();
}
inline int get_proposals_by_status_result::value_size() const {
  return _internal_value_size();
}
inline void get_proposals_by_status_result::clear_value() {
  value_.Clear();
}
inline ::koinos::contracts::governance::proposal_record* get_proposals_by_status_result::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.contracts.governance.get_proposals_by_status_result.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::contracts::governance::proposal_record >*
get_proposals_by_status_result::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:koinos.contracts.governance.get_proposals_by_status_result.value)
  return &value_;
}
inline const ::koinos::contracts::governance::proposal_record& get_proposals_by_status_result::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::koinos::contracts::governance::proposal_record& get_proposals_by_status_result::value(int index) const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.get_proposals_by_status_result.value)
  return _internal_value(index);
}
inline ::koinos::contracts::governance::proposal_record* get_proposals_by_status_result::_internal_add_value() {
  return value_.Add();
}
inline ::koinos::contracts::governance::proposal_record* get_proposals_by_status_result::add_value() {
  ::koinos::contracts::governance::proposal_record* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:koinos.contracts.governance.get_proposals_by_status_result.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::contracts::governance::proposal_record >&
get_proposals_by_status_result::value() const {
  // @@protoc_insertion_point(field_list:koinos.contracts.governance.get_proposals_by_status_result.value)
  return value_;
}

// -------------------------------------------------------------------

// get_proposals_arguments

// bytes start_proposal = 1 [(.koinos.btype) = TRANSACTION_ID];
inline void get_proposals_arguments::clear_start_proposal() {
  start_proposal_.ClearToEmpty();
}
inline const std::string& get_proposals_arguments::start_proposal() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.get_proposals_arguments.start_proposal)
  return _internal_start_proposal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_proposals_arguments::set_start_proposal(ArgT0&& arg0, ArgT... args) {
 
 start_proposal_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.get_proposals_arguments.start_proposal)
}
inline std::string* get_proposals_arguments::mutable_start_proposal() {
  std::string* _s = _internal_mutable_start_proposal();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.governance.get_proposals_arguments.start_proposal)
  return _s;
}
inline const std::string& get_proposals_arguments::_internal_start_proposal() const {
  return start_proposal_.Get();
}
inline void get_proposals_arguments::_internal_set_start_proposal(const std::string& value) {
  
  start_proposal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_proposals_arguments::_internal_mutable_start_proposal() {
  
  return start_proposal_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_proposals_arguments::release_start_proposal() {
  // @@protoc_insertion_point(field_release:koinos.contracts.governance.get_proposals_arguments.start_proposal)
  return start_proposal_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_proposals_arguments::set_allocated_start_proposal(std::string* start_proposal) {
  if (start_proposal != nullptr) {
    
  } else {
    
  }
  start_proposal_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_proposal,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.governance.get_proposals_arguments.start_proposal)
}

// uint64 limit = 2;
inline void get_proposals_arguments::clear_limit() {
  limit_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_proposals_arguments::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_proposals_arguments::limit() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.get_proposals_arguments.limit)
  return _internal_limit();
}
inline void get_proposals_arguments::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  limit_ = value;
}
inline void get_proposals_arguments::set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.get_proposals_arguments.limit)
}

// -------------------------------------------------------------------

// get_proposals_result

// repeated .koinos.contracts.governance.proposal_record value = 1;
inline int get_proposals_result::_internal_value_size() const {
  return value_.size();
}
inline int get_proposals_result::value_size() const {
  return _internal_value_size();
}
inline void get_proposals_result::clear_value() {
  value_.Clear();
}
inline ::koinos::contracts::governance::proposal_record* get_proposals_result::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.contracts.governance.get_proposals_result.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::contracts::governance::proposal_record >*
get_proposals_result::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:koinos.contracts.governance.get_proposals_result.value)
  return &value_;
}
inline const ::koinos::contracts::governance::proposal_record& get_proposals_result::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::koinos::contracts::governance::proposal_record& get_proposals_result::value(int index) const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.get_proposals_result.value)
  return _internal_value(index);
}
inline ::koinos::contracts::governance::proposal_record* get_proposals_result::_internal_add_value() {
  return value_.Add();
}
inline ::koinos::contracts::governance::proposal_record* get_proposals_result::add_value() {
  ::koinos::contracts::governance::proposal_record* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:koinos.contracts.governance.get_proposals_result.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::contracts::governance::proposal_record >&
get_proposals_result::value() const {
  // @@protoc_insertion_point(field_list:koinos.contracts.governance.get_proposals_result.value)
  return value_;
}

// -------------------------------------------------------------------

// proposal_submission_event

// .koinos.contracts.governance.proposal_record proposal = 1;
inline bool proposal_submission_event::_internal_has_proposal() const {
  return this != internal_default_instance() && proposal_ != nullptr;
}
inline bool proposal_submission_event::has_proposal() const {
  return _internal_has_proposal();
}
inline void proposal_submission_event::clear_proposal() {
  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
}
inline const ::koinos::contracts::governance::proposal_record& proposal_submission_event::_internal_proposal() const {
  const ::koinos::contracts::governance::proposal_record* p = proposal_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::contracts::governance::proposal_record&>(
      ::koinos::contracts::governance::_proposal_record_default_instance_);
}
inline const ::koinos::contracts::governance::proposal_record& proposal_submission_event::proposal() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.proposal_submission_event.proposal)
  return _internal_proposal();
}
inline void proposal_submission_event::unsafe_arena_set_allocated_proposal(
    ::koinos::contracts::governance::proposal_record* proposal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_);
  }
  proposal_ = proposal;
  if (proposal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.contracts.governance.proposal_submission_event.proposal)
}
inline ::koinos::contracts::governance::proposal_record* proposal_submission_event::release_proposal() {
  
  ::koinos::contracts::governance::proposal_record* temp = proposal_;
  proposal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::contracts::governance::proposal_record* proposal_submission_event::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_release:koinos.contracts.governance.proposal_submission_event.proposal)
  
  ::koinos::contracts::governance::proposal_record* temp = proposal_;
  proposal_ = nullptr;
  return temp;
}
inline ::koinos::contracts::governance::proposal_record* proposal_submission_event::_internal_mutable_proposal() {
  
  if (proposal_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::contracts::governance::proposal_record>(GetArenaForAllocation());
    proposal_ = p;
  }
  return proposal_;
}
inline ::koinos::contracts::governance::proposal_record* proposal_submission_event::mutable_proposal() {
  ::koinos::contracts::governance::proposal_record* _msg = _internal_mutable_proposal();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.governance.proposal_submission_event.proposal)
  return _msg;
}
inline void proposal_submission_event::set_allocated_proposal(::koinos::contracts::governance::proposal_record* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete proposal_;
  }
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::contracts::governance::proposal_record>::GetOwningArena(proposal);
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    
  } else {
    
  }
  proposal_ = proposal;
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.governance.proposal_submission_event.proposal)
}

// -------------------------------------------------------------------

// proposal_status_event

// bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
inline void proposal_status_event::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& proposal_status_event::id() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.proposal_status_event.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void proposal_status_event::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.proposal_status_event.id)
}
inline std::string* proposal_status_event::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.governance.proposal_status_event.id)
  return _s;
}
inline const std::string& proposal_status_event::_internal_id() const {
  return id_.Get();
}
inline void proposal_status_event::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* proposal_status_event::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* proposal_status_event::release_id() {
  // @@protoc_insertion_point(field_release:koinos.contracts.governance.proposal_status_event.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void proposal_status_event::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.governance.proposal_status_event.id)
}

// .koinos.contracts.governance.proposal_status status = 2;
inline void proposal_status_event::clear_status() {
  status_ = 0;
}
inline ::koinos::contracts::governance::proposal_status proposal_status_event::_internal_status() const {
  return static_cast< ::koinos::contracts::governance::proposal_status >(status_);
}
inline ::koinos::contracts::governance::proposal_status proposal_status_event::status() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.proposal_status_event.status)
  return _internal_status();
}
inline void proposal_status_event::_internal_set_status(::koinos::contracts::governance::proposal_status value) {
  
  status_ = value;
}
inline void proposal_status_event::set_status(::koinos::contracts::governance::proposal_status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.proposal_status_event.status)
}

// -------------------------------------------------------------------

// proposal_vote_event

// bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
inline void proposal_vote_event::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& proposal_vote_event::id() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.proposal_vote_event.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void proposal_vote_event::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.proposal_vote_event.id)
}
inline std::string* proposal_vote_event::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.governance.proposal_vote_event.id)
  return _s;
}
inline const std::string& proposal_vote_event::_internal_id() const {
  return id_.Get();
}
inline void proposal_vote_event::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* proposal_vote_event::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* proposal_vote_event::release_id() {
  // @@protoc_insertion_point(field_release:koinos.contracts.governance.proposal_vote_event.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void proposal_vote_event::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.governance.proposal_vote_event.id)
}

// uint64 vote_tally = 2;
inline void proposal_vote_event::clear_vote_tally() {
  vote_tally_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 proposal_vote_event::_internal_vote_tally() const {
  return vote_tally_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 proposal_vote_event::vote_tally() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.proposal_vote_event.vote_tally)
  return _internal_vote_tally();
}
inline void proposal_vote_event::_internal_set_vote_tally(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  vote_tally_ = value;
}
inline void proposal_vote_event::set_vote_tally(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_vote_tally(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.proposal_vote_event.vote_tally)
}

// uint64 vote_threshold = 3;
inline void proposal_vote_event::clear_vote_threshold() {
  vote_threshold_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 proposal_vote_event::_internal_vote_threshold() const {
  return vote_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 proposal_vote_event::vote_threshold() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.governance.proposal_vote_event.vote_threshold)
  return _internal_vote_threshold();
}
inline void proposal_vote_event::_internal_set_vote_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  vote_threshold_ = value;
}
inline void proposal_vote_event::set_vote_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_vote_threshold(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.governance.proposal_vote_event.vote_threshold)
}

// -------------------------------------------------------------------

// block_callback_arguments

// -------------------------------------------------------------------

// block_callback_result

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace governance
}  // namespace contracts
}  // namespace koinos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::koinos::contracts::governance::proposal_status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::koinos::contracts::governance::proposal_status>() {
  return ::koinos::contracts::governance::proposal_status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto
