// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/koindx_tracker/koindx_tracker.proto

#include "koinos/koindx_tracker/koindx_tracker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace koindx_tracker {
constexpr liquidity_record::liquidity_record(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , balance_(uint64_t{0u})
  , prev_coin_ms_hi_(uint64_t{0u})
  , prev_coin_ms_lo_(uint64_t{0u})
  , last_update_(uint64_t{0u}){}
struct liquidity_recordDefaultTypeInternal {
  constexpr liquidity_recordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~liquidity_recordDefaultTypeInternal() {}
  union {
    liquidity_record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT liquidity_recordDefaultTypeInternal _liquidity_record_default_instance_;
constexpr tvl_record::tvl_record(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct tvl_recordDefaultTypeInternal {
  constexpr tvl_recordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~tvl_recordDefaultTypeInternal() {}
  union {
    tvl_record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT tvl_recordDefaultTypeInternal _tvl_record_default_instance_;
constexpr initialize_event::initialize_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_a_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_b_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct initialize_eventDefaultTypeInternal {
  constexpr initialize_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~initialize_eventDefaultTypeInternal() {}
  union {
    initialize_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT initialize_eventDefaultTypeInternal _initialize_event_default_instance_;
constexpr sync_event::sync_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reserve_a_(uint64_t{0u})
  , reserve_b_(uint64_t{0u}){}
struct sync_eventDefaultTypeInternal {
  constexpr sync_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~sync_eventDefaultTypeInternal() {}
  union {
    sync_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT sync_eventDefaultTypeInternal _sync_event_default_instance_;
}  // namespace koindx_tracker
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::liquidity_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::liquidity_record, address_),
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::liquidity_record, balance_),
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::liquidity_record, prev_coin_ms_hi_),
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::liquidity_record, prev_coin_ms_lo_),
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::liquidity_record, last_update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::tvl_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::tvl_record, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::initialize_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::initialize_event, token_a_),
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::initialize_event, token_b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::sync_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::sync_event, reserve_a_),
  PROTOBUF_FIELD_OFFSET(::koinos::koindx_tracker::sync_event, reserve_b_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::koindx_tracker::liquidity_record)},
  { 10, -1, sizeof(::koinos::koindx_tracker::tvl_record)},
  { 16, -1, sizeof(::koinos::koindx_tracker::initialize_event)},
  { 23, -1, sizeof(::koinos::koindx_tracker::sync_event)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::koindx_tracker::_liquidity_record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::koindx_tracker::_tvl_record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::koindx_tracker::_initialize_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::koindx_tracker::_sync_event_default_instance_),
};

const char descriptor_table_protodef_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*koinos/koindx_tracker/koindx_tracker.p"
  "roto\022\025koinos.koindx_tracker\032\024koinos/opti"
  "ons.proto\"\221\001\n\020liquidity_record\022\025\n\007addres"
  "s\030\001 \001(\014B\004\200\265\030\006\022\023\n\007balance\030\002 \001(\004B\0020\001\022\033\n\017pr"
  "ev_coin_ms_hi\030\003 \001(\004B\0020\001\022\033\n\017prev_coin_ms_"
  "lo\030\004 \001(\004B\0020\001\022\027\n\013last_update\030\005 \001(\004B\0020\001\"\037\n"
  "\ntvl_record\022\021\n\005value\030\001 \001(\004B\0020\001\"4\n\020initia"
  "lize_event\022\017\n\007token_a\030\001 \001(\t\022\017\n\007token_b\030\002"
  " \001(\t\":\n\nsync_event\022\025\n\treserve_a\030\001 \001(\004B\0020"
  "\001\022\025\n\treserve_b\030\002 \001(\004B\0020\001B@Z>github.com/k"
  "oinos/koinos-proto-golang/v2/koinos/koin"
  "dx_trackerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto_deps[1] = {
  &::descriptor_table_koinos_2foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto = {
  false, false, 458, descriptor_table_protodef_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto, "koinos/koindx_tracker/koindx_tracker.proto", 
  &descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto_once, descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto::offsets,
  file_level_metadata_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto, file_level_enum_descriptors_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto, file_level_service_descriptors_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto_getter() {
  return &descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto(&descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto);
namespace koinos {
namespace koindx_tracker {

// ===================================================================

class liquidity_record::_Internal {
 public:
};

liquidity_record::liquidity_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.koindx_tracker.liquidity_record)
}
liquidity_record::liquidity_record(const liquidity_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_update_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(last_update_));
  // @@protoc_insertion_point(copy_constructor:koinos.koindx_tracker.liquidity_record)
}

inline void liquidity_record::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&balance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_update_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(last_update_));
}

liquidity_record::~liquidity_record() {
  // @@protoc_insertion_point(destructor:koinos.koindx_tracker.liquidity_record)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void liquidity_record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void liquidity_record::ArenaDtor(void* object) {
  liquidity_record* _this = reinterpret_cast< liquidity_record* >(object);
  (void)_this;
}
void liquidity_record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void liquidity_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void liquidity_record::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.koindx_tracker.liquidity_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_update_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(last_update_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* liquidity_record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 balance = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prev_coin_ms_hi = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prev_coin_ms_hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 prev_coin_ms_lo = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          prev_coin_ms_lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_update = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          last_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* liquidity_record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.koindx_tracker.liquidity_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 balance = 2 [jstype = JS_STRING];
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_balance(), target);
  }

  // uint64 prev_coin_ms_hi = 3 [jstype = JS_STRING];
  if (this->_internal_prev_coin_ms_hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_prev_coin_ms_hi(), target);
  }

  // uint64 prev_coin_ms_lo = 4 [jstype = JS_STRING];
  if (this->_internal_prev_coin_ms_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_prev_coin_ms_lo(), target);
  }

  // uint64 last_update = 5 [jstype = JS_STRING];
  if (this->_internal_last_update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_last_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.koindx_tracker.liquidity_record)
  return target;
}

size_t liquidity_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.koindx_tracker.liquidity_record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // uint64 balance = 2 [jstype = JS_STRING];
  if (this->_internal_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_balance());
  }

  // uint64 prev_coin_ms_hi = 3 [jstype = JS_STRING];
  if (this->_internal_prev_coin_ms_hi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prev_coin_ms_hi());
  }

  // uint64 prev_coin_ms_lo = 4 [jstype = JS_STRING];
  if (this->_internal_prev_coin_ms_lo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_prev_coin_ms_lo());
  }

  // uint64 last_update = 5 [jstype = JS_STRING];
  if (this->_internal_last_update() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_update());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData liquidity_record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    liquidity_record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*liquidity_record::GetClassData() const { return &_class_data_; }

void liquidity_record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<liquidity_record *>(to)->MergeFrom(
      static_cast<const liquidity_record &>(from));
}


void liquidity_record::MergeFrom(const liquidity_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.koindx_tracker.liquidity_record)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  if (from._internal_prev_coin_ms_hi() != 0) {
    _internal_set_prev_coin_ms_hi(from._internal_prev_coin_ms_hi());
  }
  if (from._internal_prev_coin_ms_lo() != 0) {
    _internal_set_prev_coin_ms_lo(from._internal_prev_coin_ms_lo());
  }
  if (from._internal_last_update() != 0) {
    _internal_set_last_update(from._internal_last_update());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void liquidity_record::CopyFrom(const liquidity_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.koindx_tracker.liquidity_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool liquidity_record::IsInitialized() const {
  return true;
}

void liquidity_record::InternalSwap(liquidity_record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(liquidity_record, last_update_)
      + sizeof(liquidity_record::last_update_)
      - PROTOBUF_FIELD_OFFSET(liquidity_record, balance_)>(
          reinterpret_cast<char*>(&balance_),
          reinterpret_cast<char*>(&other->balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata liquidity_record::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto_getter, &descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto_once,
      file_level_metadata_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto[0]);
}

// ===================================================================

class tvl_record::_Internal {
 public:
};

tvl_record::tvl_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.koindx_tracker.tvl_record)
}
tvl_record::tvl_record(const tvl_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.koindx_tracker.tvl_record)
}

inline void tvl_record::SharedCtor() {
value_ = uint64_t{0u};
}

tvl_record::~tvl_record() {
  // @@protoc_insertion_point(destructor:koinos.koindx_tracker.tvl_record)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void tvl_record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void tvl_record::ArenaDtor(void* object) {
  tvl_record* _this = reinterpret_cast< tvl_record* >(object);
  (void)_this;
}
void tvl_record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void tvl_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void tvl_record::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.koindx_tracker.tvl_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* tvl_record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* tvl_record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.koindx_tracker.tvl_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.koindx_tracker.tvl_record)
  return target;
}

size_t tvl_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.koindx_tracker.tvl_record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData tvl_record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    tvl_record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*tvl_record::GetClassData() const { return &_class_data_; }

void tvl_record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<tvl_record *>(to)->MergeFrom(
      static_cast<const tvl_record &>(from));
}


void tvl_record::MergeFrom(const tvl_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.koindx_tracker.tvl_record)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void tvl_record::CopyFrom(const tvl_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.koindx_tracker.tvl_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tvl_record::IsInitialized() const {
  return true;
}

void tvl_record::InternalSwap(tvl_record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata tvl_record::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto_getter, &descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto_once,
      file_level_metadata_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto[1]);
}

// ===================================================================

class initialize_event::_Internal {
 public:
};

initialize_event::initialize_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.koindx_tracker.initialize_event)
}
initialize_event::initialize_event(const initialize_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_a().empty()) {
    token_a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_a(), 
      GetArenaForAllocation());
  }
  token_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_b().empty()) {
    token_b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_b(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.koindx_tracker.initialize_event)
}

inline void initialize_event::SharedCtor() {
token_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

initialize_event::~initialize_event() {
  // @@protoc_insertion_point(destructor:koinos.koindx_tracker.initialize_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void initialize_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void initialize_event::ArenaDtor(void* object) {
  initialize_event* _this = reinterpret_cast< initialize_event* >(object);
  (void)_this;
}
void initialize_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void initialize_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void initialize_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.koindx_tracker.initialize_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_a_.ClearToEmpty();
  token_b_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* initialize_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token_a();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.koindx_tracker.initialize_event.token_a"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token_b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token_b();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.koindx_tracker.initialize_event.token_b"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* initialize_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.koindx_tracker.initialize_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token_a = 1;
  if (!this->_internal_token_a().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_a().data(), static_cast<int>(this->_internal_token_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.koindx_tracker.initialize_event.token_a");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token_a(), target);
  }

  // string token_b = 2;
  if (!this->_internal_token_b().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_b().data(), static_cast<int>(this->_internal_token_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.koindx_tracker.initialize_event.token_b");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.koindx_tracker.initialize_event)
  return target;
}

size_t initialize_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.koindx_tracker.initialize_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token_a = 1;
  if (!this->_internal_token_a().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_a());
  }

  // string token_b = 2;
  if (!this->_internal_token_b().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_b());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData initialize_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    initialize_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*initialize_event::GetClassData() const { return &_class_data_; }

void initialize_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<initialize_event *>(to)->MergeFrom(
      static_cast<const initialize_event &>(from));
}


void initialize_event::MergeFrom(const initialize_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.koindx_tracker.initialize_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token_a().empty()) {
    _internal_set_token_a(from._internal_token_a());
  }
  if (!from._internal_token_b().empty()) {
    _internal_set_token_b(from._internal_token_b());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void initialize_event::CopyFrom(const initialize_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.koindx_tracker.initialize_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool initialize_event::IsInitialized() const {
  return true;
}

void initialize_event::InternalSwap(initialize_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_a_, GetArenaForAllocation(),
      &other->token_a_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_b_, GetArenaForAllocation(),
      &other->token_b_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata initialize_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto_getter, &descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto_once,
      file_level_metadata_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto[2]);
}

// ===================================================================

class sync_event::_Internal {
 public:
};

sync_event::sync_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.koindx_tracker.sync_event)
}
sync_event::sync_event(const sync_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reserve_a_, &from.reserve_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&reserve_b_) -
    reinterpret_cast<char*>(&reserve_a_)) + sizeof(reserve_b_));
  // @@protoc_insertion_point(copy_constructor:koinos.koindx_tracker.sync_event)
}

inline void sync_event::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reserve_a_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reserve_b_) -
    reinterpret_cast<char*>(&reserve_a_)) + sizeof(reserve_b_));
}

sync_event::~sync_event() {
  // @@protoc_insertion_point(destructor:koinos.koindx_tracker.sync_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void sync_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void sync_event::ArenaDtor(void* object) {
  sync_event* _this = reinterpret_cast< sync_event* >(object);
  (void)_this;
}
void sync_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sync_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void sync_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.koindx_tracker.sync_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reserve_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reserve_b_) -
      reinterpret_cast<char*>(&reserve_a_)) + sizeof(reserve_b_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sync_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 reserve_a = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reserve_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 reserve_b = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reserve_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sync_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.koindx_tracker.sync_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 reserve_a = 1 [jstype = JS_STRING];
  if (this->_internal_reserve_a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_reserve_a(), target);
  }

  // uint64 reserve_b = 2 [jstype = JS_STRING];
  if (this->_internal_reserve_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_reserve_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.koindx_tracker.sync_event)
  return target;
}

size_t sync_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.koindx_tracker.sync_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 reserve_a = 1 [jstype = JS_STRING];
  if (this->_internal_reserve_a() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_reserve_a());
  }

  // uint64 reserve_b = 2 [jstype = JS_STRING];
  if (this->_internal_reserve_b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_reserve_b());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData sync_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    sync_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*sync_event::GetClassData() const { return &_class_data_; }

void sync_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<sync_event *>(to)->MergeFrom(
      static_cast<const sync_event &>(from));
}


void sync_event::MergeFrom(const sync_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.koindx_tracker.sync_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_reserve_a() != 0) {
    _internal_set_reserve_a(from._internal_reserve_a());
  }
  if (from._internal_reserve_b() != 0) {
    _internal_set_reserve_b(from._internal_reserve_b());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void sync_event::CopyFrom(const sync_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.koindx_tracker.sync_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_event::IsInitialized() const {
  return true;
}

void sync_event::InternalSwap(sync_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(sync_event, reserve_b_)
      + sizeof(sync_event::reserve_b_)
      - PROTOBUF_FIELD_OFFSET(sync_event, reserve_a_)>(
          reinterpret_cast<char*>(&reserve_a_),
          reinterpret_cast<char*>(&other->reserve_a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata sync_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto_getter, &descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto_once,
      file_level_metadata_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace koindx_tracker
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::koindx_tracker::liquidity_record* Arena::CreateMaybeMessage< ::koinos::koindx_tracker::liquidity_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::koindx_tracker::liquidity_record >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::koindx_tracker::tvl_record* Arena::CreateMaybeMessage< ::koinos::koindx_tracker::tvl_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::koindx_tracker::tvl_record >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::koindx_tracker::initialize_event* Arena::CreateMaybeMessage< ::koinos::koindx_tracker::initialize_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::koindx_tracker::initialize_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::koindx_tracker::sync_event* Arena::CreateMaybeMessage< ::koinos::koindx_tracker::sync_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::koindx_tracker::sync_event >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
