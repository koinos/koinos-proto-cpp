// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/services.proto

#include "koinos/rpc/services.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace services {
}  // namespace services
}  // namespace koinos
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2frpc_2fservices_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2frpc_2fservices_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2frpc_2fservices_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_koinos_2frpc_2fservices_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031koinos/rpc/services.proto\022\017koinos.serv"
  "ices\0324koinos/rpc/account_history/account"
  "_history_rpc.proto\032,koinos/rpc/block_sto"
  "re/block_store_rpc.proto\032 koinos/rpc/cha"
  "in/chain_rpc.proto\032<koinos/rpc/contract_"
  "meta_store/contract_meta_store_rpc.proto"
  "\032$koinos/rpc/mempool/mempool_rpc.proto\032\034"
  "koinos/rpc/p2p/p2p_rpc.proto\0328koinos/rpc"
  "/transaction_store/transaction_store_rpc"
  ".proto2\235\021\n\006koinos\022\212\001\n\023get_account_histor"
  "y\0227.koinos.rpc.account_history.get_accou"
  "nt_history_request\0328.koinos.rpc.account_"
  "history.get_account_history_response\"\000\022y"
  "\n\020get_blocks_by_id\0220.koinos.rpc.block_st"
  "ore.get_blocks_by_id_request\0321.koinos.rp"
  "c.block_store.get_blocks_by_id_response\""
  "\000\022\205\001\n\024get_blocks_by_height\0224.koinos.rpc."
  "block_store.get_blocks_by_height_request"
  "\0325.koinos.rpc.block_store.get_blocks_by_"
  "height_response\"\000\022|\n\021get_highest_block\0221"
  ".koinos.rpc.block_store.get_highest_bloc"
  "k_request\0322.koinos.rpc.block_store.get_h"
  "ighest_block_response\"\000\022a\n\014submit_block\022"
  "&.koinos.rpc.chain.submit_block_request\032"
  "\'.koinos.rpc.chain.submit_block_response"
  "\"\000\022s\n\022submit_transaction\022,.koinos.rpc.ch"
  "ain.submit_transaction_request\032-.koinos."
  "rpc.chain.submit_transaction_response\"\000\022"
  "d\n\rget_head_info\022\'.koinos.rpc.chain.get_"
  "head_info_request\032(.koinos.rpc.chain.get"
  "_head_info_response\"\000\022a\n\014get_chain_id\022&."
  "koinos.rpc.chain.get_chain_id_request\032\'."
  "koinos.rpc.chain.get_chain_id_response\"\000"
  "\022g\n\016get_fork_heads\022(.koinos.rpc.chain.ge"
  "t_fork_heads_request\032).koinos.rpc.chain."
  "get_fork_heads_response\"\000\022d\n\rread_contra"
  "ct\022\'.koinos.rpc.chain.read_contract_requ"
  "est\032(.koinos.rpc.chain.read_contract_res"
  "ponse\"\000\022p\n\021get_account_nonce\022+.koinos.rp"
  "c.chain.get_account_nonce_request\032,.koin"
  "os.rpc.chain.get_account_nonce_response\""
  "\000\022g\n\016get_account_rc\022(.koinos.rpc.chain.g"
  "et_account_rc_request\032).koinos.rpc.chain"
  ".get_account_rc_response\"\000\022v\n\023get_resour"
  "ce_limits\022-.koinos.rpc.chain.get_resourc"
  "e_limits_request\032..koinos.rpc.chain.get_"
  "resource_limits_response\"\000\022\214\001\n\021get_contr"
  "act_meta\0229.koinos.rpc.contract_meta_stor"
  "e.get_contract_meta_request\032:.koinos.rpc"
  ".contract_meta_store.get_contract_meta_r"
  "esponse\"\000\022\211\001\n\030get_pending_transactions\0224"
  ".koinos.rpc.mempool.get_pending_transact"
  "ions_request\0325.koinos.rpc.mempool.get_pe"
  "nding_transactions_response\"\000\022\236\001\n\037check_"
  "pending_account_resources\022;.koinos.rpc.m"
  "empool.check_pending_account_resources_r"
  "equest\032<.koinos.rpc.mempool.check_pendin"
  "g_account_resources_response\"\000\022l\n\021get_go"
  "ssip_status\022).koinos.rpc.p2p.get_gossip_"
  "status_request\032*.koinos.rpc.p2p.get_goss"
  "ip_status_response\"\000\022\227\001\n\026get_transaction"
  "s_by_id\022<.koinos.rpc.transaction_store.g"
  "et_transactions_by_id_request\032=.koinos.r"
  "pc.transaction_store.get_transactions_by"
  "_id_response\"\000B7Z5github.com/koinos/koin"
  "os-proto-golang/koinos/servicesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2frpc_2fservices_2eproto_deps[7] = {
  &::descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto,
  &::descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto,
  &::descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto,
  &::descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto,
  &::descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto,
  &::descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto,
  &::descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2frpc_2fservices_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2fservices_2eproto = {
  false, false, 2639, descriptor_table_protodef_koinos_2frpc_2fservices_2eproto, "koinos/rpc/services.proto", 
  &descriptor_table_koinos_2frpc_2fservices_2eproto_once, descriptor_table_koinos_2frpc_2fservices_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_koinos_2frpc_2fservices_2eproto::offsets,
  nullptr, file_level_enum_descriptors_koinos_2frpc_2fservices_2eproto, file_level_service_descriptors_koinos_2frpc_2fservices_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2frpc_2fservices_2eproto_getter() {
  return &descriptor_table_koinos_2frpc_2fservices_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2frpc_2fservices_2eproto(&descriptor_table_koinos_2frpc_2fservices_2eproto);
namespace koinos {
namespace services {

// @@protoc_insertion_point(namespace_scope)
}  // namespace services
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
