// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/chain/events.proto

#include "koinos/chain/events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace chain {
constexpr set_system_call_event::set_system_call_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_(nullptr)
  , call_id_(0u){}
struct set_system_call_eventDefaultTypeInternal {
  constexpr set_system_call_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_system_call_eventDefaultTypeInternal() {}
  union {
    set_system_call_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_system_call_eventDefaultTypeInternal _set_system_call_event_default_instance_;
constexpr set_system_contract_event::set_system_contract_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , system_contract_(false){}
struct set_system_contract_eventDefaultTypeInternal {
  constexpr set_system_contract_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_system_contract_eventDefaultTypeInternal() {}
  union {
    set_system_contract_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_system_contract_eventDefaultTypeInternal _set_system_contract_event_default_instance_;
}  // namespace chain
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fchain_2fevents_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fchain_2fevents_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fchain_2fevents_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fchain_2fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::set_system_call_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::set_system_call_event, call_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::set_system_call_event, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::set_system_contract_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::set_system_contract_event, contract_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::set_system_contract_event, system_contract_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::chain::set_system_call_event)},
  { 7, -1, sizeof(::koinos::chain::set_system_contract_event)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_set_system_call_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_set_system_contract_event_default_instance_),
};

const char descriptor_table_protodef_koinos_2fchain_2fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031koinos/chain/events.proto\022\014koinos.chai"
  "n\032\024koinos/options.proto\032\036koinos/protocol"
  "/protocol.proto\"]\n\025set_system_call_event"
  "\022\017\n\007call_id\030\001 \001(\r\0223\n\006target\030\002 \001(\0132#.koin"
  "os.protocol.system_call_target\"O\n\031set_sy"
  "stem_contract_event\022\031\n\013contract_id\030\001 \001(\014"
  "B\004\200\265\030\005\022\027\n\017system_contract\030\002 \001(\010B4Z2githu"
  "b.com/koinos/koinos-proto-golang/koinos/"
  "chainb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fchain_2fevents_2eproto_deps[2] = {
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fchain_2fevents_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fchain_2fevents_2eproto = {
  false, false, 333, descriptor_table_protodef_koinos_2fchain_2fevents_2eproto, "koinos/chain/events.proto", 
  &descriptor_table_koinos_2fchain_2fevents_2eproto_once, descriptor_table_koinos_2fchain_2fevents_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_koinos_2fchain_2fevents_2eproto::offsets,
  file_level_metadata_koinos_2fchain_2fevents_2eproto, file_level_enum_descriptors_koinos_2fchain_2fevents_2eproto, file_level_service_descriptors_koinos_2fchain_2fevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fchain_2fevents_2eproto_getter() {
  return &descriptor_table_koinos_2fchain_2fevents_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fchain_2fevents_2eproto(&descriptor_table_koinos_2fchain_2fevents_2eproto);
namespace koinos {
namespace chain {

// ===================================================================

class set_system_call_event::_Internal {
 public:
  static const ::koinos::protocol::system_call_target& target(const set_system_call_event* msg);
};

const ::koinos::protocol::system_call_target&
set_system_call_event::_Internal::target(const set_system_call_event* msg) {
  return *msg->target_;
}
void set_system_call_event::clear_target() {
  if (GetArenaForAllocation() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
set_system_call_event::set_system_call_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.set_system_call_event)
}
set_system_call_event::set_system_call_event(const set_system_call_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::koinos::protocol::system_call_target(*from.target_);
  } else {
    target_ = nullptr;
  }
  call_id_ = from.call_id_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.set_system_call_event)
}

inline void set_system_call_event::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&call_id_) -
    reinterpret_cast<char*>(&target_)) + sizeof(call_id_));
}

set_system_call_event::~set_system_call_event() {
  // @@protoc_insertion_point(destructor:koinos.chain.set_system_call_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_system_call_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete target_;
}

void set_system_call_event::ArenaDtor(void* object) {
  set_system_call_event* _this = reinterpret_cast< set_system_call_event* >(object);
  (void)_this;
}
void set_system_call_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_system_call_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_system_call_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.set_system_call_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  call_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_system_call_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 call_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          call_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.system_call_target target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_system_call_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.set_system_call_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 call_id = 1;
  if (this->_internal_call_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_call_id(), target);
  }

  // .koinos.protocol.system_call_target target = 2;
  if (this->_internal_has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.set_system_call_event)
  return target;
}

size_t set_system_call_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.set_system_call_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.system_call_target target = 2;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // uint32 call_id = 1;
  if (this->_internal_call_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_call_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_system_call_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_system_call_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_system_call_event::GetClassData() const { return &_class_data_; }

void set_system_call_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_system_call_event *>(to)->MergeFrom(
      static_cast<const set_system_call_event &>(from));
}


void set_system_call_event::MergeFrom(const set_system_call_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.set_system_call_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target()) {
    _internal_mutable_target()->::koinos::protocol::system_call_target::MergeFrom(from._internal_target());
  }
  if (from._internal_call_id() != 0) {
    _internal_set_call_id(from._internal_call_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_system_call_event::CopyFrom(const set_system_call_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.set_system_call_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_system_call_event::IsInitialized() const {
  return true;
}

void set_system_call_event::InternalSwap(set_system_call_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(set_system_call_event, call_id_)
      + sizeof(set_system_call_event::call_id_)
      - PROTOBUF_FIELD_OFFSET(set_system_call_event, target_)>(
          reinterpret_cast<char*>(&target_),
          reinterpret_cast<char*>(&other->target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata set_system_call_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fevents_2eproto_getter, &descriptor_table_koinos_2fchain_2fevents_2eproto_once,
      file_level_metadata_koinos_2fchain_2fevents_2eproto[0]);
}

// ===================================================================

class set_system_contract_event::_Internal {
 public:
};

set_system_contract_event::set_system_contract_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.chain.set_system_contract_event)
}
set_system_contract_event::set_system_contract_event(const set_system_contract_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_id(), 
      GetArenaForAllocation());
  }
  system_contract_ = from.system_contract_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.set_system_contract_event)
}

inline void set_system_contract_event::SharedCtor() {
contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
system_contract_ = false;
}

set_system_contract_event::~set_system_contract_event() {
  // @@protoc_insertion_point(destructor:koinos.chain.set_system_contract_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_system_contract_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void set_system_contract_event::ArenaDtor(void* object) {
  set_system_contract_event* _this = reinterpret_cast< set_system_contract_event* >(object);
  (void)_this;
}
void set_system_contract_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_system_contract_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_system_contract_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.set_system_contract_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty();
  system_contract_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_system_contract_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool system_contract = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          system_contract_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_system_contract_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.set_system_contract_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // bool system_contract = 2;
  if (this->_internal_system_contract() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_system_contract(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.set_system_contract_event)
  return target;
}

size_t set_system_contract_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.set_system_contract_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_id());
  }

  // bool system_contract = 2;
  if (this->_internal_system_contract() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_system_contract_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_system_contract_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_system_contract_event::GetClassData() const { return &_class_data_; }

void set_system_contract_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_system_contract_event *>(to)->MergeFrom(
      static_cast<const set_system_contract_event &>(from));
}


void set_system_contract_event::MergeFrom(const set_system_contract_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.set_system_contract_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract_id().empty()) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from._internal_system_contract() != 0) {
    _internal_set_system_contract(from._internal_system_contract());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_system_contract_event::CopyFrom(const set_system_contract_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.set_system_contract_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_system_contract_event::IsInitialized() const {
  return true;
}

void set_system_contract_event::InternalSwap(set_system_contract_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contract_id_, GetArenaForAllocation(),
      &other->contract_id_, other->GetArenaForAllocation()
  );
  swap(system_contract_, other->system_contract_);
}

::PROTOBUF_NAMESPACE_ID::Metadata set_system_contract_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fchain_2fevents_2eproto_getter, &descriptor_table_koinos_2fchain_2fevents_2eproto_once,
      file_level_metadata_koinos_2fchain_2fevents_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chain
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::chain::set_system_call_event* Arena::CreateMaybeMessage< ::koinos::chain::set_system_call_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::set_system_call_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::set_system_contract_event* Arena::CreateMaybeMessage< ::koinos::chain::set_system_contract_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::set_system_contract_event >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
