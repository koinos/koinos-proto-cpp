// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/contract_meta_store/contract_meta_store_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/options.pb.h"
#include "koinos/rpc/rpc.pb.h"
#include "koinos/contract_meta_store/contract_meta_store.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto;
namespace koinos {
namespace rpc {
namespace contract_meta_store {
class contract_meta_store_request;
struct contract_meta_store_requestDefaultTypeInternal;
extern contract_meta_store_requestDefaultTypeInternal _contract_meta_store_request_default_instance_;
class contract_meta_store_response;
struct contract_meta_store_responseDefaultTypeInternal;
extern contract_meta_store_responseDefaultTypeInternal _contract_meta_store_response_default_instance_;
class get_contract_meta_request;
struct get_contract_meta_requestDefaultTypeInternal;
extern get_contract_meta_requestDefaultTypeInternal _get_contract_meta_request_default_instance_;
class get_contract_meta_response;
struct get_contract_meta_responseDefaultTypeInternal;
extern get_contract_meta_responseDefaultTypeInternal _get_contract_meta_response_default_instance_;
}  // namespace contract_meta_store
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::rpc::contract_meta_store::contract_meta_store_request* Arena::CreateMaybeMessage<::koinos::rpc::contract_meta_store::contract_meta_store_request>(Arena*);
template<> ::koinos::rpc::contract_meta_store::contract_meta_store_response* Arena::CreateMaybeMessage<::koinos::rpc::contract_meta_store::contract_meta_store_response>(Arena*);
template<> ::koinos::rpc::contract_meta_store::get_contract_meta_request* Arena::CreateMaybeMessage<::koinos::rpc::contract_meta_store::get_contract_meta_request>(Arena*);
template<> ::koinos::rpc::contract_meta_store::get_contract_meta_response* Arena::CreateMaybeMessage<::koinos::rpc::contract_meta_store::get_contract_meta_response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace rpc {
namespace contract_meta_store {

// ===================================================================

class get_contract_meta_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.contract_meta_store.get_contract_meta_request) */ {
 public:
  inline get_contract_meta_request() : get_contract_meta_request(nullptr) {}
  ~get_contract_meta_request() override;
  explicit constexpr get_contract_meta_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_contract_meta_request(const get_contract_meta_request& from);
  get_contract_meta_request(get_contract_meta_request&& from) noexcept
    : get_contract_meta_request() {
    *this = ::std::move(from);
  }

  inline get_contract_meta_request& operator=(const get_contract_meta_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_contract_meta_request& operator=(get_contract_meta_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_contract_meta_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_contract_meta_request* internal_default_instance() {
    return reinterpret_cast<const get_contract_meta_request*>(
               &_get_contract_meta_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(get_contract_meta_request& a, get_contract_meta_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_contract_meta_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_contract_meta_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_contract_meta_request* New() const final {
    return new get_contract_meta_request();
  }

  get_contract_meta_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_contract_meta_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_contract_meta_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_contract_meta_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_contract_meta_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.contract_meta_store.get_contract_meta_request";
  }
  protected:
  explicit get_contract_meta_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
  };
  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  void clear_contract_id();
  const std::string& contract_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.contract_meta_store.get_contract_meta_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_contract_meta_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.contract_meta_store.get_contract_meta_response) */ {
 public:
  inline get_contract_meta_response() : get_contract_meta_response(nullptr) {}
  ~get_contract_meta_response() override;
  explicit constexpr get_contract_meta_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_contract_meta_response(const get_contract_meta_response& from);
  get_contract_meta_response(get_contract_meta_response&& from) noexcept
    : get_contract_meta_response() {
    *this = ::std::move(from);
  }

  inline get_contract_meta_response& operator=(const get_contract_meta_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_contract_meta_response& operator=(get_contract_meta_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_contract_meta_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_contract_meta_response* internal_default_instance() {
    return reinterpret_cast<const get_contract_meta_response*>(
               &_get_contract_meta_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(get_contract_meta_response& a, get_contract_meta_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_contract_meta_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_contract_meta_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_contract_meta_response* New() const final {
    return new get_contract_meta_response();
  }

  get_contract_meta_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_contract_meta_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_contract_meta_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_contract_meta_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_contract_meta_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.contract_meta_store.get_contract_meta_response";
  }
  protected:
  explicit get_contract_meta_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
  };
  // .koinos.contract_meta_store.contract_meta_item meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::koinos::contract_meta_store::contract_meta_item& meta() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::contract_meta_store::contract_meta_item* release_meta();
  ::koinos::contract_meta_store::contract_meta_item* mutable_meta();
  void set_allocated_meta(::koinos::contract_meta_store::contract_meta_item* meta);
  private:
  const ::koinos::contract_meta_store::contract_meta_item& _internal_meta() const;
  ::koinos::contract_meta_store::contract_meta_item* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::koinos::contract_meta_store::contract_meta_item* meta);
  ::koinos::contract_meta_store::contract_meta_item* unsafe_arena_release_meta();

  // @@protoc_insertion_point(class_scope:koinos.rpc.contract_meta_store.get_contract_meta_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::contract_meta_store::contract_meta_item* meta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto;
};
// -------------------------------------------------------------------

class contract_meta_store_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.contract_meta_store.contract_meta_store_request) */ {
 public:
  inline contract_meta_store_request() : contract_meta_store_request(nullptr) {}
  ~contract_meta_store_request() override;
  explicit constexpr contract_meta_store_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contract_meta_store_request(const contract_meta_store_request& from);
  contract_meta_store_request(contract_meta_store_request&& from) noexcept
    : contract_meta_store_request() {
    *this = ::std::move(from);
  }

  inline contract_meta_store_request& operator=(const contract_meta_store_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline contract_meta_store_request& operator=(contract_meta_store_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const contract_meta_store_request& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kReserved = 1,
    kGetContractMeta = 2,
    REQUEST_NOT_SET = 0,
  };

  static inline const contract_meta_store_request* internal_default_instance() {
    return reinterpret_cast<const contract_meta_store_request*>(
               &_contract_meta_store_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(contract_meta_store_request& a, contract_meta_store_request& b) {
    a.Swap(&b);
  }
  inline void Swap(contract_meta_store_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contract_meta_store_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline contract_meta_store_request* New() const final {
    return new contract_meta_store_request();
  }

  contract_meta_store_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<contract_meta_store_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const contract_meta_store_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const contract_meta_store_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contract_meta_store_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.contract_meta_store.contract_meta_store_request";
  }
  protected:
  explicit contract_meta_store_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kGetContractMetaFieldNumber = 2,
  };
  // .koinos.rpc.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::rpc::reserved_rpc& reserved() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::reserved_rpc* release_reserved();
  ::koinos::rpc::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved);
  private:
  const ::koinos::rpc::reserved_rpc& _internal_reserved() const;
  ::koinos::rpc::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::rpc::reserved_rpc* reserved);
  ::koinos::rpc::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.rpc.contract_meta_store.get_contract_meta_request get_contract_meta = 2;
  bool has_get_contract_meta() const;
  private:
  bool _internal_has_get_contract_meta() const;
  public:
  void clear_get_contract_meta();
  const ::koinos::rpc::contract_meta_store::get_contract_meta_request& get_contract_meta() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::contract_meta_store::get_contract_meta_request* release_get_contract_meta();
  ::koinos::rpc::contract_meta_store::get_contract_meta_request* mutable_get_contract_meta();
  void set_allocated_get_contract_meta(::koinos::rpc::contract_meta_store::get_contract_meta_request* get_contract_meta);
  private:
  const ::koinos::rpc::contract_meta_store::get_contract_meta_request& _internal_get_contract_meta() const;
  ::koinos::rpc::contract_meta_store::get_contract_meta_request* _internal_mutable_get_contract_meta();
  public:
  void unsafe_arena_set_allocated_get_contract_meta(
      ::koinos::rpc::contract_meta_store::get_contract_meta_request* get_contract_meta);
  ::koinos::rpc::contract_meta_store::get_contract_meta_request* unsafe_arena_release_get_contract_meta();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.contract_meta_store.contract_meta_store_request)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_get_contract_meta();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestUnion {
    constexpr RequestUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::rpc::reserved_rpc* reserved_;
    ::koinos::rpc::contract_meta_store::get_contract_meta_request* get_contract_meta_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto;
};
// -------------------------------------------------------------------

class contract_meta_store_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.contract_meta_store.contract_meta_store_response) */ {
 public:
  inline contract_meta_store_response() : contract_meta_store_response(nullptr) {}
  ~contract_meta_store_response() override;
  explicit constexpr contract_meta_store_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contract_meta_store_response(const contract_meta_store_response& from);
  contract_meta_store_response(contract_meta_store_response&& from) noexcept
    : contract_meta_store_response() {
    *this = ::std::move(from);
  }

  inline contract_meta_store_response& operator=(const contract_meta_store_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline contract_meta_store_response& operator=(contract_meta_store_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const contract_meta_store_response& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kReserved = 1,
    kError = 2,
    kGetContractMeta = 3,
    RESPONSE_NOT_SET = 0,
  };

  static inline const contract_meta_store_response* internal_default_instance() {
    return reinterpret_cast<const contract_meta_store_response*>(
               &_contract_meta_store_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(contract_meta_store_response& a, contract_meta_store_response& b) {
    a.Swap(&b);
  }
  inline void Swap(contract_meta_store_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contract_meta_store_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline contract_meta_store_response* New() const final {
    return new contract_meta_store_response();
  }

  contract_meta_store_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<contract_meta_store_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const contract_meta_store_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const contract_meta_store_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contract_meta_store_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.contract_meta_store.contract_meta_store_response";
  }
  protected:
  explicit contract_meta_store_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kErrorFieldNumber = 2,
    kGetContractMetaFieldNumber = 3,
  };
  // .koinos.rpc.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::rpc::reserved_rpc& reserved() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::reserved_rpc* release_reserved();
  ::koinos::rpc::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved);
  private:
  const ::koinos::rpc::reserved_rpc& _internal_reserved() const;
  ::koinos::rpc::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::rpc::reserved_rpc* reserved);
  ::koinos::rpc::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.rpc.error_status error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::koinos::rpc::error_status& error() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::error_status* release_error();
  ::koinos::rpc::error_status* mutable_error();
  void set_allocated_error(::koinos::rpc::error_status* error);
  private:
  const ::koinos::rpc::error_status& _internal_error() const;
  ::koinos::rpc::error_status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::koinos::rpc::error_status* error);
  ::koinos::rpc::error_status* unsafe_arena_release_error();

  // .koinos.rpc.contract_meta_store.get_contract_meta_response get_contract_meta = 3;
  bool has_get_contract_meta() const;
  private:
  bool _internal_has_get_contract_meta() const;
  public:
  void clear_get_contract_meta();
  const ::koinos::rpc::contract_meta_store::get_contract_meta_response& get_contract_meta() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::contract_meta_store::get_contract_meta_response* release_get_contract_meta();
  ::koinos::rpc::contract_meta_store::get_contract_meta_response* mutable_get_contract_meta();
  void set_allocated_get_contract_meta(::koinos::rpc::contract_meta_store::get_contract_meta_response* get_contract_meta);
  private:
  const ::koinos::rpc::contract_meta_store::get_contract_meta_response& _internal_get_contract_meta() const;
  ::koinos::rpc::contract_meta_store::get_contract_meta_response* _internal_mutable_get_contract_meta();
  public:
  void unsafe_arena_set_allocated_get_contract_meta(
      ::koinos::rpc::contract_meta_store::get_contract_meta_response* get_contract_meta);
  ::koinos::rpc::contract_meta_store::get_contract_meta_response* unsafe_arena_release_get_contract_meta();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.contract_meta_store.contract_meta_store_response)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_error();
  void set_has_get_contract_meta();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResponseUnion {
    constexpr ResponseUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::rpc::reserved_rpc* reserved_;
    ::koinos::rpc::error_status* error_;
    ::koinos::rpc::contract_meta_store::get_contract_meta_response* get_contract_meta_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// get_contract_meta_request

// bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
inline void get_contract_meta_request::clear_contract_id() {
  contract_id_.ClearToEmpty();
}
inline const std::string& get_contract_meta_request::contract_id() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.contract_meta_store.get_contract_meta_request.contract_id)
  return _internal_contract_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_contract_meta_request::set_contract_id(ArgT0&& arg0, ArgT... args) {
 
 contract_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.rpc.contract_meta_store.get_contract_meta_request.contract_id)
}
inline std::string* get_contract_meta_request::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.contract_meta_store.get_contract_meta_request.contract_id)
  return _s;
}
inline const std::string& get_contract_meta_request::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void get_contract_meta_request::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_contract_meta_request::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_contract_meta_request::release_contract_id() {
  // @@protoc_insertion_point(field_release:koinos.rpc.contract_meta_store.get_contract_meta_request.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_contract_meta_request::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.contract_meta_store.get_contract_meta_request.contract_id)
}

// -------------------------------------------------------------------

// get_contract_meta_response

// .koinos.contract_meta_store.contract_meta_item meta = 1;
inline bool get_contract_meta_response::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool get_contract_meta_response::has_meta() const {
  return _internal_has_meta();
}
inline const ::koinos::contract_meta_store::contract_meta_item& get_contract_meta_response::_internal_meta() const {
  const ::koinos::contract_meta_store::contract_meta_item* p = meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::contract_meta_store::contract_meta_item&>(
      ::koinos::contract_meta_store::_contract_meta_item_default_instance_);
}
inline const ::koinos::contract_meta_store::contract_meta_item& get_contract_meta_response::meta() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.contract_meta_store.get_contract_meta_response.meta)
  return _internal_meta();
}
inline void get_contract_meta_response::unsafe_arena_set_allocated_meta(
    ::koinos::contract_meta_store::contract_meta_item* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.contract_meta_store.get_contract_meta_response.meta)
}
inline ::koinos::contract_meta_store::contract_meta_item* get_contract_meta_response::release_meta() {
  
  ::koinos::contract_meta_store::contract_meta_item* temp = meta_;
  meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::contract_meta_store::contract_meta_item* get_contract_meta_response::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:koinos.rpc.contract_meta_store.get_contract_meta_response.meta)
  
  ::koinos::contract_meta_store::contract_meta_item* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::koinos::contract_meta_store::contract_meta_item* get_contract_meta_response::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::contract_meta_store::contract_meta_item>(GetArenaForAllocation());
    meta_ = p;
  }
  return meta_;
}
inline ::koinos::contract_meta_store::contract_meta_item* get_contract_meta_response::mutable_meta() {
  ::koinos::contract_meta_store::contract_meta_item* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.contract_meta_store.get_contract_meta_response.meta)
  return _msg;
}
inline void get_contract_meta_response::set_allocated_meta(::koinos::contract_meta_store::contract_meta_item* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta));
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.contract_meta_store.get_contract_meta_response.meta)
}

// -------------------------------------------------------------------

// contract_meta_store_request

// .koinos.rpc.reserved_rpc reserved = 1;
inline bool contract_meta_store_request::_internal_has_reserved() const {
  return request_case() == kReserved;
}
inline bool contract_meta_store_request::has_reserved() const {
  return _internal_has_reserved();
}
inline void contract_meta_store_request::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::rpc::reserved_rpc* contract_meta_store_request::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.rpc.contract_meta_store.contract_meta_store_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
      ::koinos::rpc::reserved_rpc* temp = request_.reserved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::reserved_rpc& contract_meta_store_request::_internal_reserved() const {
  return _internal_has_reserved()
      ? *request_.reserved_
      : reinterpret_cast< ::koinos::rpc::reserved_rpc&>(::koinos::rpc::_reserved_rpc_default_instance_);
}
inline const ::koinos::rpc::reserved_rpc& contract_meta_store_request::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.contract_meta_store.contract_meta_store_request.reserved)
  return _internal_reserved();
}
inline ::koinos::rpc::reserved_rpc* contract_meta_store_request::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.contract_meta_store.contract_meta_store_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
    ::koinos::rpc::reserved_rpc* temp = request_.reserved_;
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void contract_meta_store_request::unsafe_arena_set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  clear_request();
  if (reserved) {
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.contract_meta_store.contract_meta_store_request.reserved)
}
inline ::koinos::rpc::reserved_rpc* contract_meta_store_request::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_request();
    set_has_reserved();
    request_.reserved_ = CreateMaybeMessage< ::koinos::rpc::reserved_rpc >(GetArenaForAllocation());
  }
  return request_.reserved_;
}
inline ::koinos::rpc::reserved_rpc* contract_meta_store_request::mutable_reserved() {
  ::koinos::rpc::reserved_rpc* _msg = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.contract_meta_store.contract_meta_store_request.reserved)
  return _msg;
}

// .koinos.rpc.contract_meta_store.get_contract_meta_request get_contract_meta = 2;
inline bool contract_meta_store_request::_internal_has_get_contract_meta() const {
  return request_case() == kGetContractMeta;
}
inline bool contract_meta_store_request::has_get_contract_meta() const {
  return _internal_has_get_contract_meta();
}
inline void contract_meta_store_request::set_has_get_contract_meta() {
  _oneof_case_[0] = kGetContractMeta;
}
inline void contract_meta_store_request::clear_get_contract_meta() {
  if (_internal_has_get_contract_meta()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_contract_meta_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::contract_meta_store::get_contract_meta_request* contract_meta_store_request::release_get_contract_meta() {
  // @@protoc_insertion_point(field_release:koinos.rpc.contract_meta_store.contract_meta_store_request.get_contract_meta)
  if (_internal_has_get_contract_meta()) {
    clear_has_request();
      ::koinos::rpc::contract_meta_store::get_contract_meta_request* temp = request_.get_contract_meta_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_contract_meta_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::contract_meta_store::get_contract_meta_request& contract_meta_store_request::_internal_get_contract_meta() const {
  return _internal_has_get_contract_meta()
      ? *request_.get_contract_meta_
      : reinterpret_cast< ::koinos::rpc::contract_meta_store::get_contract_meta_request&>(::koinos::rpc::contract_meta_store::_get_contract_meta_request_default_instance_);
}
inline const ::koinos::rpc::contract_meta_store::get_contract_meta_request& contract_meta_store_request::get_contract_meta() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.contract_meta_store.contract_meta_store_request.get_contract_meta)
  return _internal_get_contract_meta();
}
inline ::koinos::rpc::contract_meta_store::get_contract_meta_request* contract_meta_store_request::unsafe_arena_release_get_contract_meta() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.contract_meta_store.contract_meta_store_request.get_contract_meta)
  if (_internal_has_get_contract_meta()) {
    clear_has_request();
    ::koinos::rpc::contract_meta_store::get_contract_meta_request* temp = request_.get_contract_meta_;
    request_.get_contract_meta_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void contract_meta_store_request::unsafe_arena_set_allocated_get_contract_meta(::koinos::rpc::contract_meta_store::get_contract_meta_request* get_contract_meta) {
  clear_request();
  if (get_contract_meta) {
    set_has_get_contract_meta();
    request_.get_contract_meta_ = get_contract_meta;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.contract_meta_store.contract_meta_store_request.get_contract_meta)
}
inline ::koinos::rpc::contract_meta_store::get_contract_meta_request* contract_meta_store_request::_internal_mutable_get_contract_meta() {
  if (!_internal_has_get_contract_meta()) {
    clear_request();
    set_has_get_contract_meta();
    request_.get_contract_meta_ = CreateMaybeMessage< ::koinos::rpc::contract_meta_store::get_contract_meta_request >(GetArenaForAllocation());
  }
  return request_.get_contract_meta_;
}
inline ::koinos::rpc::contract_meta_store::get_contract_meta_request* contract_meta_store_request::mutable_get_contract_meta() {
  ::koinos::rpc::contract_meta_store::get_contract_meta_request* _msg = _internal_mutable_get_contract_meta();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.contract_meta_store.contract_meta_store_request.get_contract_meta)
  return _msg;
}

inline bool contract_meta_store_request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void contract_meta_store_request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline contract_meta_store_request::RequestCase contract_meta_store_request::request_case() const {
  return contract_meta_store_request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// contract_meta_store_response

// .koinos.rpc.reserved_rpc reserved = 1;
inline bool contract_meta_store_response::_internal_has_reserved() const {
  return response_case() == kReserved;
}
inline bool contract_meta_store_response::has_reserved() const {
  return _internal_has_reserved();
}
inline void contract_meta_store_response::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::rpc::reserved_rpc* contract_meta_store_response::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.rpc.contract_meta_store.contract_meta_store_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
      ::koinos::rpc::reserved_rpc* temp = response_.reserved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::reserved_rpc& contract_meta_store_response::_internal_reserved() const {
  return _internal_has_reserved()
      ? *response_.reserved_
      : reinterpret_cast< ::koinos::rpc::reserved_rpc&>(::koinos::rpc::_reserved_rpc_default_instance_);
}
inline const ::koinos::rpc::reserved_rpc& contract_meta_store_response::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.contract_meta_store.contract_meta_store_response.reserved)
  return _internal_reserved();
}
inline ::koinos::rpc::reserved_rpc* contract_meta_store_response::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.contract_meta_store.contract_meta_store_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
    ::koinos::rpc::reserved_rpc* temp = response_.reserved_;
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void contract_meta_store_response::unsafe_arena_set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  clear_response();
  if (reserved) {
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.contract_meta_store.contract_meta_store_response.reserved)
}
inline ::koinos::rpc::reserved_rpc* contract_meta_store_response::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_response();
    set_has_reserved();
    response_.reserved_ = CreateMaybeMessage< ::koinos::rpc::reserved_rpc >(GetArenaForAllocation());
  }
  return response_.reserved_;
}
inline ::koinos::rpc::reserved_rpc* contract_meta_store_response::mutable_reserved() {
  ::koinos::rpc::reserved_rpc* _msg = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.contract_meta_store.contract_meta_store_response.reserved)
  return _msg;
}

// .koinos.rpc.error_status error = 2;
inline bool contract_meta_store_response::_internal_has_error() const {
  return response_case() == kError;
}
inline bool contract_meta_store_response::has_error() const {
  return _internal_has_error();
}
inline void contract_meta_store_response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::koinos::rpc::error_status* contract_meta_store_response::release_error() {
  // @@protoc_insertion_point(field_release:koinos.rpc.contract_meta_store.contract_meta_store_response.error)
  if (_internal_has_error()) {
    clear_has_response();
      ::koinos::rpc::error_status* temp = response_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::error_status& contract_meta_store_response::_internal_error() const {
  return _internal_has_error()
      ? *response_.error_
      : reinterpret_cast< ::koinos::rpc::error_status&>(::koinos::rpc::_error_status_default_instance_);
}
inline const ::koinos::rpc::error_status& contract_meta_store_response::error() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.contract_meta_store.contract_meta_store_response.error)
  return _internal_error();
}
inline ::koinos::rpc::error_status* contract_meta_store_response::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.contract_meta_store.contract_meta_store_response.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::koinos::rpc::error_status* temp = response_.error_;
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void contract_meta_store_response::unsafe_arena_set_allocated_error(::koinos::rpc::error_status* error) {
  clear_response();
  if (error) {
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.contract_meta_store.contract_meta_store_response.error)
}
inline ::koinos::rpc::error_status* contract_meta_store_response::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_response();
    set_has_error();
    response_.error_ = CreateMaybeMessage< ::koinos::rpc::error_status >(GetArenaForAllocation());
  }
  return response_.error_;
}
inline ::koinos::rpc::error_status* contract_meta_store_response::mutable_error() {
  ::koinos::rpc::error_status* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.contract_meta_store.contract_meta_store_response.error)
  return _msg;
}

// .koinos.rpc.contract_meta_store.get_contract_meta_response get_contract_meta = 3;
inline bool contract_meta_store_response::_internal_has_get_contract_meta() const {
  return response_case() == kGetContractMeta;
}
inline bool contract_meta_store_response::has_get_contract_meta() const {
  return _internal_has_get_contract_meta();
}
inline void contract_meta_store_response::set_has_get_contract_meta() {
  _oneof_case_[0] = kGetContractMeta;
}
inline void contract_meta_store_response::clear_get_contract_meta() {
  if (_internal_has_get_contract_meta()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.get_contract_meta_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::contract_meta_store::get_contract_meta_response* contract_meta_store_response::release_get_contract_meta() {
  // @@protoc_insertion_point(field_release:koinos.rpc.contract_meta_store.contract_meta_store_response.get_contract_meta)
  if (_internal_has_get_contract_meta()) {
    clear_has_response();
      ::koinos::rpc::contract_meta_store::get_contract_meta_response* temp = response_.get_contract_meta_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_contract_meta_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::contract_meta_store::get_contract_meta_response& contract_meta_store_response::_internal_get_contract_meta() const {
  return _internal_has_get_contract_meta()
      ? *response_.get_contract_meta_
      : reinterpret_cast< ::koinos::rpc::contract_meta_store::get_contract_meta_response&>(::koinos::rpc::contract_meta_store::_get_contract_meta_response_default_instance_);
}
inline const ::koinos::rpc::contract_meta_store::get_contract_meta_response& contract_meta_store_response::get_contract_meta() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.contract_meta_store.contract_meta_store_response.get_contract_meta)
  return _internal_get_contract_meta();
}
inline ::koinos::rpc::contract_meta_store::get_contract_meta_response* contract_meta_store_response::unsafe_arena_release_get_contract_meta() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.contract_meta_store.contract_meta_store_response.get_contract_meta)
  if (_internal_has_get_contract_meta()) {
    clear_has_response();
    ::koinos::rpc::contract_meta_store::get_contract_meta_response* temp = response_.get_contract_meta_;
    response_.get_contract_meta_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void contract_meta_store_response::unsafe_arena_set_allocated_get_contract_meta(::koinos::rpc::contract_meta_store::get_contract_meta_response* get_contract_meta) {
  clear_response();
  if (get_contract_meta) {
    set_has_get_contract_meta();
    response_.get_contract_meta_ = get_contract_meta;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.contract_meta_store.contract_meta_store_response.get_contract_meta)
}
inline ::koinos::rpc::contract_meta_store::get_contract_meta_response* contract_meta_store_response::_internal_mutable_get_contract_meta() {
  if (!_internal_has_get_contract_meta()) {
    clear_response();
    set_has_get_contract_meta();
    response_.get_contract_meta_ = CreateMaybeMessage< ::koinos::rpc::contract_meta_store::get_contract_meta_response >(GetArenaForAllocation());
  }
  return response_.get_contract_meta_;
}
inline ::koinos::rpc::contract_meta_store::get_contract_meta_response* contract_meta_store_response::mutable_get_contract_meta() {
  ::koinos::rpc::contract_meta_store::get_contract_meta_response* _msg = _internal_mutable_get_contract_meta();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.contract_meta_store.contract_meta_store_response.get_contract_meta)
  return _msg;
}

inline bool contract_meta_store_response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void contract_meta_store_response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline contract_meta_store_response::ResponseCase contract_meta_store_response::response_case() const {
  return contract_meta_store_response::ResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace contract_meta_store
}  // namespace rpc
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fcontract_5fmeta_5fstore_2fcontract_5fmeta_5fstore_5frpc_2eproto
