// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/standards/kcs2.proto

#include "koinos/standards/kcs2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace standards {
namespace kcs2 {
constexpr royalty::royalty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , percentage_(uint64_t{0u}){}
struct royaltyDefaultTypeInternal {
  constexpr royaltyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~royaltyDefaultTypeInternal() {}
  union {
    royalty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT royaltyDefaultTypeInternal _royalty_default_instance_;
constexpr name_arguments::name_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct name_argumentsDefaultTypeInternal {
  constexpr name_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~name_argumentsDefaultTypeInternal() {}
  union {
    name_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT name_argumentsDefaultTypeInternal _name_arguments_default_instance_;
constexpr name_result::name_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct name_resultDefaultTypeInternal {
  constexpr name_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~name_resultDefaultTypeInternal() {}
  union {
    name_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT name_resultDefaultTypeInternal _name_result_default_instance_;
constexpr symbol_arguments::symbol_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct symbol_argumentsDefaultTypeInternal {
  constexpr symbol_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~symbol_argumentsDefaultTypeInternal() {}
  union {
    symbol_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT symbol_argumentsDefaultTypeInternal _symbol_arguments_default_instance_;
constexpr symbol_result::symbol_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct symbol_resultDefaultTypeInternal {
  constexpr symbol_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~symbol_resultDefaultTypeInternal() {}
  union {
    symbol_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT symbol_resultDefaultTypeInternal _symbol_result_default_instance_;
constexpr uri_arguments::uri_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct uri_argumentsDefaultTypeInternal {
  constexpr uri_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~uri_argumentsDefaultTypeInternal() {}
  union {
    uri_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT uri_argumentsDefaultTypeInternal _uri_arguments_default_instance_;
constexpr uri_result::uri_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct uri_resultDefaultTypeInternal {
  constexpr uri_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~uri_resultDefaultTypeInternal() {}
  union {
    uri_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT uri_resultDefaultTypeInternal _uri_result_default_instance_;
constexpr owner_arguments::owner_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct owner_argumentsDefaultTypeInternal {
  constexpr owner_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~owner_argumentsDefaultTypeInternal() {}
  union {
    owner_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT owner_argumentsDefaultTypeInternal _owner_arguments_default_instance_;
constexpr owner_result::owner_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct owner_resultDefaultTypeInternal {
  constexpr owner_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~owner_resultDefaultTypeInternal() {}
  union {
    owner_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT owner_resultDefaultTypeInternal _owner_result_default_instance_;
constexpr total_supply_arguments::total_supply_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct total_supply_argumentsDefaultTypeInternal {
  constexpr total_supply_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~total_supply_argumentsDefaultTypeInternal() {}
  union {
    total_supply_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT total_supply_argumentsDefaultTypeInternal _total_supply_arguments_default_instance_;
constexpr total_supply_result::total_supply_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct total_supply_resultDefaultTypeInternal {
  constexpr total_supply_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~total_supply_resultDefaultTypeInternal() {}
  union {
    total_supply_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT total_supply_resultDefaultTypeInternal _total_supply_result_default_instance_;
constexpr royalties_arguments::royalties_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct royalties_argumentsDefaultTypeInternal {
  constexpr royalties_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~royalties_argumentsDefaultTypeInternal() {}
  union {
    royalties_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT royalties_argumentsDefaultTypeInternal _royalties_arguments_default_instance_;
constexpr royalties_result::royalties_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct royalties_resultDefaultTypeInternal {
  constexpr royalties_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~royalties_resultDefaultTypeInternal() {}
  union {
    royalties_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT royalties_resultDefaultTypeInternal _royalties_result_default_instance_;
constexpr balance_of_arguments::balance_of_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct balance_of_argumentsDefaultTypeInternal {
  constexpr balance_of_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~balance_of_argumentsDefaultTypeInternal() {}
  union {
    balance_of_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT balance_of_argumentsDefaultTypeInternal _balance_of_arguments_default_instance_;
constexpr balance_of_result::balance_of_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct balance_of_resultDefaultTypeInternal {
  constexpr balance_of_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~balance_of_resultDefaultTypeInternal() {}
  union {
    balance_of_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT balance_of_resultDefaultTypeInternal _balance_of_result_default_instance_;
constexpr owner_of_arguments::owner_of_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct owner_of_argumentsDefaultTypeInternal {
  constexpr owner_of_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~owner_of_argumentsDefaultTypeInternal() {}
  union {
    owner_of_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT owner_of_argumentsDefaultTypeInternal _owner_of_arguments_default_instance_;
constexpr owner_of_result::owner_of_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct owner_of_resultDefaultTypeInternal {
  constexpr owner_of_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~owner_of_resultDefaultTypeInternal() {}
  union {
    owner_of_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT owner_of_resultDefaultTypeInternal _owner_of_result_default_instance_;
constexpr get_approved_arguments::get_approved_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_approved_argumentsDefaultTypeInternal {
  constexpr get_approved_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_approved_argumentsDefaultTypeInternal() {}
  union {
    get_approved_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_approved_argumentsDefaultTypeInternal _get_approved_arguments_default_instance_;
constexpr get_approved_result::get_approved_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_approved_resultDefaultTypeInternal {
  constexpr get_approved_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_approved_resultDefaultTypeInternal() {}
  union {
    get_approved_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_approved_resultDefaultTypeInternal _get_approved_result_default_instance_;
constexpr is_approved_for_all_arguments::is_approved_for_all_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operator__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct is_approved_for_all_argumentsDefaultTypeInternal {
  constexpr is_approved_for_all_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~is_approved_for_all_argumentsDefaultTypeInternal() {}
  union {
    is_approved_for_all_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT is_approved_for_all_argumentsDefaultTypeInternal _is_approved_for_all_arguments_default_instance_;
constexpr is_approved_for_all_result::is_approved_for_all_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct is_approved_for_all_resultDefaultTypeInternal {
  constexpr is_approved_for_all_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~is_approved_for_all_resultDefaultTypeInternal() {}
  union {
    is_approved_for_all_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT is_approved_for_all_resultDefaultTypeInternal _is_approved_for_all_result_default_instance_;
constexpr transfer_ownership_arguments::transfer_ownership_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct transfer_ownership_argumentsDefaultTypeInternal {
  constexpr transfer_ownership_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transfer_ownership_argumentsDefaultTypeInternal() {}
  union {
    transfer_ownership_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transfer_ownership_argumentsDefaultTypeInternal _transfer_ownership_arguments_default_instance_;
constexpr transfer_ownership_result::transfer_ownership_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct transfer_ownership_resultDefaultTypeInternal {
  constexpr transfer_ownership_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transfer_ownership_resultDefaultTypeInternal() {}
  union {
    transfer_ownership_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transfer_ownership_resultDefaultTypeInternal _transfer_ownership_result_default_instance_;
constexpr set_royalties_argument::set_royalties_argument(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct set_royalties_argumentDefaultTypeInternal {
  constexpr set_royalties_argumentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_royalties_argumentDefaultTypeInternal() {}
  union {
    set_royalties_argument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_royalties_argumentDefaultTypeInternal _set_royalties_argument_default_instance_;
constexpr set_royalties_result::set_royalties_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct set_royalties_resultDefaultTypeInternal {
  constexpr set_royalties_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_royalties_resultDefaultTypeInternal() {}
  union {
    set_royalties_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_royalties_resultDefaultTypeInternal _set_royalties_result_default_instance_;
constexpr approve_arguments::approve_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : approver_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct approve_argumentsDefaultTypeInternal {
  constexpr approve_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~approve_argumentsDefaultTypeInternal() {}
  union {
    approve_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT approve_argumentsDefaultTypeInternal _approve_arguments_default_instance_;
constexpr approve_result::approve_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct approve_resultDefaultTypeInternal {
  constexpr approve_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~approve_resultDefaultTypeInternal() {}
  union {
    approve_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT approve_resultDefaultTypeInternal _approve_result_default_instance_;
constexpr set_approval_for_all_arguments::set_approval_for_all_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : approver_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operator_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , approved_(false){}
struct set_approval_for_all_argumentsDefaultTypeInternal {
  constexpr set_approval_for_all_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_approval_for_all_argumentsDefaultTypeInternal() {}
  union {
    set_approval_for_all_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_approval_for_all_argumentsDefaultTypeInternal _set_approval_for_all_arguments_default_instance_;
constexpr set_approval_for_all_result::set_approval_for_all_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct set_approval_for_all_resultDefaultTypeInternal {
  constexpr set_approval_for_all_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_approval_for_all_resultDefaultTypeInternal() {}
  union {
    set_approval_for_all_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_approval_for_all_resultDefaultTypeInternal _set_approval_for_all_result_default_instance_;
constexpr mint_arguments::mint_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct mint_argumentsDefaultTypeInternal {
  constexpr mint_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mint_argumentsDefaultTypeInternal() {}
  union {
    mint_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mint_argumentsDefaultTypeInternal _mint_arguments_default_instance_;
constexpr mint_result::mint_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct mint_resultDefaultTypeInternal {
  constexpr mint_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mint_resultDefaultTypeInternal() {}
  union {
    mint_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mint_resultDefaultTypeInternal _mint_result_default_instance_;
constexpr transfer_arguments::transfer_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct transfer_argumentsDefaultTypeInternal {
  constexpr transfer_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transfer_argumentsDefaultTypeInternal() {}
  union {
    transfer_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transfer_argumentsDefaultTypeInternal _transfer_arguments_default_instance_;
constexpr transfer_result::transfer_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct transfer_resultDefaultTypeInternal {
  constexpr transfer_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transfer_resultDefaultTypeInternal() {}
  union {
    transfer_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transfer_resultDefaultTypeInternal _transfer_result_default_instance_;
constexpr burn_arguments::burn_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct burn_argumentsDefaultTypeInternal {
  constexpr burn_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~burn_argumentsDefaultTypeInternal() {}
  union {
    burn_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT burn_argumentsDefaultTypeInternal _burn_arguments_default_instance_;
constexpr burn_result::burn_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct burn_resultDefaultTypeInternal {
  constexpr burn_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~burn_resultDefaultTypeInternal() {}
  union {
    burn_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT burn_resultDefaultTypeInternal _burn_result_default_instance_;
constexpr transfer_event::transfer_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct transfer_eventDefaultTypeInternal {
  constexpr transfer_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transfer_eventDefaultTypeInternal() {}
  union {
    transfer_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transfer_eventDefaultTypeInternal _transfer_event_default_instance_;
constexpr mint_event::mint_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct mint_eventDefaultTypeInternal {
  constexpr mint_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mint_eventDefaultTypeInternal() {}
  union {
    mint_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mint_eventDefaultTypeInternal _mint_event_default_instance_;
constexpr operator_approval_event::operator_approval_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : approver_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operator_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , approved_(false){}
struct operator_approval_eventDefaultTypeInternal {
  constexpr operator_approval_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~operator_approval_eventDefaultTypeInternal() {}
  union {
    operator_approval_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT operator_approval_eventDefaultTypeInternal _operator_approval_event_default_instance_;
constexpr token_approval_event::token_approval_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : approver_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct token_approval_eventDefaultTypeInternal {
  constexpr token_approval_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~token_approval_eventDefaultTypeInternal() {}
  union {
    token_approval_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT token_approval_eventDefaultTypeInternal _token_approval_event_default_instance_;
constexpr owner_event::owner_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct owner_eventDefaultTypeInternal {
  constexpr owner_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~owner_eventDefaultTypeInternal() {}
  union {
    owner_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT owner_eventDefaultTypeInternal _owner_event_default_instance_;
constexpr royalties_event::royalties_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct royalties_eventDefaultTypeInternal {
  constexpr royalties_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~royalties_eventDefaultTypeInternal() {}
  union {
    royalties_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT royalties_eventDefaultTypeInternal _royalties_event_default_instance_;
constexpr burn_event::burn_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct burn_eventDefaultTypeInternal {
  constexpr burn_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~burn_eventDefaultTypeInternal() {}
  union {
    burn_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT burn_eventDefaultTypeInternal _burn_event_default_instance_;
}  // namespace kcs2
}  // namespace standards
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[42];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fstandards_2fkcs2_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fstandards_2fkcs2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fstandards_2fkcs2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::royalty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::royalty, percentage_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::royalty, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::name_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::name_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::name_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::symbol_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::symbol_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::symbol_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::uri_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::uri_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::uri_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::owner_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::owner_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::owner_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::total_supply_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::total_supply_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::total_supply_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::royalties_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::royalties_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::royalties_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::balance_of_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::balance_of_arguments, owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::balance_of_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::balance_of_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::owner_of_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::owner_of_arguments, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::owner_of_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::owner_of_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::get_approved_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::get_approved_arguments, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::get_approved_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::get_approved_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::is_approved_for_all_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::is_approved_for_all_arguments, owner_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::is_approved_for_all_arguments, operator__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::is_approved_for_all_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::is_approved_for_all_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::transfer_ownership_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::transfer_ownership_arguments, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::transfer_ownership_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::set_royalties_argument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::set_royalties_argument, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::set_royalties_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::approve_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::approve_arguments, approver_address_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::approve_arguments, to_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::approve_arguments, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::approve_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::set_approval_for_all_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::set_approval_for_all_arguments, approver_address_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::set_approval_for_all_arguments, operator_address_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::set_approval_for_all_arguments, approved_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::set_approval_for_all_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::mint_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::mint_arguments, to_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::mint_arguments, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::mint_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::transfer_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::transfer_arguments, from_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::transfer_arguments, to_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::transfer_arguments, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::transfer_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::burn_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::burn_arguments, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::burn_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::transfer_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::transfer_event, from_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::transfer_event, to_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::transfer_event, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::mint_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::mint_event, to_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::mint_event, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::operator_approval_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::operator_approval_event, approver_address_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::operator_approval_event, operator_address_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::operator_approval_event, approved_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::token_approval_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::token_approval_event, approver_address_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::token_approval_event, to_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::token_approval_event, token_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::owner_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::owner_event, from_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::owner_event, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::royalties_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::royalties_event, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::burn_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::burn_event, from_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs2::burn_event, token_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::standards::kcs2::royalty)},
  { 7, -1, sizeof(::koinos::standards::kcs2::name_arguments)},
  { 12, -1, sizeof(::koinos::standards::kcs2::name_result)},
  { 18, -1, sizeof(::koinos::standards::kcs2::symbol_arguments)},
  { 23, -1, sizeof(::koinos::standards::kcs2::symbol_result)},
  { 29, -1, sizeof(::koinos::standards::kcs2::uri_arguments)},
  { 34, -1, sizeof(::koinos::standards::kcs2::uri_result)},
  { 40, -1, sizeof(::koinos::standards::kcs2::owner_arguments)},
  { 45, -1, sizeof(::koinos::standards::kcs2::owner_result)},
  { 51, -1, sizeof(::koinos::standards::kcs2::total_supply_arguments)},
  { 56, -1, sizeof(::koinos::standards::kcs2::total_supply_result)},
  { 62, -1, sizeof(::koinos::standards::kcs2::royalties_arguments)},
  { 67, -1, sizeof(::koinos::standards::kcs2::royalties_result)},
  { 73, -1, sizeof(::koinos::standards::kcs2::balance_of_arguments)},
  { 79, -1, sizeof(::koinos::standards::kcs2::balance_of_result)},
  { 85, -1, sizeof(::koinos::standards::kcs2::owner_of_arguments)},
  { 91, -1, sizeof(::koinos::standards::kcs2::owner_of_result)},
  { 97, -1, sizeof(::koinos::standards::kcs2::get_approved_arguments)},
  { 103, -1, sizeof(::koinos::standards::kcs2::get_approved_result)},
  { 109, -1, sizeof(::koinos::standards::kcs2::is_approved_for_all_arguments)},
  { 116, -1, sizeof(::koinos::standards::kcs2::is_approved_for_all_result)},
  { 122, -1, sizeof(::koinos::standards::kcs2::transfer_ownership_arguments)},
  { 128, -1, sizeof(::koinos::standards::kcs2::transfer_ownership_result)},
  { 133, -1, sizeof(::koinos::standards::kcs2::set_royalties_argument)},
  { 139, -1, sizeof(::koinos::standards::kcs2::set_royalties_result)},
  { 144, -1, sizeof(::koinos::standards::kcs2::approve_arguments)},
  { 152, -1, sizeof(::koinos::standards::kcs2::approve_result)},
  { 157, -1, sizeof(::koinos::standards::kcs2::set_approval_for_all_arguments)},
  { 165, -1, sizeof(::koinos::standards::kcs2::set_approval_for_all_result)},
  { 170, -1, sizeof(::koinos::standards::kcs2::mint_arguments)},
  { 177, -1, sizeof(::koinos::standards::kcs2::mint_result)},
  { 182, -1, sizeof(::koinos::standards::kcs2::transfer_arguments)},
  { 190, -1, sizeof(::koinos::standards::kcs2::transfer_result)},
  { 195, -1, sizeof(::koinos::standards::kcs2::burn_arguments)},
  { 201, -1, sizeof(::koinos::standards::kcs2::burn_result)},
  { 206, -1, sizeof(::koinos::standards::kcs2::transfer_event)},
  { 214, -1, sizeof(::koinos::standards::kcs2::mint_event)},
  { 221, -1, sizeof(::koinos::standards::kcs2::operator_approval_event)},
  { 229, -1, sizeof(::koinos::standards::kcs2::token_approval_event)},
  { 237, -1, sizeof(::koinos::standards::kcs2::owner_event)},
  { 244, -1, sizeof(::koinos::standards::kcs2::royalties_event)},
  { 250, -1, sizeof(::koinos::standards::kcs2::burn_event)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_royalty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_name_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_name_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_symbol_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_symbol_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_uri_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_uri_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_owner_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_owner_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_total_supply_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_total_supply_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_royalties_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_royalties_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_balance_of_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_balance_of_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_owner_of_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_owner_of_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_get_approved_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_get_approved_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_is_approved_for_all_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_is_approved_for_all_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_transfer_ownership_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_transfer_ownership_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_set_royalties_argument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_set_royalties_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_approve_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_approve_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_set_approval_for_all_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_set_approval_for_all_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_mint_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_mint_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_transfer_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_transfer_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_burn_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_burn_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_transfer_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_mint_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_operator_approval_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_token_approval_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_owner_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_royalties_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs2::_burn_event_default_instance_),
};

const char descriptor_table_protodef_koinos_2fstandards_2fkcs2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033koinos/standards/kcs2.proto\022\025koinos.st"
  "andards.kcs2\032\024koinos/options.proto\"8\n\007ro"
  "yalty\022\026\n\npercentage\030\001 \001(\004B\0020\001\022\025\n\007address"
  "\030\002 \001(\014B\004\200\265\030\006\"\020\n\016name_arguments\"\034\n\013name_r"
  "esult\022\r\n\005value\030\001 \001(\t\"\022\n\020symbol_arguments"
  "\"\036\n\rsymbol_result\022\r\n\005value\030\001 \001(\t\"\017\n\ruri_"
  "arguments\"\033\n\nuri_result\022\r\n\005value\030\001 \001(\t\"\021"
  "\n\017owner_arguments\"#\n\014owner_result\022\023\n\005val"
  "ue\030\001 \001(\014B\004\200\265\030\006\"\030\n\026total_supply_arguments"
  "\"(\n\023total_supply_result\022\021\n\005value\030\001 \001(\004B\002"
  "0\001\"\025\n\023royalties_arguments\"A\n\020royalties_r"
  "esult\022-\n\005value\030\001 \003(\0132\036.koinos.standards."
  "kcs2.royalty\"+\n\024balance_of_arguments\022\023\n\005"
  "owner\030\001 \001(\014B\004\200\265\030\006\"&\n\021balance_of_result\022\021"
  "\n\005value\030\001 \001(\004B\0020\001\",\n\022owner_of_arguments\022"
  "\026\n\010token_id\030\001 \001(\014B\004\200\265\030\002\"&\n\017owner_of_resu"
  "lt\022\023\n\005value\030\001 \001(\014B\004\200\265\030\006\"0\n\026get_approved_"
  "arguments\022\026\n\010token_id\030\001 \001(\014B\004\200\265\030\002\"*\n\023get"
  "_approved_result\022\023\n\005value\030\001 \001(\014B\004\200\265\030\006\"L\n"
  "\035is_approved_for_all_arguments\022\023\n\005owner\030"
  "\001 \001(\014B\004\200\265\030\006\022\026\n\010operator\030\002 \001(\014B\004\200\265\030\006\"+\n\032i"
  "s_approved_for_all_result\022\r\n\005value\030\001 \001(\010"
  "\"3\n\034transfer_ownership_arguments\022\023\n\005valu"
  "e\030\001 \001(\014B\004\200\265\030\006\"\033\n\031transfer_ownership_resu"
  "lt\"G\n\026set_royalties_argument\022-\n\005value\030\001 "
  "\003(\0132\036.koinos.standards.kcs2.royalty\"\026\n\024s"
  "et_royalties_result\"]\n\021approve_arguments"
  "\022\036\n\020approver_address\030\001 \001(\014B\004\200\265\030\006\022\020\n\002to\030\002"
  " \001(\014B\004\200\265\030\006\022\026\n\010token_id\030\003 \001(\014B\004\200\265\030\002\"\020\n\016ap"
  "prove_result\"r\n\036set_approval_for_all_arg"
  "uments\022\036\n\020approver_address\030\001 \001(\014B\004\200\265\030\006\022\036"
  "\n\020operator_address\030\002 \001(\014B\004\200\265\030\006\022\020\n\010approv"
  "ed\030\003 \001(\010\"\035\n\033set_approval_for_all_result\""
  ":\n\016mint_arguments\022\020\n\002to\030\001 \001(\014B\004\200\265\030\006\022\026\n\010t"
  "oken_id\030\002 \001(\014B\004\200\265\030\002\"\r\n\013mint_result\"R\n\022tr"
  "ansfer_arguments\022\022\n\004from\030\001 \001(\014B\004\200\265\030\006\022\020\n\002"
  "to\030\002 \001(\014B\004\200\265\030\006\022\026\n\010token_id\030\003 \001(\014B\004\200\265\030\002\"\021"
  "\n\017transfer_result\"(\n\016burn_arguments\022\026\n\010t"
  "oken_id\030\001 \001(\014B\004\200\265\030\002\"\r\n\013burn_result\"N\n\016tr"
  "ansfer_event\022\022\n\004from\030\001 \001(\014B\004\200\265\030\006\022\020\n\002to\030\002"
  " \001(\014B\004\200\265\030\006\022\026\n\010token_id\030\003 \001(\014B\004\200\265\030\002\"6\n\nmi"
  "nt_event\022\020\n\002to\030\001 \001(\014B\004\200\265\030\006\022\026\n\010token_id\030\002"
  " \001(\014B\004\200\265\030\002\"k\n\027operator_approval_event\022\036\n"
  "\020approver_address\030\001 \001(\014B\004\200\265\030\006\022\036\n\020operato"
  "r_address\030\002 \001(\014B\004\200\265\030\006\022\020\n\010approved\030\003 \001(\010\""
  "`\n\024token_approval_event\022\036\n\020approver_addr"
  "ess\030\001 \001(\014B\004\200\265\030\006\022\020\n\002to\030\002 \001(\014B\004\200\265\030\006\022\026\n\010tok"
  "en_id\030\003 \001(\014B\004\200\265\030\002\"3\n\013owner_event\022\022\n\004from"
  "\030\001 \001(\014B\004\200\265\030\006\022\020\n\002to\030\002 \001(\014B\004\200\265\030\006\"@\n\017royalt"
  "ies_event\022-\n\005value\030\001 \003(\0132\036.koinos.standa"
  "rds.kcs2.royalty\"8\n\nburn_event\022\022\n\004from\030\001"
  " \001(\014B\004\200\265\030\006\022\026\n\010token_id\030\002 \001(\014B\004\200\265\030\002B@Z>gi"
  "thub.com/koinos/koinos-proto-golang/v2/k"
  "oinos/standards/kcs2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fstandards_2fkcs2_2eproto_deps[1] = {
  &::descriptor_table_koinos_2foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fstandards_2fkcs2_2eproto = {
  false, false, 2148, descriptor_table_protodef_koinos_2fstandards_2fkcs2_2eproto, "koinos/standards/kcs2.proto", 
  &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once, descriptor_table_koinos_2fstandards_2fkcs2_2eproto_deps, 1, 42,
  schemas, file_default_instances, TableStruct_koinos_2fstandards_2fkcs2_2eproto::offsets,
  file_level_metadata_koinos_2fstandards_2fkcs2_2eproto, file_level_enum_descriptors_koinos_2fstandards_2fkcs2_2eproto, file_level_service_descriptors_koinos_2fstandards_2fkcs2_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter() {
  return &descriptor_table_koinos_2fstandards_2fkcs2_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fstandards_2fkcs2_2eproto(&descriptor_table_koinos_2fstandards_2fkcs2_2eproto);
namespace koinos {
namespace standards {
namespace kcs2 {

// ===================================================================

class royalty::_Internal {
 public:
};

royalty::royalty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.royalty)
}
royalty::royalty(const royalty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  percentage_ = from.percentage_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.royalty)
}

inline void royalty::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
percentage_ = uint64_t{0u};
}

royalty::~royalty() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.royalty)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void royalty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void royalty::ArenaDtor(void* object) {
  royalty* _this = reinterpret_cast< royalty* >(object);
  (void)_this;
}
void royalty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void royalty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void royalty::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.royalty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  percentage_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* royalty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 percentage = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes address = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* royalty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.royalty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 percentage = 1 [jstype = JS_STRING];
  if (this->_internal_percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_percentage(), target);
  }

  // bytes address = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.royalty)
  return target;
}

size_t royalty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.royalty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // uint64 percentage = 1 [jstype = JS_STRING];
  if (this->_internal_percentage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_percentage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData royalty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    royalty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*royalty::GetClassData() const { return &_class_data_; }

void royalty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<royalty *>(to)->MergeFrom(
      static_cast<const royalty &>(from));
}


void royalty::MergeFrom(const royalty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.royalty)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_percentage() != 0) {
    _internal_set_percentage(from._internal_percentage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void royalty::CopyFrom(const royalty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.royalty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royalty::IsInitialized() const {
  return true;
}

void royalty::InternalSwap(royalty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  swap(percentage_, other->percentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata royalty::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[0]);
}

// ===================================================================

class name_arguments::_Internal {
 public:
};

name_arguments::name_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.name_arguments)
}
name_arguments::name_arguments(const name_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.name_arguments)
}

inline void name_arguments::SharedCtor() {
}

name_arguments::~name_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.name_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void name_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void name_arguments::ArenaDtor(void* object) {
  name_arguments* _this = reinterpret_cast< name_arguments* >(object);
  (void)_this;
}
void name_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void name_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void name_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.name_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* name_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* name_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.name_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.name_arguments)
  return target;
}

size_t name_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.name_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData name_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    name_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*name_arguments::GetClassData() const { return &_class_data_; }

void name_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<name_arguments *>(to)->MergeFrom(
      static_cast<const name_arguments &>(from));
}


void name_arguments::MergeFrom(const name_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.name_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void name_arguments::CopyFrom(const name_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.name_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool name_arguments::IsInitialized() const {
  return true;
}

void name_arguments::InternalSwap(name_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata name_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[1]);
}

// ===================================================================

class name_result::_Internal {
 public:
};

name_result::name_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.name_result)
}
name_result::name_result(const name_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.name_result)
}

inline void name_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

name_result::~name_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.name_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void name_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void name_result::ArenaDtor(void* object) {
  name_result* _this = reinterpret_cast< name_result* >(object);
  (void)_this;
}
void name_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void name_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void name_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.name_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* name_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.standards.kcs2.name_result.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* name_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.name_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.standards.kcs2.name_result.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.name_result)
  return target;
}

size_t name_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.name_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData name_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    name_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*name_result::GetClassData() const { return &_class_data_; }

void name_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<name_result *>(to)->MergeFrom(
      static_cast<const name_result &>(from));
}


void name_result::MergeFrom(const name_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.name_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void name_result::CopyFrom(const name_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.name_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool name_result::IsInitialized() const {
  return true;
}

void name_result::InternalSwap(name_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata name_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[2]);
}

// ===================================================================

class symbol_arguments::_Internal {
 public:
};

symbol_arguments::symbol_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.symbol_arguments)
}
symbol_arguments::symbol_arguments(const symbol_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.symbol_arguments)
}

inline void symbol_arguments::SharedCtor() {
}

symbol_arguments::~symbol_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.symbol_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void symbol_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void symbol_arguments::ArenaDtor(void* object) {
  symbol_arguments* _this = reinterpret_cast< symbol_arguments* >(object);
  (void)_this;
}
void symbol_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void symbol_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void symbol_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.symbol_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* symbol_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* symbol_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.symbol_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.symbol_arguments)
  return target;
}

size_t symbol_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.symbol_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData symbol_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    symbol_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*symbol_arguments::GetClassData() const { return &_class_data_; }

void symbol_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<symbol_arguments *>(to)->MergeFrom(
      static_cast<const symbol_arguments &>(from));
}


void symbol_arguments::MergeFrom(const symbol_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.symbol_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void symbol_arguments::CopyFrom(const symbol_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.symbol_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool symbol_arguments::IsInitialized() const {
  return true;
}

void symbol_arguments::InternalSwap(symbol_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata symbol_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[3]);
}

// ===================================================================

class symbol_result::_Internal {
 public:
};

symbol_result::symbol_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.symbol_result)
}
symbol_result::symbol_result(const symbol_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.symbol_result)
}

inline void symbol_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

symbol_result::~symbol_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.symbol_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void symbol_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void symbol_result::ArenaDtor(void* object) {
  symbol_result* _this = reinterpret_cast< symbol_result* >(object);
  (void)_this;
}
void symbol_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void symbol_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void symbol_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.symbol_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* symbol_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.standards.kcs2.symbol_result.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* symbol_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.symbol_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.standards.kcs2.symbol_result.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.symbol_result)
  return target;
}

size_t symbol_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.symbol_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData symbol_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    symbol_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*symbol_result::GetClassData() const { return &_class_data_; }

void symbol_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<symbol_result *>(to)->MergeFrom(
      static_cast<const symbol_result &>(from));
}


void symbol_result::MergeFrom(const symbol_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.symbol_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void symbol_result::CopyFrom(const symbol_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.symbol_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool symbol_result::IsInitialized() const {
  return true;
}

void symbol_result::InternalSwap(symbol_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata symbol_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[4]);
}

// ===================================================================

class uri_arguments::_Internal {
 public:
};

uri_arguments::uri_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.uri_arguments)
}
uri_arguments::uri_arguments(const uri_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.uri_arguments)
}

inline void uri_arguments::SharedCtor() {
}

uri_arguments::~uri_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.uri_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void uri_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void uri_arguments::ArenaDtor(void* object) {
  uri_arguments* _this = reinterpret_cast< uri_arguments* >(object);
  (void)_this;
}
void uri_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void uri_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void uri_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.uri_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* uri_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uri_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.uri_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.uri_arguments)
  return target;
}

size_t uri_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.uri_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData uri_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    uri_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*uri_arguments::GetClassData() const { return &_class_data_; }

void uri_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<uri_arguments *>(to)->MergeFrom(
      static_cast<const uri_arguments &>(from));
}


void uri_arguments::MergeFrom(const uri_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.uri_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void uri_arguments::CopyFrom(const uri_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.uri_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uri_arguments::IsInitialized() const {
  return true;
}

void uri_arguments::InternalSwap(uri_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata uri_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[5]);
}

// ===================================================================

class uri_result::_Internal {
 public:
};

uri_result::uri_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.uri_result)
}
uri_result::uri_result(const uri_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.uri_result)
}

inline void uri_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

uri_result::~uri_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.uri_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void uri_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void uri_result::ArenaDtor(void* object) {
  uri_result* _this = reinterpret_cast< uri_result* >(object);
  (void)_this;
}
void uri_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void uri_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void uri_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.uri_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* uri_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.standards.kcs2.uri_result.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* uri_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.uri_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.standards.kcs2.uri_result.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.uri_result)
  return target;
}

size_t uri_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.uri_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData uri_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    uri_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*uri_result::GetClassData() const { return &_class_data_; }

void uri_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<uri_result *>(to)->MergeFrom(
      static_cast<const uri_result &>(from));
}


void uri_result::MergeFrom(const uri_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.uri_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void uri_result::CopyFrom(const uri_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.uri_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uri_result::IsInitialized() const {
  return true;
}

void uri_result::InternalSwap(uri_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata uri_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[6]);
}

// ===================================================================

class owner_arguments::_Internal {
 public:
};

owner_arguments::owner_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.owner_arguments)
}
owner_arguments::owner_arguments(const owner_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.owner_arguments)
}

inline void owner_arguments::SharedCtor() {
}

owner_arguments::~owner_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.owner_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void owner_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void owner_arguments::ArenaDtor(void* object) {
  owner_arguments* _this = reinterpret_cast< owner_arguments* >(object);
  (void)_this;
}
void owner_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void owner_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void owner_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.owner_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* owner_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* owner_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.owner_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.owner_arguments)
  return target;
}

size_t owner_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.owner_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData owner_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    owner_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*owner_arguments::GetClassData() const { return &_class_data_; }

void owner_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<owner_arguments *>(to)->MergeFrom(
      static_cast<const owner_arguments &>(from));
}


void owner_arguments::MergeFrom(const owner_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.owner_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void owner_arguments::CopyFrom(const owner_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.owner_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool owner_arguments::IsInitialized() const {
  return true;
}

void owner_arguments::InternalSwap(owner_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata owner_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[7]);
}

// ===================================================================

class owner_result::_Internal {
 public:
};

owner_result::owner_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.owner_result)
}
owner_result::owner_result(const owner_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.owner_result)
}

inline void owner_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

owner_result::~owner_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.owner_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void owner_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void owner_result::ArenaDtor(void* object) {
  owner_result* _this = reinterpret_cast< owner_result* >(object);
  (void)_this;
}
void owner_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void owner_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void owner_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.owner_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* owner_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* owner_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.owner_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.owner_result)
  return target;
}

size_t owner_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.owner_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData owner_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    owner_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*owner_result::GetClassData() const { return &_class_data_; }

void owner_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<owner_result *>(to)->MergeFrom(
      static_cast<const owner_result &>(from));
}


void owner_result::MergeFrom(const owner_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.owner_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void owner_result::CopyFrom(const owner_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.owner_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool owner_result::IsInitialized() const {
  return true;
}

void owner_result::InternalSwap(owner_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata owner_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[8]);
}

// ===================================================================

class total_supply_arguments::_Internal {
 public:
};

total_supply_arguments::total_supply_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.total_supply_arguments)
}
total_supply_arguments::total_supply_arguments(const total_supply_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.total_supply_arguments)
}

inline void total_supply_arguments::SharedCtor() {
}

total_supply_arguments::~total_supply_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.total_supply_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void total_supply_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void total_supply_arguments::ArenaDtor(void* object) {
  total_supply_arguments* _this = reinterpret_cast< total_supply_arguments* >(object);
  (void)_this;
}
void total_supply_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void total_supply_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void total_supply_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.total_supply_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* total_supply_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* total_supply_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.total_supply_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.total_supply_arguments)
  return target;
}

size_t total_supply_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.total_supply_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData total_supply_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    total_supply_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*total_supply_arguments::GetClassData() const { return &_class_data_; }

void total_supply_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<total_supply_arguments *>(to)->MergeFrom(
      static_cast<const total_supply_arguments &>(from));
}


void total_supply_arguments::MergeFrom(const total_supply_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.total_supply_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void total_supply_arguments::CopyFrom(const total_supply_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.total_supply_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool total_supply_arguments::IsInitialized() const {
  return true;
}

void total_supply_arguments::InternalSwap(total_supply_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata total_supply_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[9]);
}

// ===================================================================

class total_supply_result::_Internal {
 public:
};

total_supply_result::total_supply_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.total_supply_result)
}
total_supply_result::total_supply_result(const total_supply_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.total_supply_result)
}

inline void total_supply_result::SharedCtor() {
value_ = uint64_t{0u};
}

total_supply_result::~total_supply_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.total_supply_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void total_supply_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void total_supply_result::ArenaDtor(void* object) {
  total_supply_result* _this = reinterpret_cast< total_supply_result* >(object);
  (void)_this;
}
void total_supply_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void total_supply_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void total_supply_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.total_supply_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* total_supply_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* total_supply_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.total_supply_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.total_supply_result)
  return target;
}

size_t total_supply_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.total_supply_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData total_supply_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    total_supply_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*total_supply_result::GetClassData() const { return &_class_data_; }

void total_supply_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<total_supply_result *>(to)->MergeFrom(
      static_cast<const total_supply_result &>(from));
}


void total_supply_result::MergeFrom(const total_supply_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.total_supply_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void total_supply_result::CopyFrom(const total_supply_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.total_supply_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool total_supply_result::IsInitialized() const {
  return true;
}

void total_supply_result::InternalSwap(total_supply_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata total_supply_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[10]);
}

// ===================================================================

class royalties_arguments::_Internal {
 public:
};

royalties_arguments::royalties_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.royalties_arguments)
}
royalties_arguments::royalties_arguments(const royalties_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.royalties_arguments)
}

inline void royalties_arguments::SharedCtor() {
}

royalties_arguments::~royalties_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.royalties_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void royalties_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void royalties_arguments::ArenaDtor(void* object) {
  royalties_arguments* _this = reinterpret_cast< royalties_arguments* >(object);
  (void)_this;
}
void royalties_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void royalties_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void royalties_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.royalties_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* royalties_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* royalties_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.royalties_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.royalties_arguments)
  return target;
}

size_t royalties_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.royalties_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData royalties_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    royalties_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*royalties_arguments::GetClassData() const { return &_class_data_; }

void royalties_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<royalties_arguments *>(to)->MergeFrom(
      static_cast<const royalties_arguments &>(from));
}


void royalties_arguments::MergeFrom(const royalties_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.royalties_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void royalties_arguments::CopyFrom(const royalties_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.royalties_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royalties_arguments::IsInitialized() const {
  return true;
}

void royalties_arguments::InternalSwap(royalties_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata royalties_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[11]);
}

// ===================================================================

class royalties_result::_Internal {
 public:
};

royalties_result::royalties_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.royalties_result)
}
royalties_result::royalties_result(const royalties_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.royalties_result)
}

inline void royalties_result::SharedCtor() {
}

royalties_result::~royalties_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.royalties_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void royalties_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void royalties_result::ArenaDtor(void* object) {
  royalties_result* _this = reinterpret_cast< royalties_result* >(object);
  (void)_this;
}
void royalties_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void royalties_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void royalties_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.royalties_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* royalties_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .koinos.standards.kcs2.royalty value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* royalties_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.royalties_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .koinos.standards.kcs2.royalty value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.royalties_result)
  return target;
}

size_t royalties_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.royalties_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.standards.kcs2.royalty value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData royalties_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    royalties_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*royalties_result::GetClassData() const { return &_class_data_; }

void royalties_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<royalties_result *>(to)->MergeFrom(
      static_cast<const royalties_result &>(from));
}


void royalties_result::MergeFrom(const royalties_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.royalties_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void royalties_result::CopyFrom(const royalties_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.royalties_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royalties_result::IsInitialized() const {
  return true;
}

void royalties_result::InternalSwap(royalties_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata royalties_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[12]);
}

// ===================================================================

class balance_of_arguments::_Internal {
 public:
};

balance_of_arguments::balance_of_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.balance_of_arguments)
}
balance_of_arguments::balance_of_arguments(const balance_of_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.balance_of_arguments)
}

inline void balance_of_arguments::SharedCtor() {
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

balance_of_arguments::~balance_of_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.balance_of_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void balance_of_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void balance_of_arguments::ArenaDtor(void* object) {
  balance_of_arguments* _this = reinterpret_cast< balance_of_arguments* >(object);
  (void)_this;
}
void balance_of_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void balance_of_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void balance_of_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.balance_of_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* balance_of_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* balance_of_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.balance_of_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.balance_of_arguments)
  return target;
}

size_t balance_of_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.balance_of_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData balance_of_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    balance_of_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*balance_of_arguments::GetClassData() const { return &_class_data_; }

void balance_of_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<balance_of_arguments *>(to)->MergeFrom(
      static_cast<const balance_of_arguments &>(from));
}


void balance_of_arguments::MergeFrom(const balance_of_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.balance_of_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void balance_of_arguments::CopyFrom(const balance_of_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.balance_of_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool balance_of_arguments::IsInitialized() const {
  return true;
}

void balance_of_arguments::InternalSwap(balance_of_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata balance_of_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[13]);
}

// ===================================================================

class balance_of_result::_Internal {
 public:
};

balance_of_result::balance_of_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.balance_of_result)
}
balance_of_result::balance_of_result(const balance_of_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.balance_of_result)
}

inline void balance_of_result::SharedCtor() {
value_ = uint64_t{0u};
}

balance_of_result::~balance_of_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.balance_of_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void balance_of_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void balance_of_result::ArenaDtor(void* object) {
  balance_of_result* _this = reinterpret_cast< balance_of_result* >(object);
  (void)_this;
}
void balance_of_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void balance_of_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void balance_of_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.balance_of_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* balance_of_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* balance_of_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.balance_of_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.balance_of_result)
  return target;
}

size_t balance_of_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.balance_of_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData balance_of_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    balance_of_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*balance_of_result::GetClassData() const { return &_class_data_; }

void balance_of_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<balance_of_result *>(to)->MergeFrom(
      static_cast<const balance_of_result &>(from));
}


void balance_of_result::MergeFrom(const balance_of_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.balance_of_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void balance_of_result::CopyFrom(const balance_of_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.balance_of_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool balance_of_result::IsInitialized() const {
  return true;
}

void balance_of_result::InternalSwap(balance_of_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata balance_of_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[14]);
}

// ===================================================================

class owner_of_arguments::_Internal {
 public:
};

owner_of_arguments::owner_of_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.owner_of_arguments)
}
owner_of_arguments::owner_of_arguments(const owner_of_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.owner_of_arguments)
}

inline void owner_of_arguments::SharedCtor() {
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

owner_of_arguments::~owner_of_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.owner_of_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void owner_of_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void owner_of_arguments::ArenaDtor(void* object) {
  owner_of_arguments* _this = reinterpret_cast< owner_of_arguments* >(object);
  (void)_this;
}
void owner_of_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void owner_of_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void owner_of_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.owner_of_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* owner_of_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes token_id = 1 [(.koinos.btype) = HEX];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* owner_of_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.owner_of_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token_id = 1 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.owner_of_arguments)
  return target;
}

size_t owner_of_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.owner_of_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token_id = 1 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData owner_of_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    owner_of_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*owner_of_arguments::GetClassData() const { return &_class_data_; }

void owner_of_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<owner_of_arguments *>(to)->MergeFrom(
      static_cast<const owner_of_arguments &>(from));
}


void owner_of_arguments::MergeFrom(const owner_of_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.owner_of_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void owner_of_arguments::CopyFrom(const owner_of_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.owner_of_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool owner_of_arguments::IsInitialized() const {
  return true;
}

void owner_of_arguments::InternalSwap(owner_of_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, GetArenaForAllocation(),
      &other->token_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata owner_of_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[15]);
}

// ===================================================================

class owner_of_result::_Internal {
 public:
};

owner_of_result::owner_of_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.owner_of_result)
}
owner_of_result::owner_of_result(const owner_of_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.owner_of_result)
}

inline void owner_of_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

owner_of_result::~owner_of_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.owner_of_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void owner_of_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void owner_of_result::ArenaDtor(void* object) {
  owner_of_result* _this = reinterpret_cast< owner_of_result* >(object);
  (void)_this;
}
void owner_of_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void owner_of_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void owner_of_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.owner_of_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* owner_of_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* owner_of_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.owner_of_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.owner_of_result)
  return target;
}

size_t owner_of_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.owner_of_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData owner_of_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    owner_of_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*owner_of_result::GetClassData() const { return &_class_data_; }

void owner_of_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<owner_of_result *>(to)->MergeFrom(
      static_cast<const owner_of_result &>(from));
}


void owner_of_result::MergeFrom(const owner_of_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.owner_of_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void owner_of_result::CopyFrom(const owner_of_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.owner_of_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool owner_of_result::IsInitialized() const {
  return true;
}

void owner_of_result::InternalSwap(owner_of_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata owner_of_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[16]);
}

// ===================================================================

class get_approved_arguments::_Internal {
 public:
};

get_approved_arguments::get_approved_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.get_approved_arguments)
}
get_approved_arguments::get_approved_arguments(const get_approved_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.get_approved_arguments)
}

inline void get_approved_arguments::SharedCtor() {
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_approved_arguments::~get_approved_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.get_approved_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_approved_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_approved_arguments::ArenaDtor(void* object) {
  get_approved_arguments* _this = reinterpret_cast< get_approved_arguments* >(object);
  (void)_this;
}
void get_approved_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_approved_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_approved_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.get_approved_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_approved_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes token_id = 1 [(.koinos.btype) = HEX];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_approved_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.get_approved_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token_id = 1 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.get_approved_arguments)
  return target;
}

size_t get_approved_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.get_approved_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token_id = 1 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_approved_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_approved_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_approved_arguments::GetClassData() const { return &_class_data_; }

void get_approved_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_approved_arguments *>(to)->MergeFrom(
      static_cast<const get_approved_arguments &>(from));
}


void get_approved_arguments::MergeFrom(const get_approved_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.get_approved_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_approved_arguments::CopyFrom(const get_approved_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.get_approved_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_approved_arguments::IsInitialized() const {
  return true;
}

void get_approved_arguments::InternalSwap(get_approved_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, GetArenaForAllocation(),
      &other->token_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_approved_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[17]);
}

// ===================================================================

class get_approved_result::_Internal {
 public:
};

get_approved_result::get_approved_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.get_approved_result)
}
get_approved_result::get_approved_result(const get_approved_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.get_approved_result)
}

inline void get_approved_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_approved_result::~get_approved_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.get_approved_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_approved_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_approved_result::ArenaDtor(void* object) {
  get_approved_result* _this = reinterpret_cast< get_approved_result* >(object);
  (void)_this;
}
void get_approved_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_approved_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_approved_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.get_approved_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_approved_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_approved_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.get_approved_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.get_approved_result)
  return target;
}

size_t get_approved_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.get_approved_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_approved_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_approved_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_approved_result::GetClassData() const { return &_class_data_; }

void get_approved_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_approved_result *>(to)->MergeFrom(
      static_cast<const get_approved_result &>(from));
}


void get_approved_result::MergeFrom(const get_approved_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.get_approved_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_approved_result::CopyFrom(const get_approved_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.get_approved_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_approved_result::IsInitialized() const {
  return true;
}

void get_approved_result::InternalSwap(get_approved_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_approved_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[18]);
}

// ===================================================================

class is_approved_for_all_arguments::_Internal {
 public:
};

is_approved_for_all_arguments::is_approved_for_all_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.is_approved_for_all_arguments)
}
is_approved_for_all_arguments::is_approved_for_all_arguments(const is_approved_for_all_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_().empty()) {
    operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operator_(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.is_approved_for_all_arguments)
}

inline void is_approved_for_all_arguments::SharedCtor() {
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

is_approved_for_all_arguments::~is_approved_for_all_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.is_approved_for_all_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void is_approved_for_all_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void is_approved_for_all_arguments::ArenaDtor(void* object) {
  is_approved_for_all_arguments* _this = reinterpret_cast< is_approved_for_all_arguments* >(object);
  (void)_this;
}
void is_approved_for_all_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void is_approved_for_all_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void is_approved_for_all_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.is_approved_for_all_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  operator__.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* is_approved_for_all_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes operator = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_operator_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* is_approved_for_all_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.is_approved_for_all_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // bytes operator = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_operator_().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_operator_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.is_approved_for_all_arguments)
  return target;
}

size_t is_approved_for_all_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.is_approved_for_all_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  // bytes operator = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_operator_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_operator_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData is_approved_for_all_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    is_approved_for_all_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*is_approved_for_all_arguments::GetClassData() const { return &_class_data_; }

void is_approved_for_all_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<is_approved_for_all_arguments *>(to)->MergeFrom(
      static_cast<const is_approved_for_all_arguments &>(from));
}


void is_approved_for_all_arguments::MergeFrom(const is_approved_for_all_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.is_approved_for_all_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (!from._internal_operator_().empty()) {
    _internal_set_operator_(from._internal_operator_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void is_approved_for_all_arguments::CopyFrom(const is_approved_for_all_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.is_approved_for_all_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool is_approved_for_all_arguments::IsInitialized() const {
  return true;
}

void is_approved_for_all_arguments::InternalSwap(is_approved_for_all_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operator__, GetArenaForAllocation(),
      &other->operator__, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata is_approved_for_all_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[19]);
}

// ===================================================================

class is_approved_for_all_result::_Internal {
 public:
};

is_approved_for_all_result::is_approved_for_all_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.is_approved_for_all_result)
}
is_approved_for_all_result::is_approved_for_all_result(const is_approved_for_all_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.is_approved_for_all_result)
}

inline void is_approved_for_all_result::SharedCtor() {
value_ = false;
}

is_approved_for_all_result::~is_approved_for_all_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.is_approved_for_all_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void is_approved_for_all_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void is_approved_for_all_result::ArenaDtor(void* object) {
  is_approved_for_all_result* _this = reinterpret_cast< is_approved_for_all_result* >(object);
  (void)_this;
}
void is_approved_for_all_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void is_approved_for_all_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void is_approved_for_all_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.is_approved_for_all_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* is_approved_for_all_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* is_approved_for_all_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.is_approved_for_all_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.is_approved_for_all_result)
  return target;
}

size_t is_approved_for_all_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.is_approved_for_all_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData is_approved_for_all_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    is_approved_for_all_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*is_approved_for_all_result::GetClassData() const { return &_class_data_; }

void is_approved_for_all_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<is_approved_for_all_result *>(to)->MergeFrom(
      static_cast<const is_approved_for_all_result &>(from));
}


void is_approved_for_all_result::MergeFrom(const is_approved_for_all_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.is_approved_for_all_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void is_approved_for_all_result::CopyFrom(const is_approved_for_all_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.is_approved_for_all_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool is_approved_for_all_result::IsInitialized() const {
  return true;
}

void is_approved_for_all_result::InternalSwap(is_approved_for_all_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata is_approved_for_all_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[20]);
}

// ===================================================================

class transfer_ownership_arguments::_Internal {
 public:
};

transfer_ownership_arguments::transfer_ownership_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.transfer_ownership_arguments)
}
transfer_ownership_arguments::transfer_ownership_arguments(const transfer_ownership_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.transfer_ownership_arguments)
}

inline void transfer_ownership_arguments::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

transfer_ownership_arguments::~transfer_ownership_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.transfer_ownership_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transfer_ownership_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transfer_ownership_arguments::ArenaDtor(void* object) {
  transfer_ownership_arguments* _this = reinterpret_cast< transfer_ownership_arguments* >(object);
  (void)_this;
}
void transfer_ownership_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transfer_ownership_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transfer_ownership_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.transfer_ownership_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transfer_ownership_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transfer_ownership_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.transfer_ownership_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.transfer_ownership_arguments)
  return target;
}

size_t transfer_ownership_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.transfer_ownership_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transfer_ownership_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transfer_ownership_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transfer_ownership_arguments::GetClassData() const { return &_class_data_; }

void transfer_ownership_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transfer_ownership_arguments *>(to)->MergeFrom(
      static_cast<const transfer_ownership_arguments &>(from));
}


void transfer_ownership_arguments::MergeFrom(const transfer_ownership_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.transfer_ownership_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transfer_ownership_arguments::CopyFrom(const transfer_ownership_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.transfer_ownership_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_ownership_arguments::IsInitialized() const {
  return true;
}

void transfer_ownership_arguments::InternalSwap(transfer_ownership_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata transfer_ownership_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[21]);
}

// ===================================================================

class transfer_ownership_result::_Internal {
 public:
};

transfer_ownership_result::transfer_ownership_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.transfer_ownership_result)
}
transfer_ownership_result::transfer_ownership_result(const transfer_ownership_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.transfer_ownership_result)
}

inline void transfer_ownership_result::SharedCtor() {
}

transfer_ownership_result::~transfer_ownership_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.transfer_ownership_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transfer_ownership_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void transfer_ownership_result::ArenaDtor(void* object) {
  transfer_ownership_result* _this = reinterpret_cast< transfer_ownership_result* >(object);
  (void)_this;
}
void transfer_ownership_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transfer_ownership_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transfer_ownership_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.transfer_ownership_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transfer_ownership_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transfer_ownership_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.transfer_ownership_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.transfer_ownership_result)
  return target;
}

size_t transfer_ownership_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.transfer_ownership_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transfer_ownership_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transfer_ownership_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transfer_ownership_result::GetClassData() const { return &_class_data_; }

void transfer_ownership_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transfer_ownership_result *>(to)->MergeFrom(
      static_cast<const transfer_ownership_result &>(from));
}


void transfer_ownership_result::MergeFrom(const transfer_ownership_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.transfer_ownership_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transfer_ownership_result::CopyFrom(const transfer_ownership_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.transfer_ownership_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_ownership_result::IsInitialized() const {
  return true;
}

void transfer_ownership_result::InternalSwap(transfer_ownership_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transfer_ownership_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[22]);
}

// ===================================================================

class set_royalties_argument::_Internal {
 public:
};

set_royalties_argument::set_royalties_argument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.set_royalties_argument)
}
set_royalties_argument::set_royalties_argument(const set_royalties_argument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.set_royalties_argument)
}

inline void set_royalties_argument::SharedCtor() {
}

set_royalties_argument::~set_royalties_argument() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.set_royalties_argument)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_royalties_argument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void set_royalties_argument::ArenaDtor(void* object) {
  set_royalties_argument* _this = reinterpret_cast< set_royalties_argument* >(object);
  (void)_this;
}
void set_royalties_argument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_royalties_argument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_royalties_argument::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.set_royalties_argument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_royalties_argument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .koinos.standards.kcs2.royalty value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_royalties_argument::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.set_royalties_argument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .koinos.standards.kcs2.royalty value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.set_royalties_argument)
  return target;
}

size_t set_royalties_argument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.set_royalties_argument)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.standards.kcs2.royalty value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_royalties_argument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_royalties_argument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_royalties_argument::GetClassData() const { return &_class_data_; }

void set_royalties_argument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_royalties_argument *>(to)->MergeFrom(
      static_cast<const set_royalties_argument &>(from));
}


void set_royalties_argument::MergeFrom(const set_royalties_argument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.set_royalties_argument)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_royalties_argument::CopyFrom(const set_royalties_argument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.set_royalties_argument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_royalties_argument::IsInitialized() const {
  return true;
}

void set_royalties_argument::InternalSwap(set_royalties_argument* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata set_royalties_argument::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[23]);
}

// ===================================================================

class set_royalties_result::_Internal {
 public:
};

set_royalties_result::set_royalties_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.set_royalties_result)
}
set_royalties_result::set_royalties_result(const set_royalties_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.set_royalties_result)
}

inline void set_royalties_result::SharedCtor() {
}

set_royalties_result::~set_royalties_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.set_royalties_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_royalties_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void set_royalties_result::ArenaDtor(void* object) {
  set_royalties_result* _this = reinterpret_cast< set_royalties_result* >(object);
  (void)_this;
}
void set_royalties_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_royalties_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_royalties_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.set_royalties_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_royalties_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_royalties_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.set_royalties_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.set_royalties_result)
  return target;
}

size_t set_royalties_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.set_royalties_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_royalties_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_royalties_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_royalties_result::GetClassData() const { return &_class_data_; }

void set_royalties_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_royalties_result *>(to)->MergeFrom(
      static_cast<const set_royalties_result &>(from));
}


void set_royalties_result::MergeFrom(const set_royalties_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.set_royalties_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_royalties_result::CopyFrom(const set_royalties_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.set_royalties_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_royalties_result::IsInitialized() const {
  return true;
}

void set_royalties_result::InternalSwap(set_royalties_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata set_royalties_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[24]);
}

// ===================================================================

class approve_arguments::_Internal {
 public:
};

approve_arguments::approve_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.approve_arguments)
}
approve_arguments::approve_arguments(const approve_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  approver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_approver_address().empty()) {
    approver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_approver_address(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.approve_arguments)
}

inline void approve_arguments::SharedCtor() {
approver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

approve_arguments::~approve_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.approve_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void approve_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  approver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void approve_arguments::ArenaDtor(void* object) {
  approve_arguments* _this = reinterpret_cast< approve_arguments* >(object);
  (void)_this;
}
void approve_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void approve_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void approve_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.approve_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  approver_address_.ClearToEmpty();
  to_.ClearToEmpty();
  token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* approve_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes approver_address = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_approver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes token_id = 3 [(.koinos.btype) = HEX];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* approve_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.approve_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes approver_address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_approver_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_approver_address(), target);
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // bytes token_id = 3 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.approve_arguments)
  return target;
}

size_t approve_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.approve_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes approver_address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_approver_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_approver_address());
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // bytes token_id = 3 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData approve_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    approve_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*approve_arguments::GetClassData() const { return &_class_data_; }

void approve_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<approve_arguments *>(to)->MergeFrom(
      static_cast<const approve_arguments &>(from));
}


void approve_arguments::MergeFrom(const approve_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.approve_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_approver_address().empty()) {
    _internal_set_approver_address(from._internal_approver_address());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void approve_arguments::CopyFrom(const approve_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.approve_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool approve_arguments::IsInitialized() const {
  return true;
}

void approve_arguments::InternalSwap(approve_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &approver_address_, GetArenaForAllocation(),
      &other->approver_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, GetArenaForAllocation(),
      &other->token_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata approve_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[25]);
}

// ===================================================================

class approve_result::_Internal {
 public:
};

approve_result::approve_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.approve_result)
}
approve_result::approve_result(const approve_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.approve_result)
}

inline void approve_result::SharedCtor() {
}

approve_result::~approve_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.approve_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void approve_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void approve_result::ArenaDtor(void* object) {
  approve_result* _this = reinterpret_cast< approve_result* >(object);
  (void)_this;
}
void approve_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void approve_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void approve_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.approve_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* approve_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* approve_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.approve_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.approve_result)
  return target;
}

size_t approve_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.approve_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData approve_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    approve_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*approve_result::GetClassData() const { return &_class_data_; }

void approve_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<approve_result *>(to)->MergeFrom(
      static_cast<const approve_result &>(from));
}


void approve_result::MergeFrom(const approve_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.approve_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void approve_result::CopyFrom(const approve_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.approve_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool approve_result::IsInitialized() const {
  return true;
}

void approve_result::InternalSwap(approve_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata approve_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[26]);
}

// ===================================================================

class set_approval_for_all_arguments::_Internal {
 public:
};

set_approval_for_all_arguments::set_approval_for_all_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.set_approval_for_all_arguments)
}
set_approval_for_all_arguments::set_approval_for_all_arguments(const set_approval_for_all_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  approver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_approver_address().empty()) {
    approver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_approver_address(), 
      GetArenaForAllocation());
  }
  operator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_address().empty()) {
    operator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operator_address(), 
      GetArenaForAllocation());
  }
  approved_ = from.approved_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.set_approval_for_all_arguments)
}

inline void set_approval_for_all_arguments::SharedCtor() {
approver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
approved_ = false;
}

set_approval_for_all_arguments::~set_approval_for_all_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.set_approval_for_all_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_approval_for_all_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  approver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void set_approval_for_all_arguments::ArenaDtor(void* object) {
  set_approval_for_all_arguments* _this = reinterpret_cast< set_approval_for_all_arguments* >(object);
  (void)_this;
}
void set_approval_for_all_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_approval_for_all_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_approval_for_all_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.set_approval_for_all_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  approver_address_.ClearToEmpty();
  operator_address_.ClearToEmpty();
  approved_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_approval_for_all_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes approver_address = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_approver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes operator_address = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_operator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool approved = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          approved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_approval_for_all_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.set_approval_for_all_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes approver_address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_approver_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_approver_address(), target);
  }

  // bytes operator_address = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_operator_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_operator_address(), target);
  }

  // bool approved = 3;
  if (this->_internal_approved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_approved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.set_approval_for_all_arguments)
  return target;
}

size_t set_approval_for_all_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.set_approval_for_all_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes approver_address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_approver_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_approver_address());
  }

  // bytes operator_address = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_operator_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_operator_address());
  }

  // bool approved = 3;
  if (this->_internal_approved() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_approval_for_all_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_approval_for_all_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_approval_for_all_arguments::GetClassData() const { return &_class_data_; }

void set_approval_for_all_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_approval_for_all_arguments *>(to)->MergeFrom(
      static_cast<const set_approval_for_all_arguments &>(from));
}


void set_approval_for_all_arguments::MergeFrom(const set_approval_for_all_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.set_approval_for_all_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_approver_address().empty()) {
    _internal_set_approver_address(from._internal_approver_address());
  }
  if (!from._internal_operator_address().empty()) {
    _internal_set_operator_address(from._internal_operator_address());
  }
  if (from._internal_approved() != 0) {
    _internal_set_approved(from._internal_approved());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_approval_for_all_arguments::CopyFrom(const set_approval_for_all_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.set_approval_for_all_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_approval_for_all_arguments::IsInitialized() const {
  return true;
}

void set_approval_for_all_arguments::InternalSwap(set_approval_for_all_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &approver_address_, GetArenaForAllocation(),
      &other->approver_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operator_address_, GetArenaForAllocation(),
      &other->operator_address_, other->GetArenaForAllocation()
  );
  swap(approved_, other->approved_);
}

::PROTOBUF_NAMESPACE_ID::Metadata set_approval_for_all_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[27]);
}

// ===================================================================

class set_approval_for_all_result::_Internal {
 public:
};

set_approval_for_all_result::set_approval_for_all_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.set_approval_for_all_result)
}
set_approval_for_all_result::set_approval_for_all_result(const set_approval_for_all_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.set_approval_for_all_result)
}

inline void set_approval_for_all_result::SharedCtor() {
}

set_approval_for_all_result::~set_approval_for_all_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.set_approval_for_all_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_approval_for_all_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void set_approval_for_all_result::ArenaDtor(void* object) {
  set_approval_for_all_result* _this = reinterpret_cast< set_approval_for_all_result* >(object);
  (void)_this;
}
void set_approval_for_all_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_approval_for_all_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_approval_for_all_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.set_approval_for_all_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_approval_for_all_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_approval_for_all_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.set_approval_for_all_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.set_approval_for_all_result)
  return target;
}

size_t set_approval_for_all_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.set_approval_for_all_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_approval_for_all_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_approval_for_all_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_approval_for_all_result::GetClassData() const { return &_class_data_; }

void set_approval_for_all_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_approval_for_all_result *>(to)->MergeFrom(
      static_cast<const set_approval_for_all_result &>(from));
}


void set_approval_for_all_result::MergeFrom(const set_approval_for_all_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.set_approval_for_all_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_approval_for_all_result::CopyFrom(const set_approval_for_all_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.set_approval_for_all_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_approval_for_all_result::IsInitialized() const {
  return true;
}

void set_approval_for_all_result::InternalSwap(set_approval_for_all_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata set_approval_for_all_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[28]);
}

// ===================================================================

class mint_arguments::_Internal {
 public:
};

mint_arguments::mint_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.mint_arguments)
}
mint_arguments::mint_arguments(const mint_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.mint_arguments)
}

inline void mint_arguments::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

mint_arguments::~mint_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.mint_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mint_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mint_arguments::ArenaDtor(void* object) {
  mint_arguments* _this = reinterpret_cast< mint_arguments* >(object);
  (void)_this;
}
void mint_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mint_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mint_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.mint_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mint_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes to = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes token_id = 2 [(.koinos.btype) = HEX];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mint_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.mint_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes to = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_to(), target);
  }

  // bytes token_id = 2 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.mint_arguments)
  return target;
}

size_t mint_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.mint_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes to = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // bytes token_id = 2 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mint_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mint_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mint_arguments::GetClassData() const { return &_class_data_; }

void mint_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mint_arguments *>(to)->MergeFrom(
      static_cast<const mint_arguments &>(from));
}


void mint_arguments::MergeFrom(const mint_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.mint_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mint_arguments::CopyFrom(const mint_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.mint_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mint_arguments::IsInitialized() const {
  return true;
}

void mint_arguments::InternalSwap(mint_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, GetArenaForAllocation(),
      &other->token_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata mint_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[29]);
}

// ===================================================================

class mint_result::_Internal {
 public:
};

mint_result::mint_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.mint_result)
}
mint_result::mint_result(const mint_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.mint_result)
}

inline void mint_result::SharedCtor() {
}

mint_result::~mint_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.mint_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mint_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void mint_result::ArenaDtor(void* object) {
  mint_result* _this = reinterpret_cast< mint_result* >(object);
  (void)_this;
}
void mint_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mint_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mint_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.mint_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mint_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mint_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.mint_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.mint_result)
  return target;
}

size_t mint_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.mint_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mint_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mint_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mint_result::GetClassData() const { return &_class_data_; }

void mint_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mint_result *>(to)->MergeFrom(
      static_cast<const mint_result &>(from));
}


void mint_result::MergeFrom(const mint_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.mint_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mint_result::CopyFrom(const mint_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.mint_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mint_result::IsInitialized() const {
  return true;
}

void mint_result::InternalSwap(mint_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mint_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[30]);
}

// ===================================================================

class transfer_arguments::_Internal {
 public:
};

transfer_arguments::transfer_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.transfer_arguments)
}
transfer_arguments::transfer_arguments(const transfer_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.transfer_arguments)
}

inline void transfer_arguments::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

transfer_arguments::~transfer_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.transfer_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transfer_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transfer_arguments::ArenaDtor(void* object) {
  transfer_arguments* _this = reinterpret_cast< transfer_arguments* >(object);
  (void)_this;
}
void transfer_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transfer_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transfer_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.transfer_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transfer_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes from = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes token_id = 3 [(.koinos.btype) = HEX];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transfer_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.transfer_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // bytes token_id = 3 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.transfer_arguments)
  return target;
}

size_t transfer_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.transfer_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // bytes token_id = 3 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transfer_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transfer_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transfer_arguments::GetClassData() const { return &_class_data_; }

void transfer_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transfer_arguments *>(to)->MergeFrom(
      static_cast<const transfer_arguments &>(from));
}


void transfer_arguments::MergeFrom(const transfer_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.transfer_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transfer_arguments::CopyFrom(const transfer_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.transfer_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_arguments::IsInitialized() const {
  return true;
}

void transfer_arguments::InternalSwap(transfer_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, GetArenaForAllocation(),
      &other->token_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata transfer_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[31]);
}

// ===================================================================

class transfer_result::_Internal {
 public:
};

transfer_result::transfer_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.transfer_result)
}
transfer_result::transfer_result(const transfer_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.transfer_result)
}

inline void transfer_result::SharedCtor() {
}

transfer_result::~transfer_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.transfer_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transfer_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void transfer_result::ArenaDtor(void* object) {
  transfer_result* _this = reinterpret_cast< transfer_result* >(object);
  (void)_this;
}
void transfer_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transfer_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transfer_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.transfer_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transfer_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transfer_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.transfer_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.transfer_result)
  return target;
}

size_t transfer_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.transfer_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transfer_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transfer_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transfer_result::GetClassData() const { return &_class_data_; }

void transfer_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transfer_result *>(to)->MergeFrom(
      static_cast<const transfer_result &>(from));
}


void transfer_result::MergeFrom(const transfer_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.transfer_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transfer_result::CopyFrom(const transfer_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.transfer_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_result::IsInitialized() const {
  return true;
}

void transfer_result::InternalSwap(transfer_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transfer_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[32]);
}

// ===================================================================

class burn_arguments::_Internal {
 public:
};

burn_arguments::burn_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.burn_arguments)
}
burn_arguments::burn_arguments(const burn_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.burn_arguments)
}

inline void burn_arguments::SharedCtor() {
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

burn_arguments::~burn_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.burn_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void burn_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void burn_arguments::ArenaDtor(void* object) {
  burn_arguments* _this = reinterpret_cast< burn_arguments* >(object);
  (void)_this;
}
void burn_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void burn_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void burn_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.burn_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* burn_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes token_id = 1 [(.koinos.btype) = HEX];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* burn_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.burn_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token_id = 1 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.burn_arguments)
  return target;
}

size_t burn_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.burn_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token_id = 1 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData burn_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    burn_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*burn_arguments::GetClassData() const { return &_class_data_; }

void burn_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<burn_arguments *>(to)->MergeFrom(
      static_cast<const burn_arguments &>(from));
}


void burn_arguments::MergeFrom(const burn_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.burn_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void burn_arguments::CopyFrom(const burn_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.burn_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool burn_arguments::IsInitialized() const {
  return true;
}

void burn_arguments::InternalSwap(burn_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, GetArenaForAllocation(),
      &other->token_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata burn_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[33]);
}

// ===================================================================

class burn_result::_Internal {
 public:
};

burn_result::burn_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.burn_result)
}
burn_result::burn_result(const burn_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.burn_result)
}

inline void burn_result::SharedCtor() {
}

burn_result::~burn_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.burn_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void burn_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void burn_result::ArenaDtor(void* object) {
  burn_result* _this = reinterpret_cast< burn_result* >(object);
  (void)_this;
}
void burn_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void burn_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void burn_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.burn_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* burn_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* burn_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.burn_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.burn_result)
  return target;
}

size_t burn_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.burn_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData burn_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    burn_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*burn_result::GetClassData() const { return &_class_data_; }

void burn_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<burn_result *>(to)->MergeFrom(
      static_cast<const burn_result &>(from));
}


void burn_result::MergeFrom(const burn_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.burn_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void burn_result::CopyFrom(const burn_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.burn_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool burn_result::IsInitialized() const {
  return true;
}

void burn_result::InternalSwap(burn_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata burn_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[34]);
}

// ===================================================================

class transfer_event::_Internal {
 public:
};

transfer_event::transfer_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.transfer_event)
}
transfer_event::transfer_event(const transfer_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.transfer_event)
}

inline void transfer_event::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

transfer_event::~transfer_event() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.transfer_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transfer_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transfer_event::ArenaDtor(void* object) {
  transfer_event* _this = reinterpret_cast< transfer_event* >(object);
  (void)_this;
}
void transfer_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transfer_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transfer_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.transfer_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transfer_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes from = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes token_id = 3 [(.koinos.btype) = HEX];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transfer_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.transfer_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // bytes token_id = 3 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.transfer_event)
  return target;
}

size_t transfer_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.transfer_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // bytes token_id = 3 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transfer_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transfer_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transfer_event::GetClassData() const { return &_class_data_; }

void transfer_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transfer_event *>(to)->MergeFrom(
      static_cast<const transfer_event &>(from));
}


void transfer_event::MergeFrom(const transfer_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.transfer_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transfer_event::CopyFrom(const transfer_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.transfer_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_event::IsInitialized() const {
  return true;
}

void transfer_event::InternalSwap(transfer_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, GetArenaForAllocation(),
      &other->token_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata transfer_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[35]);
}

// ===================================================================

class mint_event::_Internal {
 public:
};

mint_event::mint_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.mint_event)
}
mint_event::mint_event(const mint_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.mint_event)
}

inline void mint_event::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

mint_event::~mint_event() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.mint_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mint_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mint_event::ArenaDtor(void* object) {
  mint_event* _this = reinterpret_cast< mint_event* >(object);
  (void)_this;
}
void mint_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mint_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mint_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.mint_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mint_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes to = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes token_id = 2 [(.koinos.btype) = HEX];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mint_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.mint_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes to = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_to(), target);
  }

  // bytes token_id = 2 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.mint_event)
  return target;
}

size_t mint_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.mint_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes to = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // bytes token_id = 2 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mint_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mint_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mint_event::GetClassData() const { return &_class_data_; }

void mint_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mint_event *>(to)->MergeFrom(
      static_cast<const mint_event &>(from));
}


void mint_event::MergeFrom(const mint_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.mint_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mint_event::CopyFrom(const mint_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.mint_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mint_event::IsInitialized() const {
  return true;
}

void mint_event::InternalSwap(mint_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, GetArenaForAllocation(),
      &other->token_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata mint_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[36]);
}

// ===================================================================

class operator_approval_event::_Internal {
 public:
};

operator_approval_event::operator_approval_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.operator_approval_event)
}
operator_approval_event::operator_approval_event(const operator_approval_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  approver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_approver_address().empty()) {
    approver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_approver_address(), 
      GetArenaForAllocation());
  }
  operator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_address().empty()) {
    operator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operator_address(), 
      GetArenaForAllocation());
  }
  approved_ = from.approved_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.operator_approval_event)
}

inline void operator_approval_event::SharedCtor() {
approver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
approved_ = false;
}

operator_approval_event::~operator_approval_event() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.operator_approval_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void operator_approval_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  approver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void operator_approval_event::ArenaDtor(void* object) {
  operator_approval_event* _this = reinterpret_cast< operator_approval_event* >(object);
  (void)_this;
}
void operator_approval_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void operator_approval_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void operator_approval_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.operator_approval_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  approver_address_.ClearToEmpty();
  operator_address_.ClearToEmpty();
  approved_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* operator_approval_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes approver_address = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_approver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes operator_address = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_operator_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool approved = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          approved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* operator_approval_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.operator_approval_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes approver_address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_approver_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_approver_address(), target);
  }

  // bytes operator_address = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_operator_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_operator_address(), target);
  }

  // bool approved = 3;
  if (this->_internal_approved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_approved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.operator_approval_event)
  return target;
}

size_t operator_approval_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.operator_approval_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes approver_address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_approver_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_approver_address());
  }

  // bytes operator_address = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_operator_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_operator_address());
  }

  // bool approved = 3;
  if (this->_internal_approved() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData operator_approval_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    operator_approval_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*operator_approval_event::GetClassData() const { return &_class_data_; }

void operator_approval_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<operator_approval_event *>(to)->MergeFrom(
      static_cast<const operator_approval_event &>(from));
}


void operator_approval_event::MergeFrom(const operator_approval_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.operator_approval_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_approver_address().empty()) {
    _internal_set_approver_address(from._internal_approver_address());
  }
  if (!from._internal_operator_address().empty()) {
    _internal_set_operator_address(from._internal_operator_address());
  }
  if (from._internal_approved() != 0) {
    _internal_set_approved(from._internal_approved());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void operator_approval_event::CopyFrom(const operator_approval_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.operator_approval_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operator_approval_event::IsInitialized() const {
  return true;
}

void operator_approval_event::InternalSwap(operator_approval_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &approver_address_, GetArenaForAllocation(),
      &other->approver_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operator_address_, GetArenaForAllocation(),
      &other->operator_address_, other->GetArenaForAllocation()
  );
  swap(approved_, other->approved_);
}

::PROTOBUF_NAMESPACE_ID::Metadata operator_approval_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[37]);
}

// ===================================================================

class token_approval_event::_Internal {
 public:
};

token_approval_event::token_approval_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.token_approval_event)
}
token_approval_event::token_approval_event(const token_approval_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  approver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_approver_address().empty()) {
    approver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_approver_address(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.token_approval_event)
}

inline void token_approval_event::SharedCtor() {
approver_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

token_approval_event::~token_approval_event() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.token_approval_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void token_approval_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  approver_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void token_approval_event::ArenaDtor(void* object) {
  token_approval_event* _this = reinterpret_cast< token_approval_event* >(object);
  (void)_this;
}
void token_approval_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void token_approval_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void token_approval_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.token_approval_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  approver_address_.ClearToEmpty();
  to_.ClearToEmpty();
  token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* token_approval_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes approver_address = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_approver_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes token_id = 3 [(.koinos.btype) = HEX];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* token_approval_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.token_approval_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes approver_address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_approver_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_approver_address(), target);
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // bytes token_id = 3 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.token_approval_event)
  return target;
}

size_t token_approval_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.token_approval_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes approver_address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_approver_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_approver_address());
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // bytes token_id = 3 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData token_approval_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    token_approval_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*token_approval_event::GetClassData() const { return &_class_data_; }

void token_approval_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<token_approval_event *>(to)->MergeFrom(
      static_cast<const token_approval_event &>(from));
}


void token_approval_event::MergeFrom(const token_approval_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.token_approval_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_approver_address().empty()) {
    _internal_set_approver_address(from._internal_approver_address());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void token_approval_event::CopyFrom(const token_approval_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.token_approval_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool token_approval_event::IsInitialized() const {
  return true;
}

void token_approval_event::InternalSwap(token_approval_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &approver_address_, GetArenaForAllocation(),
      &other->approver_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, GetArenaForAllocation(),
      &other->token_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata token_approval_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[38]);
}

// ===================================================================

class owner_event::_Internal {
 public:
};

owner_event::owner_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.owner_event)
}
owner_event::owner_event(const owner_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.owner_event)
}

inline void owner_event::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

owner_event::~owner_event() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.owner_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void owner_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void owner_event::ArenaDtor(void* object) {
  owner_event* _this = reinterpret_cast< owner_event* >(object);
  (void)_this;
}
void owner_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void owner_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void owner_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.owner_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* owner_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes from = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* owner_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.owner_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.owner_event)
  return target;
}

size_t owner_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.owner_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData owner_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    owner_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*owner_event::GetClassData() const { return &_class_data_; }

void owner_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<owner_event *>(to)->MergeFrom(
      static_cast<const owner_event &>(from));
}


void owner_event::MergeFrom(const owner_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.owner_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void owner_event::CopyFrom(const owner_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.owner_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool owner_event::IsInitialized() const {
  return true;
}

void owner_event::InternalSwap(owner_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata owner_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[39]);
}

// ===================================================================

class royalties_event::_Internal {
 public:
};

royalties_event::royalties_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.royalties_event)
}
royalties_event::royalties_event(const royalties_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.royalties_event)
}

inline void royalties_event::SharedCtor() {
}

royalties_event::~royalties_event() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.royalties_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void royalties_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void royalties_event::ArenaDtor(void* object) {
  royalties_event* _this = reinterpret_cast< royalties_event* >(object);
  (void)_this;
}
void royalties_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void royalties_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void royalties_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.royalties_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* royalties_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .koinos.standards.kcs2.royalty value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* royalties_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.royalties_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .koinos.standards.kcs2.royalty value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.royalties_event)
  return target;
}

size_t royalties_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.royalties_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.standards.kcs2.royalty value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData royalties_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    royalties_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*royalties_event::GetClassData() const { return &_class_data_; }

void royalties_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<royalties_event *>(to)->MergeFrom(
      static_cast<const royalties_event &>(from));
}


void royalties_event::MergeFrom(const royalties_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.royalties_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void royalties_event::CopyFrom(const royalties_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.royalties_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royalties_event::IsInitialized() const {
  return true;
}

void royalties_event::InternalSwap(royalties_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata royalties_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[40]);
}

// ===================================================================

class burn_event::_Internal {
 public:
};

burn_event::burn_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs2.burn_event)
}
burn_event::burn_event(const burn_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_id().empty()) {
    token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs2.burn_event)
}

inline void burn_event::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

burn_event::~burn_event() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs2.burn_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void burn_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void burn_event::ArenaDtor(void* object) {
  burn_event* _this = reinterpret_cast< burn_event* >(object);
  (void)_this;
}
void burn_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void burn_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void burn_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs2.burn_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  token_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* burn_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes from = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes token_id = 2 [(.koinos.btype) = HEX];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* burn_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs2.burn_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes token_id = 2 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_token_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs2.burn_event)
  return target;
}

size_t burn_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs2.burn_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes token_id = 2 [(.koinos.btype) = HEX];
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData burn_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    burn_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*burn_event::GetClassData() const { return &_class_data_; }

void burn_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<burn_event *>(to)->MergeFrom(
      static_cast<const burn_event &>(from));
}


void burn_event::MergeFrom(const burn_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs2.burn_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_token_id().empty()) {
    _internal_set_token_id(from._internal_token_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void burn_event::CopyFrom(const burn_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs2.burn_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool burn_event::IsInitialized() const {
  return true;
}

void burn_event::InternalSwap(burn_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_id_, GetArenaForAllocation(),
      &other->token_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata burn_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs2_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs2_2eproto[41]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kcs2
}  // namespace standards
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::royalty* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::royalty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::royalty >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::name_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::name_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::name_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::name_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::name_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::name_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::symbol_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::symbol_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::symbol_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::symbol_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::symbol_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::symbol_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::uri_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::uri_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::uri_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::uri_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::uri_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::uri_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::owner_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::owner_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::owner_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::owner_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::owner_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::owner_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::total_supply_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::total_supply_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::total_supply_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::total_supply_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::total_supply_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::total_supply_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::royalties_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::royalties_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::royalties_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::royalties_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::royalties_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::royalties_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::balance_of_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::balance_of_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::balance_of_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::balance_of_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::balance_of_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::balance_of_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::owner_of_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::owner_of_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::owner_of_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::owner_of_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::owner_of_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::owner_of_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::get_approved_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::get_approved_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::get_approved_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::get_approved_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::get_approved_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::get_approved_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::is_approved_for_all_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::is_approved_for_all_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::is_approved_for_all_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::is_approved_for_all_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::is_approved_for_all_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::is_approved_for_all_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::transfer_ownership_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::transfer_ownership_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::transfer_ownership_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::transfer_ownership_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::transfer_ownership_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::transfer_ownership_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::set_royalties_argument* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::set_royalties_argument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::set_royalties_argument >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::set_royalties_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::set_royalties_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::set_royalties_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::approve_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::approve_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::approve_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::approve_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::approve_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::approve_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::set_approval_for_all_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::set_approval_for_all_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::set_approval_for_all_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::set_approval_for_all_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::set_approval_for_all_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::set_approval_for_all_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::mint_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::mint_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::mint_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::mint_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::mint_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::mint_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::transfer_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::transfer_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::transfer_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::transfer_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::transfer_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::transfer_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::burn_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::burn_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::burn_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::burn_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::burn_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::burn_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::transfer_event* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::transfer_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::transfer_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::mint_event* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::mint_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::mint_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::operator_approval_event* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::operator_approval_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::operator_approval_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::token_approval_event* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::token_approval_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::token_approval_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::owner_event* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::owner_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::owner_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::royalties_event* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::royalties_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::royalties_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs2::burn_event* Arena::CreateMaybeMessage< ::koinos::standards::kcs2::burn_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs2::burn_event >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
