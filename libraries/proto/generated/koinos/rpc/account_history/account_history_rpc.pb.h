// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/account_history/account_history_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/account_history/account_history.pb.h"
#include "koinos/options.pb.h"
#include "koinos/common.pb.h"
#include "koinos/protocol/protocol.pb.h"
#include "koinos/rpc/rpc.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto;
namespace koinos {
namespace rpc {
namespace account_history {
class account_history_entry;
struct account_history_entryDefaultTypeInternal;
extern account_history_entryDefaultTypeInternal _account_history_entry_default_instance_;
class account_history_request;
struct account_history_requestDefaultTypeInternal;
extern account_history_requestDefaultTypeInternal _account_history_request_default_instance_;
class account_history_response;
struct account_history_responseDefaultTypeInternal;
extern account_history_responseDefaultTypeInternal _account_history_response_default_instance_;
class get_account_history_request;
struct get_account_history_requestDefaultTypeInternal;
extern get_account_history_requestDefaultTypeInternal _get_account_history_request_default_instance_;
class get_account_history_response;
struct get_account_history_responseDefaultTypeInternal;
extern get_account_history_responseDefaultTypeInternal _get_account_history_response_default_instance_;
}  // namespace account_history
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::rpc::account_history::account_history_entry* Arena::CreateMaybeMessage<::koinos::rpc::account_history::account_history_entry>(Arena*);
template<> ::koinos::rpc::account_history::account_history_request* Arena::CreateMaybeMessage<::koinos::rpc::account_history::account_history_request>(Arena*);
template<> ::koinos::rpc::account_history::account_history_response* Arena::CreateMaybeMessage<::koinos::rpc::account_history::account_history_response>(Arena*);
template<> ::koinos::rpc::account_history::get_account_history_request* Arena::CreateMaybeMessage<::koinos::rpc::account_history::get_account_history_request>(Arena*);
template<> ::koinos::rpc::account_history::get_account_history_response* Arena::CreateMaybeMessage<::koinos::rpc::account_history::get_account_history_response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace rpc {
namespace account_history {

// ===================================================================

class account_history_entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.account_history.account_history_entry) */ {
 public:
  inline account_history_entry() : account_history_entry(nullptr) {}
  ~account_history_entry() override;
  explicit constexpr account_history_entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  account_history_entry(const account_history_entry& from);
  account_history_entry(account_history_entry&& from) noexcept
    : account_history_entry() {
    *this = ::std::move(from);
  }

  inline account_history_entry& operator=(const account_history_entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline account_history_entry& operator=(account_history_entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const account_history_entry& default_instance() {
    return *internal_default_instance();
  }
  enum RecordCase {
    kTrx = 2,
    kBlock = 3,
    RECORD_NOT_SET = 0,
  };

  static inline const account_history_entry* internal_default_instance() {
    return reinterpret_cast<const account_history_entry*>(
               &_account_history_entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(account_history_entry& a, account_history_entry& b) {
    a.Swap(&b);
  }
  inline void Swap(account_history_entry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(account_history_entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline account_history_entry* New() const final {
    return new account_history_entry();
  }

  account_history_entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<account_history_entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const account_history_entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const account_history_entry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(account_history_entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.account_history.account_history_entry";
  }
  protected:
  explicit account_history_entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqNumFieldNumber = 1,
    kTrxFieldNumber = 2,
    kBlockFieldNumber = 3,
  };
  // uint64 seq_num = 1 [jstype = JS_STRING];
  void clear_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num() const;
  void set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_num() const;
  void _internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .koinos.account_history.transaction_record trx = 2;
  bool has_trx() const;
  private:
  bool _internal_has_trx() const;
  public:
  void clear_trx();
  const ::koinos::account_history::transaction_record& trx() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::account_history::transaction_record* release_trx();
  ::koinos::account_history::transaction_record* mutable_trx();
  void set_allocated_trx(::koinos::account_history::transaction_record* trx);
  private:
  const ::koinos::account_history::transaction_record& _internal_trx() const;
  ::koinos::account_history::transaction_record* _internal_mutable_trx();
  public:
  void unsafe_arena_set_allocated_trx(
      ::koinos::account_history::transaction_record* trx);
  ::koinos::account_history::transaction_record* unsafe_arena_release_trx();

  // .koinos.account_history.block_record block = 3;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::koinos::account_history::block_record& block() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::account_history::block_record* release_block();
  ::koinos::account_history::block_record* mutable_block();
  void set_allocated_block(::koinos::account_history::block_record* block);
  private:
  const ::koinos::account_history::block_record& _internal_block() const;
  ::koinos::account_history::block_record* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::koinos::account_history::block_record* block);
  ::koinos::account_history::block_record* unsafe_arena_release_block();

  void clear_record();
  RecordCase record_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.account_history.account_history_entry)
 private:
  class _Internal;
  void set_has_trx();
  void set_has_block();

  inline bool has_record() const;
  inline void clear_has_record();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num_;
  union RecordUnion {
    constexpr RecordUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::account_history::transaction_record* trx_;
    ::koinos::account_history::block_record* block_;
  } record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_account_history_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.account_history.get_account_history_request) */ {
 public:
  inline get_account_history_request() : get_account_history_request(nullptr) {}
  ~get_account_history_request() override;
  explicit constexpr get_account_history_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_account_history_request(const get_account_history_request& from);
  get_account_history_request(get_account_history_request&& from) noexcept
    : get_account_history_request() {
    *this = ::std::move(from);
  }

  inline get_account_history_request& operator=(const get_account_history_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_account_history_request& operator=(get_account_history_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_account_history_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_account_history_request* internal_default_instance() {
    return reinterpret_cast<const get_account_history_request*>(
               &_get_account_history_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(get_account_history_request& a, get_account_history_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_account_history_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_account_history_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_account_history_request* New() const final {
    return new get_account_history_request();
  }

  get_account_history_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_account_history_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_account_history_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_account_history_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_account_history_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.account_history.get_account_history_request";
  }
  protected:
  explicit get_account_history_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSeqNumFieldNumber = 2,
    kLimitFieldNumber = 3,
    kAscendingFieldNumber = 4,
    kIrreversibleFieldNumber = 5,
  };
  // bytes address = 1 [(.koinos.btype) = ADDRESS];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // optional uint64 seq_num = 2 [jstype = JS_STRING];
  bool has_seq_num() const;
  private:
  bool _internal_has_seq_num() const;
  public:
  void clear_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num() const;
  void set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_num() const;
  void _internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 limit = 3 [jstype = JS_STRING];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool ascending = 4;
  void clear_ascending();
  bool ascending() const;
  void set_ascending(bool value);
  private:
  bool _internal_ascending() const;
  void _internal_set_ascending(bool value);
  public:

  // bool irreversible = 5;
  void clear_irreversible();
  bool irreversible() const;
  void set_irreversible(bool value);
  private:
  bool _internal_irreversible() const;
  void _internal_set_irreversible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.account_history.get_account_history_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_;
  bool ascending_;
  bool irreversible_;
  friend struct ::TableStruct_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_account_history_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.account_history.get_account_history_response) */ {
 public:
  inline get_account_history_response() : get_account_history_response(nullptr) {}
  ~get_account_history_response() override;
  explicit constexpr get_account_history_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_account_history_response(const get_account_history_response& from);
  get_account_history_response(get_account_history_response&& from) noexcept
    : get_account_history_response() {
    *this = ::std::move(from);
  }

  inline get_account_history_response& operator=(const get_account_history_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_account_history_response& operator=(get_account_history_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_account_history_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_account_history_response* internal_default_instance() {
    return reinterpret_cast<const get_account_history_response*>(
               &_get_account_history_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(get_account_history_response& a, get_account_history_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_account_history_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_account_history_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_account_history_response* New() const final {
    return new get_account_history_response();
  }

  get_account_history_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_account_history_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_account_history_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_account_history_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_account_history_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.account_history.get_account_history_response";
  }
  protected:
  explicit get_account_history_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .koinos.rpc.account_history.account_history_entry values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::koinos::rpc::account_history::account_history_entry* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::account_history::account_history_entry >*
      mutable_values();
  private:
  const ::koinos::rpc::account_history::account_history_entry& _internal_values(int index) const;
  ::koinos::rpc::account_history::account_history_entry* _internal_add_values();
  public:
  const ::koinos::rpc::account_history::account_history_entry& values(int index) const;
  ::koinos::rpc::account_history::account_history_entry* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::account_history::account_history_entry >&
      values() const;

  // @@protoc_insertion_point(class_scope:koinos.rpc.account_history.get_account_history_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::account_history::account_history_entry > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto;
};
// -------------------------------------------------------------------

class account_history_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.account_history.account_history_request) */ {
 public:
  inline account_history_request() : account_history_request(nullptr) {}
  ~account_history_request() override;
  explicit constexpr account_history_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  account_history_request(const account_history_request& from);
  account_history_request(account_history_request&& from) noexcept
    : account_history_request() {
    *this = ::std::move(from);
  }

  inline account_history_request& operator=(const account_history_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline account_history_request& operator=(account_history_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const account_history_request& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kReserved = 1,
    kGetAccountHistory = 2,
    REQUEST_NOT_SET = 0,
  };

  static inline const account_history_request* internal_default_instance() {
    return reinterpret_cast<const account_history_request*>(
               &_account_history_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(account_history_request& a, account_history_request& b) {
    a.Swap(&b);
  }
  inline void Swap(account_history_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(account_history_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline account_history_request* New() const final {
    return new account_history_request();
  }

  account_history_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<account_history_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const account_history_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const account_history_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(account_history_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.account_history.account_history_request";
  }
  protected:
  explicit account_history_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kGetAccountHistoryFieldNumber = 2,
  };
  // .koinos.rpc.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::rpc::reserved_rpc& reserved() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::reserved_rpc* release_reserved();
  ::koinos::rpc::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved);
  private:
  const ::koinos::rpc::reserved_rpc& _internal_reserved() const;
  ::koinos::rpc::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::rpc::reserved_rpc* reserved);
  ::koinos::rpc::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.rpc.account_history.get_account_history_request get_account_history = 2;
  bool has_get_account_history() const;
  private:
  bool _internal_has_get_account_history() const;
  public:
  void clear_get_account_history();
  const ::koinos::rpc::account_history::get_account_history_request& get_account_history() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::account_history::get_account_history_request* release_get_account_history();
  ::koinos::rpc::account_history::get_account_history_request* mutable_get_account_history();
  void set_allocated_get_account_history(::koinos::rpc::account_history::get_account_history_request* get_account_history);
  private:
  const ::koinos::rpc::account_history::get_account_history_request& _internal_get_account_history() const;
  ::koinos::rpc::account_history::get_account_history_request* _internal_mutable_get_account_history();
  public:
  void unsafe_arena_set_allocated_get_account_history(
      ::koinos::rpc::account_history::get_account_history_request* get_account_history);
  ::koinos::rpc::account_history::get_account_history_request* unsafe_arena_release_get_account_history();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.account_history.account_history_request)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_get_account_history();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestUnion {
    constexpr RequestUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::rpc::reserved_rpc* reserved_;
    ::koinos::rpc::account_history::get_account_history_request* get_account_history_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto;
};
// -------------------------------------------------------------------

class account_history_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.account_history.account_history_response) */ {
 public:
  inline account_history_response() : account_history_response(nullptr) {}
  ~account_history_response() override;
  explicit constexpr account_history_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  account_history_response(const account_history_response& from);
  account_history_response(account_history_response&& from) noexcept
    : account_history_response() {
    *this = ::std::move(from);
  }

  inline account_history_response& operator=(const account_history_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline account_history_response& operator=(account_history_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const account_history_response& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kReserved = 1,
    kError = 2,
    kGetAccountHistory = 3,
    RESPONSE_NOT_SET = 0,
  };

  static inline const account_history_response* internal_default_instance() {
    return reinterpret_cast<const account_history_response*>(
               &_account_history_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(account_history_response& a, account_history_response& b) {
    a.Swap(&b);
  }
  inline void Swap(account_history_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(account_history_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline account_history_response* New() const final {
    return new account_history_response();
  }

  account_history_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<account_history_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const account_history_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const account_history_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(account_history_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.account_history.account_history_response";
  }
  protected:
  explicit account_history_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kErrorFieldNumber = 2,
    kGetAccountHistoryFieldNumber = 3,
  };
  // .koinos.rpc.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::rpc::reserved_rpc& reserved() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::reserved_rpc* release_reserved();
  ::koinos::rpc::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved);
  private:
  const ::koinos::rpc::reserved_rpc& _internal_reserved() const;
  ::koinos::rpc::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::rpc::reserved_rpc* reserved);
  ::koinos::rpc::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.rpc.error_response error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::koinos::rpc::error_response& error() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::error_response* release_error();
  ::koinos::rpc::error_response* mutable_error();
  void set_allocated_error(::koinos::rpc::error_response* error);
  private:
  const ::koinos::rpc::error_response& _internal_error() const;
  ::koinos::rpc::error_response* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::koinos::rpc::error_response* error);
  ::koinos::rpc::error_response* unsafe_arena_release_error();

  // .koinos.rpc.account_history.get_account_history_response get_account_history = 3;
  bool has_get_account_history() const;
  private:
  bool _internal_has_get_account_history() const;
  public:
  void clear_get_account_history();
  const ::koinos::rpc::account_history::get_account_history_response& get_account_history() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::account_history::get_account_history_response* release_get_account_history();
  ::koinos::rpc::account_history::get_account_history_response* mutable_get_account_history();
  void set_allocated_get_account_history(::koinos::rpc::account_history::get_account_history_response* get_account_history);
  private:
  const ::koinos::rpc::account_history::get_account_history_response& _internal_get_account_history() const;
  ::koinos::rpc::account_history::get_account_history_response* _internal_mutable_get_account_history();
  public:
  void unsafe_arena_set_allocated_get_account_history(
      ::koinos::rpc::account_history::get_account_history_response* get_account_history);
  ::koinos::rpc::account_history::get_account_history_response* unsafe_arena_release_get_account_history();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.account_history.account_history_response)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_error();
  void set_has_get_account_history();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResponseUnion {
    constexpr ResponseUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::rpc::reserved_rpc* reserved_;
    ::koinos::rpc::error_response* error_;
    ::koinos::rpc::account_history::get_account_history_response* get_account_history_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// account_history_entry

// uint64 seq_num = 1 [jstype = JS_STRING];
inline void account_history_entry::clear_seq_num() {
  seq_num_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 account_history_entry::_internal_seq_num() const {
  return seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 account_history_entry::seq_num() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.account_history_entry.seq_num)
  return _internal_seq_num();
}
inline void account_history_entry::_internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_num_ = value;
}
inline void account_history_entry::set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.account_history.account_history_entry.seq_num)
}

// .koinos.account_history.transaction_record trx = 2;
inline bool account_history_entry::_internal_has_trx() const {
  return record_case() == kTrx;
}
inline bool account_history_entry::has_trx() const {
  return _internal_has_trx();
}
inline void account_history_entry::set_has_trx() {
  _oneof_case_[0] = kTrx;
}
inline ::koinos::account_history::transaction_record* account_history_entry::release_trx() {
  // @@protoc_insertion_point(field_release:koinos.rpc.account_history.account_history_entry.trx)
  if (_internal_has_trx()) {
    clear_has_record();
      ::koinos::account_history::transaction_record* temp = record_.trx_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    record_.trx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::account_history::transaction_record& account_history_entry::_internal_trx() const {
  return _internal_has_trx()
      ? *record_.trx_
      : reinterpret_cast< ::koinos::account_history::transaction_record&>(::koinos::account_history::_transaction_record_default_instance_);
}
inline const ::koinos::account_history::transaction_record& account_history_entry::trx() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.account_history_entry.trx)
  return _internal_trx();
}
inline ::koinos::account_history::transaction_record* account_history_entry::unsafe_arena_release_trx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.account_history.account_history_entry.trx)
  if (_internal_has_trx()) {
    clear_has_record();
    ::koinos::account_history::transaction_record* temp = record_.trx_;
    record_.trx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void account_history_entry::unsafe_arena_set_allocated_trx(::koinos::account_history::transaction_record* trx) {
  clear_record();
  if (trx) {
    set_has_trx();
    record_.trx_ = trx;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.account_history.account_history_entry.trx)
}
inline ::koinos::account_history::transaction_record* account_history_entry::_internal_mutable_trx() {
  if (!_internal_has_trx()) {
    clear_record();
    set_has_trx();
    record_.trx_ = CreateMaybeMessage< ::koinos::account_history::transaction_record >(GetArenaForAllocation());
  }
  return record_.trx_;
}
inline ::koinos::account_history::transaction_record* account_history_entry::mutable_trx() {
  ::koinos::account_history::transaction_record* _msg = _internal_mutable_trx();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.account_history.account_history_entry.trx)
  return _msg;
}

// .koinos.account_history.block_record block = 3;
inline bool account_history_entry::_internal_has_block() const {
  return record_case() == kBlock;
}
inline bool account_history_entry::has_block() const {
  return _internal_has_block();
}
inline void account_history_entry::set_has_block() {
  _oneof_case_[0] = kBlock;
}
inline ::koinos::account_history::block_record* account_history_entry::release_block() {
  // @@protoc_insertion_point(field_release:koinos.rpc.account_history.account_history_entry.block)
  if (_internal_has_block()) {
    clear_has_record();
      ::koinos::account_history::block_record* temp = record_.block_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    record_.block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::account_history::block_record& account_history_entry::_internal_block() const {
  return _internal_has_block()
      ? *record_.block_
      : reinterpret_cast< ::koinos::account_history::block_record&>(::koinos::account_history::_block_record_default_instance_);
}
inline const ::koinos::account_history::block_record& account_history_entry::block() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.account_history_entry.block)
  return _internal_block();
}
inline ::koinos::account_history::block_record* account_history_entry::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.account_history.account_history_entry.block)
  if (_internal_has_block()) {
    clear_has_record();
    ::koinos::account_history::block_record* temp = record_.block_;
    record_.block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void account_history_entry::unsafe_arena_set_allocated_block(::koinos::account_history::block_record* block) {
  clear_record();
  if (block) {
    set_has_block();
    record_.block_ = block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.account_history.account_history_entry.block)
}
inline ::koinos::account_history::block_record* account_history_entry::_internal_mutable_block() {
  if (!_internal_has_block()) {
    clear_record();
    set_has_block();
    record_.block_ = CreateMaybeMessage< ::koinos::account_history::block_record >(GetArenaForAllocation());
  }
  return record_.block_;
}
inline ::koinos::account_history::block_record* account_history_entry::mutable_block() {
  ::koinos::account_history::block_record* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.account_history.account_history_entry.block)
  return _msg;
}

inline bool account_history_entry::has_record() const {
  return record_case() != RECORD_NOT_SET;
}
inline void account_history_entry::clear_has_record() {
  _oneof_case_[0] = RECORD_NOT_SET;
}
inline account_history_entry::RecordCase account_history_entry::record_case() const {
  return account_history_entry::RecordCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// get_account_history_request

// bytes address = 1 [(.koinos.btype) = ADDRESS];
inline void get_account_history_request::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& get_account_history_request::address() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.get_account_history_request.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_account_history_request::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.rpc.account_history.get_account_history_request.address)
}
inline std::string* get_account_history_request::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.account_history.get_account_history_request.address)
  return _s;
}
inline const std::string& get_account_history_request::_internal_address() const {
  return address_.Get();
}
inline void get_account_history_request::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_account_history_request::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_account_history_request::release_address() {
  // @@protoc_insertion_point(field_release:koinos.rpc.account_history.get_account_history_request.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_account_history_request::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.account_history.get_account_history_request.address)
}

// optional uint64 seq_num = 2 [jstype = JS_STRING];
inline bool get_account_history_request::_internal_has_seq_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool get_account_history_request::has_seq_num() const {
  return _internal_has_seq_num();
}
inline void get_account_history_request::clear_seq_num() {
  seq_num_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_account_history_request::_internal_seq_num() const {
  return seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_account_history_request::seq_num() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.get_account_history_request.seq_num)
  return _internal_seq_num();
}
inline void get_account_history_request::_internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  seq_num_ = value;
}
inline void get_account_history_request::set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.account_history.get_account_history_request.seq_num)
}

// uint64 limit = 3 [jstype = JS_STRING];
inline void get_account_history_request::clear_limit() {
  limit_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_account_history_request::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_account_history_request::limit() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.get_account_history_request.limit)
  return _internal_limit();
}
inline void get_account_history_request::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  limit_ = value;
}
inline void get_account_history_request::set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.account_history.get_account_history_request.limit)
}

// bool ascending = 4;
inline void get_account_history_request::clear_ascending() {
  ascending_ = false;
}
inline bool get_account_history_request::_internal_ascending() const {
  return ascending_;
}
inline bool get_account_history_request::ascending() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.get_account_history_request.ascending)
  return _internal_ascending();
}
inline void get_account_history_request::_internal_set_ascending(bool value) {
  
  ascending_ = value;
}
inline void get_account_history_request::set_ascending(bool value) {
  _internal_set_ascending(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.account_history.get_account_history_request.ascending)
}

// bool irreversible = 5;
inline void get_account_history_request::clear_irreversible() {
  irreversible_ = false;
}
inline bool get_account_history_request::_internal_irreversible() const {
  return irreversible_;
}
inline bool get_account_history_request::irreversible() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.get_account_history_request.irreversible)
  return _internal_irreversible();
}
inline void get_account_history_request::_internal_set_irreversible(bool value) {
  
  irreversible_ = value;
}
inline void get_account_history_request::set_irreversible(bool value) {
  _internal_set_irreversible(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.account_history.get_account_history_request.irreversible)
}

// -------------------------------------------------------------------

// get_account_history_response

// repeated .koinos.rpc.account_history.account_history_entry values = 1;
inline int get_account_history_response::_internal_values_size() const {
  return values_.size();
}
inline int get_account_history_response::values_size() const {
  return _internal_values_size();
}
inline void get_account_history_response::clear_values() {
  values_.Clear();
}
inline ::koinos::rpc::account_history::account_history_entry* get_account_history_response::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.account_history.get_account_history_response.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::account_history::account_history_entry >*
get_account_history_response::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:koinos.rpc.account_history.get_account_history_response.values)
  return &values_;
}
inline const ::koinos::rpc::account_history::account_history_entry& get_account_history_response::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::koinos::rpc::account_history::account_history_entry& get_account_history_response::values(int index) const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.get_account_history_response.values)
  return _internal_values(index);
}
inline ::koinos::rpc::account_history::account_history_entry* get_account_history_response::_internal_add_values() {
  return values_.Add();
}
inline ::koinos::rpc::account_history::account_history_entry* get_account_history_response::add_values() {
  ::koinos::rpc::account_history::account_history_entry* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:koinos.rpc.account_history.get_account_history_response.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::account_history::account_history_entry >&
get_account_history_response::values() const {
  // @@protoc_insertion_point(field_list:koinos.rpc.account_history.get_account_history_response.values)
  return values_;
}

// -------------------------------------------------------------------

// account_history_request

// .koinos.rpc.reserved_rpc reserved = 1;
inline bool account_history_request::_internal_has_reserved() const {
  return request_case() == kReserved;
}
inline bool account_history_request::has_reserved() const {
  return _internal_has_reserved();
}
inline void account_history_request::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::rpc::reserved_rpc* account_history_request::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.rpc.account_history.account_history_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
      ::koinos::rpc::reserved_rpc* temp = request_.reserved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::reserved_rpc& account_history_request::_internal_reserved() const {
  return _internal_has_reserved()
      ? *request_.reserved_
      : reinterpret_cast< ::koinos::rpc::reserved_rpc&>(::koinos::rpc::_reserved_rpc_default_instance_);
}
inline const ::koinos::rpc::reserved_rpc& account_history_request::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.account_history_request.reserved)
  return _internal_reserved();
}
inline ::koinos::rpc::reserved_rpc* account_history_request::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.account_history.account_history_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
    ::koinos::rpc::reserved_rpc* temp = request_.reserved_;
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void account_history_request::unsafe_arena_set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  clear_request();
  if (reserved) {
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.account_history.account_history_request.reserved)
}
inline ::koinos::rpc::reserved_rpc* account_history_request::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_request();
    set_has_reserved();
    request_.reserved_ = CreateMaybeMessage< ::koinos::rpc::reserved_rpc >(GetArenaForAllocation());
  }
  return request_.reserved_;
}
inline ::koinos::rpc::reserved_rpc* account_history_request::mutable_reserved() {
  ::koinos::rpc::reserved_rpc* _msg = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.account_history.account_history_request.reserved)
  return _msg;
}

// .koinos.rpc.account_history.get_account_history_request get_account_history = 2;
inline bool account_history_request::_internal_has_get_account_history() const {
  return request_case() == kGetAccountHistory;
}
inline bool account_history_request::has_get_account_history() const {
  return _internal_has_get_account_history();
}
inline void account_history_request::set_has_get_account_history() {
  _oneof_case_[0] = kGetAccountHistory;
}
inline void account_history_request::clear_get_account_history() {
  if (_internal_has_get_account_history()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_account_history_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::account_history::get_account_history_request* account_history_request::release_get_account_history() {
  // @@protoc_insertion_point(field_release:koinos.rpc.account_history.account_history_request.get_account_history)
  if (_internal_has_get_account_history()) {
    clear_has_request();
      ::koinos::rpc::account_history::get_account_history_request* temp = request_.get_account_history_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_account_history_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::account_history::get_account_history_request& account_history_request::_internal_get_account_history() const {
  return _internal_has_get_account_history()
      ? *request_.get_account_history_
      : reinterpret_cast< ::koinos::rpc::account_history::get_account_history_request&>(::koinos::rpc::account_history::_get_account_history_request_default_instance_);
}
inline const ::koinos::rpc::account_history::get_account_history_request& account_history_request::get_account_history() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.account_history_request.get_account_history)
  return _internal_get_account_history();
}
inline ::koinos::rpc::account_history::get_account_history_request* account_history_request::unsafe_arena_release_get_account_history() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.account_history.account_history_request.get_account_history)
  if (_internal_has_get_account_history()) {
    clear_has_request();
    ::koinos::rpc::account_history::get_account_history_request* temp = request_.get_account_history_;
    request_.get_account_history_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void account_history_request::unsafe_arena_set_allocated_get_account_history(::koinos::rpc::account_history::get_account_history_request* get_account_history) {
  clear_request();
  if (get_account_history) {
    set_has_get_account_history();
    request_.get_account_history_ = get_account_history;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.account_history.account_history_request.get_account_history)
}
inline ::koinos::rpc::account_history::get_account_history_request* account_history_request::_internal_mutable_get_account_history() {
  if (!_internal_has_get_account_history()) {
    clear_request();
    set_has_get_account_history();
    request_.get_account_history_ = CreateMaybeMessage< ::koinos::rpc::account_history::get_account_history_request >(GetArenaForAllocation());
  }
  return request_.get_account_history_;
}
inline ::koinos::rpc::account_history::get_account_history_request* account_history_request::mutable_get_account_history() {
  ::koinos::rpc::account_history::get_account_history_request* _msg = _internal_mutable_get_account_history();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.account_history.account_history_request.get_account_history)
  return _msg;
}

inline bool account_history_request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void account_history_request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline account_history_request::RequestCase account_history_request::request_case() const {
  return account_history_request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// account_history_response

// .koinos.rpc.reserved_rpc reserved = 1;
inline bool account_history_response::_internal_has_reserved() const {
  return response_case() == kReserved;
}
inline bool account_history_response::has_reserved() const {
  return _internal_has_reserved();
}
inline void account_history_response::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::rpc::reserved_rpc* account_history_response::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.rpc.account_history.account_history_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
      ::koinos::rpc::reserved_rpc* temp = response_.reserved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::reserved_rpc& account_history_response::_internal_reserved() const {
  return _internal_has_reserved()
      ? *response_.reserved_
      : reinterpret_cast< ::koinos::rpc::reserved_rpc&>(::koinos::rpc::_reserved_rpc_default_instance_);
}
inline const ::koinos::rpc::reserved_rpc& account_history_response::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.account_history_response.reserved)
  return _internal_reserved();
}
inline ::koinos::rpc::reserved_rpc* account_history_response::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.account_history.account_history_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
    ::koinos::rpc::reserved_rpc* temp = response_.reserved_;
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void account_history_response::unsafe_arena_set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  clear_response();
  if (reserved) {
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.account_history.account_history_response.reserved)
}
inline ::koinos::rpc::reserved_rpc* account_history_response::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_response();
    set_has_reserved();
    response_.reserved_ = CreateMaybeMessage< ::koinos::rpc::reserved_rpc >(GetArenaForAllocation());
  }
  return response_.reserved_;
}
inline ::koinos::rpc::reserved_rpc* account_history_response::mutable_reserved() {
  ::koinos::rpc::reserved_rpc* _msg = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.account_history.account_history_response.reserved)
  return _msg;
}

// .koinos.rpc.error_response error = 2;
inline bool account_history_response::_internal_has_error() const {
  return response_case() == kError;
}
inline bool account_history_response::has_error() const {
  return _internal_has_error();
}
inline void account_history_response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::koinos::rpc::error_response* account_history_response::release_error() {
  // @@protoc_insertion_point(field_release:koinos.rpc.account_history.account_history_response.error)
  if (_internal_has_error()) {
    clear_has_response();
      ::koinos::rpc::error_response* temp = response_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::error_response& account_history_response::_internal_error() const {
  return _internal_has_error()
      ? *response_.error_
      : reinterpret_cast< ::koinos::rpc::error_response&>(::koinos::rpc::_error_response_default_instance_);
}
inline const ::koinos::rpc::error_response& account_history_response::error() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.account_history_response.error)
  return _internal_error();
}
inline ::koinos::rpc::error_response* account_history_response::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.account_history.account_history_response.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::koinos::rpc::error_response* temp = response_.error_;
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void account_history_response::unsafe_arena_set_allocated_error(::koinos::rpc::error_response* error) {
  clear_response();
  if (error) {
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.account_history.account_history_response.error)
}
inline ::koinos::rpc::error_response* account_history_response::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_response();
    set_has_error();
    response_.error_ = CreateMaybeMessage< ::koinos::rpc::error_response >(GetArenaForAllocation());
  }
  return response_.error_;
}
inline ::koinos::rpc::error_response* account_history_response::mutable_error() {
  ::koinos::rpc::error_response* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.account_history.account_history_response.error)
  return _msg;
}

// .koinos.rpc.account_history.get_account_history_response get_account_history = 3;
inline bool account_history_response::_internal_has_get_account_history() const {
  return response_case() == kGetAccountHistory;
}
inline bool account_history_response::has_get_account_history() const {
  return _internal_has_get_account_history();
}
inline void account_history_response::set_has_get_account_history() {
  _oneof_case_[0] = kGetAccountHistory;
}
inline void account_history_response::clear_get_account_history() {
  if (_internal_has_get_account_history()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.get_account_history_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::account_history::get_account_history_response* account_history_response::release_get_account_history() {
  // @@protoc_insertion_point(field_release:koinos.rpc.account_history.account_history_response.get_account_history)
  if (_internal_has_get_account_history()) {
    clear_has_response();
      ::koinos::rpc::account_history::get_account_history_response* temp = response_.get_account_history_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_account_history_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::account_history::get_account_history_response& account_history_response::_internal_get_account_history() const {
  return _internal_has_get_account_history()
      ? *response_.get_account_history_
      : reinterpret_cast< ::koinos::rpc::account_history::get_account_history_response&>(::koinos::rpc::account_history::_get_account_history_response_default_instance_);
}
inline const ::koinos::rpc::account_history::get_account_history_response& account_history_response::get_account_history() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.account_history.account_history_response.get_account_history)
  return _internal_get_account_history();
}
inline ::koinos::rpc::account_history::get_account_history_response* account_history_response::unsafe_arena_release_get_account_history() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.account_history.account_history_response.get_account_history)
  if (_internal_has_get_account_history()) {
    clear_has_response();
    ::koinos::rpc::account_history::get_account_history_response* temp = response_.get_account_history_;
    response_.get_account_history_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void account_history_response::unsafe_arena_set_allocated_get_account_history(::koinos::rpc::account_history::get_account_history_response* get_account_history) {
  clear_response();
  if (get_account_history) {
    set_has_get_account_history();
    response_.get_account_history_ = get_account_history;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.account_history.account_history_response.get_account_history)
}
inline ::koinos::rpc::account_history::get_account_history_response* account_history_response::_internal_mutable_get_account_history() {
  if (!_internal_has_get_account_history()) {
    clear_response();
    set_has_get_account_history();
    response_.get_account_history_ = CreateMaybeMessage< ::koinos::rpc::account_history::get_account_history_response >(GetArenaForAllocation());
  }
  return response_.get_account_history_;
}
inline ::koinos::rpc::account_history::get_account_history_response* account_history_response::mutable_get_account_history() {
  ::koinos::rpc::account_history::get_account_history_response* _msg = _internal_mutable_get_account_history();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.account_history.account_history_response.get_account_history)
  return _msg;
}

inline bool account_history_response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void account_history_response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline account_history_response::ResponseCase account_history_response::response_case() const {
  return account_history_response::ResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace account_history
}  // namespace rpc
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto
