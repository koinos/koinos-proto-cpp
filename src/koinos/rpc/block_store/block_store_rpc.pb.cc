// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/block_store/block_store_rpc.proto

#include "koinos/rpc/block_store/block_store_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace rpc {
namespace block_store {
constexpr get_blocks_by_id_request::get_blocks_by_id_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_ids_()
  , return_block_(false)
  , return_receipt_(false){}
struct get_blocks_by_id_requestDefaultTypeInternal {
  constexpr get_blocks_by_id_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_blocks_by_id_requestDefaultTypeInternal() {}
  union {
    get_blocks_by_id_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_blocks_by_id_requestDefaultTypeInternal _get_blocks_by_id_request_default_instance_;
constexpr get_blocks_by_id_response::get_blocks_by_id_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_items_(){}
struct get_blocks_by_id_responseDefaultTypeInternal {
  constexpr get_blocks_by_id_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_blocks_by_id_responseDefaultTypeInternal() {}
  union {
    get_blocks_by_id_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_blocks_by_id_responseDefaultTypeInternal _get_blocks_by_id_response_default_instance_;
constexpr get_blocks_by_height_request::get_blocks_by_height_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : head_block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ancestor_start_height_(uint64_t{0u})
  , num_blocks_(0u)
  , return_block_(false)
  , return_receipt_(false){}
struct get_blocks_by_height_requestDefaultTypeInternal {
  constexpr get_blocks_by_height_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_blocks_by_height_requestDefaultTypeInternal() {}
  union {
    get_blocks_by_height_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_blocks_by_height_requestDefaultTypeInternal _get_blocks_by_height_request_default_instance_;
constexpr get_blocks_by_height_response::get_blocks_by_height_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_items_(){}
struct get_blocks_by_height_responseDefaultTypeInternal {
  constexpr get_blocks_by_height_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_blocks_by_height_responseDefaultTypeInternal() {}
  union {
    get_blocks_by_height_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_blocks_by_height_responseDefaultTypeInternal _get_blocks_by_height_response_default_instance_;
constexpr add_block_request::add_block_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_to_add_(nullptr)
  , receipt_to_add_(nullptr){}
struct add_block_requestDefaultTypeInternal {
  constexpr add_block_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~add_block_requestDefaultTypeInternal() {}
  union {
    add_block_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT add_block_requestDefaultTypeInternal _add_block_request_default_instance_;
constexpr add_block_response::add_block_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct add_block_responseDefaultTypeInternal {
  constexpr add_block_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~add_block_responseDefaultTypeInternal() {}
  union {
    add_block_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT add_block_responseDefaultTypeInternal _add_block_response_default_instance_;
constexpr get_highest_block_request::get_highest_block_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_highest_block_requestDefaultTypeInternal {
  constexpr get_highest_block_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_highest_block_requestDefaultTypeInternal() {}
  union {
    get_highest_block_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_highest_block_requestDefaultTypeInternal _get_highest_block_request_default_instance_;
constexpr get_highest_block_response::get_highest_block_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : topology_(nullptr){}
struct get_highest_block_responseDefaultTypeInternal {
  constexpr get_highest_block_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_highest_block_responseDefaultTypeInternal() {}
  union {
    get_highest_block_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_highest_block_responseDefaultTypeInternal _get_highest_block_response_default_instance_;
constexpr block_store_request::block_store_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct block_store_requestDefaultTypeInternal {
  constexpr block_store_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_store_requestDefaultTypeInternal() {}
  union {
    block_store_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_store_requestDefaultTypeInternal _block_store_request_default_instance_;
constexpr block_store_response::block_store_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct block_store_responseDefaultTypeInternal {
  constexpr block_store_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_store_responseDefaultTypeInternal() {}
  union {
    block_store_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_store_responseDefaultTypeInternal _block_store_response_default_instance_;
}  // namespace block_store
}  // namespace rpc
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_id_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_id_request, block_ids_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_id_request, return_block_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_id_request, return_receipt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_id_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_id_response, block_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_height_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_height_request, head_block_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_height_request, ancestor_start_height_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_height_request, num_blocks_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_height_request, return_block_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_height_request, return_receipt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_height_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_blocks_by_height_response, block_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::add_block_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::add_block_request, block_to_add_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::add_block_request, receipt_to_add_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::add_block_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_highest_block_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_highest_block_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::get_highest_block_response, topology_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::block_store_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::block_store_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::block_store_request, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::block_store_response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::block_store_response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::block_store::block_store_response, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::rpc::block_store::get_blocks_by_id_request)},
  { 8, -1, sizeof(::koinos::rpc::block_store::get_blocks_by_id_response)},
  { 14, -1, sizeof(::koinos::rpc::block_store::get_blocks_by_height_request)},
  { 24, -1, sizeof(::koinos::rpc::block_store::get_blocks_by_height_response)},
  { 30, -1, sizeof(::koinos::rpc::block_store::add_block_request)},
  { 37, -1, sizeof(::koinos::rpc::block_store::add_block_response)},
  { 42, -1, sizeof(::koinos::rpc::block_store::get_highest_block_request)},
  { 47, -1, sizeof(::koinos::rpc::block_store::get_highest_block_response)},
  { 53, -1, sizeof(::koinos::rpc::block_store::block_store_request)},
  { 64, -1, sizeof(::koinos::rpc::block_store::block_store_response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::block_store::_get_blocks_by_id_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::block_store::_get_blocks_by_id_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::block_store::_get_blocks_by_height_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::block_store::_get_blocks_by_height_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::block_store::_add_block_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::block_store::_add_block_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::block_store::_get_highest_block_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::block_store::_get_highest_block_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::block_store::_block_store_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::block_store::_block_store_response_default_instance_),
};

const char descriptor_table_protodef_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,koinos/rpc/block_store/block_store_rpc"
  ".proto\022\026koinos.rpc.block_store\032$koinos/b"
  "lock_store/block_store.proto\032\024koinos/opt"
  "ions.proto\032\023koinos/common.proto\032\036koinos/"
  "protocol/protocol.proto\032\024koinos/rpc/rpc."
  "proto\"a\n\030get_blocks_by_id_request\022\027\n\tblo"
  "ck_ids\030\001 \003(\014B\004\200\265\030\003\022\024\n\014return_block\030\002 \001(\010"
  "\022\026\n\016return_receipt\030\003 \001(\010\"P\n\031get_blocks_b"
  "y_id_response\0223\n\013block_items\030\001 \003(\0132\036.koi"
  "nos.block_store.block_item\"\240\001\n\034get_block"
  "s_by_height_request\022\033\n\rhead_block_id\030\001 \001"
  "(\014B\004\200\265\030\003\022!\n\025ancestor_start_height\030\002 \001(\004B"
  "\0020\001\022\022\n\nnum_blocks\030\003 \001(\r\022\024\n\014return_block\030"
  "\004 \001(\010\022\026\n\016return_receipt\030\005 \001(\010\"T\n\035get_blo"
  "cks_by_height_response\0223\n\013block_items\030\001 "
  "\003(\0132\036.koinos.block_store.block_item\"y\n\021a"
  "dd_block_request\022,\n\014block_to_add\030\001 \001(\0132\026"
  ".koinos.protocol.block\0226\n\016receipt_to_add"
  "\030\002 \001(\0132\036.koinos.protocol.block_receipt\"\024"
  "\n\022add_block_response\"\033\n\031get_highest_bloc"
  "k_request\"F\n\032get_highest_block_response\022"
  "(\n\010topology\030\001 \001(\0132\026.koinos.block_topolog"
  "y\"\202\003\n\023block_store_request\022,\n\010reserved\030\001 "
  "\001(\0132\030.koinos.rpc.reserved_rpcH\000\022L\n\020get_b"
  "locks_by_id\030\002 \001(\01320.koinos.rpc.block_sto"
  "re.get_blocks_by_id_requestH\000\022T\n\024get_blo"
  "cks_by_height\030\003 \001(\01324.koinos.rpc.block_s"
  "tore.get_blocks_by_height_requestH\000\022>\n\ta"
  "dd_block\030\004 \001(\0132).koinos.rpc.block_store."
  "add_block_requestH\000\022N\n\021get_highest_block"
  "\030\005 \001(\01321.koinos.rpc.block_store.get_high"
  "est_block_requestH\000B\t\n\007request\"\263\003\n\024block"
  "_store_response\022,\n\010reserved\030\001 \001(\0132\030.koin"
  "os.rpc.reserved_rpcH\000\022)\n\005error\030\002 \001(\0132\030.k"
  "oinos.rpc.error_statusH\000\022M\n\020get_blocks_b"
  "y_id\030\003 \001(\01321.koinos.rpc.block_store.get_"
  "blocks_by_id_responseH\000\022U\n\024get_blocks_by"
  "_height\030\004 \001(\01325.koinos.rpc.block_store.g"
  "et_blocks_by_height_responseH\000\022\?\n\tadd_bl"
  "ock\030\005 \001(\0132*.koinos.rpc.block_store.add_b"
  "lock_responseH\000\022O\n\021get_highest_block\030\006 \001"
  "(\01322.koinos.rpc.block_store.get_highest_"
  "block_responseH\000B\n\n\010responseBAZ\?github.c"
  "om/koinos/koinos-proto-golang/v2/koinos/"
  "rpc/block_storeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_deps[5] = {
  &::descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto,
  &::descriptor_table_koinos_2fcommon_2eproto,
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto,
  &::descriptor_table_koinos_2frpc_2frpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto = {
  false, false, 1783, descriptor_table_protodef_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto, "koinos/rpc/block_store/block_store_rpc.proto", 
  &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_once, descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_deps, 5, 10,
  schemas, file_default_instances, TableStruct_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto::offsets,
  file_level_metadata_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto, file_level_enum_descriptors_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto, file_level_service_descriptors_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_getter() {
  return &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto(&descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto);
namespace koinos {
namespace rpc {
namespace block_store {

// ===================================================================

class get_blocks_by_id_request::_Internal {
 public:
};

get_blocks_by_id_request::get_blocks_by_id_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  block_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.block_store.get_blocks_by_id_request)
}
get_blocks_by_id_request::get_blocks_by_id_request(const get_blocks_by_id_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_ids_(from.block_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&return_block_, &from.return_block_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_receipt_) -
    reinterpret_cast<char*>(&return_block_)) + sizeof(return_receipt_));
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.block_store.get_blocks_by_id_request)
}

inline void get_blocks_by_id_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&return_block_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&return_receipt_) -
    reinterpret_cast<char*>(&return_block_)) + sizeof(return_receipt_));
}

get_blocks_by_id_request::~get_blocks_by_id_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.block_store.get_blocks_by_id_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_blocks_by_id_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_blocks_by_id_request::ArenaDtor(void* object) {
  get_blocks_by_id_request* _this = reinterpret_cast< get_blocks_by_id_request* >(object);
  (void)_this;
}
void get_blocks_by_id_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_blocks_by_id_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_blocks_by_id_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.block_store.get_blocks_by_id_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_ids_.Clear();
  ::memset(&return_block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_receipt_) -
      reinterpret_cast<char*>(&return_block_)) + sizeof(return_receipt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_blocks_by_id_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes block_ids = 1 [(.koinos.btype) = BLOCK_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_block_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool return_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          return_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool return_receipt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          return_receipt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_blocks_by_id_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.block_store.get_blocks_by_id_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes block_ids = 1 [(.koinos.btype) = BLOCK_ID];
  for (int i = 0, n = this->_internal_block_ids_size(); i < n; i++) {
    const auto& s = this->_internal_block_ids(i);
    target = stream->WriteBytes(1, s, target);
  }

  // bool return_block = 2;
  if (this->_internal_return_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_return_block(), target);
  }

  // bool return_receipt = 3;
  if (this->_internal_return_receipt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_return_receipt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.block_store.get_blocks_by_id_request)
  return target;
}

size_t get_blocks_by_id_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.block_store.get_blocks_by_id_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes block_ids = 1 [(.koinos.btype) = BLOCK_ID];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(block_ids_.size());
  for (int i = 0, n = block_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      block_ids_.Get(i));
  }

  // bool return_block = 2;
  if (this->_internal_return_block() != 0) {
    total_size += 1 + 1;
  }

  // bool return_receipt = 3;
  if (this->_internal_return_receipt() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_blocks_by_id_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_blocks_by_id_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_blocks_by_id_request::GetClassData() const { return &_class_data_; }

void get_blocks_by_id_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_blocks_by_id_request *>(to)->MergeFrom(
      static_cast<const get_blocks_by_id_request &>(from));
}


void get_blocks_by_id_request::MergeFrom(const get_blocks_by_id_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.block_store.get_blocks_by_id_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_ids_.MergeFrom(from.block_ids_);
  if (from._internal_return_block() != 0) {
    _internal_set_return_block(from._internal_return_block());
  }
  if (from._internal_return_receipt() != 0) {
    _internal_set_return_receipt(from._internal_return_receipt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_blocks_by_id_request::CopyFrom(const get_blocks_by_id_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.block_store.get_blocks_by_id_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_blocks_by_id_request::IsInitialized() const {
  return true;
}

void get_blocks_by_id_request::InternalSwap(get_blocks_by_id_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  block_ids_.InternalSwap(&other->block_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(get_blocks_by_id_request, return_receipt_)
      + sizeof(get_blocks_by_id_request::return_receipt_)
      - PROTOBUF_FIELD_OFFSET(get_blocks_by_id_request, return_block_)>(
          reinterpret_cast<char*>(&return_block_),
          reinterpret_cast<char*>(&other->return_block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata get_blocks_by_id_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto[0]);
}

// ===================================================================

class get_blocks_by_id_response::_Internal {
 public:
};

void get_blocks_by_id_response::clear_block_items() {
  block_items_.Clear();
}
get_blocks_by_id_response::get_blocks_by_id_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  block_items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.block_store.get_blocks_by_id_response)
}
get_blocks_by_id_response::get_blocks_by_id_response(const get_blocks_by_id_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_items_(from.block_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.block_store.get_blocks_by_id_response)
}

inline void get_blocks_by_id_response::SharedCtor() {
}

get_blocks_by_id_response::~get_blocks_by_id_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.block_store.get_blocks_by_id_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_blocks_by_id_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_blocks_by_id_response::ArenaDtor(void* object) {
  get_blocks_by_id_response* _this = reinterpret_cast< get_blocks_by_id_response* >(object);
  (void)_this;
}
void get_blocks_by_id_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_blocks_by_id_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_blocks_by_id_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.block_store.get_blocks_by_id_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_blocks_by_id_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .koinos.block_store.block_item block_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_blocks_by_id_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.block_store.get_blocks_by_id_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .koinos.block_store.block_item block_items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_block_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_block_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.block_store.get_blocks_by_id_response)
  return target;
}

size_t get_blocks_by_id_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.block_store.get_blocks_by_id_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.block_store.block_item block_items = 1;
  total_size += 1UL * this->_internal_block_items_size();
  for (const auto& msg : this->block_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_blocks_by_id_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_blocks_by_id_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_blocks_by_id_response::GetClassData() const { return &_class_data_; }

void get_blocks_by_id_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_blocks_by_id_response *>(to)->MergeFrom(
      static_cast<const get_blocks_by_id_response &>(from));
}


void get_blocks_by_id_response::MergeFrom(const get_blocks_by_id_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.block_store.get_blocks_by_id_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_items_.MergeFrom(from.block_items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_blocks_by_id_response::CopyFrom(const get_blocks_by_id_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.block_store.get_blocks_by_id_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_blocks_by_id_response::IsInitialized() const {
  return true;
}

void get_blocks_by_id_response::InternalSwap(get_blocks_by_id_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  block_items_.InternalSwap(&other->block_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_blocks_by_id_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto[1]);
}

// ===================================================================

class get_blocks_by_height_request::_Internal {
 public:
};

get_blocks_by_height_request::get_blocks_by_height_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.block_store.get_blocks_by_height_request)
}
get_blocks_by_height_request::get_blocks_by_height_request(const get_blocks_by_height_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  head_block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_head_block_id().empty()) {
    head_block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_head_block_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ancestor_start_height_, &from.ancestor_start_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_receipt_) -
    reinterpret_cast<char*>(&ancestor_start_height_)) + sizeof(return_receipt_));
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.block_store.get_blocks_by_height_request)
}

inline void get_blocks_by_height_request::SharedCtor() {
head_block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ancestor_start_height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&return_receipt_) -
    reinterpret_cast<char*>(&ancestor_start_height_)) + sizeof(return_receipt_));
}

get_blocks_by_height_request::~get_blocks_by_height_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.block_store.get_blocks_by_height_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_blocks_by_height_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  head_block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_blocks_by_height_request::ArenaDtor(void* object) {
  get_blocks_by_height_request* _this = reinterpret_cast< get_blocks_by_height_request* >(object);
  (void)_this;
}
void get_blocks_by_height_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_blocks_by_height_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_blocks_by_height_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.block_store.get_blocks_by_height_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  head_block_id_.ClearToEmpty();
  ::memset(&ancestor_start_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_receipt_) -
      reinterpret_cast<char*>(&ancestor_start_height_)) + sizeof(return_receipt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_blocks_by_height_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes head_block_id = 1 [(.koinos.btype) = BLOCK_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_head_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ancestor_start_height = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ancestor_start_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_blocks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool return_block = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          return_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool return_receipt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          return_receipt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_blocks_by_height_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.block_store.get_blocks_by_height_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes head_block_id = 1 [(.koinos.btype) = BLOCK_ID];
  if (!this->_internal_head_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_head_block_id(), target);
  }

  // uint64 ancestor_start_height = 2 [jstype = JS_STRING];
  if (this->_internal_ancestor_start_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ancestor_start_height(), target);
  }

  // uint32 num_blocks = 3;
  if (this->_internal_num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_blocks(), target);
  }

  // bool return_block = 4;
  if (this->_internal_return_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_return_block(), target);
  }

  // bool return_receipt = 5;
  if (this->_internal_return_receipt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_return_receipt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.block_store.get_blocks_by_height_request)
  return target;
}

size_t get_blocks_by_height_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.block_store.get_blocks_by_height_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes head_block_id = 1 [(.koinos.btype) = BLOCK_ID];
  if (!this->_internal_head_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_head_block_id());
  }

  // uint64 ancestor_start_height = 2 [jstype = JS_STRING];
  if (this->_internal_ancestor_start_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ancestor_start_height());
  }

  // uint32 num_blocks = 3;
  if (this->_internal_num_blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_blocks());
  }

  // bool return_block = 4;
  if (this->_internal_return_block() != 0) {
    total_size += 1 + 1;
  }

  // bool return_receipt = 5;
  if (this->_internal_return_receipt() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_blocks_by_height_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_blocks_by_height_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_blocks_by_height_request::GetClassData() const { return &_class_data_; }

void get_blocks_by_height_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_blocks_by_height_request *>(to)->MergeFrom(
      static_cast<const get_blocks_by_height_request &>(from));
}


void get_blocks_by_height_request::MergeFrom(const get_blocks_by_height_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.block_store.get_blocks_by_height_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_head_block_id().empty()) {
    _internal_set_head_block_id(from._internal_head_block_id());
  }
  if (from._internal_ancestor_start_height() != 0) {
    _internal_set_ancestor_start_height(from._internal_ancestor_start_height());
  }
  if (from._internal_num_blocks() != 0) {
    _internal_set_num_blocks(from._internal_num_blocks());
  }
  if (from._internal_return_block() != 0) {
    _internal_set_return_block(from._internal_return_block());
  }
  if (from._internal_return_receipt() != 0) {
    _internal_set_return_receipt(from._internal_return_receipt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_blocks_by_height_request::CopyFrom(const get_blocks_by_height_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.block_store.get_blocks_by_height_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_blocks_by_height_request::IsInitialized() const {
  return true;
}

void get_blocks_by_height_request::InternalSwap(get_blocks_by_height_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &head_block_id_, GetArenaForAllocation(),
      &other->head_block_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(get_blocks_by_height_request, return_receipt_)
      + sizeof(get_blocks_by_height_request::return_receipt_)
      - PROTOBUF_FIELD_OFFSET(get_blocks_by_height_request, ancestor_start_height_)>(
          reinterpret_cast<char*>(&ancestor_start_height_),
          reinterpret_cast<char*>(&other->ancestor_start_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata get_blocks_by_height_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto[2]);
}

// ===================================================================

class get_blocks_by_height_response::_Internal {
 public:
};

void get_blocks_by_height_response::clear_block_items() {
  block_items_.Clear();
}
get_blocks_by_height_response::get_blocks_by_height_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  block_items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.block_store.get_blocks_by_height_response)
}
get_blocks_by_height_response::get_blocks_by_height_response(const get_blocks_by_height_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_items_(from.block_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.block_store.get_blocks_by_height_response)
}

inline void get_blocks_by_height_response::SharedCtor() {
}

get_blocks_by_height_response::~get_blocks_by_height_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.block_store.get_blocks_by_height_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_blocks_by_height_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_blocks_by_height_response::ArenaDtor(void* object) {
  get_blocks_by_height_response* _this = reinterpret_cast< get_blocks_by_height_response* >(object);
  (void)_this;
}
void get_blocks_by_height_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_blocks_by_height_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_blocks_by_height_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.block_store.get_blocks_by_height_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_blocks_by_height_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .koinos.block_store.block_item block_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_blocks_by_height_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.block_store.get_blocks_by_height_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .koinos.block_store.block_item block_items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_block_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_block_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.block_store.get_blocks_by_height_response)
  return target;
}

size_t get_blocks_by_height_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.block_store.get_blocks_by_height_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.block_store.block_item block_items = 1;
  total_size += 1UL * this->_internal_block_items_size();
  for (const auto& msg : this->block_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_blocks_by_height_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_blocks_by_height_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_blocks_by_height_response::GetClassData() const { return &_class_data_; }

void get_blocks_by_height_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_blocks_by_height_response *>(to)->MergeFrom(
      static_cast<const get_blocks_by_height_response &>(from));
}


void get_blocks_by_height_response::MergeFrom(const get_blocks_by_height_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.block_store.get_blocks_by_height_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_items_.MergeFrom(from.block_items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_blocks_by_height_response::CopyFrom(const get_blocks_by_height_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.block_store.get_blocks_by_height_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_blocks_by_height_response::IsInitialized() const {
  return true;
}

void get_blocks_by_height_response::InternalSwap(get_blocks_by_height_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  block_items_.InternalSwap(&other->block_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_blocks_by_height_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto[3]);
}

// ===================================================================

class add_block_request::_Internal {
 public:
  static const ::koinos::protocol::block& block_to_add(const add_block_request* msg);
  static const ::koinos::protocol::block_receipt& receipt_to_add(const add_block_request* msg);
};

const ::koinos::protocol::block&
add_block_request::_Internal::block_to_add(const add_block_request* msg) {
  return *msg->block_to_add_;
}
const ::koinos::protocol::block_receipt&
add_block_request::_Internal::receipt_to_add(const add_block_request* msg) {
  return *msg->receipt_to_add_;
}
void add_block_request::clear_block_to_add() {
  if (GetArenaForAllocation() == nullptr && block_to_add_ != nullptr) {
    delete block_to_add_;
  }
  block_to_add_ = nullptr;
}
void add_block_request::clear_receipt_to_add() {
  if (GetArenaForAllocation() == nullptr && receipt_to_add_ != nullptr) {
    delete receipt_to_add_;
  }
  receipt_to_add_ = nullptr;
}
add_block_request::add_block_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.block_store.add_block_request)
}
add_block_request::add_block_request(const add_block_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block_to_add()) {
    block_to_add_ = new ::koinos::protocol::block(*from.block_to_add_);
  } else {
    block_to_add_ = nullptr;
  }
  if (from._internal_has_receipt_to_add()) {
    receipt_to_add_ = new ::koinos::protocol::block_receipt(*from.receipt_to_add_);
  } else {
    receipt_to_add_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.block_store.add_block_request)
}

inline void add_block_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_to_add_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&receipt_to_add_) -
    reinterpret_cast<char*>(&block_to_add_)) + sizeof(receipt_to_add_));
}

add_block_request::~add_block_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.block_store.add_block_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void add_block_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_to_add_;
  if (this != internal_default_instance()) delete receipt_to_add_;
}

void add_block_request::ArenaDtor(void* object) {
  add_block_request* _this = reinterpret_cast< add_block_request* >(object);
  (void)_this;
}
void add_block_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void add_block_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void add_block_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.block_store.add_block_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_to_add_ != nullptr) {
    delete block_to_add_;
  }
  block_to_add_ = nullptr;
  if (GetArenaForAllocation() == nullptr && receipt_to_add_ != nullptr) {
    delete receipt_to_add_;
  }
  receipt_to_add_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* add_block_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.block block_to_add = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_to_add(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.block_receipt receipt_to_add = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt_to_add(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* add_block_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.block_store.add_block_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.block block_to_add = 1;
  if (this->_internal_has_block_to_add()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block_to_add(this), target, stream);
  }

  // .koinos.protocol.block_receipt receipt_to_add = 2;
  if (this->_internal_has_receipt_to_add()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::receipt_to_add(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.block_store.add_block_request)
  return target;
}

size_t add_block_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.block_store.add_block_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.block block_to_add = 1;
  if (this->_internal_has_block_to_add()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_to_add_);
  }

  // .koinos.protocol.block_receipt receipt_to_add = 2;
  if (this->_internal_has_receipt_to_add()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_to_add_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData add_block_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    add_block_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*add_block_request::GetClassData() const { return &_class_data_; }

void add_block_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<add_block_request *>(to)->MergeFrom(
      static_cast<const add_block_request &>(from));
}


void add_block_request::MergeFrom(const add_block_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.block_store.add_block_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block_to_add()) {
    _internal_mutable_block_to_add()->::koinos::protocol::block::MergeFrom(from._internal_block_to_add());
  }
  if (from._internal_has_receipt_to_add()) {
    _internal_mutable_receipt_to_add()->::koinos::protocol::block_receipt::MergeFrom(from._internal_receipt_to_add());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void add_block_request::CopyFrom(const add_block_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.block_store.add_block_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_block_request::IsInitialized() const {
  return true;
}

void add_block_request::InternalSwap(add_block_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(add_block_request, receipt_to_add_)
      + sizeof(add_block_request::receipt_to_add_)
      - PROTOBUF_FIELD_OFFSET(add_block_request, block_to_add_)>(
          reinterpret_cast<char*>(&block_to_add_),
          reinterpret_cast<char*>(&other->block_to_add_));
}

::PROTOBUF_NAMESPACE_ID::Metadata add_block_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto[4]);
}

// ===================================================================

class add_block_response::_Internal {
 public:
};

add_block_response::add_block_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.block_store.add_block_response)
}
add_block_response::add_block_response(const add_block_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.block_store.add_block_response)
}

inline void add_block_response::SharedCtor() {
}

add_block_response::~add_block_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.block_store.add_block_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void add_block_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void add_block_response::ArenaDtor(void* object) {
  add_block_response* _this = reinterpret_cast< add_block_response* >(object);
  (void)_this;
}
void add_block_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void add_block_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void add_block_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.block_store.add_block_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* add_block_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* add_block_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.block_store.add_block_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.block_store.add_block_response)
  return target;
}

size_t add_block_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.block_store.add_block_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData add_block_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    add_block_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*add_block_response::GetClassData() const { return &_class_data_; }

void add_block_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<add_block_response *>(to)->MergeFrom(
      static_cast<const add_block_response &>(from));
}


void add_block_response::MergeFrom(const add_block_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.block_store.add_block_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void add_block_response::CopyFrom(const add_block_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.block_store.add_block_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_block_response::IsInitialized() const {
  return true;
}

void add_block_response::InternalSwap(add_block_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata add_block_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto[5]);
}

// ===================================================================

class get_highest_block_request::_Internal {
 public:
};

get_highest_block_request::get_highest_block_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.block_store.get_highest_block_request)
}
get_highest_block_request::get_highest_block_request(const get_highest_block_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.block_store.get_highest_block_request)
}

inline void get_highest_block_request::SharedCtor() {
}

get_highest_block_request::~get_highest_block_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.block_store.get_highest_block_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_highest_block_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_highest_block_request::ArenaDtor(void* object) {
  get_highest_block_request* _this = reinterpret_cast< get_highest_block_request* >(object);
  (void)_this;
}
void get_highest_block_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_highest_block_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_highest_block_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.block_store.get_highest_block_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_highest_block_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_highest_block_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.block_store.get_highest_block_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.block_store.get_highest_block_request)
  return target;
}

size_t get_highest_block_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.block_store.get_highest_block_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_highest_block_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_highest_block_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_highest_block_request::GetClassData() const { return &_class_data_; }

void get_highest_block_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_highest_block_request *>(to)->MergeFrom(
      static_cast<const get_highest_block_request &>(from));
}


void get_highest_block_request::MergeFrom(const get_highest_block_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.block_store.get_highest_block_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_highest_block_request::CopyFrom(const get_highest_block_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.block_store.get_highest_block_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_highest_block_request::IsInitialized() const {
  return true;
}

void get_highest_block_request::InternalSwap(get_highest_block_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_highest_block_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto[6]);
}

// ===================================================================

class get_highest_block_response::_Internal {
 public:
  static const ::koinos::block_topology& topology(const get_highest_block_response* msg);
};

const ::koinos::block_topology&
get_highest_block_response::_Internal::topology(const get_highest_block_response* msg) {
  return *msg->topology_;
}
void get_highest_block_response::clear_topology() {
  if (GetArenaForAllocation() == nullptr && topology_ != nullptr) {
    delete topology_;
  }
  topology_ = nullptr;
}
get_highest_block_response::get_highest_block_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.block_store.get_highest_block_response)
}
get_highest_block_response::get_highest_block_response(const get_highest_block_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topology()) {
    topology_ = new ::koinos::block_topology(*from.topology_);
  } else {
    topology_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.block_store.get_highest_block_response)
}

inline void get_highest_block_response::SharedCtor() {
topology_ = nullptr;
}

get_highest_block_response::~get_highest_block_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.block_store.get_highest_block_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_highest_block_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete topology_;
}

void get_highest_block_response::ArenaDtor(void* object) {
  get_highest_block_response* _this = reinterpret_cast< get_highest_block_response* >(object);
  (void)_this;
}
void get_highest_block_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_highest_block_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_highest_block_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.block_store.get_highest_block_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && topology_ != nullptr) {
    delete topology_;
  }
  topology_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_highest_block_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.block_topology topology = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topology(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_highest_block_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.block_store.get_highest_block_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.block_topology topology = 1;
  if (this->_internal_has_topology()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::topology(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.block_store.get_highest_block_response)
  return target;
}

size_t get_highest_block_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.block_store.get_highest_block_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.block_topology topology = 1;
  if (this->_internal_has_topology()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topology_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_highest_block_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_highest_block_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_highest_block_response::GetClassData() const { return &_class_data_; }

void get_highest_block_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_highest_block_response *>(to)->MergeFrom(
      static_cast<const get_highest_block_response &>(from));
}


void get_highest_block_response::MergeFrom(const get_highest_block_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.block_store.get_highest_block_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topology()) {
    _internal_mutable_topology()->::koinos::block_topology::MergeFrom(from._internal_topology());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_highest_block_response::CopyFrom(const get_highest_block_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.block_store.get_highest_block_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_highest_block_response::IsInitialized() const {
  return true;
}

void get_highest_block_response::InternalSwap(get_highest_block_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(topology_, other->topology_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_highest_block_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto[7]);
}

// ===================================================================

class block_store_request::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const block_store_request* msg);
  static const ::koinos::rpc::block_store::get_blocks_by_id_request& get_blocks_by_id(const block_store_request* msg);
  static const ::koinos::rpc::block_store::get_blocks_by_height_request& get_blocks_by_height(const block_store_request* msg);
  static const ::koinos::rpc::block_store::add_block_request& add_block(const block_store_request* msg);
  static const ::koinos::rpc::block_store::get_highest_block_request& get_highest_block(const block_store_request* msg);
};

const ::koinos::rpc::reserved_rpc&
block_store_request::_Internal::reserved(const block_store_request* msg) {
  return *msg->request_.reserved_;
}
const ::koinos::rpc::block_store::get_blocks_by_id_request&
block_store_request::_Internal::get_blocks_by_id(const block_store_request* msg) {
  return *msg->request_.get_blocks_by_id_;
}
const ::koinos::rpc::block_store::get_blocks_by_height_request&
block_store_request::_Internal::get_blocks_by_height(const block_store_request* msg) {
  return *msg->request_.get_blocks_by_height_;
}
const ::koinos::rpc::block_store::add_block_request&
block_store_request::_Internal::add_block(const block_store_request* msg) {
  return *msg->request_.add_block_;
}
const ::koinos::rpc::block_store::get_highest_block_request&
block_store_request::_Internal::get_highest_block(const block_store_request* msg) {
  return *msg->request_.get_highest_block_;
}
void block_store_request::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.block_store.block_store_request.reserved)
}
void block_store_request::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.reserved_;
    }
    clear_has_request();
  }
}
void block_store_request::set_allocated_get_blocks_by_id(::koinos::rpc::block_store::get_blocks_by_id_request* get_blocks_by_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_blocks_by_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::block_store::get_blocks_by_id_request>::GetOwningArena(get_blocks_by_id);
    if (message_arena != submessage_arena) {
      get_blocks_by_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_blocks_by_id, submessage_arena);
    }
    set_has_get_blocks_by_id();
    request_.get_blocks_by_id_ = get_blocks_by_id;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.block_store.block_store_request.get_blocks_by_id)
}
void block_store_request::set_allocated_get_blocks_by_height(::koinos::rpc::block_store::get_blocks_by_height_request* get_blocks_by_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_blocks_by_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::block_store::get_blocks_by_height_request>::GetOwningArena(get_blocks_by_height);
    if (message_arena != submessage_arena) {
      get_blocks_by_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_blocks_by_height, submessage_arena);
    }
    set_has_get_blocks_by_height();
    request_.get_blocks_by_height_ = get_blocks_by_height;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.block_store.block_store_request.get_blocks_by_height)
}
void block_store_request::set_allocated_add_block(::koinos::rpc::block_store::add_block_request* add_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (add_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::block_store::add_block_request>::GetOwningArena(add_block);
    if (message_arena != submessage_arena) {
      add_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_block, submessage_arena);
    }
    set_has_add_block();
    request_.add_block_ = add_block;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.block_store.block_store_request.add_block)
}
void block_store_request::set_allocated_get_highest_block(::koinos::rpc::block_store::get_highest_block_request* get_highest_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_highest_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::block_store::get_highest_block_request>::GetOwningArena(get_highest_block);
    if (message_arena != submessage_arena) {
      get_highest_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_highest_block, submessage_arena);
    }
    set_has_get_highest_block();
    request_.get_highest_block_ = get_highest_block;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.block_store.block_store_request.get_highest_block)
}
block_store_request::block_store_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.block_store.block_store_request)
}
block_store_request::block_store_request(const block_store_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kGetBlocksById: {
      _internal_mutable_get_blocks_by_id()->::koinos::rpc::block_store::get_blocks_by_id_request::MergeFrom(from._internal_get_blocks_by_id());
      break;
    }
    case kGetBlocksByHeight: {
      _internal_mutable_get_blocks_by_height()->::koinos::rpc::block_store::get_blocks_by_height_request::MergeFrom(from._internal_get_blocks_by_height());
      break;
    }
    case kAddBlock: {
      _internal_mutable_add_block()->::koinos::rpc::block_store::add_block_request::MergeFrom(from._internal_add_block());
      break;
    }
    case kGetHighestBlock: {
      _internal_mutable_get_highest_block()->::koinos::rpc::block_store::get_highest_block_request::MergeFrom(from._internal_get_highest_block());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.block_store.block_store_request)
}

inline void block_store_request::SharedCtor() {
clear_has_request();
}

block_store_request::~block_store_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.block_store.block_store_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_store_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void block_store_request::ArenaDtor(void* object) {
  block_store_request* _this = reinterpret_cast< block_store_request* >(object);
  (void)_this;
}
void block_store_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_store_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_store_request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.block_store.block_store_request)
  switch (request_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.reserved_;
      }
      break;
    }
    case kGetBlocksById: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_blocks_by_id_;
      }
      break;
    }
    case kGetBlocksByHeight: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_blocks_by_height_;
      }
      break;
    }
    case kAddBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.add_block_;
      }
      break;
    }
    case kGetHighestBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_highest_block_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void block_store_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.block_store.block_store_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_store_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.block_store.get_blocks_by_id_request get_blocks_by_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_blocks_by_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.block_store.get_blocks_by_height_request get_blocks_by_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_blocks_by_height(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.block_store.add_block_request add_block = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.block_store.get_highest_block_request get_highest_block = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_highest_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_store_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.block_store.block_store_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.block_store.get_blocks_by_id_request get_blocks_by_id = 2;
  if (_internal_has_get_blocks_by_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::get_blocks_by_id(this), target, stream);
  }

  // .koinos.rpc.block_store.get_blocks_by_height_request get_blocks_by_height = 3;
  if (_internal_has_get_blocks_by_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get_blocks_by_height(this), target, stream);
  }

  // .koinos.rpc.block_store.add_block_request add_block = 4;
  if (_internal_has_add_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::add_block(this), target, stream);
  }

  // .koinos.rpc.block_store.get_highest_block_request get_highest_block = 5;
  if (_internal_has_get_highest_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::get_highest_block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.block_store.block_store_request)
  return target;
}

size_t block_store_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.block_store.block_store_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.reserved_);
      break;
    }
    // .koinos.rpc.block_store.get_blocks_by_id_request get_blocks_by_id = 2;
    case kGetBlocksById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_blocks_by_id_);
      break;
    }
    // .koinos.rpc.block_store.get_blocks_by_height_request get_blocks_by_height = 3;
    case kGetBlocksByHeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_blocks_by_height_);
      break;
    }
    // .koinos.rpc.block_store.add_block_request add_block = 4;
    case kAddBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.add_block_);
      break;
    }
    // .koinos.rpc.block_store.get_highest_block_request get_highest_block = 5;
    case kGetHighestBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_highest_block_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_store_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_store_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_store_request::GetClassData() const { return &_class_data_; }

void block_store_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block_store_request *>(to)->MergeFrom(
      static_cast<const block_store_request &>(from));
}


void block_store_request::MergeFrom(const block_store_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.block_store.block_store_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kGetBlocksById: {
      _internal_mutable_get_blocks_by_id()->::koinos::rpc::block_store::get_blocks_by_id_request::MergeFrom(from._internal_get_blocks_by_id());
      break;
    }
    case kGetBlocksByHeight: {
      _internal_mutable_get_blocks_by_height()->::koinos::rpc::block_store::get_blocks_by_height_request::MergeFrom(from._internal_get_blocks_by_height());
      break;
    }
    case kAddBlock: {
      _internal_mutable_add_block()->::koinos::rpc::block_store::add_block_request::MergeFrom(from._internal_add_block());
      break;
    }
    case kGetHighestBlock: {
      _internal_mutable_get_highest_block()->::koinos::rpc::block_store::get_highest_block_request::MergeFrom(from._internal_get_highest_block());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_store_request::CopyFrom(const block_store_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.block_store.block_store_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_store_request::IsInitialized() const {
  return true;
}

void block_store_request::InternalSwap(block_store_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata block_store_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto[8]);
}

// ===================================================================

class block_store_response::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const block_store_response* msg);
  static const ::koinos::rpc::error_status& error(const block_store_response* msg);
  static const ::koinos::rpc::block_store::get_blocks_by_id_response& get_blocks_by_id(const block_store_response* msg);
  static const ::koinos::rpc::block_store::get_blocks_by_height_response& get_blocks_by_height(const block_store_response* msg);
  static const ::koinos::rpc::block_store::add_block_response& add_block(const block_store_response* msg);
  static const ::koinos::rpc::block_store::get_highest_block_response& get_highest_block(const block_store_response* msg);
};

const ::koinos::rpc::reserved_rpc&
block_store_response::_Internal::reserved(const block_store_response* msg) {
  return *msg->response_.reserved_;
}
const ::koinos::rpc::error_status&
block_store_response::_Internal::error(const block_store_response* msg) {
  return *msg->response_.error_;
}
const ::koinos::rpc::block_store::get_blocks_by_id_response&
block_store_response::_Internal::get_blocks_by_id(const block_store_response* msg) {
  return *msg->response_.get_blocks_by_id_;
}
const ::koinos::rpc::block_store::get_blocks_by_height_response&
block_store_response::_Internal::get_blocks_by_height(const block_store_response* msg) {
  return *msg->response_.get_blocks_by_height_;
}
const ::koinos::rpc::block_store::add_block_response&
block_store_response::_Internal::add_block(const block_store_response* msg) {
  return *msg->response_.add_block_;
}
const ::koinos::rpc::block_store::get_highest_block_response&
block_store_response::_Internal::get_highest_block(const block_store_response* msg) {
  return *msg->response_.get_highest_block_;
}
void block_store_response::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.block_store.block_store_response.reserved)
}
void block_store_response::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.reserved_;
    }
    clear_has_response();
  }
}
void block_store_response::set_allocated_error(::koinos::rpc::error_status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.block_store.block_store_response.error)
}
void block_store_response::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
void block_store_response::set_allocated_get_blocks_by_id(::koinos::rpc::block_store::get_blocks_by_id_response* get_blocks_by_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_blocks_by_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::block_store::get_blocks_by_id_response>::GetOwningArena(get_blocks_by_id);
    if (message_arena != submessage_arena) {
      get_blocks_by_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_blocks_by_id, submessage_arena);
    }
    set_has_get_blocks_by_id();
    response_.get_blocks_by_id_ = get_blocks_by_id;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.block_store.block_store_response.get_blocks_by_id)
}
void block_store_response::set_allocated_get_blocks_by_height(::koinos::rpc::block_store::get_blocks_by_height_response* get_blocks_by_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_blocks_by_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::block_store::get_blocks_by_height_response>::GetOwningArena(get_blocks_by_height);
    if (message_arena != submessage_arena) {
      get_blocks_by_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_blocks_by_height, submessage_arena);
    }
    set_has_get_blocks_by_height();
    response_.get_blocks_by_height_ = get_blocks_by_height;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.block_store.block_store_response.get_blocks_by_height)
}
void block_store_response::set_allocated_add_block(::koinos::rpc::block_store::add_block_response* add_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (add_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::block_store::add_block_response>::GetOwningArena(add_block);
    if (message_arena != submessage_arena) {
      add_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_block, submessage_arena);
    }
    set_has_add_block();
    response_.add_block_ = add_block;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.block_store.block_store_response.add_block)
}
void block_store_response::set_allocated_get_highest_block(::koinos::rpc::block_store::get_highest_block_response* get_highest_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_highest_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::block_store::get_highest_block_response>::GetOwningArena(get_highest_block);
    if (message_arena != submessage_arena) {
      get_highest_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_highest_block, submessage_arena);
    }
    set_has_get_highest_block();
    response_.get_highest_block_ = get_highest_block;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.block_store.block_store_response.get_highest_block)
}
block_store_response::block_store_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.block_store.block_store_response)
}
block_store_response::block_store_response(const block_store_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_status::MergeFrom(from._internal_error());
      break;
    }
    case kGetBlocksById: {
      _internal_mutable_get_blocks_by_id()->::koinos::rpc::block_store::get_blocks_by_id_response::MergeFrom(from._internal_get_blocks_by_id());
      break;
    }
    case kGetBlocksByHeight: {
      _internal_mutable_get_blocks_by_height()->::koinos::rpc::block_store::get_blocks_by_height_response::MergeFrom(from._internal_get_blocks_by_height());
      break;
    }
    case kAddBlock: {
      _internal_mutable_add_block()->::koinos::rpc::block_store::add_block_response::MergeFrom(from._internal_add_block());
      break;
    }
    case kGetHighestBlock: {
      _internal_mutable_get_highest_block()->::koinos::rpc::block_store::get_highest_block_response::MergeFrom(from._internal_get_highest_block());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.block_store.block_store_response)
}

inline void block_store_response::SharedCtor() {
clear_has_response();
}

block_store_response::~block_store_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.block_store.block_store_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_store_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void block_store_response::ArenaDtor(void* object) {
  block_store_response* _this = reinterpret_cast< block_store_response* >(object);
  (void)_this;
}
void block_store_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_store_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_store_response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.block_store.block_store_response)
  switch (response_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.reserved_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case kGetBlocksById: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_blocks_by_id_;
      }
      break;
    }
    case kGetBlocksByHeight: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_blocks_by_height_;
      }
      break;
    }
    case kAddBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.add_block_;
      }
      break;
    }
    case kGetHighestBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_highest_block_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void block_store_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.block_store.block_store_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_store_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.error_status error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.block_store.get_blocks_by_id_response get_blocks_by_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_blocks_by_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.block_store.get_blocks_by_height_response get_blocks_by_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_blocks_by_height(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.block_store.add_block_response add_block = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.block_store.get_highest_block_response get_highest_block = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_highest_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_store_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.block_store.block_store_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.error_status error = 2;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // .koinos.rpc.block_store.get_blocks_by_id_response get_blocks_by_id = 3;
  if (_internal_has_get_blocks_by_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get_blocks_by_id(this), target, stream);
  }

  // .koinos.rpc.block_store.get_blocks_by_height_response get_blocks_by_height = 4;
  if (_internal_has_get_blocks_by_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::get_blocks_by_height(this), target, stream);
  }

  // .koinos.rpc.block_store.add_block_response add_block = 5;
  if (_internal_has_add_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::add_block(this), target, stream);
  }

  // .koinos.rpc.block_store.get_highest_block_response get_highest_block = 6;
  if (_internal_has_get_highest_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::get_highest_block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.block_store.block_store_response)
  return target;
}

size_t block_store_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.block_store.block_store_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.reserved_);
      break;
    }
    // .koinos.rpc.error_status error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    // .koinos.rpc.block_store.get_blocks_by_id_response get_blocks_by_id = 3;
    case kGetBlocksById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_blocks_by_id_);
      break;
    }
    // .koinos.rpc.block_store.get_blocks_by_height_response get_blocks_by_height = 4;
    case kGetBlocksByHeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_blocks_by_height_);
      break;
    }
    // .koinos.rpc.block_store.add_block_response add_block = 5;
    case kAddBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.add_block_);
      break;
    }
    // .koinos.rpc.block_store.get_highest_block_response get_highest_block = 6;
    case kGetHighestBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_highest_block_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_store_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_store_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_store_response::GetClassData() const { return &_class_data_; }

void block_store_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block_store_response *>(to)->MergeFrom(
      static_cast<const block_store_response &>(from));
}


void block_store_response::MergeFrom(const block_store_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.block_store.block_store_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_status::MergeFrom(from._internal_error());
      break;
    }
    case kGetBlocksById: {
      _internal_mutable_get_blocks_by_id()->::koinos::rpc::block_store::get_blocks_by_id_response::MergeFrom(from._internal_get_blocks_by_id());
      break;
    }
    case kGetBlocksByHeight: {
      _internal_mutable_get_blocks_by_height()->::koinos::rpc::block_store::get_blocks_by_height_response::MergeFrom(from._internal_get_blocks_by_height());
      break;
    }
    case kAddBlock: {
      _internal_mutable_add_block()->::koinos::rpc::block_store::add_block_response::MergeFrom(from._internal_add_block());
      break;
    }
    case kGetHighestBlock: {
      _internal_mutable_get_highest_block()->::koinos::rpc::block_store::get_highest_block_response::MergeFrom(from._internal_get_highest_block());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_store_response::CopyFrom(const block_store_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.block_store.block_store_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_store_response::IsInitialized() const {
  return true;
}

void block_store_response::InternalSwap(block_store_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata block_store_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fblock_5fstore_2fblock_5fstore_5frpc_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace block_store
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::rpc::block_store::get_blocks_by_id_request* Arena::CreateMaybeMessage< ::koinos::rpc::block_store::get_blocks_by_id_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::block_store::get_blocks_by_id_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::block_store::get_blocks_by_id_response* Arena::CreateMaybeMessage< ::koinos::rpc::block_store::get_blocks_by_id_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::block_store::get_blocks_by_id_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::block_store::get_blocks_by_height_request* Arena::CreateMaybeMessage< ::koinos::rpc::block_store::get_blocks_by_height_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::block_store::get_blocks_by_height_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::block_store::get_blocks_by_height_response* Arena::CreateMaybeMessage< ::koinos::rpc::block_store::get_blocks_by_height_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::block_store::get_blocks_by_height_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::block_store::add_block_request* Arena::CreateMaybeMessage< ::koinos::rpc::block_store::add_block_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::block_store::add_block_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::block_store::add_block_response* Arena::CreateMaybeMessage< ::koinos::rpc::block_store::add_block_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::block_store::add_block_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::block_store::get_highest_block_request* Arena::CreateMaybeMessage< ::koinos::rpc::block_store::get_highest_block_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::block_store::get_highest_block_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::block_store::get_highest_block_response* Arena::CreateMaybeMessage< ::koinos::rpc::block_store::get_highest_block_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::block_store::get_highest_block_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::block_store::block_store_request* Arena::CreateMaybeMessage< ::koinos::rpc::block_store::block_store_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::block_store::block_store_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::block_store::block_store_response* Arena::CreateMaybeMessage< ::koinos::rpc::block_store::block_store_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::block_store::block_store_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
