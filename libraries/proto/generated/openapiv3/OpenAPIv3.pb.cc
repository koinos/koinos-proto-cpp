// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openapiv3/OpenAPIv3.proto

#include "openapiv3/OpenAPIv3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace openapi {
namespace v3 {
constexpr AdditionalPropertiesItem::AdditionalPropertiesItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AdditionalPropertiesItemDefaultTypeInternal {
  constexpr AdditionalPropertiesItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AdditionalPropertiesItemDefaultTypeInternal() {}
  union {
    AdditionalPropertiesItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AdditionalPropertiesItemDefaultTypeInternal _AdditionalPropertiesItem_default_instance_;
constexpr Any::Any(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : yaml_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct AnyDefaultTypeInternal {
  constexpr AnyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyDefaultTypeInternal() {}
  union {
    Any _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyDefaultTypeInternal _Any_default_instance_;
constexpr AnyOrExpression::AnyOrExpression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AnyOrExpressionDefaultTypeInternal {
  constexpr AnyOrExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyOrExpressionDefaultTypeInternal() {}
  union {
    AnyOrExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyOrExpressionDefaultTypeInternal _AnyOrExpression_default_instance_;
constexpr Callback::Callback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_()
  , specification_extension_(){}
struct CallbackDefaultTypeInternal {
  constexpr CallbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CallbackDefaultTypeInternal() {}
  union {
    Callback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CallbackDefaultTypeInternal _Callback_default_instance_;
constexpr CallbackOrReference::CallbackOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct CallbackOrReferenceDefaultTypeInternal {
  constexpr CallbackOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CallbackOrReferenceDefaultTypeInternal() {}
  union {
    CallbackOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CallbackOrReferenceDefaultTypeInternal _CallbackOrReference_default_instance_;
constexpr CallbacksOrReferences::CallbacksOrReferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct CallbacksOrReferencesDefaultTypeInternal {
  constexpr CallbacksOrReferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CallbacksOrReferencesDefaultTypeInternal() {}
  union {
    CallbacksOrReferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CallbacksOrReferencesDefaultTypeInternal _CallbacksOrReferences_default_instance_;
constexpr Components::Components(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , schemas_(nullptr)
  , responses_(nullptr)
  , parameters_(nullptr)
  , examples_(nullptr)
  , request_bodies_(nullptr)
  , headers_(nullptr)
  , security_schemes_(nullptr)
  , links_(nullptr)
  , callbacks_(nullptr){}
struct ComponentsDefaultTypeInternal {
  constexpr ComponentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComponentsDefaultTypeInternal() {}
  union {
    Components _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComponentsDefaultTypeInternal _Components_default_instance_;
constexpr Contact::Contact(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ContactDefaultTypeInternal {
  constexpr ContactDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContactDefaultTypeInternal() {}
  union {
    Contact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContactDefaultTypeInternal _Contact_default_instance_;
constexpr DefaultType::DefaultType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct DefaultTypeDefaultTypeInternal {
  constexpr DefaultTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DefaultTypeDefaultTypeInternal() {}
  union {
    DefaultType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DefaultTypeDefaultTypeInternal _DefaultType_default_instance_;
constexpr Discriminator::Discriminator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , property_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mapping_(nullptr){}
struct DiscriminatorDefaultTypeInternal {
  constexpr DiscriminatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiscriminatorDefaultTypeInternal() {}
  union {
    Discriminator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiscriminatorDefaultTypeInternal _Discriminator_default_instance_;
constexpr Document::Document(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : servers_()
  , security_()
  , tags_()
  , specification_extension_()
  , openapi_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , info_(nullptr)
  , paths_(nullptr)
  , components_(nullptr)
  , external_docs_(nullptr){}
struct DocumentDefaultTypeInternal {
  constexpr DocumentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentDefaultTypeInternal() {}
  union {
    Document _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentDefaultTypeInternal _Document_default_instance_;
constexpr Encoding::Encoding(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , content_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , style_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headers_(nullptr)
  , explode_(false)
  , allow_reserved_(false){}
struct EncodingDefaultTypeInternal {
  constexpr EncodingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncodingDefaultTypeInternal() {}
  union {
    Encoding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncodingDefaultTypeInternal _Encoding_default_instance_;
constexpr Encodings::Encodings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct EncodingsDefaultTypeInternal {
  constexpr EncodingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncodingsDefaultTypeInternal() {}
  union {
    Encodings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncodingsDefaultTypeInternal _Encodings_default_instance_;
constexpr Example::Example(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , summary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , external_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct ExampleDefaultTypeInternal {
  constexpr ExampleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExampleDefaultTypeInternal() {}
  union {
    Example _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExampleDefaultTypeInternal _Example_default_instance_;
constexpr ExampleOrReference::ExampleOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ExampleOrReferenceDefaultTypeInternal {
  constexpr ExampleOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExampleOrReferenceDefaultTypeInternal() {}
  union {
    ExampleOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExampleOrReferenceDefaultTypeInternal _ExampleOrReference_default_instance_;
constexpr ExamplesOrReferences::ExamplesOrReferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct ExamplesOrReferencesDefaultTypeInternal {
  constexpr ExamplesOrReferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExamplesOrReferencesDefaultTypeInternal() {}
  union {
    ExamplesOrReferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExamplesOrReferencesDefaultTypeInternal _ExamplesOrReferences_default_instance_;
constexpr Expression::Expression(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct ExpressionDefaultTypeInternal {
  constexpr ExpressionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpressionDefaultTypeInternal() {}
  union {
    Expression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpressionDefaultTypeInternal _Expression_default_instance_;
constexpr ExternalDocs::ExternalDocs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExternalDocsDefaultTypeInternal {
  constexpr ExternalDocsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExternalDocsDefaultTypeInternal() {}
  union {
    ExternalDocs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExternalDocsDefaultTypeInternal _ExternalDocs_default_instance_;
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , style_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , schema_(nullptr)
  , example_(nullptr)
  , examples_(nullptr)
  , content_(nullptr)
  , required_(false)
  , deprecated_(false)
  , allow_empty_value_(false)
  , explode_(false)
  , allow_reserved_(false){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
constexpr HeaderOrReference::HeaderOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct HeaderOrReferenceDefaultTypeInternal {
  constexpr HeaderOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderOrReferenceDefaultTypeInternal() {}
  union {
    HeaderOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderOrReferenceDefaultTypeInternal _HeaderOrReference_default_instance_;
constexpr HeadersOrReferences::HeadersOrReferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct HeadersOrReferencesDefaultTypeInternal {
  constexpr HeadersOrReferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeadersOrReferencesDefaultTypeInternal() {}
  union {
    HeadersOrReferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeadersOrReferencesDefaultTypeInternal _HeadersOrReferences_default_instance_;
constexpr Info::Info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , terms_of_service_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , summary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contact_(nullptr)
  , license_(nullptr){}
struct InfoDefaultTypeInternal {
  constexpr InfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InfoDefaultTypeInternal() {}
  union {
    Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InfoDefaultTypeInternal _Info_default_instance_;
constexpr ItemsItem::ItemsItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : schema_or_reference_(){}
struct ItemsItemDefaultTypeInternal {
  constexpr ItemsItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemsItemDefaultTypeInternal() {}
  union {
    ItemsItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemsItemDefaultTypeInternal _ItemsItem_default_instance_;
constexpr License::License(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LicenseDefaultTypeInternal {
  constexpr LicenseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LicenseDefaultTypeInternal() {}
  union {
    License _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LicenseDefaultTypeInternal _License_default_instance_;
constexpr Link::Link(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , operation_ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operation_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parameters_(nullptr)
  , request_body_(nullptr)
  , server_(nullptr){}
struct LinkDefaultTypeInternal {
  constexpr LinkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinkDefaultTypeInternal() {}
  union {
    Link _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinkDefaultTypeInternal _Link_default_instance_;
constexpr LinkOrReference::LinkOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct LinkOrReferenceDefaultTypeInternal {
  constexpr LinkOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinkOrReferenceDefaultTypeInternal() {}
  union {
    LinkOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinkOrReferenceDefaultTypeInternal _LinkOrReference_default_instance_;
constexpr LinksOrReferences::LinksOrReferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct LinksOrReferencesDefaultTypeInternal {
  constexpr LinksOrReferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinksOrReferencesDefaultTypeInternal() {}
  union {
    LinksOrReferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinksOrReferencesDefaultTypeInternal _LinksOrReferences_default_instance_;
constexpr MediaType::MediaType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , schema_(nullptr)
  , example_(nullptr)
  , examples_(nullptr)
  , encoding_(nullptr){}
struct MediaTypeDefaultTypeInternal {
  constexpr MediaTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaTypeDefaultTypeInternal() {}
  union {
    MediaType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaTypeDefaultTypeInternal _MediaType_default_instance_;
constexpr MediaTypes::MediaTypes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct MediaTypesDefaultTypeInternal {
  constexpr MediaTypesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MediaTypesDefaultTypeInternal() {}
  union {
    MediaTypes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MediaTypesDefaultTypeInternal _MediaTypes_default_instance_;
constexpr NamedAny::NamedAny(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedAnyDefaultTypeInternal {
  constexpr NamedAnyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedAnyDefaultTypeInternal() {}
  union {
    NamedAny _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedAnyDefaultTypeInternal _NamedAny_default_instance_;
constexpr NamedCallbackOrReference::NamedCallbackOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedCallbackOrReferenceDefaultTypeInternal {
  constexpr NamedCallbackOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedCallbackOrReferenceDefaultTypeInternal() {}
  union {
    NamedCallbackOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedCallbackOrReferenceDefaultTypeInternal _NamedCallbackOrReference_default_instance_;
constexpr NamedEncoding::NamedEncoding(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedEncodingDefaultTypeInternal {
  constexpr NamedEncodingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedEncodingDefaultTypeInternal() {}
  union {
    NamedEncoding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedEncodingDefaultTypeInternal _NamedEncoding_default_instance_;
constexpr NamedExampleOrReference::NamedExampleOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedExampleOrReferenceDefaultTypeInternal {
  constexpr NamedExampleOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedExampleOrReferenceDefaultTypeInternal() {}
  union {
    NamedExampleOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedExampleOrReferenceDefaultTypeInternal _NamedExampleOrReference_default_instance_;
constexpr NamedHeaderOrReference::NamedHeaderOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedHeaderOrReferenceDefaultTypeInternal {
  constexpr NamedHeaderOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedHeaderOrReferenceDefaultTypeInternal() {}
  union {
    NamedHeaderOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedHeaderOrReferenceDefaultTypeInternal _NamedHeaderOrReference_default_instance_;
constexpr NamedLinkOrReference::NamedLinkOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedLinkOrReferenceDefaultTypeInternal {
  constexpr NamedLinkOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedLinkOrReferenceDefaultTypeInternal() {}
  union {
    NamedLinkOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedLinkOrReferenceDefaultTypeInternal _NamedLinkOrReference_default_instance_;
constexpr NamedMediaType::NamedMediaType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedMediaTypeDefaultTypeInternal {
  constexpr NamedMediaTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedMediaTypeDefaultTypeInternal() {}
  union {
    NamedMediaType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedMediaTypeDefaultTypeInternal _NamedMediaType_default_instance_;
constexpr NamedParameterOrReference::NamedParameterOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedParameterOrReferenceDefaultTypeInternal {
  constexpr NamedParameterOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedParameterOrReferenceDefaultTypeInternal() {}
  union {
    NamedParameterOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedParameterOrReferenceDefaultTypeInternal _NamedParameterOrReference_default_instance_;
constexpr NamedPathItem::NamedPathItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedPathItemDefaultTypeInternal {
  constexpr NamedPathItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedPathItemDefaultTypeInternal() {}
  union {
    NamedPathItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedPathItemDefaultTypeInternal _NamedPathItem_default_instance_;
constexpr NamedRequestBodyOrReference::NamedRequestBodyOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedRequestBodyOrReferenceDefaultTypeInternal {
  constexpr NamedRequestBodyOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedRequestBodyOrReferenceDefaultTypeInternal() {}
  union {
    NamedRequestBodyOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedRequestBodyOrReferenceDefaultTypeInternal _NamedRequestBodyOrReference_default_instance_;
constexpr NamedResponseOrReference::NamedResponseOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedResponseOrReferenceDefaultTypeInternal {
  constexpr NamedResponseOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedResponseOrReferenceDefaultTypeInternal() {}
  union {
    NamedResponseOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedResponseOrReferenceDefaultTypeInternal _NamedResponseOrReference_default_instance_;
constexpr NamedSchemaOrReference::NamedSchemaOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedSchemaOrReferenceDefaultTypeInternal {
  constexpr NamedSchemaOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedSchemaOrReferenceDefaultTypeInternal() {}
  union {
    NamedSchemaOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedSchemaOrReferenceDefaultTypeInternal _NamedSchemaOrReference_default_instance_;
constexpr NamedSecuritySchemeOrReference::NamedSecuritySchemeOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedSecuritySchemeOrReferenceDefaultTypeInternal {
  constexpr NamedSecuritySchemeOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedSecuritySchemeOrReferenceDefaultTypeInternal() {}
  union {
    NamedSecuritySchemeOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedSecuritySchemeOrReferenceDefaultTypeInternal _NamedSecuritySchemeOrReference_default_instance_;
constexpr NamedServerVariable::NamedServerVariable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedServerVariableDefaultTypeInternal {
  constexpr NamedServerVariableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedServerVariableDefaultTypeInternal() {}
  union {
    NamedServerVariable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedServerVariableDefaultTypeInternal _NamedServerVariable_default_instance_;
constexpr NamedString::NamedString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NamedStringDefaultTypeInternal {
  constexpr NamedStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedStringDefaultTypeInternal() {}
  union {
    NamedString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedStringDefaultTypeInternal _NamedString_default_instance_;
constexpr NamedStringArray::NamedStringArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct NamedStringArrayDefaultTypeInternal {
  constexpr NamedStringArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedStringArrayDefaultTypeInternal() {}
  union {
    NamedStringArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedStringArrayDefaultTypeInternal _NamedStringArray_default_instance_;
constexpr OauthFlow::OauthFlow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , authorization_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , refresh_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scopes_(nullptr){}
struct OauthFlowDefaultTypeInternal {
  constexpr OauthFlowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OauthFlowDefaultTypeInternal() {}
  union {
    OauthFlow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OauthFlowDefaultTypeInternal _OauthFlow_default_instance_;
constexpr OauthFlows::OauthFlows(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , implicit_(nullptr)
  , password_(nullptr)
  , client_credentials_(nullptr)
  , authorization_code_(nullptr){}
struct OauthFlowsDefaultTypeInternal {
  constexpr OauthFlowsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OauthFlowsDefaultTypeInternal() {}
  union {
    OauthFlows _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OauthFlowsDefaultTypeInternal _OauthFlows_default_instance_;
constexpr Object::Object(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct ObjectDefaultTypeInternal {
  constexpr ObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectDefaultTypeInternal() {}
  union {
    Object _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectDefaultTypeInternal _Object_default_instance_;
constexpr Operation::Operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , parameters_()
  , security_()
  , servers_()
  , specification_extension_()
  , summary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operation_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , external_docs_(nullptr)
  , request_body_(nullptr)
  , responses_(nullptr)
  , callbacks_(nullptr)
  , deprecated_(false){}
struct OperationDefaultTypeInternal {
  constexpr OperationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OperationDefaultTypeInternal() {}
  union {
    Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OperationDefaultTypeInternal _Operation_default_instance_;
constexpr Parameter::Parameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , in_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , style_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , schema_(nullptr)
  , example_(nullptr)
  , examples_(nullptr)
  , content_(nullptr)
  , required_(false)
  , deprecated_(false)
  , allow_empty_value_(false)
  , explode_(false)
  , allow_reserved_(false){}
struct ParameterDefaultTypeInternal {
  constexpr ParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParameterDefaultTypeInternal() {}
  union {
    Parameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParameterDefaultTypeInternal _Parameter_default_instance_;
constexpr ParameterOrReference::ParameterOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ParameterOrReferenceDefaultTypeInternal {
  constexpr ParameterOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParameterOrReferenceDefaultTypeInternal() {}
  union {
    ParameterOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParameterOrReferenceDefaultTypeInternal _ParameterOrReference_default_instance_;
constexpr ParametersOrReferences::ParametersOrReferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct ParametersOrReferencesDefaultTypeInternal {
  constexpr ParametersOrReferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParametersOrReferencesDefaultTypeInternal() {}
  union {
    ParametersOrReferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParametersOrReferencesDefaultTypeInternal _ParametersOrReferences_default_instance_;
constexpr PathItem::PathItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : servers_()
  , parameters_()
  , specification_extension_()
  , _ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , summary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , get_(nullptr)
  , put_(nullptr)
  , post_(nullptr)
  , delete__(nullptr)
  , options_(nullptr)
  , head_(nullptr)
  , patch_(nullptr)
  , trace_(nullptr){}
struct PathItemDefaultTypeInternal {
  constexpr PathItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathItemDefaultTypeInternal() {}
  union {
    PathItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathItemDefaultTypeInternal _PathItem_default_instance_;
constexpr Paths::Paths(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_()
  , specification_extension_(){}
struct PathsDefaultTypeInternal {
  constexpr PathsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathsDefaultTypeInternal() {}
  union {
    Paths _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathsDefaultTypeInternal _Paths_default_instance_;
constexpr Properties::Properties(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct PropertiesDefaultTypeInternal {
  constexpr PropertiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropertiesDefaultTypeInternal() {}
  union {
    Properties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropertiesDefaultTypeInternal _Properties_default_instance_;
constexpr Reference::Reference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _ref_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , summary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReferenceDefaultTypeInternal {
  constexpr ReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceDefaultTypeInternal() {}
  union {
    Reference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceDefaultTypeInternal _Reference_default_instance_;
constexpr RequestBodiesOrReferences::RequestBodiesOrReferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct RequestBodiesOrReferencesDefaultTypeInternal {
  constexpr RequestBodiesOrReferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestBodiesOrReferencesDefaultTypeInternal() {}
  union {
    RequestBodiesOrReferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestBodiesOrReferencesDefaultTypeInternal _RequestBodiesOrReferences_default_instance_;
constexpr RequestBody::RequestBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(nullptr)
  , required_(false){}
struct RequestBodyDefaultTypeInternal {
  constexpr RequestBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestBodyDefaultTypeInternal() {}
  union {
    RequestBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestBodyDefaultTypeInternal _RequestBody_default_instance_;
constexpr RequestBodyOrReference::RequestBodyOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RequestBodyOrReferenceDefaultTypeInternal {
  constexpr RequestBodyOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestBodyOrReferenceDefaultTypeInternal() {}
  union {
    RequestBodyOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestBodyOrReferenceDefaultTypeInternal _RequestBodyOrReference_default_instance_;
constexpr Response::Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headers_(nullptr)
  , content_(nullptr)
  , links_(nullptr){}
struct ResponseDefaultTypeInternal {
  constexpr ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;
constexpr ResponseOrReference::ResponseOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ResponseOrReferenceDefaultTypeInternal {
  constexpr ResponseOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseOrReferenceDefaultTypeInternal() {}
  union {
    ResponseOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseOrReferenceDefaultTypeInternal _ResponseOrReference_default_instance_;
constexpr Responses::Responses(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_or_reference_()
  , specification_extension_()
  , default__(nullptr){}
struct ResponsesDefaultTypeInternal {
  constexpr ResponsesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponsesDefaultTypeInternal() {}
  union {
    Responses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponsesDefaultTypeInternal _Responses_default_instance_;
constexpr ResponsesOrReferences::ResponsesOrReferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct ResponsesOrReferencesDefaultTypeInternal {
  constexpr ResponsesOrReferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponsesOrReferencesDefaultTypeInternal() {}
  union {
    ResponsesOrReferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponsesOrReferencesDefaultTypeInternal _ResponsesOrReferences_default_instance_;
constexpr Schema::Schema(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : required_()
  , enum__()
  , all_of_()
  , one_of_()
  , any_of_()
  , specification_extension_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pattern_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , discriminator_(nullptr)
  , xml_(nullptr)
  , external_docs_(nullptr)
  , example_(nullptr)
  , not__(nullptr)
  , items_(nullptr)
  , properties_(nullptr)
  , additional_properties_(nullptr)
  , default__(nullptr)
  , nullable_(false)
  , read_only_(false)
  , write_only_(false)
  , deprecated_(false)
  , exclusive_maximum_(false)
  , exclusive_minimum_(false)
  , unique_items_(false)
  , multiple_of_(0)
  , maximum_(0)
  , minimum_(0)
  , max_length_(int64_t{0})
  , min_length_(int64_t{0})
  , max_items_(int64_t{0})
  , min_items_(int64_t{0})
  , max_properties_(int64_t{0})
  , min_properties_(int64_t{0}){}
struct SchemaDefaultTypeInternal {
  constexpr SchemaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaDefaultTypeInternal() {}
  union {
    Schema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaDefaultTypeInternal _Schema_default_instance_;
constexpr SchemaOrReference::SchemaOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SchemaOrReferenceDefaultTypeInternal {
  constexpr SchemaOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemaOrReferenceDefaultTypeInternal() {}
  union {
    SchemaOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemaOrReferenceDefaultTypeInternal _SchemaOrReference_default_instance_;
constexpr SchemasOrReferences::SchemasOrReferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct SchemasOrReferencesDefaultTypeInternal {
  constexpr SchemasOrReferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SchemasOrReferencesDefaultTypeInternal() {}
  union {
    SchemasOrReferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SchemasOrReferencesDefaultTypeInternal _SchemasOrReferences_default_instance_;
constexpr SecurityRequirement::SecurityRequirement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct SecurityRequirementDefaultTypeInternal {
  constexpr SecurityRequirementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SecurityRequirementDefaultTypeInternal() {}
  union {
    SecurityRequirement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SecurityRequirementDefaultTypeInternal _SecurityRequirement_default_instance_;
constexpr SecurityScheme::SecurityScheme(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , in_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scheme_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bearer_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , open_id_connect_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flows_(nullptr){}
struct SecuritySchemeDefaultTypeInternal {
  constexpr SecuritySchemeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SecuritySchemeDefaultTypeInternal() {}
  union {
    SecurityScheme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SecuritySchemeDefaultTypeInternal _SecurityScheme_default_instance_;
constexpr SecuritySchemeOrReference::SecuritySchemeOrReference(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SecuritySchemeOrReferenceDefaultTypeInternal {
  constexpr SecuritySchemeOrReferenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SecuritySchemeOrReferenceDefaultTypeInternal() {}
  union {
    SecuritySchemeOrReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SecuritySchemeOrReferenceDefaultTypeInternal _SecuritySchemeOrReference_default_instance_;
constexpr SecuritySchemesOrReferences::SecuritySchemesOrReferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct SecuritySchemesOrReferencesDefaultTypeInternal {
  constexpr SecuritySchemesOrReferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SecuritySchemesOrReferencesDefaultTypeInternal() {}
  union {
    SecuritySchemesOrReferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SecuritySchemesOrReferencesDefaultTypeInternal _SecuritySchemesOrReferences_default_instance_;
constexpr Server::Server(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , variables_(nullptr){}
struct ServerDefaultTypeInternal {
  constexpr ServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerDefaultTypeInternal() {}
  union {
    Server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerDefaultTypeInternal _Server_default_instance_;
constexpr ServerVariable::ServerVariable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enum__()
  , specification_extension_()
  , default__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ServerVariableDefaultTypeInternal {
  constexpr ServerVariableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerVariableDefaultTypeInternal() {}
  union {
    ServerVariable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerVariableDefaultTypeInternal _ServerVariable_default_instance_;
constexpr ServerVariables::ServerVariables(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct ServerVariablesDefaultTypeInternal {
  constexpr ServerVariablesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerVariablesDefaultTypeInternal() {}
  union {
    ServerVariables _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerVariablesDefaultTypeInternal _ServerVariables_default_instance_;
constexpr SpecificationExtension::SpecificationExtension(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct SpecificationExtensionDefaultTypeInternal {
  constexpr SpecificationExtensionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpecificationExtensionDefaultTypeInternal() {}
  union {
    SpecificationExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpecificationExtensionDefaultTypeInternal _SpecificationExtension_default_instance_;
constexpr StringArray::StringArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct StringArrayDefaultTypeInternal {
  constexpr StringArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringArrayDefaultTypeInternal() {}
  union {
    StringArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringArrayDefaultTypeInternal _StringArray_default_instance_;
constexpr Strings::Strings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additional_properties_(){}
struct StringsDefaultTypeInternal {
  constexpr StringsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringsDefaultTypeInternal() {}
  union {
    Strings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringsDefaultTypeInternal _Strings_default_instance_;
constexpr Tag::Tag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , external_docs_(nullptr){}
struct TagDefaultTypeInternal {
  constexpr TagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TagDefaultTypeInternal() {}
  union {
    Tag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TagDefaultTypeInternal _Tag_default_instance_;
constexpr Xml::Xml(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specification_extension_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attribute_(false)
  , wrapped_(false){}
struct XmlDefaultTypeInternal {
  constexpr XmlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XmlDefaultTypeInternal() {}
  union {
    Xml _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XmlDefaultTypeInternal _Xml_default_instance_;
}  // namespace v3
}  // namespace openapi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[78];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_openapiv3_2fOpenAPIv3_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_openapiv3_2fOpenAPIv3_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_openapiv3_2fOpenAPIv3_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::AdditionalPropertiesItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::AdditionalPropertiesItem, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::openapi::v3::AdditionalPropertiesItem, oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Any, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Any, value_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Any, yaml_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::AnyOrExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::AnyOrExpression, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::openapi::v3::AnyOrExpression, oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Callback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Callback, path_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Callback, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::CallbackOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::CallbackOrReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::openapi::v3::CallbackOrReference, oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::CallbacksOrReferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::CallbacksOrReferences, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Components, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Components, schemas_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Components, responses_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Components, parameters_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Components, examples_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Components, request_bodies_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Components, headers_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Components, security_schemes_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Components, links_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Components, callbacks_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Components, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Contact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Contact, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Contact, url_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Contact, email_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Contact, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::DefaultType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::DefaultType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::openapi::v3::DefaultType, oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Discriminator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Discriminator, property_name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Discriminator, mapping_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Discriminator, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Document, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Document, openapi_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Document, info_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Document, servers_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Document, paths_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Document, components_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Document, security_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Document, tags_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Document, external_docs_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Document, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Encoding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Encoding, content_type_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Encoding, headers_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Encoding, style_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Encoding, explode_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Encoding, allow_reserved_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Encoding, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Encodings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Encodings, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Example, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Example, summary_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Example, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Example, value_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Example, external_value_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Example, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ExampleOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ExampleOrReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ExampleOrReference, oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ExamplesOrReferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ExamplesOrReferences, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Expression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Expression, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ExternalDocs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ExternalDocs, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ExternalDocs, url_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ExternalDocs, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Header, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Header, required_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Header, deprecated_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Header, allow_empty_value_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Header, style_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Header, explode_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Header, allow_reserved_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Header, schema_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Header, example_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Header, examples_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Header, content_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Header, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::HeaderOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::HeaderOrReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::openapi::v3::HeaderOrReference, oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::HeadersOrReferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::HeadersOrReferences, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Info, title_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Info, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Info, terms_of_service_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Info, contact_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Info, license_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Info, version_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Info, specification_extension_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Info, summary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ItemsItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ItemsItem, schema_or_reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::License, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::License, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::License, url_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::License, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Link, operation_ref_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Link, operation_id_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Link, parameters_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Link, request_body_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Link, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Link, server_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Link, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::LinkOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::LinkOrReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::openapi::v3::LinkOrReference, oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::LinksOrReferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::LinksOrReferences, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::MediaType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::MediaType, schema_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::MediaType, example_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::MediaType, examples_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::MediaType, encoding_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::MediaType, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::MediaTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::MediaTypes, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedAny, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedAny, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedAny, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedCallbackOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedCallbackOrReference, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedCallbackOrReference, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedEncoding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedEncoding, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedEncoding, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedExampleOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedExampleOrReference, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedExampleOrReference, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedHeaderOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedHeaderOrReference, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedHeaderOrReference, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedLinkOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedLinkOrReference, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedLinkOrReference, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedMediaType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedMediaType, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedMediaType, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedParameterOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedParameterOrReference, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedParameterOrReference, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedPathItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedPathItem, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedPathItem, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedRequestBodyOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedRequestBodyOrReference, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedRequestBodyOrReference, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedResponseOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedResponseOrReference, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedResponseOrReference, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedSchemaOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedSchemaOrReference, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedSchemaOrReference, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedSecuritySchemeOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedSecuritySchemeOrReference, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedSecuritySchemeOrReference, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedServerVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedServerVariable, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedServerVariable, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedString, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedString, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedStringArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedStringArray, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::NamedStringArray, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::OauthFlow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::OauthFlow, authorization_url_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::OauthFlow, token_url_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::OauthFlow, refresh_url_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::OauthFlow, scopes_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::OauthFlow, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::OauthFlows, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::OauthFlows, implicit_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::OauthFlows, password_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::OauthFlows, client_credentials_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::OauthFlows, authorization_code_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::OauthFlows, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Object, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, tags_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, summary_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, external_docs_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, operation_id_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, parameters_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, request_body_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, responses_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, callbacks_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, deprecated_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, security_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, servers_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Operation, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, in_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, required_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, deprecated_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, allow_empty_value_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, style_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, explode_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, allow_reserved_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, schema_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, example_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, examples_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, content_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Parameter, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ParameterOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ParameterOrReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ParameterOrReference, oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ParametersOrReferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ParametersOrReferences, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, _ref_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, summary_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, get_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, put_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, post_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, delete__),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, options_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, head_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, patch_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, trace_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, servers_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, parameters_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::PathItem, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Paths, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Paths, path_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Paths, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Properties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Properties, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Reference, _ref_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Reference, summary_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Reference, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::RequestBodiesOrReferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::RequestBodiesOrReferences, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::RequestBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::RequestBody, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::RequestBody, content_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::RequestBody, required_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::RequestBody, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::RequestBodyOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::RequestBodyOrReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::openapi::v3::RequestBodyOrReference, oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Response, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Response, headers_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Response, content_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Response, links_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Response, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ResponseOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ResponseOrReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ResponseOrReference, oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Responses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Responses, default__),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Responses, response_or_reference_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Responses, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ResponsesOrReferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ResponsesOrReferences, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, nullable_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, discriminator_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, read_only_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, write_only_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, xml_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, external_docs_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, example_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, deprecated_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, title_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, multiple_of_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, maximum_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, exclusive_maximum_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, minimum_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, exclusive_minimum_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, max_length_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, min_length_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, pattern_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, max_items_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, min_items_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, unique_items_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, max_properties_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, min_properties_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, required_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, enum__),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, type_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, all_of_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, one_of_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, any_of_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, not__),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, items_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, properties_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, additional_properties_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, default__),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, format_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Schema, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SchemaOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SchemaOrReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SchemaOrReference, oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SchemasOrReferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SchemasOrReferences, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecurityRequirement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecurityRequirement, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecurityScheme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecurityScheme, type_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecurityScheme, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecurityScheme, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecurityScheme, in_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecurityScheme, scheme_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecurityScheme, bearer_format_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecurityScheme, flows_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecurityScheme, open_id_connect_url_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecurityScheme, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecuritySchemeOrReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecuritySchemeOrReference, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecuritySchemeOrReference, oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecuritySchemesOrReferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SecuritySchemesOrReferences, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Server, url_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Server, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Server, variables_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Server, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ServerVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ServerVariable, enum__),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ServerVariable, default__),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ServerVariable, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ServerVariable, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ServerVariables, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::ServerVariables, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SpecificationExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SpecificationExtension, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::openapi::v3::SpecificationExtension, oneof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::StringArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::StringArray, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Strings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Strings, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Tag, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Tag, description_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Tag, external_docs_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Tag, specification_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Xml, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Xml, name_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Xml, namespace__),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Xml, prefix_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Xml, attribute_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Xml, wrapped_),
  PROTOBUF_FIELD_OFFSET(::openapi::v3::Xml, specification_extension_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::openapi::v3::AdditionalPropertiesItem)},
  { 8, -1, sizeof(::openapi::v3::Any)},
  { 15, -1, sizeof(::openapi::v3::AnyOrExpression)},
  { 23, -1, sizeof(::openapi::v3::Callback)},
  { 30, -1, sizeof(::openapi::v3::CallbackOrReference)},
  { 38, -1, sizeof(::openapi::v3::CallbacksOrReferences)},
  { 44, -1, sizeof(::openapi::v3::Components)},
  { 59, -1, sizeof(::openapi::v3::Contact)},
  { 68, -1, sizeof(::openapi::v3::DefaultType)},
  { 77, -1, sizeof(::openapi::v3::Discriminator)},
  { 85, -1, sizeof(::openapi::v3::Document)},
  { 99, -1, sizeof(::openapi::v3::Encoding)},
  { 110, -1, sizeof(::openapi::v3::Encodings)},
  { 116, -1, sizeof(::openapi::v3::Example)},
  { 126, -1, sizeof(::openapi::v3::ExampleOrReference)},
  { 134, -1, sizeof(::openapi::v3::ExamplesOrReferences)},
  { 140, -1, sizeof(::openapi::v3::Expression)},
  { 146, -1, sizeof(::openapi::v3::ExternalDocs)},
  { 154, -1, sizeof(::openapi::v3::Header)},
  { 171, -1, sizeof(::openapi::v3::HeaderOrReference)},
  { 179, -1, sizeof(::openapi::v3::HeadersOrReferences)},
  { 185, -1, sizeof(::openapi::v3::Info)},
  { 198, -1, sizeof(::openapi::v3::ItemsItem)},
  { 204, -1, sizeof(::openapi::v3::License)},
  { 212, -1, sizeof(::openapi::v3::Link)},
  { 224, -1, sizeof(::openapi::v3::LinkOrReference)},
  { 232, -1, sizeof(::openapi::v3::LinksOrReferences)},
  { 238, -1, sizeof(::openapi::v3::MediaType)},
  { 248, -1, sizeof(::openapi::v3::MediaTypes)},
  { 254, -1, sizeof(::openapi::v3::NamedAny)},
  { 261, -1, sizeof(::openapi::v3::NamedCallbackOrReference)},
  { 268, -1, sizeof(::openapi::v3::NamedEncoding)},
  { 275, -1, sizeof(::openapi::v3::NamedExampleOrReference)},
  { 282, -1, sizeof(::openapi::v3::NamedHeaderOrReference)},
  { 289, -1, sizeof(::openapi::v3::NamedLinkOrReference)},
  { 296, -1, sizeof(::openapi::v3::NamedMediaType)},
  { 303, -1, sizeof(::openapi::v3::NamedParameterOrReference)},
  { 310, -1, sizeof(::openapi::v3::NamedPathItem)},
  { 317, -1, sizeof(::openapi::v3::NamedRequestBodyOrReference)},
  { 324, -1, sizeof(::openapi::v3::NamedResponseOrReference)},
  { 331, -1, sizeof(::openapi::v3::NamedSchemaOrReference)},
  { 338, -1, sizeof(::openapi::v3::NamedSecuritySchemeOrReference)},
  { 345, -1, sizeof(::openapi::v3::NamedServerVariable)},
  { 352, -1, sizeof(::openapi::v3::NamedString)},
  { 359, -1, sizeof(::openapi::v3::NamedStringArray)},
  { 366, -1, sizeof(::openapi::v3::OauthFlow)},
  { 376, -1, sizeof(::openapi::v3::OauthFlows)},
  { 386, -1, sizeof(::openapi::v3::Object)},
  { 392, -1, sizeof(::openapi::v3::Operation)},
  { 410, -1, sizeof(::openapi::v3::Parameter)},
  { 429, -1, sizeof(::openapi::v3::ParameterOrReference)},
  { 437, -1, sizeof(::openapi::v3::ParametersOrReferences)},
  { 443, -1, sizeof(::openapi::v3::PathItem)},
  { 462, -1, sizeof(::openapi::v3::Paths)},
  { 469, -1, sizeof(::openapi::v3::Properties)},
  { 475, -1, sizeof(::openapi::v3::Reference)},
  { 483, -1, sizeof(::openapi::v3::RequestBodiesOrReferences)},
  { 489, -1, sizeof(::openapi::v3::RequestBody)},
  { 498, -1, sizeof(::openapi::v3::RequestBodyOrReference)},
  { 506, -1, sizeof(::openapi::v3::Response)},
  { 516, -1, sizeof(::openapi::v3::ResponseOrReference)},
  { 524, -1, sizeof(::openapi::v3::Responses)},
  { 532, -1, sizeof(::openapi::v3::ResponsesOrReferences)},
  { 538, -1, sizeof(::openapi::v3::Schema)},
  { 579, -1, sizeof(::openapi::v3::SchemaOrReference)},
  { 587, -1, sizeof(::openapi::v3::SchemasOrReferences)},
  { 593, -1, sizeof(::openapi::v3::SecurityRequirement)},
  { 599, -1, sizeof(::openapi::v3::SecurityScheme)},
  { 613, -1, sizeof(::openapi::v3::SecuritySchemeOrReference)},
  { 621, -1, sizeof(::openapi::v3::SecuritySchemesOrReferences)},
  { 627, -1, sizeof(::openapi::v3::Server)},
  { 636, -1, sizeof(::openapi::v3::ServerVariable)},
  { 645, -1, sizeof(::openapi::v3::ServerVariables)},
  { 651, -1, sizeof(::openapi::v3::SpecificationExtension)},
  { 660, -1, sizeof(::openapi::v3::StringArray)},
  { 666, -1, sizeof(::openapi::v3::Strings)},
  { 672, -1, sizeof(::openapi::v3::Tag)},
  { 681, -1, sizeof(::openapi::v3::Xml)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_AdditionalPropertiesItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Any_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_AnyOrExpression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Callback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_CallbackOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_CallbacksOrReferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Components_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Contact_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_DefaultType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Discriminator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Document_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Encoding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Encodings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Example_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_ExampleOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_ExamplesOrReferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Expression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_ExternalDocs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_HeaderOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_HeadersOrReferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_ItemsItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_License_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Link_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_LinkOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_LinksOrReferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_MediaType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_MediaTypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedAny_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedCallbackOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedEncoding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedExampleOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedHeaderOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedLinkOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedMediaType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedParameterOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedPathItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedRequestBodyOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedResponseOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedSchemaOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedSecuritySchemeOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedServerVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_NamedStringArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_OauthFlow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_OauthFlows_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Object_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Parameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_ParameterOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_ParametersOrReferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_PathItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Paths_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Properties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Reference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_RequestBodiesOrReferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_RequestBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_RequestBodyOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_ResponseOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Responses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_ResponsesOrReferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Schema_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_SchemaOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_SchemasOrReferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_SecurityRequirement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_SecurityScheme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_SecuritySchemeOrReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_SecuritySchemesOrReferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Server_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_ServerVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_ServerVariables_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_SpecificationExtension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_StringArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Strings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Tag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::openapi::v3::_Xml_default_instance_),
};

const char descriptor_table_protodef_openapiv3_2fOpenAPIv3_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031openapiv3/OpenAPIv3.proto\022\nopenapi.v3\032"
  "\031google/protobuf/any.proto\"t\n\030Additional"
  "PropertiesItem\022<\n\023schema_or_reference\030\001 "
  "\001(\0132\035.openapi.v3.SchemaOrReferenceH\000\022\021\n\007"
  "boolean\030\002 \001(\010H\000B\007\n\005oneof\"8\n\003Any\022#\n\005value"
  "\030\001 \001(\0132\024.google.protobuf.Any\022\014\n\004yaml\030\002 \001"
  "(\t\"h\n\017AnyOrExpression\022\036\n\003any\030\001 \001(\0132\017.ope"
  "napi.v3.AnyH\000\022,\n\nexpression\030\002 \001(\0132\026.open"
  "api.v3.ExpressionH\000B\007\n\005oneof\"j\n\010Callback"
  "\022\'\n\004path\030\001 \003(\0132\031.openapi.v3.NamedPathIte"
  "m\0225\n\027specification_extension\030\002 \003(\0132\024.ope"
  "napi.v3.NamedAny\"t\n\023CallbackOrReference\022"
  "(\n\010callback\030\001 \001(\0132\024.openapi.v3.CallbackH"
  "\000\022*\n\treference\030\002 \001(\0132\025.openapi.v3.Refere"
  "nceH\000B\007\n\005oneof\"\\\n\025CallbacksOrReferences\022"
  "C\n\025additional_properties\030\001 \003(\0132$.openapi"
  ".v3.NamedCallbackOrReference\"\257\004\n\nCompone"
  "nts\0220\n\007schemas\030\001 \001(\0132\037.openapi.v3.Schema"
  "sOrReferences\0224\n\tresponses\030\002 \001(\0132!.opena"
  "pi.v3.ResponsesOrReferences\0226\n\nparameter"
  "s\030\003 \001(\0132\".openapi.v3.ParametersOrReferen"
  "ces\0222\n\010examples\030\004 \001(\0132 .openapi.v3.Examp"
  "lesOrReferences\022=\n\016request_bodies\030\005 \001(\0132"
  "%.openapi.v3.RequestBodiesOrReferences\0220"
  "\n\007headers\030\006 \001(\0132\037.openapi.v3.HeadersOrRe"
  "ferences\022A\n\020security_schemes\030\007 \001(\0132\'.ope"
  "napi.v3.SecuritySchemesOrReferences\022,\n\005l"
  "inks\030\010 \001(\0132\035.openapi.v3.LinksOrReference"
  "s\0224\n\tcallbacks\030\t \001(\0132!.openapi.v3.Callba"
  "cksOrReferences\0225\n\027specification_extensi"
  "on\030\n \003(\0132\024.openapi.v3.NamedAny\"j\n\007Contac"
  "t\022\014\n\004name\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\022\r\n\005email\030\003 "
  "\001(\t\0225\n\027specification_extension\030\004 \003(\0132\024.o"
  "penapi.v3.NamedAny\"M\n\013DefaultType\022\020\n\006num"
  "ber\030\001 \001(\001H\000\022\021\n\007boolean\030\002 \001(\010H\000\022\020\n\006string"
  "\030\003 \001(\tH\000B\007\n\005oneof\"\203\001\n\rDiscriminator\022\025\n\rp"
  "roperty_name\030\001 \001(\t\022$\n\007mapping\030\002 \001(\0132\023.op"
  "enapi.v3.Strings\0225\n\027specification_extens"
  "ion\030\003 \003(\0132\024.openapi.v3.NamedAny\"\350\002\n\010Docu"
  "ment\022\017\n\007openapi\030\001 \001(\t\022\036\n\004info\030\002 \001(\0132\020.op"
  "enapi.v3.Info\022#\n\007servers\030\003 \003(\0132\022.openapi"
  ".v3.Server\022 \n\005paths\030\004 \001(\0132\021.openapi.v3.P"
  "aths\022*\n\ncomponents\030\005 \001(\0132\026.openapi.v3.Co"
  "mponents\0221\n\010security\030\006 \003(\0132\037.openapi.v3."
  "SecurityRequirement\022\035\n\004tags\030\007 \003(\0132\017.open"
  "api.v3.Tag\022/\n\rexternal_docs\030\010 \001(\0132\030.open"
  "api.v3.ExternalDocs\0225\n\027specification_ext"
  "ension\030\t \003(\0132\024.openapi.v3.NamedAny\"\301\001\n\010E"
  "ncoding\022\024\n\014content_type\030\001 \001(\t\0220\n\007headers"
  "\030\002 \001(\0132\037.openapi.v3.HeadersOrReferences\022"
  "\r\n\005style\030\003 \001(\t\022\017\n\007explode\030\004 \001(\010\022\026\n\016allow"
  "_reserved\030\005 \001(\010\0225\n\027specification_extensi"
  "on\030\006 \003(\0132\024.openapi.v3.NamedAny\"E\n\tEncodi"
  "ngs\0228\n\025additional_properties\030\001 \003(\0132\031.ope"
  "napi.v3.NamedEncoding\"\236\001\n\007Example\022\017\n\007sum"
  "mary\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\036\n\005value"
  "\030\003 \001(\0132\017.openapi.v3.Any\022\026\n\016external_valu"
  "e\030\004 \001(\t\0225\n\027specification_extension\030\005 \003(\013"
  "2\024.openapi.v3.NamedAny\"q\n\022ExampleOrRefer"
  "ence\022&\n\007example\030\001 \001(\0132\023.openapi.v3.Examp"
  "leH\000\022*\n\treference\030\002 \001(\0132\025.openapi.v3.Ref"
  "erenceH\000B\007\n\005oneof\"Z\n\024ExamplesOrReference"
  "s\022B\n\025additional_properties\030\001 \003(\0132#.opena"
  "pi.v3.NamedExampleOrReference\"A\n\nExpress"
  "ion\0223\n\025additional_properties\030\001 \003(\0132\024.ope"
  "napi.v3.NamedAny\"g\n\014ExternalDocs\022\023\n\013desc"
  "ription\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\0225\n\027specificat"
  "ion_extension\030\003 \003(\0132\024.openapi.v3.NamedAn"
  "y\"\373\002\n\006Header\022\023\n\013description\030\001 \001(\t\022\020\n\010req"
  "uired\030\002 \001(\010\022\022\n\ndeprecated\030\003 \001(\010\022\031\n\021allow"
  "_empty_value\030\004 \001(\010\022\r\n\005style\030\005 \001(\t\022\017\n\007exp"
  "lode\030\006 \001(\010\022\026\n\016allow_reserved\030\007 \001(\010\022-\n\006sc"
  "hema\030\010 \001(\0132\035.openapi.v3.SchemaOrReferenc"
  "e\022 \n\007example\030\t \001(\0132\017.openapi.v3.Any\0222\n\010e"
  "xamples\030\n \001(\0132 .openapi.v3.ExamplesOrRef"
  "erences\022\'\n\007content\030\013 \001(\0132\026.openapi.v3.Me"
  "diaTypes\0225\n\027specification_extension\030\014 \003("
  "\0132\024.openapi.v3.NamedAny\"n\n\021HeaderOrRefer"
  "ence\022$\n\006header\030\001 \001(\0132\022.openapi.v3.Header"
  "H\000\022*\n\treference\030\002 \001(\0132\025.openapi.v3.Refer"
  "enceH\000B\007\n\005oneof\"X\n\023HeadersOrReferences\022A"
  "\n\025additional_properties\030\001 \003(\0132\".openapi."
  "v3.NamedHeaderOrReference\"\351\001\n\004Info\022\r\n\005ti"
  "tle\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\030\n\020terms_"
  "of_service\030\003 \001(\t\022$\n\007contact\030\004 \001(\0132\023.open"
  "api.v3.Contact\022$\n\007license\030\005 \001(\0132\023.openap"
  "i.v3.License\022\017\n\007version\030\006 \001(\t\0225\n\027specifi"
  "cation_extension\030\007 \003(\0132\024.openapi.v3.Name"
  "dAny\022\017\n\007summary\030\010 \001(\t\"G\n\tItemsItem\022:\n\023sc"
  "hema_or_reference\030\001 \003(\0132\035.openapi.v3.Sch"
  "emaOrReference\"[\n\007License\022\014\n\004name\030\001 \001(\t\022"
  "\013\n\003url\030\002 \001(\t\0225\n\027specification_extension\030"
  "\003 \003(\0132\024.openapi.v3.NamedAny\"\207\002\n\004Link\022\025\n\r"
  "operation_ref\030\001 \001(\t\022\024\n\014operation_id\030\002 \001("
  "\t\022/\n\nparameters\030\003 \001(\0132\033.openapi.v3.AnyOr"
  "Expression\0221\n\014request_body\030\004 \001(\0132\033.opena"
  "pi.v3.AnyOrExpression\022\023\n\013description\030\005 \001"
  "(\t\022\"\n\006server\030\006 \001(\0132\022.openapi.v3.Server\0225"
  "\n\027specification_extension\030\007 \003(\0132\024.openap"
  "i.v3.NamedAny\"h\n\017LinkOrReference\022 \n\004link"
  "\030\001 \001(\0132\020.openapi.v3.LinkH\000\022*\n\treference\030"
  "\002 \001(\0132\025.openapi.v3.ReferenceH\000B\007\n\005oneof\""
  "T\n\021LinksOrReferences\022\?\n\025additional_prope"
  "rties\030\001 \003(\0132 .openapi.v3.NamedLinkOrRefe"
  "rence\"\360\001\n\tMediaType\022-\n\006schema\030\001 \001(\0132\035.op"
  "enapi.v3.SchemaOrReference\022 \n\007example\030\002 "
  "\001(\0132\017.openapi.v3.Any\0222\n\010examples\030\003 \001(\0132 "
  ".openapi.v3.ExamplesOrReferences\022\'\n\010enco"
  "ding\030\004 \001(\0132\025.openapi.v3.Encodings\0225\n\027spe"
  "cification_extension\030\005 \003(\0132\024.openapi.v3."
  "NamedAny\"G\n\nMediaTypes\0229\n\025additional_pro"
  "perties\030\001 \003(\0132\032.openapi.v3.NamedMediaTyp"
  "e\"8\n\010NamedAny\022\014\n\004name\030\001 \001(\t\022\036\n\005value\030\002 \001"
  "(\0132\017.openapi.v3.Any\"X\n\030NamedCallbackOrRe"
  "ference\022\014\n\004name\030\001 \001(\t\022.\n\005value\030\002 \001(\0132\037.o"
  "penapi.v3.CallbackOrReference\"B\n\rNamedEn"
  "coding\022\014\n\004name\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.op"
  "enapi.v3.Encoding\"V\n\027NamedExampleOrRefer"
  "ence\022\014\n\004name\030\001 \001(\t\022-\n\005value\030\002 \001(\0132\036.open"
  "api.v3.ExampleOrReference\"T\n\026NamedHeader"
  "OrReference\022\014\n\004name\030\001 \001(\t\022,\n\005value\030\002 \001(\013"
  "2\035.openapi.v3.HeaderOrReference\"P\n\024Named"
  "LinkOrReference\022\014\n\004name\030\001 \001(\t\022*\n\005value\030\002"
  " \001(\0132\033.openapi.v3.LinkOrReference\"D\n\016Nam"
  "edMediaType\022\014\n\004name\030\001 \001(\t\022$\n\005value\030\002 \001(\013"
  "2\025.openapi.v3.MediaType\"Z\n\031NamedParamete"
  "rOrReference\022\014\n\004name\030\001 \001(\t\022/\n\005value\030\002 \001("
  "\0132 .openapi.v3.ParameterOrReference\"B\n\rN"
  "amedPathItem\022\014\n\004name\030\001 \001(\t\022#\n\005value\030\002 \001("
  "\0132\024.openapi.v3.PathItem\"^\n\033NamedRequestB"
  "odyOrReference\022\014\n\004name\030\001 \001(\t\0221\n\005value\030\002 "
  "\001(\0132\".openapi.v3.RequestBodyOrReference\""
  "X\n\030NamedResponseOrReference\022\014\n\004name\030\001 \001("
  "\t\022.\n\005value\030\002 \001(\0132\037.openapi.v3.ResponseOr"
  "Reference\"T\n\026NamedSchemaOrReference\022\014\n\004n"
  "ame\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.openapi.v3.Sc"
  "hemaOrReference\"d\n\036NamedSecuritySchemeOr"
  "Reference\022\014\n\004name\030\001 \001(\t\0224\n\005value\030\002 \001(\0132%"
  ".openapi.v3.SecuritySchemeOrReference\"N\n"
  "\023NamedServerVariable\022\014\n\004name\030\001 \001(\t\022)\n\005va"
  "lue\030\002 \001(\0132\032.openapi.v3.ServerVariable\"*\n"
  "\013NamedString\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001("
  "\t\"H\n\020NamedStringArray\022\014\n\004name\030\001 \001(\t\022&\n\005v"
  "alue\030\002 \001(\0132\027.openapi.v3.StringArray\"\252\001\n\t"
  "OauthFlow\022\031\n\021authorization_url\030\001 \001(\t\022\021\n\t"
  "token_url\030\002 \001(\t\022\023\n\013refresh_url\030\003 \001(\t\022#\n\006"
  "scopes\030\004 \001(\0132\023.openapi.v3.Strings\0225\n\027spe"
  "cification_extension\030\005 \003(\0132\024.openapi.v3."
  "NamedAny\"\373\001\n\nOauthFlows\022\'\n\010implicit\030\001 \001("
  "\0132\025.openapi.v3.OauthFlow\022\'\n\010password\030\002 \001"
  "(\0132\025.openapi.v3.OauthFlow\0221\n\022client_cred"
  "entials\030\003 \001(\0132\025.openapi.v3.OauthFlow\0221\n\022"
  "authorization_code\030\004 \001(\0132\025.openapi.v3.Oa"
  "uthFlow\0225\n\027specification_extension\030\005 \003(\013"
  "2\024.openapi.v3.NamedAny\"=\n\006Object\0223\n\025addi"
  "tional_properties\030\001 \003(\0132\024.openapi.v3.Nam"
  "edAny\"\371\003\n\tOperation\022\014\n\004tags\030\001 \003(\t\022\017\n\007sum"
  "mary\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022/\n\rexter"
  "nal_docs\030\004 \001(\0132\030.openapi.v3.ExternalDocs"
  "\022\024\n\014operation_id\030\005 \001(\t\0224\n\nparameters\030\006 \003"
  "(\0132 .openapi.v3.ParameterOrReference\0228\n\014"
  "request_body\030\007 \001(\0132\".openapi.v3.RequestB"
  "odyOrReference\022(\n\tresponses\030\010 \001(\0132\025.open"
  "api.v3.Responses\0224\n\tcallbacks\030\t \001(\0132!.op"
  "enapi.v3.CallbacksOrReferences\022\022\n\ndeprec"
  "ated\030\n \001(\010\0221\n\010security\030\013 \003(\0132\037.openapi.v"
  "3.SecurityRequirement\022#\n\007servers\030\014 \003(\0132\022"
  ".openapi.v3.Server\0225\n\027specification_exte"
  "nsion\030\r \003(\0132\024.openapi.v3.NamedAny\"\230\003\n\tPa"
  "rameter\022\014\n\004name\030\001 \001(\t\022\n\n\002in\030\002 \001(\t\022\023\n\013des"
  "cription\030\003 \001(\t\022\020\n\010required\030\004 \001(\010\022\022\n\ndepr"
  "ecated\030\005 \001(\010\022\031\n\021allow_empty_value\030\006 \001(\010\022"
  "\r\n\005style\030\007 \001(\t\022\017\n\007explode\030\010 \001(\010\022\026\n\016allow"
  "_reserved\030\t \001(\010\022-\n\006schema\030\n \001(\0132\035.openap"
  "i.v3.SchemaOrReference\022 \n\007example\030\013 \001(\0132"
  "\017.openapi.v3.Any\0222\n\010examples\030\014 \001(\0132 .ope"
  "napi.v3.ExamplesOrReferences\022\'\n\007content\030"
  "\r \001(\0132\026.openapi.v3.MediaTypes\0225\n\027specifi"
  "cation_extension\030\016 \003(\0132\024.openapi.v3.Name"
  "dAny\"w\n\024ParameterOrReference\022*\n\tparamete"
  "r\030\001 \001(\0132\025.openapi.v3.ParameterH\000\022*\n\trefe"
  "rence\030\002 \001(\0132\025.openapi.v3.ReferenceH\000B\007\n\005"
  "oneof\"^\n\026ParametersOrReferences\022D\n\025addit"
  "ional_properties\030\001 \003(\0132%.openapi.v3.Name"
  "dParameterOrReference\"\375\003\n\010PathItem\022\014\n\004_r"
  "ef\030\001 \001(\t\022\017\n\007summary\030\002 \001(\t\022\023\n\013description"
  "\030\003 \001(\t\022\"\n\003get\030\004 \001(\0132\025.openapi.v3.Operati"
  "on\022\"\n\003put\030\005 \001(\0132\025.openapi.v3.Operation\022#"
  "\n\004post\030\006 \001(\0132\025.openapi.v3.Operation\022%\n\006d"
  "elete\030\007 \001(\0132\025.openapi.v3.Operation\022&\n\007op"
  "tions\030\010 \001(\0132\025.openapi.v3.Operation\022#\n\004he"
  "ad\030\t \001(\0132\025.openapi.v3.Operation\022$\n\005patch"
  "\030\n \001(\0132\025.openapi.v3.Operation\022$\n\005trace\030\013"
  " \001(\0132\025.openapi.v3.Operation\022#\n\007servers\030\014"
  " \003(\0132\022.openapi.v3.Server\0224\n\nparameters\030\r"
  " \003(\0132 .openapi.v3.ParameterOrReference\0225"
  "\n\027specification_extension\030\016 \003(\0132\024.openap"
  "i.v3.NamedAny\"g\n\005Paths\022\'\n\004path\030\001 \003(\0132\031.o"
  "penapi.v3.NamedPathItem\0225\n\027specification"
  "_extension\030\002 \003(\0132\024.openapi.v3.NamedAny\"O"
  "\n\nProperties\022A\n\025additional_properties\030\001 "
  "\003(\0132\".openapi.v3.NamedSchemaOrReference\""
  "\?\n\tReference\022\014\n\004_ref\030\001 \001(\t\022\017\n\007summary\030\002 "
  "\001(\t\022\023\n\013description\030\003 \001(\t\"c\n\031RequestBodie"
  "sOrReferences\022F\n\025additional_properties\030\001"
  " \003(\0132\'.openapi.v3.NamedRequestBodyOrRefe"
  "rence\"\224\001\n\013RequestBody\022\023\n\013description\030\001 \001"
  "(\t\022\'\n\007content\030\002 \001(\0132\026.openapi.v3.MediaTy"
  "pes\022\020\n\010required\030\003 \001(\010\0225\n\027specification_e"
  "xtension\030\004 \003(\0132\024.openapi.v3.NamedAny\"~\n\026"
  "RequestBodyOrReference\022/\n\014request_body\030\001"
  " \001(\0132\027.openapi.v3.RequestBodyH\000\022*\n\trefer"
  "ence\030\002 \001(\0132\025.openapi.v3.ReferenceH\000B\007\n\005o"
  "neof\"\337\001\n\010Response\022\023\n\013description\030\001 \001(\t\0220"
  "\n\007headers\030\002 \001(\0132\037.openapi.v3.HeadersOrRe"
  "ferences\022\'\n\007content\030\003 \001(\0132\026.openapi.v3.M"
  "ediaTypes\022,\n\005links\030\004 \001(\0132\035.openapi.v3.Li"
  "nksOrReferences\0225\n\027specification_extensi"
  "on\030\005 \003(\0132\024.openapi.v3.NamedAny\"t\n\023Respon"
  "seOrReference\022(\n\010response\030\001 \001(\0132\024.openap"
  "i.v3.ResponseH\000\022*\n\treference\030\002 \001(\0132\025.ope"
  "napi.v3.ReferenceH\000B\007\n\005oneof\"\271\001\n\tRespons"
  "es\0220\n\007default\030\001 \001(\0132\037.openapi.v3.Respons"
  "eOrReference\022C\n\025response_or_reference\030\002 "
  "\003(\0132$.openapi.v3.NamedResponseOrReferenc"
  "e\0225\n\027specification_extension\030\003 \003(\0132\024.ope"
  "napi.v3.NamedAny\"\\\n\025ResponsesOrReference"
  "s\022C\n\025additional_properties\030\001 \003(\0132$.opena"
  "pi.v3.NamedResponseOrReference\"\243\010\n\006Schem"
  "a\022\020\n\010nullable\030\001 \001(\010\0220\n\rdiscriminator\030\002 \001"
  "(\0132\031.openapi.v3.Discriminator\022\021\n\tread_on"
  "ly\030\003 \001(\010\022\022\n\nwrite_only\030\004 \001(\010\022\034\n\003xml\030\005 \001("
  "\0132\017.openapi.v3.Xml\022/\n\rexternal_docs\030\006 \001("
  "\0132\030.openapi.v3.ExternalDocs\022 \n\007example\030\007"
  " \001(\0132\017.openapi.v3.Any\022\022\n\ndeprecated\030\010 \001("
  "\010\022\r\n\005title\030\t \001(\t\022\023\n\013multiple_of\030\n \001(\001\022\017\n"
  "\007maximum\030\013 \001(\001\022\031\n\021exclusive_maximum\030\014 \001("
  "\010\022\017\n\007minimum\030\r \001(\001\022\031\n\021exclusive_minimum\030"
  "\016 \001(\010\022\022\n\nmax_length\030\017 \001(\003\022\022\n\nmin_length\030"
  "\020 \001(\003\022\017\n\007pattern\030\021 \001(\t\022\021\n\tmax_items\030\022 \001("
  "\003\022\021\n\tmin_items\030\023 \001(\003\022\024\n\014unique_items\030\024 \001"
  "(\010\022\026\n\016max_properties\030\025 \001(\003\022\026\n\016min_proper"
  "ties\030\026 \001(\003\022\020\n\010required\030\027 \003(\t\022\035\n\004enum\030\030 \003"
  "(\0132\017.openapi.v3.Any\022\014\n\004type\030\031 \001(\t\022-\n\006all"
  "_of\030\032 \003(\0132\035.openapi.v3.SchemaOrReference"
  "\022-\n\006one_of\030\033 \003(\0132\035.openapi.v3.SchemaOrRe"
  "ference\022-\n\006any_of\030\034 \003(\0132\035.openapi.v3.Sch"
  "emaOrReference\022\037\n\003not\030\035 \001(\0132\022.openapi.v3"
  ".Schema\022$\n\005items\030\036 \001(\0132\025.openapi.v3.Item"
  "sItem\022*\n\nproperties\030\037 \001(\0132\026.openapi.v3.P"
  "roperties\022C\n\025additional_properties\030  \001(\013"
  "2$.openapi.v3.AdditionalPropertiesItem\022("
  "\n\007default\030! \001(\0132\027.openapi.v3.DefaultType"
  "\022\023\n\013description\030\" \001(\t\022\016\n\006format\030# \001(\t\0225\n"
  "\027specification_extension\030$ \003(\0132\024.openapi"
  ".v3.NamedAny\"n\n\021SchemaOrReference\022$\n\006sch"
  "ema\030\001 \001(\0132\022.openapi.v3.SchemaH\000\022*\n\trefer"
  "ence\030\002 \001(\0132\025.openapi.v3.ReferenceH\000B\007\n\005o"
  "neof\"X\n\023SchemasOrReferences\022A\n\025additiona"
  "l_properties\030\001 \003(\0132\".openapi.v3.NamedSch"
  "emaOrReference\"R\n\023SecurityRequirement\022;\n"
  "\025additional_properties\030\001 \003(\0132\034.openapi.v"
  "3.NamedStringArray\"\357\001\n\016SecurityScheme\022\014\n"
  "\004type\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\014\n\004name"
  "\030\003 \001(\t\022\n\n\002in\030\004 \001(\t\022\016\n\006scheme\030\005 \001(\t\022\025\n\rbe"
  "arer_format\030\006 \001(\t\022%\n\005flows\030\007 \001(\0132\026.opena"
  "pi.v3.OauthFlows\022\033\n\023open_id_connect_url\030"
  "\010 \001(\t\0225\n\027specification_extension\030\t \003(\0132\024"
  ".openapi.v3.NamedAny\"\207\001\n\031SecuritySchemeO"
  "rReference\0225\n\017security_scheme\030\001 \001(\0132\032.op"
  "enapi.v3.SecuritySchemeH\000\022*\n\treference\030\002"
  " \001(\0132\025.openapi.v3.ReferenceH\000B\007\n\005oneof\"h"
  "\n\033SecuritySchemesOrReferences\022I\n\025additio"
  "nal_properties\030\001 \003(\0132*.openapi.v3.NamedS"
  "ecuritySchemeOrReference\"\221\001\n\006Server\022\013\n\003u"
  "rl\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022.\n\tvariabl"
  "es\030\003 \001(\0132\033.openapi.v3.ServerVariables\0225\n"
  "\027specification_extension\030\004 \003(\0132\024.openapi"
  ".v3.NamedAny\"{\n\016ServerVariable\022\014\n\004enum\030\001"
  " \003(\t\022\017\n\007default\030\002 \001(\t\022\023\n\013description\030\003 \001"
  "(\t\0225\n\027specification_extension\030\004 \003(\0132\024.op"
  "enapi.v3.NamedAny\"Q\n\017ServerVariables\022>\n\025"
  "additional_properties\030\001 \003(\0132\037.openapi.v3"
  ".NamedServerVariable\"X\n\026SpecificationExt"
  "ension\022\020\n\006number\030\001 \001(\001H\000\022\021\n\007boolean\030\002 \001("
  "\010H\000\022\020\n\006string\030\003 \001(\tH\000B\007\n\005oneof\"\034\n\013String"
  "Array\022\r\n\005value\030\001 \003(\t\"A\n\007Strings\0226\n\025addit"
  "ional_properties\030\001 \003(\0132\027.openapi.v3.Name"
  "dString\"\220\001\n\003Tag\022\014\n\004name\030\001 \001(\t\022\023\n\013descrip"
  "tion\030\002 \001(\t\022/\n\rexternal_docs\030\003 \001(\0132\030.open"
  "api.v3.ExternalDocs\0225\n\027specification_ext"
  "ension\030\004 \003(\0132\024.openapi.v3.NamedAny\"\221\001\n\003X"
  "ml\022\014\n\004name\030\001 \001(\t\022\021\n\tnamespace\030\002 \001(\t\022\016\n\006p"
  "refix\030\003 \001(\t\022\021\n\tattribute\030\004 \001(\010\022\017\n\007wrappe"
  "d\030\005 \001(\010\0225\n\027specification_extension\030\006 \003(\013"
  "2\024.openapi.v3.NamedAnyBV\n\016org.openapi_v3"
  "B\014OpenAPIProtoP\001Z.github.com/google/gnos"
  "tic/openapiv3;openapi_v3\242\002\003OASb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_openapiv3_2fOpenAPIv3_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_openapiv3_2fOpenAPIv3_2eproto = {
  false, false, 11918, descriptor_table_protodef_openapiv3_2fOpenAPIv3_2eproto, "openapiv3/OpenAPIv3.proto", 
  &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once, descriptor_table_openapiv3_2fOpenAPIv3_2eproto_deps, 1, 78,
  schemas, file_default_instances, TableStruct_openapiv3_2fOpenAPIv3_2eproto::offsets,
  file_level_metadata_openapiv3_2fOpenAPIv3_2eproto, file_level_enum_descriptors_openapiv3_2fOpenAPIv3_2eproto, file_level_service_descriptors_openapiv3_2fOpenAPIv3_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter() {
  return &descriptor_table_openapiv3_2fOpenAPIv3_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_openapiv3_2fOpenAPIv3_2eproto(&descriptor_table_openapiv3_2fOpenAPIv3_2eproto);
namespace openapi {
namespace v3 {

// ===================================================================

class AdditionalPropertiesItem::_Internal {
 public:
  static const ::openapi::v3::SchemaOrReference& schema_or_reference(const AdditionalPropertiesItem* msg);
};

const ::openapi::v3::SchemaOrReference&
AdditionalPropertiesItem::_Internal::schema_or_reference(const AdditionalPropertiesItem* msg) {
  return *msg->oneof_.schema_or_reference_;
}
void AdditionalPropertiesItem::set_allocated_schema_or_reference(::openapi::v3::SchemaOrReference* schema_or_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (schema_or_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::SchemaOrReference>::GetOwningArena(schema_or_reference);
    if (message_arena != submessage_arena) {
      schema_or_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema_or_reference, submessage_arena);
    }
    set_has_schema_or_reference();
    oneof_.schema_or_reference_ = schema_or_reference;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.AdditionalPropertiesItem.schema_or_reference)
}
AdditionalPropertiesItem::AdditionalPropertiesItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.AdditionalPropertiesItem)
}
AdditionalPropertiesItem::AdditionalPropertiesItem(const AdditionalPropertiesItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof();
  switch (from.oneof_case()) {
    case kSchemaOrReference: {
      _internal_mutable_schema_or_reference()->::openapi::v3::SchemaOrReference::MergeFrom(from._internal_schema_or_reference());
      break;
    }
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.AdditionalPropertiesItem)
}

inline void AdditionalPropertiesItem::SharedCtor() {
clear_has_oneof();
}

AdditionalPropertiesItem::~AdditionalPropertiesItem() {
  // @@protoc_insertion_point(destructor:openapi.v3.AdditionalPropertiesItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AdditionalPropertiesItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof()) {
    clear_oneof();
  }
}

void AdditionalPropertiesItem::ArenaDtor(void* object) {
  AdditionalPropertiesItem* _this = reinterpret_cast< AdditionalPropertiesItem* >(object);
  (void)_this;
}
void AdditionalPropertiesItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdditionalPropertiesItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdditionalPropertiesItem::clear_oneof() {
// @@protoc_insertion_point(one_of_clear_start:openapi.v3.AdditionalPropertiesItem)
  switch (oneof_case()) {
    case kSchemaOrReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.schema_or_reference_;
      }
      break;
    }
    case kBoolean: {
      // No need to clear
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void AdditionalPropertiesItem::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.AdditionalPropertiesItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdditionalPropertiesItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.SchemaOrReference schema_or_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema_or_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool boolean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_boolean(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdditionalPropertiesItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.AdditionalPropertiesItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.SchemaOrReference schema_or_reference = 1;
  if (_internal_has_schema_or_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::schema_or_reference(this), target, stream);
  }

  // bool boolean = 2;
  if (_internal_has_boolean()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_boolean(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.AdditionalPropertiesItem)
  return target;
}

size_t AdditionalPropertiesItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.AdditionalPropertiesItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_case()) {
    // .openapi.v3.SchemaOrReference schema_or_reference = 1;
    case kSchemaOrReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.schema_or_reference_);
      break;
    }
    // bool boolean = 2;
    case kBoolean: {
      total_size += 1 + 1;
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdditionalPropertiesItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AdditionalPropertiesItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdditionalPropertiesItem::GetClassData() const { return &_class_data_; }

void AdditionalPropertiesItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AdditionalPropertiesItem *>(to)->MergeFrom(
      static_cast<const AdditionalPropertiesItem &>(from));
}


void AdditionalPropertiesItem::MergeFrom(const AdditionalPropertiesItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.AdditionalPropertiesItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_case()) {
    case kSchemaOrReference: {
      _internal_mutable_schema_or_reference()->::openapi::v3::SchemaOrReference::MergeFrom(from._internal_schema_or_reference());
      break;
    }
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdditionalPropertiesItem::CopyFrom(const AdditionalPropertiesItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.AdditionalPropertiesItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalPropertiesItem::IsInitialized() const {
  return true;
}

void AdditionalPropertiesItem::InternalSwap(AdditionalPropertiesItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_, other->oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdditionalPropertiesItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[0]);
}

// ===================================================================

class Any::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& value(const Any* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Any::_Internal::value(const Any* msg) {
  return *msg->value_;
}
void Any::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
Any::Any(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Any)
}
Any::Any(const Any& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  yaml_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_yaml().empty()) {
    yaml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_yaml(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new PROTOBUF_NAMESPACE_ID::Any(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Any)
}

inline void Any::SharedCtor() {
yaml_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

Any::~Any() {
  // @@protoc_insertion_point(destructor:openapi.v3.Any)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Any::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  yaml_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Any::ArenaDtor(void* object) {
  Any* _this = reinterpret_cast< Any* >(object);
  (void)_this;
}
void Any::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Any::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Any::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Any)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yaml_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Any::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string yaml = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_yaml();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Any.yaml"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Any::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Any)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any value = 1;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  // string yaml = 2;
  if (!this->_internal_yaml().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_yaml().data(), static_cast<int>(this->_internal_yaml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Any.yaml");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_yaml(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Any)
  return target;
}

size_t Any::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Any)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string yaml = 2;
  if (!this->_internal_yaml().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_yaml());
  }

  // .google.protobuf.Any value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Any::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Any::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Any::GetClassData() const { return &_class_data_; }

void Any::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Any *>(to)->MergeFrom(
      static_cast<const Any &>(from));
}


void Any::MergeFrom(const Any& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Any)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_yaml().empty()) {
    _internal_set_yaml(from._internal_yaml());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Any::CopyFrom(const Any& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Any)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Any::IsInitialized() const {
  return true;
}

void Any::InternalSwap(Any* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &yaml_, GetArenaForAllocation(),
      &other->yaml_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Any::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[1]);
}

// ===================================================================

class AnyOrExpression::_Internal {
 public:
  static const ::openapi::v3::Any& any(const AnyOrExpression* msg);
  static const ::openapi::v3::Expression& expression(const AnyOrExpression* msg);
};

const ::openapi::v3::Any&
AnyOrExpression::_Internal::any(const AnyOrExpression* msg) {
  return *msg->oneof_.any_;
}
const ::openapi::v3::Expression&
AnyOrExpression::_Internal::expression(const AnyOrExpression* msg) {
  return *msg->oneof_.expression_;
}
void AnyOrExpression::set_allocated_any(::openapi::v3::Any* any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Any>::GetOwningArena(any);
    if (message_arena != submessage_arena) {
      any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any, submessage_arena);
    }
    set_has_any();
    oneof_.any_ = any;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.AnyOrExpression.any)
}
void AnyOrExpression::set_allocated_expression(::openapi::v3::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Expression>::GetOwningArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
    oneof_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.AnyOrExpression.expression)
}
AnyOrExpression::AnyOrExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.AnyOrExpression)
}
AnyOrExpression::AnyOrExpression(const AnyOrExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof();
  switch (from.oneof_case()) {
    case kAny: {
      _internal_mutable_any()->::openapi::v3::Any::MergeFrom(from._internal_any());
      break;
    }
    case kExpression: {
      _internal_mutable_expression()->::openapi::v3::Expression::MergeFrom(from._internal_expression());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.AnyOrExpression)
}

inline void AnyOrExpression::SharedCtor() {
clear_has_oneof();
}

AnyOrExpression::~AnyOrExpression() {
  // @@protoc_insertion_point(destructor:openapi.v3.AnyOrExpression)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AnyOrExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof()) {
    clear_oneof();
  }
}

void AnyOrExpression::ArenaDtor(void* object) {
  AnyOrExpression* _this = reinterpret_cast< AnyOrExpression* >(object);
  (void)_this;
}
void AnyOrExpression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyOrExpression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyOrExpression::clear_oneof() {
// @@protoc_insertion_point(one_of_clear_start:openapi.v3.AnyOrExpression)
  switch (oneof_case()) {
    case kAny: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.any_;
      }
      break;
    }
    case kExpression: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.expression_;
      }
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void AnyOrExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.AnyOrExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyOrExpression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.Any any = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Expression expression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyOrExpression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.AnyOrExpression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.Any any = 1;
  if (_internal_has_any()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::any(this), target, stream);
  }

  // .openapi.v3.Expression expression = 2;
  if (_internal_has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expression(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.AnyOrExpression)
  return target;
}

size_t AnyOrExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.AnyOrExpression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_case()) {
    // .openapi.v3.Any any = 1;
    case kAny: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.any_);
      break;
    }
    // .openapi.v3.Expression expression = 2;
    case kExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.expression_);
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnyOrExpression::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnyOrExpression::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnyOrExpression::GetClassData() const { return &_class_data_; }

void AnyOrExpression::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AnyOrExpression *>(to)->MergeFrom(
      static_cast<const AnyOrExpression &>(from));
}


void AnyOrExpression::MergeFrom(const AnyOrExpression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.AnyOrExpression)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_case()) {
    case kAny: {
      _internal_mutable_any()->::openapi::v3::Any::MergeFrom(from._internal_any());
      break;
    }
    case kExpression: {
      _internal_mutable_expression()->::openapi::v3::Expression::MergeFrom(from._internal_expression());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnyOrExpression::CopyFrom(const AnyOrExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.AnyOrExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyOrExpression::IsInitialized() const {
  return true;
}

void AnyOrExpression::InternalSwap(AnyOrExpression* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_, other->oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyOrExpression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[2]);
}

// ===================================================================

class Callback::_Internal {
 public:
};

Callback::Callback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  path_(arena),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Callback)
}
Callback::Callback(const Callback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_(from.path_),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Callback)
}

inline void Callback::SharedCtor() {
}

Callback::~Callback() {
  // @@protoc_insertion_point(destructor:openapi.v3.Callback)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Callback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Callback::ArenaDtor(void* object) {
  Callback* _this = reinterpret_cast< Callback* >(object);
  (void)_this;
}
void Callback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Callback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Callback::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Callback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  specification_extension_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Callback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedPathItem path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Callback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Callback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedPathItem path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_path(i), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Callback)
  return target;
}

size_t Callback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Callback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedPathItem path = 1;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 2;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Callback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Callback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Callback::GetClassData() const { return &_class_data_; }

void Callback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Callback *>(to)->MergeFrom(
      static_cast<const Callback &>(from));
}


void Callback::MergeFrom(const Callback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Callback)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  specification_extension_.MergeFrom(from.specification_extension_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Callback::CopyFrom(const Callback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Callback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Callback::IsInitialized() const {
  return true;
}

void Callback::InternalSwap(Callback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  path_.InternalSwap(&other->path_);
  specification_extension_.InternalSwap(&other->specification_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Callback::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[3]);
}

// ===================================================================

class CallbackOrReference::_Internal {
 public:
  static const ::openapi::v3::Callback& callback(const CallbackOrReference* msg);
  static const ::openapi::v3::Reference& reference(const CallbackOrReference* msg);
};

const ::openapi::v3::Callback&
CallbackOrReference::_Internal::callback(const CallbackOrReference* msg) {
  return *msg->oneof_.callback_;
}
const ::openapi::v3::Reference&
CallbackOrReference::_Internal::reference(const CallbackOrReference* msg) {
  return *msg->oneof_.reference_;
}
void CallbackOrReference::set_allocated_callback(::openapi::v3::Callback* callback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (callback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Callback>::GetOwningArena(callback);
    if (message_arena != submessage_arena) {
      callback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, callback, submessage_arena);
    }
    set_has_callback();
    oneof_.callback_ = callback;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.CallbackOrReference.callback)
}
void CallbackOrReference::set_allocated_reference(::openapi::v3::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Reference>::GetOwningArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    set_has_reference();
    oneof_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.CallbackOrReference.reference)
}
CallbackOrReference::CallbackOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.CallbackOrReference)
}
CallbackOrReference::CallbackOrReference(const CallbackOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof();
  switch (from.oneof_case()) {
    case kCallback: {
      _internal_mutable_callback()->::openapi::v3::Callback::MergeFrom(from._internal_callback());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.CallbackOrReference)
}

inline void CallbackOrReference::SharedCtor() {
clear_has_oneof();
}

CallbackOrReference::~CallbackOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.CallbackOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CallbackOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof()) {
    clear_oneof();
  }
}

void CallbackOrReference::ArenaDtor(void* object) {
  CallbackOrReference* _this = reinterpret_cast< CallbackOrReference* >(object);
  (void)_this;
}
void CallbackOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallbackOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CallbackOrReference::clear_oneof() {
// @@protoc_insertion_point(one_of_clear_start:openapi.v3.CallbackOrReference)
  switch (oneof_case()) {
    case kCallback: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.callback_;
      }
      break;
    }
    case kReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.reference_;
      }
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void CallbackOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.CallbackOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallbackOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.Callback callback = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_callback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Reference reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CallbackOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.CallbackOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.Callback callback = 1;
  if (_internal_has_callback()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::callback(this), target, stream);
  }

  // .openapi.v3.Reference reference = 2;
  if (_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.CallbackOrReference)
  return target;
}

size_t CallbackOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.CallbackOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_case()) {
    // .openapi.v3.Callback callback = 1;
    case kCallback: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.callback_);
      break;
    }
    // .openapi.v3.Reference reference = 2;
    case kReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.reference_);
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallbackOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CallbackOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallbackOrReference::GetClassData() const { return &_class_data_; }

void CallbackOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CallbackOrReference *>(to)->MergeFrom(
      static_cast<const CallbackOrReference &>(from));
}


void CallbackOrReference::MergeFrom(const CallbackOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.CallbackOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_case()) {
    case kCallback: {
      _internal_mutable_callback()->::openapi::v3::Callback::MergeFrom(from._internal_callback());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallbackOrReference::CopyFrom(const CallbackOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.CallbackOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackOrReference::IsInitialized() const {
  return true;
}

void CallbackOrReference::InternalSwap(CallbackOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_, other->oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallbackOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[4]);
}

// ===================================================================

class CallbacksOrReferences::_Internal {
 public:
};

CallbacksOrReferences::CallbacksOrReferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.CallbacksOrReferences)
}
CallbacksOrReferences::CallbacksOrReferences(const CallbacksOrReferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.CallbacksOrReferences)
}

inline void CallbacksOrReferences::SharedCtor() {
}

CallbacksOrReferences::~CallbacksOrReferences() {
  // @@protoc_insertion_point(destructor:openapi.v3.CallbacksOrReferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CallbacksOrReferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbacksOrReferences::ArenaDtor(void* object) {
  CallbacksOrReferences* _this = reinterpret_cast< CallbacksOrReferences* >(object);
  (void)_this;
}
void CallbacksOrReferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallbacksOrReferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CallbacksOrReferences::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.CallbacksOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallbacksOrReferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedCallbackOrReference additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CallbacksOrReferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.CallbacksOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedCallbackOrReference additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.CallbacksOrReferences)
  return target;
}

size_t CallbacksOrReferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.CallbacksOrReferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedCallbackOrReference additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallbacksOrReferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CallbacksOrReferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallbacksOrReferences::GetClassData() const { return &_class_data_; }

void CallbacksOrReferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CallbacksOrReferences *>(to)->MergeFrom(
      static_cast<const CallbacksOrReferences &>(from));
}


void CallbacksOrReferences::MergeFrom(const CallbacksOrReferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.CallbacksOrReferences)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallbacksOrReferences::CopyFrom(const CallbacksOrReferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.CallbacksOrReferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbacksOrReferences::IsInitialized() const {
  return true;
}

void CallbacksOrReferences::InternalSwap(CallbacksOrReferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallbacksOrReferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[5]);
}

// ===================================================================

class Components::_Internal {
 public:
  static const ::openapi::v3::SchemasOrReferences& schemas(const Components* msg);
  static const ::openapi::v3::ResponsesOrReferences& responses(const Components* msg);
  static const ::openapi::v3::ParametersOrReferences& parameters(const Components* msg);
  static const ::openapi::v3::ExamplesOrReferences& examples(const Components* msg);
  static const ::openapi::v3::RequestBodiesOrReferences& request_bodies(const Components* msg);
  static const ::openapi::v3::HeadersOrReferences& headers(const Components* msg);
  static const ::openapi::v3::SecuritySchemesOrReferences& security_schemes(const Components* msg);
  static const ::openapi::v3::LinksOrReferences& links(const Components* msg);
  static const ::openapi::v3::CallbacksOrReferences& callbacks(const Components* msg);
};

const ::openapi::v3::SchemasOrReferences&
Components::_Internal::schemas(const Components* msg) {
  return *msg->schemas_;
}
const ::openapi::v3::ResponsesOrReferences&
Components::_Internal::responses(const Components* msg) {
  return *msg->responses_;
}
const ::openapi::v3::ParametersOrReferences&
Components::_Internal::parameters(const Components* msg) {
  return *msg->parameters_;
}
const ::openapi::v3::ExamplesOrReferences&
Components::_Internal::examples(const Components* msg) {
  return *msg->examples_;
}
const ::openapi::v3::RequestBodiesOrReferences&
Components::_Internal::request_bodies(const Components* msg) {
  return *msg->request_bodies_;
}
const ::openapi::v3::HeadersOrReferences&
Components::_Internal::headers(const Components* msg) {
  return *msg->headers_;
}
const ::openapi::v3::SecuritySchemesOrReferences&
Components::_Internal::security_schemes(const Components* msg) {
  return *msg->security_schemes_;
}
const ::openapi::v3::LinksOrReferences&
Components::_Internal::links(const Components* msg) {
  return *msg->links_;
}
const ::openapi::v3::CallbacksOrReferences&
Components::_Internal::callbacks(const Components* msg) {
  return *msg->callbacks_;
}
Components::Components(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Components)
}
Components::Components(const Components& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_schemas()) {
    schemas_ = new ::openapi::v3::SchemasOrReferences(*from.schemas_);
  } else {
    schemas_ = nullptr;
  }
  if (from._internal_has_responses()) {
    responses_ = new ::openapi::v3::ResponsesOrReferences(*from.responses_);
  } else {
    responses_ = nullptr;
  }
  if (from._internal_has_parameters()) {
    parameters_ = new ::openapi::v3::ParametersOrReferences(*from.parameters_);
  } else {
    parameters_ = nullptr;
  }
  if (from._internal_has_examples()) {
    examples_ = new ::openapi::v3::ExamplesOrReferences(*from.examples_);
  } else {
    examples_ = nullptr;
  }
  if (from._internal_has_request_bodies()) {
    request_bodies_ = new ::openapi::v3::RequestBodiesOrReferences(*from.request_bodies_);
  } else {
    request_bodies_ = nullptr;
  }
  if (from._internal_has_headers()) {
    headers_ = new ::openapi::v3::HeadersOrReferences(*from.headers_);
  } else {
    headers_ = nullptr;
  }
  if (from._internal_has_security_schemes()) {
    security_schemes_ = new ::openapi::v3::SecuritySchemesOrReferences(*from.security_schemes_);
  } else {
    security_schemes_ = nullptr;
  }
  if (from._internal_has_links()) {
    links_ = new ::openapi::v3::LinksOrReferences(*from.links_);
  } else {
    links_ = nullptr;
  }
  if (from._internal_has_callbacks()) {
    callbacks_ = new ::openapi::v3::CallbacksOrReferences(*from.callbacks_);
  } else {
    callbacks_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Components)
}

inline void Components::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&schemas_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&callbacks_) -
    reinterpret_cast<char*>(&schemas_)) + sizeof(callbacks_));
}

Components::~Components() {
  // @@protoc_insertion_point(destructor:openapi.v3.Components)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Components::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete schemas_;
  if (this != internal_default_instance()) delete responses_;
  if (this != internal_default_instance()) delete parameters_;
  if (this != internal_default_instance()) delete examples_;
  if (this != internal_default_instance()) delete request_bodies_;
  if (this != internal_default_instance()) delete headers_;
  if (this != internal_default_instance()) delete security_schemes_;
  if (this != internal_default_instance()) delete links_;
  if (this != internal_default_instance()) delete callbacks_;
}

void Components::ArenaDtor(void* object) {
  Components* _this = reinterpret_cast< Components* >(object);
  (void)_this;
}
void Components::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Components::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Components::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Components)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  if (GetArenaForAllocation() == nullptr && schemas_ != nullptr) {
    delete schemas_;
  }
  schemas_ = nullptr;
  if (GetArenaForAllocation() == nullptr && responses_ != nullptr) {
    delete responses_;
  }
  responses_ = nullptr;
  if (GetArenaForAllocation() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && examples_ != nullptr) {
    delete examples_;
  }
  examples_ = nullptr;
  if (GetArenaForAllocation() == nullptr && request_bodies_ != nullptr) {
    delete request_bodies_;
  }
  request_bodies_ = nullptr;
  if (GetArenaForAllocation() == nullptr && headers_ != nullptr) {
    delete headers_;
  }
  headers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && security_schemes_ != nullptr) {
    delete security_schemes_;
  }
  security_schemes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && links_ != nullptr) {
    delete links_;
  }
  links_ = nullptr;
  if (GetArenaForAllocation() == nullptr && callbacks_ != nullptr) {
    delete callbacks_;
  }
  callbacks_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Components::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.SchemasOrReferences schemas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_schemas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ResponsesOrReferences responses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_responses(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ParametersOrReferences parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ExamplesOrReferences examples = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_examples(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.RequestBodiesOrReferences request_bodies = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_bodies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.HeadersOrReferences headers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_headers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.SecuritySchemesOrReferences security_schemes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_schemes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.LinksOrReferences links = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_links(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.CallbacksOrReferences callbacks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_callbacks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Components::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Components)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.SchemasOrReferences schemas = 1;
  if (this->_internal_has_schemas()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::schemas(this), target, stream);
  }

  // .openapi.v3.ResponsesOrReferences responses = 2;
  if (this->_internal_has_responses()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::responses(this), target, stream);
  }

  // .openapi.v3.ParametersOrReferences parameters = 3;
  if (this->_internal_has_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::parameters(this), target, stream);
  }

  // .openapi.v3.ExamplesOrReferences examples = 4;
  if (this->_internal_has_examples()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::examples(this), target, stream);
  }

  // .openapi.v3.RequestBodiesOrReferences request_bodies = 5;
  if (this->_internal_has_request_bodies()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::request_bodies(this), target, stream);
  }

  // .openapi.v3.HeadersOrReferences headers = 6;
  if (this->_internal_has_headers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::headers(this), target, stream);
  }

  // .openapi.v3.SecuritySchemesOrReferences security_schemes = 7;
  if (this->_internal_has_security_schemes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::security_schemes(this), target, stream);
  }

  // .openapi.v3.LinksOrReferences links = 8;
  if (this->_internal_has_links()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::links(this), target, stream);
  }

  // .openapi.v3.CallbacksOrReferences callbacks = 9;
  if (this->_internal_has_callbacks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::callbacks(this), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Components)
  return target;
}

size_t Components::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Components)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 10;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .openapi.v3.SchemasOrReferences schemas = 1;
  if (this->_internal_has_schemas()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schemas_);
  }

  // .openapi.v3.ResponsesOrReferences responses = 2;
  if (this->_internal_has_responses()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responses_);
  }

  // .openapi.v3.ParametersOrReferences parameters = 3;
  if (this->_internal_has_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  // .openapi.v3.ExamplesOrReferences examples = 4;
  if (this->_internal_has_examples()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *examples_);
  }

  // .openapi.v3.RequestBodiesOrReferences request_bodies = 5;
  if (this->_internal_has_request_bodies()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_bodies_);
  }

  // .openapi.v3.HeadersOrReferences headers = 6;
  if (this->_internal_has_headers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *headers_);
  }

  // .openapi.v3.SecuritySchemesOrReferences security_schemes = 7;
  if (this->_internal_has_security_schemes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_schemes_);
  }

  // .openapi.v3.LinksOrReferences links = 8;
  if (this->_internal_has_links()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *links_);
  }

  // .openapi.v3.CallbacksOrReferences callbacks = 9;
  if (this->_internal_has_callbacks()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *callbacks_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Components::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Components::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Components::GetClassData() const { return &_class_data_; }

void Components::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Components *>(to)->MergeFrom(
      static_cast<const Components &>(from));
}


void Components::MergeFrom(const Components& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Components)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (from._internal_has_schemas()) {
    _internal_mutable_schemas()->::openapi::v3::SchemasOrReferences::MergeFrom(from._internal_schemas());
  }
  if (from._internal_has_responses()) {
    _internal_mutable_responses()->::openapi::v3::ResponsesOrReferences::MergeFrom(from._internal_responses());
  }
  if (from._internal_has_parameters()) {
    _internal_mutable_parameters()->::openapi::v3::ParametersOrReferences::MergeFrom(from._internal_parameters());
  }
  if (from._internal_has_examples()) {
    _internal_mutable_examples()->::openapi::v3::ExamplesOrReferences::MergeFrom(from._internal_examples());
  }
  if (from._internal_has_request_bodies()) {
    _internal_mutable_request_bodies()->::openapi::v3::RequestBodiesOrReferences::MergeFrom(from._internal_request_bodies());
  }
  if (from._internal_has_headers()) {
    _internal_mutable_headers()->::openapi::v3::HeadersOrReferences::MergeFrom(from._internal_headers());
  }
  if (from._internal_has_security_schemes()) {
    _internal_mutable_security_schemes()->::openapi::v3::SecuritySchemesOrReferences::MergeFrom(from._internal_security_schemes());
  }
  if (from._internal_has_links()) {
    _internal_mutable_links()->::openapi::v3::LinksOrReferences::MergeFrom(from._internal_links());
  }
  if (from._internal_has_callbacks()) {
    _internal_mutable_callbacks()->::openapi::v3::CallbacksOrReferences::MergeFrom(from._internal_callbacks());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Components::CopyFrom(const Components& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Components)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Components::IsInitialized() const {
  return true;
}

void Components::InternalSwap(Components* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Components, callbacks_)
      + sizeof(Components::callbacks_)
      - PROTOBUF_FIELD_OFFSET(Components, schemas_)>(
          reinterpret_cast<char*>(&schemas_),
          reinterpret_cast<char*>(&other->schemas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Components::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[6]);
}

// ===================================================================

class Contact::_Internal {
 public:
};

Contact::Contact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Contact)
}
Contact::Contact(const Contact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Contact)
}

inline void Contact::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Contact::~Contact() {
  // @@protoc_insertion_point(destructor:openapi.v3.Contact)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Contact::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Contact::ArenaDtor(void* object) {
  Contact* _this = reinterpret_cast< Contact* >(object);
  (void)_this;
}
void Contact::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Contact::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Contact::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Contact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  name_.ClearToEmpty();
  url_.ClearToEmpty();
  email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contact::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Contact.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Contact.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Contact.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Contact::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Contact)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Contact.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Contact.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Contact.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Contact)
  return target;
}

size_t Contact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Contact)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 4;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Contact::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Contact::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Contact::GetClassData() const { return &_class_data_; }

void Contact::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Contact *>(to)->MergeFrom(
      static_cast<const Contact &>(from));
}


void Contact::MergeFrom(const Contact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Contact)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Contact::CopyFrom(const Contact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Contact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contact::IsInitialized() const {
  return true;
}

void Contact::InternalSwap(Contact* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, GetArenaForAllocation(),
      &other->url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &email_, GetArenaForAllocation(),
      &other->email_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Contact::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[7]);
}

// ===================================================================

class DefaultType::_Internal {
 public:
};

DefaultType::DefaultType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.DefaultType)
}
DefaultType::DefaultType(const DefaultType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof();
  switch (from.oneof_case()) {
    case kNumber: {
      _internal_set_number(from._internal_number());
      break;
    }
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.DefaultType)
}

inline void DefaultType::SharedCtor() {
clear_has_oneof();
}

DefaultType::~DefaultType() {
  // @@protoc_insertion_point(destructor:openapi.v3.DefaultType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DefaultType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof()) {
    clear_oneof();
  }
}

void DefaultType::ArenaDtor(void* object) {
  DefaultType* _this = reinterpret_cast< DefaultType* >(object);
  (void)_this;
}
void DefaultType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefaultType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DefaultType::clear_oneof() {
// @@protoc_insertion_point(one_of_clear_start:openapi.v3.DefaultType)
  switch (oneof_case()) {
    case kNumber: {
      // No need to clear
      break;
    }
    case kBoolean: {
      // No need to clear
      break;
    }
    case kString: {
      oneof_.string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void DefaultType::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.DefaultType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _internal_set_number(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool boolean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_boolean(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.DefaultType.string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefaultType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.DefaultType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double number = 1;
  if (_internal_has_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_number(), target);
  }

  // bool boolean = 2;
  if (_internal_has_boolean()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_boolean(), target);
  }

  // string string = 3;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.DefaultType.string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.DefaultType)
  return target;
}

size_t DefaultType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.DefaultType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_case()) {
    // double number = 1;
    case kNumber: {
      total_size += 1 + 8;
      break;
    }
    // bool boolean = 2;
    case kBoolean: {
      total_size += 1 + 1;
      break;
    }
    // string string = 3;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefaultType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DefaultType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefaultType::GetClassData() const { return &_class_data_; }

void DefaultType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DefaultType *>(to)->MergeFrom(
      static_cast<const DefaultType &>(from));
}


void DefaultType::MergeFrom(const DefaultType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.DefaultType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_case()) {
    case kNumber: {
      _internal_set_number(from._internal_number());
      break;
    }
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DefaultType::CopyFrom(const DefaultType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.DefaultType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultType::IsInitialized() const {
  return true;
}

void DefaultType::InternalSwap(DefaultType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_, other->oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[8]);
}

// ===================================================================

class Discriminator::_Internal {
 public:
  static const ::openapi::v3::Strings& mapping(const Discriminator* msg);
};

const ::openapi::v3::Strings&
Discriminator::_Internal::mapping(const Discriminator* msg) {
  return *msg->mapping_;
}
Discriminator::Discriminator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Discriminator)
}
Discriminator::Discriminator(const Discriminator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mapping()) {
    mapping_ = new ::openapi::v3::Strings(*from.mapping_);
  } else {
    mapping_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Discriminator)
}

inline void Discriminator::SharedCtor() {
property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mapping_ = nullptr;
}

Discriminator::~Discriminator() {
  // @@protoc_insertion_point(destructor:openapi.v3.Discriminator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Discriminator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mapping_;
}

void Discriminator::ArenaDtor(void* object) {
  Discriminator* _this = reinterpret_cast< Discriminator* >(object);
  (void)_this;
}
void Discriminator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Discriminator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Discriminator::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Discriminator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  property_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mapping_ != nullptr) {
    delete mapping_;
  }
  mapping_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Discriminator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Discriminator.property_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Strings mapping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Discriminator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Discriminator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string property_name = 1;
  if (!this->_internal_property_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_property_name().data(), static_cast<int>(this->_internal_property_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Discriminator.property_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // .openapi.v3.Strings mapping = 2;
  if (this->_internal_has_mapping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mapping(this), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Discriminator)
  return target;
}

size_t Discriminator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Discriminator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 3;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string property_name = 1;
  if (!this->_internal_property_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property_name());
  }

  // .openapi.v3.Strings mapping = 2;
  if (this->_internal_has_mapping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mapping_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Discriminator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Discriminator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Discriminator::GetClassData() const { return &_class_data_; }

void Discriminator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Discriminator *>(to)->MergeFrom(
      static_cast<const Discriminator &>(from));
}


void Discriminator::MergeFrom(const Discriminator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Discriminator)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_property_name().empty()) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (from._internal_has_mapping()) {
    _internal_mutable_mapping()->::openapi::v3::Strings::MergeFrom(from._internal_mapping());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Discriminator::CopyFrom(const Discriminator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Discriminator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Discriminator::IsInitialized() const {
  return true;
}

void Discriminator::InternalSwap(Discriminator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_name_, GetArenaForAllocation(),
      &other->property_name_, other->GetArenaForAllocation()
  );
  swap(mapping_, other->mapping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Discriminator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[9]);
}

// ===================================================================

class Document::_Internal {
 public:
  static const ::openapi::v3::Info& info(const Document* msg);
  static const ::openapi::v3::Paths& paths(const Document* msg);
  static const ::openapi::v3::Components& components(const Document* msg);
  static const ::openapi::v3::ExternalDocs& external_docs(const Document* msg);
};

const ::openapi::v3::Info&
Document::_Internal::info(const Document* msg) {
  return *msg->info_;
}
const ::openapi::v3::Paths&
Document::_Internal::paths(const Document* msg) {
  return *msg->paths_;
}
const ::openapi::v3::Components&
Document::_Internal::components(const Document* msg) {
  return *msg->components_;
}
const ::openapi::v3::ExternalDocs&
Document::_Internal::external_docs(const Document* msg) {
  return *msg->external_docs_;
}
Document::Document(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  servers_(arena),
  security_(arena),
  tags_(arena),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Document)
}
Document::Document(const Document& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      servers_(from.servers_),
      security_(from.security_),
      tags_(from.tags_),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  openapi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_openapi().empty()) {
    openapi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_openapi(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_info()) {
    info_ = new ::openapi::v3::Info(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_paths()) {
    paths_ = new ::openapi::v3::Paths(*from.paths_);
  } else {
    paths_ = nullptr;
  }
  if (from._internal_has_components()) {
    components_ = new ::openapi::v3::Components(*from.components_);
  } else {
    components_ = nullptr;
  }
  if (from._internal_has_external_docs()) {
    external_docs_ = new ::openapi::v3::ExternalDocs(*from.external_docs_);
  } else {
    external_docs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Document)
}

inline void Document::SharedCtor() {
openapi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&external_docs_) -
    reinterpret_cast<char*>(&info_)) + sizeof(external_docs_));
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:openapi.v3.Document)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Document::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  openapi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete paths_;
  if (this != internal_default_instance()) delete components_;
  if (this != internal_default_instance()) delete external_docs_;
}

void Document::ArenaDtor(void* object) {
  Document* _this = reinterpret_cast< Document* >(object);
  (void)_this;
}
void Document::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Document::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Document)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  security_.Clear();
  tags_.Clear();
  specification_extension_.Clear();
  openapi_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && paths_ != nullptr) {
    delete paths_;
  }
  paths_ = nullptr;
  if (GetArenaForAllocation() == nullptr && components_ != nullptr) {
    delete components_;
  }
  components_ = nullptr;
  if (GetArenaForAllocation() == nullptr && external_docs_ != nullptr) {
    delete external_docs_;
  }
  external_docs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Document::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string openapi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_openapi();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Document.openapi"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Info info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.Server servers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Paths paths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_paths(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Components components = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_components(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.SecurityRequirement security = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_security(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.Tag tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ExternalDocs external_docs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_docs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Document::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Document)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string openapi = 1;
  if (!this->_internal_openapi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_openapi().data(), static_cast<int>(this->_internal_openapi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Document.openapi");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_openapi(), target);
  }

  // .openapi.v3.Info info = 2;
  if (this->_internal_has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  // repeated .openapi.v3.Server servers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_servers(i), target, stream);
  }

  // .openapi.v3.Paths paths = 4;
  if (this->_internal_has_paths()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::paths(this), target, stream);
  }

  // .openapi.v3.Components components = 5;
  if (this->_internal_has_components()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::components(this), target, stream);
  }

  // repeated .openapi.v3.SecurityRequirement security = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_security_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_security(i), target, stream);
  }

  // repeated .openapi.v3.Tag tags = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_tags(i), target, stream);
  }

  // .openapi.v3.ExternalDocs external_docs = 8;
  if (this->_internal_has_external_docs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::external_docs(this), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Document)
  return target;
}

size_t Document::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Document)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.Server servers = 3;
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.SecurityRequirement security = 6;
  total_size += 1UL * this->_internal_security_size();
  for (const auto& msg : this->security_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.Tag tags = 7;
  total_size += 1UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 9;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string openapi = 1;
  if (!this->_internal_openapi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_openapi());
  }

  // .openapi.v3.Info info = 2;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // .openapi.v3.Paths paths = 4;
  if (this->_internal_has_paths()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paths_);
  }

  // .openapi.v3.Components components = 5;
  if (this->_internal_has_components()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *components_);
  }

  // .openapi.v3.ExternalDocs external_docs = 8;
  if (this->_internal_has_external_docs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *external_docs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Document::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Document::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Document::GetClassData() const { return &_class_data_; }

void Document::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Document *>(to)->MergeFrom(
      static_cast<const Document &>(from));
}


void Document::MergeFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Document)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  security_.MergeFrom(from.security_);
  tags_.MergeFrom(from.tags_);
  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_openapi().empty()) {
    _internal_set_openapi(from._internal_openapi());
  }
  if (from._internal_has_info()) {
    _internal_mutable_info()->::openapi::v3::Info::MergeFrom(from._internal_info());
  }
  if (from._internal_has_paths()) {
    _internal_mutable_paths()->::openapi::v3::Paths::MergeFrom(from._internal_paths());
  }
  if (from._internal_has_components()) {
    _internal_mutable_components()->::openapi::v3::Components::MergeFrom(from._internal_components());
  }
  if (from._internal_has_external_docs()) {
    _internal_mutable_external_docs()->::openapi::v3::ExternalDocs::MergeFrom(from._internal_external_docs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  return true;
}

void Document::InternalSwap(Document* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  servers_.InternalSwap(&other->servers_);
  security_.InternalSwap(&other->security_);
  tags_.InternalSwap(&other->tags_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &openapi_, GetArenaForAllocation(),
      &other->openapi_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Document, external_docs_)
      + sizeof(Document::external_docs_)
      - PROTOBUF_FIELD_OFFSET(Document, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Document::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[10]);
}

// ===================================================================

class Encoding::_Internal {
 public:
  static const ::openapi::v3::HeadersOrReferences& headers(const Encoding* msg);
};

const ::openapi::v3::HeadersOrReferences&
Encoding::_Internal::headers(const Encoding* msg) {
  return *msg->headers_;
}
Encoding::Encoding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Encoding)
}
Encoding::Encoding(const Encoding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content_type().empty()) {
    content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content_type(), 
      GetArenaForAllocation());
  }
  style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_style().empty()) {
    style_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_style(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_headers()) {
    headers_ = new ::openapi::v3::HeadersOrReferences(*from.headers_);
  } else {
    headers_ = nullptr;
  }
  ::memcpy(&explode_, &from.explode_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_reserved_) -
    reinterpret_cast<char*>(&explode_)) + sizeof(allow_reserved_));
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Encoding)
}

inline void Encoding::SharedCtor() {
content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&headers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_reserved_) -
    reinterpret_cast<char*>(&headers_)) + sizeof(allow_reserved_));
}

Encoding::~Encoding() {
  // @@protoc_insertion_point(destructor:openapi.v3.Encoding)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Encoding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  style_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete headers_;
}

void Encoding::ArenaDtor(void* object) {
  Encoding* _this = reinterpret_cast< Encoding* >(object);
  (void)_this;
}
void Encoding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Encoding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Encoding::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Encoding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  content_type_.ClearToEmpty();
  style_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && headers_ != nullptr) {
    delete headers_;
  }
  headers_ = nullptr;
  ::memset(&explode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_reserved_) -
      reinterpret_cast<char*>(&explode_)) + sizeof(allow_reserved_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Encoding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Encoding.content_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.HeadersOrReferences headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_headers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_style();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Encoding.style"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool explode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          explode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_reserved = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          allow_reserved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Encoding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Encoding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content_type = 1;
  if (!this->_internal_content_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Encoding.content_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content_type(), target);
  }

  // .openapi.v3.HeadersOrReferences headers = 2;
  if (this->_internal_has_headers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::headers(this), target, stream);
  }

  // string style = 3;
  if (!this->_internal_style().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_style().data(), static_cast<int>(this->_internal_style().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Encoding.style");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_style(), target);
  }

  // bool explode = 4;
  if (this->_internal_explode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_explode(), target);
  }

  // bool allow_reserved = 5;
  if (this->_internal_allow_reserved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_allow_reserved(), target);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Encoding)
  return target;
}

size_t Encoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Encoding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 6;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string content_type = 1;
  if (!this->_internal_content_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type());
  }

  // string style = 3;
  if (!this->_internal_style().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_style());
  }

  // .openapi.v3.HeadersOrReferences headers = 2;
  if (this->_internal_has_headers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *headers_);
  }

  // bool explode = 4;
  if (this->_internal_explode() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_reserved = 5;
  if (this->_internal_allow_reserved() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Encoding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Encoding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Encoding::GetClassData() const { return &_class_data_; }

void Encoding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Encoding *>(to)->MergeFrom(
      static_cast<const Encoding &>(from));
}


void Encoding::MergeFrom(const Encoding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Encoding)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_content_type().empty()) {
    _internal_set_content_type(from._internal_content_type());
  }
  if (!from._internal_style().empty()) {
    _internal_set_style(from._internal_style());
  }
  if (from._internal_has_headers()) {
    _internal_mutable_headers()->::openapi::v3::HeadersOrReferences::MergeFrom(from._internal_headers());
  }
  if (from._internal_explode() != 0) {
    _internal_set_explode(from._internal_explode());
  }
  if (from._internal_allow_reserved() != 0) {
    _internal_set_allow_reserved(from._internal_allow_reserved());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Encoding::CopyFrom(const Encoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Encoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Encoding::IsInitialized() const {
  return true;
}

void Encoding::InternalSwap(Encoding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_type_, GetArenaForAllocation(),
      &other->content_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &style_, GetArenaForAllocation(),
      &other->style_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Encoding, allow_reserved_)
      + sizeof(Encoding::allow_reserved_)
      - PROTOBUF_FIELD_OFFSET(Encoding, headers_)>(
          reinterpret_cast<char*>(&headers_),
          reinterpret_cast<char*>(&other->headers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Encoding::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[11]);
}

// ===================================================================

class Encodings::_Internal {
 public:
};

Encodings::Encodings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Encodings)
}
Encodings::Encodings(const Encodings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Encodings)
}

inline void Encodings::SharedCtor() {
}

Encodings::~Encodings() {
  // @@protoc_insertion_point(destructor:openapi.v3.Encodings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Encodings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Encodings::ArenaDtor(void* object) {
  Encodings* _this = reinterpret_cast< Encodings* >(object);
  (void)_this;
}
void Encodings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Encodings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Encodings::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Encodings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Encodings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedEncoding additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Encodings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Encodings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedEncoding additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Encodings)
  return target;
}

size_t Encodings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Encodings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedEncoding additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Encodings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Encodings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Encodings::GetClassData() const { return &_class_data_; }

void Encodings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Encodings *>(to)->MergeFrom(
      static_cast<const Encodings &>(from));
}


void Encodings::MergeFrom(const Encodings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Encodings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Encodings::CopyFrom(const Encodings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Encodings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Encodings::IsInitialized() const {
  return true;
}

void Encodings::InternalSwap(Encodings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Encodings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[12]);
}

// ===================================================================

class Example::_Internal {
 public:
  static const ::openapi::v3::Any& value(const Example* msg);
};

const ::openapi::v3::Any&
Example::_Internal::value(const Example* msg) {
  return *msg->value_;
}
Example::Example(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Example)
}
Example::Example(const Example& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_summary().empty()) {
    summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_summary(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  external_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_external_value().empty()) {
    external_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_external_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::Any(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Example)
}

inline void Example::SharedCtor() {
summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
external_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

Example::~Example() {
  // @@protoc_insertion_point(destructor:openapi.v3.Example)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Example::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  summary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  external_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Example::ArenaDtor(void* object) {
  Example* _this = reinterpret_cast< Example* >(object);
  (void)_this;
}
void Example::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Example::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Example::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Example)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  summary_.ClearToEmpty();
  description_.ClearToEmpty();
  external_value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Example::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string summary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_summary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Example.summary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Example.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Any value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string external_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_external_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Example.external_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Example::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Example)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string summary = 1;
  if (!this->_internal_summary().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summary().data(), static_cast<int>(this->_internal_summary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Example.summary");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_summary(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Example.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .openapi.v3.Any value = 3;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value(this), target, stream);
  }

  // string external_value = 4;
  if (!this->_internal_external_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_external_value().data(), static_cast<int>(this->_internal_external_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Example.external_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_external_value(), target);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Example)
  return target;
}

size_t Example::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Example)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 5;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string summary = 1;
  if (!this->_internal_summary().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summary());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string external_value = 4;
  if (!this->_internal_external_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_external_value());
  }

  // .openapi.v3.Any value = 3;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Example::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Example::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Example::GetClassData() const { return &_class_data_; }

void Example::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Example *>(to)->MergeFrom(
      static_cast<const Example &>(from));
}


void Example::MergeFrom(const Example& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Example)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_summary().empty()) {
    _internal_set_summary(from._internal_summary());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_external_value().empty()) {
    _internal_set_external_value(from._internal_external_value());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::Any::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Example::CopyFrom(const Example& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Example)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Example::IsInitialized() const {
  return true;
}

void Example::InternalSwap(Example* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &summary_, GetArenaForAllocation(),
      &other->summary_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &external_value_, GetArenaForAllocation(),
      &other->external_value_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Example::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[13]);
}

// ===================================================================

class ExampleOrReference::_Internal {
 public:
  static const ::openapi::v3::Example& example(const ExampleOrReference* msg);
  static const ::openapi::v3::Reference& reference(const ExampleOrReference* msg);
};

const ::openapi::v3::Example&
ExampleOrReference::_Internal::example(const ExampleOrReference* msg) {
  return *msg->oneof_.example_;
}
const ::openapi::v3::Reference&
ExampleOrReference::_Internal::reference(const ExampleOrReference* msg) {
  return *msg->oneof_.reference_;
}
void ExampleOrReference::set_allocated_example(::openapi::v3::Example* example) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (example) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Example>::GetOwningArena(example);
    if (message_arena != submessage_arena) {
      example = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, example, submessage_arena);
    }
    set_has_example();
    oneof_.example_ = example;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.ExampleOrReference.example)
}
void ExampleOrReference::set_allocated_reference(::openapi::v3::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Reference>::GetOwningArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    set_has_reference();
    oneof_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.ExampleOrReference.reference)
}
ExampleOrReference::ExampleOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.ExampleOrReference)
}
ExampleOrReference::ExampleOrReference(const ExampleOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof();
  switch (from.oneof_case()) {
    case kExample: {
      _internal_mutable_example()->::openapi::v3::Example::MergeFrom(from._internal_example());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.ExampleOrReference)
}

inline void ExampleOrReference::SharedCtor() {
clear_has_oneof();
}

ExampleOrReference::~ExampleOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.ExampleOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExampleOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof()) {
    clear_oneof();
  }
}

void ExampleOrReference::ArenaDtor(void* object) {
  ExampleOrReference* _this = reinterpret_cast< ExampleOrReference* >(object);
  (void)_this;
}
void ExampleOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExampleOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExampleOrReference::clear_oneof() {
// @@protoc_insertion_point(one_of_clear_start:openapi.v3.ExampleOrReference)
  switch (oneof_case()) {
    case kExample: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.example_;
      }
      break;
    }
    case kReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.reference_;
      }
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void ExampleOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.ExampleOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExampleOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.Example example = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_example(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Reference reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExampleOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.ExampleOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.Example example = 1;
  if (_internal_has_example()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::example(this), target, stream);
  }

  // .openapi.v3.Reference reference = 2;
  if (_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.ExampleOrReference)
  return target;
}

size_t ExampleOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.ExampleOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_case()) {
    // .openapi.v3.Example example = 1;
    case kExample: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.example_);
      break;
    }
    // .openapi.v3.Reference reference = 2;
    case kReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.reference_);
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExampleOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExampleOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExampleOrReference::GetClassData() const { return &_class_data_; }

void ExampleOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExampleOrReference *>(to)->MergeFrom(
      static_cast<const ExampleOrReference &>(from));
}


void ExampleOrReference::MergeFrom(const ExampleOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.ExampleOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_case()) {
    case kExample: {
      _internal_mutable_example()->::openapi::v3::Example::MergeFrom(from._internal_example());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExampleOrReference::CopyFrom(const ExampleOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.ExampleOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExampleOrReference::IsInitialized() const {
  return true;
}

void ExampleOrReference::InternalSwap(ExampleOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_, other->oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExampleOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[14]);
}

// ===================================================================

class ExamplesOrReferences::_Internal {
 public:
};

ExamplesOrReferences::ExamplesOrReferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.ExamplesOrReferences)
}
ExamplesOrReferences::ExamplesOrReferences(const ExamplesOrReferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.ExamplesOrReferences)
}

inline void ExamplesOrReferences::SharedCtor() {
}

ExamplesOrReferences::~ExamplesOrReferences() {
  // @@protoc_insertion_point(destructor:openapi.v3.ExamplesOrReferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExamplesOrReferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExamplesOrReferences::ArenaDtor(void* object) {
  ExamplesOrReferences* _this = reinterpret_cast< ExamplesOrReferences* >(object);
  (void)_this;
}
void ExamplesOrReferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExamplesOrReferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExamplesOrReferences::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.ExamplesOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExamplesOrReferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedExampleOrReference additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExamplesOrReferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.ExamplesOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedExampleOrReference additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.ExamplesOrReferences)
  return target;
}

size_t ExamplesOrReferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.ExamplesOrReferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedExampleOrReference additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExamplesOrReferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExamplesOrReferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExamplesOrReferences::GetClassData() const { return &_class_data_; }

void ExamplesOrReferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExamplesOrReferences *>(to)->MergeFrom(
      static_cast<const ExamplesOrReferences &>(from));
}


void ExamplesOrReferences::MergeFrom(const ExamplesOrReferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.ExamplesOrReferences)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExamplesOrReferences::CopyFrom(const ExamplesOrReferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.ExamplesOrReferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExamplesOrReferences::IsInitialized() const {
  return true;
}

void ExamplesOrReferences::InternalSwap(ExamplesOrReferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExamplesOrReferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[15]);
}

// ===================================================================

class Expression::_Internal {
 public:
};

Expression::Expression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Expression)
}
Expression::Expression(const Expression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Expression)
}

inline void Expression::SharedCtor() {
}

Expression::~Expression() {
  // @@protoc_insertion_point(destructor:openapi.v3.Expression)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Expression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Expression::ArenaDtor(void* object) {
  Expression* _this = reinterpret_cast< Expression* >(object);
  (void)_this;
}
void Expression::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Expression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Expression::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Expression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedAny additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Expression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Expression)
  return target;
}

size_t Expression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Expression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Expression::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Expression::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Expression::GetClassData() const { return &_class_data_; }

void Expression::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Expression *>(to)->MergeFrom(
      static_cast<const Expression &>(from));
}


void Expression::MergeFrom(const Expression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Expression)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Expression::CopyFrom(const Expression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Expression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression::IsInitialized() const {
  return true;
}

void Expression::InternalSwap(Expression* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Expression::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[16]);
}

// ===================================================================

class ExternalDocs::_Internal {
 public:
};

ExternalDocs::ExternalDocs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.ExternalDocs)
}
ExternalDocs::ExternalDocs(const ExternalDocs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.ExternalDocs)
}

inline void ExternalDocs::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExternalDocs::~ExternalDocs() {
  // @@protoc_insertion_point(destructor:openapi.v3.ExternalDocs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExternalDocs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExternalDocs::ArenaDtor(void* object) {
  ExternalDocs* _this = reinterpret_cast< ExternalDocs* >(object);
  (void)_this;
}
void ExternalDocs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExternalDocs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExternalDocs::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.ExternalDocs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  description_.ClearToEmpty();
  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternalDocs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.ExternalDocs.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.ExternalDocs.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExternalDocs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.ExternalDocs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.ExternalDocs.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.ExternalDocs.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.ExternalDocs)
  return target;
}

size_t ExternalDocs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.ExternalDocs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 3;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string description = 1;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExternalDocs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExternalDocs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExternalDocs::GetClassData() const { return &_class_data_; }

void ExternalDocs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ExternalDocs *>(to)->MergeFrom(
      static_cast<const ExternalDocs &>(from));
}


void ExternalDocs::MergeFrom(const ExternalDocs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.ExternalDocs)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExternalDocs::CopyFrom(const ExternalDocs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.ExternalDocs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalDocs::IsInitialized() const {
  return true;
}

void ExternalDocs::InternalSwap(ExternalDocs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, GetArenaForAllocation(),
      &other->url_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalDocs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[17]);
}

// ===================================================================

class Header::_Internal {
 public:
  static const ::openapi::v3::SchemaOrReference& schema(const Header* msg);
  static const ::openapi::v3::Any& example(const Header* msg);
  static const ::openapi::v3::ExamplesOrReferences& examples(const Header* msg);
  static const ::openapi::v3::MediaTypes& content(const Header* msg);
};

const ::openapi::v3::SchemaOrReference&
Header::_Internal::schema(const Header* msg) {
  return *msg->schema_;
}
const ::openapi::v3::Any&
Header::_Internal::example(const Header* msg) {
  return *msg->example_;
}
const ::openapi::v3::ExamplesOrReferences&
Header::_Internal::examples(const Header* msg) {
  return *msg->examples_;
}
const ::openapi::v3::MediaTypes&
Header::_Internal::content(const Header* msg) {
  return *msg->content_;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_style().empty()) {
    style_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_style(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_schema()) {
    schema_ = new ::openapi::v3::SchemaOrReference(*from.schema_);
  } else {
    schema_ = nullptr;
  }
  if (from._internal_has_example()) {
    example_ = new ::openapi::v3::Any(*from.example_);
  } else {
    example_ = nullptr;
  }
  if (from._internal_has_examples()) {
    examples_ = new ::openapi::v3::ExamplesOrReferences(*from.examples_);
  } else {
    examples_ = nullptr;
  }
  if (from._internal_has_content()) {
    content_ = new ::openapi::v3::MediaTypes(*from.content_);
  } else {
    content_ = nullptr;
  }
  ::memcpy(&required_, &from.required_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_reserved_) -
    reinterpret_cast<char*>(&required_)) + sizeof(allow_reserved_));
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Header)
}

inline void Header::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&schema_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_reserved_) -
    reinterpret_cast<char*>(&schema_)) + sizeof(allow_reserved_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:openapi.v3.Header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  style_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete schema_;
  if (this != internal_default_instance()) delete example_;
  if (this != internal_default_instance()) delete examples_;
  if (this != internal_default_instance()) delete content_;
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  description_.ClearToEmpty();
  style_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
  if (GetArenaForAllocation() == nullptr && example_ != nullptr) {
    delete example_;
  }
  example_ = nullptr;
  if (GetArenaForAllocation() == nullptr && examples_ != nullptr) {
    delete examples_;
  }
  examples_ = nullptr;
  if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
  ::memset(&required_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_reserved_) -
      reinterpret_cast<char*>(&required_)) + sizeof(allow_reserved_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Header.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool required = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool deprecated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_empty_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          allow_empty_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_style();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Header.style"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool explode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          explode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_reserved = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          allow_reserved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.SchemaOrReference schema = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Any example = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_example(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ExamplesOrReferences examples = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_examples(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.MediaTypes content = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Header.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // bool required = 2;
  if (this->_internal_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_required(), target);
  }

  // bool deprecated = 3;
  if (this->_internal_deprecated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_deprecated(), target);
  }

  // bool allow_empty_value = 4;
  if (this->_internal_allow_empty_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_allow_empty_value(), target);
  }

  // string style = 5;
  if (!this->_internal_style().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_style().data(), static_cast<int>(this->_internal_style().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Header.style");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_style(), target);
  }

  // bool explode = 6;
  if (this->_internal_explode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_explode(), target);
  }

  // bool allow_reserved = 7;
  if (this->_internal_allow_reserved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_allow_reserved(), target);
  }

  // .openapi.v3.SchemaOrReference schema = 8;
  if (this->_internal_has_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::schema(this), target, stream);
  }

  // .openapi.v3.Any example = 9;
  if (this->_internal_has_example()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::example(this), target, stream);
  }

  // .openapi.v3.ExamplesOrReferences examples = 10;
  if (this->_internal_has_examples()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::examples(this), target, stream);
  }

  // .openapi.v3.MediaTypes content = 11;
  if (this->_internal_has_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::content(this), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 12;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string description = 1;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string style = 5;
  if (!this->_internal_style().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_style());
  }

  // .openapi.v3.SchemaOrReference schema = 8;
  if (this->_internal_has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schema_);
  }

  // .openapi.v3.Any example = 9;
  if (this->_internal_has_example()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *example_);
  }

  // .openapi.v3.ExamplesOrReferences examples = 10;
  if (this->_internal_has_examples()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *examples_);
  }

  // .openapi.v3.MediaTypes content = 11;
  if (this->_internal_has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_);
  }

  // bool required = 2;
  if (this->_internal_required() != 0) {
    total_size += 1 + 1;
  }

  // bool deprecated = 3;
  if (this->_internal_deprecated() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_empty_value = 4;
  if (this->_internal_allow_empty_value() != 0) {
    total_size += 1 + 1;
  }

  // bool explode = 6;
  if (this->_internal_explode() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_reserved = 7;
  if (this->_internal_allow_reserved() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }

void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Header *>(to)->MergeFrom(
      static_cast<const Header &>(from));
}


void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Header)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_style().empty()) {
    _internal_set_style(from._internal_style());
  }
  if (from._internal_has_schema()) {
    _internal_mutable_schema()->::openapi::v3::SchemaOrReference::MergeFrom(from._internal_schema());
  }
  if (from._internal_has_example()) {
    _internal_mutable_example()->::openapi::v3::Any::MergeFrom(from._internal_example());
  }
  if (from._internal_has_examples()) {
    _internal_mutable_examples()->::openapi::v3::ExamplesOrReferences::MergeFrom(from._internal_examples());
  }
  if (from._internal_has_content()) {
    _internal_mutable_content()->::openapi::v3::MediaTypes::MergeFrom(from._internal_content());
  }
  if (from._internal_required() != 0) {
    _internal_set_required(from._internal_required());
  }
  if (from._internal_deprecated() != 0) {
    _internal_set_deprecated(from._internal_deprecated());
  }
  if (from._internal_allow_empty_value() != 0) {
    _internal_set_allow_empty_value(from._internal_allow_empty_value());
  }
  if (from._internal_explode() != 0) {
    _internal_set_explode(from._internal_explode());
  }
  if (from._internal_allow_reserved() != 0) {
    _internal_set_allow_reserved(from._internal_allow_reserved());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &style_, GetArenaForAllocation(),
      &other->style_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, allow_reserved_)
      + sizeof(Header::allow_reserved_)
      - PROTOBUF_FIELD_OFFSET(Header, schema_)>(
          reinterpret_cast<char*>(&schema_),
          reinterpret_cast<char*>(&other->schema_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[18]);
}

// ===================================================================

class HeaderOrReference::_Internal {
 public:
  static const ::openapi::v3::Header& header(const HeaderOrReference* msg);
  static const ::openapi::v3::Reference& reference(const HeaderOrReference* msg);
};

const ::openapi::v3::Header&
HeaderOrReference::_Internal::header(const HeaderOrReference* msg) {
  return *msg->oneof_.header_;
}
const ::openapi::v3::Reference&
HeaderOrReference::_Internal::reference(const HeaderOrReference* msg) {
  return *msg->oneof_.reference_;
}
void HeaderOrReference::set_allocated_header(::openapi::v3::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
    oneof_.header_ = header;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.HeaderOrReference.header)
}
void HeaderOrReference::set_allocated_reference(::openapi::v3::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Reference>::GetOwningArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    set_has_reference();
    oneof_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.HeaderOrReference.reference)
}
HeaderOrReference::HeaderOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.HeaderOrReference)
}
HeaderOrReference::HeaderOrReference(const HeaderOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof();
  switch (from.oneof_case()) {
    case kHeader: {
      _internal_mutable_header()->::openapi::v3::Header::MergeFrom(from._internal_header());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.HeaderOrReference)
}

inline void HeaderOrReference::SharedCtor() {
clear_has_oneof();
}

HeaderOrReference::~HeaderOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.HeaderOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeaderOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof()) {
    clear_oneof();
  }
}

void HeaderOrReference::ArenaDtor(void* object) {
  HeaderOrReference* _this = reinterpret_cast< HeaderOrReference* >(object);
  (void)_this;
}
void HeaderOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeaderOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeaderOrReference::clear_oneof() {
// @@protoc_insertion_point(one_of_clear_start:openapi.v3.HeaderOrReference)
  switch (oneof_case()) {
    case kHeader: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.header_;
      }
      break;
    }
    case kReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.reference_;
      }
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void HeaderOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.HeaderOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Reference reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.HeaderOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.Header header = 1;
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .openapi.v3.Reference reference = 2;
  if (_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.HeaderOrReference)
  return target;
}

size_t HeaderOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.HeaderOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_case()) {
    // .openapi.v3.Header header = 1;
    case kHeader: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.header_);
      break;
    }
    // .openapi.v3.Reference reference = 2;
    case kReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.reference_);
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeaderOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderOrReference::GetClassData() const { return &_class_data_; }

void HeaderOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeaderOrReference *>(to)->MergeFrom(
      static_cast<const HeaderOrReference &>(from));
}


void HeaderOrReference::MergeFrom(const HeaderOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.HeaderOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_case()) {
    case kHeader: {
      _internal_mutable_header()->::openapi::v3::Header::MergeFrom(from._internal_header());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderOrReference::CopyFrom(const HeaderOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.HeaderOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderOrReference::IsInitialized() const {
  return true;
}

void HeaderOrReference::InternalSwap(HeaderOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_, other->oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[19]);
}

// ===================================================================

class HeadersOrReferences::_Internal {
 public:
};

HeadersOrReferences::HeadersOrReferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.HeadersOrReferences)
}
HeadersOrReferences::HeadersOrReferences(const HeadersOrReferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.HeadersOrReferences)
}

inline void HeadersOrReferences::SharedCtor() {
}

HeadersOrReferences::~HeadersOrReferences() {
  // @@protoc_insertion_point(destructor:openapi.v3.HeadersOrReferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeadersOrReferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeadersOrReferences::ArenaDtor(void* object) {
  HeadersOrReferences* _this = reinterpret_cast< HeadersOrReferences* >(object);
  (void)_this;
}
void HeadersOrReferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeadersOrReferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeadersOrReferences::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.HeadersOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeadersOrReferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedHeaderOrReference additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeadersOrReferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.HeadersOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedHeaderOrReference additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.HeadersOrReferences)
  return target;
}

size_t HeadersOrReferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.HeadersOrReferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedHeaderOrReference additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeadersOrReferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeadersOrReferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeadersOrReferences::GetClassData() const { return &_class_data_; }

void HeadersOrReferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeadersOrReferences *>(to)->MergeFrom(
      static_cast<const HeadersOrReferences &>(from));
}


void HeadersOrReferences::MergeFrom(const HeadersOrReferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.HeadersOrReferences)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeadersOrReferences::CopyFrom(const HeadersOrReferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.HeadersOrReferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadersOrReferences::IsInitialized() const {
  return true;
}

void HeadersOrReferences::InternalSwap(HeadersOrReferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeadersOrReferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[20]);
}

// ===================================================================

class Info::_Internal {
 public:
  static const ::openapi::v3::Contact& contact(const Info* msg);
  static const ::openapi::v3::License& license(const Info* msg);
};

const ::openapi::v3::Contact&
Info::_Internal::contact(const Info* msg) {
  return *msg->contact_;
}
const ::openapi::v3::License&
Info::_Internal::license(const Info* msg) {
  return *msg->license_;
}
Info::Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Info)
}
Info::Info(const Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  terms_of_service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_terms_of_service().empty()) {
    terms_of_service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_terms_of_service(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_summary().empty()) {
    summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_summary(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_contact()) {
    contact_ = new ::openapi::v3::Contact(*from.contact_);
  } else {
    contact_ = nullptr;
  }
  if (from._internal_has_license()) {
    license_ = new ::openapi::v3::License(*from.license_);
  } else {
    license_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Info)
}

inline void Info::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
terms_of_service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&contact_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&license_) -
    reinterpret_cast<char*>(&contact_)) + sizeof(license_));
}

Info::~Info() {
  // @@protoc_insertion_point(destructor:openapi.v3.Info)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terms_of_service_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete contact_;
  if (this != internal_default_instance()) delete license_;
}

void Info::ArenaDtor(void* object) {
  Info* _this = reinterpret_cast< Info* >(object);
  (void)_this;
}
void Info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Info::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  title_.ClearToEmpty();
  description_.ClearToEmpty();
  terms_of_service_.ClearToEmpty();
  version_.ClearToEmpty();
  summary_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && contact_ != nullptr) {
    delete contact_;
  }
  contact_ = nullptr;
  if (GetArenaForAllocation() == nullptr && license_ != nullptr) {
    delete license_;
  }
  license_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Info.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Info.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string terms_of_service = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_terms_of_service();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Info.terms_of_service"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Contact contact = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_contact(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.License license = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_license(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Info.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string summary = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_summary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Info.summary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Info.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Info.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string terms_of_service = 3;
  if (!this->_internal_terms_of_service().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_terms_of_service().data(), static_cast<int>(this->_internal_terms_of_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Info.terms_of_service");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_terms_of_service(), target);
  }

  // .openapi.v3.Contact contact = 4;
  if (this->_internal_has_contact()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::contact(this), target, stream);
  }

  // .openapi.v3.License license = 5;
  if (this->_internal_has_license()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::license(this), target, stream);
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Info.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_specification_extension(i), target, stream);
  }

  // string summary = 8;
  if (!this->_internal_summary().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summary().data(), static_cast<int>(this->_internal_summary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Info.summary");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_summary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Info)
  return target;
}

size_t Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 7;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string terms_of_service = 3;
  if (!this->_internal_terms_of_service().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_terms_of_service());
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string summary = 8;
  if (!this->_internal_summary().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summary());
  }

  // .openapi.v3.Contact contact = 4;
  if (this->_internal_has_contact()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contact_);
  }

  // .openapi.v3.License license = 5;
  if (this->_internal_has_license()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *license_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Info::GetClassData() const { return &_class_data_; }

void Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Info *>(to)->MergeFrom(
      static_cast<const Info &>(from));
}


void Info::MergeFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Info)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_terms_of_service().empty()) {
    _internal_set_terms_of_service(from._internal_terms_of_service());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_summary().empty()) {
    _internal_set_summary(from._internal_summary());
  }
  if (from._internal_has_contact()) {
    _internal_mutable_contact()->::openapi::v3::Contact::MergeFrom(from._internal_contact());
  }
  if (from._internal_has_license()) {
    _internal_mutable_license()->::openapi::v3::License::MergeFrom(from._internal_license());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Info::CopyFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {
  return true;
}

void Info::InternalSwap(Info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, GetArenaForAllocation(),
      &other->title_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &terms_of_service_, GetArenaForAllocation(),
      &other->terms_of_service_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &summary_, GetArenaForAllocation(),
      &other->summary_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Info, license_)
      + sizeof(Info::license_)
      - PROTOBUF_FIELD_OFFSET(Info, contact_)>(
          reinterpret_cast<char*>(&contact_),
          reinterpret_cast<char*>(&other->contact_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[21]);
}

// ===================================================================

class ItemsItem::_Internal {
 public:
};

ItemsItem::ItemsItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  schema_or_reference_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.ItemsItem)
}
ItemsItem::ItemsItem(const ItemsItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      schema_or_reference_(from.schema_or_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.ItemsItem)
}

inline void ItemsItem::SharedCtor() {
}

ItemsItem::~ItemsItem() {
  // @@protoc_insertion_point(destructor:openapi.v3.ItemsItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemsItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemsItem::ArenaDtor(void* object) {
  ItemsItem* _this = reinterpret_cast< ItemsItem* >(object);
  (void)_this;
}
void ItemsItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemsItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemsItem::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.ItemsItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schema_or_reference_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemsItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.SchemaOrReference schema_or_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schema_or_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemsItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.ItemsItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.SchemaOrReference schema_or_reference = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_schema_or_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_schema_or_reference(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.ItemsItem)
  return target;
}

size_t ItemsItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.ItemsItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.SchemaOrReference schema_or_reference = 1;
  total_size += 1UL * this->_internal_schema_or_reference_size();
  for (const auto& msg : this->schema_or_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemsItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemsItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemsItem::GetClassData() const { return &_class_data_; }

void ItemsItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ItemsItem *>(to)->MergeFrom(
      static_cast<const ItemsItem &>(from));
}


void ItemsItem::MergeFrom(const ItemsItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.ItemsItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schema_or_reference_.MergeFrom(from.schema_or_reference_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemsItem::CopyFrom(const ItemsItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.ItemsItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemsItem::IsInitialized() const {
  return true;
}

void ItemsItem::InternalSwap(ItemsItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  schema_or_reference_.InternalSwap(&other->schema_or_reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemsItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[22]);
}

// ===================================================================

class License::_Internal {
 public:
};

License::License(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.License)
}
License::License(const License& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.License)
}

inline void License::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

License::~License() {
  // @@protoc_insertion_point(destructor:openapi.v3.License)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void License::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void License::ArenaDtor(void* object) {
  License* _this = reinterpret_cast< License* >(object);
  (void)_this;
}
void License::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void License::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void License::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.License)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  name_.ClearToEmpty();
  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* License::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.License.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.License.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* License::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.License)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.License.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.License.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.License)
  return target;
}

size_t License::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.License)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 3;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData License::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    License::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*License::GetClassData() const { return &_class_data_; }

void License::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<License *>(to)->MergeFrom(
      static_cast<const License &>(from));
}


void License::MergeFrom(const License& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.License)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void License::CopyFrom(const License& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool License::IsInitialized() const {
  return true;
}

void License::InternalSwap(License* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, GetArenaForAllocation(),
      &other->url_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata License::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[23]);
}

// ===================================================================

class Link::_Internal {
 public:
  static const ::openapi::v3::AnyOrExpression& parameters(const Link* msg);
  static const ::openapi::v3::AnyOrExpression& request_body(const Link* msg);
  static const ::openapi::v3::Server& server(const Link* msg);
};

const ::openapi::v3::AnyOrExpression&
Link::_Internal::parameters(const Link* msg) {
  return *msg->parameters_;
}
const ::openapi::v3::AnyOrExpression&
Link::_Internal::request_body(const Link* msg) {
  return *msg->request_body_;
}
const ::openapi::v3::Server&
Link::_Internal::server(const Link* msg) {
  return *msg->server_;
}
Link::Link(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Link)
}
Link::Link(const Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  operation_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operation_ref().empty()) {
    operation_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operation_ref(), 
      GetArenaForAllocation());
  }
  operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operation_id().empty()) {
    operation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operation_id(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parameters()) {
    parameters_ = new ::openapi::v3::AnyOrExpression(*from.parameters_);
  } else {
    parameters_ = nullptr;
  }
  if (from._internal_has_request_body()) {
    request_body_ = new ::openapi::v3::AnyOrExpression(*from.request_body_);
  } else {
    request_body_ = nullptr;
  }
  if (from._internal_has_server()) {
    server_ = new ::openapi::v3::Server(*from.server_);
  } else {
    server_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Link)
}

inline void Link::SharedCtor() {
operation_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parameters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_) -
    reinterpret_cast<char*>(&parameters_)) + sizeof(server_));
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:openapi.v3.Link)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Link::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  operation_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parameters_;
  if (this != internal_default_instance()) delete request_body_;
  if (this != internal_default_instance()) delete server_;
}

void Link::ArenaDtor(void* object) {
  Link* _this = reinterpret_cast< Link* >(object);
  (void)_this;
}
void Link::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Link::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  operation_ref_.ClearToEmpty();
  operation_id_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && request_body_ != nullptr) {
    delete request_body_;
  }
  request_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Link::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string operation_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_operation_ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Link.operation_ref"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operation_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_operation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Link.operation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.AnyOrExpression parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.AnyOrExpression request_body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Link.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Server server = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Link::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation_ref = 1;
  if (!this->_internal_operation_ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_ref().data(), static_cast<int>(this->_internal_operation_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Link.operation_ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_operation_ref(), target);
  }

  // string operation_id = 2;
  if (!this->_internal_operation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_id().data(), static_cast<int>(this->_internal_operation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Link.operation_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operation_id(), target);
  }

  // .openapi.v3.AnyOrExpression parameters = 3;
  if (this->_internal_has_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::parameters(this), target, stream);
  }

  // .openapi.v3.AnyOrExpression request_body = 4;
  if (this->_internal_has_request_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::request_body(this), target, stream);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Link.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // .openapi.v3.Server server = 6;
  if (this->_internal_has_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::server(this), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Link)
  return target;
}

size_t Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Link)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 7;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string operation_ref = 1;
  if (!this->_internal_operation_ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_ref());
  }

  // string operation_id = 2;
  if (!this->_internal_operation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_id());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .openapi.v3.AnyOrExpression parameters = 3;
  if (this->_internal_has_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  // .openapi.v3.AnyOrExpression request_body = 4;
  if (this->_internal_has_request_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_body_);
  }

  // .openapi.v3.Server server = 6;
  if (this->_internal_has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Link::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Link::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Link::GetClassData() const { return &_class_data_; }

void Link::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Link *>(to)->MergeFrom(
      static_cast<const Link &>(from));
}


void Link::MergeFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Link)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_operation_ref().empty()) {
    _internal_set_operation_ref(from._internal_operation_ref());
  }
  if (!from._internal_operation_id().empty()) {
    _internal_set_operation_id(from._internal_operation_id());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_parameters()) {
    _internal_mutable_parameters()->::openapi::v3::AnyOrExpression::MergeFrom(from._internal_parameters());
  }
  if (from._internal_has_request_body()) {
    _internal_mutable_request_body()->::openapi::v3::AnyOrExpression::MergeFrom(from._internal_request_body());
  }
  if (from._internal_has_server()) {
    _internal_mutable_server()->::openapi::v3::Server::MergeFrom(from._internal_server());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Link::CopyFrom(const Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {
  return true;
}

void Link::InternalSwap(Link* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operation_ref_, GetArenaForAllocation(),
      &other->operation_ref_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operation_id_, GetArenaForAllocation(),
      &other->operation_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Link, server_)
      + sizeof(Link::server_)
      - PROTOBUF_FIELD_OFFSET(Link, parameters_)>(
          reinterpret_cast<char*>(&parameters_),
          reinterpret_cast<char*>(&other->parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Link::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[24]);
}

// ===================================================================

class LinkOrReference::_Internal {
 public:
  static const ::openapi::v3::Link& link(const LinkOrReference* msg);
  static const ::openapi::v3::Reference& reference(const LinkOrReference* msg);
};

const ::openapi::v3::Link&
LinkOrReference::_Internal::link(const LinkOrReference* msg) {
  return *msg->oneof_.link_;
}
const ::openapi::v3::Reference&
LinkOrReference::_Internal::reference(const LinkOrReference* msg) {
  return *msg->oneof_.reference_;
}
void LinkOrReference::set_allocated_link(::openapi::v3::Link* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Link>::GetOwningArena(link);
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    set_has_link();
    oneof_.link_ = link;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.LinkOrReference.link)
}
void LinkOrReference::set_allocated_reference(::openapi::v3::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Reference>::GetOwningArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    set_has_reference();
    oneof_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.LinkOrReference.reference)
}
LinkOrReference::LinkOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.LinkOrReference)
}
LinkOrReference::LinkOrReference(const LinkOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof();
  switch (from.oneof_case()) {
    case kLink: {
      _internal_mutable_link()->::openapi::v3::Link::MergeFrom(from._internal_link());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.LinkOrReference)
}

inline void LinkOrReference::SharedCtor() {
clear_has_oneof();
}

LinkOrReference::~LinkOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.LinkOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LinkOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof()) {
    clear_oneof();
  }
}

void LinkOrReference::ArenaDtor(void* object) {
  LinkOrReference* _this = reinterpret_cast< LinkOrReference* >(object);
  (void)_this;
}
void LinkOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinkOrReference::clear_oneof() {
// @@protoc_insertion_point(one_of_clear_start:openapi.v3.LinkOrReference)
  switch (oneof_case()) {
    case kLink: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.link_;
      }
      break;
    }
    case kReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.reference_;
      }
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void LinkOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.LinkOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.Link link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Reference reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.LinkOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.Link link = 1;
  if (_internal_has_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::link(this), target, stream);
  }

  // .openapi.v3.Reference reference = 2;
  if (_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.LinkOrReference)
  return target;
}

size_t LinkOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.LinkOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_case()) {
    // .openapi.v3.Link link = 1;
    case kLink: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.link_);
      break;
    }
    // .openapi.v3.Reference reference = 2;
    case kReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.reference_);
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LinkOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkOrReference::GetClassData() const { return &_class_data_; }

void LinkOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LinkOrReference *>(to)->MergeFrom(
      static_cast<const LinkOrReference &>(from));
}


void LinkOrReference::MergeFrom(const LinkOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.LinkOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_case()) {
    case kLink: {
      _internal_mutable_link()->::openapi::v3::Link::MergeFrom(from._internal_link());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinkOrReference::CopyFrom(const LinkOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.LinkOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkOrReference::IsInitialized() const {
  return true;
}

void LinkOrReference::InternalSwap(LinkOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_, other->oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[25]);
}

// ===================================================================

class LinksOrReferences::_Internal {
 public:
};

LinksOrReferences::LinksOrReferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.LinksOrReferences)
}
LinksOrReferences::LinksOrReferences(const LinksOrReferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.LinksOrReferences)
}

inline void LinksOrReferences::SharedCtor() {
}

LinksOrReferences::~LinksOrReferences() {
  // @@protoc_insertion_point(destructor:openapi.v3.LinksOrReferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LinksOrReferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LinksOrReferences::ArenaDtor(void* object) {
  LinksOrReferences* _this = reinterpret_cast< LinksOrReferences* >(object);
  (void)_this;
}
void LinksOrReferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinksOrReferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinksOrReferences::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.LinksOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinksOrReferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedLinkOrReference additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinksOrReferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.LinksOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedLinkOrReference additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.LinksOrReferences)
  return target;
}

size_t LinksOrReferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.LinksOrReferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedLinkOrReference additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinksOrReferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LinksOrReferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinksOrReferences::GetClassData() const { return &_class_data_; }

void LinksOrReferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LinksOrReferences *>(to)->MergeFrom(
      static_cast<const LinksOrReferences &>(from));
}


void LinksOrReferences::MergeFrom(const LinksOrReferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.LinksOrReferences)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinksOrReferences::CopyFrom(const LinksOrReferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.LinksOrReferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinksOrReferences::IsInitialized() const {
  return true;
}

void LinksOrReferences::InternalSwap(LinksOrReferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinksOrReferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[26]);
}

// ===================================================================

class MediaType::_Internal {
 public:
  static const ::openapi::v3::SchemaOrReference& schema(const MediaType* msg);
  static const ::openapi::v3::Any& example(const MediaType* msg);
  static const ::openapi::v3::ExamplesOrReferences& examples(const MediaType* msg);
  static const ::openapi::v3::Encodings& encoding(const MediaType* msg);
};

const ::openapi::v3::SchemaOrReference&
MediaType::_Internal::schema(const MediaType* msg) {
  return *msg->schema_;
}
const ::openapi::v3::Any&
MediaType::_Internal::example(const MediaType* msg) {
  return *msg->example_;
}
const ::openapi::v3::ExamplesOrReferences&
MediaType::_Internal::examples(const MediaType* msg) {
  return *msg->examples_;
}
const ::openapi::v3::Encodings&
MediaType::_Internal::encoding(const MediaType* msg) {
  return *msg->encoding_;
}
MediaType::MediaType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.MediaType)
}
MediaType::MediaType(const MediaType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_schema()) {
    schema_ = new ::openapi::v3::SchemaOrReference(*from.schema_);
  } else {
    schema_ = nullptr;
  }
  if (from._internal_has_example()) {
    example_ = new ::openapi::v3::Any(*from.example_);
  } else {
    example_ = nullptr;
  }
  if (from._internal_has_examples()) {
    examples_ = new ::openapi::v3::ExamplesOrReferences(*from.examples_);
  } else {
    examples_ = nullptr;
  }
  if (from._internal_has_encoding()) {
    encoding_ = new ::openapi::v3::Encodings(*from.encoding_);
  } else {
    encoding_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.MediaType)
}

inline void MediaType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&schema_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&schema_)) + sizeof(encoding_));
}

MediaType::~MediaType() {
  // @@protoc_insertion_point(destructor:openapi.v3.MediaType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MediaType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete schema_;
  if (this != internal_default_instance()) delete example_;
  if (this != internal_default_instance()) delete examples_;
  if (this != internal_default_instance()) delete encoding_;
}

void MediaType::ArenaDtor(void* object) {
  MediaType* _this = reinterpret_cast< MediaType* >(object);
  (void)_this;
}
void MediaType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaType::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.MediaType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  if (GetArenaForAllocation() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
  if (GetArenaForAllocation() == nullptr && example_ != nullptr) {
    delete example_;
  }
  example_ = nullptr;
  if (GetArenaForAllocation() == nullptr && examples_ != nullptr) {
    delete examples_;
  }
  examples_ = nullptr;
  if (GetArenaForAllocation() == nullptr && encoding_ != nullptr) {
    delete encoding_;
  }
  encoding_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.SchemaOrReference schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Any example = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_example(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ExamplesOrReferences examples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_examples(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Encodings encoding = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_encoding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.MediaType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.SchemaOrReference schema = 1;
  if (this->_internal_has_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::schema(this), target, stream);
  }

  // .openapi.v3.Any example = 2;
  if (this->_internal_has_example()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::example(this), target, stream);
  }

  // .openapi.v3.ExamplesOrReferences examples = 3;
  if (this->_internal_has_examples()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::examples(this), target, stream);
  }

  // .openapi.v3.Encodings encoding = 4;
  if (this->_internal_has_encoding()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::encoding(this), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.MediaType)
  return target;
}

size_t MediaType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.MediaType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 5;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .openapi.v3.SchemaOrReference schema = 1;
  if (this->_internal_has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schema_);
  }

  // .openapi.v3.Any example = 2;
  if (this->_internal_has_example()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *example_);
  }

  // .openapi.v3.ExamplesOrReferences examples = 3;
  if (this->_internal_has_examples()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *examples_);
  }

  // .openapi.v3.Encodings encoding = 4;
  if (this->_internal_has_encoding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encoding_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MediaType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaType::GetClassData() const { return &_class_data_; }

void MediaType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MediaType *>(to)->MergeFrom(
      static_cast<const MediaType &>(from));
}


void MediaType::MergeFrom(const MediaType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.MediaType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (from._internal_has_schema()) {
    _internal_mutable_schema()->::openapi::v3::SchemaOrReference::MergeFrom(from._internal_schema());
  }
  if (from._internal_has_example()) {
    _internal_mutable_example()->::openapi::v3::Any::MergeFrom(from._internal_example());
  }
  if (from._internal_has_examples()) {
    _internal_mutable_examples()->::openapi::v3::ExamplesOrReferences::MergeFrom(from._internal_examples());
  }
  if (from._internal_has_encoding()) {
    _internal_mutable_encoding()->::openapi::v3::Encodings::MergeFrom(from._internal_encoding());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaType::CopyFrom(const MediaType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.MediaType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaType::IsInitialized() const {
  return true;
}

void MediaType::InternalSwap(MediaType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MediaType, encoding_)
      + sizeof(MediaType::encoding_)
      - PROTOBUF_FIELD_OFFSET(MediaType, schema_)>(
          reinterpret_cast<char*>(&schema_),
          reinterpret_cast<char*>(&other->schema_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[27]);
}

// ===================================================================

class MediaTypes::_Internal {
 public:
};

MediaTypes::MediaTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.MediaTypes)
}
MediaTypes::MediaTypes(const MediaTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.MediaTypes)
}

inline void MediaTypes::SharedCtor() {
}

MediaTypes::~MediaTypes() {
  // @@protoc_insertion_point(destructor:openapi.v3.MediaTypes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MediaTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MediaTypes::ArenaDtor(void* object) {
  MediaTypes* _this = reinterpret_cast< MediaTypes* >(object);
  (void)_this;
}
void MediaTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MediaTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.MediaTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MediaTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedMediaType additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.MediaTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedMediaType additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.MediaTypes)
  return target;
}

size_t MediaTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.MediaTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedMediaType additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MediaTypes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MediaTypes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MediaTypes::GetClassData() const { return &_class_data_; }

void MediaTypes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MediaTypes *>(to)->MergeFrom(
      static_cast<const MediaTypes &>(from));
}


void MediaTypes::MergeFrom(const MediaTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.MediaTypes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MediaTypes::CopyFrom(const MediaTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.MediaTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaTypes::IsInitialized() const {
  return true;
}

void MediaTypes::InternalSwap(MediaTypes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaTypes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[28]);
}

// ===================================================================

class NamedAny::_Internal {
 public:
  static const ::openapi::v3::Any& value(const NamedAny* msg);
};

const ::openapi::v3::Any&
NamedAny::_Internal::value(const NamedAny* msg) {
  return *msg->value_;
}
NamedAny::NamedAny(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedAny)
}
NamedAny::NamedAny(const NamedAny& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::Any(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedAny)
}

inline void NamedAny::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedAny::~NamedAny() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedAny)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedAny::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedAny::ArenaDtor(void* object) {
  NamedAny* _this = reinterpret_cast< NamedAny* >(object);
  (void)_this;
}
void NamedAny::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedAny::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedAny::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedAny)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedAny::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedAny.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedAny::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedAny)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedAny.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.Any value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedAny)
  return target;
}

size_t NamedAny::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedAny)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.Any value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedAny::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedAny::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedAny::GetClassData() const { return &_class_data_; }

void NamedAny::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedAny *>(to)->MergeFrom(
      static_cast<const NamedAny &>(from));
}


void NamedAny::MergeFrom(const NamedAny& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedAny)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::Any::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedAny::CopyFrom(const NamedAny& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedAny)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedAny::IsInitialized() const {
  return true;
}

void NamedAny::InternalSwap(NamedAny* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedAny::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[29]);
}

// ===================================================================

class NamedCallbackOrReference::_Internal {
 public:
  static const ::openapi::v3::CallbackOrReference& value(const NamedCallbackOrReference* msg);
};

const ::openapi::v3::CallbackOrReference&
NamedCallbackOrReference::_Internal::value(const NamedCallbackOrReference* msg) {
  return *msg->value_;
}
NamedCallbackOrReference::NamedCallbackOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedCallbackOrReference)
}
NamedCallbackOrReference::NamedCallbackOrReference(const NamedCallbackOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::CallbackOrReference(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedCallbackOrReference)
}

inline void NamedCallbackOrReference::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedCallbackOrReference::~NamedCallbackOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedCallbackOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedCallbackOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedCallbackOrReference::ArenaDtor(void* object) {
  NamedCallbackOrReference* _this = reinterpret_cast< NamedCallbackOrReference* >(object);
  (void)_this;
}
void NamedCallbackOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedCallbackOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedCallbackOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedCallbackOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedCallbackOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedCallbackOrReference.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.CallbackOrReference value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedCallbackOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedCallbackOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedCallbackOrReference.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.CallbackOrReference value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedCallbackOrReference)
  return target;
}

size_t NamedCallbackOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedCallbackOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.CallbackOrReference value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedCallbackOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedCallbackOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedCallbackOrReference::GetClassData() const { return &_class_data_; }

void NamedCallbackOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedCallbackOrReference *>(to)->MergeFrom(
      static_cast<const NamedCallbackOrReference &>(from));
}


void NamedCallbackOrReference::MergeFrom(const NamedCallbackOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedCallbackOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::CallbackOrReference::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedCallbackOrReference::CopyFrom(const NamedCallbackOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedCallbackOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedCallbackOrReference::IsInitialized() const {
  return true;
}

void NamedCallbackOrReference::InternalSwap(NamedCallbackOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedCallbackOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[30]);
}

// ===================================================================

class NamedEncoding::_Internal {
 public:
  static const ::openapi::v3::Encoding& value(const NamedEncoding* msg);
};

const ::openapi::v3::Encoding&
NamedEncoding::_Internal::value(const NamedEncoding* msg) {
  return *msg->value_;
}
NamedEncoding::NamedEncoding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedEncoding)
}
NamedEncoding::NamedEncoding(const NamedEncoding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::Encoding(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedEncoding)
}

inline void NamedEncoding::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedEncoding::~NamedEncoding() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedEncoding)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedEncoding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedEncoding::ArenaDtor(void* object) {
  NamedEncoding* _this = reinterpret_cast< NamedEncoding* >(object);
  (void)_this;
}
void NamedEncoding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedEncoding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedEncoding::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedEncoding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedEncoding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedEncoding.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Encoding value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedEncoding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedEncoding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedEncoding.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.Encoding value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedEncoding)
  return target;
}

size_t NamedEncoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedEncoding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.Encoding value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedEncoding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedEncoding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedEncoding::GetClassData() const { return &_class_data_; }

void NamedEncoding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedEncoding *>(to)->MergeFrom(
      static_cast<const NamedEncoding &>(from));
}


void NamedEncoding::MergeFrom(const NamedEncoding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedEncoding)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::Encoding::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedEncoding::CopyFrom(const NamedEncoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedEncoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedEncoding::IsInitialized() const {
  return true;
}

void NamedEncoding::InternalSwap(NamedEncoding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedEncoding::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[31]);
}

// ===================================================================

class NamedExampleOrReference::_Internal {
 public:
  static const ::openapi::v3::ExampleOrReference& value(const NamedExampleOrReference* msg);
};

const ::openapi::v3::ExampleOrReference&
NamedExampleOrReference::_Internal::value(const NamedExampleOrReference* msg) {
  return *msg->value_;
}
NamedExampleOrReference::NamedExampleOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedExampleOrReference)
}
NamedExampleOrReference::NamedExampleOrReference(const NamedExampleOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::ExampleOrReference(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedExampleOrReference)
}

inline void NamedExampleOrReference::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedExampleOrReference::~NamedExampleOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedExampleOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedExampleOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedExampleOrReference::ArenaDtor(void* object) {
  NamedExampleOrReference* _this = reinterpret_cast< NamedExampleOrReference* >(object);
  (void)_this;
}
void NamedExampleOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedExampleOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedExampleOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedExampleOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedExampleOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedExampleOrReference.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ExampleOrReference value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedExampleOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedExampleOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedExampleOrReference.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.ExampleOrReference value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedExampleOrReference)
  return target;
}

size_t NamedExampleOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedExampleOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.ExampleOrReference value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedExampleOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedExampleOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedExampleOrReference::GetClassData() const { return &_class_data_; }

void NamedExampleOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedExampleOrReference *>(to)->MergeFrom(
      static_cast<const NamedExampleOrReference &>(from));
}


void NamedExampleOrReference::MergeFrom(const NamedExampleOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedExampleOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::ExampleOrReference::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedExampleOrReference::CopyFrom(const NamedExampleOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedExampleOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedExampleOrReference::IsInitialized() const {
  return true;
}

void NamedExampleOrReference::InternalSwap(NamedExampleOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedExampleOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[32]);
}

// ===================================================================

class NamedHeaderOrReference::_Internal {
 public:
  static const ::openapi::v3::HeaderOrReference& value(const NamedHeaderOrReference* msg);
};

const ::openapi::v3::HeaderOrReference&
NamedHeaderOrReference::_Internal::value(const NamedHeaderOrReference* msg) {
  return *msg->value_;
}
NamedHeaderOrReference::NamedHeaderOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedHeaderOrReference)
}
NamedHeaderOrReference::NamedHeaderOrReference(const NamedHeaderOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::HeaderOrReference(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedHeaderOrReference)
}

inline void NamedHeaderOrReference::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedHeaderOrReference::~NamedHeaderOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedHeaderOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedHeaderOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedHeaderOrReference::ArenaDtor(void* object) {
  NamedHeaderOrReference* _this = reinterpret_cast< NamedHeaderOrReference* >(object);
  (void)_this;
}
void NamedHeaderOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedHeaderOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedHeaderOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedHeaderOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedHeaderOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedHeaderOrReference.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.HeaderOrReference value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedHeaderOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedHeaderOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedHeaderOrReference.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.HeaderOrReference value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedHeaderOrReference)
  return target;
}

size_t NamedHeaderOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedHeaderOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.HeaderOrReference value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedHeaderOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedHeaderOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedHeaderOrReference::GetClassData() const { return &_class_data_; }

void NamedHeaderOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedHeaderOrReference *>(to)->MergeFrom(
      static_cast<const NamedHeaderOrReference &>(from));
}


void NamedHeaderOrReference::MergeFrom(const NamedHeaderOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedHeaderOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::HeaderOrReference::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedHeaderOrReference::CopyFrom(const NamedHeaderOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedHeaderOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedHeaderOrReference::IsInitialized() const {
  return true;
}

void NamedHeaderOrReference::InternalSwap(NamedHeaderOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedHeaderOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[33]);
}

// ===================================================================

class NamedLinkOrReference::_Internal {
 public:
  static const ::openapi::v3::LinkOrReference& value(const NamedLinkOrReference* msg);
};

const ::openapi::v3::LinkOrReference&
NamedLinkOrReference::_Internal::value(const NamedLinkOrReference* msg) {
  return *msg->value_;
}
NamedLinkOrReference::NamedLinkOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedLinkOrReference)
}
NamedLinkOrReference::NamedLinkOrReference(const NamedLinkOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::LinkOrReference(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedLinkOrReference)
}

inline void NamedLinkOrReference::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedLinkOrReference::~NamedLinkOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedLinkOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedLinkOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedLinkOrReference::ArenaDtor(void* object) {
  NamedLinkOrReference* _this = reinterpret_cast< NamedLinkOrReference* >(object);
  (void)_this;
}
void NamedLinkOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedLinkOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedLinkOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedLinkOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedLinkOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedLinkOrReference.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.LinkOrReference value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedLinkOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedLinkOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedLinkOrReference.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.LinkOrReference value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedLinkOrReference)
  return target;
}

size_t NamedLinkOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedLinkOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.LinkOrReference value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedLinkOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedLinkOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedLinkOrReference::GetClassData() const { return &_class_data_; }

void NamedLinkOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedLinkOrReference *>(to)->MergeFrom(
      static_cast<const NamedLinkOrReference &>(from));
}


void NamedLinkOrReference::MergeFrom(const NamedLinkOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedLinkOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::LinkOrReference::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedLinkOrReference::CopyFrom(const NamedLinkOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedLinkOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedLinkOrReference::IsInitialized() const {
  return true;
}

void NamedLinkOrReference::InternalSwap(NamedLinkOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedLinkOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[34]);
}

// ===================================================================

class NamedMediaType::_Internal {
 public:
  static const ::openapi::v3::MediaType& value(const NamedMediaType* msg);
};

const ::openapi::v3::MediaType&
NamedMediaType::_Internal::value(const NamedMediaType* msg) {
  return *msg->value_;
}
NamedMediaType::NamedMediaType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedMediaType)
}
NamedMediaType::NamedMediaType(const NamedMediaType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::MediaType(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedMediaType)
}

inline void NamedMediaType::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedMediaType::~NamedMediaType() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedMediaType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedMediaType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedMediaType::ArenaDtor(void* object) {
  NamedMediaType* _this = reinterpret_cast< NamedMediaType* >(object);
  (void)_this;
}
void NamedMediaType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedMediaType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedMediaType::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedMediaType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedMediaType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedMediaType.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.MediaType value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedMediaType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedMediaType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedMediaType.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.MediaType value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedMediaType)
  return target;
}

size_t NamedMediaType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedMediaType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.MediaType value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedMediaType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedMediaType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedMediaType::GetClassData() const { return &_class_data_; }

void NamedMediaType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedMediaType *>(to)->MergeFrom(
      static_cast<const NamedMediaType &>(from));
}


void NamedMediaType::MergeFrom(const NamedMediaType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedMediaType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::MediaType::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedMediaType::CopyFrom(const NamedMediaType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedMediaType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedMediaType::IsInitialized() const {
  return true;
}

void NamedMediaType::InternalSwap(NamedMediaType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedMediaType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[35]);
}

// ===================================================================

class NamedParameterOrReference::_Internal {
 public:
  static const ::openapi::v3::ParameterOrReference& value(const NamedParameterOrReference* msg);
};

const ::openapi::v3::ParameterOrReference&
NamedParameterOrReference::_Internal::value(const NamedParameterOrReference* msg) {
  return *msg->value_;
}
NamedParameterOrReference::NamedParameterOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedParameterOrReference)
}
NamedParameterOrReference::NamedParameterOrReference(const NamedParameterOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::ParameterOrReference(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedParameterOrReference)
}

inline void NamedParameterOrReference::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedParameterOrReference::~NamedParameterOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedParameterOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedParameterOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedParameterOrReference::ArenaDtor(void* object) {
  NamedParameterOrReference* _this = reinterpret_cast< NamedParameterOrReference* >(object);
  (void)_this;
}
void NamedParameterOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedParameterOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedParameterOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedParameterOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedParameterOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedParameterOrReference.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ParameterOrReference value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedParameterOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedParameterOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedParameterOrReference.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.ParameterOrReference value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedParameterOrReference)
  return target;
}

size_t NamedParameterOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedParameterOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.ParameterOrReference value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedParameterOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedParameterOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedParameterOrReference::GetClassData() const { return &_class_data_; }

void NamedParameterOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedParameterOrReference *>(to)->MergeFrom(
      static_cast<const NamedParameterOrReference &>(from));
}


void NamedParameterOrReference::MergeFrom(const NamedParameterOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedParameterOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::ParameterOrReference::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedParameterOrReference::CopyFrom(const NamedParameterOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedParameterOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedParameterOrReference::IsInitialized() const {
  return true;
}

void NamedParameterOrReference::InternalSwap(NamedParameterOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedParameterOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[36]);
}

// ===================================================================

class NamedPathItem::_Internal {
 public:
  static const ::openapi::v3::PathItem& value(const NamedPathItem* msg);
};

const ::openapi::v3::PathItem&
NamedPathItem::_Internal::value(const NamedPathItem* msg) {
  return *msg->value_;
}
NamedPathItem::NamedPathItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedPathItem)
}
NamedPathItem::NamedPathItem(const NamedPathItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::PathItem(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedPathItem)
}

inline void NamedPathItem::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedPathItem::~NamedPathItem() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedPathItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedPathItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedPathItem::ArenaDtor(void* object) {
  NamedPathItem* _this = reinterpret_cast< NamedPathItem* >(object);
  (void)_this;
}
void NamedPathItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedPathItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedPathItem::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedPathItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedPathItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedPathItem.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.PathItem value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedPathItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedPathItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedPathItem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.PathItem value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedPathItem)
  return target;
}

size_t NamedPathItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedPathItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.PathItem value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedPathItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedPathItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedPathItem::GetClassData() const { return &_class_data_; }

void NamedPathItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedPathItem *>(to)->MergeFrom(
      static_cast<const NamedPathItem &>(from));
}


void NamedPathItem::MergeFrom(const NamedPathItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedPathItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::PathItem::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedPathItem::CopyFrom(const NamedPathItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedPathItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedPathItem::IsInitialized() const {
  return true;
}

void NamedPathItem::InternalSwap(NamedPathItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedPathItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[37]);
}

// ===================================================================

class NamedRequestBodyOrReference::_Internal {
 public:
  static const ::openapi::v3::RequestBodyOrReference& value(const NamedRequestBodyOrReference* msg);
};

const ::openapi::v3::RequestBodyOrReference&
NamedRequestBodyOrReference::_Internal::value(const NamedRequestBodyOrReference* msg) {
  return *msg->value_;
}
NamedRequestBodyOrReference::NamedRequestBodyOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedRequestBodyOrReference)
}
NamedRequestBodyOrReference::NamedRequestBodyOrReference(const NamedRequestBodyOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::RequestBodyOrReference(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedRequestBodyOrReference)
}

inline void NamedRequestBodyOrReference::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedRequestBodyOrReference::~NamedRequestBodyOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedRequestBodyOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedRequestBodyOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedRequestBodyOrReference::ArenaDtor(void* object) {
  NamedRequestBodyOrReference* _this = reinterpret_cast< NamedRequestBodyOrReference* >(object);
  (void)_this;
}
void NamedRequestBodyOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedRequestBodyOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedRequestBodyOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedRequestBodyOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedRequestBodyOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedRequestBodyOrReference.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.RequestBodyOrReference value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedRequestBodyOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedRequestBodyOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedRequestBodyOrReference.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.RequestBodyOrReference value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedRequestBodyOrReference)
  return target;
}

size_t NamedRequestBodyOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedRequestBodyOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.RequestBodyOrReference value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedRequestBodyOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedRequestBodyOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedRequestBodyOrReference::GetClassData() const { return &_class_data_; }

void NamedRequestBodyOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedRequestBodyOrReference *>(to)->MergeFrom(
      static_cast<const NamedRequestBodyOrReference &>(from));
}


void NamedRequestBodyOrReference::MergeFrom(const NamedRequestBodyOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedRequestBodyOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::RequestBodyOrReference::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedRequestBodyOrReference::CopyFrom(const NamedRequestBodyOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedRequestBodyOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedRequestBodyOrReference::IsInitialized() const {
  return true;
}

void NamedRequestBodyOrReference::InternalSwap(NamedRequestBodyOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedRequestBodyOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[38]);
}

// ===================================================================

class NamedResponseOrReference::_Internal {
 public:
  static const ::openapi::v3::ResponseOrReference& value(const NamedResponseOrReference* msg);
};

const ::openapi::v3::ResponseOrReference&
NamedResponseOrReference::_Internal::value(const NamedResponseOrReference* msg) {
  return *msg->value_;
}
NamedResponseOrReference::NamedResponseOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedResponseOrReference)
}
NamedResponseOrReference::NamedResponseOrReference(const NamedResponseOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::ResponseOrReference(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedResponseOrReference)
}

inline void NamedResponseOrReference::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedResponseOrReference::~NamedResponseOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedResponseOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedResponseOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedResponseOrReference::ArenaDtor(void* object) {
  NamedResponseOrReference* _this = reinterpret_cast< NamedResponseOrReference* >(object);
  (void)_this;
}
void NamedResponseOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedResponseOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedResponseOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedResponseOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedResponseOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedResponseOrReference.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ResponseOrReference value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedResponseOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedResponseOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedResponseOrReference.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.ResponseOrReference value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedResponseOrReference)
  return target;
}

size_t NamedResponseOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedResponseOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.ResponseOrReference value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedResponseOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedResponseOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedResponseOrReference::GetClassData() const { return &_class_data_; }

void NamedResponseOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedResponseOrReference *>(to)->MergeFrom(
      static_cast<const NamedResponseOrReference &>(from));
}


void NamedResponseOrReference::MergeFrom(const NamedResponseOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedResponseOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::ResponseOrReference::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedResponseOrReference::CopyFrom(const NamedResponseOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedResponseOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedResponseOrReference::IsInitialized() const {
  return true;
}

void NamedResponseOrReference::InternalSwap(NamedResponseOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedResponseOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[39]);
}

// ===================================================================

class NamedSchemaOrReference::_Internal {
 public:
  static const ::openapi::v3::SchemaOrReference& value(const NamedSchemaOrReference* msg);
};

const ::openapi::v3::SchemaOrReference&
NamedSchemaOrReference::_Internal::value(const NamedSchemaOrReference* msg) {
  return *msg->value_;
}
NamedSchemaOrReference::NamedSchemaOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedSchemaOrReference)
}
NamedSchemaOrReference::NamedSchemaOrReference(const NamedSchemaOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::SchemaOrReference(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedSchemaOrReference)
}

inline void NamedSchemaOrReference::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedSchemaOrReference::~NamedSchemaOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedSchemaOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedSchemaOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedSchemaOrReference::ArenaDtor(void* object) {
  NamedSchemaOrReference* _this = reinterpret_cast< NamedSchemaOrReference* >(object);
  (void)_this;
}
void NamedSchemaOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedSchemaOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedSchemaOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedSchemaOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedSchemaOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedSchemaOrReference.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.SchemaOrReference value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedSchemaOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedSchemaOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedSchemaOrReference.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.SchemaOrReference value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedSchemaOrReference)
  return target;
}

size_t NamedSchemaOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedSchemaOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.SchemaOrReference value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedSchemaOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedSchemaOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedSchemaOrReference::GetClassData() const { return &_class_data_; }

void NamedSchemaOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedSchemaOrReference *>(to)->MergeFrom(
      static_cast<const NamedSchemaOrReference &>(from));
}


void NamedSchemaOrReference::MergeFrom(const NamedSchemaOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedSchemaOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::SchemaOrReference::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedSchemaOrReference::CopyFrom(const NamedSchemaOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedSchemaOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedSchemaOrReference::IsInitialized() const {
  return true;
}

void NamedSchemaOrReference::InternalSwap(NamedSchemaOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedSchemaOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[40]);
}

// ===================================================================

class NamedSecuritySchemeOrReference::_Internal {
 public:
  static const ::openapi::v3::SecuritySchemeOrReference& value(const NamedSecuritySchemeOrReference* msg);
};

const ::openapi::v3::SecuritySchemeOrReference&
NamedSecuritySchemeOrReference::_Internal::value(const NamedSecuritySchemeOrReference* msg) {
  return *msg->value_;
}
NamedSecuritySchemeOrReference::NamedSecuritySchemeOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedSecuritySchemeOrReference)
}
NamedSecuritySchemeOrReference::NamedSecuritySchemeOrReference(const NamedSecuritySchemeOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::SecuritySchemeOrReference(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedSecuritySchemeOrReference)
}

inline void NamedSecuritySchemeOrReference::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedSecuritySchemeOrReference::~NamedSecuritySchemeOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedSecuritySchemeOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedSecuritySchemeOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedSecuritySchemeOrReference::ArenaDtor(void* object) {
  NamedSecuritySchemeOrReference* _this = reinterpret_cast< NamedSecuritySchemeOrReference* >(object);
  (void)_this;
}
void NamedSecuritySchemeOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedSecuritySchemeOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedSecuritySchemeOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedSecuritySchemeOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedSecuritySchemeOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedSecuritySchemeOrReference.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.SecuritySchemeOrReference value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedSecuritySchemeOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedSecuritySchemeOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedSecuritySchemeOrReference.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.SecuritySchemeOrReference value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedSecuritySchemeOrReference)
  return target;
}

size_t NamedSecuritySchemeOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedSecuritySchemeOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.SecuritySchemeOrReference value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedSecuritySchemeOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedSecuritySchemeOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedSecuritySchemeOrReference::GetClassData() const { return &_class_data_; }

void NamedSecuritySchemeOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedSecuritySchemeOrReference *>(to)->MergeFrom(
      static_cast<const NamedSecuritySchemeOrReference &>(from));
}


void NamedSecuritySchemeOrReference::MergeFrom(const NamedSecuritySchemeOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedSecuritySchemeOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::SecuritySchemeOrReference::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedSecuritySchemeOrReference::CopyFrom(const NamedSecuritySchemeOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedSecuritySchemeOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedSecuritySchemeOrReference::IsInitialized() const {
  return true;
}

void NamedSecuritySchemeOrReference::InternalSwap(NamedSecuritySchemeOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedSecuritySchemeOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[41]);
}

// ===================================================================

class NamedServerVariable::_Internal {
 public:
  static const ::openapi::v3::ServerVariable& value(const NamedServerVariable* msg);
};

const ::openapi::v3::ServerVariable&
NamedServerVariable::_Internal::value(const NamedServerVariable* msg) {
  return *msg->value_;
}
NamedServerVariable::NamedServerVariable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedServerVariable)
}
NamedServerVariable::NamedServerVariable(const NamedServerVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::ServerVariable(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedServerVariable)
}

inline void NamedServerVariable::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedServerVariable::~NamedServerVariable() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedServerVariable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedServerVariable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedServerVariable::ArenaDtor(void* object) {
  NamedServerVariable* _this = reinterpret_cast< NamedServerVariable* >(object);
  (void)_this;
}
void NamedServerVariable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedServerVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedServerVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedServerVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedServerVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedServerVariable.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ServerVariable value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedServerVariable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedServerVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedServerVariable.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.ServerVariable value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedServerVariable)
  return target;
}

size_t NamedServerVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedServerVariable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.ServerVariable value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedServerVariable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedServerVariable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedServerVariable::GetClassData() const { return &_class_data_; }

void NamedServerVariable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedServerVariable *>(to)->MergeFrom(
      static_cast<const NamedServerVariable &>(from));
}


void NamedServerVariable::MergeFrom(const NamedServerVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedServerVariable)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::ServerVariable::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedServerVariable::CopyFrom(const NamedServerVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedServerVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedServerVariable::IsInitialized() const {
  return true;
}

void NamedServerVariable::InternalSwap(NamedServerVariable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedServerVariable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[42]);
}

// ===================================================================

class NamedString::_Internal {
 public:
};

NamedString::NamedString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedString)
}
NamedString::NamedString(const NamedString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedString)
}

inline void NamedString::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NamedString::~NamedString() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedString)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NamedString::ArenaDtor(void* object) {
  NamedString* _this = reinterpret_cast< NamedString* >(object);
  (void)_this;
}
void NamedString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedString::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedString.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedString.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedString.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedString.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedString)
  return target;
}

size_t NamedString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedString::GetClassData() const { return &_class_data_; }

void NamedString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedString *>(to)->MergeFrom(
      static_cast<const NamedString &>(from));
}


void NamedString::MergeFrom(const NamedString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedString)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedString::CopyFrom(const NamedString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedString::IsInitialized() const {
  return true;
}

void NamedString::InternalSwap(NamedString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[43]);
}

// ===================================================================

class NamedStringArray::_Internal {
 public:
  static const ::openapi::v3::StringArray& value(const NamedStringArray* msg);
};

const ::openapi::v3::StringArray&
NamedStringArray::_Internal::value(const NamedStringArray* msg) {
  return *msg->value_;
}
NamedStringArray::NamedStringArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.NamedStringArray)
}
NamedStringArray::NamedStringArray(const NamedStringArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::openapi::v3::StringArray(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.NamedStringArray)
}

inline void NamedStringArray::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

NamedStringArray::~NamedStringArray() {
  // @@protoc_insertion_point(destructor:openapi.v3.NamedStringArray)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NamedStringArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void NamedStringArray::ArenaDtor(void* object) {
  NamedStringArray* _this = reinterpret_cast< NamedStringArray* >(object);
  (void)_this;
}
void NamedStringArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedStringArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedStringArray::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.NamedStringArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedStringArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.NamedStringArray.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.StringArray value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedStringArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.NamedStringArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.NamedStringArray.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .openapi.v3.StringArray value = 2;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.NamedStringArray)
  return target;
}

size_t NamedStringArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.NamedStringArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .openapi.v3.StringArray value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedStringArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NamedStringArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedStringArray::GetClassData() const { return &_class_data_; }

void NamedStringArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NamedStringArray *>(to)->MergeFrom(
      static_cast<const NamedStringArray &>(from));
}


void NamedStringArray::MergeFrom(const NamedStringArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.NamedStringArray)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::openapi::v3::StringArray::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedStringArray::CopyFrom(const NamedStringArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.NamedStringArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedStringArray::IsInitialized() const {
  return true;
}

void NamedStringArray::InternalSwap(NamedStringArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedStringArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[44]);
}

// ===================================================================

class OauthFlow::_Internal {
 public:
  static const ::openapi::v3::Strings& scopes(const OauthFlow* msg);
};

const ::openapi::v3::Strings&
OauthFlow::_Internal::scopes(const OauthFlow* msg) {
  return *msg->scopes_;
}
OauthFlow::OauthFlow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.OauthFlow)
}
OauthFlow::OauthFlow(const OauthFlow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  authorization_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authorization_url().empty()) {
    authorization_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_authorization_url(), 
      GetArenaForAllocation());
  }
  token_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_url().empty()) {
    token_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_url(), 
      GetArenaForAllocation());
  }
  refresh_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refresh_url().empty()) {
    refresh_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_refresh_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_scopes()) {
    scopes_ = new ::openapi::v3::Strings(*from.scopes_);
  } else {
    scopes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.OauthFlow)
}

inline void OauthFlow::SharedCtor() {
authorization_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
refresh_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scopes_ = nullptr;
}

OauthFlow::~OauthFlow() {
  // @@protoc_insertion_point(destructor:openapi.v3.OauthFlow)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OauthFlow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  authorization_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refresh_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scopes_;
}

void OauthFlow::ArenaDtor(void* object) {
  OauthFlow* _this = reinterpret_cast< OauthFlow* >(object);
  (void)_this;
}
void OauthFlow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OauthFlow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OauthFlow::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.OauthFlow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  authorization_url_.ClearToEmpty();
  token_url_.ClearToEmpty();
  refresh_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && scopes_ != nullptr) {
    delete scopes_;
  }
  scopes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OauthFlow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string authorization_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_authorization_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.OauthFlow.authorization_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.OauthFlow.token_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string refresh_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_refresh_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.OauthFlow.refresh_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Strings scopes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_scopes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OauthFlow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.OauthFlow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string authorization_url = 1;
  if (!this->_internal_authorization_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authorization_url().data(), static_cast<int>(this->_internal_authorization_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.OauthFlow.authorization_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_authorization_url(), target);
  }

  // string token_url = 2;
  if (!this->_internal_token_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_url().data(), static_cast<int>(this->_internal_token_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.OauthFlow.token_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_url(), target);
  }

  // string refresh_url = 3;
  if (!this->_internal_refresh_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refresh_url().data(), static_cast<int>(this->_internal_refresh_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.OauthFlow.refresh_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_refresh_url(), target);
  }

  // .openapi.v3.Strings scopes = 4;
  if (this->_internal_has_scopes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::scopes(this), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.OauthFlow)
  return target;
}

size_t OauthFlow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.OauthFlow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 5;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string authorization_url = 1;
  if (!this->_internal_authorization_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authorization_url());
  }

  // string token_url = 2;
  if (!this->_internal_token_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_url());
  }

  // string refresh_url = 3;
  if (!this->_internal_refresh_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refresh_url());
  }

  // .openapi.v3.Strings scopes = 4;
  if (this->_internal_has_scopes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scopes_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OauthFlow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OauthFlow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OauthFlow::GetClassData() const { return &_class_data_; }

void OauthFlow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OauthFlow *>(to)->MergeFrom(
      static_cast<const OauthFlow &>(from));
}


void OauthFlow::MergeFrom(const OauthFlow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.OauthFlow)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_authorization_url().empty()) {
    _internal_set_authorization_url(from._internal_authorization_url());
  }
  if (!from._internal_token_url().empty()) {
    _internal_set_token_url(from._internal_token_url());
  }
  if (!from._internal_refresh_url().empty()) {
    _internal_set_refresh_url(from._internal_refresh_url());
  }
  if (from._internal_has_scopes()) {
    _internal_mutable_scopes()->::openapi::v3::Strings::MergeFrom(from._internal_scopes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OauthFlow::CopyFrom(const OauthFlow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.OauthFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OauthFlow::IsInitialized() const {
  return true;
}

void OauthFlow::InternalSwap(OauthFlow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &authorization_url_, GetArenaForAllocation(),
      &other->authorization_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_url_, GetArenaForAllocation(),
      &other->token_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &refresh_url_, GetArenaForAllocation(),
      &other->refresh_url_, other->GetArenaForAllocation()
  );
  swap(scopes_, other->scopes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OauthFlow::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[45]);
}

// ===================================================================

class OauthFlows::_Internal {
 public:
  static const ::openapi::v3::OauthFlow& implicit(const OauthFlows* msg);
  static const ::openapi::v3::OauthFlow& password(const OauthFlows* msg);
  static const ::openapi::v3::OauthFlow& client_credentials(const OauthFlows* msg);
  static const ::openapi::v3::OauthFlow& authorization_code(const OauthFlows* msg);
};

const ::openapi::v3::OauthFlow&
OauthFlows::_Internal::implicit(const OauthFlows* msg) {
  return *msg->implicit_;
}
const ::openapi::v3::OauthFlow&
OauthFlows::_Internal::password(const OauthFlows* msg) {
  return *msg->password_;
}
const ::openapi::v3::OauthFlow&
OauthFlows::_Internal::client_credentials(const OauthFlows* msg) {
  return *msg->client_credentials_;
}
const ::openapi::v3::OauthFlow&
OauthFlows::_Internal::authorization_code(const OauthFlows* msg) {
  return *msg->authorization_code_;
}
OauthFlows::OauthFlows(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.OauthFlows)
}
OauthFlows::OauthFlows(const OauthFlows& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_implicit()) {
    implicit_ = new ::openapi::v3::OauthFlow(*from.implicit_);
  } else {
    implicit_ = nullptr;
  }
  if (from._internal_has_password()) {
    password_ = new ::openapi::v3::OauthFlow(*from.password_);
  } else {
    password_ = nullptr;
  }
  if (from._internal_has_client_credentials()) {
    client_credentials_ = new ::openapi::v3::OauthFlow(*from.client_credentials_);
  } else {
    client_credentials_ = nullptr;
  }
  if (from._internal_has_authorization_code()) {
    authorization_code_ = new ::openapi::v3::OauthFlow(*from.authorization_code_);
  } else {
    authorization_code_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.OauthFlows)
}

inline void OauthFlows::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&implicit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&authorization_code_) -
    reinterpret_cast<char*>(&implicit_)) + sizeof(authorization_code_));
}

OauthFlows::~OauthFlows() {
  // @@protoc_insertion_point(destructor:openapi.v3.OauthFlows)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OauthFlows::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete implicit_;
  if (this != internal_default_instance()) delete password_;
  if (this != internal_default_instance()) delete client_credentials_;
  if (this != internal_default_instance()) delete authorization_code_;
}

void OauthFlows::ArenaDtor(void* object) {
  OauthFlows* _this = reinterpret_cast< OauthFlows* >(object);
  (void)_this;
}
void OauthFlows::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OauthFlows::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OauthFlows::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.OauthFlows)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  if (GetArenaForAllocation() == nullptr && implicit_ != nullptr) {
    delete implicit_;
  }
  implicit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && password_ != nullptr) {
    delete password_;
  }
  password_ = nullptr;
  if (GetArenaForAllocation() == nullptr && client_credentials_ != nullptr) {
    delete client_credentials_;
  }
  client_credentials_ = nullptr;
  if (GetArenaForAllocation() == nullptr && authorization_code_ != nullptr) {
    delete authorization_code_;
  }
  authorization_code_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OauthFlows::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.OauthFlow implicit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_implicit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.OauthFlow password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.OauthFlow client_credentials = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_credentials(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.OauthFlow authorization_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_authorization_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OauthFlows::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.OauthFlows)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.OauthFlow implicit = 1;
  if (this->_internal_has_implicit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::implicit(this), target, stream);
  }

  // .openapi.v3.OauthFlow password = 2;
  if (this->_internal_has_password()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::password(this), target, stream);
  }

  // .openapi.v3.OauthFlow client_credentials = 3;
  if (this->_internal_has_client_credentials()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::client_credentials(this), target, stream);
  }

  // .openapi.v3.OauthFlow authorization_code = 4;
  if (this->_internal_has_authorization_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::authorization_code(this), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.OauthFlows)
  return target;
}

size_t OauthFlows::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.OauthFlows)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 5;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .openapi.v3.OauthFlow implicit = 1;
  if (this->_internal_has_implicit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *implicit_);
  }

  // .openapi.v3.OauthFlow password = 2;
  if (this->_internal_has_password()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *password_);
  }

  // .openapi.v3.OauthFlow client_credentials = 3;
  if (this->_internal_has_client_credentials()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_credentials_);
  }

  // .openapi.v3.OauthFlow authorization_code = 4;
  if (this->_internal_has_authorization_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *authorization_code_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OauthFlows::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OauthFlows::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OauthFlows::GetClassData() const { return &_class_data_; }

void OauthFlows::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OauthFlows *>(to)->MergeFrom(
      static_cast<const OauthFlows &>(from));
}


void OauthFlows::MergeFrom(const OauthFlows& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.OauthFlows)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (from._internal_has_implicit()) {
    _internal_mutable_implicit()->::openapi::v3::OauthFlow::MergeFrom(from._internal_implicit());
  }
  if (from._internal_has_password()) {
    _internal_mutable_password()->::openapi::v3::OauthFlow::MergeFrom(from._internal_password());
  }
  if (from._internal_has_client_credentials()) {
    _internal_mutable_client_credentials()->::openapi::v3::OauthFlow::MergeFrom(from._internal_client_credentials());
  }
  if (from._internal_has_authorization_code()) {
    _internal_mutable_authorization_code()->::openapi::v3::OauthFlow::MergeFrom(from._internal_authorization_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OauthFlows::CopyFrom(const OauthFlows& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.OauthFlows)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OauthFlows::IsInitialized() const {
  return true;
}

void OauthFlows::InternalSwap(OauthFlows* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OauthFlows, authorization_code_)
      + sizeof(OauthFlows::authorization_code_)
      - PROTOBUF_FIELD_OFFSET(OauthFlows, implicit_)>(
          reinterpret_cast<char*>(&implicit_),
          reinterpret_cast<char*>(&other->implicit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OauthFlows::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[46]);
}

// ===================================================================

class Object::_Internal {
 public:
};

Object::Object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Object)
}
Object::Object(const Object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Object)
}

inline void Object::SharedCtor() {
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:openapi.v3.Object)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Object::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Object::ArenaDtor(void* object) {
  Object* _this = reinterpret_cast< Object* >(object);
  (void)_this;
}
void Object::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedAny additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Object::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Object)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Object::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Object::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Object::GetClassData() const { return &_class_data_; }

void Object::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Object *>(to)->MergeFrom(
      static_cast<const Object &>(from));
}


void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Object)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::InternalSwap(Object* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Object::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[47]);
}

// ===================================================================

class Operation::_Internal {
 public:
  static const ::openapi::v3::ExternalDocs& external_docs(const Operation* msg);
  static const ::openapi::v3::RequestBodyOrReference& request_body(const Operation* msg);
  static const ::openapi::v3::Responses& responses(const Operation* msg);
  static const ::openapi::v3::CallbacksOrReferences& callbacks(const Operation* msg);
};

const ::openapi::v3::ExternalDocs&
Operation::_Internal::external_docs(const Operation* msg) {
  return *msg->external_docs_;
}
const ::openapi::v3::RequestBodyOrReference&
Operation::_Internal::request_body(const Operation* msg) {
  return *msg->request_body_;
}
const ::openapi::v3::Responses&
Operation::_Internal::responses(const Operation* msg) {
  return *msg->responses_;
}
const ::openapi::v3::CallbacksOrReferences&
Operation::_Internal::callbacks(const Operation* msg) {
  return *msg->callbacks_;
}
Operation::Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena),
  parameters_(arena),
  security_(arena),
  servers_(arena),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_),
      parameters_(from.parameters_),
      security_(from.security_),
      servers_(from.servers_),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_summary().empty()) {
    summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_summary(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operation_id().empty()) {
    operation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operation_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_external_docs()) {
    external_docs_ = new ::openapi::v3::ExternalDocs(*from.external_docs_);
  } else {
    external_docs_ = nullptr;
  }
  if (from._internal_has_request_body()) {
    request_body_ = new ::openapi::v3::RequestBodyOrReference(*from.request_body_);
  } else {
    request_body_ = nullptr;
  }
  if (from._internal_has_responses()) {
    responses_ = new ::openapi::v3::Responses(*from.responses_);
  } else {
    responses_ = nullptr;
  }
  if (from._internal_has_callbacks()) {
    callbacks_ = new ::openapi::v3::CallbacksOrReferences(*from.callbacks_);
  } else {
    callbacks_ = nullptr;
  }
  deprecated_ = from.deprecated_;
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Operation)
}

inline void Operation::SharedCtor() {
summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&external_docs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deprecated_) -
    reinterpret_cast<char*>(&external_docs_)) + sizeof(deprecated_));
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:openapi.v3.Operation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  summary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete external_docs_;
  if (this != internal_default_instance()) delete request_body_;
  if (this != internal_default_instance()) delete responses_;
  if (this != internal_default_instance()) delete callbacks_;
}

void Operation::ArenaDtor(void* object) {
  Operation* _this = reinterpret_cast< Operation* >(object);
  (void)_this;
}
void Operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  parameters_.Clear();
  security_.Clear();
  servers_.Clear();
  specification_extension_.Clear();
  summary_.ClearToEmpty();
  description_.ClearToEmpty();
  operation_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && external_docs_ != nullptr) {
    delete external_docs_;
  }
  external_docs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && request_body_ != nullptr) {
    delete request_body_;
  }
  request_body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && responses_ != nullptr) {
    delete responses_;
  }
  responses_ = nullptr;
  if (GetArenaForAllocation() == nullptr && callbacks_ != nullptr) {
    delete callbacks_;
  }
  callbacks_ = nullptr;
  deprecated_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Operation.tags"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_summary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Operation.summary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Operation.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ExternalDocs external_docs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_docs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operation_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_operation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Operation.operation_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.ParameterOrReference parameters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .openapi.v3.RequestBodyOrReference request_body = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Responses responses = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_responses(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.CallbacksOrReferences callbacks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_callbacks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool deprecated = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.SecurityRequirement security = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_security(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.Server servers = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tags = 1;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Operation.tags");
    target = stream->WriteString(1, s, target);
  }

  // string summary = 2;
  if (!this->_internal_summary().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summary().data(), static_cast<int>(this->_internal_summary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Operation.summary");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_summary(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Operation.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .openapi.v3.ExternalDocs external_docs = 4;
  if (this->_internal_has_external_docs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::external_docs(this), target, stream);
  }

  // string operation_id = 5;
  if (!this->_internal_operation_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_id().data(), static_cast<int>(this->_internal_operation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Operation.operation_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_operation_id(), target);
  }

  // repeated .openapi.v3.ParameterOrReference parameters = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_parameters(i), target, stream);
  }

  // .openapi.v3.RequestBodyOrReference request_body = 7;
  if (this->_internal_has_request_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::request_body(this), target, stream);
  }

  // .openapi.v3.Responses responses = 8;
  if (this->_internal_has_responses()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::responses(this), target, stream);
  }

  // .openapi.v3.CallbacksOrReferences callbacks = 9;
  if (this->_internal_has_callbacks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::callbacks(this), target, stream);
  }

  // bool deprecated = 10;
  if (this->_internal_deprecated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_deprecated(), target);
  }

  // repeated .openapi.v3.SecurityRequirement security = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_security_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_security(i), target, stream);
  }

  // repeated .openapi.v3.Server servers = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_servers(i), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated .openapi.v3.ParameterOrReference parameters = 6;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.SecurityRequirement security = 11;
  total_size += 1UL * this->_internal_security_size();
  for (const auto& msg : this->security_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.Server servers = 12;
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 13;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string summary = 2;
  if (!this->_internal_summary().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summary());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string operation_id = 5;
  if (!this->_internal_operation_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_id());
  }

  // .openapi.v3.ExternalDocs external_docs = 4;
  if (this->_internal_has_external_docs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *external_docs_);
  }

  // .openapi.v3.RequestBodyOrReference request_body = 7;
  if (this->_internal_has_request_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_body_);
  }

  // .openapi.v3.Responses responses = 8;
  if (this->_internal_has_responses()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *responses_);
  }

  // .openapi.v3.CallbacksOrReferences callbacks = 9;
  if (this->_internal_has_callbacks()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *callbacks_);
  }

  // bool deprecated = 10;
  if (this->_internal_deprecated() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Operation::GetClassData() const { return &_class_data_; }

void Operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Operation *>(to)->MergeFrom(
      static_cast<const Operation &>(from));
}


void Operation::MergeFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  parameters_.MergeFrom(from.parameters_);
  security_.MergeFrom(from.security_);
  servers_.MergeFrom(from.servers_);
  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_summary().empty()) {
    _internal_set_summary(from._internal_summary());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_operation_id().empty()) {
    _internal_set_operation_id(from._internal_operation_id());
  }
  if (from._internal_has_external_docs()) {
    _internal_mutable_external_docs()->::openapi::v3::ExternalDocs::MergeFrom(from._internal_external_docs());
  }
  if (from._internal_has_request_body()) {
    _internal_mutable_request_body()->::openapi::v3::RequestBodyOrReference::MergeFrom(from._internal_request_body());
  }
  if (from._internal_has_responses()) {
    _internal_mutable_responses()->::openapi::v3::Responses::MergeFrom(from._internal_responses());
  }
  if (from._internal_has_callbacks()) {
    _internal_mutable_callbacks()->::openapi::v3::CallbacksOrReferences::MergeFrom(from._internal_callbacks());
  }
  if (from._internal_deprecated() != 0) {
    _internal_set_deprecated(from._internal_deprecated());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  parameters_.InternalSwap(&other->parameters_);
  security_.InternalSwap(&other->security_);
  servers_.InternalSwap(&other->servers_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &summary_, GetArenaForAllocation(),
      &other->summary_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operation_id_, GetArenaForAllocation(),
      &other->operation_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Operation, deprecated_)
      + sizeof(Operation::deprecated_)
      - PROTOBUF_FIELD_OFFSET(Operation, external_docs_)>(
          reinterpret_cast<char*>(&external_docs_),
          reinterpret_cast<char*>(&other->external_docs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[48]);
}

// ===================================================================

class Parameter::_Internal {
 public:
  static const ::openapi::v3::SchemaOrReference& schema(const Parameter* msg);
  static const ::openapi::v3::Any& example(const Parameter* msg);
  static const ::openapi::v3::ExamplesOrReferences& examples(const Parameter* msg);
  static const ::openapi::v3::MediaTypes& content(const Parameter* msg);
};

const ::openapi::v3::SchemaOrReference&
Parameter::_Internal::schema(const Parameter* msg) {
  return *msg->schema_;
}
const ::openapi::v3::Any&
Parameter::_Internal::example(const Parameter* msg) {
  return *msg->example_;
}
const ::openapi::v3::ExamplesOrReferences&
Parameter::_Internal::examples(const Parameter* msg) {
  return *msg->examples_;
}
const ::openapi::v3::MediaTypes&
Parameter::_Internal::content(const Parameter* msg) {
  return *msg->content_;
}
Parameter::Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Parameter)
}
Parameter::Parameter(const Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  in_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_in().empty()) {
    in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_in(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_style().empty()) {
    style_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_style(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_schema()) {
    schema_ = new ::openapi::v3::SchemaOrReference(*from.schema_);
  } else {
    schema_ = nullptr;
  }
  if (from._internal_has_example()) {
    example_ = new ::openapi::v3::Any(*from.example_);
  } else {
    example_ = nullptr;
  }
  if (from._internal_has_examples()) {
    examples_ = new ::openapi::v3::ExamplesOrReferences(*from.examples_);
  } else {
    examples_ = nullptr;
  }
  if (from._internal_has_content()) {
    content_ = new ::openapi::v3::MediaTypes(*from.content_);
  } else {
    content_ = nullptr;
  }
  ::memcpy(&required_, &from.required_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_reserved_) -
    reinterpret_cast<char*>(&required_)) + sizeof(allow_reserved_));
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Parameter)
}

inline void Parameter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
in_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&schema_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_reserved_) -
    reinterpret_cast<char*>(&schema_)) + sizeof(allow_reserved_));
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:openapi.v3.Parameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  in_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  style_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete schema_;
  if (this != internal_default_instance()) delete example_;
  if (this != internal_default_instance()) delete examples_;
  if (this != internal_default_instance()) delete content_;
}

void Parameter::ArenaDtor(void* object) {
  Parameter* _this = reinterpret_cast< Parameter* >(object);
  (void)_this;
}
void Parameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  name_.ClearToEmpty();
  in_.ClearToEmpty();
  description_.ClearToEmpty();
  style_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && schema_ != nullptr) {
    delete schema_;
  }
  schema_ = nullptr;
  if (GetArenaForAllocation() == nullptr && example_ != nullptr) {
    delete example_;
  }
  example_ = nullptr;
  if (GetArenaForAllocation() == nullptr && examples_ != nullptr) {
    delete examples_;
  }
  examples_ = nullptr;
  if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
  ::memset(&required_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_reserved_) -
      reinterpret_cast<char*>(&required_)) + sizeof(allow_reserved_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Parameter.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_in();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Parameter.in"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Parameter.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool required = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool deprecated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_empty_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          allow_empty_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_style();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Parameter.style"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool explode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          explode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_reserved = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          allow_reserved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.SchemaOrReference schema = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Any example = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_example(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ExamplesOrReferences examples = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_examples(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.MediaTypes content = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Parameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string in = 2;
  if (!this->_internal_in().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_in().data(), static_cast<int>(this->_internal_in().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Parameter.in");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_in(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Parameter.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // bool required = 4;
  if (this->_internal_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_required(), target);
  }

  // bool deprecated = 5;
  if (this->_internal_deprecated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_deprecated(), target);
  }

  // bool allow_empty_value = 6;
  if (this->_internal_allow_empty_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_allow_empty_value(), target);
  }

  // string style = 7;
  if (!this->_internal_style().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_style().data(), static_cast<int>(this->_internal_style().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Parameter.style");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_style(), target);
  }

  // bool explode = 8;
  if (this->_internal_explode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_explode(), target);
  }

  // bool allow_reserved = 9;
  if (this->_internal_allow_reserved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_allow_reserved(), target);
  }

  // .openapi.v3.SchemaOrReference schema = 10;
  if (this->_internal_has_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::schema(this), target, stream);
  }

  // .openapi.v3.Any example = 11;
  if (this->_internal_has_example()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::example(this), target, stream);
  }

  // .openapi.v3.ExamplesOrReferences examples = 12;
  if (this->_internal_has_examples()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::examples(this), target, stream);
  }

  // .openapi.v3.MediaTypes content = 13;
  if (this->_internal_has_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::content(this), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Parameter)
  return target;
}

size_t Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Parameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 14;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string in = 2;
  if (!this->_internal_in().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_in());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string style = 7;
  if (!this->_internal_style().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_style());
  }

  // .openapi.v3.SchemaOrReference schema = 10;
  if (this->_internal_has_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *schema_);
  }

  // .openapi.v3.Any example = 11;
  if (this->_internal_has_example()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *example_);
  }

  // .openapi.v3.ExamplesOrReferences examples = 12;
  if (this->_internal_has_examples()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *examples_);
  }

  // .openapi.v3.MediaTypes content = 13;
  if (this->_internal_has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_);
  }

  // bool required = 4;
  if (this->_internal_required() != 0) {
    total_size += 1 + 1;
  }

  // bool deprecated = 5;
  if (this->_internal_deprecated() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_empty_value = 6;
  if (this->_internal_allow_empty_value() != 0) {
    total_size += 1 + 1;
  }

  // bool explode = 8;
  if (this->_internal_explode() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_reserved = 9;
  if (this->_internal_allow_reserved() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Parameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Parameter::GetClassData() const { return &_class_data_; }

void Parameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Parameter *>(to)->MergeFrom(
      static_cast<const Parameter &>(from));
}


void Parameter::MergeFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_in().empty()) {
    _internal_set_in(from._internal_in());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_style().empty()) {
    _internal_set_style(from._internal_style());
  }
  if (from._internal_has_schema()) {
    _internal_mutable_schema()->::openapi::v3::SchemaOrReference::MergeFrom(from._internal_schema());
  }
  if (from._internal_has_example()) {
    _internal_mutable_example()->::openapi::v3::Any::MergeFrom(from._internal_example());
  }
  if (from._internal_has_examples()) {
    _internal_mutable_examples()->::openapi::v3::ExamplesOrReferences::MergeFrom(from._internal_examples());
  }
  if (from._internal_has_content()) {
    _internal_mutable_content()->::openapi::v3::MediaTypes::MergeFrom(from._internal_content());
  }
  if (from._internal_required() != 0) {
    _internal_set_required(from._internal_required());
  }
  if (from._internal_deprecated() != 0) {
    _internal_set_deprecated(from._internal_deprecated());
  }
  if (from._internal_allow_empty_value() != 0) {
    _internal_set_allow_empty_value(from._internal_allow_empty_value());
  }
  if (from._internal_explode() != 0) {
    _internal_set_explode(from._internal_explode());
  }
  if (from._internal_allow_reserved() != 0) {
    _internal_set_allow_reserved(from._internal_allow_reserved());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Parameter::CopyFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  return true;
}

void Parameter::InternalSwap(Parameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &in_, GetArenaForAllocation(),
      &other->in_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &style_, GetArenaForAllocation(),
      &other->style_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Parameter, allow_reserved_)
      + sizeof(Parameter::allow_reserved_)
      - PROTOBUF_FIELD_OFFSET(Parameter, schema_)>(
          reinterpret_cast<char*>(&schema_),
          reinterpret_cast<char*>(&other->schema_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[49]);
}

// ===================================================================

class ParameterOrReference::_Internal {
 public:
  static const ::openapi::v3::Parameter& parameter(const ParameterOrReference* msg);
  static const ::openapi::v3::Reference& reference(const ParameterOrReference* msg);
};

const ::openapi::v3::Parameter&
ParameterOrReference::_Internal::parameter(const ParameterOrReference* msg) {
  return *msg->oneof_.parameter_;
}
const ::openapi::v3::Reference&
ParameterOrReference::_Internal::reference(const ParameterOrReference* msg) {
  return *msg->oneof_.reference_;
}
void ParameterOrReference::set_allocated_parameter(::openapi::v3::Parameter* parameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (parameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Parameter>::GetOwningArena(parameter);
    if (message_arena != submessage_arena) {
      parameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameter, submessage_arena);
    }
    set_has_parameter();
    oneof_.parameter_ = parameter;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.ParameterOrReference.parameter)
}
void ParameterOrReference::set_allocated_reference(::openapi::v3::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Reference>::GetOwningArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    set_has_reference();
    oneof_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.ParameterOrReference.reference)
}
ParameterOrReference::ParameterOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.ParameterOrReference)
}
ParameterOrReference::ParameterOrReference(const ParameterOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof();
  switch (from.oneof_case()) {
    case kParameter: {
      _internal_mutable_parameter()->::openapi::v3::Parameter::MergeFrom(from._internal_parameter());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.ParameterOrReference)
}

inline void ParameterOrReference::SharedCtor() {
clear_has_oneof();
}

ParameterOrReference::~ParameterOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.ParameterOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParameterOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof()) {
    clear_oneof();
  }
}

void ParameterOrReference::ArenaDtor(void* object) {
  ParameterOrReference* _this = reinterpret_cast< ParameterOrReference* >(object);
  (void)_this;
}
void ParameterOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParameterOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParameterOrReference::clear_oneof() {
// @@protoc_insertion_point(one_of_clear_start:openapi.v3.ParameterOrReference)
  switch (oneof_case()) {
    case kParameter: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.parameter_;
      }
      break;
    }
    case kReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.reference_;
      }
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void ParameterOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.ParameterOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParameterOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.Parameter parameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Reference reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParameterOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.ParameterOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.Parameter parameter = 1;
  if (_internal_has_parameter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::parameter(this), target, stream);
  }

  // .openapi.v3.Reference reference = 2;
  if (_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.ParameterOrReference)
  return target;
}

size_t ParameterOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.ParameterOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_case()) {
    // .openapi.v3.Parameter parameter = 1;
    case kParameter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.parameter_);
      break;
    }
    // .openapi.v3.Reference reference = 2;
    case kReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.reference_);
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParameterOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParameterOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParameterOrReference::GetClassData() const { return &_class_data_; }

void ParameterOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ParameterOrReference *>(to)->MergeFrom(
      static_cast<const ParameterOrReference &>(from));
}


void ParameterOrReference::MergeFrom(const ParameterOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.ParameterOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_case()) {
    case kParameter: {
      _internal_mutable_parameter()->::openapi::v3::Parameter::MergeFrom(from._internal_parameter());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParameterOrReference::CopyFrom(const ParameterOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.ParameterOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterOrReference::IsInitialized() const {
  return true;
}

void ParameterOrReference::InternalSwap(ParameterOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_, other->oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParameterOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[50]);
}

// ===================================================================

class ParametersOrReferences::_Internal {
 public:
};

ParametersOrReferences::ParametersOrReferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.ParametersOrReferences)
}
ParametersOrReferences::ParametersOrReferences(const ParametersOrReferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.ParametersOrReferences)
}

inline void ParametersOrReferences::SharedCtor() {
}

ParametersOrReferences::~ParametersOrReferences() {
  // @@protoc_insertion_point(destructor:openapi.v3.ParametersOrReferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParametersOrReferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParametersOrReferences::ArenaDtor(void* object) {
  ParametersOrReferences* _this = reinterpret_cast< ParametersOrReferences* >(object);
  (void)_this;
}
void ParametersOrReferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParametersOrReferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParametersOrReferences::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.ParametersOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParametersOrReferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedParameterOrReference additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParametersOrReferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.ParametersOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedParameterOrReference additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.ParametersOrReferences)
  return target;
}

size_t ParametersOrReferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.ParametersOrReferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedParameterOrReference additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParametersOrReferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParametersOrReferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParametersOrReferences::GetClassData() const { return &_class_data_; }

void ParametersOrReferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ParametersOrReferences *>(to)->MergeFrom(
      static_cast<const ParametersOrReferences &>(from));
}


void ParametersOrReferences::MergeFrom(const ParametersOrReferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.ParametersOrReferences)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParametersOrReferences::CopyFrom(const ParametersOrReferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.ParametersOrReferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParametersOrReferences::IsInitialized() const {
  return true;
}

void ParametersOrReferences::InternalSwap(ParametersOrReferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParametersOrReferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[51]);
}

// ===================================================================

class PathItem::_Internal {
 public:
  static const ::openapi::v3::Operation& get(const PathItem* msg);
  static const ::openapi::v3::Operation& put(const PathItem* msg);
  static const ::openapi::v3::Operation& post(const PathItem* msg);
  static const ::openapi::v3::Operation& delete_(const PathItem* msg);
  static const ::openapi::v3::Operation& options(const PathItem* msg);
  static const ::openapi::v3::Operation& head(const PathItem* msg);
  static const ::openapi::v3::Operation& patch(const PathItem* msg);
  static const ::openapi::v3::Operation& trace(const PathItem* msg);
};

const ::openapi::v3::Operation&
PathItem::_Internal::get(const PathItem* msg) {
  return *msg->get_;
}
const ::openapi::v3::Operation&
PathItem::_Internal::put(const PathItem* msg) {
  return *msg->put_;
}
const ::openapi::v3::Operation&
PathItem::_Internal::post(const PathItem* msg) {
  return *msg->post_;
}
const ::openapi::v3::Operation&
PathItem::_Internal::delete_(const PathItem* msg) {
  return *msg->delete__;
}
const ::openapi::v3::Operation&
PathItem::_Internal::options(const PathItem* msg) {
  return *msg->options_;
}
const ::openapi::v3::Operation&
PathItem::_Internal::head(const PathItem* msg) {
  return *msg->head_;
}
const ::openapi::v3::Operation&
PathItem::_Internal::patch(const PathItem* msg) {
  return *msg->patch_;
}
const ::openapi::v3::Operation&
PathItem::_Internal::trace(const PathItem* msg) {
  return *msg->trace_;
}
PathItem::PathItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  servers_(arena),
  parameters_(arena),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.PathItem)
}
PathItem::PathItem(const PathItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      servers_(from.servers_),
      parameters_(from.parameters_),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal__ref().empty()) {
    _ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal__ref(), 
      GetArenaForAllocation());
  }
  summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_summary().empty()) {
    summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_summary(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_get()) {
    get_ = new ::openapi::v3::Operation(*from.get_);
  } else {
    get_ = nullptr;
  }
  if (from._internal_has_put()) {
    put_ = new ::openapi::v3::Operation(*from.put_);
  } else {
    put_ = nullptr;
  }
  if (from._internal_has_post()) {
    post_ = new ::openapi::v3::Operation(*from.post_);
  } else {
    post_ = nullptr;
  }
  if (from._internal_has_delete_()) {
    delete__ = new ::openapi::v3::Operation(*from.delete__);
  } else {
    delete__ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::openapi::v3::Operation(*from.options_);
  } else {
    options_ = nullptr;
  }
  if (from._internal_has_head()) {
    head_ = new ::openapi::v3::Operation(*from.head_);
  } else {
    head_ = nullptr;
  }
  if (from._internal_has_patch()) {
    patch_ = new ::openapi::v3::Operation(*from.patch_);
  } else {
    patch_ = nullptr;
  }
  if (from._internal_has_trace()) {
    trace_ = new ::openapi::v3::Operation(*from.trace_);
  } else {
    trace_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.PathItem)
}

inline void PathItem::SharedCtor() {
_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&get_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trace_) -
    reinterpret_cast<char*>(&get_)) + sizeof(trace_));
}

PathItem::~PathItem() {
  // @@protoc_insertion_point(destructor:openapi.v3.PathItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PathItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete get_;
  if (this != internal_default_instance()) delete put_;
  if (this != internal_default_instance()) delete post_;
  if (this != internal_default_instance()) delete delete__;
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete head_;
  if (this != internal_default_instance()) delete patch_;
  if (this != internal_default_instance()) delete trace_;
}

void PathItem::ArenaDtor(void* object) {
  PathItem* _this = reinterpret_cast< PathItem* >(object);
  (void)_this;
}
void PathItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathItem::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.PathItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  parameters_.Clear();
  specification_extension_.Clear();
  _ref_.ClearToEmpty();
  summary_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && get_ != nullptr) {
    delete get_;
  }
  get_ = nullptr;
  if (GetArenaForAllocation() == nullptr && put_ != nullptr) {
    delete put_;
  }
  put_ = nullptr;
  if (GetArenaForAllocation() == nullptr && post_ != nullptr) {
    delete post_;
  }
  post_ = nullptr;
  if (GetArenaForAllocation() == nullptr && delete__ != nullptr) {
    delete delete__;
  }
  delete__ = nullptr;
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  if (GetArenaForAllocation() == nullptr && patch_ != nullptr) {
    delete patch_;
  }
  patch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && trace_ != nullptr) {
    delete trace_;
  }
  trace_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string _ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable__ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.PathItem._ref"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_summary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.PathItem.summary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.PathItem.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Operation get = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Operation put = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_put(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Operation post = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_post(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Operation delete = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Operation options = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Operation head = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Operation patch = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_patch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Operation trace = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.Server servers = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.ParameterOrReference parameters = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.PathItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string _ref = 1;
  if (!this->_internal__ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal__ref().data(), static_cast<int>(this->_internal__ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.PathItem._ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal__ref(), target);
  }

  // string summary = 2;
  if (!this->_internal_summary().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summary().data(), static_cast<int>(this->_internal_summary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.PathItem.summary");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_summary(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.PathItem.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .openapi.v3.Operation get = 4;
  if (this->_internal_has_get()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::get(this), target, stream);
  }

  // .openapi.v3.Operation put = 5;
  if (this->_internal_has_put()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::put(this), target, stream);
  }

  // .openapi.v3.Operation post = 6;
  if (this->_internal_has_post()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::post(this), target, stream);
  }

  // .openapi.v3.Operation delete = 7;
  if (this->_internal_has_delete_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::delete_(this), target, stream);
  }

  // .openapi.v3.Operation options = 8;
  if (this->_internal_has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::options(this), target, stream);
  }

  // .openapi.v3.Operation head = 9;
  if (this->_internal_has_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::head(this), target, stream);
  }

  // .openapi.v3.Operation patch = 10;
  if (this->_internal_has_patch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::patch(this), target, stream);
  }

  // .openapi.v3.Operation trace = 11;
  if (this->_internal_has_trace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::trace(this), target, stream);
  }

  // repeated .openapi.v3.Server servers = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_servers(i), target, stream);
  }

  // repeated .openapi.v3.ParameterOrReference parameters = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_parameters(i), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.PathItem)
  return target;
}

size_t PathItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.PathItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.Server servers = 12;
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.ParameterOrReference parameters = 13;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 14;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string _ref = 1;
  if (!this->_internal__ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal__ref());
  }

  // string summary = 2;
  if (!this->_internal_summary().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summary());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .openapi.v3.Operation get = 4;
  if (this->_internal_has_get()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *get_);
  }

  // .openapi.v3.Operation put = 5;
  if (this->_internal_has_put()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *put_);
  }

  // .openapi.v3.Operation post = 6;
  if (this->_internal_has_post()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *post_);
  }

  // .openapi.v3.Operation delete = 7;
  if (this->_internal_has_delete_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delete__);
  }

  // .openapi.v3.Operation options = 8;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // .openapi.v3.Operation head = 9;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // .openapi.v3.Operation patch = 10;
  if (this->_internal_has_patch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *patch_);
  }

  // .openapi.v3.Operation trace = 11;
  if (this->_internal_has_trace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathItem::GetClassData() const { return &_class_data_; }

void PathItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PathItem *>(to)->MergeFrom(
      static_cast<const PathItem &>(from));
}


void PathItem::MergeFrom(const PathItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.PathItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  parameters_.MergeFrom(from.parameters_);
  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal__ref().empty()) {
    _internal_set__ref(from._internal__ref());
  }
  if (!from._internal_summary().empty()) {
    _internal_set_summary(from._internal_summary());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_get()) {
    _internal_mutable_get()->::openapi::v3::Operation::MergeFrom(from._internal_get());
  }
  if (from._internal_has_put()) {
    _internal_mutable_put()->::openapi::v3::Operation::MergeFrom(from._internal_put());
  }
  if (from._internal_has_post()) {
    _internal_mutable_post()->::openapi::v3::Operation::MergeFrom(from._internal_post());
  }
  if (from._internal_has_delete_()) {
    _internal_mutable_delete_()->::openapi::v3::Operation::MergeFrom(from._internal_delete_());
  }
  if (from._internal_has_options()) {
    _internal_mutable_options()->::openapi::v3::Operation::MergeFrom(from._internal_options());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::openapi::v3::Operation::MergeFrom(from._internal_head());
  }
  if (from._internal_has_patch()) {
    _internal_mutable_patch()->::openapi::v3::Operation::MergeFrom(from._internal_patch());
  }
  if (from._internal_has_trace()) {
    _internal_mutable_trace()->::openapi::v3::Operation::MergeFrom(from._internal_trace());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathItem::CopyFrom(const PathItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.PathItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathItem::IsInitialized() const {
  return true;
}

void PathItem::InternalSwap(PathItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  servers_.InternalSwap(&other->servers_);
  parameters_.InternalSwap(&other->parameters_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &_ref_, GetArenaForAllocation(),
      &other->_ref_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &summary_, GetArenaForAllocation(),
      &other->summary_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathItem, trace_)
      + sizeof(PathItem::trace_)
      - PROTOBUF_FIELD_OFFSET(PathItem, get_)>(
          reinterpret_cast<char*>(&get_),
          reinterpret_cast<char*>(&other->get_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[52]);
}

// ===================================================================

class Paths::_Internal {
 public:
};

Paths::Paths(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  path_(arena),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Paths)
}
Paths::Paths(const Paths& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_(from.path_),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Paths)
}

inline void Paths::SharedCtor() {
}

Paths::~Paths() {
  // @@protoc_insertion_point(destructor:openapi.v3.Paths)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Paths::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Paths::ArenaDtor(void* object) {
  Paths* _this = reinterpret_cast< Paths* >(object);
  (void)_this;
}
void Paths::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Paths::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Paths::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Paths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  specification_extension_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Paths::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedPathItem path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Paths::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Paths)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedPathItem path = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_path(i), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Paths)
  return target;
}

size_t Paths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Paths)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedPathItem path = 1;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 2;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Paths::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Paths::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Paths::GetClassData() const { return &_class_data_; }

void Paths::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Paths *>(to)->MergeFrom(
      static_cast<const Paths &>(from));
}


void Paths::MergeFrom(const Paths& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Paths)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  specification_extension_.MergeFrom(from.specification_extension_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Paths::CopyFrom(const Paths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Paths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Paths::IsInitialized() const {
  return true;
}

void Paths::InternalSwap(Paths* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  path_.InternalSwap(&other->path_);
  specification_extension_.InternalSwap(&other->specification_extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Paths::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[53]);
}

// ===================================================================

class Properties::_Internal {
 public:
};

Properties::Properties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Properties)
}
Properties::Properties(const Properties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Properties)
}

inline void Properties::SharedCtor() {
}

Properties::~Properties() {
  // @@protoc_insertion_point(destructor:openapi.v3.Properties)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Properties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Properties::ArenaDtor(void* object) {
  Properties* _this = reinterpret_cast< Properties* >(object);
  (void)_this;
}
void Properties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Properties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Properties::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Properties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Properties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedSchemaOrReference additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Properties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Properties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedSchemaOrReference additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Properties)
  return target;
}

size_t Properties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Properties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedSchemaOrReference additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Properties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Properties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Properties::GetClassData() const { return &_class_data_; }

void Properties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Properties *>(to)->MergeFrom(
      static_cast<const Properties &>(from));
}


void Properties::MergeFrom(const Properties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Properties)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Properties::CopyFrom(const Properties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Properties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Properties::IsInitialized() const {
  return true;
}

void Properties::InternalSwap(Properties* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Properties::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[54]);
}

// ===================================================================

class Reference::_Internal {
 public:
};

Reference::Reference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Reference)
}
Reference::Reference(const Reference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal__ref().empty()) {
    _ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal__ref(), 
      GetArenaForAllocation());
  }
  summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_summary().empty()) {
    summary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_summary(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Reference)
}

inline void Reference::SharedCtor() {
_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
summary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:openapi.v3.Reference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Reference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Reference::ArenaDtor(void* object) {
  Reference* _this = reinterpret_cast< Reference* >(object);
  (void)_this;
}
void Reference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _ref_.ClearToEmpty();
  summary_.ClearToEmpty();
  description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string _ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable__ref();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Reference._ref"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_summary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Reference.summary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Reference.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string _ref = 1;
  if (!this->_internal__ref().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal__ref().data(), static_cast<int>(this->_internal__ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Reference._ref");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal__ref(), target);
  }

  // string summary = 2;
  if (!this->_internal_summary().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summary().data(), static_cast<int>(this->_internal_summary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Reference.summary");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_summary(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Reference.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Reference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string _ref = 1;
  if (!this->_internal__ref().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal__ref());
  }

  // string summary = 2;
  if (!this->_internal_summary().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summary());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Reference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reference::GetClassData() const { return &_class_data_; }

void Reference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Reference *>(to)->MergeFrom(
      static_cast<const Reference &>(from));
}


void Reference::MergeFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal__ref().empty()) {
    _internal_set__ref(from._internal__ref());
  }
  if (!from._internal_summary().empty()) {
    _internal_set_summary(from._internal_summary());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  return true;
}

void Reference::InternalSwap(Reference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &_ref_, GetArenaForAllocation(),
      &other->_ref_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &summary_, GetArenaForAllocation(),
      &other->summary_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Reference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[55]);
}

// ===================================================================

class RequestBodiesOrReferences::_Internal {
 public:
};

RequestBodiesOrReferences::RequestBodiesOrReferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.RequestBodiesOrReferences)
}
RequestBodiesOrReferences::RequestBodiesOrReferences(const RequestBodiesOrReferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.RequestBodiesOrReferences)
}

inline void RequestBodiesOrReferences::SharedCtor() {
}

RequestBodiesOrReferences::~RequestBodiesOrReferences() {
  // @@protoc_insertion_point(destructor:openapi.v3.RequestBodiesOrReferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestBodiesOrReferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestBodiesOrReferences::ArenaDtor(void* object) {
  RequestBodiesOrReferences* _this = reinterpret_cast< RequestBodiesOrReferences* >(object);
  (void)_this;
}
void RequestBodiesOrReferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestBodiesOrReferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestBodiesOrReferences::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.RequestBodiesOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBodiesOrReferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedRequestBodyOrReference additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestBodiesOrReferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.RequestBodiesOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedRequestBodyOrReference additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.RequestBodiesOrReferences)
  return target;
}

size_t RequestBodiesOrReferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.RequestBodiesOrReferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedRequestBodyOrReference additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestBodiesOrReferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestBodiesOrReferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestBodiesOrReferences::GetClassData() const { return &_class_data_; }

void RequestBodiesOrReferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RequestBodiesOrReferences *>(to)->MergeFrom(
      static_cast<const RequestBodiesOrReferences &>(from));
}


void RequestBodiesOrReferences::MergeFrom(const RequestBodiesOrReferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.RequestBodiesOrReferences)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestBodiesOrReferences::CopyFrom(const RequestBodiesOrReferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.RequestBodiesOrReferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBodiesOrReferences::IsInitialized() const {
  return true;
}

void RequestBodiesOrReferences::InternalSwap(RequestBodiesOrReferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBodiesOrReferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[56]);
}

// ===================================================================

class RequestBody::_Internal {
 public:
  static const ::openapi::v3::MediaTypes& content(const RequestBody* msg);
};

const ::openapi::v3::MediaTypes&
RequestBody::_Internal::content(const RequestBody* msg) {
  return *msg->content_;
}
RequestBody::RequestBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.RequestBody)
}
RequestBody::RequestBody(const RequestBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_content()) {
    content_ = new ::openapi::v3::MediaTypes(*from.content_);
  } else {
    content_ = nullptr;
  }
  required_ = from.required_;
  // @@protoc_insertion_point(copy_constructor:openapi.v3.RequestBody)
}

inline void RequestBody::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&content_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&required_) -
    reinterpret_cast<char*>(&content_)) + sizeof(required_));
}

RequestBody::~RequestBody() {
  // @@protoc_insertion_point(destructor:openapi.v3.RequestBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete content_;
}

void RequestBody::ArenaDtor(void* object) {
  RequestBody* _this = reinterpret_cast< RequestBody* >(object);
  (void)_this;
}
void RequestBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.RequestBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
  required_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.RequestBody.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.MediaTypes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool required = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.RequestBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.RequestBody.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // .openapi.v3.MediaTypes content = 2;
  if (this->_internal_has_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::content(this), target, stream);
  }

  // bool required = 3;
  if (this->_internal_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_required(), target);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.RequestBody)
  return target;
}

size_t RequestBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.RequestBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 4;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string description = 1;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .openapi.v3.MediaTypes content = 2;
  if (this->_internal_has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_);
  }

  // bool required = 3;
  if (this->_internal_required() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestBody::GetClassData() const { return &_class_data_; }

void RequestBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RequestBody *>(to)->MergeFrom(
      static_cast<const RequestBody &>(from));
}


void RequestBody::MergeFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.RequestBody)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_content()) {
    _internal_mutable_content()->::openapi::v3::MediaTypes::MergeFrom(from._internal_content());
  }
  if (from._internal_required() != 0) {
    _internal_set_required(from._internal_required());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestBody::CopyFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.RequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBody::IsInitialized() const {
  return true;
}

void RequestBody::InternalSwap(RequestBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestBody, required_)
      + sizeof(RequestBody::required_)
      - PROTOBUF_FIELD_OFFSET(RequestBody, content_)>(
          reinterpret_cast<char*>(&content_),
          reinterpret_cast<char*>(&other->content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[57]);
}

// ===================================================================

class RequestBodyOrReference::_Internal {
 public:
  static const ::openapi::v3::RequestBody& request_body(const RequestBodyOrReference* msg);
  static const ::openapi::v3::Reference& reference(const RequestBodyOrReference* msg);
};

const ::openapi::v3::RequestBody&
RequestBodyOrReference::_Internal::request_body(const RequestBodyOrReference* msg) {
  return *msg->oneof_.request_body_;
}
const ::openapi::v3::Reference&
RequestBodyOrReference::_Internal::reference(const RequestBodyOrReference* msg) {
  return *msg->oneof_.reference_;
}
void RequestBodyOrReference::set_allocated_request_body(::openapi::v3::RequestBody* request_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (request_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::RequestBody>::GetOwningArena(request_body);
    if (message_arena != submessage_arena) {
      request_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_body, submessage_arena);
    }
    set_has_request_body();
    oneof_.request_body_ = request_body;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.RequestBodyOrReference.request_body)
}
void RequestBodyOrReference::set_allocated_reference(::openapi::v3::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Reference>::GetOwningArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    set_has_reference();
    oneof_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.RequestBodyOrReference.reference)
}
RequestBodyOrReference::RequestBodyOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.RequestBodyOrReference)
}
RequestBodyOrReference::RequestBodyOrReference(const RequestBodyOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof();
  switch (from.oneof_case()) {
    case kRequestBody: {
      _internal_mutable_request_body()->::openapi::v3::RequestBody::MergeFrom(from._internal_request_body());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.RequestBodyOrReference)
}

inline void RequestBodyOrReference::SharedCtor() {
clear_has_oneof();
}

RequestBodyOrReference::~RequestBodyOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.RequestBodyOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestBodyOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof()) {
    clear_oneof();
  }
}

void RequestBodyOrReference::ArenaDtor(void* object) {
  RequestBodyOrReference* _this = reinterpret_cast< RequestBodyOrReference* >(object);
  (void)_this;
}
void RequestBodyOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestBodyOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestBodyOrReference::clear_oneof() {
// @@protoc_insertion_point(one_of_clear_start:openapi.v3.RequestBodyOrReference)
  switch (oneof_case()) {
    case kRequestBody: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.request_body_;
      }
      break;
    }
    case kReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.reference_;
      }
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void RequestBodyOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.RequestBodyOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBodyOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.RequestBody request_body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Reference reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestBodyOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.RequestBodyOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.RequestBody request_body = 1;
  if (_internal_has_request_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request_body(this), target, stream);
  }

  // .openapi.v3.Reference reference = 2;
  if (_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.RequestBodyOrReference)
  return target;
}

size_t RequestBodyOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.RequestBodyOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_case()) {
    // .openapi.v3.RequestBody request_body = 1;
    case kRequestBody: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.request_body_);
      break;
    }
    // .openapi.v3.Reference reference = 2;
    case kReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.reference_);
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestBodyOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestBodyOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestBodyOrReference::GetClassData() const { return &_class_data_; }

void RequestBodyOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RequestBodyOrReference *>(to)->MergeFrom(
      static_cast<const RequestBodyOrReference &>(from));
}


void RequestBodyOrReference::MergeFrom(const RequestBodyOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.RequestBodyOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_case()) {
    case kRequestBody: {
      _internal_mutable_request_body()->::openapi::v3::RequestBody::MergeFrom(from._internal_request_body());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestBodyOrReference::CopyFrom(const RequestBodyOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.RequestBodyOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBodyOrReference::IsInitialized() const {
  return true;
}

void RequestBodyOrReference::InternalSwap(RequestBodyOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_, other->oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBodyOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[58]);
}

// ===================================================================

class Response::_Internal {
 public:
  static const ::openapi::v3::HeadersOrReferences& headers(const Response* msg);
  static const ::openapi::v3::MediaTypes& content(const Response* msg);
  static const ::openapi::v3::LinksOrReferences& links(const Response* msg);
};

const ::openapi::v3::HeadersOrReferences&
Response::_Internal::headers(const Response* msg) {
  return *msg->headers_;
}
const ::openapi::v3::MediaTypes&
Response::_Internal::content(const Response* msg) {
  return *msg->content_;
}
const ::openapi::v3::LinksOrReferences&
Response::_Internal::links(const Response* msg) {
  return *msg->links_;
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_headers()) {
    headers_ = new ::openapi::v3::HeadersOrReferences(*from.headers_);
  } else {
    headers_ = nullptr;
  }
  if (from._internal_has_content()) {
    content_ = new ::openapi::v3::MediaTypes(*from.content_);
  } else {
    content_ = nullptr;
  }
  if (from._internal_has_links()) {
    links_ = new ::openapi::v3::LinksOrReferences(*from.links_);
  } else {
    links_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Response)
}

inline void Response::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&headers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&links_) -
    reinterpret_cast<char*>(&headers_)) + sizeof(links_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:openapi.v3.Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete headers_;
  if (this != internal_default_instance()) delete content_;
  if (this != internal_default_instance()) delete links_;
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && headers_ != nullptr) {
    delete headers_;
  }
  headers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
  if (GetArenaForAllocation() == nullptr && links_ != nullptr) {
    delete links_;
  }
  links_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Response.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.HeadersOrReferences headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_headers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.MediaTypes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.LinksOrReferences links = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_links(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Response.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // .openapi.v3.HeadersOrReferences headers = 2;
  if (this->_internal_has_headers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::headers(this), target, stream);
  }

  // .openapi.v3.MediaTypes content = 3;
  if (this->_internal_has_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::content(this), target, stream);
  }

  // .openapi.v3.LinksOrReferences links = 4;
  if (this->_internal_has_links()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::links(this), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 5;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string description = 1;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .openapi.v3.HeadersOrReferences headers = 2;
  if (this->_internal_has_headers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *headers_);
  }

  // .openapi.v3.MediaTypes content = 3;
  if (this->_internal_has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_);
  }

  // .openapi.v3.LinksOrReferences links = 4;
  if (this->_internal_has_links()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *links_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }

void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Response *>(to)->MergeFrom(
      static_cast<const Response &>(from));
}


void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_headers()) {
    _internal_mutable_headers()->::openapi::v3::HeadersOrReferences::MergeFrom(from._internal_headers());
  }
  if (from._internal_has_content()) {
    _internal_mutable_content()->::openapi::v3::MediaTypes::MergeFrom(from._internal_content());
  }
  if (from._internal_has_links()) {
    _internal_mutable_links()->::openapi::v3::LinksOrReferences::MergeFrom(from._internal_links());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Response, links_)
      + sizeof(Response::links_)
      - PROTOBUF_FIELD_OFFSET(Response, headers_)>(
          reinterpret_cast<char*>(&headers_),
          reinterpret_cast<char*>(&other->headers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[59]);
}

// ===================================================================

class ResponseOrReference::_Internal {
 public:
  static const ::openapi::v3::Response& response(const ResponseOrReference* msg);
  static const ::openapi::v3::Reference& reference(const ResponseOrReference* msg);
};

const ::openapi::v3::Response&
ResponseOrReference::_Internal::response(const ResponseOrReference* msg) {
  return *msg->oneof_.response_;
}
const ::openapi::v3::Reference&
ResponseOrReference::_Internal::reference(const ResponseOrReference* msg) {
  return *msg->oneof_.reference_;
}
void ResponseOrReference::set_allocated_response(::openapi::v3::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Response>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    set_has_response();
    oneof_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.ResponseOrReference.response)
}
void ResponseOrReference::set_allocated_reference(::openapi::v3::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Reference>::GetOwningArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    set_has_reference();
    oneof_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.ResponseOrReference.reference)
}
ResponseOrReference::ResponseOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.ResponseOrReference)
}
ResponseOrReference::ResponseOrReference(const ResponseOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof();
  switch (from.oneof_case()) {
    case kResponse: {
      _internal_mutable_response()->::openapi::v3::Response::MergeFrom(from._internal_response());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.ResponseOrReference)
}

inline void ResponseOrReference::SharedCtor() {
clear_has_oneof();
}

ResponseOrReference::~ResponseOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.ResponseOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof()) {
    clear_oneof();
  }
}

void ResponseOrReference::ArenaDtor(void* object) {
  ResponseOrReference* _this = reinterpret_cast< ResponseOrReference* >(object);
  (void)_this;
}
void ResponseOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseOrReference::clear_oneof() {
// @@protoc_insertion_point(one_of_clear_start:openapi.v3.ResponseOrReference)
  switch (oneof_case()) {
    case kResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.response_;
      }
      break;
    }
    case kReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.reference_;
      }
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void ResponseOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.ResponseOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Reference reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.ResponseOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.Response response = 1;
  if (_internal_has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::response(this), target, stream);
  }

  // .openapi.v3.Reference reference = 2;
  if (_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.ResponseOrReference)
  return target;
}

size_t ResponseOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.ResponseOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_case()) {
    // .openapi.v3.Response response = 1;
    case kResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.response_);
      break;
    }
    // .openapi.v3.Reference reference = 2;
    case kReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.reference_);
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseOrReference::GetClassData() const { return &_class_data_; }

void ResponseOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResponseOrReference *>(to)->MergeFrom(
      static_cast<const ResponseOrReference &>(from));
}


void ResponseOrReference::MergeFrom(const ResponseOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.ResponseOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_case()) {
    case kResponse: {
      _internal_mutable_response()->::openapi::v3::Response::MergeFrom(from._internal_response());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseOrReference::CopyFrom(const ResponseOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.ResponseOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseOrReference::IsInitialized() const {
  return true;
}

void ResponseOrReference::InternalSwap(ResponseOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_, other->oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[60]);
}

// ===================================================================

class Responses::_Internal {
 public:
  static const ::openapi::v3::ResponseOrReference& default_(const Responses* msg);
};

const ::openapi::v3::ResponseOrReference&
Responses::_Internal::default_(const Responses* msg) {
  return *msg->default__;
}
Responses::Responses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  response_or_reference_(arena),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Responses)
}
Responses::Responses(const Responses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      response_or_reference_(from.response_or_reference_),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_default_()) {
    default__ = new ::openapi::v3::ResponseOrReference(*from.default__);
  } else {
    default__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Responses)
}

inline void Responses::SharedCtor() {
default__ = nullptr;
}

Responses::~Responses() {
  // @@protoc_insertion_point(destructor:openapi.v3.Responses)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Responses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete default__;
}

void Responses::ArenaDtor(void* object) {
  Responses* _this = reinterpret_cast< Responses* >(object);
  (void)_this;
}
void Responses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Responses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Responses::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Responses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_or_reference_.Clear();
  specification_extension_.Clear();
  if (GetArenaForAllocation() == nullptr && default__ != nullptr) {
    delete default__;
  }
  default__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Responses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.ResponseOrReference default = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedResponseOrReference response_or_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_response_or_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Responses::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Responses)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.ResponseOrReference default = 1;
  if (this->_internal_has_default_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::default_(this), target, stream);
  }

  // repeated .openapi.v3.NamedResponseOrReference response_or_reference = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_response_or_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_response_or_reference(i), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Responses)
  return target;
}

size_t Responses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Responses)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedResponseOrReference response_or_reference = 2;
  total_size += 1UL * this->_internal_response_or_reference_size();
  for (const auto& msg : this->response_or_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 3;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .openapi.v3.ResponseOrReference default = 1;
  if (this->_internal_has_default_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Responses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Responses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Responses::GetClassData() const { return &_class_data_; }

void Responses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Responses *>(to)->MergeFrom(
      static_cast<const Responses &>(from));
}


void Responses::MergeFrom(const Responses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Responses)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  response_or_reference_.MergeFrom(from.response_or_reference_);
  specification_extension_.MergeFrom(from.specification_extension_);
  if (from._internal_has_default_()) {
    _internal_mutable_default_()->::openapi::v3::ResponseOrReference::MergeFrom(from._internal_default_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Responses::CopyFrom(const Responses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Responses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Responses::IsInitialized() const {
  return true;
}

void Responses::InternalSwap(Responses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  response_or_reference_.InternalSwap(&other->response_or_reference_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  swap(default__, other->default__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Responses::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[61]);
}

// ===================================================================

class ResponsesOrReferences::_Internal {
 public:
};

ResponsesOrReferences::ResponsesOrReferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.ResponsesOrReferences)
}
ResponsesOrReferences::ResponsesOrReferences(const ResponsesOrReferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.ResponsesOrReferences)
}

inline void ResponsesOrReferences::SharedCtor() {
}

ResponsesOrReferences::~ResponsesOrReferences() {
  // @@protoc_insertion_point(destructor:openapi.v3.ResponsesOrReferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponsesOrReferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponsesOrReferences::ArenaDtor(void* object) {
  ResponsesOrReferences* _this = reinterpret_cast< ResponsesOrReferences* >(object);
  (void)_this;
}
void ResponsesOrReferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponsesOrReferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponsesOrReferences::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.ResponsesOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponsesOrReferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedResponseOrReference additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponsesOrReferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.ResponsesOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedResponseOrReference additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.ResponsesOrReferences)
  return target;
}

size_t ResponsesOrReferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.ResponsesOrReferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedResponseOrReference additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponsesOrReferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponsesOrReferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponsesOrReferences::GetClassData() const { return &_class_data_; }

void ResponsesOrReferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResponsesOrReferences *>(to)->MergeFrom(
      static_cast<const ResponsesOrReferences &>(from));
}


void ResponsesOrReferences::MergeFrom(const ResponsesOrReferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.ResponsesOrReferences)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponsesOrReferences::CopyFrom(const ResponsesOrReferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.ResponsesOrReferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsesOrReferences::IsInitialized() const {
  return true;
}

void ResponsesOrReferences::InternalSwap(ResponsesOrReferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponsesOrReferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[62]);
}

// ===================================================================

class Schema::_Internal {
 public:
  static const ::openapi::v3::Discriminator& discriminator(const Schema* msg);
  static const ::openapi::v3::Xml& xml(const Schema* msg);
  static const ::openapi::v3::ExternalDocs& external_docs(const Schema* msg);
  static const ::openapi::v3::Any& example(const Schema* msg);
  static const ::openapi::v3::Schema& not_(const Schema* msg);
  static const ::openapi::v3::ItemsItem& items(const Schema* msg);
  static const ::openapi::v3::Properties& properties(const Schema* msg);
  static const ::openapi::v3::AdditionalPropertiesItem& additional_properties(const Schema* msg);
  static const ::openapi::v3::DefaultType& default_(const Schema* msg);
};

const ::openapi::v3::Discriminator&
Schema::_Internal::discriminator(const Schema* msg) {
  return *msg->discriminator_;
}
const ::openapi::v3::Xml&
Schema::_Internal::xml(const Schema* msg) {
  return *msg->xml_;
}
const ::openapi::v3::ExternalDocs&
Schema::_Internal::external_docs(const Schema* msg) {
  return *msg->external_docs_;
}
const ::openapi::v3::Any&
Schema::_Internal::example(const Schema* msg) {
  return *msg->example_;
}
const ::openapi::v3::Schema&
Schema::_Internal::not_(const Schema* msg) {
  return *msg->not__;
}
const ::openapi::v3::ItemsItem&
Schema::_Internal::items(const Schema* msg) {
  return *msg->items_;
}
const ::openapi::v3::Properties&
Schema::_Internal::properties(const Schema* msg) {
  return *msg->properties_;
}
const ::openapi::v3::AdditionalPropertiesItem&
Schema::_Internal::additional_properties(const Schema* msg) {
  return *msg->additional_properties_;
}
const ::openapi::v3::DefaultType&
Schema::_Internal::default_(const Schema* msg) {
  return *msg->default__;
}
Schema::Schema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  required_(arena),
  enum__(arena),
  all_of_(arena),
  one_of_(arena),
  any_of_(arena),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Schema)
}
Schema::Schema(const Schema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      required_(from.required_),
      enum__(from.enum__),
      all_of_(from.all_of_),
      one_of_(from.one_of_),
      any_of_(from.any_of_),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pattern().empty()) {
    pattern_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pattern(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_format().empty()) {
    format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_format(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_discriminator()) {
    discriminator_ = new ::openapi::v3::Discriminator(*from.discriminator_);
  } else {
    discriminator_ = nullptr;
  }
  if (from._internal_has_xml()) {
    xml_ = new ::openapi::v3::Xml(*from.xml_);
  } else {
    xml_ = nullptr;
  }
  if (from._internal_has_external_docs()) {
    external_docs_ = new ::openapi::v3::ExternalDocs(*from.external_docs_);
  } else {
    external_docs_ = nullptr;
  }
  if (from._internal_has_example()) {
    example_ = new ::openapi::v3::Any(*from.example_);
  } else {
    example_ = nullptr;
  }
  if (from._internal_has_not_()) {
    not__ = new ::openapi::v3::Schema(*from.not__);
  } else {
    not__ = nullptr;
  }
  if (from._internal_has_items()) {
    items_ = new ::openapi::v3::ItemsItem(*from.items_);
  } else {
    items_ = nullptr;
  }
  if (from._internal_has_properties()) {
    properties_ = new ::openapi::v3::Properties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  if (from._internal_has_additional_properties()) {
    additional_properties_ = new ::openapi::v3::AdditionalPropertiesItem(*from.additional_properties_);
  } else {
    additional_properties_ = nullptr;
  }
  if (from._internal_has_default_()) {
    default__ = new ::openapi::v3::DefaultType(*from.default__);
  } else {
    default__ = nullptr;
  }
  ::memcpy(&nullable_, &from.nullable_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_properties_) -
    reinterpret_cast<char*>(&nullable_)) + sizeof(min_properties_));
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Schema)
}

inline void Schema::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&discriminator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_properties_) -
    reinterpret_cast<char*>(&discriminator_)) + sizeof(min_properties_));
}

Schema::~Schema() {
  // @@protoc_insertion_point(destructor:openapi.v3.Schema)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Schema::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete discriminator_;
  if (this != internal_default_instance()) delete xml_;
  if (this != internal_default_instance()) delete external_docs_;
  if (this != internal_default_instance()) delete example_;
  if (this != internal_default_instance()) delete not__;
  if (this != internal_default_instance()) delete items_;
  if (this != internal_default_instance()) delete properties_;
  if (this != internal_default_instance()) delete additional_properties_;
  if (this != internal_default_instance()) delete default__;
}

void Schema::ArenaDtor(void* object) {
  Schema* _this = reinterpret_cast< Schema* >(object);
  (void)_this;
}
void Schema::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Schema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Schema::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Schema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_.Clear();
  enum__.Clear();
  all_of_.Clear();
  one_of_.Clear();
  any_of_.Clear();
  specification_extension_.Clear();
  title_.ClearToEmpty();
  pattern_.ClearToEmpty();
  type_.ClearToEmpty();
  description_.ClearToEmpty();
  format_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && discriminator_ != nullptr) {
    delete discriminator_;
  }
  discriminator_ = nullptr;
  if (GetArenaForAllocation() == nullptr && xml_ != nullptr) {
    delete xml_;
  }
  xml_ = nullptr;
  if (GetArenaForAllocation() == nullptr && external_docs_ != nullptr) {
    delete external_docs_;
  }
  external_docs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && example_ != nullptr) {
    delete example_;
  }
  example_ = nullptr;
  if (GetArenaForAllocation() == nullptr && not__ != nullptr) {
    delete not__;
  }
  not__ = nullptr;
  if (GetArenaForAllocation() == nullptr && items_ != nullptr) {
    delete items_;
  }
  items_ = nullptr;
  if (GetArenaForAllocation() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  if (GetArenaForAllocation() == nullptr && additional_properties_ != nullptr) {
    delete additional_properties_;
  }
  additional_properties_ = nullptr;
  if (GetArenaForAllocation() == nullptr && default__ != nullptr) {
    delete default__;
  }
  default__ = nullptr;
  ::memset(&nullable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_properties_) -
      reinterpret_cast<char*>(&nullable_)) + sizeof(min_properties_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Schema::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool nullable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nullable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Discriminator discriminator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_discriminator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool read_only = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          read_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool write_only = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          write_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Xml xml = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_xml(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ExternalDocs external_docs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_docs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Any example = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_example(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool deprecated = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Schema.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double multiple_of = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          multiple_of_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maximum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool exclusive_maximum = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          exclusive_maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double minimum = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool exclusive_minimum = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          exclusive_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_length = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_length = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          min_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pattern = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Schema.pattern"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_items = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          max_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_items = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          min_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool unique_items = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          unique_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_properties = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          max_properties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_properties = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          min_properties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string required = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_required();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Schema.required"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.Any enum = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_enum_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // string type = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Schema.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.SchemaOrReference all_of = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_all_of(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.SchemaOrReference one_of = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_one_of(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.SchemaOrReference any_of = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_any_of(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Schema not = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ItemsItem items = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_items(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Properties properties = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.AdditionalPropertiesItem additional_properties = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_additional_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.DefaultType default = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Schema.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string format = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Schema.format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Schema::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Schema)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool nullable = 1;
  if (this->_internal_nullable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_nullable(), target);
  }

  // .openapi.v3.Discriminator discriminator = 2;
  if (this->_internal_has_discriminator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::discriminator(this), target, stream);
  }

  // bool read_only = 3;
  if (this->_internal_read_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_read_only(), target);
  }

  // bool write_only = 4;
  if (this->_internal_write_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_write_only(), target);
  }

  // .openapi.v3.Xml xml = 5;
  if (this->_internal_has_xml()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::xml(this), target, stream);
  }

  // .openapi.v3.ExternalDocs external_docs = 6;
  if (this->_internal_has_external_docs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::external_docs(this), target, stream);
  }

  // .openapi.v3.Any example = 7;
  if (this->_internal_has_example()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::example(this), target, stream);
  }

  // bool deprecated = 8;
  if (this->_internal_deprecated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_deprecated(), target);
  }

  // string title = 9;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Schema.title");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_title(), target);
  }

  // double multiple_of = 10;
  if (!(this->_internal_multiple_of() <= 0 && this->_internal_multiple_of() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_multiple_of(), target);
  }

  // double maximum = 11;
  if (!(this->_internal_maximum() <= 0 && this->_internal_maximum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_maximum(), target);
  }

  // bool exclusive_maximum = 12;
  if (this->_internal_exclusive_maximum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_exclusive_maximum(), target);
  }

  // double minimum = 13;
  if (!(this->_internal_minimum() <= 0 && this->_internal_minimum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_minimum(), target);
  }

  // bool exclusive_minimum = 14;
  if (this->_internal_exclusive_minimum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_exclusive_minimum(), target);
  }

  // int64 max_length = 15;
  if (this->_internal_max_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_max_length(), target);
  }

  // int64 min_length = 16;
  if (this->_internal_min_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_min_length(), target);
  }

  // string pattern = 17;
  if (!this->_internal_pattern().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pattern().data(), static_cast<int>(this->_internal_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Schema.pattern");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_pattern(), target);
  }

  // int64 max_items = 18;
  if (this->_internal_max_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_max_items(), target);
  }

  // int64 min_items = 19;
  if (this->_internal_min_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_min_items(), target);
  }

  // bool unique_items = 20;
  if (this->_internal_unique_items() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_unique_items(), target);
  }

  // int64 max_properties = 21;
  if (this->_internal_max_properties() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_max_properties(), target);
  }

  // int64 min_properties = 22;
  if (this->_internal_min_properties() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_min_properties(), target);
  }

  // repeated string required = 23;
  for (int i = 0, n = this->_internal_required_size(); i < n; i++) {
    const auto& s = this->_internal_required(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Schema.required");
    target = stream->WriteString(23, s, target);
  }

  // repeated .openapi.v3.Any enum = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enum__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_enum_(i), target, stream);
  }

  // string type = 25;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Schema.type");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_type(), target);
  }

  // repeated .openapi.v3.SchemaOrReference all_of = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_all_of_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_all_of(i), target, stream);
  }

  // repeated .openapi.v3.SchemaOrReference one_of = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_one_of_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_one_of(i), target, stream);
  }

  // repeated .openapi.v3.SchemaOrReference any_of = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_any_of_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_any_of(i), target, stream);
  }

  // .openapi.v3.Schema not = 29;
  if (this->_internal_has_not_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::not_(this), target, stream);
  }

  // .openapi.v3.ItemsItem items = 30;
  if (this->_internal_has_items()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::items(this), target, stream);
  }

  // .openapi.v3.Properties properties = 31;
  if (this->_internal_has_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::properties(this), target, stream);
  }

  // .openapi.v3.AdditionalPropertiesItem additional_properties = 32;
  if (this->_internal_has_additional_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::additional_properties(this), target, stream);
  }

  // .openapi.v3.DefaultType default = 33;
  if (this->_internal_has_default_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::default_(this), target, stream);
  }

  // string description = 34;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Schema.description");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_description(), target);
  }

  // string format = 35;
  if (!this->_internal_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Schema.format");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_format(), target);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Schema)
  return target;
}

size_t Schema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Schema)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string required = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(required_.size());
  for (int i = 0, n = required_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      required_.Get(i));
  }

  // repeated .openapi.v3.Any enum = 24;
  total_size += 2UL * this->_internal_enum__size();
  for (const auto& msg : this->enum__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.SchemaOrReference all_of = 26;
  total_size += 2UL * this->_internal_all_of_size();
  for (const auto& msg : this->all_of_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.SchemaOrReference one_of = 27;
  total_size += 2UL * this->_internal_one_of_size();
  for (const auto& msg : this->one_of_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.SchemaOrReference any_of = 28;
  total_size += 2UL * this->_internal_any_of_size();
  for (const auto& msg : this->any_of_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 36;
  total_size += 2UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 9;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string pattern = 17;
  if (!this->_internal_pattern().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pattern());
  }

  // string type = 25;
  if (!this->_internal_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string description = 34;
  if (!this->_internal_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string format = 35;
  if (!this->_internal_format().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // .openapi.v3.Discriminator discriminator = 2;
  if (this->_internal_has_discriminator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *discriminator_);
  }

  // .openapi.v3.Xml xml = 5;
  if (this->_internal_has_xml()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *xml_);
  }

  // .openapi.v3.ExternalDocs external_docs = 6;
  if (this->_internal_has_external_docs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *external_docs_);
  }

  // .openapi.v3.Any example = 7;
  if (this->_internal_has_example()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *example_);
  }

  // .openapi.v3.Schema not = 29;
  if (this->_internal_has_not_()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *not__);
  }

  // .openapi.v3.ItemsItem items = 30;
  if (this->_internal_has_items()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *items_);
  }

  // .openapi.v3.Properties properties = 31;
  if (this->_internal_has_properties()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  // .openapi.v3.AdditionalPropertiesItem additional_properties = 32;
  if (this->_internal_has_additional_properties()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *additional_properties_);
  }

  // .openapi.v3.DefaultType default = 33;
  if (this->_internal_has_default_()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default__);
  }

  // bool nullable = 1;
  if (this->_internal_nullable() != 0) {
    total_size += 1 + 1;
  }

  // bool read_only = 3;
  if (this->_internal_read_only() != 0) {
    total_size += 1 + 1;
  }

  // bool write_only = 4;
  if (this->_internal_write_only() != 0) {
    total_size += 1 + 1;
  }

  // bool deprecated = 8;
  if (this->_internal_deprecated() != 0) {
    total_size += 1 + 1;
  }

  // bool exclusive_maximum = 12;
  if (this->_internal_exclusive_maximum() != 0) {
    total_size += 1 + 1;
  }

  // bool exclusive_minimum = 14;
  if (this->_internal_exclusive_minimum() != 0) {
    total_size += 1 + 1;
  }

  // bool unique_items = 20;
  if (this->_internal_unique_items() != 0) {
    total_size += 2 + 1;
  }

  // double multiple_of = 10;
  if (!(this->_internal_multiple_of() <= 0 && this->_internal_multiple_of() >= 0)) {
    total_size += 1 + 8;
  }

  // double maximum = 11;
  if (!(this->_internal_maximum() <= 0 && this->_internal_maximum() >= 0)) {
    total_size += 1 + 8;
  }

  // double minimum = 13;
  if (!(this->_internal_minimum() <= 0 && this->_internal_minimum() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 max_length = 15;
  if (this->_internal_max_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_length());
  }

  // int64 min_length = 16;
  if (this->_internal_min_length() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_length());
  }

  // int64 max_items = 18;
  if (this->_internal_max_items() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_items());
  }

  // int64 min_items = 19;
  if (this->_internal_min_items() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_items());
  }

  // int64 max_properties = 21;
  if (this->_internal_max_properties() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_properties());
  }

  // int64 min_properties = 22;
  if (this->_internal_min_properties() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_properties());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Schema::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Schema::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Schema::GetClassData() const { return &_class_data_; }

void Schema::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Schema *>(to)->MergeFrom(
      static_cast<const Schema &>(from));
}


void Schema::MergeFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  required_.MergeFrom(from.required_);
  enum__.MergeFrom(from.enum__);
  all_of_.MergeFrom(from.all_of_);
  one_of_.MergeFrom(from.one_of_);
  any_of_.MergeFrom(from.any_of_);
  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_pattern().empty()) {
    _internal_set_pattern(from._internal_pattern());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_format().empty()) {
    _internal_set_format(from._internal_format());
  }
  if (from._internal_has_discriminator()) {
    _internal_mutable_discriminator()->::openapi::v3::Discriminator::MergeFrom(from._internal_discriminator());
  }
  if (from._internal_has_xml()) {
    _internal_mutable_xml()->::openapi::v3::Xml::MergeFrom(from._internal_xml());
  }
  if (from._internal_has_external_docs()) {
    _internal_mutable_external_docs()->::openapi::v3::ExternalDocs::MergeFrom(from._internal_external_docs());
  }
  if (from._internal_has_example()) {
    _internal_mutable_example()->::openapi::v3::Any::MergeFrom(from._internal_example());
  }
  if (from._internal_has_not_()) {
    _internal_mutable_not_()->::openapi::v3::Schema::MergeFrom(from._internal_not_());
  }
  if (from._internal_has_items()) {
    _internal_mutable_items()->::openapi::v3::ItemsItem::MergeFrom(from._internal_items());
  }
  if (from._internal_has_properties()) {
    _internal_mutable_properties()->::openapi::v3::Properties::MergeFrom(from._internal_properties());
  }
  if (from._internal_has_additional_properties()) {
    _internal_mutable_additional_properties()->::openapi::v3::AdditionalPropertiesItem::MergeFrom(from._internal_additional_properties());
  }
  if (from._internal_has_default_()) {
    _internal_mutable_default_()->::openapi::v3::DefaultType::MergeFrom(from._internal_default_());
  }
  if (from._internal_nullable() != 0) {
    _internal_set_nullable(from._internal_nullable());
  }
  if (from._internal_read_only() != 0) {
    _internal_set_read_only(from._internal_read_only());
  }
  if (from._internal_write_only() != 0) {
    _internal_set_write_only(from._internal_write_only());
  }
  if (from._internal_deprecated() != 0) {
    _internal_set_deprecated(from._internal_deprecated());
  }
  if (from._internal_exclusive_maximum() != 0) {
    _internal_set_exclusive_maximum(from._internal_exclusive_maximum());
  }
  if (from._internal_exclusive_minimum() != 0) {
    _internal_set_exclusive_minimum(from._internal_exclusive_minimum());
  }
  if (from._internal_unique_items() != 0) {
    _internal_set_unique_items(from._internal_unique_items());
  }
  if (!(from._internal_multiple_of() <= 0 && from._internal_multiple_of() >= 0)) {
    _internal_set_multiple_of(from._internal_multiple_of());
  }
  if (!(from._internal_maximum() <= 0 && from._internal_maximum() >= 0)) {
    _internal_set_maximum(from._internal_maximum());
  }
  if (!(from._internal_minimum() <= 0 && from._internal_minimum() >= 0)) {
    _internal_set_minimum(from._internal_minimum());
  }
  if (from._internal_max_length() != 0) {
    _internal_set_max_length(from._internal_max_length());
  }
  if (from._internal_min_length() != 0) {
    _internal_set_min_length(from._internal_min_length());
  }
  if (from._internal_max_items() != 0) {
    _internal_set_max_items(from._internal_max_items());
  }
  if (from._internal_min_items() != 0) {
    _internal_set_min_items(from._internal_min_items());
  }
  if (from._internal_max_properties() != 0) {
    _internal_set_max_properties(from._internal_max_properties());
  }
  if (from._internal_min_properties() != 0) {
    _internal_set_min_properties(from._internal_min_properties());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Schema::CopyFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema::IsInitialized() const {
  return true;
}

void Schema::InternalSwap(Schema* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  required_.InternalSwap(&other->required_);
  enum__.InternalSwap(&other->enum__);
  all_of_.InternalSwap(&other->all_of_);
  one_of_.InternalSwap(&other->one_of_);
  any_of_.InternalSwap(&other->any_of_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, GetArenaForAllocation(),
      &other->title_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pattern_, GetArenaForAllocation(),
      &other->pattern_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &format_, GetArenaForAllocation(),
      &other->format_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Schema, min_properties_)
      + sizeof(Schema::min_properties_)
      - PROTOBUF_FIELD_OFFSET(Schema, discriminator_)>(
          reinterpret_cast<char*>(&discriminator_),
          reinterpret_cast<char*>(&other->discriminator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Schema::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[63]);
}

// ===================================================================

class SchemaOrReference::_Internal {
 public:
  static const ::openapi::v3::Schema& schema(const SchemaOrReference* msg);
  static const ::openapi::v3::Reference& reference(const SchemaOrReference* msg);
};

const ::openapi::v3::Schema&
SchemaOrReference::_Internal::schema(const SchemaOrReference* msg) {
  return *msg->oneof_.schema_;
}
const ::openapi::v3::Reference&
SchemaOrReference::_Internal::reference(const SchemaOrReference* msg) {
  return *msg->oneof_.reference_;
}
void SchemaOrReference::set_allocated_schema(::openapi::v3::Schema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Schema>::GetOwningArena(schema);
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    set_has_schema();
    oneof_.schema_ = schema;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.SchemaOrReference.schema)
}
void SchemaOrReference::set_allocated_reference(::openapi::v3::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Reference>::GetOwningArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    set_has_reference();
    oneof_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.SchemaOrReference.reference)
}
SchemaOrReference::SchemaOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.SchemaOrReference)
}
SchemaOrReference::SchemaOrReference(const SchemaOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof();
  switch (from.oneof_case()) {
    case kSchema: {
      _internal_mutable_schema()->::openapi::v3::Schema::MergeFrom(from._internal_schema());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.SchemaOrReference)
}

inline void SchemaOrReference::SharedCtor() {
clear_has_oneof();
}

SchemaOrReference::~SchemaOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.SchemaOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SchemaOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof()) {
    clear_oneof();
  }
}

void SchemaOrReference::ArenaDtor(void* object) {
  SchemaOrReference* _this = reinterpret_cast< SchemaOrReference* >(object);
  (void)_this;
}
void SchemaOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemaOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemaOrReference::clear_oneof() {
// @@protoc_insertion_point(one_of_clear_start:openapi.v3.SchemaOrReference)
  switch (oneof_case()) {
    case kSchema: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.schema_;
      }
      break;
    }
    case kReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.reference_;
      }
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void SchemaOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.SchemaOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemaOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.Schema schema = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Reference reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemaOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.SchemaOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.Schema schema = 1;
  if (_internal_has_schema()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::schema(this), target, stream);
  }

  // .openapi.v3.Reference reference = 2;
  if (_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.SchemaOrReference)
  return target;
}

size_t SchemaOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.SchemaOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_case()) {
    // .openapi.v3.Schema schema = 1;
    case kSchema: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.schema_);
      break;
    }
    // .openapi.v3.Reference reference = 2;
    case kReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.reference_);
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SchemaOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SchemaOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SchemaOrReference::GetClassData() const { return &_class_data_; }

void SchemaOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SchemaOrReference *>(to)->MergeFrom(
      static_cast<const SchemaOrReference &>(from));
}


void SchemaOrReference::MergeFrom(const SchemaOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.SchemaOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_case()) {
    case kSchema: {
      _internal_mutable_schema()->::openapi::v3::Schema::MergeFrom(from._internal_schema());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SchemaOrReference::CopyFrom(const SchemaOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.SchemaOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemaOrReference::IsInitialized() const {
  return true;
}

void SchemaOrReference::InternalSwap(SchemaOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_, other->oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemaOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[64]);
}

// ===================================================================

class SchemasOrReferences::_Internal {
 public:
};

SchemasOrReferences::SchemasOrReferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.SchemasOrReferences)
}
SchemasOrReferences::SchemasOrReferences(const SchemasOrReferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.SchemasOrReferences)
}

inline void SchemasOrReferences::SharedCtor() {
}

SchemasOrReferences::~SchemasOrReferences() {
  // @@protoc_insertion_point(destructor:openapi.v3.SchemasOrReferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SchemasOrReferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SchemasOrReferences::ArenaDtor(void* object) {
  SchemasOrReferences* _this = reinterpret_cast< SchemasOrReferences* >(object);
  (void)_this;
}
void SchemasOrReferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SchemasOrReferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SchemasOrReferences::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.SchemasOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchemasOrReferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedSchemaOrReference additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SchemasOrReferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.SchemasOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedSchemaOrReference additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.SchemasOrReferences)
  return target;
}

size_t SchemasOrReferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.SchemasOrReferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedSchemaOrReference additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SchemasOrReferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SchemasOrReferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SchemasOrReferences::GetClassData() const { return &_class_data_; }

void SchemasOrReferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SchemasOrReferences *>(to)->MergeFrom(
      static_cast<const SchemasOrReferences &>(from));
}


void SchemasOrReferences::MergeFrom(const SchemasOrReferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.SchemasOrReferences)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SchemasOrReferences::CopyFrom(const SchemasOrReferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.SchemasOrReferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchemasOrReferences::IsInitialized() const {
  return true;
}

void SchemasOrReferences::InternalSwap(SchemasOrReferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchemasOrReferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[65]);
}

// ===================================================================

class SecurityRequirement::_Internal {
 public:
};

SecurityRequirement::SecurityRequirement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.SecurityRequirement)
}
SecurityRequirement::SecurityRequirement(const SecurityRequirement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.SecurityRequirement)
}

inline void SecurityRequirement::SharedCtor() {
}

SecurityRequirement::~SecurityRequirement() {
  // @@protoc_insertion_point(destructor:openapi.v3.SecurityRequirement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SecurityRequirement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SecurityRequirement::ArenaDtor(void* object) {
  SecurityRequirement* _this = reinterpret_cast< SecurityRequirement* >(object);
  (void)_this;
}
void SecurityRequirement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecurityRequirement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecurityRequirement::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.SecurityRequirement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityRequirement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedStringArray additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecurityRequirement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.SecurityRequirement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedStringArray additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.SecurityRequirement)
  return target;
}

size_t SecurityRequirement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.SecurityRequirement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedStringArray additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityRequirement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SecurityRequirement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityRequirement::GetClassData() const { return &_class_data_; }

void SecurityRequirement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SecurityRequirement *>(to)->MergeFrom(
      static_cast<const SecurityRequirement &>(from));
}


void SecurityRequirement::MergeFrom(const SecurityRequirement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.SecurityRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityRequirement::CopyFrom(const SecurityRequirement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.SecurityRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityRequirement::IsInitialized() const {
  return true;
}

void SecurityRequirement::InternalSwap(SecurityRequirement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityRequirement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[66]);
}

// ===================================================================

class SecurityScheme::_Internal {
 public:
  static const ::openapi::v3::OauthFlows& flows(const SecurityScheme* msg);
};

const ::openapi::v3::OauthFlows&
SecurityScheme::_Internal::flows(const SecurityScheme* msg) {
  return *msg->flows_;
}
SecurityScheme::SecurityScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.SecurityScheme)
}
SecurityScheme::SecurityScheme(const SecurityScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  in_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_in().empty()) {
    in_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_in(), 
      GetArenaForAllocation());
  }
  scheme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scheme().empty()) {
    scheme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scheme(), 
      GetArenaForAllocation());
  }
  bearer_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bearer_format().empty()) {
    bearer_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bearer_format(), 
      GetArenaForAllocation());
  }
  open_id_connect_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_open_id_connect_url().empty()) {
    open_id_connect_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_open_id_connect_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_flows()) {
    flows_ = new ::openapi::v3::OauthFlows(*from.flows_);
  } else {
    flows_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.SecurityScheme)
}

inline void SecurityScheme::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
in_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scheme_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bearer_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
open_id_connect_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
flows_ = nullptr;
}

SecurityScheme::~SecurityScheme() {
  // @@protoc_insertion_point(destructor:openapi.v3.SecurityScheme)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SecurityScheme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  in_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scheme_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bearer_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  open_id_connect_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete flows_;
}

void SecurityScheme::ArenaDtor(void* object) {
  SecurityScheme* _this = reinterpret_cast< SecurityScheme* >(object);
  (void)_this;
}
void SecurityScheme::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecurityScheme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecurityScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.SecurityScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  type_.ClearToEmpty();
  description_.ClearToEmpty();
  name_.ClearToEmpty();
  in_.ClearToEmpty();
  scheme_.ClearToEmpty();
  bearer_format_.ClearToEmpty();
  open_id_connect_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && flows_ != nullptr) {
    delete flows_;
  }
  flows_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityScheme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.SecurityScheme.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.SecurityScheme.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.SecurityScheme.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string in = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_in();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.SecurityScheme.in"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scheme = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_scheme();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.SecurityScheme.scheme"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bearer_format = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_bearer_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.SecurityScheme.bearer_format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.OauthFlows flows = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_flows(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string open_id_connect_url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_open_id_connect_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.SecurityScheme.open_id_connect_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecurityScheme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.SecurityScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.SecurityScheme.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.SecurityScheme.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.SecurityScheme.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string in = 4;
  if (!this->_internal_in().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_in().data(), static_cast<int>(this->_internal_in().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.SecurityScheme.in");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_in(), target);
  }

  // string scheme = 5;
  if (!this->_internal_scheme().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scheme().data(), static_cast<int>(this->_internal_scheme().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.SecurityScheme.scheme");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_scheme(), target);
  }

  // string bearer_format = 6;
  if (!this->_internal_bearer_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bearer_format().data(), static_cast<int>(this->_internal_bearer_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.SecurityScheme.bearer_format");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bearer_format(), target);
  }

  // .openapi.v3.OauthFlows flows = 7;
  if (this->_internal_has_flows()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::flows(this), target, stream);
  }

  // string open_id_connect_url = 8;
  if (!this->_internal_open_id_connect_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_id_connect_url().data(), static_cast<int>(this->_internal_open_id_connect_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.SecurityScheme.open_id_connect_url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_open_id_connect_url(), target);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.SecurityScheme)
  return target;
}

size_t SecurityScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.SecurityScheme)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 9;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string in = 4;
  if (!this->_internal_in().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_in());
  }

  // string scheme = 5;
  if (!this->_internal_scheme().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scheme());
  }

  // string bearer_format = 6;
  if (!this->_internal_bearer_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bearer_format());
  }

  // string open_id_connect_url = 8;
  if (!this->_internal_open_id_connect_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_id_connect_url());
  }

  // .openapi.v3.OauthFlows flows = 7;
  if (this->_internal_has_flows()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flows_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityScheme::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SecurityScheme::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityScheme::GetClassData() const { return &_class_data_; }

void SecurityScheme::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SecurityScheme *>(to)->MergeFrom(
      static_cast<const SecurityScheme &>(from));
}


void SecurityScheme::MergeFrom(const SecurityScheme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.SecurityScheme)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_in().empty()) {
    _internal_set_in(from._internal_in());
  }
  if (!from._internal_scheme().empty()) {
    _internal_set_scheme(from._internal_scheme());
  }
  if (!from._internal_bearer_format().empty()) {
    _internal_set_bearer_format(from._internal_bearer_format());
  }
  if (!from._internal_open_id_connect_url().empty()) {
    _internal_set_open_id_connect_url(from._internal_open_id_connect_url());
  }
  if (from._internal_has_flows()) {
    _internal_mutable_flows()->::openapi::v3::OauthFlows::MergeFrom(from._internal_flows());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityScheme::CopyFrom(const SecurityScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.SecurityScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityScheme::IsInitialized() const {
  return true;
}

void SecurityScheme::InternalSwap(SecurityScheme* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &in_, GetArenaForAllocation(),
      &other->in_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scheme_, GetArenaForAllocation(),
      &other->scheme_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bearer_format_, GetArenaForAllocation(),
      &other->bearer_format_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &open_id_connect_url_, GetArenaForAllocation(),
      &other->open_id_connect_url_, other->GetArenaForAllocation()
  );
  swap(flows_, other->flows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityScheme::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[67]);
}

// ===================================================================

class SecuritySchemeOrReference::_Internal {
 public:
  static const ::openapi::v3::SecurityScheme& security_scheme(const SecuritySchemeOrReference* msg);
  static const ::openapi::v3::Reference& reference(const SecuritySchemeOrReference* msg);
};

const ::openapi::v3::SecurityScheme&
SecuritySchemeOrReference::_Internal::security_scheme(const SecuritySchemeOrReference* msg) {
  return *msg->oneof_.security_scheme_;
}
const ::openapi::v3::Reference&
SecuritySchemeOrReference::_Internal::reference(const SecuritySchemeOrReference* msg) {
  return *msg->oneof_.reference_;
}
void SecuritySchemeOrReference::set_allocated_security_scheme(::openapi::v3::SecurityScheme* security_scheme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (security_scheme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::SecurityScheme>::GetOwningArena(security_scheme);
    if (message_arena != submessage_arena) {
      security_scheme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, security_scheme, submessage_arena);
    }
    set_has_security_scheme();
    oneof_.security_scheme_ = security_scheme;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.SecuritySchemeOrReference.security_scheme)
}
void SecuritySchemeOrReference::set_allocated_reference(::openapi::v3::Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof();
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::openapi::v3::Reference>::GetOwningArena(reference);
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    set_has_reference();
    oneof_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:openapi.v3.SecuritySchemeOrReference.reference)
}
SecuritySchemeOrReference::SecuritySchemeOrReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.SecuritySchemeOrReference)
}
SecuritySchemeOrReference::SecuritySchemeOrReference(const SecuritySchemeOrReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof();
  switch (from.oneof_case()) {
    case kSecurityScheme: {
      _internal_mutable_security_scheme()->::openapi::v3::SecurityScheme::MergeFrom(from._internal_security_scheme());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.SecuritySchemeOrReference)
}

inline void SecuritySchemeOrReference::SharedCtor() {
clear_has_oneof();
}

SecuritySchemeOrReference::~SecuritySchemeOrReference() {
  // @@protoc_insertion_point(destructor:openapi.v3.SecuritySchemeOrReference)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SecuritySchemeOrReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof()) {
    clear_oneof();
  }
}

void SecuritySchemeOrReference::ArenaDtor(void* object) {
  SecuritySchemeOrReference* _this = reinterpret_cast< SecuritySchemeOrReference* >(object);
  (void)_this;
}
void SecuritySchemeOrReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecuritySchemeOrReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecuritySchemeOrReference::clear_oneof() {
// @@protoc_insertion_point(one_of_clear_start:openapi.v3.SecuritySchemeOrReference)
  switch (oneof_case()) {
    case kSecurityScheme: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.security_scheme_;
      }
      break;
    }
    case kReference: {
      if (GetArenaForAllocation() == nullptr) {
        delete oneof_.reference_;
      }
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void SecuritySchemeOrReference::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.SecuritySchemeOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecuritySchemeOrReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .openapi.v3.SecurityScheme security_scheme = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_scheme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.Reference reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecuritySchemeOrReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.SecuritySchemeOrReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .openapi.v3.SecurityScheme security_scheme = 1;
  if (_internal_has_security_scheme()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::security_scheme(this), target, stream);
  }

  // .openapi.v3.Reference reference = 2;
  if (_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.SecuritySchemeOrReference)
  return target;
}

size_t SecuritySchemeOrReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.SecuritySchemeOrReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_case()) {
    // .openapi.v3.SecurityScheme security_scheme = 1;
    case kSecurityScheme: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.security_scheme_);
      break;
    }
    // .openapi.v3.Reference reference = 2;
    case kReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oneof_.reference_);
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecuritySchemeOrReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SecuritySchemeOrReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecuritySchemeOrReference::GetClassData() const { return &_class_data_; }

void SecuritySchemeOrReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SecuritySchemeOrReference *>(to)->MergeFrom(
      static_cast<const SecuritySchemeOrReference &>(from));
}


void SecuritySchemeOrReference::MergeFrom(const SecuritySchemeOrReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.SecuritySchemeOrReference)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_case()) {
    case kSecurityScheme: {
      _internal_mutable_security_scheme()->::openapi::v3::SecurityScheme::MergeFrom(from._internal_security_scheme());
      break;
    }
    case kReference: {
      _internal_mutable_reference()->::openapi::v3::Reference::MergeFrom(from._internal_reference());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecuritySchemeOrReference::CopyFrom(const SecuritySchemeOrReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.SecuritySchemeOrReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecuritySchemeOrReference::IsInitialized() const {
  return true;
}

void SecuritySchemeOrReference::InternalSwap(SecuritySchemeOrReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_, other->oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecuritySchemeOrReference::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[68]);
}

// ===================================================================

class SecuritySchemesOrReferences::_Internal {
 public:
};

SecuritySchemesOrReferences::SecuritySchemesOrReferences(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.SecuritySchemesOrReferences)
}
SecuritySchemesOrReferences::SecuritySchemesOrReferences(const SecuritySchemesOrReferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.SecuritySchemesOrReferences)
}

inline void SecuritySchemesOrReferences::SharedCtor() {
}

SecuritySchemesOrReferences::~SecuritySchemesOrReferences() {
  // @@protoc_insertion_point(destructor:openapi.v3.SecuritySchemesOrReferences)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SecuritySchemesOrReferences::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SecuritySchemesOrReferences::ArenaDtor(void* object) {
  SecuritySchemesOrReferences* _this = reinterpret_cast< SecuritySchemesOrReferences* >(object);
  (void)_this;
}
void SecuritySchemesOrReferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecuritySchemesOrReferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecuritySchemesOrReferences::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.SecuritySchemesOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecuritySchemesOrReferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedSecuritySchemeOrReference additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecuritySchemesOrReferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.SecuritySchemesOrReferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedSecuritySchemeOrReference additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.SecuritySchemesOrReferences)
  return target;
}

size_t SecuritySchemesOrReferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.SecuritySchemesOrReferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedSecuritySchemeOrReference additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecuritySchemesOrReferences::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SecuritySchemesOrReferences::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecuritySchemesOrReferences::GetClassData() const { return &_class_data_; }

void SecuritySchemesOrReferences::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SecuritySchemesOrReferences *>(to)->MergeFrom(
      static_cast<const SecuritySchemesOrReferences &>(from));
}


void SecuritySchemesOrReferences::MergeFrom(const SecuritySchemesOrReferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.SecuritySchemesOrReferences)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecuritySchemesOrReferences::CopyFrom(const SecuritySchemesOrReferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.SecuritySchemesOrReferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecuritySchemesOrReferences::IsInitialized() const {
  return true;
}

void SecuritySchemesOrReferences::InternalSwap(SecuritySchemesOrReferences* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecuritySchemesOrReferences::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[69]);
}

// ===================================================================

class Server::_Internal {
 public:
  static const ::openapi::v3::ServerVariables& variables(const Server* msg);
};

const ::openapi::v3::ServerVariables&
Server::_Internal::variables(const Server* msg) {
  return *msg->variables_;
}
Server::Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Server)
}
Server::Server(const Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_variables()) {
    variables_ = new ::openapi::v3::ServerVariables(*from.variables_);
  } else {
    variables_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Server)
}

inline void Server::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
variables_ = nullptr;
}

Server::~Server() {
  // @@protoc_insertion_point(destructor:openapi.v3.Server)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete variables_;
}

void Server::ArenaDtor(void* object) {
  Server* _this = reinterpret_cast< Server* >(object);
  (void)_this;
}
void Server::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Server::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  url_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && variables_ != nullptr) {
    delete variables_;
  }
  variables_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Server.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Server.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ServerVariables variables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_variables(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Server::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Server.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Server.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .openapi.v3.ServerVariables variables = 3;
  if (this->_internal_has_variables()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::variables(this), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Server)
  return target;
}

size_t Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Server)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 4;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .openapi.v3.ServerVariables variables = 3;
  if (this->_internal_has_variables()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variables_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Server::GetClassData() const { return &_class_data_; }

void Server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Server *>(to)->MergeFrom(
      static_cast<const Server &>(from));
}


void Server::MergeFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Server)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_variables()) {
    _internal_mutable_variables()->::openapi::v3::ServerVariables::MergeFrom(from._internal_variables());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Server::CopyFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  return true;
}

void Server::InternalSwap(Server* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, GetArenaForAllocation(),
      &other->url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  swap(variables_, other->variables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Server::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[70]);
}

// ===================================================================

class ServerVariable::_Internal {
 public:
};

ServerVariable::ServerVariable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  enum__(arena),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.ServerVariable)
}
ServerVariable::ServerVariable(const ServerVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      enum__(from.enum__),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  default__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_default_().empty()) {
    default__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_default_(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.ServerVariable)
}

inline void ServerVariable::SharedCtor() {
default__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServerVariable::~ServerVariable() {
  // @@protoc_insertion_point(destructor:openapi.v3.ServerVariable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerVariable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  default__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerVariable::ArenaDtor(void* object) {
  ServerVariable* _this = reinterpret_cast< ServerVariable* >(object);
  (void)_this;
}
void ServerVariable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.ServerVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enum__.Clear();
  specification_extension_.Clear();
  default__.ClearToEmpty();
  description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string enum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_enum_();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.ServerVariable.enum"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_default_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.ServerVariable.default"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.ServerVariable.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerVariable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.ServerVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string enum = 1;
  for (int i = 0, n = this->_internal_enum__size(); i < n; i++) {
    const auto& s = this->_internal_enum_(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.ServerVariable.enum");
    target = stream->WriteString(1, s, target);
  }

  // string default = 2;
  if (!this->_internal_default_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_().data(), static_cast<int>(this->_internal_default_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.ServerVariable.default");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_default_(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.ServerVariable.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.ServerVariable)
  return target;
}

size_t ServerVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.ServerVariable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string enum = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(enum__.size());
  for (int i = 0, n = enum__.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      enum__.Get(i));
  }

  // repeated .openapi.v3.NamedAny specification_extension = 4;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string default = 2;
  if (!this->_internal_default_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerVariable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerVariable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerVariable::GetClassData() const { return &_class_data_; }

void ServerVariable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ServerVariable *>(to)->MergeFrom(
      static_cast<const ServerVariable &>(from));
}


void ServerVariable::MergeFrom(const ServerVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.ServerVariable)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enum__.MergeFrom(from.enum__);
  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_default_().empty()) {
    _internal_set_default_(from._internal_default_());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerVariable::CopyFrom(const ServerVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.ServerVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerVariable::IsInitialized() const {
  return true;
}

void ServerVariable::InternalSwap(ServerVariable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  enum__.InternalSwap(&other->enum__);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &default__, GetArenaForAllocation(),
      &other->default__, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerVariable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[71]);
}

// ===================================================================

class ServerVariables::_Internal {
 public:
};

ServerVariables::ServerVariables(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.ServerVariables)
}
ServerVariables::ServerVariables(const ServerVariables& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.ServerVariables)
}

inline void ServerVariables::SharedCtor() {
}

ServerVariables::~ServerVariables() {
  // @@protoc_insertion_point(destructor:openapi.v3.ServerVariables)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerVariables::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerVariables::ArenaDtor(void* object) {
  ServerVariables* _this = reinterpret_cast< ServerVariables* >(object);
  (void)_this;
}
void ServerVariables::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerVariables::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerVariables::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.ServerVariables)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerVariables::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedServerVariable additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerVariables::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.ServerVariables)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedServerVariable additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.ServerVariables)
  return target;
}

size_t ServerVariables::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.ServerVariables)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedServerVariable additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerVariables::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerVariables::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerVariables::GetClassData() const { return &_class_data_; }

void ServerVariables::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ServerVariables *>(to)->MergeFrom(
      static_cast<const ServerVariables &>(from));
}


void ServerVariables::MergeFrom(const ServerVariables& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.ServerVariables)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerVariables::CopyFrom(const ServerVariables& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.ServerVariables)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerVariables::IsInitialized() const {
  return true;
}

void ServerVariables::InternalSwap(ServerVariables* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerVariables::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[72]);
}

// ===================================================================

class SpecificationExtension::_Internal {
 public:
};

SpecificationExtension::SpecificationExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.SpecificationExtension)
}
SpecificationExtension::SpecificationExtension(const SpecificationExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_oneof();
  switch (from.oneof_case()) {
    case kNumber: {
      _internal_set_number(from._internal_number());
      break;
    }
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.SpecificationExtension)
}

inline void SpecificationExtension::SharedCtor() {
clear_has_oneof();
}

SpecificationExtension::~SpecificationExtension() {
  // @@protoc_insertion_point(destructor:openapi.v3.SpecificationExtension)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpecificationExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof()) {
    clear_oneof();
  }
}

void SpecificationExtension::ArenaDtor(void* object) {
  SpecificationExtension* _this = reinterpret_cast< SpecificationExtension* >(object);
  (void)_this;
}
void SpecificationExtension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecificationExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpecificationExtension::clear_oneof() {
// @@protoc_insertion_point(one_of_clear_start:openapi.v3.SpecificationExtension)
  switch (oneof_case()) {
    case kNumber: {
      // No need to clear
      break;
    }
    case kBoolean: {
      // No need to clear
      break;
    }
    case kString: {
      oneof_.string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void SpecificationExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.SpecificationExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecificationExtension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _internal_set_number(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool boolean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_boolean(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.SpecificationExtension.string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecificationExtension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.SpecificationExtension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double number = 1;
  if (_internal_has_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_number(), target);
  }

  // bool boolean = 2;
  if (_internal_has_boolean()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_boolean(), target);
  }

  // string string = 3;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.SpecificationExtension.string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.SpecificationExtension)
  return target;
}

size_t SpecificationExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.SpecificationExtension)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (oneof_case()) {
    // double number = 1;
    case kNumber: {
      total_size += 1 + 8;
      break;
    }
    // bool boolean = 2;
    case kBoolean: {
      total_size += 1 + 1;
      break;
    }
    // string string = 3;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpecificationExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpecificationExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpecificationExtension::GetClassData() const { return &_class_data_; }

void SpecificationExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SpecificationExtension *>(to)->MergeFrom(
      static_cast<const SpecificationExtension &>(from));
}


void SpecificationExtension::MergeFrom(const SpecificationExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.SpecificationExtension)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.oneof_case()) {
    case kNumber: {
      _internal_set_number(from._internal_number());
      break;
    }
    case kBoolean: {
      _internal_set_boolean(from._internal_boolean());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpecificationExtension::CopyFrom(const SpecificationExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.SpecificationExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecificationExtension::IsInitialized() const {
  return true;
}

void SpecificationExtension::InternalSwap(SpecificationExtension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oneof_, other->oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecificationExtension::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[73]);
}

// ===================================================================

class StringArray::_Internal {
 public:
};

StringArray::StringArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.StringArray)
}
StringArray::StringArray(const StringArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.StringArray)
}

inline void StringArray::SharedCtor() {
}

StringArray::~StringArray() {
  // @@protoc_insertion_point(destructor:openapi.v3.StringArray)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StringArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StringArray::ArenaDtor(void* object) {
  StringArray* _this = reinterpret_cast< StringArray* >(object);
  (void)_this;
}
void StringArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringArray::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.StringArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.StringArray.value"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.StringArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string value = 1;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.StringArray.value");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.StringArray)
  return target;
}

size_t StringArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.StringArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StringArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringArray::GetClassData() const { return &_class_data_; }

void StringArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StringArray *>(to)->MergeFrom(
      static_cast<const StringArray &>(from));
}


void StringArray::MergeFrom(const StringArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.StringArray)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringArray::CopyFrom(const StringArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.StringArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringArray::IsInitialized() const {
  return true;
}

void StringArray::InternalSwap(StringArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[74]);
}

// ===================================================================

class Strings::_Internal {
 public:
};

Strings::Strings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  additional_properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Strings)
}
Strings::Strings(const Strings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      additional_properties_(from.additional_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Strings)
}

inline void Strings::SharedCtor() {
}

Strings::~Strings() {
  // @@protoc_insertion_point(destructor:openapi.v3.Strings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Strings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Strings::ArenaDtor(void* object) {
  Strings* _this = reinterpret_cast< Strings* >(object);
  (void)_this;
}
void Strings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Strings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Strings::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Strings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Strings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .openapi.v3.NamedString additional_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Strings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Strings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedString additional_properties = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Strings)
  return target;
}

size_t Strings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Strings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedString additional_properties = 1;
  total_size += 1UL * this->_internal_additional_properties_size();
  for (const auto& msg : this->additional_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Strings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Strings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Strings::GetClassData() const { return &_class_data_; }

void Strings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Strings *>(to)->MergeFrom(
      static_cast<const Strings &>(from));
}


void Strings::MergeFrom(const Strings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Strings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_properties_.MergeFrom(from.additional_properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Strings::CopyFrom(const Strings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Strings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Strings::IsInitialized() const {
  return true;
}

void Strings::InternalSwap(Strings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  additional_properties_.InternalSwap(&other->additional_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Strings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[75]);
}

// ===================================================================

class Tag::_Internal {
 public:
  static const ::openapi::v3::ExternalDocs& external_docs(const Tag* msg);
};

const ::openapi::v3::ExternalDocs&
Tag::_Internal::external_docs(const Tag* msg) {
  return *msg->external_docs_;
}
Tag::Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Tag)
}
Tag::Tag(const Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_external_docs()) {
    external_docs_ = new ::openapi::v3::ExternalDocs(*from.external_docs_);
  } else {
    external_docs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Tag)
}

inline void Tag::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
external_docs_ = nullptr;
}

Tag::~Tag() {
  // @@protoc_insertion_point(destructor:openapi.v3.Tag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete external_docs_;
}

void Tag::ArenaDtor(void* object) {
  Tag* _this = reinterpret_cast< Tag* >(object);
  (void)_this;
}
void Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && external_docs_ != nullptr) {
    delete external_docs_;
  }
  external_docs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Tag.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Tag.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .openapi.v3.ExternalDocs external_docs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_docs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Tag.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Tag.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .openapi.v3.ExternalDocs external_docs = 3;
  if (this->_internal_has_external_docs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::external_docs(this), target, stream);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Tag)
  return target;
}

size_t Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Tag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 4;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .openapi.v3.ExternalDocs external_docs = 3;
  if (this->_internal_has_external_docs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *external_docs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Tag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tag::GetClassData() const { return &_class_data_; }

void Tag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Tag *>(to)->MergeFrom(
      static_cast<const Tag &>(from));
}


void Tag::MergeFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_has_external_docs()) {
    _internal_mutable_external_docs()->::openapi::v3::ExternalDocs::MergeFrom(from._internal_external_docs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tag::CopyFrom(const Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tag::IsInitialized() const {
  return true;
}

void Tag::InternalSwap(Tag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  swap(external_docs_, other->external_docs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[76]);
}

// ===================================================================

class Xml::_Internal {
 public:
};

Xml::Xml(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  specification_extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:openapi.v3.Xml)
}
Xml::Xml(const Xml& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      specification_extension_(from.specification_extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prefix().empty()) {
    prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prefix(), 
      GetArenaForAllocation());
  }
  ::memcpy(&attribute_, &from.attribute_,
    static_cast<size_t>(reinterpret_cast<char*>(&wrapped_) -
    reinterpret_cast<char*>(&attribute_)) + sizeof(wrapped_));
  // @@protoc_insertion_point(copy_constructor:openapi.v3.Xml)
}

inline void Xml::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attribute_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wrapped_) -
    reinterpret_cast<char*>(&attribute_)) + sizeof(wrapped_));
}

Xml::~Xml() {
  // @@protoc_insertion_point(destructor:openapi.v3.Xml)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Xml::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Xml::ArenaDtor(void* object) {
  Xml* _this = reinterpret_cast< Xml* >(object);
  (void)_this;
}
void Xml::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Xml::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Xml::Clear() {
// @@protoc_insertion_point(message_clear_start:openapi.v3.Xml)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  specification_extension_.Clear();
  name_.ClearToEmpty();
  namespace__.ClearToEmpty();
  prefix_.ClearToEmpty();
  ::memset(&attribute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wrapped_) -
      reinterpret_cast<char*>(&attribute_)) + sizeof(wrapped_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Xml::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Xml.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Xml.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "openapi.v3.Xml.prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool attribute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool wrapped = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          wrapped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .openapi.v3.NamedAny specification_extension = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_specification_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Xml::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:openapi.v3.Xml)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Xml.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string namespace = 2;
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Xml.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // string prefix = 3;
  if (!this->_internal_prefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "openapi.v3.Xml.prefix");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prefix(), target);
  }

  // bool attribute = 4;
  if (this->_internal_attribute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_attribute(), target);
  }

  // bool wrapped = 5;
  if (this->_internal_wrapped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_wrapped(), target);
  }

  // repeated .openapi.v3.NamedAny specification_extension = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_specification_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_specification_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openapi.v3.Xml)
  return target;
}

size_t Xml::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openapi.v3.Xml)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .openapi.v3.NamedAny specification_extension = 6;
  total_size += 1UL * this->_internal_specification_extension_size();
  for (const auto& msg : this->specification_extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string namespace = 2;
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string prefix = 3;
  if (!this->_internal_prefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prefix());
  }

  // bool attribute = 4;
  if (this->_internal_attribute() != 0) {
    total_size += 1 + 1;
  }

  // bool wrapped = 5;
  if (this->_internal_wrapped() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Xml::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Xml::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Xml::GetClassData() const { return &_class_data_; }

void Xml::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Xml *>(to)->MergeFrom(
      static_cast<const Xml &>(from));
}


void Xml::MergeFrom(const Xml& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openapi.v3.Xml)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  specification_extension_.MergeFrom(from.specification_extension_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_prefix().empty()) {
    _internal_set_prefix(from._internal_prefix());
  }
  if (from._internal_attribute() != 0) {
    _internal_set_attribute(from._internal_attribute());
  }
  if (from._internal_wrapped() != 0) {
    _internal_set_wrapped(from._internal_wrapped());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Xml::CopyFrom(const Xml& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openapi.v3.Xml)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Xml::IsInitialized() const {
  return true;
}

void Xml::InternalSwap(Xml* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  specification_extension_.InternalSwap(&other->specification_extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &namespace__, GetArenaForAllocation(),
      &other->namespace__, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prefix_, GetArenaForAllocation(),
      &other->prefix_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Xml, wrapped_)
      + sizeof(Xml::wrapped_)
      - PROTOBUF_FIELD_OFFSET(Xml, attribute_)>(
          reinterpret_cast<char*>(&attribute_),
          reinterpret_cast<char*>(&other->attribute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Xml::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_getter, &descriptor_table_openapiv3_2fOpenAPIv3_2eproto_once,
      file_level_metadata_openapiv3_2fOpenAPIv3_2eproto[77]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v3
}  // namespace openapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::openapi::v3::AdditionalPropertiesItem* Arena::CreateMaybeMessage< ::openapi::v3::AdditionalPropertiesItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::AdditionalPropertiesItem >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Any* Arena::CreateMaybeMessage< ::openapi::v3::Any >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Any >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::AnyOrExpression* Arena::CreateMaybeMessage< ::openapi::v3::AnyOrExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::AnyOrExpression >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Callback* Arena::CreateMaybeMessage< ::openapi::v3::Callback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Callback >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::CallbackOrReference* Arena::CreateMaybeMessage< ::openapi::v3::CallbackOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::CallbackOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::CallbacksOrReferences* Arena::CreateMaybeMessage< ::openapi::v3::CallbacksOrReferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::CallbacksOrReferences >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Components* Arena::CreateMaybeMessage< ::openapi::v3::Components >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Components >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Contact* Arena::CreateMaybeMessage< ::openapi::v3::Contact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Contact >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::DefaultType* Arena::CreateMaybeMessage< ::openapi::v3::DefaultType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::DefaultType >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Discriminator* Arena::CreateMaybeMessage< ::openapi::v3::Discriminator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Discriminator >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Document* Arena::CreateMaybeMessage< ::openapi::v3::Document >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Document >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Encoding* Arena::CreateMaybeMessage< ::openapi::v3::Encoding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Encoding >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Encodings* Arena::CreateMaybeMessage< ::openapi::v3::Encodings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Encodings >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Example* Arena::CreateMaybeMessage< ::openapi::v3::Example >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Example >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::ExampleOrReference* Arena::CreateMaybeMessage< ::openapi::v3::ExampleOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::ExampleOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::ExamplesOrReferences* Arena::CreateMaybeMessage< ::openapi::v3::ExamplesOrReferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::ExamplesOrReferences >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Expression* Arena::CreateMaybeMessage< ::openapi::v3::Expression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Expression >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::ExternalDocs* Arena::CreateMaybeMessage< ::openapi::v3::ExternalDocs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::ExternalDocs >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Header* Arena::CreateMaybeMessage< ::openapi::v3::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::HeaderOrReference* Arena::CreateMaybeMessage< ::openapi::v3::HeaderOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::HeaderOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::HeadersOrReferences* Arena::CreateMaybeMessage< ::openapi::v3::HeadersOrReferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::HeadersOrReferences >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Info* Arena::CreateMaybeMessage< ::openapi::v3::Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Info >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::ItemsItem* Arena::CreateMaybeMessage< ::openapi::v3::ItemsItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::ItemsItem >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::License* Arena::CreateMaybeMessage< ::openapi::v3::License >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::License >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Link* Arena::CreateMaybeMessage< ::openapi::v3::Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Link >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::LinkOrReference* Arena::CreateMaybeMessage< ::openapi::v3::LinkOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::LinkOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::LinksOrReferences* Arena::CreateMaybeMessage< ::openapi::v3::LinksOrReferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::LinksOrReferences >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::MediaType* Arena::CreateMaybeMessage< ::openapi::v3::MediaType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::MediaType >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::MediaTypes* Arena::CreateMaybeMessage< ::openapi::v3::MediaTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::MediaTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedAny* Arena::CreateMaybeMessage< ::openapi::v3::NamedAny >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedAny >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedCallbackOrReference* Arena::CreateMaybeMessage< ::openapi::v3::NamedCallbackOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedCallbackOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedEncoding* Arena::CreateMaybeMessage< ::openapi::v3::NamedEncoding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedEncoding >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedExampleOrReference* Arena::CreateMaybeMessage< ::openapi::v3::NamedExampleOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedExampleOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedHeaderOrReference* Arena::CreateMaybeMessage< ::openapi::v3::NamedHeaderOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedHeaderOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedLinkOrReference* Arena::CreateMaybeMessage< ::openapi::v3::NamedLinkOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedLinkOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedMediaType* Arena::CreateMaybeMessage< ::openapi::v3::NamedMediaType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedMediaType >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedParameterOrReference* Arena::CreateMaybeMessage< ::openapi::v3::NamedParameterOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedParameterOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedPathItem* Arena::CreateMaybeMessage< ::openapi::v3::NamedPathItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedPathItem >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedRequestBodyOrReference* Arena::CreateMaybeMessage< ::openapi::v3::NamedRequestBodyOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedRequestBodyOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedResponseOrReference* Arena::CreateMaybeMessage< ::openapi::v3::NamedResponseOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedResponseOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedSchemaOrReference* Arena::CreateMaybeMessage< ::openapi::v3::NamedSchemaOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedSchemaOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedSecuritySchemeOrReference* Arena::CreateMaybeMessage< ::openapi::v3::NamedSecuritySchemeOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedSecuritySchemeOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedServerVariable* Arena::CreateMaybeMessage< ::openapi::v3::NamedServerVariable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedServerVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedString* Arena::CreateMaybeMessage< ::openapi::v3::NamedString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedString >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::NamedStringArray* Arena::CreateMaybeMessage< ::openapi::v3::NamedStringArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::NamedStringArray >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::OauthFlow* Arena::CreateMaybeMessage< ::openapi::v3::OauthFlow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::OauthFlow >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::OauthFlows* Arena::CreateMaybeMessage< ::openapi::v3::OauthFlows >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::OauthFlows >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Object* Arena::CreateMaybeMessage< ::openapi::v3::Object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Operation* Arena::CreateMaybeMessage< ::openapi::v3::Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Parameter* Arena::CreateMaybeMessage< ::openapi::v3::Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::ParameterOrReference* Arena::CreateMaybeMessage< ::openapi::v3::ParameterOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::ParameterOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::ParametersOrReferences* Arena::CreateMaybeMessage< ::openapi::v3::ParametersOrReferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::ParametersOrReferences >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::PathItem* Arena::CreateMaybeMessage< ::openapi::v3::PathItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::PathItem >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Paths* Arena::CreateMaybeMessage< ::openapi::v3::Paths >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Paths >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Properties* Arena::CreateMaybeMessage< ::openapi::v3::Properties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Properties >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Reference* Arena::CreateMaybeMessage< ::openapi::v3::Reference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Reference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::RequestBodiesOrReferences* Arena::CreateMaybeMessage< ::openapi::v3::RequestBodiesOrReferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::RequestBodiesOrReferences >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::RequestBody* Arena::CreateMaybeMessage< ::openapi::v3::RequestBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::RequestBody >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::RequestBodyOrReference* Arena::CreateMaybeMessage< ::openapi::v3::RequestBodyOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::RequestBodyOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Response* Arena::CreateMaybeMessage< ::openapi::v3::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::ResponseOrReference* Arena::CreateMaybeMessage< ::openapi::v3::ResponseOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::ResponseOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Responses* Arena::CreateMaybeMessage< ::openapi::v3::Responses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Responses >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::ResponsesOrReferences* Arena::CreateMaybeMessage< ::openapi::v3::ResponsesOrReferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::ResponsesOrReferences >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Schema* Arena::CreateMaybeMessage< ::openapi::v3::Schema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Schema >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::SchemaOrReference* Arena::CreateMaybeMessage< ::openapi::v3::SchemaOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::SchemaOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::SchemasOrReferences* Arena::CreateMaybeMessage< ::openapi::v3::SchemasOrReferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::SchemasOrReferences >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::SecurityRequirement* Arena::CreateMaybeMessage< ::openapi::v3::SecurityRequirement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::SecurityRequirement >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::SecurityScheme* Arena::CreateMaybeMessage< ::openapi::v3::SecurityScheme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::SecurityScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::SecuritySchemeOrReference* Arena::CreateMaybeMessage< ::openapi::v3::SecuritySchemeOrReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::SecuritySchemeOrReference >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::SecuritySchemesOrReferences* Arena::CreateMaybeMessage< ::openapi::v3::SecuritySchemesOrReferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::SecuritySchemesOrReferences >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Server* Arena::CreateMaybeMessage< ::openapi::v3::Server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Server >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::ServerVariable* Arena::CreateMaybeMessage< ::openapi::v3::ServerVariable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::ServerVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::ServerVariables* Arena::CreateMaybeMessage< ::openapi::v3::ServerVariables >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::ServerVariables >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::SpecificationExtension* Arena::CreateMaybeMessage< ::openapi::v3::SpecificationExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::SpecificationExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::StringArray* Arena::CreateMaybeMessage< ::openapi::v3::StringArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::StringArray >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Strings* Arena::CreateMaybeMessage< ::openapi::v3::Strings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Strings >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Tag* Arena::CreateMaybeMessage< ::openapi::v3::Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::openapi::v3::Xml* Arena::CreateMaybeMessage< ::openapi::v3::Xml >(Arena* arena) {
  return Arena::CreateMessageInternal< ::openapi::v3::Xml >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
