// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/standards/kcs4.proto

#include "koinos/standards/kcs4.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace standards {
namespace kcs4 {
constexpr name_arguments::name_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct name_argumentsDefaultTypeInternal {
  constexpr name_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~name_argumentsDefaultTypeInternal() {}
  union {
    name_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT name_argumentsDefaultTypeInternal _name_arguments_default_instance_;
constexpr name_result::name_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct name_resultDefaultTypeInternal {
  constexpr name_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~name_resultDefaultTypeInternal() {}
  union {
    name_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT name_resultDefaultTypeInternal _name_result_default_instance_;
constexpr symbol_arguments::symbol_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct symbol_argumentsDefaultTypeInternal {
  constexpr symbol_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~symbol_argumentsDefaultTypeInternal() {}
  union {
    symbol_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT symbol_argumentsDefaultTypeInternal _symbol_arguments_default_instance_;
constexpr symbol_result::symbol_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct symbol_resultDefaultTypeInternal {
  constexpr symbol_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~symbol_resultDefaultTypeInternal() {}
  union {
    symbol_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT symbol_resultDefaultTypeInternal _symbol_result_default_instance_;
constexpr decimals_arguments::decimals_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct decimals_argumentsDefaultTypeInternal {
  constexpr decimals_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~decimals_argumentsDefaultTypeInternal() {}
  union {
    decimals_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT decimals_argumentsDefaultTypeInternal _decimals_arguments_default_instance_;
constexpr decimals_result::decimals_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u){}
struct decimals_resultDefaultTypeInternal {
  constexpr decimals_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~decimals_resultDefaultTypeInternal() {}
  union {
    decimals_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT decimals_resultDefaultTypeInternal _decimals_result_default_instance_;
constexpr total_supply_arguments::total_supply_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct total_supply_argumentsDefaultTypeInternal {
  constexpr total_supply_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~total_supply_argumentsDefaultTypeInternal() {}
  union {
    total_supply_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT total_supply_argumentsDefaultTypeInternal _total_supply_arguments_default_instance_;
constexpr total_supply_result::total_supply_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct total_supply_resultDefaultTypeInternal {
  constexpr total_supply_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~total_supply_resultDefaultTypeInternal() {}
  union {
    total_supply_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT total_supply_resultDefaultTypeInternal _total_supply_result_default_instance_;
constexpr balance_of_arguments::balance_of_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct balance_of_argumentsDefaultTypeInternal {
  constexpr balance_of_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~balance_of_argumentsDefaultTypeInternal() {}
  union {
    balance_of_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT balance_of_argumentsDefaultTypeInternal _balance_of_arguments_default_instance_;
constexpr balance_of_result::balance_of_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct balance_of_resultDefaultTypeInternal {
  constexpr balance_of_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~balance_of_resultDefaultTypeInternal() {}
  union {
    balance_of_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT balance_of_resultDefaultTypeInternal _balance_of_result_default_instance_;
constexpr get_info_arguments::get_info_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_info_argumentsDefaultTypeInternal {
  constexpr get_info_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_info_argumentsDefaultTypeInternal() {}
  union {
    get_info_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_info_argumentsDefaultTypeInternal _get_info_arguments_default_instance_;
constexpr get_info_result::get_info_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , decimals_(0u){}
struct get_info_resultDefaultTypeInternal {
  constexpr get_info_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_info_resultDefaultTypeInternal() {}
  union {
    get_info_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_info_resultDefaultTypeInternal _get_info_result_default_instance_;
constexpr allowance_arguments::allowance_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct allowance_argumentsDefaultTypeInternal {
  constexpr allowance_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~allowance_argumentsDefaultTypeInternal() {}
  union {
    allowance_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT allowance_argumentsDefaultTypeInternal _allowance_arguments_default_instance_;
constexpr allowance_result::allowance_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct allowance_resultDefaultTypeInternal {
  constexpr allowance_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~allowance_resultDefaultTypeInternal() {}
  union {
    allowance_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT allowance_resultDefaultTypeInternal _allowance_result_default_instance_;
constexpr spender_value::spender_value(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct spender_valueDefaultTypeInternal {
  constexpr spender_valueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~spender_valueDefaultTypeInternal() {}
  union {
    spender_value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT spender_valueDefaultTypeInternal _spender_value_default_instance_;
constexpr get_allowances_arguments::get_allowances_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , limit_(0)
  , descending_(false){}
struct get_allowances_argumentsDefaultTypeInternal {
  constexpr get_allowances_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_allowances_argumentsDefaultTypeInternal() {}
  union {
    get_allowances_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_allowances_argumentsDefaultTypeInternal _get_allowances_arguments_default_instance_;
constexpr get_allowances_result::get_allowances_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allowances_()
  , owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_allowances_resultDefaultTypeInternal {
  constexpr get_allowances_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_allowances_resultDefaultTypeInternal() {}
  union {
    get_allowances_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_allowances_resultDefaultTypeInternal _get_allowances_result_default_instance_;
constexpr transfer_arguments::transfer_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct transfer_argumentsDefaultTypeInternal {
  constexpr transfer_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transfer_argumentsDefaultTypeInternal() {}
  union {
    transfer_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transfer_argumentsDefaultTypeInternal _transfer_arguments_default_instance_;
constexpr transfer_result::transfer_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct transfer_resultDefaultTypeInternal {
  constexpr transfer_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transfer_resultDefaultTypeInternal() {}
  union {
    transfer_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transfer_resultDefaultTypeInternal _transfer_result_default_instance_;
constexpr mint_arguments::mint_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct mint_argumentsDefaultTypeInternal {
  constexpr mint_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mint_argumentsDefaultTypeInternal() {}
  union {
    mint_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mint_argumentsDefaultTypeInternal _mint_arguments_default_instance_;
constexpr mint_result::mint_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct mint_resultDefaultTypeInternal {
  constexpr mint_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mint_resultDefaultTypeInternal() {}
  union {
    mint_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mint_resultDefaultTypeInternal _mint_result_default_instance_;
constexpr burn_arguments::burn_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct burn_argumentsDefaultTypeInternal {
  constexpr burn_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~burn_argumentsDefaultTypeInternal() {}
  union {
    burn_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT burn_argumentsDefaultTypeInternal _burn_arguments_default_instance_;
constexpr burn_result::burn_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct burn_resultDefaultTypeInternal {
  constexpr burn_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~burn_resultDefaultTypeInternal() {}
  union {
    burn_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT burn_resultDefaultTypeInternal _burn_result_default_instance_;
constexpr approve_arguments::approve_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct approve_argumentsDefaultTypeInternal {
  constexpr approve_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~approve_argumentsDefaultTypeInternal() {}
  union {
    approve_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT approve_argumentsDefaultTypeInternal _approve_arguments_default_instance_;
constexpr approve_result::approve_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct approve_resultDefaultTypeInternal {
  constexpr approve_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~approve_resultDefaultTypeInternal() {}
  union {
    approve_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT approve_resultDefaultTypeInternal _approve_result_default_instance_;
constexpr burn_event::burn_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct burn_eventDefaultTypeInternal {
  constexpr burn_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~burn_eventDefaultTypeInternal() {}
  union {
    burn_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT burn_eventDefaultTypeInternal _burn_event_default_instance_;
constexpr mint_event::mint_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct mint_eventDefaultTypeInternal {
  constexpr mint_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mint_eventDefaultTypeInternal() {}
  union {
    mint_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mint_eventDefaultTypeInternal _mint_event_default_instance_;
constexpr transfer_event::transfer_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct transfer_eventDefaultTypeInternal {
  constexpr transfer_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transfer_eventDefaultTypeInternal() {}
  union {
    transfer_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transfer_eventDefaultTypeInternal _transfer_event_default_instance_;
constexpr approve_event::approve_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct approve_eventDefaultTypeInternal {
  constexpr approve_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~approve_eventDefaultTypeInternal() {}
  union {
    approve_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT approve_eventDefaultTypeInternal _approve_event_default_instance_;
constexpr balance_object::balance_object(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct balance_objectDefaultTypeInternal {
  constexpr balance_objectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~balance_objectDefaultTypeInternal() {}
  union {
    balance_object _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT balance_objectDefaultTypeInternal _balance_object_default_instance_;
}  // namespace kcs4
}  // namespace standards
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[30];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fstandards_2fkcs4_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fstandards_2fkcs4_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fstandards_2fkcs4_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::name_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::name_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::name_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::symbol_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::symbol_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::symbol_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::decimals_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::decimals_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::decimals_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::total_supply_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::total_supply_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::total_supply_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::balance_of_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::balance_of_arguments, owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::balance_of_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::balance_of_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::get_info_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::get_info_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::get_info_result, name_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::get_info_result, symbol_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::get_info_result, decimals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::allowance_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::allowance_arguments, owner_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::allowance_arguments, spender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::allowance_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::allowance_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::spender_value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::spender_value, spender_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::spender_value, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::get_allowances_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::get_allowances_arguments, owner_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::get_allowances_arguments, start_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::get_allowances_arguments, limit_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::get_allowances_arguments, descending_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::get_allowances_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::get_allowances_result, owner_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::get_allowances_result, allowances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::transfer_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::transfer_arguments, from_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::transfer_arguments, to_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::transfer_arguments, value_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::transfer_arguments, memo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::transfer_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::mint_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::mint_arguments, to_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::mint_arguments, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::mint_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::burn_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::burn_arguments, from_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::burn_arguments, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::burn_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::approve_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::approve_arguments, owner_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::approve_arguments, spender_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::approve_arguments, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::approve_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::burn_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::burn_event, from_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::burn_event, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::mint_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::mint_event, to_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::mint_event, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::transfer_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::transfer_event, from_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::transfer_event, to_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::transfer_event, value_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::transfer_event, memo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::approve_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::approve_event, owner_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::approve_event, spender_),
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::approve_event, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::balance_object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::standards::kcs4::balance_object, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::standards::kcs4::name_arguments)},
  { 5, -1, sizeof(::koinos::standards::kcs4::name_result)},
  { 11, -1, sizeof(::koinos::standards::kcs4::symbol_arguments)},
  { 16, -1, sizeof(::koinos::standards::kcs4::symbol_result)},
  { 22, -1, sizeof(::koinos::standards::kcs4::decimals_arguments)},
  { 27, -1, sizeof(::koinos::standards::kcs4::decimals_result)},
  { 33, -1, sizeof(::koinos::standards::kcs4::total_supply_arguments)},
  { 38, -1, sizeof(::koinos::standards::kcs4::total_supply_result)},
  { 44, -1, sizeof(::koinos::standards::kcs4::balance_of_arguments)},
  { 50, -1, sizeof(::koinos::standards::kcs4::balance_of_result)},
  { 56, -1, sizeof(::koinos::standards::kcs4::get_info_arguments)},
  { 61, -1, sizeof(::koinos::standards::kcs4::get_info_result)},
  { 69, -1, sizeof(::koinos::standards::kcs4::allowance_arguments)},
  { 76, -1, sizeof(::koinos::standards::kcs4::allowance_result)},
  { 82, -1, sizeof(::koinos::standards::kcs4::spender_value)},
  { 89, -1, sizeof(::koinos::standards::kcs4::get_allowances_arguments)},
  { 98, -1, sizeof(::koinos::standards::kcs4::get_allowances_result)},
  { 105, -1, sizeof(::koinos::standards::kcs4::transfer_arguments)},
  { 114, -1, sizeof(::koinos::standards::kcs4::transfer_result)},
  { 119, -1, sizeof(::koinos::standards::kcs4::mint_arguments)},
  { 126, -1, sizeof(::koinos::standards::kcs4::mint_result)},
  { 131, -1, sizeof(::koinos::standards::kcs4::burn_arguments)},
  { 138, -1, sizeof(::koinos::standards::kcs4::burn_result)},
  { 143, -1, sizeof(::koinos::standards::kcs4::approve_arguments)},
  { 151, -1, sizeof(::koinos::standards::kcs4::approve_result)},
  { 156, -1, sizeof(::koinos::standards::kcs4::burn_event)},
  { 163, -1, sizeof(::koinos::standards::kcs4::mint_event)},
  { 170, -1, sizeof(::koinos::standards::kcs4::transfer_event)},
  { 179, -1, sizeof(::koinos::standards::kcs4::approve_event)},
  { 187, -1, sizeof(::koinos::standards::kcs4::balance_object)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_name_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_name_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_symbol_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_symbol_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_decimals_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_decimals_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_total_supply_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_total_supply_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_balance_of_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_balance_of_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_get_info_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_get_info_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_allowance_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_allowance_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_spender_value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_get_allowances_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_get_allowances_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_transfer_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_transfer_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_mint_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_mint_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_burn_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_burn_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_approve_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_approve_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_burn_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_mint_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_transfer_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_approve_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::standards::kcs4::_balance_object_default_instance_),
};

const char descriptor_table_protodef_koinos_2fstandards_2fkcs4_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033koinos/standards/kcs4.proto\022\025koinos.st"
  "andards.kcs4\032\024koinos/options.proto\"\020\n\016na"
  "me_arguments\"\034\n\013name_result\022\r\n\005value\030\001 \001"
  "(\t\"\022\n\020symbol_arguments\"\036\n\rsymbol_result\022"
  "\r\n\005value\030\001 \001(\t\"\024\n\022decimals_arguments\" \n\017"
  "decimals_result\022\r\n\005value\030\001 \001(\r\"\030\n\026total_"
  "supply_arguments\"(\n\023total_supply_result\022"
  "\021\n\005value\030\001 \001(\004B\0020\001\"+\n\024balance_of_argumen"
  "ts\022\023\n\005owner\030\001 \001(\014B\004\200\265\030\006\"&\n\021balance_of_re"
  "sult\022\021\n\005value\030\001 \001(\004B\0020\001\"\024\n\022get_info_argu"
  "ments\"A\n\017get_info_result\022\014\n\004name\030\001 \001(\t\022\016"
  "\n\006symbol\030\002 \001(\t\022\020\n\010decimals\030\003 \001(\r\"A\n\023allo"
  "wance_arguments\022\023\n\005owner\030\001 \001(\014B\004\200\265\030\006\022\025\n\007"
  "spender\030\002 \001(\014B\004\200\265\030\006\"%\n\020allowance_result\022"
  "\021\n\005value\030\001 \001(\004B\0020\001\"9\n\rspender_value\022\025\n\007s"
  "pender\030\001 \001(\014B\004\200\265\030\006\022\021\n\005value\030\002 \001(\004B\0020\001\"g\n"
  "\030get_allowances_arguments\022\023\n\005owner\030\001 \001(\014"
  "B\004\200\265\030\006\022\023\n\005start\030\002 \001(\014B\004\200\265\030\006\022\r\n\005limit\030\003 \001"
  "(\005\022\022\n\ndescending\030\004 \001(\010\"f\n\025get_allowances"
  "_result\022\023\n\005owner\030\001 \001(\014B\004\200\265\030\006\0228\n\nallowanc"
  "es\030\002 \003(\0132$.koinos.standards.kcs4.spender"
  "_value\"[\n\022transfer_arguments\022\022\n\004from\030\001 \001"
  "(\014B\004\200\265\030\006\022\020\n\002to\030\002 \001(\014B\004\200\265\030\006\022\021\n\005value\030\003 \001("
  "\004B\0020\001\022\014\n\004memo\030\004 \001(\t\"\021\n\017transfer_result\"5"
  "\n\016mint_arguments\022\020\n\002to\030\001 \001(\014B\004\200\265\030\006\022\021\n\005va"
  "lue\030\002 \001(\004B\0020\001\"\r\n\013mint_result\"7\n\016burn_arg"
  "uments\022\022\n\004from\030\001 \001(\014B\004\200\265\030\006\022\021\n\005value\030\002 \001("
  "\004B\0020\001\"\r\n\013burn_result\"R\n\021approve_argument"
  "s\022\023\n\005owner\030\001 \001(\014B\004\200\265\030\006\022\025\n\007spender\030\002 \001(\014B"
  "\004\200\265\030\006\022\021\n\005value\030\003 \001(\004B\0020\001\"\020\n\016approve_resu"
  "lt\"3\n\nburn_event\022\022\n\004from\030\001 \001(\014B\004\200\265\030\006\022\021\n\005"
  "value\030\002 \001(\004B\0020\001\"1\n\nmint_event\022\020\n\002to\030\001 \001("
  "\014B\004\200\265\030\006\022\021\n\005value\030\002 \001(\004B\0020\001\"W\n\016transfer_e"
  "vent\022\022\n\004from\030\001 \001(\014B\004\200\265\030\006\022\020\n\002to\030\002 \001(\014B\004\200\265"
  "\030\006\022\021\n\005value\030\003 \001(\004B\0020\001\022\014\n\004memo\030\004 \001(\t\"N\n\ra"
  "pprove_event\022\023\n\005owner\030\001 \001(\014B\004\200\265\030\006\022\025\n\007spe"
  "nder\030\002 \001(\014B\004\200\265\030\006\022\021\n\005value\030\003 \001(\004B\0020\001\"#\n\016b"
  "alance_object\022\021\n\005value\030\001 \001(\004B\0020\001B@Z>gith"
  "ub.com/koinos/koinos-proto-golang/v2/koi"
  "nos/standards/kcs4b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fstandards_2fkcs4_2eproto_deps[1] = {
  &::descriptor_table_koinos_2foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fstandards_2fkcs4_2eproto = {
  false, false, 1586, descriptor_table_protodef_koinos_2fstandards_2fkcs4_2eproto, "koinos/standards/kcs4.proto", 
  &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once, descriptor_table_koinos_2fstandards_2fkcs4_2eproto_deps, 1, 30,
  schemas, file_default_instances, TableStruct_koinos_2fstandards_2fkcs4_2eproto::offsets,
  file_level_metadata_koinos_2fstandards_2fkcs4_2eproto, file_level_enum_descriptors_koinos_2fstandards_2fkcs4_2eproto, file_level_service_descriptors_koinos_2fstandards_2fkcs4_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter() {
  return &descriptor_table_koinos_2fstandards_2fkcs4_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fstandards_2fkcs4_2eproto(&descriptor_table_koinos_2fstandards_2fkcs4_2eproto);
namespace koinos {
namespace standards {
namespace kcs4 {

// ===================================================================

class name_arguments::_Internal {
 public:
};

name_arguments::name_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.name_arguments)
}
name_arguments::name_arguments(const name_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.name_arguments)
}

inline void name_arguments::SharedCtor() {
}

name_arguments::~name_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.name_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void name_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void name_arguments::ArenaDtor(void* object) {
  name_arguments* _this = reinterpret_cast< name_arguments* >(object);
  (void)_this;
}
void name_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void name_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void name_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.name_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* name_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* name_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.name_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.name_arguments)
  return target;
}

size_t name_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.name_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData name_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    name_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*name_arguments::GetClassData() const { return &_class_data_; }

void name_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<name_arguments *>(to)->MergeFrom(
      static_cast<const name_arguments &>(from));
}


void name_arguments::MergeFrom(const name_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.name_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void name_arguments::CopyFrom(const name_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.name_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool name_arguments::IsInitialized() const {
  return true;
}

void name_arguments::InternalSwap(name_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata name_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[0]);
}

// ===================================================================

class name_result::_Internal {
 public:
};

name_result::name_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.name_result)
}
name_result::name_result(const name_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.name_result)
}

inline void name_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

name_result::~name_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.name_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void name_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void name_result::ArenaDtor(void* object) {
  name_result* _this = reinterpret_cast< name_result* >(object);
  (void)_this;
}
void name_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void name_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void name_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.name_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* name_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.standards.kcs4.name_result.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* name_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.name_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.standards.kcs4.name_result.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.name_result)
  return target;
}

size_t name_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.name_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData name_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    name_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*name_result::GetClassData() const { return &_class_data_; }

void name_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<name_result *>(to)->MergeFrom(
      static_cast<const name_result &>(from));
}


void name_result::MergeFrom(const name_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.name_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void name_result::CopyFrom(const name_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.name_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool name_result::IsInitialized() const {
  return true;
}

void name_result::InternalSwap(name_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata name_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[1]);
}

// ===================================================================

class symbol_arguments::_Internal {
 public:
};

symbol_arguments::symbol_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.symbol_arguments)
}
symbol_arguments::symbol_arguments(const symbol_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.symbol_arguments)
}

inline void symbol_arguments::SharedCtor() {
}

symbol_arguments::~symbol_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.symbol_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void symbol_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void symbol_arguments::ArenaDtor(void* object) {
  symbol_arguments* _this = reinterpret_cast< symbol_arguments* >(object);
  (void)_this;
}
void symbol_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void symbol_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void symbol_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.symbol_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* symbol_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* symbol_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.symbol_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.symbol_arguments)
  return target;
}

size_t symbol_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.symbol_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData symbol_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    symbol_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*symbol_arguments::GetClassData() const { return &_class_data_; }

void symbol_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<symbol_arguments *>(to)->MergeFrom(
      static_cast<const symbol_arguments &>(from));
}


void symbol_arguments::MergeFrom(const symbol_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.symbol_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void symbol_arguments::CopyFrom(const symbol_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.symbol_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool symbol_arguments::IsInitialized() const {
  return true;
}

void symbol_arguments::InternalSwap(symbol_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata symbol_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[2]);
}

// ===================================================================

class symbol_result::_Internal {
 public:
};

symbol_result::symbol_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.symbol_result)
}
symbol_result::symbol_result(const symbol_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.symbol_result)
}

inline void symbol_result::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

symbol_result::~symbol_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.symbol_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void symbol_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void symbol_result::ArenaDtor(void* object) {
  symbol_result* _this = reinterpret_cast< symbol_result* >(object);
  (void)_this;
}
void symbol_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void symbol_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void symbol_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.symbol_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* symbol_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.standards.kcs4.symbol_result.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* symbol_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.symbol_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.standards.kcs4.symbol_result.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.symbol_result)
  return target;
}

size_t symbol_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.symbol_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData symbol_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    symbol_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*symbol_result::GetClassData() const { return &_class_data_; }

void symbol_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<symbol_result *>(to)->MergeFrom(
      static_cast<const symbol_result &>(from));
}


void symbol_result::MergeFrom(const symbol_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.symbol_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void symbol_result::CopyFrom(const symbol_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.symbol_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool symbol_result::IsInitialized() const {
  return true;
}

void symbol_result::InternalSwap(symbol_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata symbol_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[3]);
}

// ===================================================================

class decimals_arguments::_Internal {
 public:
};

decimals_arguments::decimals_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.decimals_arguments)
}
decimals_arguments::decimals_arguments(const decimals_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.decimals_arguments)
}

inline void decimals_arguments::SharedCtor() {
}

decimals_arguments::~decimals_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.decimals_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void decimals_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void decimals_arguments::ArenaDtor(void* object) {
  decimals_arguments* _this = reinterpret_cast< decimals_arguments* >(object);
  (void)_this;
}
void decimals_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void decimals_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void decimals_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.decimals_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* decimals_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* decimals_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.decimals_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.decimals_arguments)
  return target;
}

size_t decimals_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.decimals_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData decimals_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    decimals_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*decimals_arguments::GetClassData() const { return &_class_data_; }

void decimals_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<decimals_arguments *>(to)->MergeFrom(
      static_cast<const decimals_arguments &>(from));
}


void decimals_arguments::MergeFrom(const decimals_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.decimals_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void decimals_arguments::CopyFrom(const decimals_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.decimals_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool decimals_arguments::IsInitialized() const {
  return true;
}

void decimals_arguments::InternalSwap(decimals_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata decimals_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[4]);
}

// ===================================================================

class decimals_result::_Internal {
 public:
};

decimals_result::decimals_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.decimals_result)
}
decimals_result::decimals_result(const decimals_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.decimals_result)
}

inline void decimals_result::SharedCtor() {
value_ = 0u;
}

decimals_result::~decimals_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.decimals_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void decimals_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void decimals_result::ArenaDtor(void* object) {
  decimals_result* _this = reinterpret_cast< decimals_result* >(object);
  (void)_this;
}
void decimals_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void decimals_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void decimals_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.decimals_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* decimals_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* decimals_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.decimals_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.decimals_result)
  return target;
}

size_t decimals_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.decimals_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData decimals_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    decimals_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*decimals_result::GetClassData() const { return &_class_data_; }

void decimals_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<decimals_result *>(to)->MergeFrom(
      static_cast<const decimals_result &>(from));
}


void decimals_result::MergeFrom(const decimals_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.decimals_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void decimals_result::CopyFrom(const decimals_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.decimals_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool decimals_result::IsInitialized() const {
  return true;
}

void decimals_result::InternalSwap(decimals_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata decimals_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[5]);
}

// ===================================================================

class total_supply_arguments::_Internal {
 public:
};

total_supply_arguments::total_supply_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.total_supply_arguments)
}
total_supply_arguments::total_supply_arguments(const total_supply_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.total_supply_arguments)
}

inline void total_supply_arguments::SharedCtor() {
}

total_supply_arguments::~total_supply_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.total_supply_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void total_supply_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void total_supply_arguments::ArenaDtor(void* object) {
  total_supply_arguments* _this = reinterpret_cast< total_supply_arguments* >(object);
  (void)_this;
}
void total_supply_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void total_supply_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void total_supply_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.total_supply_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* total_supply_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* total_supply_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.total_supply_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.total_supply_arguments)
  return target;
}

size_t total_supply_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.total_supply_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData total_supply_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    total_supply_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*total_supply_arguments::GetClassData() const { return &_class_data_; }

void total_supply_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<total_supply_arguments *>(to)->MergeFrom(
      static_cast<const total_supply_arguments &>(from));
}


void total_supply_arguments::MergeFrom(const total_supply_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.total_supply_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void total_supply_arguments::CopyFrom(const total_supply_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.total_supply_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool total_supply_arguments::IsInitialized() const {
  return true;
}

void total_supply_arguments::InternalSwap(total_supply_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata total_supply_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[6]);
}

// ===================================================================

class total_supply_result::_Internal {
 public:
};

total_supply_result::total_supply_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.total_supply_result)
}
total_supply_result::total_supply_result(const total_supply_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.total_supply_result)
}

inline void total_supply_result::SharedCtor() {
value_ = uint64_t{0u};
}

total_supply_result::~total_supply_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.total_supply_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void total_supply_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void total_supply_result::ArenaDtor(void* object) {
  total_supply_result* _this = reinterpret_cast< total_supply_result* >(object);
  (void)_this;
}
void total_supply_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void total_supply_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void total_supply_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.total_supply_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* total_supply_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* total_supply_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.total_supply_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.total_supply_result)
  return target;
}

size_t total_supply_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.total_supply_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData total_supply_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    total_supply_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*total_supply_result::GetClassData() const { return &_class_data_; }

void total_supply_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<total_supply_result *>(to)->MergeFrom(
      static_cast<const total_supply_result &>(from));
}


void total_supply_result::MergeFrom(const total_supply_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.total_supply_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void total_supply_result::CopyFrom(const total_supply_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.total_supply_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool total_supply_result::IsInitialized() const {
  return true;
}

void total_supply_result::InternalSwap(total_supply_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata total_supply_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[7]);
}

// ===================================================================

class balance_of_arguments::_Internal {
 public:
};

balance_of_arguments::balance_of_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.balance_of_arguments)
}
balance_of_arguments::balance_of_arguments(const balance_of_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.balance_of_arguments)
}

inline void balance_of_arguments::SharedCtor() {
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

balance_of_arguments::~balance_of_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.balance_of_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void balance_of_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void balance_of_arguments::ArenaDtor(void* object) {
  balance_of_arguments* _this = reinterpret_cast< balance_of_arguments* >(object);
  (void)_this;
}
void balance_of_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void balance_of_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void balance_of_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.balance_of_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* balance_of_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* balance_of_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.balance_of_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.balance_of_arguments)
  return target;
}

size_t balance_of_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.balance_of_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData balance_of_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    balance_of_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*balance_of_arguments::GetClassData() const { return &_class_data_; }

void balance_of_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<balance_of_arguments *>(to)->MergeFrom(
      static_cast<const balance_of_arguments &>(from));
}


void balance_of_arguments::MergeFrom(const balance_of_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.balance_of_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void balance_of_arguments::CopyFrom(const balance_of_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.balance_of_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool balance_of_arguments::IsInitialized() const {
  return true;
}

void balance_of_arguments::InternalSwap(balance_of_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata balance_of_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[8]);
}

// ===================================================================

class balance_of_result::_Internal {
 public:
};

balance_of_result::balance_of_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.balance_of_result)
}
balance_of_result::balance_of_result(const balance_of_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.balance_of_result)
}

inline void balance_of_result::SharedCtor() {
value_ = uint64_t{0u};
}

balance_of_result::~balance_of_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.balance_of_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void balance_of_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void balance_of_result::ArenaDtor(void* object) {
  balance_of_result* _this = reinterpret_cast< balance_of_result* >(object);
  (void)_this;
}
void balance_of_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void balance_of_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void balance_of_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.balance_of_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* balance_of_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* balance_of_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.balance_of_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.balance_of_result)
  return target;
}

size_t balance_of_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.balance_of_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData balance_of_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    balance_of_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*balance_of_result::GetClassData() const { return &_class_data_; }

void balance_of_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<balance_of_result *>(to)->MergeFrom(
      static_cast<const balance_of_result &>(from));
}


void balance_of_result::MergeFrom(const balance_of_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.balance_of_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void balance_of_result::CopyFrom(const balance_of_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.balance_of_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool balance_of_result::IsInitialized() const {
  return true;
}

void balance_of_result::InternalSwap(balance_of_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata balance_of_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[9]);
}

// ===================================================================

class get_info_arguments::_Internal {
 public:
};

get_info_arguments::get_info_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.get_info_arguments)
}
get_info_arguments::get_info_arguments(const get_info_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.get_info_arguments)
}

inline void get_info_arguments::SharedCtor() {
}

get_info_arguments::~get_info_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.get_info_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_info_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_info_arguments::ArenaDtor(void* object) {
  get_info_arguments* _this = reinterpret_cast< get_info_arguments* >(object);
  (void)_this;
}
void get_info_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_info_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_info_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.get_info_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_info_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_info_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.get_info_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.get_info_arguments)
  return target;
}

size_t get_info_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.get_info_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_info_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_info_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_info_arguments::GetClassData() const { return &_class_data_; }

void get_info_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_info_arguments *>(to)->MergeFrom(
      static_cast<const get_info_arguments &>(from));
}


void get_info_arguments::MergeFrom(const get_info_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.get_info_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_info_arguments::CopyFrom(const get_info_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.get_info_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_info_arguments::IsInitialized() const {
  return true;
}

void get_info_arguments::InternalSwap(get_info_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_info_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[10]);
}

// ===================================================================

class get_info_result::_Internal {
 public:
};

get_info_result::get_info_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.get_info_result)
}
get_info_result::get_info_result(const get_info_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  decimals_ = from.decimals_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.get_info_result)
}

inline void get_info_result::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
decimals_ = 0u;
}

get_info_result::~get_info_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.get_info_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_info_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_info_result::ArenaDtor(void* object) {
  get_info_result* _this = reinterpret_cast< get_info_result* >(object);
  (void)_this;
}
void get_info_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_info_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_info_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.get_info_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  symbol_.ClearToEmpty();
  decimals_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_info_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.standards.kcs4.get_info_result.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.standards.kcs4.get_info_result.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 decimals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_info_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.get_info_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.standards.kcs4.get_info_result.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.standards.kcs4.get_info_result.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // uint32 decimals = 3;
  if (this->_internal_decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_decimals(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.get_info_result)
  return target;
}

size_t get_info_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.get_info_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // uint32 decimals = 3;
  if (this->_internal_decimals() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decimals());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_info_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_info_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_info_result::GetClassData() const { return &_class_data_; }

void get_info_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_info_result *>(to)->MergeFrom(
      static_cast<const get_info_result &>(from));
}


void get_info_result::MergeFrom(const get_info_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.get_info_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from._internal_decimals() != 0) {
    _internal_set_decimals(from._internal_decimals());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_info_result::CopyFrom(const get_info_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.get_info_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_info_result::IsInitialized() const {
  return true;
}

void get_info_result::InternalSwap(get_info_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, GetArenaForAllocation(),
      &other->symbol_, other->GetArenaForAllocation()
  );
  swap(decimals_, other->decimals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_info_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[11]);
}

// ===================================================================

class allowance_arguments::_Internal {
 public:
};

allowance_arguments::allowance_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.allowance_arguments)
}
allowance_arguments::allowance_arguments(const allowance_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spender().empty()) {
    spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spender(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.allowance_arguments)
}

inline void allowance_arguments::SharedCtor() {
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

allowance_arguments::~allowance_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.allowance_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void allowance_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void allowance_arguments::ArenaDtor(void* object) {
  allowance_arguments* _this = reinterpret_cast< allowance_arguments* >(object);
  (void)_this;
}
void allowance_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void allowance_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void allowance_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.allowance_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  spender_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* allowance_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes spender = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_spender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* allowance_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.allowance_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // bytes spender = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_spender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_spender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.allowance_arguments)
  return target;
}

size_t allowance_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.allowance_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  // bytes spender = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_spender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_spender());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData allowance_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    allowance_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*allowance_arguments::GetClassData() const { return &_class_data_; }

void allowance_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<allowance_arguments *>(to)->MergeFrom(
      static_cast<const allowance_arguments &>(from));
}


void allowance_arguments::MergeFrom(const allowance_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.allowance_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (!from._internal_spender().empty()) {
    _internal_set_spender(from._internal_spender());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void allowance_arguments::CopyFrom(const allowance_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.allowance_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allowance_arguments::IsInitialized() const {
  return true;
}

void allowance_arguments::InternalSwap(allowance_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spender_, GetArenaForAllocation(),
      &other->spender_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata allowance_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[12]);
}

// ===================================================================

class allowance_result::_Internal {
 public:
};

allowance_result::allowance_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.allowance_result)
}
allowance_result::allowance_result(const allowance_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.allowance_result)
}

inline void allowance_result::SharedCtor() {
value_ = uint64_t{0u};
}

allowance_result::~allowance_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.allowance_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void allowance_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void allowance_result::ArenaDtor(void* object) {
  allowance_result* _this = reinterpret_cast< allowance_result* >(object);
  (void)_this;
}
void allowance_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void allowance_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void allowance_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.allowance_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* allowance_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* allowance_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.allowance_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.allowance_result)
  return target;
}

size_t allowance_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.allowance_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData allowance_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    allowance_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*allowance_result::GetClassData() const { return &_class_data_; }

void allowance_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<allowance_result *>(to)->MergeFrom(
      static_cast<const allowance_result &>(from));
}


void allowance_result::MergeFrom(const allowance_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.allowance_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void allowance_result::CopyFrom(const allowance_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.allowance_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allowance_result::IsInitialized() const {
  return true;
}

void allowance_result::InternalSwap(allowance_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata allowance_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[13]);
}

// ===================================================================

class spender_value::_Internal {
 public:
};

spender_value::spender_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.spender_value)
}
spender_value::spender_value(const spender_value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spender().empty()) {
    spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spender(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.spender_value)
}

inline void spender_value::SharedCtor() {
spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = uint64_t{0u};
}

spender_value::~spender_value() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.spender_value)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void spender_value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  spender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void spender_value::ArenaDtor(void* object) {
  spender_value* _this = reinterpret_cast< spender_value* >(object);
  (void)_this;
}
void spender_value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void spender_value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void spender_value::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.spender_value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spender_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* spender_value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes spender = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_spender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* spender_value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.spender_value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes spender = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_spender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_spender(), target);
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.spender_value)
  return target;
}

size_t spender_value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.spender_value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes spender = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_spender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_spender());
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData spender_value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    spender_value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*spender_value::GetClassData() const { return &_class_data_; }

void spender_value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<spender_value *>(to)->MergeFrom(
      static_cast<const spender_value &>(from));
}


void spender_value::MergeFrom(const spender_value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.spender_value)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_spender().empty()) {
    _internal_set_spender(from._internal_spender());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void spender_value::CopyFrom(const spender_value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.spender_value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool spender_value::IsInitialized() const {
  return true;
}

void spender_value::InternalSwap(spender_value* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spender_, GetArenaForAllocation(),
      &other->spender_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata spender_value::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[14]);
}

// ===================================================================

class get_allowances_arguments::_Internal {
 public:
};

get_allowances_arguments::get_allowances_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.get_allowances_arguments)
}
get_allowances_arguments::get_allowances_arguments(const get_allowances_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start().empty()) {
    start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start(), 
      GetArenaForAllocation());
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&descending_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(descending_));
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.get_allowances_arguments)
}

inline void get_allowances_arguments::SharedCtor() {
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&descending_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(descending_));
}

get_allowances_arguments::~get_allowances_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.get_allowances_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_allowances_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_allowances_arguments::ArenaDtor(void* object) {
  get_allowances_arguments* _this = reinterpret_cast< get_allowances_arguments* >(object);
  (void)_this;
}
void get_allowances_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_allowances_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_allowances_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.get_allowances_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  start_.ClearToEmpty();
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&descending_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(descending_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_allowances_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes start = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_start();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool descending = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          descending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_allowances_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.get_allowances_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // bytes start = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_start().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_start(), target);
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_limit(), target);
  }

  // bool descending = 4;
  if (this->_internal_descending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_descending(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.get_allowances_arguments)
  return target;
}

size_t get_allowances_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.get_allowances_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  // bytes start = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_start().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start());
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  // bool descending = 4;
  if (this->_internal_descending() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_allowances_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_allowances_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_allowances_arguments::GetClassData() const { return &_class_data_; }

void get_allowances_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_allowances_arguments *>(to)->MergeFrom(
      static_cast<const get_allowances_arguments &>(from));
}


void get_allowances_arguments::MergeFrom(const get_allowances_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.get_allowances_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (!from._internal_start().empty()) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from._internal_descending() != 0) {
    _internal_set_descending(from._internal_descending());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_allowances_arguments::CopyFrom(const get_allowances_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.get_allowances_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_allowances_arguments::IsInitialized() const {
  return true;
}

void get_allowances_arguments::InternalSwap(get_allowances_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_, GetArenaForAllocation(),
      &other->start_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(get_allowances_arguments, descending_)
      + sizeof(get_allowances_arguments::descending_)
      - PROTOBUF_FIELD_OFFSET(get_allowances_arguments, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata get_allowances_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[15]);
}

// ===================================================================

class get_allowances_result::_Internal {
 public:
};

get_allowances_result::get_allowances_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  allowances_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.get_allowances_result)
}
get_allowances_result::get_allowances_result(const get_allowances_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      allowances_(from.allowances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.get_allowances_result)
}

inline void get_allowances_result::SharedCtor() {
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_allowances_result::~get_allowances_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.get_allowances_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_allowances_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_allowances_result::ArenaDtor(void* object) {
  get_allowances_result* _this = reinterpret_cast< get_allowances_result* >(object);
  (void)_this;
}
void get_allowances_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_allowances_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_allowances_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.get_allowances_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowances_.Clear();
  owner_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_allowances_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .koinos.standards.kcs4.spender_value allowances = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allowances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_allowances_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.get_allowances_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // repeated .koinos.standards.kcs4.spender_value allowances = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_allowances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_allowances(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.get_allowances_result)
  return target;
}

size_t get_allowances_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.get_allowances_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.standards.kcs4.spender_value allowances = 2;
  total_size += 1UL * this->_internal_allowances_size();
  for (const auto& msg : this->allowances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_allowances_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_allowances_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_allowances_result::GetClassData() const { return &_class_data_; }

void get_allowances_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_allowances_result *>(to)->MergeFrom(
      static_cast<const get_allowances_result &>(from));
}


void get_allowances_result::MergeFrom(const get_allowances_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.get_allowances_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowances_.MergeFrom(from.allowances_);
  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_allowances_result::CopyFrom(const get_allowances_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.get_allowances_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_allowances_result::IsInitialized() const {
  return true;
}

void get_allowances_result::InternalSwap(get_allowances_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  allowances_.InternalSwap(&other->allowances_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_allowances_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[16]);
}

// ===================================================================

class transfer_arguments::_Internal {
 public:
};

transfer_arguments::transfer_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.transfer_arguments)
}
transfer_arguments::transfer_arguments(const transfer_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.transfer_arguments)
}

inline void transfer_arguments::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = uint64_t{0u};
}

transfer_arguments::~transfer_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.transfer_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transfer_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transfer_arguments::ArenaDtor(void* object) {
  transfer_arguments* _this = reinterpret_cast< transfer_arguments* >(object);
  (void)_this;
}
void transfer_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transfer_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transfer_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.transfer_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  memo_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transfer_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes from = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.standards.kcs4.transfer_arguments.memo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transfer_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.transfer_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // uint64 value = 3 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_value(), target);
  }

  // string memo = 4;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.standards.kcs4.transfer_arguments.memo");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_memo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.transfer_arguments)
  return target;
}

size_t transfer_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.transfer_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // string memo = 4;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // uint64 value = 3 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transfer_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transfer_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transfer_arguments::GetClassData() const { return &_class_data_; }

void transfer_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transfer_arguments *>(to)->MergeFrom(
      static_cast<const transfer_arguments &>(from));
}


void transfer_arguments::MergeFrom(const transfer_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.transfer_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_memo().empty()) {
    _internal_set_memo(from._internal_memo());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transfer_arguments::CopyFrom(const transfer_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.transfer_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_arguments::IsInitialized() const {
  return true;
}

void transfer_arguments::InternalSwap(transfer_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memo_, GetArenaForAllocation(),
      &other->memo_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transfer_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[17]);
}

// ===================================================================

class transfer_result::_Internal {
 public:
};

transfer_result::transfer_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.transfer_result)
}
transfer_result::transfer_result(const transfer_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.transfer_result)
}

inline void transfer_result::SharedCtor() {
}

transfer_result::~transfer_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.transfer_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transfer_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void transfer_result::ArenaDtor(void* object) {
  transfer_result* _this = reinterpret_cast< transfer_result* >(object);
  (void)_this;
}
void transfer_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transfer_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transfer_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.transfer_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transfer_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transfer_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.transfer_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.transfer_result)
  return target;
}

size_t transfer_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.transfer_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transfer_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transfer_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transfer_result::GetClassData() const { return &_class_data_; }

void transfer_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transfer_result *>(to)->MergeFrom(
      static_cast<const transfer_result &>(from));
}


void transfer_result::MergeFrom(const transfer_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.transfer_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transfer_result::CopyFrom(const transfer_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.transfer_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_result::IsInitialized() const {
  return true;
}

void transfer_result::InternalSwap(transfer_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transfer_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[18]);
}

// ===================================================================

class mint_arguments::_Internal {
 public:
};

mint_arguments::mint_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.mint_arguments)
}
mint_arguments::mint_arguments(const mint_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.mint_arguments)
}

inline void mint_arguments::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = uint64_t{0u};
}

mint_arguments::~mint_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.mint_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mint_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mint_arguments::ArenaDtor(void* object) {
  mint_arguments* _this = reinterpret_cast< mint_arguments* >(object);
  (void)_this;
}
void mint_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mint_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mint_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.mint_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mint_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes to = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mint_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.mint_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes to = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_to(), target);
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.mint_arguments)
  return target;
}

size_t mint_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.mint_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes to = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mint_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mint_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mint_arguments::GetClassData() const { return &_class_data_; }

void mint_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mint_arguments *>(to)->MergeFrom(
      static_cast<const mint_arguments &>(from));
}


void mint_arguments::MergeFrom(const mint_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.mint_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mint_arguments::CopyFrom(const mint_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.mint_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mint_arguments::IsInitialized() const {
  return true;
}

void mint_arguments::InternalSwap(mint_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mint_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[19]);
}

// ===================================================================

class mint_result::_Internal {
 public:
};

mint_result::mint_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.mint_result)
}
mint_result::mint_result(const mint_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.mint_result)
}

inline void mint_result::SharedCtor() {
}

mint_result::~mint_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.mint_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mint_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void mint_result::ArenaDtor(void* object) {
  mint_result* _this = reinterpret_cast< mint_result* >(object);
  (void)_this;
}
void mint_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mint_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mint_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.mint_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mint_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mint_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.mint_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.mint_result)
  return target;
}

size_t mint_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.mint_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mint_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mint_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mint_result::GetClassData() const { return &_class_data_; }

void mint_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mint_result *>(to)->MergeFrom(
      static_cast<const mint_result &>(from));
}


void mint_result::MergeFrom(const mint_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.mint_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mint_result::CopyFrom(const mint_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.mint_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mint_result::IsInitialized() const {
  return true;
}

void mint_result::InternalSwap(mint_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mint_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[20]);
}

// ===================================================================

class burn_arguments::_Internal {
 public:
};

burn_arguments::burn_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.burn_arguments)
}
burn_arguments::burn_arguments(const burn_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.burn_arguments)
}

inline void burn_arguments::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = uint64_t{0u};
}

burn_arguments::~burn_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.burn_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void burn_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void burn_arguments::ArenaDtor(void* object) {
  burn_arguments* _this = reinterpret_cast< burn_arguments* >(object);
  (void)_this;
}
void burn_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void burn_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void burn_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.burn_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* burn_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes from = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* burn_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.burn_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.burn_arguments)
  return target;
}

size_t burn_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.burn_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData burn_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    burn_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*burn_arguments::GetClassData() const { return &_class_data_; }

void burn_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<burn_arguments *>(to)->MergeFrom(
      static_cast<const burn_arguments &>(from));
}


void burn_arguments::MergeFrom(const burn_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.burn_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void burn_arguments::CopyFrom(const burn_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.burn_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool burn_arguments::IsInitialized() const {
  return true;
}

void burn_arguments::InternalSwap(burn_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata burn_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[21]);
}

// ===================================================================

class burn_result::_Internal {
 public:
};

burn_result::burn_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.burn_result)
}
burn_result::burn_result(const burn_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.burn_result)
}

inline void burn_result::SharedCtor() {
}

burn_result::~burn_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.burn_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void burn_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void burn_result::ArenaDtor(void* object) {
  burn_result* _this = reinterpret_cast< burn_result* >(object);
  (void)_this;
}
void burn_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void burn_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void burn_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.burn_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* burn_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* burn_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.burn_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.burn_result)
  return target;
}

size_t burn_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.burn_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData burn_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    burn_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*burn_result::GetClassData() const { return &_class_data_; }

void burn_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<burn_result *>(to)->MergeFrom(
      static_cast<const burn_result &>(from));
}


void burn_result::MergeFrom(const burn_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.burn_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void burn_result::CopyFrom(const burn_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.burn_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool burn_result::IsInitialized() const {
  return true;
}

void burn_result::InternalSwap(burn_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata burn_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[22]);
}

// ===================================================================

class approve_arguments::_Internal {
 public:
};

approve_arguments::approve_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.approve_arguments)
}
approve_arguments::approve_arguments(const approve_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spender().empty()) {
    spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spender(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.approve_arguments)
}

inline void approve_arguments::SharedCtor() {
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = uint64_t{0u};
}

approve_arguments::~approve_arguments() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.approve_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void approve_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void approve_arguments::ArenaDtor(void* object) {
  approve_arguments* _this = reinterpret_cast< approve_arguments* >(object);
  (void)_this;
}
void approve_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void approve_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void approve_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.approve_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  spender_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* approve_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes spender = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_spender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* approve_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.approve_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // bytes spender = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_spender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_spender(), target);
  }

  // uint64 value = 3 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.approve_arguments)
  return target;
}

size_t approve_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.approve_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  // bytes spender = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_spender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_spender());
  }

  // uint64 value = 3 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData approve_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    approve_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*approve_arguments::GetClassData() const { return &_class_data_; }

void approve_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<approve_arguments *>(to)->MergeFrom(
      static_cast<const approve_arguments &>(from));
}


void approve_arguments::MergeFrom(const approve_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.approve_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (!from._internal_spender().empty()) {
    _internal_set_spender(from._internal_spender());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void approve_arguments::CopyFrom(const approve_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.approve_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool approve_arguments::IsInitialized() const {
  return true;
}

void approve_arguments::InternalSwap(approve_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spender_, GetArenaForAllocation(),
      &other->spender_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata approve_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[23]);
}

// ===================================================================

class approve_result::_Internal {
 public:
};

approve_result::approve_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.approve_result)
}
approve_result::approve_result(const approve_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.approve_result)
}

inline void approve_result::SharedCtor() {
}

approve_result::~approve_result() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.approve_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void approve_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void approve_result::ArenaDtor(void* object) {
  approve_result* _this = reinterpret_cast< approve_result* >(object);
  (void)_this;
}
void approve_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void approve_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void approve_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.approve_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* approve_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* approve_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.approve_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.approve_result)
  return target;
}

size_t approve_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.approve_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData approve_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    approve_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*approve_result::GetClassData() const { return &_class_data_; }

void approve_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<approve_result *>(to)->MergeFrom(
      static_cast<const approve_result &>(from));
}


void approve_result::MergeFrom(const approve_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.approve_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void approve_result::CopyFrom(const approve_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.approve_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool approve_result::IsInitialized() const {
  return true;
}

void approve_result::InternalSwap(approve_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata approve_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[24]);
}

// ===================================================================

class burn_event::_Internal {
 public:
};

burn_event::burn_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.burn_event)
}
burn_event::burn_event(const burn_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.burn_event)
}

inline void burn_event::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = uint64_t{0u};
}

burn_event::~burn_event() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.burn_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void burn_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void burn_event::ArenaDtor(void* object) {
  burn_event* _this = reinterpret_cast< burn_event* >(object);
  (void)_this;
}
void burn_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void burn_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void burn_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.burn_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* burn_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes from = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* burn_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.burn_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.burn_event)
  return target;
}

size_t burn_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.burn_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData burn_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    burn_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*burn_event::GetClassData() const { return &_class_data_; }

void burn_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<burn_event *>(to)->MergeFrom(
      static_cast<const burn_event &>(from));
}


void burn_event::MergeFrom(const burn_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.burn_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void burn_event::CopyFrom(const burn_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.burn_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool burn_event::IsInitialized() const {
  return true;
}

void burn_event::InternalSwap(burn_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata burn_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[25]);
}

// ===================================================================

class mint_event::_Internal {
 public:
};

mint_event::mint_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.mint_event)
}
mint_event::mint_event(const mint_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.mint_event)
}

inline void mint_event::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = uint64_t{0u};
}

mint_event::~mint_event() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.mint_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mint_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mint_event::ArenaDtor(void* object) {
  mint_event* _this = reinterpret_cast< mint_event* >(object);
  (void)_this;
}
void mint_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mint_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mint_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.mint_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mint_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes to = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mint_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.mint_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes to = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_to(), target);
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.mint_event)
  return target;
}

size_t mint_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.mint_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes to = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mint_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mint_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mint_event::GetClassData() const { return &_class_data_; }

void mint_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mint_event *>(to)->MergeFrom(
      static_cast<const mint_event &>(from));
}


void mint_event::MergeFrom(const mint_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.mint_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mint_event::CopyFrom(const mint_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.mint_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mint_event::IsInitialized() const {
  return true;
}

void mint_event::InternalSwap(mint_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mint_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[26]);
}

// ===================================================================

class transfer_event::_Internal {
 public:
};

transfer_event::transfer_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.transfer_event)
}
transfer_event::transfer_event(const transfer_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.transfer_event)
}

inline void transfer_event::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = uint64_t{0u};
}

transfer_event::~transfer_event() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.transfer_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transfer_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transfer_event::ArenaDtor(void* object) {
  transfer_event* _this = reinterpret_cast< transfer_event* >(object);
  (void)_this;
}
void transfer_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transfer_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transfer_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.transfer_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  memo_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transfer_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes from = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.standards.kcs4.transfer_event.memo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transfer_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.transfer_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // uint64 value = 3 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_value(), target);
  }

  // string memo = 4;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.standards.kcs4.transfer_event.memo");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_memo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.transfer_event)
  return target;
}

size_t transfer_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.transfer_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // string memo = 4;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // uint64 value = 3 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transfer_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transfer_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transfer_event::GetClassData() const { return &_class_data_; }

void transfer_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transfer_event *>(to)->MergeFrom(
      static_cast<const transfer_event &>(from));
}


void transfer_event::MergeFrom(const transfer_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.transfer_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_memo().empty()) {
    _internal_set_memo(from._internal_memo());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transfer_event::CopyFrom(const transfer_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.transfer_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_event::IsInitialized() const {
  return true;
}

void transfer_event::InternalSwap(transfer_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memo_, GetArenaForAllocation(),
      &other->memo_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transfer_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[27]);
}

// ===================================================================

class approve_event::_Internal {
 public:
};

approve_event::approve_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.approve_event)
}
approve_event::approve_event(const approve_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_spender().empty()) {
    spender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spender(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.approve_event)
}

inline void approve_event::SharedCtor() {
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
spender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = uint64_t{0u};
}

approve_event::~approve_event() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.approve_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void approve_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void approve_event::ArenaDtor(void* object) {
  approve_event* _this = reinterpret_cast< approve_event* >(object);
  (void)_this;
}
void approve_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void approve_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void approve_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.approve_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  spender_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* approve_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes spender = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_spender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* approve_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.approve_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // bytes spender = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_spender().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_spender(), target);
  }

  // uint64 value = 3 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.approve_event)
  return target;
}

size_t approve_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.approve_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  // bytes spender = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_spender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_spender());
  }

  // uint64 value = 3 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData approve_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    approve_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*approve_event::GetClassData() const { return &_class_data_; }

void approve_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<approve_event *>(to)->MergeFrom(
      static_cast<const approve_event &>(from));
}


void approve_event::MergeFrom(const approve_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.approve_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (!from._internal_spender().empty()) {
    _internal_set_spender(from._internal_spender());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void approve_event::CopyFrom(const approve_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.approve_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool approve_event::IsInitialized() const {
  return true;
}

void approve_event::InternalSwap(approve_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &spender_, GetArenaForAllocation(),
      &other->spender_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata approve_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[28]);
}

// ===================================================================

class balance_object::_Internal {
 public:
};

balance_object::balance_object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.standards.kcs4.balance_object)
}
balance_object::balance_object(const balance_object& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.standards.kcs4.balance_object)
}

inline void balance_object::SharedCtor() {
value_ = uint64_t{0u};
}

balance_object::~balance_object() {
  // @@protoc_insertion_point(destructor:koinos.standards.kcs4.balance_object)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void balance_object::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void balance_object::ArenaDtor(void* object) {
  balance_object* _this = reinterpret_cast< balance_object* >(object);
  (void)_this;
}
void balance_object::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void balance_object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void balance_object::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.standards.kcs4.balance_object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* balance_object::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* balance_object::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.standards.kcs4.balance_object)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.standards.kcs4.balance_object)
  return target;
}

size_t balance_object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.standards.kcs4.balance_object)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData balance_object::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    balance_object::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*balance_object::GetClassData() const { return &_class_data_; }

void balance_object::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<balance_object *>(to)->MergeFrom(
      static_cast<const balance_object &>(from));
}


void balance_object::MergeFrom(const balance_object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.standards.kcs4.balance_object)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void balance_object::CopyFrom(const balance_object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.standards.kcs4.balance_object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool balance_object::IsInitialized() const {
  return true;
}

void balance_object::InternalSwap(balance_object* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata balance_object::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_getter, &descriptor_table_koinos_2fstandards_2fkcs4_2eproto_once,
      file_level_metadata_koinos_2fstandards_2fkcs4_2eproto[29]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kcs4
}  // namespace standards
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::name_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::name_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::name_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::name_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::name_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::name_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::symbol_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::symbol_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::symbol_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::symbol_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::symbol_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::symbol_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::decimals_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::decimals_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::decimals_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::decimals_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::decimals_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::decimals_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::total_supply_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::total_supply_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::total_supply_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::total_supply_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::total_supply_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::total_supply_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::balance_of_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::balance_of_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::balance_of_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::balance_of_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::balance_of_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::balance_of_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::get_info_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::get_info_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::get_info_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::get_info_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::get_info_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::get_info_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::allowance_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::allowance_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::allowance_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::allowance_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::allowance_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::allowance_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::spender_value* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::spender_value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::spender_value >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::get_allowances_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::get_allowances_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::get_allowances_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::get_allowances_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::get_allowances_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::get_allowances_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::transfer_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::transfer_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::transfer_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::transfer_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::transfer_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::transfer_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::mint_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::mint_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::mint_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::mint_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::mint_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::mint_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::burn_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::burn_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::burn_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::burn_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::burn_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::burn_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::approve_arguments* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::approve_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::approve_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::approve_result* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::approve_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::approve_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::burn_event* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::burn_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::burn_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::mint_event* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::mint_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::mint_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::transfer_event* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::transfer_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::transfer_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::approve_event* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::approve_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::approve_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::standards::kcs4::balance_object* Arena::CreateMaybeMessage< ::koinos::standards::kcs4::balance_object >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::standards::kcs4::balance_object >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
