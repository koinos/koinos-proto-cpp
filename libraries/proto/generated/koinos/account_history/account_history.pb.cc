// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/account_history/account_history.proto

#include "koinos/account_history/account_history.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace account_history {
constexpr account_metadata::account_metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seq_num_(uint64_t{0u}){}
struct account_metadataDefaultTypeInternal {
  constexpr account_metadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~account_metadataDefaultTypeInternal() {}
  union {
    account_metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT account_metadataDefaultTypeInternal _account_metadata_default_instance_;
constexpr history_index::history_index(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_num_(uint64_t{0u}){}
struct history_indexDefaultTypeInternal {
  constexpr history_indexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~history_indexDefaultTypeInternal() {}
  union {
    history_index _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT history_indexDefaultTypeInternal _history_index_default_instance_;
constexpr transaction_record::transaction_record(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(nullptr)
  , receipt_(nullptr){}
struct transaction_recordDefaultTypeInternal {
  constexpr transaction_recordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_recordDefaultTypeInternal() {}
  union {
    transaction_record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_recordDefaultTypeInternal _transaction_record_default_instance_;
constexpr block_record::block_record(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , receipt_(nullptr){}
struct block_recordDefaultTypeInternal {
  constexpr block_recordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_recordDefaultTypeInternal() {}
  union {
    block_record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_recordDefaultTypeInternal _block_record_default_instance_;
constexpr history_record::history_record(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct history_recordDefaultTypeInternal {
  constexpr history_recordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~history_recordDefaultTypeInternal() {}
  union {
    history_record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT history_recordDefaultTypeInternal _history_record_default_instance_;
}  // namespace account_history
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::account_metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::account_metadata, seq_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::history_index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::history_index, address_),
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::history_index, seq_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::transaction_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::transaction_record, transaction_),
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::transaction_record, receipt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::block_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::block_record, header_),
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::block_record, receipt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::history_record, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::history_record, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::account_history::history_record, record_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::account_history::account_metadata)},
  { 6, -1, sizeof(::koinos::account_history::history_index)},
  { 13, -1, sizeof(::koinos::account_history::transaction_record)},
  { 20, -1, sizeof(::koinos::account_history::block_record)},
  { 27, -1, sizeof(::koinos::account_history::history_record)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::account_history::_account_metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::account_history::_history_index_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::account_history::_transaction_record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::account_history::_block_record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::account_history::_history_record_default_instance_),
};

const char descriptor_table_protodef_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,koinos/account_history/account_history"
  ".proto\022\026koinos.account_history\032\024koinos/o"
  "ptions.proto\032\036koinos/protocol/protocol.p"
  "roto\"#\n\020account_metadata\022\017\n\007seq_num\030\001 \001("
  "\004\"7\n\rhistory_index\022\025\n\007address\030\001 \001(\014B\004\200\265\030"
  "\006\022\017\n\007seq_num\030\002 \001(\004\"~\n\022transaction_record"
  "\0221\n\013transaction\030\001 \001(\0132\034.koinos.protocol."
  "transaction\0225\n\007receipt\030\002 \001(\0132$.koinos.pr"
  "otocol.transaction_receipt\"n\n\014block_reco"
  "rd\022-\n\006header\030\001 \001(\0132\035.koinos.protocol.blo"
  "ck_header\022/\n\007receipt\030\002 \001(\0132\036.koinos.prot"
  "ocol.block_receipt\"\214\001\n\016history_record\0229\n"
  "\003trx\030\001 \001(\0132*.koinos.account_history.tran"
  "saction_recordH\000\0225\n\005block\030\002 \001(\0132$.koinos"
  ".account_history.block_recordH\000B\010\n\006recor"
  "dB>Z<github.com/koinos/koinos-proto-gola"
  "ng/koinos/account_historyb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_deps[2] = {
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto = {
  false, false, 673, descriptor_table_protodef_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto, "koinos/account_history/account_history.proto", 
  &descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_once, descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto::offsets,
  file_level_metadata_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto, file_level_enum_descriptors_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto, file_level_service_descriptors_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_getter() {
  return &descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto(&descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto);
namespace koinos {
namespace account_history {

// ===================================================================

class account_metadata::_Internal {
 public:
};

account_metadata::account_metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.account_history.account_metadata)
}
account_metadata::account_metadata(const account_metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seq_num_ = from.seq_num_;
  // @@protoc_insertion_point(copy_constructor:koinos.account_history.account_metadata)
}

inline void account_metadata::SharedCtor() {
seq_num_ = uint64_t{0u};
}

account_metadata::~account_metadata() {
  // @@protoc_insertion_point(destructor:koinos.account_history.account_metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void account_metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void account_metadata::ArenaDtor(void* object) {
  account_metadata* _this = reinterpret_cast< account_metadata* >(object);
  (void)_this;
}
void account_metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void account_metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void account_metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.account_history.account_metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seq_num_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* account_metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 seq_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* account_metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.account_history.account_metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seq_num = 1;
  if (this->_internal_seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.account_history.account_metadata)
  return target;
}

size_t account_metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.account_history.account_metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 seq_num = 1;
  if (this->_internal_seq_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData account_metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    account_metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*account_metadata::GetClassData() const { return &_class_data_; }

void account_metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<account_metadata *>(to)->MergeFrom(
      static_cast<const account_metadata &>(from));
}


void account_metadata::MergeFrom(const account_metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.account_history.account_metadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seq_num() != 0) {
    _internal_set_seq_num(from._internal_seq_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void account_metadata::CopyFrom(const account_metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.account_history.account_metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_metadata::IsInitialized() const {
  return true;
}

void account_metadata::InternalSwap(account_metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(seq_num_, other->seq_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata account_metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_getter, &descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_once,
      file_level_metadata_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto[0]);
}

// ===================================================================

class history_index::_Internal {
 public:
};

history_index::history_index(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.account_history.history_index)
}
history_index::history_index(const history_index& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  seq_num_ = from.seq_num_;
  // @@protoc_insertion_point(copy_constructor:koinos.account_history.history_index)
}

inline void history_index::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
seq_num_ = uint64_t{0u};
}

history_index::~history_index() {
  // @@protoc_insertion_point(destructor:koinos.account_history.history_index)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void history_index::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void history_index::ArenaDtor(void* object) {
  history_index* _this = reinterpret_cast< history_index* >(object);
  (void)_this;
}
void history_index::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void history_index::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void history_index::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.account_history.history_index)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  seq_num_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* history_index::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seq_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* history_index::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.account_history.history_index)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 seq_num = 2;
  if (this->_internal_seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seq_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.account_history.history_index)
  return target;
}

size_t history_index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.account_history.history_index)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // uint64 seq_num = 2;
  if (this->_internal_seq_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData history_index::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    history_index::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*history_index::GetClassData() const { return &_class_data_; }

void history_index::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<history_index *>(to)->MergeFrom(
      static_cast<const history_index &>(from));
}


void history_index::MergeFrom(const history_index& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.account_history.history_index)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_seq_num() != 0) {
    _internal_set_seq_num(from._internal_seq_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void history_index::CopyFrom(const history_index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.account_history.history_index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool history_index::IsInitialized() const {
  return true;
}

void history_index::InternalSwap(history_index* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  swap(seq_num_, other->seq_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata history_index::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_getter, &descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_once,
      file_level_metadata_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto[1]);
}

// ===================================================================

class transaction_record::_Internal {
 public:
  static const ::koinos::protocol::transaction& transaction(const transaction_record* msg);
  static const ::koinos::protocol::transaction_receipt& receipt(const transaction_record* msg);
};

const ::koinos::protocol::transaction&
transaction_record::_Internal::transaction(const transaction_record* msg) {
  return *msg->transaction_;
}
const ::koinos::protocol::transaction_receipt&
transaction_record::_Internal::receipt(const transaction_record* msg) {
  return *msg->receipt_;
}
void transaction_record::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
void transaction_record::clear_receipt() {
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
}
transaction_record::transaction_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.account_history.transaction_record)
}
transaction_record::transaction_record(const transaction_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::koinos::protocol::transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  if (from._internal_has_receipt()) {
    receipt_ = new ::koinos::protocol::transaction_receipt(*from.receipt_);
  } else {
    receipt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.account_history.transaction_record)
}

inline void transaction_record::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&receipt_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(receipt_));
}

transaction_record::~transaction_record() {
  // @@protoc_insertion_point(destructor:koinos.account_history.transaction_record)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete receipt_;
}

void transaction_record::ArenaDtor(void* object) {
  transaction_record* _this = reinterpret_cast< transaction_record* >(object);
  (void)_this;
}
void transaction_record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_record::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.account_history.transaction_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.transaction_receipt receipt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction_record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.account_history.transaction_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // .koinos.protocol.transaction_receipt receipt = 2;
  if (this->_internal_has_receipt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::receipt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.account_history.transaction_record)
  return target;
}

size_t transaction_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.account_history.transaction_record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // .koinos.protocol.transaction_receipt receipt = 2;
  if (this->_internal_has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_record::GetClassData() const { return &_class_data_; }

void transaction_record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transaction_record *>(to)->MergeFrom(
      static_cast<const transaction_record &>(from));
}


void transaction_record::MergeFrom(const transaction_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.account_history.transaction_record)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::koinos::protocol::transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_has_receipt()) {
    _internal_mutable_receipt()->::koinos::protocol::transaction_receipt::MergeFrom(from._internal_receipt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_record::CopyFrom(const transaction_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.account_history.transaction_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_record::IsInitialized() const {
  return true;
}

void transaction_record::InternalSwap(transaction_record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transaction_record, receipt_)
      + sizeof(transaction_record::receipt_)
      - PROTOBUF_FIELD_OFFSET(transaction_record, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_record::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_getter, &descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_once,
      file_level_metadata_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto[2]);
}

// ===================================================================

class block_record::_Internal {
 public:
  static const ::koinos::protocol::block_header& header(const block_record* msg);
  static const ::koinos::protocol::block_receipt& receipt(const block_record* msg);
};

const ::koinos::protocol::block_header&
block_record::_Internal::header(const block_record* msg) {
  return *msg->header_;
}
const ::koinos::protocol::block_receipt&
block_record::_Internal::receipt(const block_record* msg) {
  return *msg->receipt_;
}
void block_record::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void block_record::clear_receipt() {
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
}
block_record::block_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.account_history.block_record)
}
block_record::block_record(const block_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::koinos::protocol::block_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_receipt()) {
    receipt_ = new ::koinos::protocol::block_receipt(*from.receipt_);
  } else {
    receipt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.account_history.block_record)
}

inline void block_record::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&receipt_) -
    reinterpret_cast<char*>(&header_)) + sizeof(receipt_));
}

block_record::~block_record() {
  // @@protoc_insertion_point(destructor:koinos.account_history.block_record)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete receipt_;
}

void block_record::ArenaDtor(void* object) {
  block_record* _this = reinterpret_cast< block_record* >(object);
  (void)_this;
}
void block_record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_record::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.account_history.block_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.block_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.block_receipt receipt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.account_history.block_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.block_header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .koinos.protocol.block_receipt receipt = 2;
  if (this->_internal_has_receipt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::receipt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.account_history.block_record)
  return target;
}

size_t block_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.account_history.block_record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.block_header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .koinos.protocol.block_receipt receipt = 2;
  if (this->_internal_has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_record::GetClassData() const { return &_class_data_; }

void block_record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block_record *>(to)->MergeFrom(
      static_cast<const block_record &>(from));
}


void block_record::MergeFrom(const block_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.account_history.block_record)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::koinos::protocol::block_header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_receipt()) {
    _internal_mutable_receipt()->::koinos::protocol::block_receipt::MergeFrom(from._internal_receipt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_record::CopyFrom(const block_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.account_history.block_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_record::IsInitialized() const {
  return true;
}

void block_record::InternalSwap(block_record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(block_record, receipt_)
      + sizeof(block_record::receipt_)
      - PROTOBUF_FIELD_OFFSET(block_record, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata block_record::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_getter, &descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_once,
      file_level_metadata_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto[3]);
}

// ===================================================================

class history_record::_Internal {
 public:
  static const ::koinos::account_history::transaction_record& trx(const history_record* msg);
  static const ::koinos::account_history::block_record& block(const history_record* msg);
};

const ::koinos::account_history::transaction_record&
history_record::_Internal::trx(const history_record* msg) {
  return *msg->record_.trx_;
}
const ::koinos::account_history::block_record&
history_record::_Internal::block(const history_record* msg) {
  return *msg->record_.block_;
}
void history_record::set_allocated_trx(::koinos::account_history::transaction_record* trx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_record();
  if (trx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::account_history::transaction_record>::GetOwningArena(trx);
    if (message_arena != submessage_arena) {
      trx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trx, submessage_arena);
    }
    set_has_trx();
    record_.trx_ = trx;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.account_history.history_record.trx)
}
void history_record::set_allocated_block(::koinos::account_history::block_record* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_record();
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::account_history::block_record>::GetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    set_has_block();
    record_.block_ = block;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.account_history.history_record.block)
}
history_record::history_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.account_history.history_record)
}
history_record::history_record(const history_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_record();
  switch (from.record_case()) {
    case kTrx: {
      _internal_mutable_trx()->::koinos::account_history::transaction_record::MergeFrom(from._internal_trx());
      break;
    }
    case kBlock: {
      _internal_mutable_block()->::koinos::account_history::block_record::MergeFrom(from._internal_block());
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.account_history.history_record)
}

inline void history_record::SharedCtor() {
clear_has_record();
}

history_record::~history_record() {
  // @@protoc_insertion_point(destructor:koinos.account_history.history_record)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void history_record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_record()) {
    clear_record();
  }
}

void history_record::ArenaDtor(void* object) {
  history_record* _this = reinterpret_cast< history_record* >(object);
  (void)_this;
}
void history_record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void history_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void history_record::clear_record() {
// @@protoc_insertion_point(one_of_clear_start:koinos.account_history.history_record)
  switch (record_case()) {
    case kTrx: {
      if (GetArenaForAllocation() == nullptr) {
        delete record_.trx_;
      }
      break;
    }
    case kBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete record_.block_;
      }
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RECORD_NOT_SET;
}


void history_record::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.account_history.history_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_record();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* history_record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.account_history.transaction_record trx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.account_history.block_record block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* history_record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.account_history.history_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.account_history.transaction_record trx = 1;
  if (_internal_has_trx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trx(this), target, stream);
  }

  // .koinos.account_history.block_record block = 2;
  if (_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.account_history.history_record)
  return target;
}

size_t history_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.account_history.history_record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (record_case()) {
    // .koinos.account_history.transaction_record trx = 1;
    case kTrx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_.trx_);
      break;
    }
    // .koinos.account_history.block_record block = 2;
    case kBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_.block_);
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData history_record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    history_record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*history_record::GetClassData() const { return &_class_data_; }

void history_record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<history_record *>(to)->MergeFrom(
      static_cast<const history_record &>(from));
}


void history_record::MergeFrom(const history_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.account_history.history_record)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.record_case()) {
    case kTrx: {
      _internal_mutable_trx()->::koinos::account_history::transaction_record::MergeFrom(from._internal_trx());
      break;
    }
    case kBlock: {
      _internal_mutable_block()->::koinos::account_history::block_record::MergeFrom(from._internal_block());
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void history_record::CopyFrom(const history_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.account_history.history_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool history_record::IsInitialized() const {
  return true;
}

void history_record::InternalSwap(history_record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(record_, other->record_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata history_record::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_getter, &descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto_once,
      file_level_metadata_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace account_history
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::account_history::account_metadata* Arena::CreateMaybeMessage< ::koinos::account_history::account_metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::account_history::account_metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::account_history::history_index* Arena::CreateMaybeMessage< ::koinos::account_history::history_index >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::account_history::history_index >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::account_history::transaction_record* Arena::CreateMaybeMessage< ::koinos::account_history::transaction_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::account_history::transaction_record >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::account_history::block_record* Arena::CreateMaybeMessage< ::koinos::account_history::block_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::account_history::block_record >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::account_history::history_record* Arena::CreateMaybeMessage< ::koinos::account_history::history_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::account_history::history_record >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
