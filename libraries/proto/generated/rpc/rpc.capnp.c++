// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: rpc.capnp

#include "rpc.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<50> b_e6c23ae1502fdc42 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     66, 220,  47,  80, 225,  58, 194, 230,
     14,   0,   0,   0,   1,   0,   0,   0,
     44,  81, 219, 116, 245,  91,  72, 252,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  69, 114,
    114, 111, 114,  82, 101, 115, 112, 111,
    110, 115, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    101, 114, 114, 111, 114,  84, 101, 120,
    116,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,  68,  97, 116,
     97,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e6c23ae1502fdc42 = b_e6c23ae1502fdc42.words;
#if !CAPNP_LITE
static const uint16_t m_e6c23ae1502fdc42[] = {1, 0};
static const uint16_t i_e6c23ae1502fdc42[] = {0, 1};
const ::capnp::_::RawSchema s_e6c23ae1502fdc42 = {
  0xe6c23ae1502fdc42, b_e6c23ae1502fdc42.words, 50, nullptr, m_e6c23ae1502fdc42,
  0, 2, i_e6c23ae1502fdc42, nullptr, nullptr, { &s_e6c23ae1502fdc42, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace koinos {
namespace rpc {

// ErrorResponse
constexpr uint16_t ErrorResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t ErrorResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ErrorResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ErrorResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

