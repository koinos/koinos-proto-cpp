// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/protocol/protocol.proto

#include "koinos/protocol/protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace protocol {
constexpr object_space::object_space(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : zone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , system_(false)
  , id_(0u){}
struct object_spaceDefaultTypeInternal {
  constexpr object_spaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~object_spaceDefaultTypeInternal() {}
  union {
    object_space _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT object_spaceDefaultTypeInternal _object_space_default_instance_;
constexpr event_data::event_data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : impacted_()
  , source_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sequence_(0u){}
struct event_dataDefaultTypeInternal {
  constexpr event_dataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~event_dataDefaultTypeInternal() {}
  union {
    event_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT event_dataDefaultTypeInternal _event_data_default_instance_;
constexpr contract_call_bundle::contract_call_bundle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entry_point_(0u){}
struct contract_call_bundleDefaultTypeInternal {
  constexpr contract_call_bundleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~contract_call_bundleDefaultTypeInternal() {}
  union {
    contract_call_bundle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT contract_call_bundleDefaultTypeInternal _contract_call_bundle_default_instance_;
constexpr system_call_target::system_call_target(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct system_call_targetDefaultTypeInternal {
  constexpr system_call_targetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~system_call_targetDefaultTypeInternal() {}
  union {
    system_call_target _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT system_call_targetDefaultTypeInternal _system_call_target_default_instance_;
constexpr upload_contract_operation::upload_contract_operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bytecode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , abi_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , authorizes_call_contract_(false)
  , authorizes_transaction_application_(false)
  , authorizes_upload_contract_(false){}
struct upload_contract_operationDefaultTypeInternal {
  constexpr upload_contract_operationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~upload_contract_operationDefaultTypeInternal() {}
  union {
    upload_contract_operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT upload_contract_operationDefaultTypeInternal _upload_contract_operation_default_instance_;
constexpr call_contract_operation::call_contract_operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , args_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entry_point_(0u){}
struct call_contract_operationDefaultTypeInternal {
  constexpr call_contract_operationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~call_contract_operationDefaultTypeInternal() {}
  union {
    call_contract_operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT call_contract_operationDefaultTypeInternal _call_contract_operation_default_instance_;
constexpr set_system_call_operation::set_system_call_operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_(nullptr)
  , call_id_(0u){}
struct set_system_call_operationDefaultTypeInternal {
  constexpr set_system_call_operationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_system_call_operationDefaultTypeInternal() {}
  union {
    set_system_call_operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_system_call_operationDefaultTypeInternal _set_system_call_operation_default_instance_;
constexpr set_system_contract_operation::set_system_contract_operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , system_contract_(false){}
struct set_system_contract_operationDefaultTypeInternal {
  constexpr set_system_contract_operationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_system_contract_operationDefaultTypeInternal() {}
  union {
    set_system_contract_operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_system_contract_operationDefaultTypeInternal _set_system_contract_operation_default_instance_;
constexpr operation::operation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct operationDefaultTypeInternal {
  constexpr operationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~operationDefaultTypeInternal() {}
  union {
    operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT operationDefaultTypeInternal _operation_default_instance_;
constexpr transaction_header::transaction_header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nonce_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , operation_merkle_root_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payee_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rc_limit_(uint64_t{0u}){}
struct transaction_headerDefaultTypeInternal {
  constexpr transaction_headerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_headerDefaultTypeInternal() {}
  union {
    transaction_header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_headerDefaultTypeInternal _transaction_header_default_instance_;
constexpr transaction::transaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operations_()
  , signatures_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct transactionDefaultTypeInternal {
  constexpr transactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transactionDefaultTypeInternal() {}
  union {
    transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transactionDefaultTypeInternal _transaction_default_instance_;
constexpr transaction_receipt::transaction_receipt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , logs_()
  , state_delta_entries_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_payer_rc_(uint64_t{0u})
  , rc_limit_(uint64_t{0u})
  , rc_used_(uint64_t{0u})
  , disk_storage_used_(uint64_t{0u})
  , network_bandwidth_used_(uint64_t{0u})
  , compute_bandwidth_used_(uint64_t{0u})
  , reverted_(false){}
struct transaction_receiptDefaultTypeInternal {
  constexpr transaction_receiptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_receiptDefaultTypeInternal() {}
  union {
    transaction_receipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_receiptDefaultTypeInternal _transaction_receipt_default_instance_;
constexpr block_header::block_header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : approved_proposals_()
  , previous_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previous_state_merkle_root_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_merkle_root_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u})
  , timestamp_(uint64_t{0u}){}
struct block_headerDefaultTypeInternal {
  constexpr block_headerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_headerDefaultTypeInternal() {}
  union {
    block_header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_headerDefaultTypeInternal _block_header_default_instance_;
constexpr block::block(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct blockDefaultTypeInternal {
  constexpr blockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~blockDefaultTypeInternal() {}
  union {
    block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT blockDefaultTypeInternal _block_default_instance_;
constexpr block_receipt::block_receipt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , transaction_receipts_()
  , logs_()
  , state_delta_entries_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_merkle_root_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u})
  , disk_storage_used_(uint64_t{0u})
  , network_bandwidth_used_(uint64_t{0u})
  , compute_bandwidth_used_(uint64_t{0u})
  , disk_storage_charged_(uint64_t{0u})
  , network_bandwidth_charged_(uint64_t{0u})
  , compute_bandwidth_charged_(uint64_t{0u}){}
struct block_receiptDefaultTypeInternal {
  constexpr block_receiptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_receiptDefaultTypeInternal() {}
  union {
    block_receipt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_receiptDefaultTypeInternal _block_receipt_default_instance_;
constexpr state_delta_entry::state_delta_entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_space_(nullptr){}
struct state_delta_entryDefaultTypeInternal {
  constexpr state_delta_entryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~state_delta_entryDefaultTypeInternal() {}
  union {
    state_delta_entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT state_delta_entryDefaultTypeInternal _state_delta_entry_default_instance_;
}  // namespace protocol
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fprotocol_2fprotocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fprotocol_2fprotocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fprotocol_2fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::object_space, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::object_space, system_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::object_space, zone_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::object_space, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::event_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::event_data, sequence_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::event_data, source_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::event_data, name_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::event_data, data_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::event_data, impacted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::contract_call_bundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::contract_call_bundle, contract_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::contract_call_bundle, entry_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::system_call_target, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::system_call_target, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::system_call_target, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::upload_contract_operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::upload_contract_operation, contract_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::upload_contract_operation, bytecode_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::upload_contract_operation, abi_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::upload_contract_operation, authorizes_call_contract_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::upload_contract_operation, authorizes_transaction_application_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::upload_contract_operation, authorizes_upload_contract_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::call_contract_operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::call_contract_operation, contract_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::call_contract_operation, entry_point_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::call_contract_operation, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::set_system_call_operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::set_system_call_operation, call_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::set_system_call_operation, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::set_system_contract_operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::set_system_contract_operation, contract_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::set_system_contract_operation, system_contract_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::operation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::operation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::operation, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_header, chain_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_header, rc_limit_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_header, nonce_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_header, operation_merkle_root_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_header, payer_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_header, payee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction, id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction, header_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction, operations_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_receipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_receipt, id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_receipt, payer_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_receipt, max_payer_rc_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_receipt, rc_limit_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_receipt, rc_used_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_receipt, disk_storage_used_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_receipt, network_bandwidth_used_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_receipt, compute_bandwidth_used_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_receipt, reverted_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_receipt, events_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_receipt, logs_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::transaction_receipt, state_delta_entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_header, previous_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_header, height_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_header, timestamp_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_header, previous_state_merkle_root_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_header, transaction_merkle_root_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_header, signer_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_header, approved_proposals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block, id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block, header_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block, transactions_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, id_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, height_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, disk_storage_used_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, network_bandwidth_used_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, compute_bandwidth_used_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, state_merkle_root_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, events_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, transaction_receipts_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, logs_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, disk_storage_charged_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, network_bandwidth_charged_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, compute_bandwidth_charged_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::block_receipt, state_delta_entries_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::state_delta_entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::state_delta_entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::state_delta_entry, object_space_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::state_delta_entry, key_),
  PROTOBUF_FIELD_OFFSET(::koinos::protocol::state_delta_entry, value_),
  ~0u,
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::protocol::object_space)},
  { 8, -1, sizeof(::koinos::protocol::event_data)},
  { 18, -1, sizeof(::koinos::protocol::contract_call_bundle)},
  { 25, -1, sizeof(::koinos::protocol::system_call_target)},
  { 33, -1, sizeof(::koinos::protocol::upload_contract_operation)},
  { 44, -1, sizeof(::koinos::protocol::call_contract_operation)},
  { 52, -1, sizeof(::koinos::protocol::set_system_call_operation)},
  { 59, -1, sizeof(::koinos::protocol::set_system_contract_operation)},
  { 66, -1, sizeof(::koinos::protocol::operation)},
  { 76, -1, sizeof(::koinos::protocol::transaction_header)},
  { 87, -1, sizeof(::koinos::protocol::transaction)},
  { 96, -1, sizeof(::koinos::protocol::transaction_receipt)},
  { 113, -1, sizeof(::koinos::protocol::block_header)},
  { 125, -1, sizeof(::koinos::protocol::block)},
  { 134, -1, sizeof(::koinos::protocol::block_receipt)},
  { 152, 160, sizeof(::koinos::protocol::state_delta_entry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_object_space_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_event_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_contract_call_bundle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_system_call_target_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_upload_contract_operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_call_contract_operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_set_system_call_operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_set_system_contract_operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_transaction_header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_transaction_receipt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_block_header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_block_receipt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::protocol::_state_delta_entry_default_instance_),
};

const char descriptor_table_protodef_koinos_2fprotocol_2fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036koinos/protocol/protocol.proto\022\017koinos"
  ".protocol\032\024koinos/options.proto\"8\n\014objec"
  "t_space\022\016\n\006system\030\001 \001(\010\022\014\n\004zone\030\002 \001(\014\022\n\n"
  "\002id\030\003 \001(\r\"h\n\nevent_data\022\020\n\010sequence\030\001 \001("
  "\r\022\024\n\006source\030\002 \001(\014B\004\200\265\030\005\022\014\n\004name\030\003 \001(\t\022\014\n"
  "\004data\030\004 \001(\014\022\026\n\010impacted\030\005 \003(\014B\004\200\265\030\006\"F\n\024c"
  "ontract_call_bundle\022\031\n\013contract_id\030\001 \001(\014"
  "B\004\200\265\030\005\022\023\n\013entry_point\030\002 \001(\r\"w\n\022system_ca"
  "ll_target\022\022\n\010thunk_id\030\001 \001(\rH\000\022C\n\022system_"
  "call_bundle\030\002 \001(\0132%.koinos.protocol.cont"
  "ract_call_bundleH\000B\010\n\006target\"\307\001\n\031upload_"
  "contract_operation\022\031\n\013contract_id\030\001 \001(\014B"
  "\004\200\265\030\005\022\020\n\010bytecode\030\002 \001(\014\022\013\n\003abi\030\003 \001(\t\022 \n\030"
  "authorizes_call_contract\030\004 \001(\010\022*\n\"author"
  "izes_transaction_application\030\005 \001(\010\022\"\n\032au"
  "thorizes_upload_contract\030\006 \001(\010\"W\n\027call_c"
  "ontract_operation\022\031\n\013contract_id\030\001 \001(\014B\004"
  "\200\265\030\005\022\023\n\013entry_point\030\002 \001(\r\022\014\n\004args\030\003 \001(\014\""
  "a\n\031set_system_call_operation\022\017\n\007call_id\030"
  "\001 \001(\r\0223\n\006target\030\002 \001(\0132#.koinos.protocol."
  "system_call_target\"S\n\035set_system_contrac"
  "t_operation\022\031\n\013contract_id\030\001 \001(\014B\004\200\265\030\005\022\027"
  "\n\017system_contract\030\002 \001(\010\"\261\002\n\toperation\022E\n"
  "\017upload_contract\030\001 \001(\0132*.koinos.protocol"
  ".upload_contract_operationH\000\022A\n\rcall_con"
  "tract\030\002 \001(\0132(.koinos.protocol.call_contr"
  "act_operationH\000\022E\n\017set_system_call\030\003 \001(\013"
  "2*.koinos.protocol.set_system_call_opera"
  "tionH\000\022M\n\023set_system_contract\030\004 \001(\0132..ko"
  "inos.protocol.set_system_contract_operat"
  "ionH\000B\004\n\002op\"\224\001\n\022transaction_header\022\020\n\010ch"
  "ain_id\030\001 \001(\014\022\024\n\010rc_limit\030\002 \001(\004B\0020\001\022\r\n\005no"
  "nce\030\003 \001(\014\022\035\n\025operation_merkle_root\030\004 \001(\014"
  "\022\023\n\005payer\030\005 \001(\014B\004\200\265\030\006\022\023\n\005payee\030\006 \001(\014B\004\200\265"
  "\030\006\"\230\001\n\013transaction\022\020\n\002id\030\001 \001(\014B\004\200\265\030\004\0223\n\006"
  "header\030\002 \001(\0132#.koinos.protocol.transacti"
  "on_header\022.\n\noperations\030\003 \003(\0132\032.koinos.p"
  "rotocol.operation\022\022\n\nsignatures\030\004 \003(\014\"\366\002"
  "\n\023transaction_receipt\022\020\n\002id\030\001 \001(\014B\004\200\265\030\004\022"
  "\023\n\005payer\030\002 \001(\014B\004\200\265\030\006\022\030\n\014max_payer_rc\030\003 \001"
  "(\004B\0020\001\022\024\n\010rc_limit\030\004 \001(\004B\0020\001\022\023\n\007rc_used\030"
  "\005 \001(\004B\0020\001\022\035\n\021disk_storage_used\030\006 \001(\004B\0020\001"
  "\022\"\n\026network_bandwidth_used\030\007 \001(\004B\0020\001\022\"\n\026"
  "compute_bandwidth_used\030\010 \001(\004B\0020\001\022\020\n\010reve"
  "rted\030\t \001(\010\022+\n\006events\030\n \003(\0132\033.koinos.prot"
  "ocol.event_data\022\014\n\004logs\030\013 \003(\t\022\?\n\023state_d"
  "elta_entries\030\014 \003(\0132\".koinos.protocol.sta"
  "te_delta_entry\"\316\001\n\014block_header\022\026\n\010previ"
  "ous\030\001 \001(\014B\004\200\265\030\003\022\022\n\006height\030\002 \001(\004B\0020\001\022\025\n\tt"
  "imestamp\030\003 \001(\004B\0020\001\022\"\n\032previous_state_mer"
  "kle_root\030\004 \001(\014\022\037\n\027transaction_merkle_roo"
  "t\030\005 \001(\014\022\024\n\006signer\030\006 \001(\014B\004\200\265\030\006\022 \n\022approve"
  "d_proposals\030\007 \003(\014B\004\200\265\030\004\"\217\001\n\005block\022\020\n\002id\030"
  "\001 \001(\014B\004\200\265\030\003\022-\n\006header\030\002 \001(\0132\035.koinos.pro"
  "tocol.block_header\0222\n\014transactions\030\003 \003(\013"
  "2\034.koinos.protocol.transaction\022\021\n\tsignat"
  "ure\030\004 \001(\014\"\347\003\n\rblock_receipt\022\020\n\002id\030\001 \001(\014B"
  "\004\200\265\030\003\022\022\n\006height\030\002 \001(\004B\0020\001\022\035\n\021disk_storag"
  "e_used\030\003 \001(\004B\0020\001\022\"\n\026network_bandwidth_us"
  "ed\030\004 \001(\004B\0020\001\022\"\n\026compute_bandwidth_used\030\005"
  " \001(\004B\0020\001\022\031\n\021state_merkle_root\030\006 \001(\014\022+\n\006e"
  "vents\030\007 \003(\0132\033.koinos.protocol.event_data"
  "\022B\n\024transaction_receipts\030\010 \003(\0132$.koinos."
  "protocol.transaction_receipt\022\014\n\004logs\030\t \003"
  "(\t\022 \n\024disk_storage_charged\030\n \001(\004B\0020\001\022%\n\031"
  "network_bandwidth_charged\030\013 \001(\004B\0020\001\022%\n\031c"
  "ompute_bandwidth_charged\030\014 \001(\004B\0020\001\022\?\n\023st"
  "ate_delta_entries\030\r \003(\0132\".koinos.protoco"
  "l.state_delta_entry\"s\n\021state_delta_entry"
  "\0223\n\014object_space\030\001 \001(\0132\035.koinos.protocol"
  ".object_space\022\013\n\003key\030\002 \001(\014\022\022\n\005value\030\003 \001("
  "\014H\000\210\001\001B\010\n\006_valueB7Z5github.com/koinos/ko"
  "inos-proto-golang/koinos/protocolb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_deps[1] = {
  &::descriptor_table_koinos_2foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fprotocol_2fprotocol_2eproto = {
  false, false, 2921, descriptor_table_protodef_koinos_2fprotocol_2fprotocol_2eproto, "koinos/protocol/protocol.proto", 
  &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once, descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_deps, 1, 16,
  schemas, file_default_instances, TableStruct_koinos_2fprotocol_2fprotocol_2eproto::offsets,
  file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto, file_level_enum_descriptors_koinos_2fprotocol_2fprotocol_2eproto, file_level_service_descriptors_koinos_2fprotocol_2fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter() {
  return &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fprotocol_2fprotocol_2eproto(&descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
namespace koinos {
namespace protocol {

// ===================================================================

class object_space::_Internal {
 public:
};

object_space::object_space(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.object_space)
}
object_space::object_space(const object_space& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_zone().empty()) {
    zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_zone(), 
      GetArenaForAllocation());
  }
  ::memcpy(&system_, &from.system_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&system_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.object_space)
}

inline void object_space::SharedCtor() {
zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&system_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&system_)) + sizeof(id_));
}

object_space::~object_space() {
  // @@protoc_insertion_point(destructor:koinos.protocol.object_space)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void object_space::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void object_space::ArenaDtor(void* object) {
  object_space* _this = reinterpret_cast< object_space* >(object);
  (void)_this;
}
void object_space::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void object_space::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void object_space::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.object_space)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zone_.ClearToEmpty();
  ::memset(&system_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&system_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* object_space::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool system = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes zone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_zone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* object_space::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.object_space)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool system = 1;
  if (this->_internal_system() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_system(), target);
  }

  // bytes zone = 2;
  if (!this->_internal_zone().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_zone(), target);
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.object_space)
  return target;
}

size_t object_space::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.object_space)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes zone = 2;
  if (!this->_internal_zone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zone());
  }

  // bool system = 1;
  if (this->_internal_system() != 0) {
    total_size += 1 + 1;
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData object_space::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    object_space::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*object_space::GetClassData() const { return &_class_data_; }

void object_space::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<object_space *>(to)->MergeFrom(
      static_cast<const object_space &>(from));
}


void object_space::MergeFrom(const object_space& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.object_space)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_zone().empty()) {
    _internal_set_zone(from._internal_zone());
  }
  if (from._internal_system() != 0) {
    _internal_set_system(from._internal_system());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void object_space::CopyFrom(const object_space& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.object_space)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool object_space::IsInitialized() const {
  return true;
}

void object_space::InternalSwap(object_space* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &zone_, GetArenaForAllocation(),
      &other->zone_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(object_space, id_)
      + sizeof(object_space::id_)
      - PROTOBUF_FIELD_OFFSET(object_space, system_)>(
          reinterpret_cast<char*>(&system_),
          reinterpret_cast<char*>(&other->system_));
}

::PROTOBUF_NAMESPACE_ID::Metadata object_space::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[0]);
}

// ===================================================================

class event_data::_Internal {
 public:
};

event_data::event_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  impacted_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.event_data)
}
event_data::event_data(const event_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      impacted_(from.impacted_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.event_data)
}

inline void event_data::SharedCtor() {
source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sequence_ = 0u;
}

event_data::~event_data() {
  // @@protoc_insertion_point(destructor:koinos.protocol.event_data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void event_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void event_data::ArenaDtor(void* object) {
  event_data* _this = reinterpret_cast< event_data* >(object);
  (void)_this;
}
void event_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void event_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void event_data::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.event_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  impacted_.Clear();
  source_.ClearToEmpty();
  name_.ClearToEmpty();
  data_.ClearToEmpty();
  sequence_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* event_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes source = 2 [(.koinos.btype) = CONTRACT_ID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.protocol.event_data.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes impacted = 5 [(.koinos.btype) = ADDRESS];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_impacted();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* event_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.event_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sequence = 1;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sequence(), target);
  }

  // bytes source = 2 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_source().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_source(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.protocol.event_data.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // repeated bytes impacted = 5 [(.koinos.btype) = ADDRESS];
  for (int i = 0, n = this->_internal_impacted_size(); i < n; i++) {
    const auto& s = this->_internal_impacted(i);
    target = stream->WriteBytes(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.event_data)
  return target;
}

size_t event_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.event_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes impacted = 5 [(.koinos.btype) = ADDRESS];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(impacted_.size());
  for (int i = 0, n = impacted_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      impacted_.Get(i));
  }

  // bytes source = 2 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_source().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_source());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 sequence = 1;
  if (this->_internal_sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData event_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    event_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*event_data::GetClassData() const { return &_class_data_; }

void event_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<event_data *>(to)->MergeFrom(
      static_cast<const event_data &>(from));
}


void event_data::MergeFrom(const event_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.event_data)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  impacted_.MergeFrom(from.impacted_);
  if (!from._internal_source().empty()) {
    _internal_set_source(from._internal_source());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void event_data::CopyFrom(const event_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.event_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_data::IsInitialized() const {
  return true;
}

void event_data::InternalSwap(event_data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  impacted_.InternalSwap(&other->impacted_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_, GetArenaForAllocation(),
      &other->source_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata event_data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[1]);
}

// ===================================================================

class contract_call_bundle::_Internal {
 public:
};

contract_call_bundle::contract_call_bundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.contract_call_bundle)
}
contract_call_bundle::contract_call_bundle(const contract_call_bundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_id(), 
      GetArenaForAllocation());
  }
  entry_point_ = from.entry_point_;
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.contract_call_bundle)
}

inline void contract_call_bundle::SharedCtor() {
contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
entry_point_ = 0u;
}

contract_call_bundle::~contract_call_bundle() {
  // @@protoc_insertion_point(destructor:koinos.protocol.contract_call_bundle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void contract_call_bundle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void contract_call_bundle::ArenaDtor(void* object) {
  contract_call_bundle* _this = reinterpret_cast< contract_call_bundle* >(object);
  (void)_this;
}
void contract_call_bundle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void contract_call_bundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void contract_call_bundle::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.contract_call_bundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty();
  entry_point_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* contract_call_bundle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 entry_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entry_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* contract_call_bundle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.contract_call_bundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // uint32 entry_point = 2;
  if (this->_internal_entry_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entry_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.contract_call_bundle)
  return target;
}

size_t contract_call_bundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.contract_call_bundle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_id());
  }

  // uint32 entry_point = 2;
  if (this->_internal_entry_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entry_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData contract_call_bundle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    contract_call_bundle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*contract_call_bundle::GetClassData() const { return &_class_data_; }

void contract_call_bundle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<contract_call_bundle *>(to)->MergeFrom(
      static_cast<const contract_call_bundle &>(from));
}


void contract_call_bundle::MergeFrom(const contract_call_bundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.contract_call_bundle)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract_id().empty()) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from._internal_entry_point() != 0) {
    _internal_set_entry_point(from._internal_entry_point());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void contract_call_bundle::CopyFrom(const contract_call_bundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.contract_call_bundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool contract_call_bundle::IsInitialized() const {
  return true;
}

void contract_call_bundle::InternalSwap(contract_call_bundle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contract_id_, GetArenaForAllocation(),
      &other->contract_id_, other->GetArenaForAllocation()
  );
  swap(entry_point_, other->entry_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata contract_call_bundle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[2]);
}

// ===================================================================

class system_call_target::_Internal {
 public:
  static const ::koinos::protocol::contract_call_bundle& system_call_bundle(const system_call_target* msg);
};

const ::koinos::protocol::contract_call_bundle&
system_call_target::_Internal::system_call_bundle(const system_call_target* msg) {
  return *msg->target_.system_call_bundle_;
}
void system_call_target::set_allocated_system_call_bundle(::koinos::protocol::contract_call_bundle* system_call_bundle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target();
  if (system_call_bundle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::protocol::contract_call_bundle>::GetOwningArena(system_call_bundle);
    if (message_arena != submessage_arena) {
      system_call_bundle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_call_bundle, submessage_arena);
    }
    set_has_system_call_bundle();
    target_.system_call_bundle_ = system_call_bundle;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.system_call_target.system_call_bundle)
}
system_call_target::system_call_target(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.system_call_target)
}
system_call_target::system_call_target(const system_call_target& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_target();
  switch (from.target_case()) {
    case kThunkId: {
      _internal_set_thunk_id(from._internal_thunk_id());
      break;
    }
    case kSystemCallBundle: {
      _internal_mutable_system_call_bundle()->::koinos::protocol::contract_call_bundle::MergeFrom(from._internal_system_call_bundle());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.system_call_target)
}

inline void system_call_target::SharedCtor() {
clear_has_target();
}

system_call_target::~system_call_target() {
  // @@protoc_insertion_point(destructor:koinos.protocol.system_call_target)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void system_call_target::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_target()) {
    clear_target();
  }
}

void system_call_target::ArenaDtor(void* object) {
  system_call_target* _this = reinterpret_cast< system_call_target* >(object);
  (void)_this;
}
void system_call_target::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void system_call_target::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void system_call_target::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:koinos.protocol.system_call_target)
  switch (target_case()) {
    case kThunkId: {
      // No need to clear
      break;
    }
    case kSystemCallBundle: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_.system_call_bundle_;
      }
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void system_call_target::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.system_call_target)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_target();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* system_call_target::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 thunk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_thunk_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.contract_call_bundle system_call_bundle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_call_bundle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* system_call_target::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.system_call_target)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 thunk_id = 1;
  if (_internal_has_thunk_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_thunk_id(), target);
  }

  // .koinos.protocol.contract_call_bundle system_call_bundle = 2;
  if (_internal_has_system_call_bundle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::system_call_bundle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.system_call_target)
  return target;
}

size_t system_call_target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.system_call_target)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (target_case()) {
    // uint32 thunk_id = 1;
    case kThunkId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_thunk_id());
      break;
    }
    // .koinos.protocol.contract_call_bundle system_call_bundle = 2;
    case kSystemCallBundle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_.system_call_bundle_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData system_call_target::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    system_call_target::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*system_call_target::GetClassData() const { return &_class_data_; }

void system_call_target::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<system_call_target *>(to)->MergeFrom(
      static_cast<const system_call_target &>(from));
}


void system_call_target::MergeFrom(const system_call_target& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.system_call_target)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.target_case()) {
    case kThunkId: {
      _internal_set_thunk_id(from._internal_thunk_id());
      break;
    }
    case kSystemCallBundle: {
      _internal_mutable_system_call_bundle()->::koinos::protocol::contract_call_bundle::MergeFrom(from._internal_system_call_bundle());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void system_call_target::CopyFrom(const system_call_target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.system_call_target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_call_target::IsInitialized() const {
  return true;
}

void system_call_target::InternalSwap(system_call_target* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata system_call_target::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[3]);
}

// ===================================================================

class upload_contract_operation::_Internal {
 public:
};

upload_contract_operation::upload_contract_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.upload_contract_operation)
}
upload_contract_operation::upload_contract_operation(const upload_contract_operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_id(), 
      GetArenaForAllocation());
  }
  bytecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bytecode().empty()) {
    bytecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bytecode(), 
      GetArenaForAllocation());
  }
  abi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_abi().empty()) {
    abi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_abi(), 
      GetArenaForAllocation());
  }
  ::memcpy(&authorizes_call_contract_, &from.authorizes_call_contract_,
    static_cast<size_t>(reinterpret_cast<char*>(&authorizes_upload_contract_) -
    reinterpret_cast<char*>(&authorizes_call_contract_)) + sizeof(authorizes_upload_contract_));
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.upload_contract_operation)
}

inline void upload_contract_operation::SharedCtor() {
contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bytecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
abi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&authorizes_call_contract_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&authorizes_upload_contract_) -
    reinterpret_cast<char*>(&authorizes_call_contract_)) + sizeof(authorizes_upload_contract_));
}

upload_contract_operation::~upload_contract_operation() {
  // @@protoc_insertion_point(destructor:koinos.protocol.upload_contract_operation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void upload_contract_operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  abi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void upload_contract_operation::ArenaDtor(void* object) {
  upload_contract_operation* _this = reinterpret_cast< upload_contract_operation* >(object);
  (void)_this;
}
void upload_contract_operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void upload_contract_operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void upload_contract_operation::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.upload_contract_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty();
  bytecode_.ClearToEmpty();
  abi_.ClearToEmpty();
  ::memset(&authorizes_call_contract_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&authorizes_upload_contract_) -
      reinterpret_cast<char*>(&authorizes_call_contract_)) + sizeof(authorizes_upload_contract_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* upload_contract_operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bytecode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bytecode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string abi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_abi();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.protocol.upload_contract_operation.abi"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool authorizes_call_contract = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          authorizes_call_contract_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool authorizes_transaction_application = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          authorizes_transaction_application_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool authorizes_upload_contract = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          authorizes_upload_contract_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* upload_contract_operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.upload_contract_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // bytes bytecode = 2;
  if (!this->_internal_bytecode().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bytecode(), target);
  }

  // string abi = 3;
  if (!this->_internal_abi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_abi().data(), static_cast<int>(this->_internal_abi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.protocol.upload_contract_operation.abi");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_abi(), target);
  }

  // bool authorizes_call_contract = 4;
  if (this->_internal_authorizes_call_contract() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_authorizes_call_contract(), target);
  }

  // bool authorizes_transaction_application = 5;
  if (this->_internal_authorizes_transaction_application() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_authorizes_transaction_application(), target);
  }

  // bool authorizes_upload_contract = 6;
  if (this->_internal_authorizes_upload_contract() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_authorizes_upload_contract(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.upload_contract_operation)
  return target;
}

size_t upload_contract_operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.upload_contract_operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_id());
  }

  // bytes bytecode = 2;
  if (!this->_internal_bytecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytecode());
  }

  // string abi = 3;
  if (!this->_internal_abi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_abi());
  }

  // bool authorizes_call_contract = 4;
  if (this->_internal_authorizes_call_contract() != 0) {
    total_size += 1 + 1;
  }

  // bool authorizes_transaction_application = 5;
  if (this->_internal_authorizes_transaction_application() != 0) {
    total_size += 1 + 1;
  }

  // bool authorizes_upload_contract = 6;
  if (this->_internal_authorizes_upload_contract() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData upload_contract_operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    upload_contract_operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*upload_contract_operation::GetClassData() const { return &_class_data_; }

void upload_contract_operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<upload_contract_operation *>(to)->MergeFrom(
      static_cast<const upload_contract_operation &>(from));
}


void upload_contract_operation::MergeFrom(const upload_contract_operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.upload_contract_operation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract_id().empty()) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (!from._internal_bytecode().empty()) {
    _internal_set_bytecode(from._internal_bytecode());
  }
  if (!from._internal_abi().empty()) {
    _internal_set_abi(from._internal_abi());
  }
  if (from._internal_authorizes_call_contract() != 0) {
    _internal_set_authorizes_call_contract(from._internal_authorizes_call_contract());
  }
  if (from._internal_authorizes_transaction_application() != 0) {
    _internal_set_authorizes_transaction_application(from._internal_authorizes_transaction_application());
  }
  if (from._internal_authorizes_upload_contract() != 0) {
    _internal_set_authorizes_upload_contract(from._internal_authorizes_upload_contract());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void upload_contract_operation::CopyFrom(const upload_contract_operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.upload_contract_operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool upload_contract_operation::IsInitialized() const {
  return true;
}

void upload_contract_operation::InternalSwap(upload_contract_operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contract_id_, GetArenaForAllocation(),
      &other->contract_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bytecode_, GetArenaForAllocation(),
      &other->bytecode_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &abi_, GetArenaForAllocation(),
      &other->abi_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(upload_contract_operation, authorizes_upload_contract_)
      + sizeof(upload_contract_operation::authorizes_upload_contract_)
      - PROTOBUF_FIELD_OFFSET(upload_contract_operation, authorizes_call_contract_)>(
          reinterpret_cast<char*>(&authorizes_call_contract_),
          reinterpret_cast<char*>(&other->authorizes_call_contract_));
}

::PROTOBUF_NAMESPACE_ID::Metadata upload_contract_operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[4]);
}

// ===================================================================

class call_contract_operation::_Internal {
 public:
};

call_contract_operation::call_contract_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.call_contract_operation)
}
call_contract_operation::call_contract_operation(const call_contract_operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_id(), 
      GetArenaForAllocation());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArenaForAllocation());
  }
  entry_point_ = from.entry_point_;
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.call_contract_operation)
}

inline void call_contract_operation::SharedCtor() {
contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
entry_point_ = 0u;
}

call_contract_operation::~call_contract_operation() {
  // @@protoc_insertion_point(destructor:koinos.protocol.call_contract_operation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void call_contract_operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void call_contract_operation::ArenaDtor(void* object) {
  call_contract_operation* _this = reinterpret_cast< call_contract_operation* >(object);
  (void)_this;
}
void call_contract_operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void call_contract_operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void call_contract_operation::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.call_contract_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty();
  args_.ClearToEmpty();
  entry_point_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* call_contract_operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 entry_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entry_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* call_contract_operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.call_contract_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // uint32 entry_point = 2;
  if (this->_internal_entry_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entry_point(), target);
  }

  // bytes args = 3;
  if (!this->_internal_args().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.call_contract_operation)
  return target;
}

size_t call_contract_operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.call_contract_operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_id());
  }

  // bytes args = 3;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // uint32 entry_point = 2;
  if (this->_internal_entry_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entry_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData call_contract_operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    call_contract_operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*call_contract_operation::GetClassData() const { return &_class_data_; }

void call_contract_operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<call_contract_operation *>(to)->MergeFrom(
      static_cast<const call_contract_operation &>(from));
}


void call_contract_operation::MergeFrom(const call_contract_operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.call_contract_operation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract_id().empty()) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (!from._internal_args().empty()) {
    _internal_set_args(from._internal_args());
  }
  if (from._internal_entry_point() != 0) {
    _internal_set_entry_point(from._internal_entry_point());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void call_contract_operation::CopyFrom(const call_contract_operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.call_contract_operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool call_contract_operation::IsInitialized() const {
  return true;
}

void call_contract_operation::InternalSwap(call_contract_operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contract_id_, GetArenaForAllocation(),
      &other->contract_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &args_, GetArenaForAllocation(),
      &other->args_, other->GetArenaForAllocation()
  );
  swap(entry_point_, other->entry_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata call_contract_operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[5]);
}

// ===================================================================

class set_system_call_operation::_Internal {
 public:
  static const ::koinos::protocol::system_call_target& target(const set_system_call_operation* msg);
};

const ::koinos::protocol::system_call_target&
set_system_call_operation::_Internal::target(const set_system_call_operation* msg) {
  return *msg->target_;
}
set_system_call_operation::set_system_call_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.set_system_call_operation)
}
set_system_call_operation::set_system_call_operation(const set_system_call_operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::koinos::protocol::system_call_target(*from.target_);
  } else {
    target_ = nullptr;
  }
  call_id_ = from.call_id_;
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.set_system_call_operation)
}

inline void set_system_call_operation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&call_id_) -
    reinterpret_cast<char*>(&target_)) + sizeof(call_id_));
}

set_system_call_operation::~set_system_call_operation() {
  // @@protoc_insertion_point(destructor:koinos.protocol.set_system_call_operation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_system_call_operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete target_;
}

void set_system_call_operation::ArenaDtor(void* object) {
  set_system_call_operation* _this = reinterpret_cast< set_system_call_operation* >(object);
  (void)_this;
}
void set_system_call_operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_system_call_operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_system_call_operation::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.set_system_call_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  call_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_system_call_operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 call_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          call_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.system_call_target target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_system_call_operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.set_system_call_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 call_id = 1;
  if (this->_internal_call_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_call_id(), target);
  }

  // .koinos.protocol.system_call_target target = 2;
  if (this->_internal_has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.set_system_call_operation)
  return target;
}

size_t set_system_call_operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.set_system_call_operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.system_call_target target = 2;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // uint32 call_id = 1;
  if (this->_internal_call_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_call_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_system_call_operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_system_call_operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_system_call_operation::GetClassData() const { return &_class_data_; }

void set_system_call_operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_system_call_operation *>(to)->MergeFrom(
      static_cast<const set_system_call_operation &>(from));
}


void set_system_call_operation::MergeFrom(const set_system_call_operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.set_system_call_operation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target()) {
    _internal_mutable_target()->::koinos::protocol::system_call_target::MergeFrom(from._internal_target());
  }
  if (from._internal_call_id() != 0) {
    _internal_set_call_id(from._internal_call_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_system_call_operation::CopyFrom(const set_system_call_operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.set_system_call_operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_system_call_operation::IsInitialized() const {
  return true;
}

void set_system_call_operation::InternalSwap(set_system_call_operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(set_system_call_operation, call_id_)
      + sizeof(set_system_call_operation::call_id_)
      - PROTOBUF_FIELD_OFFSET(set_system_call_operation, target_)>(
          reinterpret_cast<char*>(&target_),
          reinterpret_cast<char*>(&other->target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata set_system_call_operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[6]);
}

// ===================================================================

class set_system_contract_operation::_Internal {
 public:
};

set_system_contract_operation::set_system_contract_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.set_system_contract_operation)
}
set_system_contract_operation::set_system_contract_operation(const set_system_contract_operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_id(), 
      GetArenaForAllocation());
  }
  system_contract_ = from.system_contract_;
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.set_system_contract_operation)
}

inline void set_system_contract_operation::SharedCtor() {
contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
system_contract_ = false;
}

set_system_contract_operation::~set_system_contract_operation() {
  // @@protoc_insertion_point(destructor:koinos.protocol.set_system_contract_operation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_system_contract_operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void set_system_contract_operation::ArenaDtor(void* object) {
  set_system_contract_operation* _this = reinterpret_cast< set_system_contract_operation* >(object);
  (void)_this;
}
void set_system_contract_operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_system_contract_operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_system_contract_operation::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.set_system_contract_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty();
  system_contract_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_system_contract_operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool system_contract = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          system_contract_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_system_contract_operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.set_system_contract_operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // bool system_contract = 2;
  if (this->_internal_system_contract() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_system_contract(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.set_system_contract_operation)
  return target;
}

size_t set_system_contract_operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.set_system_contract_operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_id());
  }

  // bool system_contract = 2;
  if (this->_internal_system_contract() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_system_contract_operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_system_contract_operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_system_contract_operation::GetClassData() const { return &_class_data_; }

void set_system_contract_operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_system_contract_operation *>(to)->MergeFrom(
      static_cast<const set_system_contract_operation &>(from));
}


void set_system_contract_operation::MergeFrom(const set_system_contract_operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.set_system_contract_operation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract_id().empty()) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from._internal_system_contract() != 0) {
    _internal_set_system_contract(from._internal_system_contract());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_system_contract_operation::CopyFrom(const set_system_contract_operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.set_system_contract_operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_system_contract_operation::IsInitialized() const {
  return true;
}

void set_system_contract_operation::InternalSwap(set_system_contract_operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contract_id_, GetArenaForAllocation(),
      &other->contract_id_, other->GetArenaForAllocation()
  );
  swap(system_contract_, other->system_contract_);
}

::PROTOBUF_NAMESPACE_ID::Metadata set_system_contract_operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[7]);
}

// ===================================================================

class operation::_Internal {
 public:
  static const ::koinos::protocol::upload_contract_operation& upload_contract(const operation* msg);
  static const ::koinos::protocol::call_contract_operation& call_contract(const operation* msg);
  static const ::koinos::protocol::set_system_call_operation& set_system_call(const operation* msg);
  static const ::koinos::protocol::set_system_contract_operation& set_system_contract(const operation* msg);
};

const ::koinos::protocol::upload_contract_operation&
operation::_Internal::upload_contract(const operation* msg) {
  return *msg->op_.upload_contract_;
}
const ::koinos::protocol::call_contract_operation&
operation::_Internal::call_contract(const operation* msg) {
  return *msg->op_.call_contract_;
}
const ::koinos::protocol::set_system_call_operation&
operation::_Internal::set_system_call(const operation* msg) {
  return *msg->op_.set_system_call_;
}
const ::koinos::protocol::set_system_contract_operation&
operation::_Internal::set_system_contract(const operation* msg) {
  return *msg->op_.set_system_contract_;
}
void operation::set_allocated_upload_contract(::koinos::protocol::upload_contract_operation* upload_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (upload_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::protocol::upload_contract_operation>::GetOwningArena(upload_contract);
    if (message_arena != submessage_arena) {
      upload_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upload_contract, submessage_arena);
    }
    set_has_upload_contract();
    op_.upload_contract_ = upload_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.operation.upload_contract)
}
void operation::set_allocated_call_contract(::koinos::protocol::call_contract_operation* call_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (call_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::protocol::call_contract_operation>::GetOwningArena(call_contract);
    if (message_arena != submessage_arena) {
      call_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_contract, submessage_arena);
    }
    set_has_call_contract();
    op_.call_contract_ = call_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.operation.call_contract)
}
void operation::set_allocated_set_system_call(::koinos::protocol::set_system_call_operation* set_system_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (set_system_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::protocol::set_system_call_operation>::GetOwningArena(set_system_call);
    if (message_arena != submessage_arena) {
      set_system_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_system_call, submessage_arena);
    }
    set_has_set_system_call();
    op_.set_system_call_ = set_system_call;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.operation.set_system_call)
}
void operation::set_allocated_set_system_contract(::koinos::protocol::set_system_contract_operation* set_system_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_op();
  if (set_system_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::protocol::set_system_contract_operation>::GetOwningArena(set_system_contract);
    if (message_arena != submessage_arena) {
      set_system_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_system_contract, submessage_arena);
    }
    set_has_set_system_contract();
    op_.set_system_contract_ = set_system_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.operation.set_system_contract)
}
operation::operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.operation)
}
operation::operation(const operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_op();
  switch (from.op_case()) {
    case kUploadContract: {
      _internal_mutable_upload_contract()->::koinos::protocol::upload_contract_operation::MergeFrom(from._internal_upload_contract());
      break;
    }
    case kCallContract: {
      _internal_mutable_call_contract()->::koinos::protocol::call_contract_operation::MergeFrom(from._internal_call_contract());
      break;
    }
    case kSetSystemCall: {
      _internal_mutable_set_system_call()->::koinos::protocol::set_system_call_operation::MergeFrom(from._internal_set_system_call());
      break;
    }
    case kSetSystemContract: {
      _internal_mutable_set_system_contract()->::koinos::protocol::set_system_contract_operation::MergeFrom(from._internal_set_system_contract());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.operation)
}

inline void operation::SharedCtor() {
clear_has_op();
}

operation::~operation() {
  // @@protoc_insertion_point(destructor:koinos.protocol.operation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_op()) {
    clear_op();
  }
}

void operation::ArenaDtor(void* object) {
  operation* _this = reinterpret_cast< operation* >(object);
  (void)_this;
}
void operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void operation::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:koinos.protocol.operation)
  switch (op_case()) {
    case kUploadContract: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.upload_contract_;
      }
      break;
    }
    case kCallContract: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.call_contract_;
      }
      break;
    }
    case kSetSystemCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.set_system_call_;
      }
      break;
    }
    case kSetSystemContract: {
      if (GetArenaForAllocation() == nullptr) {
        delete op_.set_system_contract_;
      }
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_NOT_SET;
}


void operation::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_op();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.upload_contract_operation upload_contract = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_upload_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.call_contract_operation call_contract = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_call_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.set_system_call_operation set_system_call = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_system_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.set_system_contract_operation set_system_contract = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_system_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.upload_contract_operation upload_contract = 1;
  if (_internal_has_upload_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::upload_contract(this), target, stream);
  }

  // .koinos.protocol.call_contract_operation call_contract = 2;
  if (_internal_has_call_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::call_contract(this), target, stream);
  }

  // .koinos.protocol.set_system_call_operation set_system_call = 3;
  if (_internal_has_set_system_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::set_system_call(this), target, stream);
  }

  // .koinos.protocol.set_system_contract_operation set_system_contract = 4;
  if (_internal_has_set_system_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::set_system_contract(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.operation)
  return target;
}

size_t operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (op_case()) {
    // .koinos.protocol.upload_contract_operation upload_contract = 1;
    case kUploadContract: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.upload_contract_);
      break;
    }
    // .koinos.protocol.call_contract_operation call_contract = 2;
    case kCallContract: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.call_contract_);
      break;
    }
    // .koinos.protocol.set_system_call_operation set_system_call = 3;
    case kSetSystemCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.set_system_call_);
      break;
    }
    // .koinos.protocol.set_system_contract_operation set_system_contract = 4;
    case kSetSystemContract: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.set_system_contract_);
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*operation::GetClassData() const { return &_class_data_; }

void operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<operation *>(to)->MergeFrom(
      static_cast<const operation &>(from));
}


void operation::MergeFrom(const operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.operation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.op_case()) {
    case kUploadContract: {
      _internal_mutable_upload_contract()->::koinos::protocol::upload_contract_operation::MergeFrom(from._internal_upload_contract());
      break;
    }
    case kCallContract: {
      _internal_mutable_call_contract()->::koinos::protocol::call_contract_operation::MergeFrom(from._internal_call_contract());
      break;
    }
    case kSetSystemCall: {
      _internal_mutable_set_system_call()->::koinos::protocol::set_system_call_operation::MergeFrom(from._internal_set_system_call());
      break;
    }
    case kSetSystemContract: {
      _internal_mutable_set_system_contract()->::koinos::protocol::set_system_contract_operation::MergeFrom(from._internal_set_system_contract());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void operation::CopyFrom(const operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operation::IsInitialized() const {
  return true;
}

void operation::InternalSwap(operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(op_, other->op_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata operation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[8]);
}

// ===================================================================

class transaction_header::_Internal {
 public:
};

transaction_header::transaction_header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.transaction_header)
}
transaction_header::transaction_header(const transaction_header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce(), 
      GetArenaForAllocation());
  }
  operation_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operation_merkle_root().empty()) {
    operation_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operation_merkle_root(), 
      GetArenaForAllocation());
  }
  payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payer().empty()) {
    payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payer(), 
      GetArenaForAllocation());
  }
  payee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payee().empty()) {
    payee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payee(), 
      GetArenaForAllocation());
  }
  rc_limit_ = from.rc_limit_;
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.transaction_header)
}

inline void transaction_header::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
operation_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rc_limit_ = uint64_t{0u};
}

transaction_header::~transaction_header() {
  // @@protoc_insertion_point(destructor:koinos.protocol.transaction_header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_merkle_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transaction_header::ArenaDtor(void* object) {
  transaction_header* _this = reinterpret_cast< transaction_header* >(object);
  (void)_this;
}
void transaction_header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_header::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.transaction_header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  nonce_.ClearToEmpty();
  operation_merkle_root_.ClearToEmpty();
  payer_.ClearToEmpty();
  payee_.ClearToEmpty();
  rc_limit_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rc_limit = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rc_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nonce = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes operation_merkle_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_operation_merkle_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payer = 5 [(.koinos.btype) = ADDRESS];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_payer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payee = 6 [(.koinos.btype) = ADDRESS];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_payee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction_header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.transaction_header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (!this->_internal_chain_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chain_id(), target);
  }

  // uint64 rc_limit = 2 [jstype = JS_STRING];
  if (this->_internal_rc_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_rc_limit(), target);
  }

  // bytes nonce = 3;
  if (!this->_internal_nonce().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_nonce(), target);
  }

  // bytes operation_merkle_root = 4;
  if (!this->_internal_operation_merkle_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_operation_merkle_root(), target);
  }

  // bytes payer = 5 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_payer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_payer(), target);
  }

  // bytes payee = 6 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_payee().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_payee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.transaction_header)
  return target;
}

size_t transaction_header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.transaction_header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_id());
  }

  // bytes nonce = 3;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce());
  }

  // bytes operation_merkle_root = 4;
  if (!this->_internal_operation_merkle_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_operation_merkle_root());
  }

  // bytes payer = 5 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_payer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payer());
  }

  // bytes payee = 6 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_payee().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payee());
  }

  // uint64 rc_limit = 2 [jstype = JS_STRING];
  if (this->_internal_rc_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rc_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_header::GetClassData() const { return &_class_data_; }

void transaction_header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transaction_header *>(to)->MergeFrom(
      static_cast<const transaction_header &>(from));
}


void transaction_header::MergeFrom(const transaction_header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.transaction_header)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (!from._internal_nonce().empty()) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (!from._internal_operation_merkle_root().empty()) {
    _internal_set_operation_merkle_root(from._internal_operation_merkle_root());
  }
  if (!from._internal_payer().empty()) {
    _internal_set_payer(from._internal_payer());
  }
  if (!from._internal_payee().empty()) {
    _internal_set_payee(from._internal_payee());
  }
  if (from._internal_rc_limit() != 0) {
    _internal_set_rc_limit(from._internal_rc_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_header::CopyFrom(const transaction_header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.transaction_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_header::IsInitialized() const {
  return true;
}

void transaction_header::InternalSwap(transaction_header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, GetArenaForAllocation(),
      &other->chain_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nonce_, GetArenaForAllocation(),
      &other->nonce_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operation_merkle_root_, GetArenaForAllocation(),
      &other->operation_merkle_root_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payer_, GetArenaForAllocation(),
      &other->payer_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payee_, GetArenaForAllocation(),
      &other->payee_, other->GetArenaForAllocation()
  );
  swap(rc_limit_, other->rc_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[9]);
}

// ===================================================================

class transaction::_Internal {
 public:
  static const ::koinos::protocol::transaction_header& header(const transaction* msg);
};

const ::koinos::protocol::transaction_header&
transaction::_Internal::header(const transaction* msg) {
  return *msg->header_;
}
transaction::transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  operations_(arena),
  signatures_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.transaction)
}
transaction::transaction(const transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      operations_(from.operations_),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::koinos::protocol::transaction_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.transaction)
}

inline void transaction::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
header_ = nullptr;
}

transaction::~transaction() {
  // @@protoc_insertion_point(destructor:koinos.protocol.transaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void transaction::ArenaDtor(void* object) {
  transaction* _this = reinterpret_cast< transaction* >(object);
  (void)_this;
}
void transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  signatures_.Clear();
  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.transaction_header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .koinos.protocol.operation operations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes signatures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signatures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .koinos.protocol.transaction_header header = 2;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  // repeated .koinos.protocol.operation operations = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_operations(i), target, stream);
  }

  // repeated bytes signatures = 4;
  for (int i = 0, n = this->_internal_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_signatures(i);
    target = stream->WriteBytes(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.transaction)
  return target;
}

size_t transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.protocol.operation operations = 3;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes signatures = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signatures_.size());
  for (int i = 0, n = signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signatures_.Get(i));
  }

  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // .koinos.protocol.transaction_header header = 2;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction::GetClassData() const { return &_class_data_; }

void transaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transaction *>(to)->MergeFrom(
      static_cast<const transaction &>(from));
}


void transaction::MergeFrom(const transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.transaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  signatures_.MergeFrom(from.signatures_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::koinos::protocol::transaction_header::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction::CopyFrom(const transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction::IsInitialized() const {
  return true;
}

void transaction::InternalSwap(transaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  operations_.InternalSwap(&other->operations_);
  signatures_.InternalSwap(&other->signatures_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[10]);
}

// ===================================================================

class transaction_receipt::_Internal {
 public:
};

transaction_receipt::transaction_receipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena),
  logs_(arena),
  state_delta_entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.transaction_receipt)
}
transaction_receipt::transaction_receipt(const transaction_receipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_),
      logs_(from.logs_),
      state_delta_entries_(from.state_delta_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payer().empty()) {
    payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&max_payer_rc_, &from.max_payer_rc_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverted_) -
    reinterpret_cast<char*>(&max_payer_rc_)) + sizeof(reverted_));
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.transaction_receipt)
}

inline void transaction_receipt::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_payer_rc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reverted_) -
    reinterpret_cast<char*>(&max_payer_rc_)) + sizeof(reverted_));
}

transaction_receipt::~transaction_receipt() {
  // @@protoc_insertion_point(destructor:koinos.protocol.transaction_receipt)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_receipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transaction_receipt::ArenaDtor(void* object) {
  transaction_receipt* _this = reinterpret_cast< transaction_receipt* >(object);
  (void)_this;
}
void transaction_receipt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_receipt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_receipt::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.transaction_receipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  logs_.Clear();
  state_delta_entries_.Clear();
  id_.ClearToEmpty();
  payer_.ClearToEmpty();
  ::memset(&max_payer_rc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverted_) -
      reinterpret_cast<char*>(&max_payer_rc_)) + sizeof(reverted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_receipt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payer = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_payer_rc = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_payer_rc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rc_limit = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rc_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rc_used = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rc_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 disk_storage_used = 6 [jstype = JS_STRING];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          disk_storage_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 network_bandwidth_used = 7 [jstype = JS_STRING];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          network_bandwidth_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 compute_bandwidth_used = 8 [jstype = JS_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          compute_bandwidth_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reverted = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          reverted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .koinos.protocol.event_data events = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string logs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_logs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.protocol.transaction_receipt.logs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .koinos.protocol.state_delta_entry state_delta_entries = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_state_delta_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction_receipt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.transaction_receipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes payer = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_payer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payer(), target);
  }

  // uint64 max_payer_rc = 3 [jstype = JS_STRING];
  if (this->_internal_max_payer_rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_max_payer_rc(), target);
  }

  // uint64 rc_limit = 4 [jstype = JS_STRING];
  if (this->_internal_rc_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_rc_limit(), target);
  }

  // uint64 rc_used = 5 [jstype = JS_STRING];
  if (this->_internal_rc_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_rc_used(), target);
  }

  // uint64 disk_storage_used = 6 [jstype = JS_STRING];
  if (this->_internal_disk_storage_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_disk_storage_used(), target);
  }

  // uint64 network_bandwidth_used = 7 [jstype = JS_STRING];
  if (this->_internal_network_bandwidth_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_network_bandwidth_used(), target);
  }

  // uint64 compute_bandwidth_used = 8 [jstype = JS_STRING];
  if (this->_internal_compute_bandwidth_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_compute_bandwidth_used(), target);
  }

  // bool reverted = 9;
  if (this->_internal_reverted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_reverted(), target);
  }

  // repeated .koinos.protocol.event_data events = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_events(i), target, stream);
  }

  // repeated string logs = 11;
  for (int i = 0, n = this->_internal_logs_size(); i < n; i++) {
    const auto& s = this->_internal_logs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.protocol.transaction_receipt.logs");
    target = stream->WriteString(11, s, target);
  }

  // repeated .koinos.protocol.state_delta_entry state_delta_entries = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_state_delta_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_state_delta_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.transaction_receipt)
  return target;
}

size_t transaction_receipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.transaction_receipt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.protocol.event_data events = 10;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string logs = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(logs_.size());
  for (int i = 0, n = logs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      logs_.Get(i));
  }

  // repeated .koinos.protocol.state_delta_entry state_delta_entries = 12;
  total_size += 1UL * this->_internal_state_delta_entries_size();
  for (const auto& msg : this->state_delta_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes payer = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_payer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payer());
  }

  // uint64 max_payer_rc = 3 [jstype = JS_STRING];
  if (this->_internal_max_payer_rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_payer_rc());
  }

  // uint64 rc_limit = 4 [jstype = JS_STRING];
  if (this->_internal_rc_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rc_limit());
  }

  // uint64 rc_used = 5 [jstype = JS_STRING];
  if (this->_internal_rc_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rc_used());
  }

  // uint64 disk_storage_used = 6 [jstype = JS_STRING];
  if (this->_internal_disk_storage_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_disk_storage_used());
  }

  // uint64 network_bandwidth_used = 7 [jstype = JS_STRING];
  if (this->_internal_network_bandwidth_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_network_bandwidth_used());
  }

  // uint64 compute_bandwidth_used = 8 [jstype = JS_STRING];
  if (this->_internal_compute_bandwidth_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_compute_bandwidth_used());
  }

  // bool reverted = 9;
  if (this->_internal_reverted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_receipt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_receipt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_receipt::GetClassData() const { return &_class_data_; }

void transaction_receipt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transaction_receipt *>(to)->MergeFrom(
      static_cast<const transaction_receipt &>(from));
}


void transaction_receipt::MergeFrom(const transaction_receipt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.transaction_receipt)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  logs_.MergeFrom(from.logs_);
  state_delta_entries_.MergeFrom(from.state_delta_entries_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_payer().empty()) {
    _internal_set_payer(from._internal_payer());
  }
  if (from._internal_max_payer_rc() != 0) {
    _internal_set_max_payer_rc(from._internal_max_payer_rc());
  }
  if (from._internal_rc_limit() != 0) {
    _internal_set_rc_limit(from._internal_rc_limit());
  }
  if (from._internal_rc_used() != 0) {
    _internal_set_rc_used(from._internal_rc_used());
  }
  if (from._internal_disk_storage_used() != 0) {
    _internal_set_disk_storage_used(from._internal_disk_storage_used());
  }
  if (from._internal_network_bandwidth_used() != 0) {
    _internal_set_network_bandwidth_used(from._internal_network_bandwidth_used());
  }
  if (from._internal_compute_bandwidth_used() != 0) {
    _internal_set_compute_bandwidth_used(from._internal_compute_bandwidth_used());
  }
  if (from._internal_reverted() != 0) {
    _internal_set_reverted(from._internal_reverted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_receipt::CopyFrom(const transaction_receipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.transaction_receipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_receipt::IsInitialized() const {
  return true;
}

void transaction_receipt::InternalSwap(transaction_receipt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  logs_.InternalSwap(&other->logs_);
  state_delta_entries_.InternalSwap(&other->state_delta_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payer_, GetArenaForAllocation(),
      &other->payer_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transaction_receipt, reverted_)
      + sizeof(transaction_receipt::reverted_)
      - PROTOBUF_FIELD_OFFSET(transaction_receipt, max_payer_rc_)>(
          reinterpret_cast<char*>(&max_payer_rc_),
          reinterpret_cast<char*>(&other->max_payer_rc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_receipt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[11]);
}

// ===================================================================

class block_header::_Internal {
 public:
};

block_header::block_header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  approved_proposals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.block_header)
}
block_header::block_header(const block_header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      approved_proposals_(from.approved_proposals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  previous_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous().empty()) {
    previous_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous(), 
      GetArenaForAllocation());
  }
  previous_state_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_previous_state_merkle_root().empty()) {
    previous_state_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_previous_state_merkle_root(), 
      GetArenaForAllocation());
  }
  transaction_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_merkle_root().empty()) {
    transaction_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_merkle_root(), 
      GetArenaForAllocation());
  }
  signer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signer().empty()) {
    signer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&height_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.block_header)
}

inline void block_header::SharedCtor() {
previous_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
previous_state_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transaction_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&height_)) + sizeof(timestamp_));
}

block_header::~block_header() {
  // @@protoc_insertion_point(destructor:koinos.protocol.block_header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  previous_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  previous_state_merkle_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_merkle_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void block_header::ArenaDtor(void* object) {
  block_header* _this = reinterpret_cast< block_header* >(object);
  (void)_this;
}
void block_header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_header::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.block_header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  approved_proposals_.Clear();
  previous_.ClearToEmpty();
  previous_state_merkle_root_.ClearToEmpty();
  transaction_merkle_root_.ClearToEmpty();
  signer_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&height_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes previous = 1 [(.koinos.btype) = BLOCK_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_previous();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes previous_state_merkle_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_previous_state_merkle_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transaction_merkle_root = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_transaction_merkle_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signer = 6 [(.koinos.btype) = ADDRESS];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_signer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes approved_proposals = 7 [(.koinos.btype) = TRANSACTION_ID];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_approved_proposals();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.block_header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes previous = 1 [(.koinos.btype) = BLOCK_ID];
  if (!this->_internal_previous().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_previous(), target);
  }

  // uint64 height = 2 [jstype = JS_STRING];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  // uint64 timestamp = 3 [jstype = JS_STRING];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // bytes previous_state_merkle_root = 4;
  if (!this->_internal_previous_state_merkle_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_previous_state_merkle_root(), target);
  }

  // bytes transaction_merkle_root = 5;
  if (!this->_internal_transaction_merkle_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_transaction_merkle_root(), target);
  }

  // bytes signer = 6 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_signer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_signer(), target);
  }

  // repeated bytes approved_proposals = 7 [(.koinos.btype) = TRANSACTION_ID];
  for (int i = 0, n = this->_internal_approved_proposals_size(); i < n; i++) {
    const auto& s = this->_internal_approved_proposals(i);
    target = stream->WriteBytes(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.block_header)
  return target;
}

size_t block_header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.block_header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes approved_proposals = 7 [(.koinos.btype) = TRANSACTION_ID];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(approved_proposals_.size());
  for (int i = 0, n = approved_proposals_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      approved_proposals_.Get(i));
  }

  // bytes previous = 1 [(.koinos.btype) = BLOCK_ID];
  if (!this->_internal_previous().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previous());
  }

  // bytes previous_state_merkle_root = 4;
  if (!this->_internal_previous_state_merkle_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_previous_state_merkle_root());
  }

  // bytes transaction_merkle_root = 5;
  if (!this->_internal_transaction_merkle_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_merkle_root());
  }

  // bytes signer = 6 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_signer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signer());
  }

  // uint64 height = 2 [jstype = JS_STRING];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint64 timestamp = 3 [jstype = JS_STRING];
  if (this->_internal_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_header::GetClassData() const { return &_class_data_; }

void block_header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block_header *>(to)->MergeFrom(
      static_cast<const block_header &>(from));
}


void block_header::MergeFrom(const block_header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.block_header)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  approved_proposals_.MergeFrom(from.approved_proposals_);
  if (!from._internal_previous().empty()) {
    _internal_set_previous(from._internal_previous());
  }
  if (!from._internal_previous_state_merkle_root().empty()) {
    _internal_set_previous_state_merkle_root(from._internal_previous_state_merkle_root());
  }
  if (!from._internal_transaction_merkle_root().empty()) {
    _internal_set_transaction_merkle_root(from._internal_transaction_merkle_root());
  }
  if (!from._internal_signer().empty()) {
    _internal_set_signer(from._internal_signer());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_header::CopyFrom(const block_header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.block_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_header::IsInitialized() const {
  return true;
}

void block_header::InternalSwap(block_header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  approved_proposals_.InternalSwap(&other->approved_proposals_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previous_, GetArenaForAllocation(),
      &other->previous_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &previous_state_merkle_root_, GetArenaForAllocation(),
      &other->previous_state_merkle_root_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_merkle_root_, GetArenaForAllocation(),
      &other->transaction_merkle_root_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signer_, GetArenaForAllocation(),
      &other->signer_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(block_header, timestamp_)
      + sizeof(block_header::timestamp_)
      - PROTOBUF_FIELD_OFFSET(block_header, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata block_header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[12]);
}

// ===================================================================

class block::_Internal {
 public:
  static const ::koinos::protocol::block_header& header(const block* msg);
};

const ::koinos::protocol::block_header&
block::_Internal::header(const block* msg) {
  return *msg->header_;
}
block::block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.block)
}
block::block(const block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::koinos::protocol::block_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.block)
}

inline void block::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
header_ = nullptr;
}

block::~block() {
  // @@protoc_insertion_point(destructor:koinos.protocol.block)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void block::ArenaDtor(void* object) {
  block* _this = reinterpret_cast< block* >(object);
  (void)_this;
}
void block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  id_.ClearToEmpty();
  signature_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1 [(.koinos.btype) = BLOCK_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.block_header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .koinos.protocol.transaction transactions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1 [(.koinos.btype) = BLOCK_ID];
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .koinos.protocol.block_header header = 2;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  // repeated .koinos.protocol.transaction transactions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_transactions(i), target, stream);
  }

  // bytes signature = 4;
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.block)
  return target;
}

size_t block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.protocol.transaction transactions = 3;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes id = 1 [(.koinos.btype) = BLOCK_ID];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes signature = 4;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // .koinos.protocol.block_header header = 2;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block::GetClassData() const { return &_class_data_; }

void block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block *>(to)->MergeFrom(
      static_cast<const block &>(from));
}


void block::MergeFrom(const block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.block)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::koinos::protocol::block_header::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block::CopyFrom(const block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block::IsInitialized() const {
  return true;
}

void block::InternalSwap(block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, GetArenaForAllocation(),
      &other->signature_, other->GetArenaForAllocation()
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata block::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[13]);
}

// ===================================================================

class block_receipt::_Internal {
 public:
};

block_receipt::block_receipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena),
  transaction_receipts_(arena),
  logs_(arena),
  state_delta_entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.block_receipt)
}
block_receipt::block_receipt(const block_receipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_),
      transaction_receipts_(from.transaction_receipts_),
      logs_(from.logs_),
      state_delta_entries_(from.state_delta_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  state_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_merkle_root().empty()) {
    state_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state_merkle_root(), 
      GetArenaForAllocation());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&compute_bandwidth_charged_) -
    reinterpret_cast<char*>(&height_)) + sizeof(compute_bandwidth_charged_));
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.block_receipt)
}

inline void block_receipt::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
state_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compute_bandwidth_charged_) -
    reinterpret_cast<char*>(&height_)) + sizeof(compute_bandwidth_charged_));
}

block_receipt::~block_receipt() {
  // @@protoc_insertion_point(destructor:koinos.protocol.block_receipt)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_receipt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_merkle_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void block_receipt::ArenaDtor(void* object) {
  block_receipt* _this = reinterpret_cast< block_receipt* >(object);
  (void)_this;
}
void block_receipt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_receipt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_receipt::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.block_receipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  transaction_receipts_.Clear();
  logs_.Clear();
  state_delta_entries_.Clear();
  id_.ClearToEmpty();
  state_merkle_root_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compute_bandwidth_charged_) -
      reinterpret_cast<char*>(&height_)) + sizeof(compute_bandwidth_charged_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_receipt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1 [(.koinos.btype) = BLOCK_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 disk_storage_used = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          disk_storage_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 network_bandwidth_used = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          network_bandwidth_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 compute_bandwidth_used = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          compute_bandwidth_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes state_merkle_root = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_state_merkle_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .koinos.protocol.event_data events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .koinos.protocol.transaction_receipt transaction_receipts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transaction_receipts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string logs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_logs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.protocol.block_receipt.logs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 disk_storage_charged = 10 [jstype = JS_STRING];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          disk_storage_charged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 network_bandwidth_charged = 11 [jstype = JS_STRING];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          network_bandwidth_charged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 compute_bandwidth_charged = 12 [jstype = JS_STRING];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          compute_bandwidth_charged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .koinos.protocol.state_delta_entry state_delta_entries = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_state_delta_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_receipt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.block_receipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1 [(.koinos.btype) = BLOCK_ID];
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint64 height = 2 [jstype = JS_STRING];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  // uint64 disk_storage_used = 3 [jstype = JS_STRING];
  if (this->_internal_disk_storage_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_disk_storage_used(), target);
  }

  // uint64 network_bandwidth_used = 4 [jstype = JS_STRING];
  if (this->_internal_network_bandwidth_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_network_bandwidth_used(), target);
  }

  // uint64 compute_bandwidth_used = 5 [jstype = JS_STRING];
  if (this->_internal_compute_bandwidth_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_compute_bandwidth_used(), target);
  }

  // bytes state_merkle_root = 6;
  if (!this->_internal_state_merkle_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_state_merkle_root(), target);
  }

  // repeated .koinos.protocol.event_data events = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_events(i), target, stream);
  }

  // repeated .koinos.protocol.transaction_receipt transaction_receipts = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transaction_receipts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_transaction_receipts(i), target, stream);
  }

  // repeated string logs = 9;
  for (int i = 0, n = this->_internal_logs_size(); i < n; i++) {
    const auto& s = this->_internal_logs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.protocol.block_receipt.logs");
    target = stream->WriteString(9, s, target);
  }

  // uint64 disk_storage_charged = 10 [jstype = JS_STRING];
  if (this->_internal_disk_storage_charged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_disk_storage_charged(), target);
  }

  // uint64 network_bandwidth_charged = 11 [jstype = JS_STRING];
  if (this->_internal_network_bandwidth_charged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_network_bandwidth_charged(), target);
  }

  // uint64 compute_bandwidth_charged = 12 [jstype = JS_STRING];
  if (this->_internal_compute_bandwidth_charged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_compute_bandwidth_charged(), target);
  }

  // repeated .koinos.protocol.state_delta_entry state_delta_entries = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_state_delta_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_state_delta_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.block_receipt)
  return target;
}

size_t block_receipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.block_receipt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.protocol.event_data events = 7;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .koinos.protocol.transaction_receipt transaction_receipts = 8;
  total_size += 1UL * this->_internal_transaction_receipts_size();
  for (const auto& msg : this->transaction_receipts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string logs = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(logs_.size());
  for (int i = 0, n = logs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      logs_.Get(i));
  }

  // repeated .koinos.protocol.state_delta_entry state_delta_entries = 13;
  total_size += 1UL * this->_internal_state_delta_entries_size();
  for (const auto& msg : this->state_delta_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes id = 1 [(.koinos.btype) = BLOCK_ID];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // bytes state_merkle_root = 6;
  if (!this->_internal_state_merkle_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_merkle_root());
  }

  // uint64 height = 2 [jstype = JS_STRING];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint64 disk_storage_used = 3 [jstype = JS_STRING];
  if (this->_internal_disk_storage_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_disk_storage_used());
  }

  // uint64 network_bandwidth_used = 4 [jstype = JS_STRING];
  if (this->_internal_network_bandwidth_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_network_bandwidth_used());
  }

  // uint64 compute_bandwidth_used = 5 [jstype = JS_STRING];
  if (this->_internal_compute_bandwidth_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_compute_bandwidth_used());
  }

  // uint64 disk_storage_charged = 10 [jstype = JS_STRING];
  if (this->_internal_disk_storage_charged() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_disk_storage_charged());
  }

  // uint64 network_bandwidth_charged = 11 [jstype = JS_STRING];
  if (this->_internal_network_bandwidth_charged() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_network_bandwidth_charged());
  }

  // uint64 compute_bandwidth_charged = 12 [jstype = JS_STRING];
  if (this->_internal_compute_bandwidth_charged() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_compute_bandwidth_charged());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_receipt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_receipt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_receipt::GetClassData() const { return &_class_data_; }

void block_receipt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block_receipt *>(to)->MergeFrom(
      static_cast<const block_receipt &>(from));
}


void block_receipt::MergeFrom(const block_receipt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.block_receipt)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  transaction_receipts_.MergeFrom(from.transaction_receipts_);
  logs_.MergeFrom(from.logs_);
  state_delta_entries_.MergeFrom(from.state_delta_entries_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_state_merkle_root().empty()) {
    _internal_set_state_merkle_root(from._internal_state_merkle_root());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_disk_storage_used() != 0) {
    _internal_set_disk_storage_used(from._internal_disk_storage_used());
  }
  if (from._internal_network_bandwidth_used() != 0) {
    _internal_set_network_bandwidth_used(from._internal_network_bandwidth_used());
  }
  if (from._internal_compute_bandwidth_used() != 0) {
    _internal_set_compute_bandwidth_used(from._internal_compute_bandwidth_used());
  }
  if (from._internal_disk_storage_charged() != 0) {
    _internal_set_disk_storage_charged(from._internal_disk_storage_charged());
  }
  if (from._internal_network_bandwidth_charged() != 0) {
    _internal_set_network_bandwidth_charged(from._internal_network_bandwidth_charged());
  }
  if (from._internal_compute_bandwidth_charged() != 0) {
    _internal_set_compute_bandwidth_charged(from._internal_compute_bandwidth_charged());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_receipt::CopyFrom(const block_receipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.block_receipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_receipt::IsInitialized() const {
  return true;
}

void block_receipt::InternalSwap(block_receipt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  transaction_receipts_.InternalSwap(&other->transaction_receipts_);
  logs_.InternalSwap(&other->logs_);
  state_delta_entries_.InternalSwap(&other->state_delta_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &state_merkle_root_, GetArenaForAllocation(),
      &other->state_merkle_root_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(block_receipt, compute_bandwidth_charged_)
      + sizeof(block_receipt::compute_bandwidth_charged_)
      - PROTOBUF_FIELD_OFFSET(block_receipt, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata block_receipt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[14]);
}

// ===================================================================

class state_delta_entry::_Internal {
 public:
  using HasBits = decltype(std::declval<state_delta_entry>()._has_bits_);
  static const ::koinos::protocol::object_space& object_space(const state_delta_entry* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::koinos::protocol::object_space&
state_delta_entry::_Internal::object_space(const state_delta_entry* msg) {
  return *msg->object_space_;
}
state_delta_entry::state_delta_entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.protocol.state_delta_entry)
}
state_delta_entry::state_delta_entry(const state_delta_entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_object_space()) {
    object_space_ = new ::koinos::protocol::object_space(*from.object_space_);
  } else {
    object_space_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.protocol.state_delta_entry)
}

inline void state_delta_entry::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
object_space_ = nullptr;
}

state_delta_entry::~state_delta_entry() {
  // @@protoc_insertion_point(destructor:koinos.protocol.state_delta_entry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void state_delta_entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_space_;
}

void state_delta_entry::ArenaDtor(void* object) {
  state_delta_entry* _this = reinterpret_cast< state_delta_entry* >(object);
  (void)_this;
}
void state_delta_entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void state_delta_entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void state_delta_entry::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.protocol.state_delta_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && object_space_ != nullptr) {
    delete object_space_;
  }
  object_space_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* state_delta_entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.object_space object_space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_space(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* state_delta_entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.protocol.state_delta_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.object_space object_space = 1;
  if (this->_internal_has_object_space()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object_space(this), target, stream);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // optional bytes value = 3;
  if (_internal_has_value()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.protocol.state_delta_entry)
  return target;
}

size_t state_delta_entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.protocol.state_delta_entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // optional bytes value = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .koinos.protocol.object_space object_space = 1;
  if (this->_internal_has_object_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_space_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData state_delta_entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    state_delta_entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*state_delta_entry::GetClassData() const { return &_class_data_; }

void state_delta_entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<state_delta_entry *>(to)->MergeFrom(
      static_cast<const state_delta_entry &>(from));
}


void state_delta_entry::MergeFrom(const state_delta_entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.protocol.state_delta_entry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_object_space()) {
    _internal_mutable_object_space()->::koinos::protocol::object_space::MergeFrom(from._internal_object_space());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void state_delta_entry::CopyFrom(const state_delta_entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.protocol.state_delta_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool state_delta_entry::IsInitialized() const {
  return true;
}

void state_delta_entry::InternalSwap(state_delta_entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  swap(object_space_, other->object_space_);
}

::PROTOBUF_NAMESPACE_ID::Metadata state_delta_entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_getter, &descriptor_table_koinos_2fprotocol_2fprotocol_2eproto_once,
      file_level_metadata_koinos_2fprotocol_2fprotocol_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::protocol::object_space* Arena::CreateMaybeMessage< ::koinos::protocol::object_space >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::object_space >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::event_data* Arena::CreateMaybeMessage< ::koinos::protocol::event_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::event_data >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::contract_call_bundle* Arena::CreateMaybeMessage< ::koinos::protocol::contract_call_bundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::contract_call_bundle >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::system_call_target* Arena::CreateMaybeMessage< ::koinos::protocol::system_call_target >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::system_call_target >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::upload_contract_operation* Arena::CreateMaybeMessage< ::koinos::protocol::upload_contract_operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::upload_contract_operation >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::call_contract_operation* Arena::CreateMaybeMessage< ::koinos::protocol::call_contract_operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::call_contract_operation >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::set_system_call_operation* Arena::CreateMaybeMessage< ::koinos::protocol::set_system_call_operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::set_system_call_operation >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::set_system_contract_operation* Arena::CreateMaybeMessage< ::koinos::protocol::set_system_contract_operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::set_system_contract_operation >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::operation* Arena::CreateMaybeMessage< ::koinos::protocol::operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::operation >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::transaction_header* Arena::CreateMaybeMessage< ::koinos::protocol::transaction_header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::transaction_header >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::transaction* Arena::CreateMaybeMessage< ::koinos::protocol::transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::transaction_receipt* Arena::CreateMaybeMessage< ::koinos::protocol::transaction_receipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::transaction_receipt >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::block_header* Arena::CreateMaybeMessage< ::koinos::protocol::block_header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::block_header >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::block* Arena::CreateMaybeMessage< ::koinos::protocol::block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::block >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::block_receipt* Arena::CreateMaybeMessage< ::koinos::protocol::block_receipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::block_receipt >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::protocol::state_delta_entry* Arena::CreateMaybeMessage< ::koinos::protocol::state_delta_entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::protocol::state_delta_entry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
