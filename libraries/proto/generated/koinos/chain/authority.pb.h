// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/chain/authority.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2fauthority_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2fauthority_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "koinos/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fchain_2fauthority_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fchain_2fauthority_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fchain_2fauthority_2eproto;
namespace koinos {
namespace chain {
class authorize_arguments;
struct authorize_argumentsDefaultTypeInternal;
extern authorize_argumentsDefaultTypeInternal _authorize_arguments_default_instance_;
class authorize_result;
struct authorize_resultDefaultTypeInternal;
extern authorize_resultDefaultTypeInternal _authorize_result_default_instance_;
class call_target;
struct call_targetDefaultTypeInternal;
extern call_targetDefaultTypeInternal _call_target_default_instance_;
}  // namespace chain
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::chain::authorize_arguments* Arena::CreateMaybeMessage<::koinos::chain::authorize_arguments>(Arena*);
template<> ::koinos::chain::authorize_result* Arena::CreateMaybeMessage<::koinos::chain::authorize_result>(Arena*);
template<> ::koinos::chain::call_target* Arena::CreateMaybeMessage<::koinos::chain::call_target>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace chain {

enum authorization_type : int {
  contract_call = 0,
  transaction_application = 1,
  contract_upload = 2,
  authorization_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  authorization_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool authorization_type_IsValid(int value);
constexpr authorization_type authorization_type_MIN = contract_call;
constexpr authorization_type authorization_type_MAX = contract_upload;
constexpr int authorization_type_ARRAYSIZE = authorization_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* authorization_type_descriptor();
template<typename T>
inline const std::string& authorization_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, authorization_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function authorization_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    authorization_type_descriptor(), enum_t_value);
}
inline bool authorization_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, authorization_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<authorization_type>(
    authorization_type_descriptor(), name, value);
}
// ===================================================================

class call_target final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.call_target) */ {
 public:
  inline call_target() : call_target(nullptr) {}
  ~call_target() override;
  explicit constexpr call_target(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  call_target(const call_target& from);
  call_target(call_target&& from) noexcept
    : call_target() {
    *this = ::std::move(from);
  }

  inline call_target& operator=(const call_target& from) {
    CopyFrom(from);
    return *this;
  }
  inline call_target& operator=(call_target&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const call_target& default_instance() {
    return *internal_default_instance();
  }
  static inline const call_target* internal_default_instance() {
    return reinterpret_cast<const call_target*>(
               &_call_target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(call_target& a, call_target& b) {
    a.Swap(&b);
  }
  inline void Swap(call_target* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(call_target* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline call_target* New() const final {
    return new call_target();
  }

  call_target* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<call_target>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const call_target& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const call_target& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(call_target* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.call_target";
  }
  protected:
  explicit call_target(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kEntryPointFieldNumber = 2,
  };
  // bytes contract_id = 1 [(.koinos.btype) = ADDRESS];
  void clear_contract_id();
  const std::string& contract_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // uint32 entry_point = 2;
  void clear_entry_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point() const;
  void set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entry_point() const;
  void _internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.call_target)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fauthority_2eproto;
};
// -------------------------------------------------------------------

class authorize_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.authorize_arguments) */ {
 public:
  inline authorize_arguments() : authorize_arguments(nullptr) {}
  ~authorize_arguments() override;
  explicit constexpr authorize_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  authorize_arguments(const authorize_arguments& from);
  authorize_arguments(authorize_arguments&& from) noexcept
    : authorize_arguments() {
    *this = ::std::move(from);
  }

  inline authorize_arguments& operator=(const authorize_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline authorize_arguments& operator=(authorize_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const authorize_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const authorize_arguments* internal_default_instance() {
    return reinterpret_cast<const authorize_arguments*>(
               &_authorize_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(authorize_arguments& a, authorize_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(authorize_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(authorize_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline authorize_arguments* New() const final {
    return new authorize_arguments();
  }

  authorize_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<authorize_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const authorize_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const authorize_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(authorize_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.authorize_arguments";
  }
  protected:
  explicit authorize_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional .koinos.chain.call_target call = 2;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::koinos::chain::call_target& call() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::chain::call_target* release_call();
  ::koinos::chain::call_target* mutable_call();
  void set_allocated_call(::koinos::chain::call_target* call);
  private:
  const ::koinos::chain::call_target& _internal_call() const;
  ::koinos::chain::call_target* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::koinos::chain::call_target* call);
  ::koinos::chain::call_target* unsafe_arena_release_call();

  // .koinos.chain.authorization_type type = 1;
  void clear_type();
  ::koinos::chain::authorization_type type() const;
  void set_type(::koinos::chain::authorization_type value);
  private:
  ::koinos::chain::authorization_type _internal_type() const;
  void _internal_set_type(::koinos::chain::authorization_type value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.authorize_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::koinos::chain::call_target* call_;
  int type_;
  friend struct ::TableStruct_koinos_2fchain_2fauthority_2eproto;
};
// -------------------------------------------------------------------

class authorize_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.authorize_result) */ {
 public:
  inline authorize_result() : authorize_result(nullptr) {}
  ~authorize_result() override;
  explicit constexpr authorize_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  authorize_result(const authorize_result& from);
  authorize_result(authorize_result&& from) noexcept
    : authorize_result() {
    *this = ::std::move(from);
  }

  inline authorize_result& operator=(const authorize_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline authorize_result& operator=(authorize_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const authorize_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const authorize_result* internal_default_instance() {
    return reinterpret_cast<const authorize_result*>(
               &_authorize_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(authorize_result& a, authorize_result& b) {
    a.Swap(&b);
  }
  inline void Swap(authorize_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(authorize_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline authorize_result* New() const final {
    return new authorize_result();
  }

  authorize_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<authorize_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const authorize_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const authorize_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(authorize_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.authorize_result";
  }
  protected:
  explicit authorize_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.authorize_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fauthority_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// call_target

// bytes contract_id = 1 [(.koinos.btype) = ADDRESS];
inline void call_target::clear_contract_id() {
  contract_id_.ClearToEmpty();
}
inline const std::string& call_target::contract_id() const {
  // @@protoc_insertion_point(field_get:koinos.chain.call_target.contract_id)
  return _internal_contract_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void call_target::set_contract_id(ArgT0&& arg0, ArgT... args) {
 
 contract_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.chain.call_target.contract_id)
}
inline std::string* call_target::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:koinos.chain.call_target.contract_id)
  return _s;
}
inline const std::string& call_target::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void call_target::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* call_target::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* call_target::release_contract_id() {
  // @@protoc_insertion_point(field_release:koinos.chain.call_target.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void call_target::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.call_target.contract_id)
}

// uint32 entry_point = 2;
inline void call_target::clear_entry_point() {
  entry_point_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 call_target::_internal_entry_point() const {
  return entry_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 call_target::entry_point() const {
  // @@protoc_insertion_point(field_get:koinos.chain.call_target.entry_point)
  return _internal_entry_point();
}
inline void call_target::_internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entry_point_ = value;
}
inline void call_target::set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entry_point(value);
  // @@protoc_insertion_point(field_set:koinos.chain.call_target.entry_point)
}

// -------------------------------------------------------------------

// authorize_arguments

// .koinos.chain.authorization_type type = 1;
inline void authorize_arguments::clear_type() {
  type_ = 0;
}
inline ::koinos::chain::authorization_type authorize_arguments::_internal_type() const {
  return static_cast< ::koinos::chain::authorization_type >(type_);
}
inline ::koinos::chain::authorization_type authorize_arguments::type() const {
  // @@protoc_insertion_point(field_get:koinos.chain.authorize_arguments.type)
  return _internal_type();
}
inline void authorize_arguments::_internal_set_type(::koinos::chain::authorization_type value) {
  
  type_ = value;
}
inline void authorize_arguments::set_type(::koinos::chain::authorization_type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:koinos.chain.authorize_arguments.type)
}

// optional .koinos.chain.call_target call = 2;
inline bool authorize_arguments::_internal_has_call() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || call_ != nullptr);
  return value;
}
inline bool authorize_arguments::has_call() const {
  return _internal_has_call();
}
inline void authorize_arguments::clear_call() {
  if (call_ != nullptr) call_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::koinos::chain::call_target& authorize_arguments::_internal_call() const {
  const ::koinos::chain::call_target* p = call_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::chain::call_target&>(
      ::koinos::chain::_call_target_default_instance_);
}
inline const ::koinos::chain::call_target& authorize_arguments::call() const {
  // @@protoc_insertion_point(field_get:koinos.chain.authorize_arguments.call)
  return _internal_call();
}
inline void authorize_arguments::unsafe_arena_set_allocated_call(
    ::koinos::chain::call_target* call) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.authorize_arguments.call)
}
inline ::koinos::chain::call_target* authorize_arguments::release_call() {
  _has_bits_[0] &= ~0x00000001u;
  ::koinos::chain::call_target* temp = call_;
  call_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::chain::call_target* authorize_arguments::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:koinos.chain.authorize_arguments.call)
  _has_bits_[0] &= ~0x00000001u;
  ::koinos::chain::call_target* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::koinos::chain::call_target* authorize_arguments::_internal_mutable_call() {
  _has_bits_[0] |= 0x00000001u;
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::chain::call_target>(GetArenaForAllocation());
    call_ = p;
  }
  return call_;
}
inline ::koinos::chain::call_target* authorize_arguments::mutable_call() {
  ::koinos::chain::call_target* _msg = _internal_mutable_call();
  // @@protoc_insertion_point(field_mutable:koinos.chain.authorize_arguments.call)
  return _msg;
}
inline void authorize_arguments::set_allocated_call(::koinos::chain::call_target* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete call_;
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::chain::call_target>::GetOwningArena(call);
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.authorize_arguments.call)
}

// -------------------------------------------------------------------

// authorize_result

// bool value = 1;
inline void authorize_result::clear_value() {
  value_ = false;
}
inline bool authorize_result::_internal_value() const {
  return value_;
}
inline bool authorize_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.authorize_result.value)
  return _internal_value();
}
inline void authorize_result::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void authorize_result::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.authorize_result.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chain
}  // namespace koinos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::koinos::chain::authorization_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::koinos::chain::authorization_type>() {
  return ::koinos::chain::authorization_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2fauthority_2eproto
