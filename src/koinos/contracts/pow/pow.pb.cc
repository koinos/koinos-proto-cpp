// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/contracts/pow/pow.proto

#include "koinos/contracts/pow/pow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace contracts {
namespace pow {
constexpr difficulty_metadata::difficulty_metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , difficulty_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_block_time_(uint64_t{0u})
  , target_block_interval_(uint64_t{0u}){}
struct difficulty_metadataDefaultTypeInternal {
  constexpr difficulty_metadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~difficulty_metadataDefaultTypeInternal() {}
  union {
    difficulty_metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT difficulty_metadataDefaultTypeInternal _difficulty_metadata_default_instance_;
constexpr get_difficulty_metadata_arguments::get_difficulty_metadata_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_difficulty_metadata_argumentsDefaultTypeInternal {
  constexpr get_difficulty_metadata_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_difficulty_metadata_argumentsDefaultTypeInternal() {}
  union {
    get_difficulty_metadata_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_difficulty_metadata_argumentsDefaultTypeInternal _get_difficulty_metadata_arguments_default_instance_;
constexpr get_difficulty_metadata_result::get_difficulty_metadata_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr){}
struct get_difficulty_metadata_resultDefaultTypeInternal {
  constexpr get_difficulty_metadata_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_difficulty_metadata_resultDefaultTypeInternal() {}
  union {
    get_difficulty_metadata_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_difficulty_metadata_resultDefaultTypeInternal _get_difficulty_metadata_result_default_instance_;
constexpr pow_signature_data::pow_signature_data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nonce_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recoverable_signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct pow_signature_dataDefaultTypeInternal {
  constexpr pow_signature_dataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pow_signature_dataDefaultTypeInternal() {}
  union {
    pow_signature_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pow_signature_dataDefaultTypeInternal _pow_signature_data_default_instance_;
}  // namespace pow
}  // namespace contracts
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fcontracts_2fpow_2fpow_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fcontracts_2fpow_2fpow_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fcontracts_2fpow_2fpow_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fcontracts_2fpow_2fpow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pow::difficulty_metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pow::difficulty_metadata, target_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pow::difficulty_metadata, last_block_time_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pow::difficulty_metadata, difficulty_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pow::difficulty_metadata, target_block_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pow::get_difficulty_metadata_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pow::get_difficulty_metadata_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pow::get_difficulty_metadata_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pow::pow_signature_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pow::pow_signature_data, nonce_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pow::pow_signature_data, recoverable_signature_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::contracts::pow::difficulty_metadata)},
  { 9, -1, sizeof(::koinos::contracts::pow::get_difficulty_metadata_arguments)},
  { 14, -1, sizeof(::koinos::contracts::pow::get_difficulty_metadata_result)},
  { 20, -1, sizeof(::koinos::contracts::pow::pow_signature_data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pow::_difficulty_metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pow::_get_difficulty_metadata_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pow::_get_difficulty_metadata_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pow::_pow_signature_data_default_instance_),
};

const char descriptor_table_protodef_koinos_2fcontracts_2fpow_2fpow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036koinos/contracts/pow/pow.proto\022\024koinos"
  ".contracts.pow\"y\n\023difficulty_metadata\022\016\n"
  "\006target\030\001 \001(\014\022\033\n\017last_block_time\030\002 \001(\004B\002"
  "0\001\022\022\n\ndifficulty\030\003 \001(\014\022!\n\025target_block_i"
  "nterval\030\004 \001(\004B\0020\001\"#\n!get_difficulty_meta"
  "data_arguments\"Z\n\036get_difficulty_metadat"
  "a_result\0228\n\005value\030\001 \001(\0132).koinos.contrac"
  "ts.pow.difficulty_metadata\"B\n\022pow_signat"
  "ure_data\022\r\n\005nonce\030\001 \001(\014\022\035\n\025recoverable_s"
  "ignature\030\002 \001(\014B\?Z=github.com/koinos/koin"
  "os-proto-golang/v2/koinos/contracts/powb"
  "\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto = {
  false, false, 447, descriptor_table_protodef_koinos_2fcontracts_2fpow_2fpow_2eproto, "koinos/contracts/pow/pow.proto", 
  &descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_koinos_2fcontracts_2fpow_2fpow_2eproto::offsets,
  file_level_metadata_koinos_2fcontracts_2fpow_2fpow_2eproto, file_level_enum_descriptors_koinos_2fcontracts_2fpow_2fpow_2eproto, file_level_service_descriptors_koinos_2fcontracts_2fpow_2fpow_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto_getter() {
  return &descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fcontracts_2fpow_2fpow_2eproto(&descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto);
namespace koinos {
namespace contracts {
namespace pow {

// ===================================================================

class difficulty_metadata::_Internal {
 public:
};

difficulty_metadata::difficulty_metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pow.difficulty_metadata)
}
difficulty_metadata::difficulty_metadata(const difficulty_metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target(), 
      GetArenaForAllocation());
  }
  difficulty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_difficulty().empty()) {
    difficulty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_difficulty(), 
      GetArenaForAllocation());
  }
  ::memcpy(&last_block_time_, &from.last_block_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_block_interval_) -
    reinterpret_cast<char*>(&last_block_time_)) + sizeof(target_block_interval_));
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pow.difficulty_metadata)
}

inline void difficulty_metadata::SharedCtor() {
target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
difficulty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_block_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_block_interval_) -
    reinterpret_cast<char*>(&last_block_time_)) + sizeof(target_block_interval_));
}

difficulty_metadata::~difficulty_metadata() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pow.difficulty_metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void difficulty_metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  difficulty_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void difficulty_metadata::ArenaDtor(void* object) {
  difficulty_metadata* _this = reinterpret_cast< difficulty_metadata* >(object);
  (void)_this;
}
void difficulty_metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void difficulty_metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void difficulty_metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pow.difficulty_metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty();
  difficulty_.ClearToEmpty();
  ::memset(&last_block_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_block_interval_) -
      reinterpret_cast<char*>(&last_block_time_)) + sizeof(target_block_interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* difficulty_metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_block_time = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_block_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes difficulty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_difficulty();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_block_interval = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          target_block_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* difficulty_metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pow.difficulty_metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes target = 1;
  if (!this->_internal_target().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_target(), target);
  }

  // uint64 last_block_time = 2 [jstype = JS_STRING];
  if (this->_internal_last_block_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_last_block_time(), target);
  }

  // bytes difficulty = 3;
  if (!this->_internal_difficulty().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_difficulty(), target);
  }

  // uint64 target_block_interval = 4 [jstype = JS_STRING];
  if (this->_internal_target_block_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_target_block_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pow.difficulty_metadata)
  return target;
}

size_t difficulty_metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pow.difficulty_metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes target = 1;
  if (!this->_internal_target().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target());
  }

  // bytes difficulty = 3;
  if (!this->_internal_difficulty().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_difficulty());
  }

  // uint64 last_block_time = 2 [jstype = JS_STRING];
  if (this->_internal_last_block_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_block_time());
  }

  // uint64 target_block_interval = 4 [jstype = JS_STRING];
  if (this->_internal_target_block_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_block_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData difficulty_metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    difficulty_metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*difficulty_metadata::GetClassData() const { return &_class_data_; }

void difficulty_metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<difficulty_metadata *>(to)->MergeFrom(
      static_cast<const difficulty_metadata &>(from));
}


void difficulty_metadata::MergeFrom(const difficulty_metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pow.difficulty_metadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _internal_set_target(from._internal_target());
  }
  if (!from._internal_difficulty().empty()) {
    _internal_set_difficulty(from._internal_difficulty());
  }
  if (from._internal_last_block_time() != 0) {
    _internal_set_last_block_time(from._internal_last_block_time());
  }
  if (from._internal_target_block_interval() != 0) {
    _internal_set_target_block_interval(from._internal_target_block_interval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void difficulty_metadata::CopyFrom(const difficulty_metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pow.difficulty_metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool difficulty_metadata::IsInitialized() const {
  return true;
}

void difficulty_metadata::InternalSwap(difficulty_metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_, GetArenaForAllocation(),
      &other->target_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &difficulty_, GetArenaForAllocation(),
      &other->difficulty_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(difficulty_metadata, target_block_interval_)
      + sizeof(difficulty_metadata::target_block_interval_)
      - PROTOBUF_FIELD_OFFSET(difficulty_metadata, last_block_time_)>(
          reinterpret_cast<char*>(&last_block_time_),
          reinterpret_cast<char*>(&other->last_block_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata difficulty_metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpow_2fpow_2eproto[0]);
}

// ===================================================================

class get_difficulty_metadata_arguments::_Internal {
 public:
};

get_difficulty_metadata_arguments::get_difficulty_metadata_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pow.get_difficulty_metadata_arguments)
}
get_difficulty_metadata_arguments::get_difficulty_metadata_arguments(const get_difficulty_metadata_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pow.get_difficulty_metadata_arguments)
}

inline void get_difficulty_metadata_arguments::SharedCtor() {
}

get_difficulty_metadata_arguments::~get_difficulty_metadata_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pow.get_difficulty_metadata_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_difficulty_metadata_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_difficulty_metadata_arguments::ArenaDtor(void* object) {
  get_difficulty_metadata_arguments* _this = reinterpret_cast< get_difficulty_metadata_arguments* >(object);
  (void)_this;
}
void get_difficulty_metadata_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_difficulty_metadata_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_difficulty_metadata_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pow.get_difficulty_metadata_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_difficulty_metadata_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_difficulty_metadata_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pow.get_difficulty_metadata_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pow.get_difficulty_metadata_arguments)
  return target;
}

size_t get_difficulty_metadata_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pow.get_difficulty_metadata_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_difficulty_metadata_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_difficulty_metadata_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_difficulty_metadata_arguments::GetClassData() const { return &_class_data_; }

void get_difficulty_metadata_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_difficulty_metadata_arguments *>(to)->MergeFrom(
      static_cast<const get_difficulty_metadata_arguments &>(from));
}


void get_difficulty_metadata_arguments::MergeFrom(const get_difficulty_metadata_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pow.get_difficulty_metadata_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_difficulty_metadata_arguments::CopyFrom(const get_difficulty_metadata_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pow.get_difficulty_metadata_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_difficulty_metadata_arguments::IsInitialized() const {
  return true;
}

void get_difficulty_metadata_arguments::InternalSwap(get_difficulty_metadata_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_difficulty_metadata_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpow_2fpow_2eproto[1]);
}

// ===================================================================

class get_difficulty_metadata_result::_Internal {
 public:
  static const ::koinos::contracts::pow::difficulty_metadata& value(const get_difficulty_metadata_result* msg);
};

const ::koinos::contracts::pow::difficulty_metadata&
get_difficulty_metadata_result::_Internal::value(const get_difficulty_metadata_result* msg) {
  return *msg->value_;
}
get_difficulty_metadata_result::get_difficulty_metadata_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pow.get_difficulty_metadata_result)
}
get_difficulty_metadata_result::get_difficulty_metadata_result(const get_difficulty_metadata_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::koinos::contracts::pow::difficulty_metadata(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pow.get_difficulty_metadata_result)
}

inline void get_difficulty_metadata_result::SharedCtor() {
value_ = nullptr;
}

get_difficulty_metadata_result::~get_difficulty_metadata_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pow.get_difficulty_metadata_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_difficulty_metadata_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void get_difficulty_metadata_result::ArenaDtor(void* object) {
  get_difficulty_metadata_result* _this = reinterpret_cast< get_difficulty_metadata_result* >(object);
  (void)_this;
}
void get_difficulty_metadata_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_difficulty_metadata_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_difficulty_metadata_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pow.get_difficulty_metadata_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_difficulty_metadata_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.contracts.pow.difficulty_metadata value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_difficulty_metadata_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pow.get_difficulty_metadata_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.contracts.pow.difficulty_metadata value = 1;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pow.get_difficulty_metadata_result)
  return target;
}

size_t get_difficulty_metadata_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pow.get_difficulty_metadata_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.contracts.pow.difficulty_metadata value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_difficulty_metadata_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_difficulty_metadata_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_difficulty_metadata_result::GetClassData() const { return &_class_data_; }

void get_difficulty_metadata_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_difficulty_metadata_result *>(to)->MergeFrom(
      static_cast<const get_difficulty_metadata_result &>(from));
}


void get_difficulty_metadata_result::MergeFrom(const get_difficulty_metadata_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pow.get_difficulty_metadata_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::koinos::contracts::pow::difficulty_metadata::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_difficulty_metadata_result::CopyFrom(const get_difficulty_metadata_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pow.get_difficulty_metadata_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_difficulty_metadata_result::IsInitialized() const {
  return true;
}

void get_difficulty_metadata_result::InternalSwap(get_difficulty_metadata_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_difficulty_metadata_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpow_2fpow_2eproto[2]);
}

// ===================================================================

class pow_signature_data::_Internal {
 public:
};

pow_signature_data::pow_signature_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pow.pow_signature_data)
}
pow_signature_data::pow_signature_data(const pow_signature_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce(), 
      GetArenaForAllocation());
  }
  recoverable_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recoverable_signature().empty()) {
    recoverable_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recoverable_signature(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pow.pow_signature_data)
}

inline void pow_signature_data::SharedCtor() {
nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
recoverable_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

pow_signature_data::~pow_signature_data() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pow.pow_signature_data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void pow_signature_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recoverable_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void pow_signature_data::ArenaDtor(void* object) {
  pow_signature_data* _this = reinterpret_cast< pow_signature_data* >(object);
  (void)_this;
}
void pow_signature_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pow_signature_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pow_signature_data::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pow.pow_signature_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_.ClearToEmpty();
  recoverable_signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pow_signature_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes recoverable_signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_recoverable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pow_signature_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pow.pow_signature_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (!this->_internal_nonce().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  // bytes recoverable_signature = 2;
  if (!this->_internal_recoverable_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_recoverable_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pow.pow_signature_data)
  return target;
}

size_t pow_signature_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pow.pow_signature_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce());
  }

  // bytes recoverable_signature = 2;
  if (!this->_internal_recoverable_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recoverable_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pow_signature_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    pow_signature_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pow_signature_data::GetClassData() const { return &_class_data_; }

void pow_signature_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<pow_signature_data *>(to)->MergeFrom(
      static_cast<const pow_signature_data &>(from));
}


void pow_signature_data::MergeFrom(const pow_signature_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pow.pow_signature_data)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nonce().empty()) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (!from._internal_recoverable_signature().empty()) {
    _internal_set_recoverable_signature(from._internal_recoverable_signature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pow_signature_data::CopyFrom(const pow_signature_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pow.pow_signature_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pow_signature_data::IsInitialized() const {
  return true;
}

void pow_signature_data::InternalSwap(pow_signature_data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nonce_, GetArenaForAllocation(),
      &other->nonce_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recoverable_signature_, GetArenaForAllocation(),
      &other->recoverable_signature_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata pow_signature_data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpow_2fpow_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pow
}  // namespace contracts
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::contracts::pow::difficulty_metadata* Arena::CreateMaybeMessage< ::koinos::contracts::pow::difficulty_metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pow::difficulty_metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::pow::get_difficulty_metadata_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::pow::get_difficulty_metadata_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pow::get_difficulty_metadata_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::pow::get_difficulty_metadata_result* Arena::CreateMaybeMessage< ::koinos::contracts::pow::get_difficulty_metadata_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pow::get_difficulty_metadata_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::pow::pow_signature_data* Arena::CreateMaybeMessage< ::koinos::contracts::pow::pow_signature_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pow::pow_signature_data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
