// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/protocol/protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fprotocol_2fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fprotocol_2fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fprotocol_2fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fprotocol_2fprotocol_2eproto;
namespace koinos {
namespace protocol {
class block;
struct blockDefaultTypeInternal;
extern blockDefaultTypeInternal _block_default_instance_;
class block_header;
struct block_headerDefaultTypeInternal;
extern block_headerDefaultTypeInternal _block_header_default_instance_;
class block_receipt;
struct block_receiptDefaultTypeInternal;
extern block_receiptDefaultTypeInternal _block_receipt_default_instance_;
class call_contract_operation;
struct call_contract_operationDefaultTypeInternal;
extern call_contract_operationDefaultTypeInternal _call_contract_operation_default_instance_;
class contract_call_bundle;
struct contract_call_bundleDefaultTypeInternal;
extern contract_call_bundleDefaultTypeInternal _contract_call_bundle_default_instance_;
class event_data;
struct event_dataDefaultTypeInternal;
extern event_dataDefaultTypeInternal _event_data_default_instance_;
class object_space;
struct object_spaceDefaultTypeInternal;
extern object_spaceDefaultTypeInternal _object_space_default_instance_;
class operation;
struct operationDefaultTypeInternal;
extern operationDefaultTypeInternal _operation_default_instance_;
class set_system_call_operation;
struct set_system_call_operationDefaultTypeInternal;
extern set_system_call_operationDefaultTypeInternal _set_system_call_operation_default_instance_;
class set_system_contract_operation;
struct set_system_contract_operationDefaultTypeInternal;
extern set_system_contract_operationDefaultTypeInternal _set_system_contract_operation_default_instance_;
class state_delta_entry;
struct state_delta_entryDefaultTypeInternal;
extern state_delta_entryDefaultTypeInternal _state_delta_entry_default_instance_;
class system_call_target;
struct system_call_targetDefaultTypeInternal;
extern system_call_targetDefaultTypeInternal _system_call_target_default_instance_;
class transaction;
struct transactionDefaultTypeInternal;
extern transactionDefaultTypeInternal _transaction_default_instance_;
class transaction_header;
struct transaction_headerDefaultTypeInternal;
extern transaction_headerDefaultTypeInternal _transaction_header_default_instance_;
class transaction_receipt;
struct transaction_receiptDefaultTypeInternal;
extern transaction_receiptDefaultTypeInternal _transaction_receipt_default_instance_;
class upload_contract_operation;
struct upload_contract_operationDefaultTypeInternal;
extern upload_contract_operationDefaultTypeInternal _upload_contract_operation_default_instance_;
}  // namespace protocol
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::protocol::block* Arena::CreateMaybeMessage<::koinos::protocol::block>(Arena*);
template<> ::koinos::protocol::block_header* Arena::CreateMaybeMessage<::koinos::protocol::block_header>(Arena*);
template<> ::koinos::protocol::block_receipt* Arena::CreateMaybeMessage<::koinos::protocol::block_receipt>(Arena*);
template<> ::koinos::protocol::call_contract_operation* Arena::CreateMaybeMessage<::koinos::protocol::call_contract_operation>(Arena*);
template<> ::koinos::protocol::contract_call_bundle* Arena::CreateMaybeMessage<::koinos::protocol::contract_call_bundle>(Arena*);
template<> ::koinos::protocol::event_data* Arena::CreateMaybeMessage<::koinos::protocol::event_data>(Arena*);
template<> ::koinos::protocol::object_space* Arena::CreateMaybeMessage<::koinos::protocol::object_space>(Arena*);
template<> ::koinos::protocol::operation* Arena::CreateMaybeMessage<::koinos::protocol::operation>(Arena*);
template<> ::koinos::protocol::set_system_call_operation* Arena::CreateMaybeMessage<::koinos::protocol::set_system_call_operation>(Arena*);
template<> ::koinos::protocol::set_system_contract_operation* Arena::CreateMaybeMessage<::koinos::protocol::set_system_contract_operation>(Arena*);
template<> ::koinos::protocol::state_delta_entry* Arena::CreateMaybeMessage<::koinos::protocol::state_delta_entry>(Arena*);
template<> ::koinos::protocol::system_call_target* Arena::CreateMaybeMessage<::koinos::protocol::system_call_target>(Arena*);
template<> ::koinos::protocol::transaction* Arena::CreateMaybeMessage<::koinos::protocol::transaction>(Arena*);
template<> ::koinos::protocol::transaction_header* Arena::CreateMaybeMessage<::koinos::protocol::transaction_header>(Arena*);
template<> ::koinos::protocol::transaction_receipt* Arena::CreateMaybeMessage<::koinos::protocol::transaction_receipt>(Arena*);
template<> ::koinos::protocol::upload_contract_operation* Arena::CreateMaybeMessage<::koinos::protocol::upload_contract_operation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace protocol {

// ===================================================================

class object_space final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.object_space) */ {
 public:
  inline object_space() : object_space(nullptr) {}
  ~object_space() override;
  explicit constexpr object_space(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  object_space(const object_space& from);
  object_space(object_space&& from) noexcept
    : object_space() {
    *this = ::std::move(from);
  }

  inline object_space& operator=(const object_space& from) {
    CopyFrom(from);
    return *this;
  }
  inline object_space& operator=(object_space&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const object_space& default_instance() {
    return *internal_default_instance();
  }
  static inline const object_space* internal_default_instance() {
    return reinterpret_cast<const object_space*>(
               &_object_space_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(object_space& a, object_space& b) {
    a.Swap(&b);
  }
  inline void Swap(object_space* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(object_space* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline object_space* New() const final {
    return new object_space();
  }

  object_space* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<object_space>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const object_space& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const object_space& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(object_space* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.object_space";
  }
  protected:
  explicit object_space(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoneFieldNumber = 2,
    kSystemFieldNumber = 1,
    kIdFieldNumber = 3,
  };
  // bytes zone = 2;
  void clear_zone();
  const std::string& zone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone();
  PROTOBUF_MUST_USE_RESULT std::string* release_zone();
  void set_allocated_zone(std::string* zone);
  private:
  const std::string& _internal_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone(const std::string& value);
  std::string* _internal_mutable_zone();
  public:

  // bool system = 1;
  void clear_system();
  bool system() const;
  void set_system(bool value);
  private:
  bool _internal_system() const;
  void _internal_set_system(bool value);
  public:

  // uint32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.object_space)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_;
  bool system_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class event_data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.event_data) */ {
 public:
  inline event_data() : event_data(nullptr) {}
  ~event_data() override;
  explicit constexpr event_data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  event_data(const event_data& from);
  event_data(event_data&& from) noexcept
    : event_data() {
    *this = ::std::move(from);
  }

  inline event_data& operator=(const event_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline event_data& operator=(event_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const event_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const event_data* internal_default_instance() {
    return reinterpret_cast<const event_data*>(
               &_event_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(event_data& a, event_data& b) {
    a.Swap(&b);
  }
  inline void Swap(event_data* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(event_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline event_data* New() const final {
    return new event_data();
  }

  event_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<event_data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const event_data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const event_data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(event_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.event_data";
  }
  protected:
  explicit event_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpactedFieldNumber = 5,
    kSourceFieldNumber = 2,
    kNameFieldNumber = 3,
    kDataFieldNumber = 4,
    kSequenceFieldNumber = 1,
  };
  // repeated bytes impacted = 5 [(.koinos.btype) = ADDRESS];
  int impacted_size() const;
  private:
  int _internal_impacted_size() const;
  public:
  void clear_impacted();
  const std::string& impacted(int index) const;
  std::string* mutable_impacted(int index);
  void set_impacted(int index, const std::string& value);
  void set_impacted(int index, std::string&& value);
  void set_impacted(int index, const char* value);
  void set_impacted(int index, const void* value, size_t size);
  std::string* add_impacted();
  void add_impacted(const std::string& value);
  void add_impacted(std::string&& value);
  void add_impacted(const char* value);
  void add_impacted(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& impacted() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_impacted();
  private:
  const std::string& _internal_impacted(int index) const;
  std::string* _internal_add_impacted();
  public:

  // bytes source = 2 [(.koinos.btype) = CONTRACT_ID];
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_MUST_USE_RESULT std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 sequence = 1;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.event_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> impacted_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class contract_call_bundle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.contract_call_bundle) */ {
 public:
  inline contract_call_bundle() : contract_call_bundle(nullptr) {}
  ~contract_call_bundle() override;
  explicit constexpr contract_call_bundle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  contract_call_bundle(const contract_call_bundle& from);
  contract_call_bundle(contract_call_bundle&& from) noexcept
    : contract_call_bundle() {
    *this = ::std::move(from);
  }

  inline contract_call_bundle& operator=(const contract_call_bundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline contract_call_bundle& operator=(contract_call_bundle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const contract_call_bundle& default_instance() {
    return *internal_default_instance();
  }
  static inline const contract_call_bundle* internal_default_instance() {
    return reinterpret_cast<const contract_call_bundle*>(
               &_contract_call_bundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(contract_call_bundle& a, contract_call_bundle& b) {
    a.Swap(&b);
  }
  inline void Swap(contract_call_bundle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contract_call_bundle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline contract_call_bundle* New() const final {
    return new contract_call_bundle();
  }

  contract_call_bundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<contract_call_bundle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const contract_call_bundle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const contract_call_bundle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contract_call_bundle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.contract_call_bundle";
  }
  protected:
  explicit contract_call_bundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kEntryPointFieldNumber = 2,
  };
  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  void clear_contract_id();
  const std::string& contract_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // uint32 entry_point = 2;
  void clear_entry_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point() const;
  void set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entry_point() const;
  void _internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.contract_call_bundle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class system_call_target final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.system_call_target) */ {
 public:
  inline system_call_target() : system_call_target(nullptr) {}
  ~system_call_target() override;
  explicit constexpr system_call_target(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  system_call_target(const system_call_target& from);
  system_call_target(system_call_target&& from) noexcept
    : system_call_target() {
    *this = ::std::move(from);
  }

  inline system_call_target& operator=(const system_call_target& from) {
    CopyFrom(from);
    return *this;
  }
  inline system_call_target& operator=(system_call_target&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const system_call_target& default_instance() {
    return *internal_default_instance();
  }
  enum TargetCase {
    kThunkId = 1,
    kSystemCallBundle = 2,
    TARGET_NOT_SET = 0,
  };

  static inline const system_call_target* internal_default_instance() {
    return reinterpret_cast<const system_call_target*>(
               &_system_call_target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(system_call_target& a, system_call_target& b) {
    a.Swap(&b);
  }
  inline void Swap(system_call_target* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(system_call_target* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline system_call_target* New() const final {
    return new system_call_target();
  }

  system_call_target* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<system_call_target>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const system_call_target& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const system_call_target& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(system_call_target* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.system_call_target";
  }
  protected:
  explicit system_call_target(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThunkIdFieldNumber = 1,
    kSystemCallBundleFieldNumber = 2,
  };
  // uint32 thunk_id = 1;
  bool has_thunk_id() const;
  private:
  bool _internal_has_thunk_id() const;
  public:
  void clear_thunk_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 thunk_id() const;
  void set_thunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thunk_id() const;
  void _internal_set_thunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .koinos.protocol.contract_call_bundle system_call_bundle = 2;
  bool has_system_call_bundle() const;
  private:
  bool _internal_has_system_call_bundle() const;
  public:
  void clear_system_call_bundle();
  const ::koinos::protocol::contract_call_bundle& system_call_bundle() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::contract_call_bundle* release_system_call_bundle();
  ::koinos::protocol::contract_call_bundle* mutable_system_call_bundle();
  void set_allocated_system_call_bundle(::koinos::protocol::contract_call_bundle* system_call_bundle);
  private:
  const ::koinos::protocol::contract_call_bundle& _internal_system_call_bundle() const;
  ::koinos::protocol::contract_call_bundle* _internal_mutable_system_call_bundle();
  public:
  void unsafe_arena_set_allocated_system_call_bundle(
      ::koinos::protocol::contract_call_bundle* system_call_bundle);
  ::koinos::protocol::contract_call_bundle* unsafe_arena_release_system_call_bundle();

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:koinos.protocol.system_call_target)
 private:
  class _Internal;
  void set_has_thunk_id();
  void set_has_system_call_bundle();

  inline bool has_target() const;
  inline void clear_has_target();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TargetUnion {
    constexpr TargetUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 thunk_id_;
    ::koinos::protocol::contract_call_bundle* system_call_bundle_;
  } target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class upload_contract_operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.upload_contract_operation) */ {
 public:
  inline upload_contract_operation() : upload_contract_operation(nullptr) {}
  ~upload_contract_operation() override;
  explicit constexpr upload_contract_operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  upload_contract_operation(const upload_contract_operation& from);
  upload_contract_operation(upload_contract_operation&& from) noexcept
    : upload_contract_operation() {
    *this = ::std::move(from);
  }

  inline upload_contract_operation& operator=(const upload_contract_operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline upload_contract_operation& operator=(upload_contract_operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const upload_contract_operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const upload_contract_operation* internal_default_instance() {
    return reinterpret_cast<const upload_contract_operation*>(
               &_upload_contract_operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(upload_contract_operation& a, upload_contract_operation& b) {
    a.Swap(&b);
  }
  inline void Swap(upload_contract_operation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(upload_contract_operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline upload_contract_operation* New() const final {
    return new upload_contract_operation();
  }

  upload_contract_operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<upload_contract_operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const upload_contract_operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const upload_contract_operation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(upload_contract_operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.upload_contract_operation";
  }
  protected:
  explicit upload_contract_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kBytecodeFieldNumber = 2,
    kAbiFieldNumber = 3,
    kAuthorizesCallContractFieldNumber = 4,
    kAuthorizesTransactionApplicationFieldNumber = 5,
    kAuthorizesUploadContractFieldNumber = 6,
  };
  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  void clear_contract_id();
  const std::string& contract_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // bytes bytecode = 2;
  void clear_bytecode();
  const std::string& bytecode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytecode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytecode();
  PROTOBUF_MUST_USE_RESULT std::string* release_bytecode();
  void set_allocated_bytecode(std::string* bytecode);
  private:
  const std::string& _internal_bytecode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytecode(const std::string& value);
  std::string* _internal_mutable_bytecode();
  public:

  // string abi = 3;
  void clear_abi();
  const std::string& abi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_abi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_abi();
  PROTOBUF_MUST_USE_RESULT std::string* release_abi();
  void set_allocated_abi(std::string* abi);
  private:
  const std::string& _internal_abi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abi(const std::string& value);
  std::string* _internal_mutable_abi();
  public:

  // bool authorizes_call_contract = 4;
  void clear_authorizes_call_contract();
  bool authorizes_call_contract() const;
  void set_authorizes_call_contract(bool value);
  private:
  bool _internal_authorizes_call_contract() const;
  void _internal_set_authorizes_call_contract(bool value);
  public:

  // bool authorizes_transaction_application = 5;
  void clear_authorizes_transaction_application();
  bool authorizes_transaction_application() const;
  void set_authorizes_transaction_application(bool value);
  private:
  bool _internal_authorizes_transaction_application() const;
  void _internal_set_authorizes_transaction_application(bool value);
  public:

  // bool authorizes_upload_contract = 6;
  void clear_authorizes_upload_contract();
  bool authorizes_upload_contract() const;
  void set_authorizes_upload_contract(bool value);
  private:
  bool _internal_authorizes_upload_contract() const;
  void _internal_set_authorizes_upload_contract(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.upload_contract_operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abi_;
  bool authorizes_call_contract_;
  bool authorizes_transaction_application_;
  bool authorizes_upload_contract_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class call_contract_operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.call_contract_operation) */ {
 public:
  inline call_contract_operation() : call_contract_operation(nullptr) {}
  ~call_contract_operation() override;
  explicit constexpr call_contract_operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  call_contract_operation(const call_contract_operation& from);
  call_contract_operation(call_contract_operation&& from) noexcept
    : call_contract_operation() {
    *this = ::std::move(from);
  }

  inline call_contract_operation& operator=(const call_contract_operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline call_contract_operation& operator=(call_contract_operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const call_contract_operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const call_contract_operation* internal_default_instance() {
    return reinterpret_cast<const call_contract_operation*>(
               &_call_contract_operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(call_contract_operation& a, call_contract_operation& b) {
    a.Swap(&b);
  }
  inline void Swap(call_contract_operation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(call_contract_operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline call_contract_operation* New() const final {
    return new call_contract_operation();
  }

  call_contract_operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<call_contract_operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const call_contract_operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const call_contract_operation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(call_contract_operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.call_contract_operation";
  }
  protected:
  explicit call_contract_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kArgsFieldNumber = 3,
    kEntryPointFieldNumber = 2,
  };
  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  void clear_contract_id();
  const std::string& contract_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // bytes args = 3;
  void clear_args();
  const std::string& args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_args();
  PROTOBUF_MUST_USE_RESULT std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // uint32 entry_point = 2;
  void clear_entry_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point() const;
  void set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entry_point() const;
  void _internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.call_contract_operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class set_system_call_operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.set_system_call_operation) */ {
 public:
  inline set_system_call_operation() : set_system_call_operation(nullptr) {}
  ~set_system_call_operation() override;
  explicit constexpr set_system_call_operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set_system_call_operation(const set_system_call_operation& from);
  set_system_call_operation(set_system_call_operation&& from) noexcept
    : set_system_call_operation() {
    *this = ::std::move(from);
  }

  inline set_system_call_operation& operator=(const set_system_call_operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_system_call_operation& operator=(set_system_call_operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set_system_call_operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const set_system_call_operation* internal_default_instance() {
    return reinterpret_cast<const set_system_call_operation*>(
               &_set_system_call_operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(set_system_call_operation& a, set_system_call_operation& b) {
    a.Swap(&b);
  }
  inline void Swap(set_system_call_operation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_system_call_operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_system_call_operation* New() const final {
    return new set_system_call_operation();
  }

  set_system_call_operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_system_call_operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set_system_call_operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const set_system_call_operation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_system_call_operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.set_system_call_operation";
  }
  protected:
  explicit set_system_call_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 2,
    kCallIdFieldNumber = 1,
  };
  // .koinos.protocol.system_call_target target = 2;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::koinos::protocol::system_call_target& target() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::system_call_target* release_target();
  ::koinos::protocol::system_call_target* mutable_target();
  void set_allocated_target(::koinos::protocol::system_call_target* target);
  private:
  const ::koinos::protocol::system_call_target& _internal_target() const;
  ::koinos::protocol::system_call_target* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::koinos::protocol::system_call_target* target);
  ::koinos::protocol::system_call_target* unsafe_arena_release_target();

  // uint32 call_id = 1;
  void clear_call_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 call_id() const;
  void set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_call_id() const;
  void _internal_set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.set_system_call_operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::system_call_target* target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 call_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class set_system_contract_operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.set_system_contract_operation) */ {
 public:
  inline set_system_contract_operation() : set_system_contract_operation(nullptr) {}
  ~set_system_contract_operation() override;
  explicit constexpr set_system_contract_operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set_system_contract_operation(const set_system_contract_operation& from);
  set_system_contract_operation(set_system_contract_operation&& from) noexcept
    : set_system_contract_operation() {
    *this = ::std::move(from);
  }

  inline set_system_contract_operation& operator=(const set_system_contract_operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_system_contract_operation& operator=(set_system_contract_operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set_system_contract_operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const set_system_contract_operation* internal_default_instance() {
    return reinterpret_cast<const set_system_contract_operation*>(
               &_set_system_contract_operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(set_system_contract_operation& a, set_system_contract_operation& b) {
    a.Swap(&b);
  }
  inline void Swap(set_system_contract_operation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_system_contract_operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_system_contract_operation* New() const final {
    return new set_system_contract_operation();
  }

  set_system_contract_operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_system_contract_operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set_system_contract_operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const set_system_contract_operation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_system_contract_operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.set_system_contract_operation";
  }
  protected:
  explicit set_system_contract_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kSystemContractFieldNumber = 2,
  };
  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  void clear_contract_id();
  const std::string& contract_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // bool system_contract = 2;
  void clear_system_contract();
  bool system_contract() const;
  void set_system_contract(bool value);
  private:
  bool _internal_system_contract() const;
  void _internal_set_system_contract(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.set_system_contract_operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  bool system_contract_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.operation) */ {
 public:
  inline operation() : operation(nullptr) {}
  ~operation() override;
  explicit constexpr operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  operation(const operation& from);
  operation(operation&& from) noexcept
    : operation() {
    *this = ::std::move(from);
  }

  inline operation& operator=(const operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline operation& operator=(operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const operation& default_instance() {
    return *internal_default_instance();
  }
  enum OpCase {
    kUploadContract = 1,
    kCallContract = 2,
    kSetSystemCall = 3,
    kSetSystemContract = 4,
    OP_NOT_SET = 0,
  };

  static inline const operation* internal_default_instance() {
    return reinterpret_cast<const operation*>(
               &_operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(operation& a, operation& b) {
    a.Swap(&b);
  }
  inline void Swap(operation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline operation* New() const final {
    return new operation();
  }

  operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const operation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.operation";
  }
  protected:
  explicit operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadContractFieldNumber = 1,
    kCallContractFieldNumber = 2,
    kSetSystemCallFieldNumber = 3,
    kSetSystemContractFieldNumber = 4,
  };
  // .koinos.protocol.upload_contract_operation upload_contract = 1;
  bool has_upload_contract() const;
  private:
  bool _internal_has_upload_contract() const;
  public:
  void clear_upload_contract();
  const ::koinos::protocol::upload_contract_operation& upload_contract() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::upload_contract_operation* release_upload_contract();
  ::koinos::protocol::upload_contract_operation* mutable_upload_contract();
  void set_allocated_upload_contract(::koinos::protocol::upload_contract_operation* upload_contract);
  private:
  const ::koinos::protocol::upload_contract_operation& _internal_upload_contract() const;
  ::koinos::protocol::upload_contract_operation* _internal_mutable_upload_contract();
  public:
  void unsafe_arena_set_allocated_upload_contract(
      ::koinos::protocol::upload_contract_operation* upload_contract);
  ::koinos::protocol::upload_contract_operation* unsafe_arena_release_upload_contract();

  // .koinos.protocol.call_contract_operation call_contract = 2;
  bool has_call_contract() const;
  private:
  bool _internal_has_call_contract() const;
  public:
  void clear_call_contract();
  const ::koinos::protocol::call_contract_operation& call_contract() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::call_contract_operation* release_call_contract();
  ::koinos::protocol::call_contract_operation* mutable_call_contract();
  void set_allocated_call_contract(::koinos::protocol::call_contract_operation* call_contract);
  private:
  const ::koinos::protocol::call_contract_operation& _internal_call_contract() const;
  ::koinos::protocol::call_contract_operation* _internal_mutable_call_contract();
  public:
  void unsafe_arena_set_allocated_call_contract(
      ::koinos::protocol::call_contract_operation* call_contract);
  ::koinos::protocol::call_contract_operation* unsafe_arena_release_call_contract();

  // .koinos.protocol.set_system_call_operation set_system_call = 3;
  bool has_set_system_call() const;
  private:
  bool _internal_has_set_system_call() const;
  public:
  void clear_set_system_call();
  const ::koinos::protocol::set_system_call_operation& set_system_call() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::set_system_call_operation* release_set_system_call();
  ::koinos::protocol::set_system_call_operation* mutable_set_system_call();
  void set_allocated_set_system_call(::koinos::protocol::set_system_call_operation* set_system_call);
  private:
  const ::koinos::protocol::set_system_call_operation& _internal_set_system_call() const;
  ::koinos::protocol::set_system_call_operation* _internal_mutable_set_system_call();
  public:
  void unsafe_arena_set_allocated_set_system_call(
      ::koinos::protocol::set_system_call_operation* set_system_call);
  ::koinos::protocol::set_system_call_operation* unsafe_arena_release_set_system_call();

  // .koinos.protocol.set_system_contract_operation set_system_contract = 4;
  bool has_set_system_contract() const;
  private:
  bool _internal_has_set_system_contract() const;
  public:
  void clear_set_system_contract();
  const ::koinos::protocol::set_system_contract_operation& set_system_contract() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::set_system_contract_operation* release_set_system_contract();
  ::koinos::protocol::set_system_contract_operation* mutable_set_system_contract();
  void set_allocated_set_system_contract(::koinos::protocol::set_system_contract_operation* set_system_contract);
  private:
  const ::koinos::protocol::set_system_contract_operation& _internal_set_system_contract() const;
  ::koinos::protocol::set_system_contract_operation* _internal_mutable_set_system_contract();
  public:
  void unsafe_arena_set_allocated_set_system_contract(
      ::koinos::protocol::set_system_contract_operation* set_system_contract);
  ::koinos::protocol::set_system_contract_operation* unsafe_arena_release_set_system_contract();

  void clear_op();
  OpCase op_case() const;
  // @@protoc_insertion_point(class_scope:koinos.protocol.operation)
 private:
  class _Internal;
  void set_has_upload_contract();
  void set_has_call_contract();
  void set_has_set_system_call();
  void set_has_set_system_contract();

  inline bool has_op() const;
  inline void clear_has_op();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OpUnion {
    constexpr OpUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::protocol::upload_contract_operation* upload_contract_;
    ::koinos::protocol::call_contract_operation* call_contract_;
    ::koinos::protocol::set_system_call_operation* set_system_call_;
    ::koinos::protocol::set_system_contract_operation* set_system_contract_;
  } op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class transaction_header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.transaction_header) */ {
 public:
  inline transaction_header() : transaction_header(nullptr) {}
  ~transaction_header() override;
  explicit constexpr transaction_header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_header(const transaction_header& from);
  transaction_header(transaction_header&& from) noexcept
    : transaction_header() {
    *this = ::std::move(from);
  }

  inline transaction_header& operator=(const transaction_header& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_header& operator=(transaction_header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_header& default_instance() {
    return *internal_default_instance();
  }
  static inline const transaction_header* internal_default_instance() {
    return reinterpret_cast<const transaction_header*>(
               &_transaction_header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(transaction_header& a, transaction_header& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_header* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transaction_header* New() const final {
    return new transaction_header();
  }

  transaction_header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transaction_header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.transaction_header";
  }
  protected:
  explicit transaction_header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 1,
    kNonceFieldNumber = 3,
    kOperationMerkleRootFieldNumber = 4,
    kPayerFieldNumber = 5,
    kPayeeFieldNumber = 6,
    kRcLimitFieldNumber = 2,
  };
  // bytes chain_id = 1;
  void clear_chain_id();
  const std::string& chain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chain_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // bytes nonce = 3;
  void clear_nonce();
  const std::string& nonce() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nonce(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nonce();
  PROTOBUF_MUST_USE_RESULT std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes operation_merkle_root = 4;
  void clear_operation_merkle_root();
  const std::string& operation_merkle_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operation_merkle_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operation_merkle_root();
  PROTOBUF_MUST_USE_RESULT std::string* release_operation_merkle_root();
  void set_allocated_operation_merkle_root(std::string* operation_merkle_root);
  private:
  const std::string& _internal_operation_merkle_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation_merkle_root(const std::string& value);
  std::string* _internal_mutable_operation_merkle_root();
  public:

  // bytes payer = 5 [(.koinos.btype) = ADDRESS];
  void clear_payer();
  const std::string& payer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payer();
  PROTOBUF_MUST_USE_RESULT std::string* release_payer();
  void set_allocated_payer(std::string* payer);
  private:
  const std::string& _internal_payer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payer(const std::string& value);
  std::string* _internal_mutable_payer();
  public:

  // bytes payee = 6 [(.koinos.btype) = ADDRESS];
  void clear_payee();
  const std::string& payee() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payee(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payee();
  PROTOBUF_MUST_USE_RESULT std::string* release_payee();
  void set_allocated_payee(std::string* payee);
  private:
  const std::string& _internal_payee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payee(const std::string& value);
  std::string* _internal_mutable_payee();
  public:

  // uint64 rc_limit = 2 [jstype = JS_STRING];
  void clear_rc_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 rc_limit() const;
  void set_rc_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rc_limit() const;
  void _internal_set_rc_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.transaction_header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_merkle_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rc_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.transaction) */ {
 public:
  inline transaction() : transaction(nullptr) {}
  ~transaction() override;
  explicit constexpr transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction(const transaction& from);
  transaction(transaction&& from) noexcept
    : transaction() {
    *this = ::std::move(from);
  }

  inline transaction& operator=(const transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction& operator=(transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const transaction* internal_default_instance() {
    return reinterpret_cast<const transaction*>(
               &_transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(transaction& a, transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transaction* New() const final {
    return new transaction();
  }

  transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.transaction";
  }
  protected:
  explicit transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 3,
    kSignaturesFieldNumber = 4,
    kIdFieldNumber = 1,
    kHeaderFieldNumber = 2,
  };
  // repeated .koinos.protocol.operation operations = 3;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::koinos::protocol::operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::operation >*
      mutable_operations();
  private:
  const ::koinos::protocol::operation& _internal_operations(int index) const;
  ::koinos::protocol::operation* _internal_add_operations();
  public:
  const ::koinos::protocol::operation& operations(int index) const;
  ::koinos::protocol::operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::operation >&
      operations() const;

  // repeated bytes signatures = 4;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  const std::string& signatures(int index) const;
  std::string* mutable_signatures(int index);
  void set_signatures(int index, const std::string& value);
  void set_signatures(int index, std::string&& value);
  void set_signatures(int index, const char* value);
  void set_signatures(int index, const void* value, size_t size);
  std::string* add_signatures();
  void add_signatures(const std::string& value);
  void add_signatures(std::string&& value);
  void add_signatures(const char* value);
  void add_signatures(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signatures();
  private:
  const std::string& _internal_signatures(int index) const;
  std::string* _internal_add_signatures();
  public:

  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .koinos.protocol.transaction_header header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::koinos::protocol::transaction_header& header() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::transaction_header* release_header();
  ::koinos::protocol::transaction_header* mutable_header();
  void set_allocated_header(::koinos::protocol::transaction_header* header);
  private:
  const ::koinos::protocol::transaction_header& _internal_header() const;
  ::koinos::protocol::transaction_header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::koinos::protocol::transaction_header* header);
  ::koinos::protocol::transaction_header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:koinos.protocol.transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::operation > operations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signatures_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::koinos::protocol::transaction_header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class transaction_receipt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.transaction_receipt) */ {
 public:
  inline transaction_receipt() : transaction_receipt(nullptr) {}
  ~transaction_receipt() override;
  explicit constexpr transaction_receipt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_receipt(const transaction_receipt& from);
  transaction_receipt(transaction_receipt&& from) noexcept
    : transaction_receipt() {
    *this = ::std::move(from);
  }

  inline transaction_receipt& operator=(const transaction_receipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_receipt& operator=(transaction_receipt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_receipt& default_instance() {
    return *internal_default_instance();
  }
  static inline const transaction_receipt* internal_default_instance() {
    return reinterpret_cast<const transaction_receipt*>(
               &_transaction_receipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(transaction_receipt& a, transaction_receipt& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_receipt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_receipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transaction_receipt* New() const final {
    return new transaction_receipt();
  }

  transaction_receipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transaction_receipt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_receipt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_receipt& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_receipt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.transaction_receipt";
  }
  protected:
  explicit transaction_receipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 10,
    kLogsFieldNumber = 11,
    kStateDeltaEntriesFieldNumber = 12,
    kIdFieldNumber = 1,
    kPayerFieldNumber = 2,
    kMaxPayerRcFieldNumber = 3,
    kRcLimitFieldNumber = 4,
    kRcUsedFieldNumber = 5,
    kDiskStorageUsedFieldNumber = 6,
    kNetworkBandwidthUsedFieldNumber = 7,
    kComputeBandwidthUsedFieldNumber = 8,
    kRevertedFieldNumber = 9,
  };
  // repeated .koinos.protocol.event_data events = 10;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::koinos::protocol::event_data* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::event_data >*
      mutable_events();
  private:
  const ::koinos::protocol::event_data& _internal_events(int index) const;
  ::koinos::protocol::event_data* _internal_add_events();
  public:
  const ::koinos::protocol::event_data& events(int index) const;
  ::koinos::protocol::event_data* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::event_data >&
      events() const;

  // repeated string logs = 11;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  const std::string& logs(int index) const;
  std::string* mutable_logs(int index);
  void set_logs(int index, const std::string& value);
  void set_logs(int index, std::string&& value);
  void set_logs(int index, const char* value);
  void set_logs(int index, const char* value, size_t size);
  std::string* add_logs();
  void add_logs(const std::string& value);
  void add_logs(std::string&& value);
  void add_logs(const char* value);
  void add_logs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& logs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_logs();
  private:
  const std::string& _internal_logs(int index) const;
  std::string* _internal_add_logs();
  public:

  // repeated .koinos.protocol.state_delta_entry state_delta_entries = 12;
  int state_delta_entries_size() const;
  private:
  int _internal_state_delta_entries_size() const;
  public:
  void clear_state_delta_entries();
  ::koinos::protocol::state_delta_entry* mutable_state_delta_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::state_delta_entry >*
      mutable_state_delta_entries();
  private:
  const ::koinos::protocol::state_delta_entry& _internal_state_delta_entries(int index) const;
  ::koinos::protocol::state_delta_entry* _internal_add_state_delta_entries();
  public:
  const ::koinos::protocol::state_delta_entry& state_delta_entries(int index) const;
  ::koinos::protocol::state_delta_entry* add_state_delta_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::state_delta_entry >&
      state_delta_entries() const;

  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes payer = 2 [(.koinos.btype) = ADDRESS];
  void clear_payer();
  const std::string& payer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payer();
  PROTOBUF_MUST_USE_RESULT std::string* release_payer();
  void set_allocated_payer(std::string* payer);
  private:
  const std::string& _internal_payer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payer(const std::string& value);
  std::string* _internal_mutable_payer();
  public:

  // uint64 max_payer_rc = 3 [jstype = JS_STRING];
  void clear_max_payer_rc();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_payer_rc() const;
  void set_max_payer_rc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_payer_rc() const;
  void _internal_set_max_payer_rc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rc_limit = 4 [jstype = JS_STRING];
  void clear_rc_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 rc_limit() const;
  void set_rc_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rc_limit() const;
  void _internal_set_rc_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rc_used = 5 [jstype = JS_STRING];
  void clear_rc_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 rc_used() const;
  void set_rc_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rc_used() const;
  void _internal_set_rc_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 disk_storage_used = 6 [jstype = JS_STRING];
  void clear_disk_storage_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 disk_storage_used() const;
  void set_disk_storage_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_disk_storage_used() const;
  void _internal_set_disk_storage_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 network_bandwidth_used = 7 [jstype = JS_STRING];
  void clear_network_bandwidth_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 network_bandwidth_used() const;
  void set_network_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_network_bandwidth_used() const;
  void _internal_set_network_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 compute_bandwidth_used = 8 [jstype = JS_STRING];
  void clear_compute_bandwidth_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 compute_bandwidth_used() const;
  void set_compute_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_compute_bandwidth_used() const;
  void _internal_set_compute_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool reverted = 9;
  void clear_reverted();
  bool reverted() const;
  void set_reverted(bool value);
  private:
  bool _internal_reverted() const;
  void _internal_set_reverted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.transaction_receipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::event_data > events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::state_delta_entry > state_delta_entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_payer_rc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rc_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rc_used_;
  ::PROTOBUF_NAMESPACE_ID::uint64 disk_storage_used_;
  ::PROTOBUF_NAMESPACE_ID::uint64 network_bandwidth_used_;
  ::PROTOBUF_NAMESPACE_ID::uint64 compute_bandwidth_used_;
  bool reverted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class block_header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.block_header) */ {
 public:
  inline block_header() : block_header(nullptr) {}
  ~block_header() override;
  explicit constexpr block_header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_header(const block_header& from);
  block_header(block_header&& from) noexcept
    : block_header() {
    *this = ::std::move(from);
  }

  inline block_header& operator=(const block_header& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_header& operator=(block_header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_header& default_instance() {
    return *internal_default_instance();
  }
  static inline const block_header* internal_default_instance() {
    return reinterpret_cast<const block_header*>(
               &_block_header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(block_header& a, block_header& b) {
    a.Swap(&b);
  }
  inline void Swap(block_header* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_header* New() const final {
    return new block_header();
  }

  block_header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.block_header";
  }
  protected:
  explicit block_header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApprovedProposalsFieldNumber = 7,
    kPreviousFieldNumber = 1,
    kPreviousStateMerkleRootFieldNumber = 4,
    kTransactionMerkleRootFieldNumber = 5,
    kSignerFieldNumber = 6,
    kHeightFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // repeated bytes approved_proposals = 7 [(.koinos.btype) = TRANSACTION_ID];
  int approved_proposals_size() const;
  private:
  int _internal_approved_proposals_size() const;
  public:
  void clear_approved_proposals();
  const std::string& approved_proposals(int index) const;
  std::string* mutable_approved_proposals(int index);
  void set_approved_proposals(int index, const std::string& value);
  void set_approved_proposals(int index, std::string&& value);
  void set_approved_proposals(int index, const char* value);
  void set_approved_proposals(int index, const void* value, size_t size);
  std::string* add_approved_proposals();
  void add_approved_proposals(const std::string& value);
  void add_approved_proposals(std::string&& value);
  void add_approved_proposals(const char* value);
  void add_approved_proposals(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& approved_proposals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_approved_proposals();
  private:
  const std::string& _internal_approved_proposals(int index) const;
  std::string* _internal_add_approved_proposals();
  public:

  // bytes previous = 1 [(.koinos.btype) = BLOCK_ID];
  void clear_previous();
  const std::string& previous() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previous(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previous();
  PROTOBUF_MUST_USE_RESULT std::string* release_previous();
  void set_allocated_previous(std::string* previous);
  private:
  const std::string& _internal_previous() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous(const std::string& value);
  std::string* _internal_mutable_previous();
  public:

  // bytes previous_state_merkle_root = 4;
  void clear_previous_state_merkle_root();
  const std::string& previous_state_merkle_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previous_state_merkle_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previous_state_merkle_root();
  PROTOBUF_MUST_USE_RESULT std::string* release_previous_state_merkle_root();
  void set_allocated_previous_state_merkle_root(std::string* previous_state_merkle_root);
  private:
  const std::string& _internal_previous_state_merkle_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_state_merkle_root(const std::string& value);
  std::string* _internal_mutable_previous_state_merkle_root();
  public:

  // bytes transaction_merkle_root = 5;
  void clear_transaction_merkle_root();
  const std::string& transaction_merkle_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transaction_merkle_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transaction_merkle_root();
  PROTOBUF_MUST_USE_RESULT std::string* release_transaction_merkle_root();
  void set_allocated_transaction_merkle_root(std::string* transaction_merkle_root);
  private:
  const std::string& _internal_transaction_merkle_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transaction_merkle_root(const std::string& value);
  std::string* _internal_mutable_transaction_merkle_root();
  public:

  // bytes signer = 6 [(.koinos.btype) = ADDRESS];
  void clear_signer();
  const std::string& signer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signer();
  PROTOBUF_MUST_USE_RESULT std::string* release_signer();
  void set_allocated_signer(std::string* signer);
  private:
  const std::string& _internal_signer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signer(const std::string& value);
  std::string* _internal_mutable_signer();
  public:

  // uint64 height = 2 [jstype = JS_STRING];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 3 [jstype = JS_STRING];
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.block_header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> approved_proposals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_state_merkle_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_merkle_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.block) */ {
 public:
  inline block() : block(nullptr) {}
  ~block() override;
  explicit constexpr block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block(const block& from);
  block(block&& from) noexcept
    : block() {
    *this = ::std::move(from);
  }

  inline block& operator=(const block& from) {
    CopyFrom(from);
    return *this;
  }
  inline block& operator=(block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block& default_instance() {
    return *internal_default_instance();
  }
  static inline const block* internal_default_instance() {
    return reinterpret_cast<const block*>(
               &_block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(block& a, block& b) {
    a.Swap(&b);
  }
  inline void Swap(block* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block* New() const final {
    return new block();
  }

  block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.block";
  }
  protected:
  explicit block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 3,
    kIdFieldNumber = 1,
    kSignatureFieldNumber = 4,
    kHeaderFieldNumber = 2,
  };
  // repeated .koinos.protocol.transaction transactions = 3;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::koinos::protocol::transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction >*
      mutable_transactions();
  private:
  const ::koinos::protocol::transaction& _internal_transactions(int index) const;
  ::koinos::protocol::transaction* _internal_add_transactions();
  public:
  const ::koinos::protocol::transaction& transactions(int index) const;
  ::koinos::protocol::transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction >&
      transactions() const;

  // bytes id = 1 [(.koinos.btype) = BLOCK_ID];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes signature = 4;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_MUST_USE_RESULT std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .koinos.protocol.block_header header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::koinos::protocol::block_header& header() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::block_header* release_header();
  ::koinos::protocol::block_header* mutable_header();
  void set_allocated_header(::koinos::protocol::block_header* header);
  private:
  const ::koinos::protocol::block_header& _internal_header() const;
  ::koinos::protocol::block_header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::koinos::protocol::block_header* header);
  ::koinos::protocol::block_header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:koinos.protocol.block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction > transactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::koinos::protocol::block_header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class block_receipt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.block_receipt) */ {
 public:
  inline block_receipt() : block_receipt(nullptr) {}
  ~block_receipt() override;
  explicit constexpr block_receipt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_receipt(const block_receipt& from);
  block_receipt(block_receipt&& from) noexcept
    : block_receipt() {
    *this = ::std::move(from);
  }

  inline block_receipt& operator=(const block_receipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_receipt& operator=(block_receipt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_receipt& default_instance() {
    return *internal_default_instance();
  }
  static inline const block_receipt* internal_default_instance() {
    return reinterpret_cast<const block_receipt*>(
               &_block_receipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(block_receipt& a, block_receipt& b) {
    a.Swap(&b);
  }
  inline void Swap(block_receipt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_receipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_receipt* New() const final {
    return new block_receipt();
  }

  block_receipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_receipt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_receipt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_receipt& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_receipt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.block_receipt";
  }
  protected:
  explicit block_receipt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 7,
    kTransactionReceiptsFieldNumber = 8,
    kLogsFieldNumber = 9,
    kStateDeltaEntriesFieldNumber = 13,
    kIdFieldNumber = 1,
    kStateMerkleRootFieldNumber = 6,
    kHeightFieldNumber = 2,
    kDiskStorageUsedFieldNumber = 3,
    kNetworkBandwidthUsedFieldNumber = 4,
    kComputeBandwidthUsedFieldNumber = 5,
    kDiskStorageChargedFieldNumber = 10,
    kNetworkBandwidthChargedFieldNumber = 11,
    kComputeBandwidthChargedFieldNumber = 12,
  };
  // repeated .koinos.protocol.event_data events = 7;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::koinos::protocol::event_data* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::event_data >*
      mutable_events();
  private:
  const ::koinos::protocol::event_data& _internal_events(int index) const;
  ::koinos::protocol::event_data* _internal_add_events();
  public:
  const ::koinos::protocol::event_data& events(int index) const;
  ::koinos::protocol::event_data* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::event_data >&
      events() const;

  // repeated .koinos.protocol.transaction_receipt transaction_receipts = 8;
  int transaction_receipts_size() const;
  private:
  int _internal_transaction_receipts_size() const;
  public:
  void clear_transaction_receipts();
  ::koinos::protocol::transaction_receipt* mutable_transaction_receipts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction_receipt >*
      mutable_transaction_receipts();
  private:
  const ::koinos::protocol::transaction_receipt& _internal_transaction_receipts(int index) const;
  ::koinos::protocol::transaction_receipt* _internal_add_transaction_receipts();
  public:
  const ::koinos::protocol::transaction_receipt& transaction_receipts(int index) const;
  ::koinos::protocol::transaction_receipt* add_transaction_receipts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction_receipt >&
      transaction_receipts() const;

  // repeated string logs = 9;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  const std::string& logs(int index) const;
  std::string* mutable_logs(int index);
  void set_logs(int index, const std::string& value);
  void set_logs(int index, std::string&& value);
  void set_logs(int index, const char* value);
  void set_logs(int index, const char* value, size_t size);
  std::string* add_logs();
  void add_logs(const std::string& value);
  void add_logs(std::string&& value);
  void add_logs(const char* value);
  void add_logs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& logs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_logs();
  private:
  const std::string& _internal_logs(int index) const;
  std::string* _internal_add_logs();
  public:

  // repeated .koinos.protocol.state_delta_entry state_delta_entries = 13;
  int state_delta_entries_size() const;
  private:
  int _internal_state_delta_entries_size() const;
  public:
  void clear_state_delta_entries();
  ::koinos::protocol::state_delta_entry* mutable_state_delta_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::state_delta_entry >*
      mutable_state_delta_entries();
  private:
  const ::koinos::protocol::state_delta_entry& _internal_state_delta_entries(int index) const;
  ::koinos::protocol::state_delta_entry* _internal_add_state_delta_entries();
  public:
  const ::koinos::protocol::state_delta_entry& state_delta_entries(int index) const;
  ::koinos::protocol::state_delta_entry* add_state_delta_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::state_delta_entry >&
      state_delta_entries() const;

  // bytes id = 1 [(.koinos.btype) = BLOCK_ID];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes state_merkle_root = 6;
  void clear_state_merkle_root();
  const std::string& state_merkle_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state_merkle_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state_merkle_root();
  PROTOBUF_MUST_USE_RESULT std::string* release_state_merkle_root();
  void set_allocated_state_merkle_root(std::string* state_merkle_root);
  private:
  const std::string& _internal_state_merkle_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_merkle_root(const std::string& value);
  std::string* _internal_mutable_state_merkle_root();
  public:

  // uint64 height = 2 [jstype = JS_STRING];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 disk_storage_used = 3 [jstype = JS_STRING];
  void clear_disk_storage_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 disk_storage_used() const;
  void set_disk_storage_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_disk_storage_used() const;
  void _internal_set_disk_storage_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 network_bandwidth_used = 4 [jstype = JS_STRING];
  void clear_network_bandwidth_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 network_bandwidth_used() const;
  void set_network_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_network_bandwidth_used() const;
  void _internal_set_network_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 compute_bandwidth_used = 5 [jstype = JS_STRING];
  void clear_compute_bandwidth_used();
  ::PROTOBUF_NAMESPACE_ID::uint64 compute_bandwidth_used() const;
  void set_compute_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_compute_bandwidth_used() const;
  void _internal_set_compute_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 disk_storage_charged = 10 [jstype = JS_STRING];
  void clear_disk_storage_charged();
  ::PROTOBUF_NAMESPACE_ID::uint64 disk_storage_charged() const;
  void set_disk_storage_charged(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_disk_storage_charged() const;
  void _internal_set_disk_storage_charged(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 network_bandwidth_charged = 11 [jstype = JS_STRING];
  void clear_network_bandwidth_charged();
  ::PROTOBUF_NAMESPACE_ID::uint64 network_bandwidth_charged() const;
  void set_network_bandwidth_charged(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_network_bandwidth_charged() const;
  void _internal_set_network_bandwidth_charged(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 compute_bandwidth_charged = 12 [jstype = JS_STRING];
  void clear_compute_bandwidth_charged();
  ::PROTOBUF_NAMESPACE_ID::uint64 compute_bandwidth_charged() const;
  void set_compute_bandwidth_charged(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_compute_bandwidth_charged() const;
  void _internal_set_compute_bandwidth_charged(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.block_receipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::event_data > events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction_receipt > transaction_receipts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::state_delta_entry > state_delta_entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_merkle_root_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 disk_storage_used_;
  ::PROTOBUF_NAMESPACE_ID::uint64 network_bandwidth_used_;
  ::PROTOBUF_NAMESPACE_ID::uint64 compute_bandwidth_used_;
  ::PROTOBUF_NAMESPACE_ID::uint64 disk_storage_charged_;
  ::PROTOBUF_NAMESPACE_ID::uint64 network_bandwidth_charged_;
  ::PROTOBUF_NAMESPACE_ID::uint64 compute_bandwidth_charged_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class state_delta_entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.state_delta_entry) */ {
 public:
  inline state_delta_entry() : state_delta_entry(nullptr) {}
  ~state_delta_entry() override;
  explicit constexpr state_delta_entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  state_delta_entry(const state_delta_entry& from);
  state_delta_entry(state_delta_entry&& from) noexcept
    : state_delta_entry() {
    *this = ::std::move(from);
  }

  inline state_delta_entry& operator=(const state_delta_entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline state_delta_entry& operator=(state_delta_entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const state_delta_entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const state_delta_entry* internal_default_instance() {
    return reinterpret_cast<const state_delta_entry*>(
               &_state_delta_entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(state_delta_entry& a, state_delta_entry& b) {
    a.Swap(&b);
  }
  inline void Swap(state_delta_entry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(state_delta_entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline state_delta_entry* New() const final {
    return new state_delta_entry();
  }

  state_delta_entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<state_delta_entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const state_delta_entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const state_delta_entry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(state_delta_entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.state_delta_entry";
  }
  protected:
  explicit state_delta_entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kObjectSpaceFieldNumber = 1,
  };
  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional bytes value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .koinos.protocol.object_space object_space = 1;
  bool has_object_space() const;
  private:
  bool _internal_has_object_space() const;
  public:
  void clear_object_space();
  const ::koinos::protocol::object_space& object_space() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::object_space* release_object_space();
  ::koinos::protocol::object_space* mutable_object_space();
  void set_allocated_object_space(::koinos::protocol::object_space* object_space);
  private:
  const ::koinos::protocol::object_space& _internal_object_space() const;
  ::koinos::protocol::object_space* _internal_mutable_object_space();
  public:
  void unsafe_arena_set_allocated_object_space(
      ::koinos::protocol::object_space* object_space);
  ::koinos::protocol::object_space* unsafe_arena_release_object_space();

  // @@protoc_insertion_point(class_scope:koinos.protocol.state_delta_entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::koinos::protocol::object_space* object_space_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// object_space

// bool system = 1;
inline void object_space::clear_system() {
  system_ = false;
}
inline bool object_space::_internal_system() const {
  return system_;
}
inline bool object_space::system() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.object_space.system)
  return _internal_system();
}
inline void object_space::_internal_set_system(bool value) {
  
  system_ = value;
}
inline void object_space::set_system(bool value) {
  _internal_set_system(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.object_space.system)
}

// bytes zone = 2;
inline void object_space::clear_zone() {
  zone_.ClearToEmpty();
}
inline const std::string& object_space::zone() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.object_space.zone)
  return _internal_zone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void object_space::set_zone(ArgT0&& arg0, ArgT... args) {
 
 zone_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.object_space.zone)
}
inline std::string* object_space::mutable_zone() {
  std::string* _s = _internal_mutable_zone();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.object_space.zone)
  return _s;
}
inline const std::string& object_space::_internal_zone() const {
  return zone_.Get();
}
inline void object_space::_internal_set_zone(const std::string& value) {
  
  zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* object_space::_internal_mutable_zone() {
  
  return zone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* object_space::release_zone() {
  // @@protoc_insertion_point(field_release:koinos.protocol.object_space.zone)
  return zone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void object_space::set_allocated_zone(std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zone,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.object_space.zone)
}

// uint32 id = 3;
inline void object_space::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 object_space::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 object_space::id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.object_space.id)
  return _internal_id();
}
inline void object_space::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void object_space::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.object_space.id)
}

// -------------------------------------------------------------------

// event_data

// uint32 sequence = 1;
inline void event_data::clear_sequence() {
  sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_data::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_data::sequence() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.event_data.sequence)
  return _internal_sequence();
}
inline void event_data::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_ = value;
}
inline void event_data::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.event_data.sequence)
}

// bytes source = 2 [(.koinos.btype) = CONTRACT_ID];
inline void event_data::clear_source() {
  source_.ClearToEmpty();
}
inline const std::string& event_data::source() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.event_data.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void event_data::set_source(ArgT0&& arg0, ArgT... args) {
 
 source_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.event_data.source)
}
inline std::string* event_data::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.event_data.source)
  return _s;
}
inline const std::string& event_data::_internal_source() const {
  return source_.Get();
}
inline void event_data::_internal_set_source(const std::string& value) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* event_data::_internal_mutable_source() {
  
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* event_data::release_source() {
  // @@protoc_insertion_point(field_release:koinos.protocol.event_data.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void event_data::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.event_data.source)
}

// string name = 3;
inline void event_data::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& event_data::name() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.event_data.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void event_data::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.event_data.name)
}
inline std::string* event_data::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.event_data.name)
  return _s;
}
inline const std::string& event_data::_internal_name() const {
  return name_.Get();
}
inline void event_data::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* event_data::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* event_data::release_name() {
  // @@protoc_insertion_point(field_release:koinos.protocol.event_data.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void event_data::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.event_data.name)
}

// bytes data = 4;
inline void event_data::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& event_data::data() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.event_data.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void event_data::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.event_data.data)
}
inline std::string* event_data::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.event_data.data)
  return _s;
}
inline const std::string& event_data::_internal_data() const {
  return data_.Get();
}
inline void event_data::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* event_data::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* event_data::release_data() {
  // @@protoc_insertion_point(field_release:koinos.protocol.event_data.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void event_data::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.event_data.data)
}

// repeated bytes impacted = 5 [(.koinos.btype) = ADDRESS];
inline int event_data::_internal_impacted_size() const {
  return impacted_.size();
}
inline int event_data::impacted_size() const {
  return _internal_impacted_size();
}
inline void event_data::clear_impacted() {
  impacted_.Clear();
}
inline std::string* event_data::add_impacted() {
  std::string* _s = _internal_add_impacted();
  // @@protoc_insertion_point(field_add_mutable:koinos.protocol.event_data.impacted)
  return _s;
}
inline const std::string& event_data::_internal_impacted(int index) const {
  return impacted_.Get(index);
}
inline const std::string& event_data::impacted(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.event_data.impacted)
  return _internal_impacted(index);
}
inline std::string* event_data::mutable_impacted(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.event_data.impacted)
  return impacted_.Mutable(index);
}
inline void event_data::set_impacted(int index, const std::string& value) {
  impacted_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.event_data.impacted)
}
inline void event_data::set_impacted(int index, std::string&& value) {
  impacted_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:koinos.protocol.event_data.impacted)
}
inline void event_data::set_impacted(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  impacted_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:koinos.protocol.event_data.impacted)
}
inline void event_data::set_impacted(int index, const void* value, size_t size) {
  impacted_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.event_data.impacted)
}
inline std::string* event_data::_internal_add_impacted() {
  return impacted_.Add();
}
inline void event_data::add_impacted(const std::string& value) {
  impacted_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:koinos.protocol.event_data.impacted)
}
inline void event_data::add_impacted(std::string&& value) {
  impacted_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:koinos.protocol.event_data.impacted)
}
inline void event_data::add_impacted(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  impacted_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:koinos.protocol.event_data.impacted)
}
inline void event_data::add_impacted(const void* value, size_t size) {
  impacted_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:koinos.protocol.event_data.impacted)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
event_data::impacted() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.event_data.impacted)
  return impacted_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
event_data::mutable_impacted() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.event_data.impacted)
  return &impacted_;
}

// -------------------------------------------------------------------

// contract_call_bundle

// bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
inline void contract_call_bundle::clear_contract_id() {
  contract_id_.ClearToEmpty();
}
inline const std::string& contract_call_bundle::contract_id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.contract_call_bundle.contract_id)
  return _internal_contract_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void contract_call_bundle::set_contract_id(ArgT0&& arg0, ArgT... args) {
 
 contract_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.contract_call_bundle.contract_id)
}
inline std::string* contract_call_bundle::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.contract_call_bundle.contract_id)
  return _s;
}
inline const std::string& contract_call_bundle::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void contract_call_bundle::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* contract_call_bundle::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* contract_call_bundle::release_contract_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.contract_call_bundle.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void contract_call_bundle::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.contract_call_bundle.contract_id)
}

// uint32 entry_point = 2;
inline void contract_call_bundle::clear_entry_point() {
  entry_point_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 contract_call_bundle::_internal_entry_point() const {
  return entry_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 contract_call_bundle::entry_point() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.contract_call_bundle.entry_point)
  return _internal_entry_point();
}
inline void contract_call_bundle::_internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entry_point_ = value;
}
inline void contract_call_bundle::set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entry_point(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.contract_call_bundle.entry_point)
}

// -------------------------------------------------------------------

// system_call_target

// uint32 thunk_id = 1;
inline bool system_call_target::_internal_has_thunk_id() const {
  return target_case() == kThunkId;
}
inline bool system_call_target::has_thunk_id() const {
  return _internal_has_thunk_id();
}
inline void system_call_target::set_has_thunk_id() {
  _oneof_case_[0] = kThunkId;
}
inline void system_call_target::clear_thunk_id() {
  if (_internal_has_thunk_id()) {
    target_.thunk_id_ = 0u;
    clear_has_target();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 system_call_target::_internal_thunk_id() const {
  if (_internal_has_thunk_id()) {
    return target_.thunk_id_;
  }
  return 0u;
}
inline void system_call_target::_internal_set_thunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_thunk_id()) {
    clear_target();
    set_has_thunk_id();
  }
  target_.thunk_id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 system_call_target::thunk_id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.system_call_target.thunk_id)
  return _internal_thunk_id();
}
inline void system_call_target::set_thunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thunk_id(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.system_call_target.thunk_id)
}

// .koinos.protocol.contract_call_bundle system_call_bundle = 2;
inline bool system_call_target::_internal_has_system_call_bundle() const {
  return target_case() == kSystemCallBundle;
}
inline bool system_call_target::has_system_call_bundle() const {
  return _internal_has_system_call_bundle();
}
inline void system_call_target::set_has_system_call_bundle() {
  _oneof_case_[0] = kSystemCallBundle;
}
inline void system_call_target::clear_system_call_bundle() {
  if (_internal_has_system_call_bundle()) {
    if (GetArenaForAllocation() == nullptr) {
      delete target_.system_call_bundle_;
    }
    clear_has_target();
  }
}
inline ::koinos::protocol::contract_call_bundle* system_call_target::release_system_call_bundle() {
  // @@protoc_insertion_point(field_release:koinos.protocol.system_call_target.system_call_bundle)
  if (_internal_has_system_call_bundle()) {
    clear_has_target();
      ::koinos::protocol::contract_call_bundle* temp = target_.system_call_bundle_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.system_call_bundle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::contract_call_bundle& system_call_target::_internal_system_call_bundle() const {
  return _internal_has_system_call_bundle()
      ? *target_.system_call_bundle_
      : reinterpret_cast< ::koinos::protocol::contract_call_bundle&>(::koinos::protocol::_contract_call_bundle_default_instance_);
}
inline const ::koinos::protocol::contract_call_bundle& system_call_target::system_call_bundle() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.system_call_target.system_call_bundle)
  return _internal_system_call_bundle();
}
inline ::koinos::protocol::contract_call_bundle* system_call_target::unsafe_arena_release_system_call_bundle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.system_call_target.system_call_bundle)
  if (_internal_has_system_call_bundle()) {
    clear_has_target();
    ::koinos::protocol::contract_call_bundle* temp = target_.system_call_bundle_;
    target_.system_call_bundle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void system_call_target::unsafe_arena_set_allocated_system_call_bundle(::koinos::protocol::contract_call_bundle* system_call_bundle) {
  clear_target();
  if (system_call_bundle) {
    set_has_system_call_bundle();
    target_.system_call_bundle_ = system_call_bundle;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.system_call_target.system_call_bundle)
}
inline ::koinos::protocol::contract_call_bundle* system_call_target::_internal_mutable_system_call_bundle() {
  if (!_internal_has_system_call_bundle()) {
    clear_target();
    set_has_system_call_bundle();
    target_.system_call_bundle_ = CreateMaybeMessage< ::koinos::protocol::contract_call_bundle >(GetArenaForAllocation());
  }
  return target_.system_call_bundle_;
}
inline ::koinos::protocol::contract_call_bundle* system_call_target::mutable_system_call_bundle() {
  ::koinos::protocol::contract_call_bundle* _msg = _internal_mutable_system_call_bundle();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.system_call_target.system_call_bundle)
  return _msg;
}

inline bool system_call_target::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void system_call_target::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline system_call_target::TargetCase system_call_target::target_case() const {
  return system_call_target::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// upload_contract_operation

// bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
inline void upload_contract_operation::clear_contract_id() {
  contract_id_.ClearToEmpty();
}
inline const std::string& upload_contract_operation::contract_id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.upload_contract_operation.contract_id)
  return _internal_contract_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void upload_contract_operation::set_contract_id(ArgT0&& arg0, ArgT... args) {
 
 contract_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.upload_contract_operation.contract_id)
}
inline std::string* upload_contract_operation::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.upload_contract_operation.contract_id)
  return _s;
}
inline const std::string& upload_contract_operation::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void upload_contract_operation::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* upload_contract_operation::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* upload_contract_operation::release_contract_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.upload_contract_operation.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void upload_contract_operation::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.upload_contract_operation.contract_id)
}

// bytes bytecode = 2;
inline void upload_contract_operation::clear_bytecode() {
  bytecode_.ClearToEmpty();
}
inline const std::string& upload_contract_operation::bytecode() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.upload_contract_operation.bytecode)
  return _internal_bytecode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void upload_contract_operation::set_bytecode(ArgT0&& arg0, ArgT... args) {
 
 bytecode_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.upload_contract_operation.bytecode)
}
inline std::string* upload_contract_operation::mutable_bytecode() {
  std::string* _s = _internal_mutable_bytecode();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.upload_contract_operation.bytecode)
  return _s;
}
inline const std::string& upload_contract_operation::_internal_bytecode() const {
  return bytecode_.Get();
}
inline void upload_contract_operation::_internal_set_bytecode(const std::string& value) {
  
  bytecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* upload_contract_operation::_internal_mutable_bytecode() {
  
  return bytecode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* upload_contract_operation::release_bytecode() {
  // @@protoc_insertion_point(field_release:koinos.protocol.upload_contract_operation.bytecode)
  return bytecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void upload_contract_operation::set_allocated_bytecode(std::string* bytecode) {
  if (bytecode != nullptr) {
    
  } else {
    
  }
  bytecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytecode,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.upload_contract_operation.bytecode)
}

// string abi = 3;
inline void upload_contract_operation::clear_abi() {
  abi_.ClearToEmpty();
}
inline const std::string& upload_contract_operation::abi() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.upload_contract_operation.abi)
  return _internal_abi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void upload_contract_operation::set_abi(ArgT0&& arg0, ArgT... args) {
 
 abi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.upload_contract_operation.abi)
}
inline std::string* upload_contract_operation::mutable_abi() {
  std::string* _s = _internal_mutable_abi();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.upload_contract_operation.abi)
  return _s;
}
inline const std::string& upload_contract_operation::_internal_abi() const {
  return abi_.Get();
}
inline void upload_contract_operation::_internal_set_abi(const std::string& value) {
  
  abi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* upload_contract_operation::_internal_mutable_abi() {
  
  return abi_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* upload_contract_operation::release_abi() {
  // @@protoc_insertion_point(field_release:koinos.protocol.upload_contract_operation.abi)
  return abi_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void upload_contract_operation::set_allocated_abi(std::string* abi) {
  if (abi != nullptr) {
    
  } else {
    
  }
  abi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), abi,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.upload_contract_operation.abi)
}

// bool authorizes_call_contract = 4;
inline void upload_contract_operation::clear_authorizes_call_contract() {
  authorizes_call_contract_ = false;
}
inline bool upload_contract_operation::_internal_authorizes_call_contract() const {
  return authorizes_call_contract_;
}
inline bool upload_contract_operation::authorizes_call_contract() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.upload_contract_operation.authorizes_call_contract)
  return _internal_authorizes_call_contract();
}
inline void upload_contract_operation::_internal_set_authorizes_call_contract(bool value) {
  
  authorizes_call_contract_ = value;
}
inline void upload_contract_operation::set_authorizes_call_contract(bool value) {
  _internal_set_authorizes_call_contract(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.upload_contract_operation.authorizes_call_contract)
}

// bool authorizes_transaction_application = 5;
inline void upload_contract_operation::clear_authorizes_transaction_application() {
  authorizes_transaction_application_ = false;
}
inline bool upload_contract_operation::_internal_authorizes_transaction_application() const {
  return authorizes_transaction_application_;
}
inline bool upload_contract_operation::authorizes_transaction_application() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.upload_contract_operation.authorizes_transaction_application)
  return _internal_authorizes_transaction_application();
}
inline void upload_contract_operation::_internal_set_authorizes_transaction_application(bool value) {
  
  authorizes_transaction_application_ = value;
}
inline void upload_contract_operation::set_authorizes_transaction_application(bool value) {
  _internal_set_authorizes_transaction_application(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.upload_contract_operation.authorizes_transaction_application)
}

// bool authorizes_upload_contract = 6;
inline void upload_contract_operation::clear_authorizes_upload_contract() {
  authorizes_upload_contract_ = false;
}
inline bool upload_contract_operation::_internal_authorizes_upload_contract() const {
  return authorizes_upload_contract_;
}
inline bool upload_contract_operation::authorizes_upload_contract() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.upload_contract_operation.authorizes_upload_contract)
  return _internal_authorizes_upload_contract();
}
inline void upload_contract_operation::_internal_set_authorizes_upload_contract(bool value) {
  
  authorizes_upload_contract_ = value;
}
inline void upload_contract_operation::set_authorizes_upload_contract(bool value) {
  _internal_set_authorizes_upload_contract(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.upload_contract_operation.authorizes_upload_contract)
}

// -------------------------------------------------------------------

// call_contract_operation

// bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
inline void call_contract_operation::clear_contract_id() {
  contract_id_.ClearToEmpty();
}
inline const std::string& call_contract_operation::contract_id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.call_contract_operation.contract_id)
  return _internal_contract_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void call_contract_operation::set_contract_id(ArgT0&& arg0, ArgT... args) {
 
 contract_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.call_contract_operation.contract_id)
}
inline std::string* call_contract_operation::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.call_contract_operation.contract_id)
  return _s;
}
inline const std::string& call_contract_operation::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void call_contract_operation::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* call_contract_operation::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* call_contract_operation::release_contract_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.call_contract_operation.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void call_contract_operation::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.call_contract_operation.contract_id)
}

// uint32 entry_point = 2;
inline void call_contract_operation::clear_entry_point() {
  entry_point_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 call_contract_operation::_internal_entry_point() const {
  return entry_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 call_contract_operation::entry_point() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.call_contract_operation.entry_point)
  return _internal_entry_point();
}
inline void call_contract_operation::_internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entry_point_ = value;
}
inline void call_contract_operation::set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entry_point(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.call_contract_operation.entry_point)
}

// bytes args = 3;
inline void call_contract_operation::clear_args() {
  args_.ClearToEmpty();
}
inline const std::string& call_contract_operation::args() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.call_contract_operation.args)
  return _internal_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void call_contract_operation::set_args(ArgT0&& arg0, ArgT... args) {
 
 args_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.call_contract_operation.args)
}
inline std::string* call_contract_operation::mutable_args() {
  std::string* _s = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.call_contract_operation.args)
  return _s;
}
inline const std::string& call_contract_operation::_internal_args() const {
  return args_.Get();
}
inline void call_contract_operation::_internal_set_args(const std::string& value) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* call_contract_operation::_internal_mutable_args() {
  
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* call_contract_operation::release_args() {
  // @@protoc_insertion_point(field_release:koinos.protocol.call_contract_operation.args)
  return args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void call_contract_operation::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.call_contract_operation.args)
}

// -------------------------------------------------------------------

// set_system_call_operation

// uint32 call_id = 1;
inline void set_system_call_operation::clear_call_id() {
  call_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 set_system_call_operation::_internal_call_id() const {
  return call_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 set_system_call_operation::call_id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.set_system_call_operation.call_id)
  return _internal_call_id();
}
inline void set_system_call_operation::_internal_set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  call_id_ = value;
}
inline void set_system_call_operation::set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_call_id(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.set_system_call_operation.call_id)
}

// .koinos.protocol.system_call_target target = 2;
inline bool set_system_call_operation::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool set_system_call_operation::has_target() const {
  return _internal_has_target();
}
inline void set_system_call_operation::clear_target() {
  if (GetArenaForAllocation() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::koinos::protocol::system_call_target& set_system_call_operation::_internal_target() const {
  const ::koinos::protocol::system_call_target* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::system_call_target&>(
      ::koinos::protocol::_system_call_target_default_instance_);
}
inline const ::koinos::protocol::system_call_target& set_system_call_operation::target() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.set_system_call_operation.target)
  return _internal_target();
}
inline void set_system_call_operation::unsafe_arena_set_allocated_target(
    ::koinos::protocol::system_call_target* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.set_system_call_operation.target)
}
inline ::koinos::protocol::system_call_target* set_system_call_operation::release_target() {
  
  ::koinos::protocol::system_call_target* temp = target_;
  target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::system_call_target* set_system_call_operation::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:koinos.protocol.set_system_call_operation.target)
  
  ::koinos::protocol::system_call_target* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::koinos::protocol::system_call_target* set_system_call_operation::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::system_call_target>(GetArenaForAllocation());
    target_ = p;
  }
  return target_;
}
inline ::koinos::protocol::system_call_target* set_system_call_operation::mutable_target() {
  ::koinos::protocol::system_call_target* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.set_system_call_operation.target)
  return _msg;
}
inline void set_system_call_operation::set_allocated_target(::koinos::protocol::system_call_target* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::protocol::system_call_target>::GetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.set_system_call_operation.target)
}

// -------------------------------------------------------------------

// set_system_contract_operation

// bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
inline void set_system_contract_operation::clear_contract_id() {
  contract_id_.ClearToEmpty();
}
inline const std::string& set_system_contract_operation::contract_id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.set_system_contract_operation.contract_id)
  return _internal_contract_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set_system_contract_operation::set_contract_id(ArgT0&& arg0, ArgT... args) {
 
 contract_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.set_system_contract_operation.contract_id)
}
inline std::string* set_system_contract_operation::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.set_system_contract_operation.contract_id)
  return _s;
}
inline const std::string& set_system_contract_operation::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void set_system_contract_operation::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* set_system_contract_operation::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* set_system_contract_operation::release_contract_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.set_system_contract_operation.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void set_system_contract_operation::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.set_system_contract_operation.contract_id)
}

// bool system_contract = 2;
inline void set_system_contract_operation::clear_system_contract() {
  system_contract_ = false;
}
inline bool set_system_contract_operation::_internal_system_contract() const {
  return system_contract_;
}
inline bool set_system_contract_operation::system_contract() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.set_system_contract_operation.system_contract)
  return _internal_system_contract();
}
inline void set_system_contract_operation::_internal_set_system_contract(bool value) {
  
  system_contract_ = value;
}
inline void set_system_contract_operation::set_system_contract(bool value) {
  _internal_set_system_contract(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.set_system_contract_operation.system_contract)
}

// -------------------------------------------------------------------

// operation

// .koinos.protocol.upload_contract_operation upload_contract = 1;
inline bool operation::_internal_has_upload_contract() const {
  return op_case() == kUploadContract;
}
inline bool operation::has_upload_contract() const {
  return _internal_has_upload_contract();
}
inline void operation::set_has_upload_contract() {
  _oneof_case_[0] = kUploadContract;
}
inline void operation::clear_upload_contract() {
  if (_internal_has_upload_contract()) {
    if (GetArenaForAllocation() == nullptr) {
      delete op_.upload_contract_;
    }
    clear_has_op();
  }
}
inline ::koinos::protocol::upload_contract_operation* operation::release_upload_contract() {
  // @@protoc_insertion_point(field_release:koinos.protocol.operation.upload_contract)
  if (_internal_has_upload_contract()) {
    clear_has_op();
      ::koinos::protocol::upload_contract_operation* temp = op_.upload_contract_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.upload_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::upload_contract_operation& operation::_internal_upload_contract() const {
  return _internal_has_upload_contract()
      ? *op_.upload_contract_
      : reinterpret_cast< ::koinos::protocol::upload_contract_operation&>(::koinos::protocol::_upload_contract_operation_default_instance_);
}
inline const ::koinos::protocol::upload_contract_operation& operation::upload_contract() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.operation.upload_contract)
  return _internal_upload_contract();
}
inline ::koinos::protocol::upload_contract_operation* operation::unsafe_arena_release_upload_contract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.operation.upload_contract)
  if (_internal_has_upload_contract()) {
    clear_has_op();
    ::koinos::protocol::upload_contract_operation* temp = op_.upload_contract_;
    op_.upload_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void operation::unsafe_arena_set_allocated_upload_contract(::koinos::protocol::upload_contract_operation* upload_contract) {
  clear_op();
  if (upload_contract) {
    set_has_upload_contract();
    op_.upload_contract_ = upload_contract;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.operation.upload_contract)
}
inline ::koinos::protocol::upload_contract_operation* operation::_internal_mutable_upload_contract() {
  if (!_internal_has_upload_contract()) {
    clear_op();
    set_has_upload_contract();
    op_.upload_contract_ = CreateMaybeMessage< ::koinos::protocol::upload_contract_operation >(GetArenaForAllocation());
  }
  return op_.upload_contract_;
}
inline ::koinos::protocol::upload_contract_operation* operation::mutable_upload_contract() {
  ::koinos::protocol::upload_contract_operation* _msg = _internal_mutable_upload_contract();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.operation.upload_contract)
  return _msg;
}

// .koinos.protocol.call_contract_operation call_contract = 2;
inline bool operation::_internal_has_call_contract() const {
  return op_case() == kCallContract;
}
inline bool operation::has_call_contract() const {
  return _internal_has_call_contract();
}
inline void operation::set_has_call_contract() {
  _oneof_case_[0] = kCallContract;
}
inline void operation::clear_call_contract() {
  if (_internal_has_call_contract()) {
    if (GetArenaForAllocation() == nullptr) {
      delete op_.call_contract_;
    }
    clear_has_op();
  }
}
inline ::koinos::protocol::call_contract_operation* operation::release_call_contract() {
  // @@protoc_insertion_point(field_release:koinos.protocol.operation.call_contract)
  if (_internal_has_call_contract()) {
    clear_has_op();
      ::koinos::protocol::call_contract_operation* temp = op_.call_contract_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.call_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::call_contract_operation& operation::_internal_call_contract() const {
  return _internal_has_call_contract()
      ? *op_.call_contract_
      : reinterpret_cast< ::koinos::protocol::call_contract_operation&>(::koinos::protocol::_call_contract_operation_default_instance_);
}
inline const ::koinos::protocol::call_contract_operation& operation::call_contract() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.operation.call_contract)
  return _internal_call_contract();
}
inline ::koinos::protocol::call_contract_operation* operation::unsafe_arena_release_call_contract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.operation.call_contract)
  if (_internal_has_call_contract()) {
    clear_has_op();
    ::koinos::protocol::call_contract_operation* temp = op_.call_contract_;
    op_.call_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void operation::unsafe_arena_set_allocated_call_contract(::koinos::protocol::call_contract_operation* call_contract) {
  clear_op();
  if (call_contract) {
    set_has_call_contract();
    op_.call_contract_ = call_contract;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.operation.call_contract)
}
inline ::koinos::protocol::call_contract_operation* operation::_internal_mutable_call_contract() {
  if (!_internal_has_call_contract()) {
    clear_op();
    set_has_call_contract();
    op_.call_contract_ = CreateMaybeMessage< ::koinos::protocol::call_contract_operation >(GetArenaForAllocation());
  }
  return op_.call_contract_;
}
inline ::koinos::protocol::call_contract_operation* operation::mutable_call_contract() {
  ::koinos::protocol::call_contract_operation* _msg = _internal_mutable_call_contract();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.operation.call_contract)
  return _msg;
}

// .koinos.protocol.set_system_call_operation set_system_call = 3;
inline bool operation::_internal_has_set_system_call() const {
  return op_case() == kSetSystemCall;
}
inline bool operation::has_set_system_call() const {
  return _internal_has_set_system_call();
}
inline void operation::set_has_set_system_call() {
  _oneof_case_[0] = kSetSystemCall;
}
inline void operation::clear_set_system_call() {
  if (_internal_has_set_system_call()) {
    if (GetArenaForAllocation() == nullptr) {
      delete op_.set_system_call_;
    }
    clear_has_op();
  }
}
inline ::koinos::protocol::set_system_call_operation* operation::release_set_system_call() {
  // @@protoc_insertion_point(field_release:koinos.protocol.operation.set_system_call)
  if (_internal_has_set_system_call()) {
    clear_has_op();
      ::koinos::protocol::set_system_call_operation* temp = op_.set_system_call_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.set_system_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::set_system_call_operation& operation::_internal_set_system_call() const {
  return _internal_has_set_system_call()
      ? *op_.set_system_call_
      : reinterpret_cast< ::koinos::protocol::set_system_call_operation&>(::koinos::protocol::_set_system_call_operation_default_instance_);
}
inline const ::koinos::protocol::set_system_call_operation& operation::set_system_call() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.operation.set_system_call)
  return _internal_set_system_call();
}
inline ::koinos::protocol::set_system_call_operation* operation::unsafe_arena_release_set_system_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.operation.set_system_call)
  if (_internal_has_set_system_call()) {
    clear_has_op();
    ::koinos::protocol::set_system_call_operation* temp = op_.set_system_call_;
    op_.set_system_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void operation::unsafe_arena_set_allocated_set_system_call(::koinos::protocol::set_system_call_operation* set_system_call) {
  clear_op();
  if (set_system_call) {
    set_has_set_system_call();
    op_.set_system_call_ = set_system_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.operation.set_system_call)
}
inline ::koinos::protocol::set_system_call_operation* operation::_internal_mutable_set_system_call() {
  if (!_internal_has_set_system_call()) {
    clear_op();
    set_has_set_system_call();
    op_.set_system_call_ = CreateMaybeMessage< ::koinos::protocol::set_system_call_operation >(GetArenaForAllocation());
  }
  return op_.set_system_call_;
}
inline ::koinos::protocol::set_system_call_operation* operation::mutable_set_system_call() {
  ::koinos::protocol::set_system_call_operation* _msg = _internal_mutable_set_system_call();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.operation.set_system_call)
  return _msg;
}

// .koinos.protocol.set_system_contract_operation set_system_contract = 4;
inline bool operation::_internal_has_set_system_contract() const {
  return op_case() == kSetSystemContract;
}
inline bool operation::has_set_system_contract() const {
  return _internal_has_set_system_contract();
}
inline void operation::set_has_set_system_contract() {
  _oneof_case_[0] = kSetSystemContract;
}
inline void operation::clear_set_system_contract() {
  if (_internal_has_set_system_contract()) {
    if (GetArenaForAllocation() == nullptr) {
      delete op_.set_system_contract_;
    }
    clear_has_op();
  }
}
inline ::koinos::protocol::set_system_contract_operation* operation::release_set_system_contract() {
  // @@protoc_insertion_point(field_release:koinos.protocol.operation.set_system_contract)
  if (_internal_has_set_system_contract()) {
    clear_has_op();
      ::koinos::protocol::set_system_contract_operation* temp = op_.set_system_contract_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.set_system_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::set_system_contract_operation& operation::_internal_set_system_contract() const {
  return _internal_has_set_system_contract()
      ? *op_.set_system_contract_
      : reinterpret_cast< ::koinos::protocol::set_system_contract_operation&>(::koinos::protocol::_set_system_contract_operation_default_instance_);
}
inline const ::koinos::protocol::set_system_contract_operation& operation::set_system_contract() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.operation.set_system_contract)
  return _internal_set_system_contract();
}
inline ::koinos::protocol::set_system_contract_operation* operation::unsafe_arena_release_set_system_contract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.operation.set_system_contract)
  if (_internal_has_set_system_contract()) {
    clear_has_op();
    ::koinos::protocol::set_system_contract_operation* temp = op_.set_system_contract_;
    op_.set_system_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void operation::unsafe_arena_set_allocated_set_system_contract(::koinos::protocol::set_system_contract_operation* set_system_contract) {
  clear_op();
  if (set_system_contract) {
    set_has_set_system_contract();
    op_.set_system_contract_ = set_system_contract;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.operation.set_system_contract)
}
inline ::koinos::protocol::set_system_contract_operation* operation::_internal_mutable_set_system_contract() {
  if (!_internal_has_set_system_contract()) {
    clear_op();
    set_has_set_system_contract();
    op_.set_system_contract_ = CreateMaybeMessage< ::koinos::protocol::set_system_contract_operation >(GetArenaForAllocation());
  }
  return op_.set_system_contract_;
}
inline ::koinos::protocol::set_system_contract_operation* operation::mutable_set_system_contract() {
  ::koinos::protocol::set_system_contract_operation* _msg = _internal_mutable_set_system_contract();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.operation.set_system_contract)
  return _msg;
}

inline bool operation::has_op() const {
  return op_case() != OP_NOT_SET;
}
inline void operation::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
inline operation::OpCase operation::op_case() const {
  return operation::OpCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// transaction_header

// bytes chain_id = 1;
inline void transaction_header::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& transaction_header::chain_id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_header.chain_id)
  return _internal_chain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transaction_header::set_chain_id(ArgT0&& arg0, ArgT... args) {
 
 chain_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_header.chain_id)
}
inline std::string* transaction_header::mutable_chain_id() {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_header.chain_id)
  return _s;
}
inline const std::string& transaction_header::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void transaction_header::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transaction_header::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transaction_header::release_chain_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction_header.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transaction_header::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction_header.chain_id)
}

// uint64 rc_limit = 2 [jstype = JS_STRING];
inline void transaction_header::clear_rc_limit() {
  rc_limit_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_header::_internal_rc_limit() const {
  return rc_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_header::rc_limit() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_header.rc_limit)
  return _internal_rc_limit();
}
inline void transaction_header::_internal_set_rc_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rc_limit_ = value;
}
inline void transaction_header::set_rc_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rc_limit(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_header.rc_limit)
}

// bytes nonce = 3;
inline void transaction_header::clear_nonce() {
  nonce_.ClearToEmpty();
}
inline const std::string& transaction_header::nonce() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_header.nonce)
  return _internal_nonce();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transaction_header::set_nonce(ArgT0&& arg0, ArgT... args) {
 
 nonce_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_header.nonce)
}
inline std::string* transaction_header::mutable_nonce() {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_header.nonce)
  return _s;
}
inline const std::string& transaction_header::_internal_nonce() const {
  return nonce_.Get();
}
inline void transaction_header::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transaction_header::_internal_mutable_nonce() {
  
  return nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transaction_header::release_nonce() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction_header.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transaction_header::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction_header.nonce)
}

// bytes operation_merkle_root = 4;
inline void transaction_header::clear_operation_merkle_root() {
  operation_merkle_root_.ClearToEmpty();
}
inline const std::string& transaction_header::operation_merkle_root() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_header.operation_merkle_root)
  return _internal_operation_merkle_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transaction_header::set_operation_merkle_root(ArgT0&& arg0, ArgT... args) {
 
 operation_merkle_root_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_header.operation_merkle_root)
}
inline std::string* transaction_header::mutable_operation_merkle_root() {
  std::string* _s = _internal_mutable_operation_merkle_root();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_header.operation_merkle_root)
  return _s;
}
inline const std::string& transaction_header::_internal_operation_merkle_root() const {
  return operation_merkle_root_.Get();
}
inline void transaction_header::_internal_set_operation_merkle_root(const std::string& value) {
  
  operation_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transaction_header::_internal_mutable_operation_merkle_root() {
  
  return operation_merkle_root_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transaction_header::release_operation_merkle_root() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction_header.operation_merkle_root)
  return operation_merkle_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transaction_header::set_allocated_operation_merkle_root(std::string* operation_merkle_root) {
  if (operation_merkle_root != nullptr) {
    
  } else {
    
  }
  operation_merkle_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation_merkle_root,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction_header.operation_merkle_root)
}

// bytes payer = 5 [(.koinos.btype) = ADDRESS];
inline void transaction_header::clear_payer() {
  payer_.ClearToEmpty();
}
inline const std::string& transaction_header::payer() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_header.payer)
  return _internal_payer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transaction_header::set_payer(ArgT0&& arg0, ArgT... args) {
 
 payer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_header.payer)
}
inline std::string* transaction_header::mutable_payer() {
  std::string* _s = _internal_mutable_payer();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_header.payer)
  return _s;
}
inline const std::string& transaction_header::_internal_payer() const {
  return payer_.Get();
}
inline void transaction_header::_internal_set_payer(const std::string& value) {
  
  payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transaction_header::_internal_mutable_payer() {
  
  return payer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transaction_header::release_payer() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction_header.payer)
  return payer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transaction_header::set_allocated_payer(std::string* payer) {
  if (payer != nullptr) {
    
  } else {
    
  }
  payer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction_header.payer)
}

// bytes payee = 6 [(.koinos.btype) = ADDRESS];
inline void transaction_header::clear_payee() {
  payee_.ClearToEmpty();
}
inline const std::string& transaction_header::payee() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_header.payee)
  return _internal_payee();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transaction_header::set_payee(ArgT0&& arg0, ArgT... args) {
 
 payee_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_header.payee)
}
inline std::string* transaction_header::mutable_payee() {
  std::string* _s = _internal_mutable_payee();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_header.payee)
  return _s;
}
inline const std::string& transaction_header::_internal_payee() const {
  return payee_.Get();
}
inline void transaction_header::_internal_set_payee(const std::string& value) {
  
  payee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transaction_header::_internal_mutable_payee() {
  
  return payee_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transaction_header::release_payee() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction_header.payee)
  return payee_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transaction_header::set_allocated_payee(std::string* payee) {
  if (payee != nullptr) {
    
  } else {
    
  }
  payee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payee,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction_header.payee)
}

// -------------------------------------------------------------------

// transaction

// bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
inline void transaction::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& transaction::id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transaction::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction.id)
}
inline std::string* transaction::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction.id)
  return _s;
}
inline const std::string& transaction::_internal_id() const {
  return id_.Get();
}
inline void transaction::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transaction::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transaction::release_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transaction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction.id)
}

// .koinos.protocol.transaction_header header = 2;
inline bool transaction::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool transaction::has_header() const {
  return _internal_has_header();
}
inline void transaction::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::koinos::protocol::transaction_header& transaction::_internal_header() const {
  const ::koinos::protocol::transaction_header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::transaction_header&>(
      ::koinos::protocol::_transaction_header_default_instance_);
}
inline const ::koinos::protocol::transaction_header& transaction::header() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction.header)
  return _internal_header();
}
inline void transaction::unsafe_arena_set_allocated_header(
    ::koinos::protocol::transaction_header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.transaction.header)
}
inline ::koinos::protocol::transaction_header* transaction::release_header() {
  
  ::koinos::protocol::transaction_header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::transaction_header* transaction::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction.header)
  
  ::koinos::protocol::transaction_header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::koinos::protocol::transaction_header* transaction::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::transaction_header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::koinos::protocol::transaction_header* transaction::mutable_header() {
  ::koinos::protocol::transaction_header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction.header)
  return _msg;
}
inline void transaction::set_allocated_header(::koinos::protocol::transaction_header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::protocol::transaction_header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction.header)
}

// repeated .koinos.protocol.operation operations = 3;
inline int transaction::_internal_operations_size() const {
  return operations_.size();
}
inline int transaction::operations_size() const {
  return _internal_operations_size();
}
inline void transaction::clear_operations() {
  operations_.Clear();
}
inline ::koinos::protocol::operation* transaction::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::operation >*
transaction::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.transaction.operations)
  return &operations_;
}
inline const ::koinos::protocol::operation& transaction::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::koinos::protocol::operation& transaction::operations(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction.operations)
  return _internal_operations(index);
}
inline ::koinos::protocol::operation* transaction::_internal_add_operations() {
  return operations_.Add();
}
inline ::koinos::protocol::operation* transaction::add_operations() {
  ::koinos::protocol::operation* _add = _internal_add_operations();
  // @@protoc_insertion_point(field_add:koinos.protocol.transaction.operations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::operation >&
transaction::operations() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.transaction.operations)
  return operations_;
}

// repeated bytes signatures = 4;
inline int transaction::_internal_signatures_size() const {
  return signatures_.size();
}
inline int transaction::signatures_size() const {
  return _internal_signatures_size();
}
inline void transaction::clear_signatures() {
  signatures_.Clear();
}
inline std::string* transaction::add_signatures() {
  std::string* _s = _internal_add_signatures();
  // @@protoc_insertion_point(field_add_mutable:koinos.protocol.transaction.signatures)
  return _s;
}
inline const std::string& transaction::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const std::string& transaction::signatures(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction.signatures)
  return _internal_signatures(index);
}
inline std::string* transaction::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction.signatures)
  return signatures_.Mutable(index);
}
inline void transaction::set_signatures(int index, const std::string& value) {
  signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction.signatures)
}
inline void transaction::set_signatures(int index, std::string&& value) {
  signatures_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction.signatures)
}
inline void transaction::set_signatures(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signatures_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:koinos.protocol.transaction.signatures)
}
inline void transaction::set_signatures(int index, const void* value, size_t size) {
  signatures_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.transaction.signatures)
}
inline std::string* transaction::_internal_add_signatures() {
  return signatures_.Add();
}
inline void transaction::add_signatures(const std::string& value) {
  signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:koinos.protocol.transaction.signatures)
}
inline void transaction::add_signatures(std::string&& value) {
  signatures_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:koinos.protocol.transaction.signatures)
}
inline void transaction::add_signatures(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signatures_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:koinos.protocol.transaction.signatures)
}
inline void transaction::add_signatures(const void* value, size_t size) {
  signatures_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:koinos.protocol.transaction.signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
transaction::signatures() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.transaction.signatures)
  return signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
transaction::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.transaction.signatures)
  return &signatures_;
}

// -------------------------------------------------------------------

// transaction_receipt

// bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
inline void transaction_receipt::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& transaction_receipt::id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_receipt.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transaction_receipt::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_receipt.id)
}
inline std::string* transaction_receipt::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_receipt.id)
  return _s;
}
inline const std::string& transaction_receipt::_internal_id() const {
  return id_.Get();
}
inline void transaction_receipt::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transaction_receipt::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transaction_receipt::release_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction_receipt.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transaction_receipt::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction_receipt.id)
}

// bytes payer = 2 [(.koinos.btype) = ADDRESS];
inline void transaction_receipt::clear_payer() {
  payer_.ClearToEmpty();
}
inline const std::string& transaction_receipt::payer() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_receipt.payer)
  return _internal_payer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transaction_receipt::set_payer(ArgT0&& arg0, ArgT... args) {
 
 payer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_receipt.payer)
}
inline std::string* transaction_receipt::mutable_payer() {
  std::string* _s = _internal_mutable_payer();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_receipt.payer)
  return _s;
}
inline const std::string& transaction_receipt::_internal_payer() const {
  return payer_.Get();
}
inline void transaction_receipt::_internal_set_payer(const std::string& value) {
  
  payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transaction_receipt::_internal_mutable_payer() {
  
  return payer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transaction_receipt::release_payer() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction_receipt.payer)
  return payer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transaction_receipt::set_allocated_payer(std::string* payer) {
  if (payer != nullptr) {
    
  } else {
    
  }
  payer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction_receipt.payer)
}

// uint64 max_payer_rc = 3 [jstype = JS_STRING];
inline void transaction_receipt::clear_max_payer_rc() {
  max_payer_rc_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_receipt::_internal_max_payer_rc() const {
  return max_payer_rc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_receipt::max_payer_rc() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_receipt.max_payer_rc)
  return _internal_max_payer_rc();
}
inline void transaction_receipt::_internal_set_max_payer_rc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_payer_rc_ = value;
}
inline void transaction_receipt::set_max_payer_rc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_payer_rc(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_receipt.max_payer_rc)
}

// uint64 rc_limit = 4 [jstype = JS_STRING];
inline void transaction_receipt::clear_rc_limit() {
  rc_limit_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_receipt::_internal_rc_limit() const {
  return rc_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_receipt::rc_limit() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_receipt.rc_limit)
  return _internal_rc_limit();
}
inline void transaction_receipt::_internal_set_rc_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rc_limit_ = value;
}
inline void transaction_receipt::set_rc_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rc_limit(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_receipt.rc_limit)
}

// uint64 rc_used = 5 [jstype = JS_STRING];
inline void transaction_receipt::clear_rc_used() {
  rc_used_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_receipt::_internal_rc_used() const {
  return rc_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_receipt::rc_used() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_receipt.rc_used)
  return _internal_rc_used();
}
inline void transaction_receipt::_internal_set_rc_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rc_used_ = value;
}
inline void transaction_receipt::set_rc_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rc_used(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_receipt.rc_used)
}

// uint64 disk_storage_used = 6 [jstype = JS_STRING];
inline void transaction_receipt::clear_disk_storage_used() {
  disk_storage_used_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_receipt::_internal_disk_storage_used() const {
  return disk_storage_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_receipt::disk_storage_used() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_receipt.disk_storage_used)
  return _internal_disk_storage_used();
}
inline void transaction_receipt::_internal_set_disk_storage_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  disk_storage_used_ = value;
}
inline void transaction_receipt::set_disk_storage_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_disk_storage_used(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_receipt.disk_storage_used)
}

// uint64 network_bandwidth_used = 7 [jstype = JS_STRING];
inline void transaction_receipt::clear_network_bandwidth_used() {
  network_bandwidth_used_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_receipt::_internal_network_bandwidth_used() const {
  return network_bandwidth_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_receipt::network_bandwidth_used() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_receipt.network_bandwidth_used)
  return _internal_network_bandwidth_used();
}
inline void transaction_receipt::_internal_set_network_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  network_bandwidth_used_ = value;
}
inline void transaction_receipt::set_network_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_network_bandwidth_used(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_receipt.network_bandwidth_used)
}

// uint64 compute_bandwidth_used = 8 [jstype = JS_STRING];
inline void transaction_receipt::clear_compute_bandwidth_used() {
  compute_bandwidth_used_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_receipt::_internal_compute_bandwidth_used() const {
  return compute_bandwidth_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_receipt::compute_bandwidth_used() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_receipt.compute_bandwidth_used)
  return _internal_compute_bandwidth_used();
}
inline void transaction_receipt::_internal_set_compute_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  compute_bandwidth_used_ = value;
}
inline void transaction_receipt::set_compute_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_compute_bandwidth_used(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_receipt.compute_bandwidth_used)
}

// bool reverted = 9;
inline void transaction_receipt::clear_reverted() {
  reverted_ = false;
}
inline bool transaction_receipt::_internal_reverted() const {
  return reverted_;
}
inline bool transaction_receipt::reverted() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_receipt.reverted)
  return _internal_reverted();
}
inline void transaction_receipt::_internal_set_reverted(bool value) {
  
  reverted_ = value;
}
inline void transaction_receipt::set_reverted(bool value) {
  _internal_set_reverted(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_receipt.reverted)
}

// repeated .koinos.protocol.event_data events = 10;
inline int transaction_receipt::_internal_events_size() const {
  return events_.size();
}
inline int transaction_receipt::events_size() const {
  return _internal_events_size();
}
inline void transaction_receipt::clear_events() {
  events_.Clear();
}
inline ::koinos::protocol::event_data* transaction_receipt::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_receipt.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::event_data >*
transaction_receipt::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.transaction_receipt.events)
  return &events_;
}
inline const ::koinos::protocol::event_data& transaction_receipt::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::koinos::protocol::event_data& transaction_receipt::events(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_receipt.events)
  return _internal_events(index);
}
inline ::koinos::protocol::event_data* transaction_receipt::_internal_add_events() {
  return events_.Add();
}
inline ::koinos::protocol::event_data* transaction_receipt::add_events() {
  ::koinos::protocol::event_data* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:koinos.protocol.transaction_receipt.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::event_data >&
transaction_receipt::events() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.transaction_receipt.events)
  return events_;
}

// repeated string logs = 11;
inline int transaction_receipt::_internal_logs_size() const {
  return logs_.size();
}
inline int transaction_receipt::logs_size() const {
  return _internal_logs_size();
}
inline void transaction_receipt::clear_logs() {
  logs_.Clear();
}
inline std::string* transaction_receipt::add_logs() {
  std::string* _s = _internal_add_logs();
  // @@protoc_insertion_point(field_add_mutable:koinos.protocol.transaction_receipt.logs)
  return _s;
}
inline const std::string& transaction_receipt::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const std::string& transaction_receipt::logs(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_receipt.logs)
  return _internal_logs(index);
}
inline std::string* transaction_receipt::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_receipt.logs)
  return logs_.Mutable(index);
}
inline void transaction_receipt::set_logs(int index, const std::string& value) {
  logs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_receipt.logs)
}
inline void transaction_receipt::set_logs(int index, std::string&& value) {
  logs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_receipt.logs)
}
inline void transaction_receipt::set_logs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:koinos.protocol.transaction_receipt.logs)
}
inline void transaction_receipt::set_logs(int index, const char* value, size_t size) {
  logs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.transaction_receipt.logs)
}
inline std::string* transaction_receipt::_internal_add_logs() {
  return logs_.Add();
}
inline void transaction_receipt::add_logs(const std::string& value) {
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:koinos.protocol.transaction_receipt.logs)
}
inline void transaction_receipt::add_logs(std::string&& value) {
  logs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:koinos.protocol.transaction_receipt.logs)
}
inline void transaction_receipt::add_logs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:koinos.protocol.transaction_receipt.logs)
}
inline void transaction_receipt::add_logs(const char* value, size_t size) {
  logs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:koinos.protocol.transaction_receipt.logs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
transaction_receipt::logs() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.transaction_receipt.logs)
  return logs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
transaction_receipt::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.transaction_receipt.logs)
  return &logs_;
}

// repeated .koinos.protocol.state_delta_entry state_delta_entries = 12;
inline int transaction_receipt::_internal_state_delta_entries_size() const {
  return state_delta_entries_.size();
}
inline int transaction_receipt::state_delta_entries_size() const {
  return _internal_state_delta_entries_size();
}
inline void transaction_receipt::clear_state_delta_entries() {
  state_delta_entries_.Clear();
}
inline ::koinos::protocol::state_delta_entry* transaction_receipt::mutable_state_delta_entries(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_receipt.state_delta_entries)
  return state_delta_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::state_delta_entry >*
transaction_receipt::mutable_state_delta_entries() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.transaction_receipt.state_delta_entries)
  return &state_delta_entries_;
}
inline const ::koinos::protocol::state_delta_entry& transaction_receipt::_internal_state_delta_entries(int index) const {
  return state_delta_entries_.Get(index);
}
inline const ::koinos::protocol::state_delta_entry& transaction_receipt::state_delta_entries(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_receipt.state_delta_entries)
  return _internal_state_delta_entries(index);
}
inline ::koinos::protocol::state_delta_entry* transaction_receipt::_internal_add_state_delta_entries() {
  return state_delta_entries_.Add();
}
inline ::koinos::protocol::state_delta_entry* transaction_receipt::add_state_delta_entries() {
  ::koinos::protocol::state_delta_entry* _add = _internal_add_state_delta_entries();
  // @@protoc_insertion_point(field_add:koinos.protocol.transaction_receipt.state_delta_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::state_delta_entry >&
transaction_receipt::state_delta_entries() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.transaction_receipt.state_delta_entries)
  return state_delta_entries_;
}

// -------------------------------------------------------------------

// block_header

// bytes previous = 1 [(.koinos.btype) = BLOCK_ID];
inline void block_header::clear_previous() {
  previous_.ClearToEmpty();
}
inline const std::string& block_header::previous() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_header.previous)
  return _internal_previous();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void block_header::set_previous(ArgT0&& arg0, ArgT... args) {
 
 previous_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.block_header.previous)
}
inline std::string* block_header::mutable_previous() {
  std::string* _s = _internal_mutable_previous();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_header.previous)
  return _s;
}
inline const std::string& block_header::_internal_previous() const {
  return previous_.Get();
}
inline void block_header::_internal_set_previous(const std::string& value) {
  
  previous_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* block_header::_internal_mutable_previous() {
  
  return previous_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* block_header::release_previous() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block_header.previous)
  return previous_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void block_header::set_allocated_previous(std::string* previous) {
  if (previous != nullptr) {
    
  } else {
    
  }
  previous_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block_header.previous)
}

// uint64 height = 2 [jstype = JS_STRING];
inline void block_header::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_header::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_header::height() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_header.height)
  return _internal_height();
}
inline void block_header::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void block_header::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_header.height)
}

// uint64 timestamp = 3 [jstype = JS_STRING];
inline void block_header::clear_timestamp() {
  timestamp_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_header::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_header::timestamp() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_header.timestamp)
  return _internal_timestamp();
}
inline void block_header::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void block_header::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_header.timestamp)
}

// bytes previous_state_merkle_root = 4;
inline void block_header::clear_previous_state_merkle_root() {
  previous_state_merkle_root_.ClearToEmpty();
}
inline const std::string& block_header::previous_state_merkle_root() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_header.previous_state_merkle_root)
  return _internal_previous_state_merkle_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void block_header::set_previous_state_merkle_root(ArgT0&& arg0, ArgT... args) {
 
 previous_state_merkle_root_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.block_header.previous_state_merkle_root)
}
inline std::string* block_header::mutable_previous_state_merkle_root() {
  std::string* _s = _internal_mutable_previous_state_merkle_root();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_header.previous_state_merkle_root)
  return _s;
}
inline const std::string& block_header::_internal_previous_state_merkle_root() const {
  return previous_state_merkle_root_.Get();
}
inline void block_header::_internal_set_previous_state_merkle_root(const std::string& value) {
  
  previous_state_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* block_header::_internal_mutable_previous_state_merkle_root() {
  
  return previous_state_merkle_root_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* block_header::release_previous_state_merkle_root() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block_header.previous_state_merkle_root)
  return previous_state_merkle_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void block_header::set_allocated_previous_state_merkle_root(std::string* previous_state_merkle_root) {
  if (previous_state_merkle_root != nullptr) {
    
  } else {
    
  }
  previous_state_merkle_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous_state_merkle_root,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block_header.previous_state_merkle_root)
}

// bytes transaction_merkle_root = 5;
inline void block_header::clear_transaction_merkle_root() {
  transaction_merkle_root_.ClearToEmpty();
}
inline const std::string& block_header::transaction_merkle_root() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_header.transaction_merkle_root)
  return _internal_transaction_merkle_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void block_header::set_transaction_merkle_root(ArgT0&& arg0, ArgT... args) {
 
 transaction_merkle_root_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.block_header.transaction_merkle_root)
}
inline std::string* block_header::mutable_transaction_merkle_root() {
  std::string* _s = _internal_mutable_transaction_merkle_root();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_header.transaction_merkle_root)
  return _s;
}
inline const std::string& block_header::_internal_transaction_merkle_root() const {
  return transaction_merkle_root_.Get();
}
inline void block_header::_internal_set_transaction_merkle_root(const std::string& value) {
  
  transaction_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* block_header::_internal_mutable_transaction_merkle_root() {
  
  return transaction_merkle_root_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* block_header::release_transaction_merkle_root() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block_header.transaction_merkle_root)
  return transaction_merkle_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void block_header::set_allocated_transaction_merkle_root(std::string* transaction_merkle_root) {
  if (transaction_merkle_root != nullptr) {
    
  } else {
    
  }
  transaction_merkle_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_merkle_root,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block_header.transaction_merkle_root)
}

// bytes signer = 6 [(.koinos.btype) = ADDRESS];
inline void block_header::clear_signer() {
  signer_.ClearToEmpty();
}
inline const std::string& block_header::signer() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_header.signer)
  return _internal_signer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void block_header::set_signer(ArgT0&& arg0, ArgT... args) {
 
 signer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.block_header.signer)
}
inline std::string* block_header::mutable_signer() {
  std::string* _s = _internal_mutable_signer();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_header.signer)
  return _s;
}
inline const std::string& block_header::_internal_signer() const {
  return signer_.Get();
}
inline void block_header::_internal_set_signer(const std::string& value) {
  
  signer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* block_header::_internal_mutable_signer() {
  
  return signer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* block_header::release_signer() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block_header.signer)
  return signer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void block_header::set_allocated_signer(std::string* signer) {
  if (signer != nullptr) {
    
  } else {
    
  }
  signer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block_header.signer)
}

// repeated bytes approved_proposals = 7 [(.koinos.btype) = TRANSACTION_ID];
inline int block_header::_internal_approved_proposals_size() const {
  return approved_proposals_.size();
}
inline int block_header::approved_proposals_size() const {
  return _internal_approved_proposals_size();
}
inline void block_header::clear_approved_proposals() {
  approved_proposals_.Clear();
}
inline std::string* block_header::add_approved_proposals() {
  std::string* _s = _internal_add_approved_proposals();
  // @@protoc_insertion_point(field_add_mutable:koinos.protocol.block_header.approved_proposals)
  return _s;
}
inline const std::string& block_header::_internal_approved_proposals(int index) const {
  return approved_proposals_.Get(index);
}
inline const std::string& block_header::approved_proposals(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_header.approved_proposals)
  return _internal_approved_proposals(index);
}
inline std::string* block_header::mutable_approved_proposals(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_header.approved_proposals)
  return approved_proposals_.Mutable(index);
}
inline void block_header::set_approved_proposals(int index, const std::string& value) {
  approved_proposals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_header.approved_proposals)
}
inline void block_header::set_approved_proposals(int index, std::string&& value) {
  approved_proposals_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:koinos.protocol.block_header.approved_proposals)
}
inline void block_header::set_approved_proposals(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  approved_proposals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:koinos.protocol.block_header.approved_proposals)
}
inline void block_header::set_approved_proposals(int index, const void* value, size_t size) {
  approved_proposals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.block_header.approved_proposals)
}
inline std::string* block_header::_internal_add_approved_proposals() {
  return approved_proposals_.Add();
}
inline void block_header::add_approved_proposals(const std::string& value) {
  approved_proposals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:koinos.protocol.block_header.approved_proposals)
}
inline void block_header::add_approved_proposals(std::string&& value) {
  approved_proposals_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:koinos.protocol.block_header.approved_proposals)
}
inline void block_header::add_approved_proposals(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  approved_proposals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:koinos.protocol.block_header.approved_proposals)
}
inline void block_header::add_approved_proposals(const void* value, size_t size) {
  approved_proposals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:koinos.protocol.block_header.approved_proposals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
block_header::approved_proposals() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.block_header.approved_proposals)
  return approved_proposals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
block_header::mutable_approved_proposals() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.block_header.approved_proposals)
  return &approved_proposals_;
}

// -------------------------------------------------------------------

// block

// bytes id = 1 [(.koinos.btype) = BLOCK_ID];
inline void block::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& block::id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void block::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.block.id)
}
inline std::string* block::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block.id)
  return _s;
}
inline const std::string& block::_internal_id() const {
  return id_.Get();
}
inline void block::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* block::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* block::release_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void block::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block.id)
}

// .koinos.protocol.block_header header = 2;
inline bool block::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool block::has_header() const {
  return _internal_has_header();
}
inline void block::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::koinos::protocol::block_header& block::_internal_header() const {
  const ::koinos::protocol::block_header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block_header&>(
      ::koinos::protocol::_block_header_default_instance_);
}
inline const ::koinos::protocol::block_header& block::header() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block.header)
  return _internal_header();
}
inline void block::unsafe_arena_set_allocated_header(
    ::koinos::protocol::block_header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.block.header)
}
inline ::koinos::protocol::block_header* block::release_header() {
  
  ::koinos::protocol::block_header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::block_header* block::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block.header)
  
  ::koinos::protocol::block_header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block_header* block::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block_header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::koinos::protocol::block_header* block::mutable_header() {
  ::koinos::protocol::block_header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block.header)
  return _msg;
}
inline void block::set_allocated_header(::koinos::protocol::block_header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::protocol::block_header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block.header)
}

// repeated .koinos.protocol.transaction transactions = 3;
inline int block::_internal_transactions_size() const {
  return transactions_.size();
}
inline int block::transactions_size() const {
  return _internal_transactions_size();
}
inline void block::clear_transactions() {
  transactions_.Clear();
}
inline ::koinos::protocol::transaction* block::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction >*
block::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.block.transactions)
  return &transactions_;
}
inline const ::koinos::protocol::transaction& block::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::koinos::protocol::transaction& block::transactions(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block.transactions)
  return _internal_transactions(index);
}
inline ::koinos::protocol::transaction* block::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::koinos::protocol::transaction* block::add_transactions() {
  ::koinos::protocol::transaction* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:koinos.protocol.block.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction >&
block::transactions() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.block.transactions)
  return transactions_;
}

// bytes signature = 4;
inline void block::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& block::signature() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void block::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.block.signature)
}
inline std::string* block::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block.signature)
  return _s;
}
inline const std::string& block::_internal_signature() const {
  return signature_.Get();
}
inline void block::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* block::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* block::release_signature() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void block::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block.signature)
}

// -------------------------------------------------------------------

// block_receipt

// bytes id = 1 [(.koinos.btype) = BLOCK_ID];
inline void block_receipt::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& block_receipt::id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_receipt.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void block_receipt::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.block_receipt.id)
}
inline std::string* block_receipt::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_receipt.id)
  return _s;
}
inline const std::string& block_receipt::_internal_id() const {
  return id_.Get();
}
inline void block_receipt::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* block_receipt::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* block_receipt::release_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block_receipt.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void block_receipt::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block_receipt.id)
}

// uint64 height = 2 [jstype = JS_STRING];
inline void block_receipt::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::height() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_receipt.height)
  return _internal_height();
}
inline void block_receipt::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void block_receipt::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_receipt.height)
}

// uint64 disk_storage_used = 3 [jstype = JS_STRING];
inline void block_receipt::clear_disk_storage_used() {
  disk_storage_used_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::_internal_disk_storage_used() const {
  return disk_storage_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::disk_storage_used() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_receipt.disk_storage_used)
  return _internal_disk_storage_used();
}
inline void block_receipt::_internal_set_disk_storage_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  disk_storage_used_ = value;
}
inline void block_receipt::set_disk_storage_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_disk_storage_used(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_receipt.disk_storage_used)
}

// uint64 network_bandwidth_used = 4 [jstype = JS_STRING];
inline void block_receipt::clear_network_bandwidth_used() {
  network_bandwidth_used_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::_internal_network_bandwidth_used() const {
  return network_bandwidth_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::network_bandwidth_used() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_receipt.network_bandwidth_used)
  return _internal_network_bandwidth_used();
}
inline void block_receipt::_internal_set_network_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  network_bandwidth_used_ = value;
}
inline void block_receipt::set_network_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_network_bandwidth_used(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_receipt.network_bandwidth_used)
}

// uint64 compute_bandwidth_used = 5 [jstype = JS_STRING];
inline void block_receipt::clear_compute_bandwidth_used() {
  compute_bandwidth_used_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::_internal_compute_bandwidth_used() const {
  return compute_bandwidth_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::compute_bandwidth_used() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_receipt.compute_bandwidth_used)
  return _internal_compute_bandwidth_used();
}
inline void block_receipt::_internal_set_compute_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  compute_bandwidth_used_ = value;
}
inline void block_receipt::set_compute_bandwidth_used(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_compute_bandwidth_used(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_receipt.compute_bandwidth_used)
}

// bytes state_merkle_root = 6;
inline void block_receipt::clear_state_merkle_root() {
  state_merkle_root_.ClearToEmpty();
}
inline const std::string& block_receipt::state_merkle_root() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_receipt.state_merkle_root)
  return _internal_state_merkle_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void block_receipt::set_state_merkle_root(ArgT0&& arg0, ArgT... args) {
 
 state_merkle_root_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.block_receipt.state_merkle_root)
}
inline std::string* block_receipt::mutable_state_merkle_root() {
  std::string* _s = _internal_mutable_state_merkle_root();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_receipt.state_merkle_root)
  return _s;
}
inline const std::string& block_receipt::_internal_state_merkle_root() const {
  return state_merkle_root_.Get();
}
inline void block_receipt::_internal_set_state_merkle_root(const std::string& value) {
  
  state_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* block_receipt::_internal_mutable_state_merkle_root() {
  
  return state_merkle_root_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* block_receipt::release_state_merkle_root() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block_receipt.state_merkle_root)
  return state_merkle_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void block_receipt::set_allocated_state_merkle_root(std::string* state_merkle_root) {
  if (state_merkle_root != nullptr) {
    
  } else {
    
  }
  state_merkle_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_merkle_root,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block_receipt.state_merkle_root)
}

// repeated .koinos.protocol.event_data events = 7;
inline int block_receipt::_internal_events_size() const {
  return events_.size();
}
inline int block_receipt::events_size() const {
  return _internal_events_size();
}
inline void block_receipt::clear_events() {
  events_.Clear();
}
inline ::koinos::protocol::event_data* block_receipt::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_receipt.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::event_data >*
block_receipt::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.block_receipt.events)
  return &events_;
}
inline const ::koinos::protocol::event_data& block_receipt::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::koinos::protocol::event_data& block_receipt::events(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_receipt.events)
  return _internal_events(index);
}
inline ::koinos::protocol::event_data* block_receipt::_internal_add_events() {
  return events_.Add();
}
inline ::koinos::protocol::event_data* block_receipt::add_events() {
  ::koinos::protocol::event_data* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:koinos.protocol.block_receipt.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::event_data >&
block_receipt::events() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.block_receipt.events)
  return events_;
}

// repeated .koinos.protocol.transaction_receipt transaction_receipts = 8;
inline int block_receipt::_internal_transaction_receipts_size() const {
  return transaction_receipts_.size();
}
inline int block_receipt::transaction_receipts_size() const {
  return _internal_transaction_receipts_size();
}
inline void block_receipt::clear_transaction_receipts() {
  transaction_receipts_.Clear();
}
inline ::koinos::protocol::transaction_receipt* block_receipt::mutable_transaction_receipts(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_receipt.transaction_receipts)
  return transaction_receipts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction_receipt >*
block_receipt::mutable_transaction_receipts() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.block_receipt.transaction_receipts)
  return &transaction_receipts_;
}
inline const ::koinos::protocol::transaction_receipt& block_receipt::_internal_transaction_receipts(int index) const {
  return transaction_receipts_.Get(index);
}
inline const ::koinos::protocol::transaction_receipt& block_receipt::transaction_receipts(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_receipt.transaction_receipts)
  return _internal_transaction_receipts(index);
}
inline ::koinos::protocol::transaction_receipt* block_receipt::_internal_add_transaction_receipts() {
  return transaction_receipts_.Add();
}
inline ::koinos::protocol::transaction_receipt* block_receipt::add_transaction_receipts() {
  ::koinos::protocol::transaction_receipt* _add = _internal_add_transaction_receipts();
  // @@protoc_insertion_point(field_add:koinos.protocol.block_receipt.transaction_receipts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction_receipt >&
block_receipt::transaction_receipts() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.block_receipt.transaction_receipts)
  return transaction_receipts_;
}

// repeated string logs = 9;
inline int block_receipt::_internal_logs_size() const {
  return logs_.size();
}
inline int block_receipt::logs_size() const {
  return _internal_logs_size();
}
inline void block_receipt::clear_logs() {
  logs_.Clear();
}
inline std::string* block_receipt::add_logs() {
  std::string* _s = _internal_add_logs();
  // @@protoc_insertion_point(field_add_mutable:koinos.protocol.block_receipt.logs)
  return _s;
}
inline const std::string& block_receipt::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const std::string& block_receipt::logs(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_receipt.logs)
  return _internal_logs(index);
}
inline std::string* block_receipt::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_receipt.logs)
  return logs_.Mutable(index);
}
inline void block_receipt::set_logs(int index, const std::string& value) {
  logs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_receipt.logs)
}
inline void block_receipt::set_logs(int index, std::string&& value) {
  logs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:koinos.protocol.block_receipt.logs)
}
inline void block_receipt::set_logs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:koinos.protocol.block_receipt.logs)
}
inline void block_receipt::set_logs(int index, const char* value, size_t size) {
  logs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.block_receipt.logs)
}
inline std::string* block_receipt::_internal_add_logs() {
  return logs_.Add();
}
inline void block_receipt::add_logs(const std::string& value) {
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:koinos.protocol.block_receipt.logs)
}
inline void block_receipt::add_logs(std::string&& value) {
  logs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:koinos.protocol.block_receipt.logs)
}
inline void block_receipt::add_logs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:koinos.protocol.block_receipt.logs)
}
inline void block_receipt::add_logs(const char* value, size_t size) {
  logs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:koinos.protocol.block_receipt.logs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
block_receipt::logs() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.block_receipt.logs)
  return logs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
block_receipt::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.block_receipt.logs)
  return &logs_;
}

// uint64 disk_storage_charged = 10 [jstype = JS_STRING];
inline void block_receipt::clear_disk_storage_charged() {
  disk_storage_charged_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::_internal_disk_storage_charged() const {
  return disk_storage_charged_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::disk_storage_charged() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_receipt.disk_storage_charged)
  return _internal_disk_storage_charged();
}
inline void block_receipt::_internal_set_disk_storage_charged(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  disk_storage_charged_ = value;
}
inline void block_receipt::set_disk_storage_charged(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_disk_storage_charged(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_receipt.disk_storage_charged)
}

// uint64 network_bandwidth_charged = 11 [jstype = JS_STRING];
inline void block_receipt::clear_network_bandwidth_charged() {
  network_bandwidth_charged_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::_internal_network_bandwidth_charged() const {
  return network_bandwidth_charged_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::network_bandwidth_charged() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_receipt.network_bandwidth_charged)
  return _internal_network_bandwidth_charged();
}
inline void block_receipt::_internal_set_network_bandwidth_charged(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  network_bandwidth_charged_ = value;
}
inline void block_receipt::set_network_bandwidth_charged(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_network_bandwidth_charged(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_receipt.network_bandwidth_charged)
}

// uint64 compute_bandwidth_charged = 12 [jstype = JS_STRING];
inline void block_receipt::clear_compute_bandwidth_charged() {
  compute_bandwidth_charged_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::_internal_compute_bandwidth_charged() const {
  return compute_bandwidth_charged_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_receipt::compute_bandwidth_charged() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_receipt.compute_bandwidth_charged)
  return _internal_compute_bandwidth_charged();
}
inline void block_receipt::_internal_set_compute_bandwidth_charged(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  compute_bandwidth_charged_ = value;
}
inline void block_receipt::set_compute_bandwidth_charged(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_compute_bandwidth_charged(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_receipt.compute_bandwidth_charged)
}

// repeated .koinos.protocol.state_delta_entry state_delta_entries = 13;
inline int block_receipt::_internal_state_delta_entries_size() const {
  return state_delta_entries_.size();
}
inline int block_receipt::state_delta_entries_size() const {
  return _internal_state_delta_entries_size();
}
inline void block_receipt::clear_state_delta_entries() {
  state_delta_entries_.Clear();
}
inline ::koinos::protocol::state_delta_entry* block_receipt::mutable_state_delta_entries(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_receipt.state_delta_entries)
  return state_delta_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::state_delta_entry >*
block_receipt::mutable_state_delta_entries() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.block_receipt.state_delta_entries)
  return &state_delta_entries_;
}
inline const ::koinos::protocol::state_delta_entry& block_receipt::_internal_state_delta_entries(int index) const {
  return state_delta_entries_.Get(index);
}
inline const ::koinos::protocol::state_delta_entry& block_receipt::state_delta_entries(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_receipt.state_delta_entries)
  return _internal_state_delta_entries(index);
}
inline ::koinos::protocol::state_delta_entry* block_receipt::_internal_add_state_delta_entries() {
  return state_delta_entries_.Add();
}
inline ::koinos::protocol::state_delta_entry* block_receipt::add_state_delta_entries() {
  ::koinos::protocol::state_delta_entry* _add = _internal_add_state_delta_entries();
  // @@protoc_insertion_point(field_add:koinos.protocol.block_receipt.state_delta_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::state_delta_entry >&
block_receipt::state_delta_entries() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.block_receipt.state_delta_entries)
  return state_delta_entries_;
}

// -------------------------------------------------------------------

// state_delta_entry

// .koinos.protocol.object_space object_space = 1;
inline bool state_delta_entry::_internal_has_object_space() const {
  return this != internal_default_instance() && object_space_ != nullptr;
}
inline bool state_delta_entry::has_object_space() const {
  return _internal_has_object_space();
}
inline void state_delta_entry::clear_object_space() {
  if (GetArenaForAllocation() == nullptr && object_space_ != nullptr) {
    delete object_space_;
  }
  object_space_ = nullptr;
}
inline const ::koinos::protocol::object_space& state_delta_entry::_internal_object_space() const {
  const ::koinos::protocol::object_space* p = object_space_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::object_space&>(
      ::koinos::protocol::_object_space_default_instance_);
}
inline const ::koinos::protocol::object_space& state_delta_entry::object_space() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.state_delta_entry.object_space)
  return _internal_object_space();
}
inline void state_delta_entry::unsafe_arena_set_allocated_object_space(
    ::koinos::protocol::object_space* object_space) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_space_);
  }
  object_space_ = object_space;
  if (object_space) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.state_delta_entry.object_space)
}
inline ::koinos::protocol::object_space* state_delta_entry::release_object_space() {
  
  ::koinos::protocol::object_space* temp = object_space_;
  object_space_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::object_space* state_delta_entry::unsafe_arena_release_object_space() {
  // @@protoc_insertion_point(field_release:koinos.protocol.state_delta_entry.object_space)
  
  ::koinos::protocol::object_space* temp = object_space_;
  object_space_ = nullptr;
  return temp;
}
inline ::koinos::protocol::object_space* state_delta_entry::_internal_mutable_object_space() {
  
  if (object_space_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::object_space>(GetArenaForAllocation());
    object_space_ = p;
  }
  return object_space_;
}
inline ::koinos::protocol::object_space* state_delta_entry::mutable_object_space() {
  ::koinos::protocol::object_space* _msg = _internal_mutable_object_space();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.state_delta_entry.object_space)
  return _msg;
}
inline void state_delta_entry::set_allocated_object_space(::koinos::protocol::object_space* object_space) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete object_space_;
  }
  if (object_space) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::protocol::object_space>::GetOwningArena(object_space);
    if (message_arena != submessage_arena) {
      object_space = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_space, submessage_arena);
    }
    
  } else {
    
  }
  object_space_ = object_space;
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.state_delta_entry.object_space)
}

// bytes key = 2;
inline void state_delta_entry::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& state_delta_entry::key() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.state_delta_entry.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void state_delta_entry::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.state_delta_entry.key)
}
inline std::string* state_delta_entry::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.state_delta_entry.key)
  return _s;
}
inline const std::string& state_delta_entry::_internal_key() const {
  return key_.Get();
}
inline void state_delta_entry::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* state_delta_entry::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* state_delta_entry::release_key() {
  // @@protoc_insertion_point(field_release:koinos.protocol.state_delta_entry.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void state_delta_entry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.state_delta_entry.key)
}

// optional bytes value = 3;
inline bool state_delta_entry::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool state_delta_entry::has_value() const {
  return _internal_has_value();
}
inline void state_delta_entry::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& state_delta_entry::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.state_delta_entry.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void state_delta_entry::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.state_delta_entry.value)
}
inline std::string* state_delta_entry::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.state_delta_entry.value)
  return _s;
}
inline const std::string& state_delta_entry::_internal_value() const {
  return value_.Get();
}
inline void state_delta_entry::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* state_delta_entry::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* state_delta_entry::release_value() {
  // @@protoc_insertion_point(field_release:koinos.protocol.state_delta_entry.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void state_delta_entry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.state_delta_entry.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fprotocol_2fprotocol_2eproto
