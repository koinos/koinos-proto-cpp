// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/contracts/pob/pob.proto

#include "koinos/contracts/pob/pob.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace contracts {
namespace pob {
constexpr public_key_record::public_key_record(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct public_key_recordDefaultTypeInternal {
  constexpr public_key_recordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~public_key_recordDefaultTypeInternal() {}
  union {
    public_key_record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT public_key_recordDefaultTypeInternal _public_key_record_default_instance_;
constexpr metadata::metadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seed_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , difficulty_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_block_time_(uint64_t{0u})
  , target_block_interval_(uint64_t{0u}){}
struct metadataDefaultTypeInternal {
  constexpr metadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~metadataDefaultTypeInternal() {}
  union {
    metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT metadataDefaultTypeInternal _metadata_default_instance_;
constexpr signature_data::signature_data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vrf_proof_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vrf_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct signature_dataDefaultTypeInternal {
  constexpr signature_dataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~signature_dataDefaultTypeInternal() {}
  union {
    signature_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT signature_dataDefaultTypeInternal _signature_data_default_instance_;
constexpr vrf_payload::vrf_payload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seed_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_time_(uint64_t{0u}){}
struct vrf_payloadDefaultTypeInternal {
  constexpr vrf_payloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~vrf_payloadDefaultTypeInternal() {}
  union {
    vrf_payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT vrf_payloadDefaultTypeInternal _vrf_payload_default_instance_;
constexpr register_public_key_arguments::register_public_key_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct register_public_key_argumentsDefaultTypeInternal {
  constexpr register_public_key_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~register_public_key_argumentsDefaultTypeInternal() {}
  union {
    register_public_key_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT register_public_key_argumentsDefaultTypeInternal _register_public_key_arguments_default_instance_;
constexpr register_public_key_result::register_public_key_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct register_public_key_resultDefaultTypeInternal {
  constexpr register_public_key_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~register_public_key_resultDefaultTypeInternal() {}
  union {
    register_public_key_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT register_public_key_resultDefaultTypeInternal _register_public_key_result_default_instance_;
constexpr burn_arguments::burn_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : burn_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vhp_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_amount_(uint64_t{0u}){}
struct burn_argumentsDefaultTypeInternal {
  constexpr burn_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~burn_argumentsDefaultTypeInternal() {}
  union {
    burn_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT burn_argumentsDefaultTypeInternal _burn_arguments_default_instance_;
constexpr burn_result::burn_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct burn_resultDefaultTypeInternal {
  constexpr burn_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~burn_resultDefaultTypeInternal() {}
  union {
    burn_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT burn_resultDefaultTypeInternal _burn_result_default_instance_;
constexpr get_metadata_arguments::get_metadata_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_metadata_argumentsDefaultTypeInternal {
  constexpr get_metadata_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_metadata_argumentsDefaultTypeInternal() {}
  union {
    get_metadata_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_metadata_argumentsDefaultTypeInternal _get_metadata_arguments_default_instance_;
constexpr get_metadata_result::get_metadata_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metadata_(nullptr){}
struct get_metadata_resultDefaultTypeInternal {
  constexpr get_metadata_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_metadata_resultDefaultTypeInternal() {}
  union {
    get_metadata_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_metadata_resultDefaultTypeInternal _get_metadata_result_default_instance_;
constexpr register_public_key_event::register_public_key_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct register_public_key_eventDefaultTypeInternal {
  constexpr register_public_key_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~register_public_key_eventDefaultTypeInternal() {}
  union {
    register_public_key_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT register_public_key_eventDefaultTypeInternal _register_public_key_event_default_instance_;
}  // namespace pob
}  // namespace contracts
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fcontracts_2fpob_2fpob_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fcontracts_2fpob_2fpob_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fcontracts_2fpob_2fpob_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::public_key_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::public_key_record, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::metadata, seed_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::metadata, difficulty_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::metadata, last_block_time_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::metadata, target_block_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::signature_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::signature_data, vrf_proof_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::signature_data, vrf_hash_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::signature_data, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::vrf_payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::vrf_payload, seed_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::vrf_payload, block_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::register_public_key_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::register_public_key_arguments, public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::register_public_key_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::burn_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::burn_arguments, token_amount_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::burn_arguments, burn_address_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::burn_arguments, vhp_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::burn_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::get_metadata_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::get_metadata_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::get_metadata_result, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::register_public_key_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::register_public_key_event, public_key_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::pob::register_public_key_event, address_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::contracts::pob::public_key_record)},
  { 6, -1, sizeof(::koinos::contracts::pob::metadata)},
  { 15, -1, sizeof(::koinos::contracts::pob::signature_data)},
  { 23, -1, sizeof(::koinos::contracts::pob::vrf_payload)},
  { 30, -1, sizeof(::koinos::contracts::pob::register_public_key_arguments)},
  { 36, -1, sizeof(::koinos::contracts::pob::register_public_key_result)},
  { 41, -1, sizeof(::koinos::contracts::pob::burn_arguments)},
  { 49, -1, sizeof(::koinos::contracts::pob::burn_result)},
  { 54, -1, sizeof(::koinos::contracts::pob::get_metadata_arguments)},
  { 59, -1, sizeof(::koinos::contracts::pob::get_metadata_result)},
  { 65, -1, sizeof(::koinos::contracts::pob::register_public_key_event)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pob::_public_key_record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pob::_metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pob::_signature_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pob::_vrf_payload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pob::_register_public_key_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pob::_register_public_key_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pob::_burn_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pob::_burn_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pob::_get_metadata_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pob::_get_metadata_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::pob::_register_public_key_event_default_instance_),
};

const char descriptor_table_protodef_koinos_2fcontracts_2fpob_2fpob_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036koinos/contracts/pob/pob.proto\022\024koinos"
  ".contracts.pob\032\024koinos/options.proto\"-\n\021"
  "public_key_record\022\030\n\npublic_key\030\001 \001(\014B\004\200"
  "\265\030\000\"x\n\010metadata\022\022\n\004seed\030\001 \001(\014B\004\200\265\030\000\022\030\n\nd"
  "ifficulty\030\002 \001(\014B\004\200\265\030\000\022\033\n\017last_block_time"
  "\030\003 \001(\004B\0020\001\022!\n\025target_block_interval\030\004 \001("
  "\004B\0020\001\"Z\n\016signature_data\022\027\n\tvrf_proof\030\001 \001"
  "(\014B\004\200\265\030\000\022\026\n\010vrf_hash\030\002 \001(\014B\004\200\265\030\000\022\027\n\tsign"
  "ature\030\003 \001(\014B\004\200\265\030\000\"9\n\013vrf_payload\022\022\n\004seed"
  "\030\001 \001(\014B\004\200\265\030\000\022\026\n\nblock_time\030\002 \001(\004B\0020\001\"9\n\035"
  "register_public_key_arguments\022\030\n\npublic_"
  "key\030\001 \001(\014B\004\200\265\030\000\"\034\n\032register_public_key_r"
  "esult\"a\n\016burn_arguments\022\030\n\014token_amount\030"
  "\001 \001(\004B\0020\001\022\032\n\014burn_address\030\002 \001(\014B\004\200\265\030\006\022\031\n"
  "\013vhp_address\030\003 \001(\014B\004\200\265\030\006\"\r\n\013burn_result\""
  "\030\n\026get_metadata_arguments\"G\n\023get_metadat"
  "a_result\0220\n\010metadata\030\001 \001(\0132\036.koinos.cont"
  "racts.pob.metadata\"L\n\031register_public_ke"
  "y_event\022\030\n\npublic_key\030\001 \001(\014B\004\200\265\030\000\022\025\n\007add"
  "ress\030\002 \001(\014B\004\200\265\030\006B<Z:github.com/koinos/ko"
  "inos-proto-golang/koinos/contracts/pobb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_deps[1] = {
  &::descriptor_table_koinos_2foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto = {
  false, false, 846, descriptor_table_protodef_koinos_2fcontracts_2fpob_2fpob_2eproto, "koinos/contracts/pob/pob.proto", 
  &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_once, descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_deps, 1, 11,
  schemas, file_default_instances, TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto::offsets,
  file_level_metadata_koinos_2fcontracts_2fpob_2fpob_2eproto, file_level_enum_descriptors_koinos_2fcontracts_2fpob_2fpob_2eproto, file_level_service_descriptors_koinos_2fcontracts_2fpob_2fpob_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_getter() {
  return &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fcontracts_2fpob_2fpob_2eproto(&descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto);
namespace koinos {
namespace contracts {
namespace pob {

// ===================================================================

class public_key_record::_Internal {
 public:
};

public_key_record::public_key_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pob.public_key_record)
}
public_key_record::public_key_record(const public_key_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pob.public_key_record)
}

inline void public_key_record::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

public_key_record::~public_key_record() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pob.public_key_record)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void public_key_record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void public_key_record::ArenaDtor(void* object) {
  public_key_record* _this = reinterpret_cast< public_key_record* >(object);
  (void)_this;
}
void public_key_record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void public_key_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void public_key_record::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pob.public_key_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* public_key_record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key = 1 [(.koinos.btype) = BASE64];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* public_key_record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pob.public_key_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key = 1 [(.koinos.btype) = BASE64];
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pob.public_key_record)
  return target;
}

size_t public_key_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pob.public_key_record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 1 [(.koinos.btype) = BASE64];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData public_key_record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    public_key_record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*public_key_record::GetClassData() const { return &_class_data_; }

void public_key_record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<public_key_record *>(to)->MergeFrom(
      static_cast<const public_key_record &>(from));
}


void public_key_record::MergeFrom(const public_key_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pob.public_key_record)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void public_key_record::CopyFrom(const public_key_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pob.public_key_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool public_key_record::IsInitialized() const {
  return true;
}

void public_key_record::InternalSwap(public_key_record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata public_key_record::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpob_2fpob_2eproto[0]);
}

// ===================================================================

class metadata::_Internal {
 public:
};

metadata::metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pob.metadata)
}
metadata::metadata(const metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_seed().empty()) {
    seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_seed(), 
      GetArenaForAllocation());
  }
  difficulty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_difficulty().empty()) {
    difficulty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_difficulty(), 
      GetArenaForAllocation());
  }
  ::memcpy(&last_block_time_, &from.last_block_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_block_interval_) -
    reinterpret_cast<char*>(&last_block_time_)) + sizeof(target_block_interval_));
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pob.metadata)
}

inline void metadata::SharedCtor() {
seed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
difficulty_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_block_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_block_interval_) -
    reinterpret_cast<char*>(&last_block_time_)) + sizeof(target_block_interval_));
}

metadata::~metadata() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pob.metadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  seed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  difficulty_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void metadata::ArenaDtor(void* object) {
  metadata* _this = reinterpret_cast< metadata* >(object);
  (void)_this;
}
void metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pob.metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seed_.ClearToEmpty();
  difficulty_.ClearToEmpty();
  ::memset(&last_block_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_block_interval_) -
      reinterpret_cast<char*>(&last_block_time_)) + sizeof(target_block_interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes seed = 1 [(.koinos.btype) = BASE64];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_seed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes difficulty = 2 [(.koinos.btype) = BASE64];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_difficulty();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_block_time = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_block_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_block_interval = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          target_block_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pob.metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes seed = 1 [(.koinos.btype) = BASE64];
  if (!this->_internal_seed().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_seed(), target);
  }

  // bytes difficulty = 2 [(.koinos.btype) = BASE64];
  if (!this->_internal_difficulty().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_difficulty(), target);
  }

  // uint64 last_block_time = 3 [jstype = JS_STRING];
  if (this->_internal_last_block_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_block_time(), target);
  }

  // uint64 target_block_interval = 4 [jstype = JS_STRING];
  if (this->_internal_target_block_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_target_block_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pob.metadata)
  return target;
}

size_t metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pob.metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes seed = 1 [(.koinos.btype) = BASE64];
  if (!this->_internal_seed().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_seed());
  }

  // bytes difficulty = 2 [(.koinos.btype) = BASE64];
  if (!this->_internal_difficulty().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_difficulty());
  }

  // uint64 last_block_time = 3 [jstype = JS_STRING];
  if (this->_internal_last_block_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_block_time());
  }

  // uint64 target_block_interval = 4 [jstype = JS_STRING];
  if (this->_internal_target_block_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_block_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*metadata::GetClassData() const { return &_class_data_; }

void metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<metadata *>(to)->MergeFrom(
      static_cast<const metadata &>(from));
}


void metadata::MergeFrom(const metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pob.metadata)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_seed().empty()) {
    _internal_set_seed(from._internal_seed());
  }
  if (!from._internal_difficulty().empty()) {
    _internal_set_difficulty(from._internal_difficulty());
  }
  if (from._internal_last_block_time() != 0) {
    _internal_set_last_block_time(from._internal_last_block_time());
  }
  if (from._internal_target_block_interval() != 0) {
    _internal_set_target_block_interval(from._internal_target_block_interval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void metadata::CopyFrom(const metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pob.metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool metadata::IsInitialized() const {
  return true;
}

void metadata::InternalSwap(metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &seed_, GetArenaForAllocation(),
      &other->seed_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &difficulty_, GetArenaForAllocation(),
      &other->difficulty_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(metadata, target_block_interval_)
      + sizeof(metadata::target_block_interval_)
      - PROTOBUF_FIELD_OFFSET(metadata, last_block_time_)>(
          reinterpret_cast<char*>(&last_block_time_),
          reinterpret_cast<char*>(&other->last_block_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata metadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpob_2fpob_2eproto[1]);
}

// ===================================================================

class signature_data::_Internal {
 public:
};

signature_data::signature_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pob.signature_data)
}
signature_data::signature_data(const signature_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vrf_proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrf_proof().empty()) {
    vrf_proof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrf_proof(), 
      GetArenaForAllocation());
  }
  vrf_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vrf_hash().empty()) {
    vrf_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vrf_hash(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pob.signature_data)
}

inline void signature_data::SharedCtor() {
vrf_proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vrf_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

signature_data::~signature_data() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pob.signature_data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void signature_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vrf_proof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vrf_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void signature_data::ArenaDtor(void* object) {
  signature_data* _this = reinterpret_cast< signature_data* >(object);
  (void)_this;
}
void signature_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void signature_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void signature_data::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pob.signature_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vrf_proof_.ClearToEmpty();
  vrf_hash_.ClearToEmpty();
  signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* signature_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes vrf_proof = 1 [(.koinos.btype) = BASE64];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vrf_proof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes vrf_hash = 2 [(.koinos.btype) = BASE64];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vrf_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 3 [(.koinos.btype) = BASE64];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* signature_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pob.signature_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes vrf_proof = 1 [(.koinos.btype) = BASE64];
  if (!this->_internal_vrf_proof().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_vrf_proof(), target);
  }

  // bytes vrf_hash = 2 [(.koinos.btype) = BASE64];
  if (!this->_internal_vrf_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_vrf_hash(), target);
  }

  // bytes signature = 3 [(.koinos.btype) = BASE64];
  if (!this->_internal_signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pob.signature_data)
  return target;
}

size_t signature_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pob.signature_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes vrf_proof = 1 [(.koinos.btype) = BASE64];
  if (!this->_internal_vrf_proof().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vrf_proof());
  }

  // bytes vrf_hash = 2 [(.koinos.btype) = BASE64];
  if (!this->_internal_vrf_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vrf_hash());
  }

  // bytes signature = 3 [(.koinos.btype) = BASE64];
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData signature_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    signature_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*signature_data::GetClassData() const { return &_class_data_; }

void signature_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<signature_data *>(to)->MergeFrom(
      static_cast<const signature_data &>(from));
}


void signature_data::MergeFrom(const signature_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pob.signature_data)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vrf_proof().empty()) {
    _internal_set_vrf_proof(from._internal_vrf_proof());
  }
  if (!from._internal_vrf_hash().empty()) {
    _internal_set_vrf_hash(from._internal_vrf_hash());
  }
  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void signature_data::CopyFrom(const signature_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pob.signature_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signature_data::IsInitialized() const {
  return true;
}

void signature_data::InternalSwap(signature_data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrf_proof_, GetArenaForAllocation(),
      &other->vrf_proof_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vrf_hash_, GetArenaForAllocation(),
      &other->vrf_hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, GetArenaForAllocation(),
      &other->signature_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata signature_data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpob_2fpob_2eproto[2]);
}

// ===================================================================

class vrf_payload::_Internal {
 public:
};

vrf_payload::vrf_payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pob.vrf_payload)
}
vrf_payload::vrf_payload(const vrf_payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_seed().empty()) {
    seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_seed(), 
      GetArenaForAllocation());
  }
  block_time_ = from.block_time_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pob.vrf_payload)
}

inline void vrf_payload::SharedCtor() {
seed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_time_ = uint64_t{0u};
}

vrf_payload::~vrf_payload() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pob.vrf_payload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void vrf_payload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  seed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void vrf_payload::ArenaDtor(void* object) {
  vrf_payload* _this = reinterpret_cast< vrf_payload* >(object);
  (void)_this;
}
void vrf_payload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void vrf_payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void vrf_payload::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pob.vrf_payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seed_.ClearToEmpty();
  block_time_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* vrf_payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes seed = 1 [(.koinos.btype) = BASE64];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_seed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_time = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* vrf_payload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pob.vrf_payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes seed = 1 [(.koinos.btype) = BASE64];
  if (!this->_internal_seed().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_seed(), target);
  }

  // uint64 block_time = 2 [jstype = JS_STRING];
  if (this->_internal_block_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pob.vrf_payload)
  return target;
}

size_t vrf_payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pob.vrf_payload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes seed = 1 [(.koinos.btype) = BASE64];
  if (!this->_internal_seed().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_seed());
  }

  // uint64 block_time = 2 [jstype = JS_STRING];
  if (this->_internal_block_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData vrf_payload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    vrf_payload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*vrf_payload::GetClassData() const { return &_class_data_; }

void vrf_payload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<vrf_payload *>(to)->MergeFrom(
      static_cast<const vrf_payload &>(from));
}


void vrf_payload::MergeFrom(const vrf_payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pob.vrf_payload)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_seed().empty()) {
    _internal_set_seed(from._internal_seed());
  }
  if (from._internal_block_time() != 0) {
    _internal_set_block_time(from._internal_block_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void vrf_payload::CopyFrom(const vrf_payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pob.vrf_payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vrf_payload::IsInitialized() const {
  return true;
}

void vrf_payload::InternalSwap(vrf_payload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &seed_, GetArenaForAllocation(),
      &other->seed_, other->GetArenaForAllocation()
  );
  swap(block_time_, other->block_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata vrf_payload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpob_2fpob_2eproto[3]);
}

// ===================================================================

class register_public_key_arguments::_Internal {
 public:
};

register_public_key_arguments::register_public_key_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pob.register_public_key_arguments)
}
register_public_key_arguments::register_public_key_arguments(const register_public_key_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pob.register_public_key_arguments)
}

inline void register_public_key_arguments::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

register_public_key_arguments::~register_public_key_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pob.register_public_key_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void register_public_key_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void register_public_key_arguments::ArenaDtor(void* object) {
  register_public_key_arguments* _this = reinterpret_cast< register_public_key_arguments* >(object);
  (void)_this;
}
void register_public_key_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void register_public_key_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void register_public_key_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pob.register_public_key_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* register_public_key_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key = 1 [(.koinos.btype) = BASE64];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* register_public_key_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pob.register_public_key_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key = 1 [(.koinos.btype) = BASE64];
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pob.register_public_key_arguments)
  return target;
}

size_t register_public_key_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pob.register_public_key_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 1 [(.koinos.btype) = BASE64];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData register_public_key_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    register_public_key_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*register_public_key_arguments::GetClassData() const { return &_class_data_; }

void register_public_key_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<register_public_key_arguments *>(to)->MergeFrom(
      static_cast<const register_public_key_arguments &>(from));
}


void register_public_key_arguments::MergeFrom(const register_public_key_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pob.register_public_key_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void register_public_key_arguments::CopyFrom(const register_public_key_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pob.register_public_key_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_public_key_arguments::IsInitialized() const {
  return true;
}

void register_public_key_arguments::InternalSwap(register_public_key_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata register_public_key_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpob_2fpob_2eproto[4]);
}

// ===================================================================

class register_public_key_result::_Internal {
 public:
};

register_public_key_result::register_public_key_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pob.register_public_key_result)
}
register_public_key_result::register_public_key_result(const register_public_key_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pob.register_public_key_result)
}

inline void register_public_key_result::SharedCtor() {
}

register_public_key_result::~register_public_key_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pob.register_public_key_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void register_public_key_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void register_public_key_result::ArenaDtor(void* object) {
  register_public_key_result* _this = reinterpret_cast< register_public_key_result* >(object);
  (void)_this;
}
void register_public_key_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void register_public_key_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void register_public_key_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pob.register_public_key_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* register_public_key_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* register_public_key_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pob.register_public_key_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pob.register_public_key_result)
  return target;
}

size_t register_public_key_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pob.register_public_key_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData register_public_key_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    register_public_key_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*register_public_key_result::GetClassData() const { return &_class_data_; }

void register_public_key_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<register_public_key_result *>(to)->MergeFrom(
      static_cast<const register_public_key_result &>(from));
}


void register_public_key_result::MergeFrom(const register_public_key_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pob.register_public_key_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void register_public_key_result::CopyFrom(const register_public_key_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pob.register_public_key_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_public_key_result::IsInitialized() const {
  return true;
}

void register_public_key_result::InternalSwap(register_public_key_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata register_public_key_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpob_2fpob_2eproto[5]);
}

// ===================================================================

class burn_arguments::_Internal {
 public:
};

burn_arguments::burn_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pob.burn_arguments)
}
burn_arguments::burn_arguments(const burn_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  burn_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_burn_address().empty()) {
    burn_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_burn_address(), 
      GetArenaForAllocation());
  }
  vhp_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vhp_address().empty()) {
    vhp_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vhp_address(), 
      GetArenaForAllocation());
  }
  token_amount_ = from.token_amount_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pob.burn_arguments)
}

inline void burn_arguments::SharedCtor() {
burn_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vhp_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_amount_ = uint64_t{0u};
}

burn_arguments::~burn_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pob.burn_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void burn_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  burn_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vhp_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void burn_arguments::ArenaDtor(void* object) {
  burn_arguments* _this = reinterpret_cast< burn_arguments* >(object);
  (void)_this;
}
void burn_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void burn_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void burn_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pob.burn_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  burn_address_.ClearToEmpty();
  vhp_address_.ClearToEmpty();
  token_amount_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* burn_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 token_amount = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          token_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes burn_address = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_burn_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes vhp_address = 3 [(.koinos.btype) = ADDRESS];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_vhp_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* burn_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pob.burn_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 token_amount = 1 [jstype = JS_STRING];
  if (this->_internal_token_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_token_amount(), target);
  }

  // bytes burn_address = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_burn_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_burn_address(), target);
  }

  // bytes vhp_address = 3 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_vhp_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_vhp_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pob.burn_arguments)
  return target;
}

size_t burn_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pob.burn_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes burn_address = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_burn_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_burn_address());
  }

  // bytes vhp_address = 3 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_vhp_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vhp_address());
  }

  // uint64 token_amount = 1 [jstype = JS_STRING];
  if (this->_internal_token_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_token_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData burn_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    burn_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*burn_arguments::GetClassData() const { return &_class_data_; }

void burn_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<burn_arguments *>(to)->MergeFrom(
      static_cast<const burn_arguments &>(from));
}


void burn_arguments::MergeFrom(const burn_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pob.burn_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_burn_address().empty()) {
    _internal_set_burn_address(from._internal_burn_address());
  }
  if (!from._internal_vhp_address().empty()) {
    _internal_set_vhp_address(from._internal_vhp_address());
  }
  if (from._internal_token_amount() != 0) {
    _internal_set_token_amount(from._internal_token_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void burn_arguments::CopyFrom(const burn_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pob.burn_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool burn_arguments::IsInitialized() const {
  return true;
}

void burn_arguments::InternalSwap(burn_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &burn_address_, GetArenaForAllocation(),
      &other->burn_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vhp_address_, GetArenaForAllocation(),
      &other->vhp_address_, other->GetArenaForAllocation()
  );
  swap(token_amount_, other->token_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata burn_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpob_2fpob_2eproto[6]);
}

// ===================================================================

class burn_result::_Internal {
 public:
};

burn_result::burn_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pob.burn_result)
}
burn_result::burn_result(const burn_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pob.burn_result)
}

inline void burn_result::SharedCtor() {
}

burn_result::~burn_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pob.burn_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void burn_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void burn_result::ArenaDtor(void* object) {
  burn_result* _this = reinterpret_cast< burn_result* >(object);
  (void)_this;
}
void burn_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void burn_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void burn_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pob.burn_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* burn_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* burn_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pob.burn_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pob.burn_result)
  return target;
}

size_t burn_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pob.burn_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData burn_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    burn_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*burn_result::GetClassData() const { return &_class_data_; }

void burn_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<burn_result *>(to)->MergeFrom(
      static_cast<const burn_result &>(from));
}


void burn_result::MergeFrom(const burn_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pob.burn_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void burn_result::CopyFrom(const burn_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pob.burn_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool burn_result::IsInitialized() const {
  return true;
}

void burn_result::InternalSwap(burn_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata burn_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpob_2fpob_2eproto[7]);
}

// ===================================================================

class get_metadata_arguments::_Internal {
 public:
};

get_metadata_arguments::get_metadata_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pob.get_metadata_arguments)
}
get_metadata_arguments::get_metadata_arguments(const get_metadata_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pob.get_metadata_arguments)
}

inline void get_metadata_arguments::SharedCtor() {
}

get_metadata_arguments::~get_metadata_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pob.get_metadata_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_metadata_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_metadata_arguments::ArenaDtor(void* object) {
  get_metadata_arguments* _this = reinterpret_cast< get_metadata_arguments* >(object);
  (void)_this;
}
void get_metadata_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_metadata_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_metadata_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pob.get_metadata_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_metadata_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_metadata_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pob.get_metadata_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pob.get_metadata_arguments)
  return target;
}

size_t get_metadata_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pob.get_metadata_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_metadata_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_metadata_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_metadata_arguments::GetClassData() const { return &_class_data_; }

void get_metadata_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_metadata_arguments *>(to)->MergeFrom(
      static_cast<const get_metadata_arguments &>(from));
}


void get_metadata_arguments::MergeFrom(const get_metadata_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pob.get_metadata_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_metadata_arguments::CopyFrom(const get_metadata_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pob.get_metadata_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_metadata_arguments::IsInitialized() const {
  return true;
}

void get_metadata_arguments::InternalSwap(get_metadata_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_metadata_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpob_2fpob_2eproto[8]);
}

// ===================================================================

class get_metadata_result::_Internal {
 public:
  static const ::koinos::contracts::pob::metadata& metadata(const get_metadata_result* msg);
};

const ::koinos::contracts::pob::metadata&
get_metadata_result::_Internal::metadata(const get_metadata_result* msg) {
  return *msg->metadata_;
}
get_metadata_result::get_metadata_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pob.get_metadata_result)
}
get_metadata_result::get_metadata_result(const get_metadata_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::koinos::contracts::pob::metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pob.get_metadata_result)
}

inline void get_metadata_result::SharedCtor() {
metadata_ = nullptr;
}

get_metadata_result::~get_metadata_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pob.get_metadata_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_metadata_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void get_metadata_result::ArenaDtor(void* object) {
  get_metadata_result* _this = reinterpret_cast< get_metadata_result* >(object);
  (void)_this;
}
void get_metadata_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_metadata_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_metadata_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pob.get_metadata_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_metadata_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.contracts.pob.metadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_metadata_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pob.get_metadata_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.contracts.pob.metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pob.get_metadata_result)
  return target;
}

size_t get_metadata_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pob.get_metadata_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.contracts.pob.metadata metadata = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_metadata_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_metadata_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_metadata_result::GetClassData() const { return &_class_data_; }

void get_metadata_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_metadata_result *>(to)->MergeFrom(
      static_cast<const get_metadata_result &>(from));
}


void get_metadata_result::MergeFrom(const get_metadata_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pob.get_metadata_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::koinos::contracts::pob::metadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_metadata_result::CopyFrom(const get_metadata_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pob.get_metadata_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_metadata_result::IsInitialized() const {
  return true;
}

void get_metadata_result::InternalSwap(get_metadata_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_metadata_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpob_2fpob_2eproto[9]);
}

// ===================================================================

class register_public_key_event::_Internal {
 public:
};

register_public_key_event::register_public_key_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.pob.register_public_key_event)
}
register_public_key_event::register_public_key_event(const register_public_key_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.pob.register_public_key_event)
}

inline void register_public_key_event::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

register_public_key_event::~register_public_key_event() {
  // @@protoc_insertion_point(destructor:koinos.contracts.pob.register_public_key_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void register_public_key_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void register_public_key_event::ArenaDtor(void* object) {
  register_public_key_event* _this = reinterpret_cast< register_public_key_event* >(object);
  (void)_this;
}
void register_public_key_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void register_public_key_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void register_public_key_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.pob.register_public_key_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* register_public_key_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key = 1 [(.koinos.btype) = BASE64];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes address = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* register_public_key_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.pob.register_public_key_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key = 1 [(.koinos.btype) = BASE64];
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // bytes address = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.pob.register_public_key_event)
  return target;
}

size_t register_public_key_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.pob.register_public_key_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 1 [(.koinos.btype) = BASE64];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes address = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData register_public_key_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    register_public_key_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*register_public_key_event::GetClassData() const { return &_class_data_; }

void register_public_key_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<register_public_key_event *>(to)->MergeFrom(
      static_cast<const register_public_key_event &>(from));
}


void register_public_key_event::MergeFrom(const register_public_key_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.pob.register_public_key_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void register_public_key_event::CopyFrom(const register_public_key_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.pob.register_public_key_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool register_public_key_event::IsInitialized() const {
  return true;
}

void register_public_key_event::InternalSwap(register_public_key_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata register_public_key_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fpob_2fpob_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pob
}  // namespace contracts
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::contracts::pob::public_key_record* Arena::CreateMaybeMessage< ::koinos::contracts::pob::public_key_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pob::public_key_record >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::pob::metadata* Arena::CreateMaybeMessage< ::koinos::contracts::pob::metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pob::metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::pob::signature_data* Arena::CreateMaybeMessage< ::koinos::contracts::pob::signature_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pob::signature_data >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::pob::vrf_payload* Arena::CreateMaybeMessage< ::koinos::contracts::pob::vrf_payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pob::vrf_payload >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::pob::register_public_key_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::pob::register_public_key_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pob::register_public_key_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::pob::register_public_key_result* Arena::CreateMaybeMessage< ::koinos::contracts::pob::register_public_key_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pob::register_public_key_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::pob::burn_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::pob::burn_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pob::burn_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::pob::burn_result* Arena::CreateMaybeMessage< ::koinos::contracts::pob::burn_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pob::burn_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::pob::get_metadata_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::pob::get_metadata_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pob::get_metadata_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::pob::get_metadata_result* Arena::CreateMaybeMessage< ::koinos::contracts::pob::get_metadata_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pob::get_metadata_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::pob::register_public_key_event* Arena::CreateMaybeMessage< ::koinos::contracts::pob::register_public_key_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::pob::register_public_key_event >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
