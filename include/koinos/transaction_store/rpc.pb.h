// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/transaction_store/rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2ftransaction_5fstore_2frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2ftransaction_5fstore_2frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/options.pb.h"
#include "koinos/rpc.pb.h"
#include "koinos/transaction_store/transaction_store.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2ftransaction_5fstore_2frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2ftransaction_5fstore_2frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2ftransaction_5fstore_2frpc_2eproto;
namespace koinos {
namespace transaction_store {
class get_transactions_by_id_request;
struct get_transactions_by_id_requestDefaultTypeInternal;
extern get_transactions_by_id_requestDefaultTypeInternal _get_transactions_by_id_request_default_instance_;
class get_transactions_by_id_response;
struct get_transactions_by_id_responseDefaultTypeInternal;
extern get_transactions_by_id_responseDefaultTypeInternal _get_transactions_by_id_response_default_instance_;
class transaction_store_request;
struct transaction_store_requestDefaultTypeInternal;
extern transaction_store_requestDefaultTypeInternal _transaction_store_request_default_instance_;
class transaction_store_response;
struct transaction_store_responseDefaultTypeInternal;
extern transaction_store_responseDefaultTypeInternal _transaction_store_response_default_instance_;
}  // namespace transaction_store
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::transaction_store::get_transactions_by_id_request* Arena::CreateMaybeMessage<::koinos::transaction_store::get_transactions_by_id_request>(Arena*);
template<> ::koinos::transaction_store::get_transactions_by_id_response* Arena::CreateMaybeMessage<::koinos::transaction_store::get_transactions_by_id_response>(Arena*);
template<> ::koinos::transaction_store::transaction_store_request* Arena::CreateMaybeMessage<::koinos::transaction_store::transaction_store_request>(Arena*);
template<> ::koinos::transaction_store::transaction_store_response* Arena::CreateMaybeMessage<::koinos::transaction_store::transaction_store_response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace transaction_store {

// ===================================================================

class get_transactions_by_id_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.transaction_store.get_transactions_by_id_request) */ {
 public:
  inline get_transactions_by_id_request() : get_transactions_by_id_request(nullptr) {}
  ~get_transactions_by_id_request() override;
  explicit constexpr get_transactions_by_id_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_transactions_by_id_request(const get_transactions_by_id_request& from);
  get_transactions_by_id_request(get_transactions_by_id_request&& from) noexcept
    : get_transactions_by_id_request() {
    *this = ::std::move(from);
  }

  inline get_transactions_by_id_request& operator=(const get_transactions_by_id_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_transactions_by_id_request& operator=(get_transactions_by_id_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_transactions_by_id_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_transactions_by_id_request* internal_default_instance() {
    return reinterpret_cast<const get_transactions_by_id_request*>(
               &_get_transactions_by_id_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(get_transactions_by_id_request& a, get_transactions_by_id_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_transactions_by_id_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_transactions_by_id_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_transactions_by_id_request* New() const final {
    return new get_transactions_by_id_request();
  }

  get_transactions_by_id_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_transactions_by_id_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_transactions_by_id_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_transactions_by_id_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_transactions_by_id_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.transaction_store.get_transactions_by_id_request";
  }
  protected:
  explicit get_transactions_by_id_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdsFieldNumber = 1,
  };
  // repeated bytes transaction_ids = 1 [(.koinos.btype) = TRANSACTION_ID];
  int transaction_ids_size() const;
  private:
  int _internal_transaction_ids_size() const;
  public:
  void clear_transaction_ids();
  const std::string& transaction_ids(int index) const;
  std::string* mutable_transaction_ids(int index);
  void set_transaction_ids(int index, const std::string& value);
  void set_transaction_ids(int index, std::string&& value);
  void set_transaction_ids(int index, const char* value);
  void set_transaction_ids(int index, const void* value, size_t size);
  std::string* add_transaction_ids();
  void add_transaction_ids(const std::string& value);
  void add_transaction_ids(std::string&& value);
  void add_transaction_ids(const char* value);
  void add_transaction_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transaction_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transaction_ids();
  private:
  const std::string& _internal_transaction_ids(int index) const;
  std::string* _internal_add_transaction_ids();
  public:

  // @@protoc_insertion_point(class_scope:koinos.transaction_store.get_transactions_by_id_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transaction_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2ftransaction_5fstore_2frpc_2eproto;
};
// -------------------------------------------------------------------

class get_transactions_by_id_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.transaction_store.get_transactions_by_id_response) */ {
 public:
  inline get_transactions_by_id_response() : get_transactions_by_id_response(nullptr) {}
  ~get_transactions_by_id_response() override;
  explicit constexpr get_transactions_by_id_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_transactions_by_id_response(const get_transactions_by_id_response& from);
  get_transactions_by_id_response(get_transactions_by_id_response&& from) noexcept
    : get_transactions_by_id_response() {
    *this = ::std::move(from);
  }

  inline get_transactions_by_id_response& operator=(const get_transactions_by_id_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_transactions_by_id_response& operator=(get_transactions_by_id_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_transactions_by_id_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_transactions_by_id_response* internal_default_instance() {
    return reinterpret_cast<const get_transactions_by_id_response*>(
               &_get_transactions_by_id_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(get_transactions_by_id_response& a, get_transactions_by_id_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_transactions_by_id_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_transactions_by_id_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_transactions_by_id_response* New() const final {
    return new get_transactions_by_id_response();
  }

  get_transactions_by_id_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_transactions_by_id_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_transactions_by_id_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_transactions_by_id_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_transactions_by_id_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.transaction_store.get_transactions_by_id_response";
  }
  protected:
  explicit get_transactions_by_id_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 1,
  };
  // repeated .koinos.transaction_store.transaction_item transactions = 1;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::koinos::transaction_store::transaction_item* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::transaction_store::transaction_item >*
      mutable_transactions();
  private:
  const ::koinos::transaction_store::transaction_item& _internal_transactions(int index) const;
  ::koinos::transaction_store::transaction_item* _internal_add_transactions();
  public:
  const ::koinos::transaction_store::transaction_item& transactions(int index) const;
  ::koinos::transaction_store::transaction_item* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::transaction_store::transaction_item >&
      transactions() const;

  // @@protoc_insertion_point(class_scope:koinos.transaction_store.get_transactions_by_id_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::transaction_store::transaction_item > transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2ftransaction_5fstore_2frpc_2eproto;
};
// -------------------------------------------------------------------

class transaction_store_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.transaction_store.transaction_store_request) */ {
 public:
  inline transaction_store_request() : transaction_store_request(nullptr) {}
  ~transaction_store_request() override;
  explicit constexpr transaction_store_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_store_request(const transaction_store_request& from);
  transaction_store_request(transaction_store_request&& from) noexcept
    : transaction_store_request() {
    *this = ::std::move(from);
  }

  inline transaction_store_request& operator=(const transaction_store_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_store_request& operator=(transaction_store_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_store_request& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kReserved = 1,
    kGetTransactionsById = 2,
    REQUEST_NOT_SET = 0,
  };

  static inline const transaction_store_request* internal_default_instance() {
    return reinterpret_cast<const transaction_store_request*>(
               &_transaction_store_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(transaction_store_request& a, transaction_store_request& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_store_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_store_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transaction_store_request* New() const final {
    return new transaction_store_request();
  }

  transaction_store_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transaction_store_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_store_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_store_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_store_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.transaction_store.transaction_store_request";
  }
  protected:
  explicit transaction_store_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kGetTransactionsByIdFieldNumber = 2,
  };
  // .koinos.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::reserved_rpc& reserved() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::reserved_rpc* release_reserved();
  ::koinos::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::reserved_rpc* reserved);
  private:
  const ::koinos::reserved_rpc& _internal_reserved() const;
  ::koinos::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::reserved_rpc* reserved);
  ::koinos::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.transaction_store.get_transactions_by_id_request get_transactions_by_id = 2;
  bool has_get_transactions_by_id() const;
  private:
  bool _internal_has_get_transactions_by_id() const;
  public:
  void clear_get_transactions_by_id();
  const ::koinos::transaction_store::get_transactions_by_id_request& get_transactions_by_id() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::transaction_store::get_transactions_by_id_request* release_get_transactions_by_id();
  ::koinos::transaction_store::get_transactions_by_id_request* mutable_get_transactions_by_id();
  void set_allocated_get_transactions_by_id(::koinos::transaction_store::get_transactions_by_id_request* get_transactions_by_id);
  private:
  const ::koinos::transaction_store::get_transactions_by_id_request& _internal_get_transactions_by_id() const;
  ::koinos::transaction_store::get_transactions_by_id_request* _internal_mutable_get_transactions_by_id();
  public:
  void unsafe_arena_set_allocated_get_transactions_by_id(
      ::koinos::transaction_store::get_transactions_by_id_request* get_transactions_by_id);
  ::koinos::transaction_store::get_transactions_by_id_request* unsafe_arena_release_get_transactions_by_id();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:koinos.transaction_store.transaction_store_request)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_get_transactions_by_id();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestUnion {
    constexpr RequestUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::reserved_rpc* reserved_;
    ::koinos::transaction_store::get_transactions_by_id_request* get_transactions_by_id_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2ftransaction_5fstore_2frpc_2eproto;
};
// -------------------------------------------------------------------

class transaction_store_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.transaction_store.transaction_store_response) */ {
 public:
  inline transaction_store_response() : transaction_store_response(nullptr) {}
  ~transaction_store_response() override;
  explicit constexpr transaction_store_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_store_response(const transaction_store_response& from);
  transaction_store_response(transaction_store_response&& from) noexcept
    : transaction_store_response() {
    *this = ::std::move(from);
  }

  inline transaction_store_response& operator=(const transaction_store_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_store_response& operator=(transaction_store_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_store_response& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kReserved = 1,
    kError = 2,
    kGetTransactionsById = 3,
    RESPONSE_NOT_SET = 0,
  };

  static inline const transaction_store_response* internal_default_instance() {
    return reinterpret_cast<const transaction_store_response*>(
               &_transaction_store_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(transaction_store_response& a, transaction_store_response& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_store_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_store_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transaction_store_response* New() const final {
    return new transaction_store_response();
  }

  transaction_store_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transaction_store_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_store_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_store_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_store_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.transaction_store.transaction_store_response";
  }
  protected:
  explicit transaction_store_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kErrorFieldNumber = 2,
    kGetTransactionsByIdFieldNumber = 3,
  };
  // .koinos.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::reserved_rpc& reserved() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::reserved_rpc* release_reserved();
  ::koinos::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::reserved_rpc* reserved);
  private:
  const ::koinos::reserved_rpc& _internal_reserved() const;
  ::koinos::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::reserved_rpc* reserved);
  ::koinos::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.error_status error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::koinos::error_status& error() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::error_status* release_error();
  ::koinos::error_status* mutable_error();
  void set_allocated_error(::koinos::error_status* error);
  private:
  const ::koinos::error_status& _internal_error() const;
  ::koinos::error_status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::koinos::error_status* error);
  ::koinos::error_status* unsafe_arena_release_error();

  // .koinos.transaction_store.get_transactions_by_id_response get_transactions_by_id = 3;
  bool has_get_transactions_by_id() const;
  private:
  bool _internal_has_get_transactions_by_id() const;
  public:
  void clear_get_transactions_by_id();
  const ::koinos::transaction_store::get_transactions_by_id_response& get_transactions_by_id() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::transaction_store::get_transactions_by_id_response* release_get_transactions_by_id();
  ::koinos::transaction_store::get_transactions_by_id_response* mutable_get_transactions_by_id();
  void set_allocated_get_transactions_by_id(::koinos::transaction_store::get_transactions_by_id_response* get_transactions_by_id);
  private:
  const ::koinos::transaction_store::get_transactions_by_id_response& _internal_get_transactions_by_id() const;
  ::koinos::transaction_store::get_transactions_by_id_response* _internal_mutable_get_transactions_by_id();
  public:
  void unsafe_arena_set_allocated_get_transactions_by_id(
      ::koinos::transaction_store::get_transactions_by_id_response* get_transactions_by_id);
  ::koinos::transaction_store::get_transactions_by_id_response* unsafe_arena_release_get_transactions_by_id();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:koinos.transaction_store.transaction_store_response)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_error();
  void set_has_get_transactions_by_id();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResponseUnion {
    constexpr ResponseUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::reserved_rpc* reserved_;
    ::koinos::error_status* error_;
    ::koinos::transaction_store::get_transactions_by_id_response* get_transactions_by_id_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2ftransaction_5fstore_2frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// get_transactions_by_id_request

// repeated bytes transaction_ids = 1 [(.koinos.btype) = TRANSACTION_ID];
inline int get_transactions_by_id_request::_internal_transaction_ids_size() const {
  return transaction_ids_.size();
}
inline int get_transactions_by_id_request::transaction_ids_size() const {
  return _internal_transaction_ids_size();
}
inline void get_transactions_by_id_request::clear_transaction_ids() {
  transaction_ids_.Clear();
}
inline std::string* get_transactions_by_id_request::add_transaction_ids() {
  std::string* _s = _internal_add_transaction_ids();
  // @@protoc_insertion_point(field_add_mutable:koinos.transaction_store.get_transactions_by_id_request.transaction_ids)
  return _s;
}
inline const std::string& get_transactions_by_id_request::_internal_transaction_ids(int index) const {
  return transaction_ids_.Get(index);
}
inline const std::string& get_transactions_by_id_request::transaction_ids(int index) const {
  // @@protoc_insertion_point(field_get:koinos.transaction_store.get_transactions_by_id_request.transaction_ids)
  return _internal_transaction_ids(index);
}
inline std::string* get_transactions_by_id_request::mutable_transaction_ids(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.transaction_store.get_transactions_by_id_request.transaction_ids)
  return transaction_ids_.Mutable(index);
}
inline void get_transactions_by_id_request::set_transaction_ids(int index, const std::string& value) {
  transaction_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:koinos.transaction_store.get_transactions_by_id_request.transaction_ids)
}
inline void get_transactions_by_id_request::set_transaction_ids(int index, std::string&& value) {
  transaction_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:koinos.transaction_store.get_transactions_by_id_request.transaction_ids)
}
inline void get_transactions_by_id_request::set_transaction_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:koinos.transaction_store.get_transactions_by_id_request.transaction_ids)
}
inline void get_transactions_by_id_request::set_transaction_ids(int index, const void* value, size_t size) {
  transaction_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:koinos.transaction_store.get_transactions_by_id_request.transaction_ids)
}
inline std::string* get_transactions_by_id_request::_internal_add_transaction_ids() {
  return transaction_ids_.Add();
}
inline void get_transactions_by_id_request::add_transaction_ids(const std::string& value) {
  transaction_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:koinos.transaction_store.get_transactions_by_id_request.transaction_ids)
}
inline void get_transactions_by_id_request::add_transaction_ids(std::string&& value) {
  transaction_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:koinos.transaction_store.get_transactions_by_id_request.transaction_ids)
}
inline void get_transactions_by_id_request::add_transaction_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transaction_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:koinos.transaction_store.get_transactions_by_id_request.transaction_ids)
}
inline void get_transactions_by_id_request::add_transaction_ids(const void* value, size_t size) {
  transaction_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:koinos.transaction_store.get_transactions_by_id_request.transaction_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
get_transactions_by_id_request::transaction_ids() const {
  // @@protoc_insertion_point(field_list:koinos.transaction_store.get_transactions_by_id_request.transaction_ids)
  return transaction_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
get_transactions_by_id_request::mutable_transaction_ids() {
  // @@protoc_insertion_point(field_mutable_list:koinos.transaction_store.get_transactions_by_id_request.transaction_ids)
  return &transaction_ids_;
}

// -------------------------------------------------------------------

// get_transactions_by_id_response

// repeated .koinos.transaction_store.transaction_item transactions = 1;
inline int get_transactions_by_id_response::_internal_transactions_size() const {
  return transactions_.size();
}
inline int get_transactions_by_id_response::transactions_size() const {
  return _internal_transactions_size();
}
inline ::koinos::transaction_store::transaction_item* get_transactions_by_id_response::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.transaction_store.get_transactions_by_id_response.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::transaction_store::transaction_item >*
get_transactions_by_id_response::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:koinos.transaction_store.get_transactions_by_id_response.transactions)
  return &transactions_;
}
inline const ::koinos::transaction_store::transaction_item& get_transactions_by_id_response::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::koinos::transaction_store::transaction_item& get_transactions_by_id_response::transactions(int index) const {
  // @@protoc_insertion_point(field_get:koinos.transaction_store.get_transactions_by_id_response.transactions)
  return _internal_transactions(index);
}
inline ::koinos::transaction_store::transaction_item* get_transactions_by_id_response::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::koinos::transaction_store::transaction_item* get_transactions_by_id_response::add_transactions() {
  ::koinos::transaction_store::transaction_item* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:koinos.transaction_store.get_transactions_by_id_response.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::transaction_store::transaction_item >&
get_transactions_by_id_response::transactions() const {
  // @@protoc_insertion_point(field_list:koinos.transaction_store.get_transactions_by_id_response.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// transaction_store_request

// .koinos.reserved_rpc reserved = 1;
inline bool transaction_store_request::_internal_has_reserved() const {
  return request_case() == kReserved;
}
inline bool transaction_store_request::has_reserved() const {
  return _internal_has_reserved();
}
inline void transaction_store_request::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::reserved_rpc* transaction_store_request::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.transaction_store.transaction_store_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
      ::koinos::reserved_rpc* temp = request_.reserved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::reserved_rpc& transaction_store_request::_internal_reserved() const {
  return _internal_has_reserved()
      ? *request_.reserved_
      : reinterpret_cast< ::koinos::reserved_rpc&>(::koinos::_reserved_rpc_default_instance_);
}
inline const ::koinos::reserved_rpc& transaction_store_request::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.transaction_store.transaction_store_request.reserved)
  return _internal_reserved();
}
inline ::koinos::reserved_rpc* transaction_store_request::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.transaction_store.transaction_store_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
    ::koinos::reserved_rpc* temp = request_.reserved_;
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void transaction_store_request::unsafe_arena_set_allocated_reserved(::koinos::reserved_rpc* reserved) {
  clear_request();
  if (reserved) {
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.transaction_store.transaction_store_request.reserved)
}
inline ::koinos::reserved_rpc* transaction_store_request::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_request();
    set_has_reserved();
    request_.reserved_ = CreateMaybeMessage< ::koinos::reserved_rpc >(GetArenaForAllocation());
  }
  return request_.reserved_;
}
inline ::koinos::reserved_rpc* transaction_store_request::mutable_reserved() {
  ::koinos::reserved_rpc* _msg = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:koinos.transaction_store.transaction_store_request.reserved)
  return _msg;
}

// .koinos.transaction_store.get_transactions_by_id_request get_transactions_by_id = 2;
inline bool transaction_store_request::_internal_has_get_transactions_by_id() const {
  return request_case() == kGetTransactionsById;
}
inline bool transaction_store_request::has_get_transactions_by_id() const {
  return _internal_has_get_transactions_by_id();
}
inline void transaction_store_request::set_has_get_transactions_by_id() {
  _oneof_case_[0] = kGetTransactionsById;
}
inline void transaction_store_request::clear_get_transactions_by_id() {
  if (_internal_has_get_transactions_by_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_transactions_by_id_;
    }
    clear_has_request();
  }
}
inline ::koinos::transaction_store::get_transactions_by_id_request* transaction_store_request::release_get_transactions_by_id() {
  // @@protoc_insertion_point(field_release:koinos.transaction_store.transaction_store_request.get_transactions_by_id)
  if (_internal_has_get_transactions_by_id()) {
    clear_has_request();
      ::koinos::transaction_store::get_transactions_by_id_request* temp = request_.get_transactions_by_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_transactions_by_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::transaction_store::get_transactions_by_id_request& transaction_store_request::_internal_get_transactions_by_id() const {
  return _internal_has_get_transactions_by_id()
      ? *request_.get_transactions_by_id_
      : reinterpret_cast< ::koinos::transaction_store::get_transactions_by_id_request&>(::koinos::transaction_store::_get_transactions_by_id_request_default_instance_);
}
inline const ::koinos::transaction_store::get_transactions_by_id_request& transaction_store_request::get_transactions_by_id() const {
  // @@protoc_insertion_point(field_get:koinos.transaction_store.transaction_store_request.get_transactions_by_id)
  return _internal_get_transactions_by_id();
}
inline ::koinos::transaction_store::get_transactions_by_id_request* transaction_store_request::unsafe_arena_release_get_transactions_by_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.transaction_store.transaction_store_request.get_transactions_by_id)
  if (_internal_has_get_transactions_by_id()) {
    clear_has_request();
    ::koinos::transaction_store::get_transactions_by_id_request* temp = request_.get_transactions_by_id_;
    request_.get_transactions_by_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void transaction_store_request::unsafe_arena_set_allocated_get_transactions_by_id(::koinos::transaction_store::get_transactions_by_id_request* get_transactions_by_id) {
  clear_request();
  if (get_transactions_by_id) {
    set_has_get_transactions_by_id();
    request_.get_transactions_by_id_ = get_transactions_by_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.transaction_store.transaction_store_request.get_transactions_by_id)
}
inline ::koinos::transaction_store::get_transactions_by_id_request* transaction_store_request::_internal_mutable_get_transactions_by_id() {
  if (!_internal_has_get_transactions_by_id()) {
    clear_request();
    set_has_get_transactions_by_id();
    request_.get_transactions_by_id_ = CreateMaybeMessage< ::koinos::transaction_store::get_transactions_by_id_request >(GetArenaForAllocation());
  }
  return request_.get_transactions_by_id_;
}
inline ::koinos::transaction_store::get_transactions_by_id_request* transaction_store_request::mutable_get_transactions_by_id() {
  ::koinos::transaction_store::get_transactions_by_id_request* _msg = _internal_mutable_get_transactions_by_id();
  // @@protoc_insertion_point(field_mutable:koinos.transaction_store.transaction_store_request.get_transactions_by_id)
  return _msg;
}

inline bool transaction_store_request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void transaction_store_request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline transaction_store_request::RequestCase transaction_store_request::request_case() const {
  return transaction_store_request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// transaction_store_response

// .koinos.reserved_rpc reserved = 1;
inline bool transaction_store_response::_internal_has_reserved() const {
  return response_case() == kReserved;
}
inline bool transaction_store_response::has_reserved() const {
  return _internal_has_reserved();
}
inline void transaction_store_response::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::reserved_rpc* transaction_store_response::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.transaction_store.transaction_store_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
      ::koinos::reserved_rpc* temp = response_.reserved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::reserved_rpc& transaction_store_response::_internal_reserved() const {
  return _internal_has_reserved()
      ? *response_.reserved_
      : reinterpret_cast< ::koinos::reserved_rpc&>(::koinos::_reserved_rpc_default_instance_);
}
inline const ::koinos::reserved_rpc& transaction_store_response::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.transaction_store.transaction_store_response.reserved)
  return _internal_reserved();
}
inline ::koinos::reserved_rpc* transaction_store_response::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.transaction_store.transaction_store_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
    ::koinos::reserved_rpc* temp = response_.reserved_;
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void transaction_store_response::unsafe_arena_set_allocated_reserved(::koinos::reserved_rpc* reserved) {
  clear_response();
  if (reserved) {
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.transaction_store.transaction_store_response.reserved)
}
inline ::koinos::reserved_rpc* transaction_store_response::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_response();
    set_has_reserved();
    response_.reserved_ = CreateMaybeMessage< ::koinos::reserved_rpc >(GetArenaForAllocation());
  }
  return response_.reserved_;
}
inline ::koinos::reserved_rpc* transaction_store_response::mutable_reserved() {
  ::koinos::reserved_rpc* _msg = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:koinos.transaction_store.transaction_store_response.reserved)
  return _msg;
}

// .koinos.error_status error = 2;
inline bool transaction_store_response::_internal_has_error() const {
  return response_case() == kError;
}
inline bool transaction_store_response::has_error() const {
  return _internal_has_error();
}
inline void transaction_store_response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::koinos::error_status* transaction_store_response::release_error() {
  // @@protoc_insertion_point(field_release:koinos.transaction_store.transaction_store_response.error)
  if (_internal_has_error()) {
    clear_has_response();
      ::koinos::error_status* temp = response_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::error_status& transaction_store_response::_internal_error() const {
  return _internal_has_error()
      ? *response_.error_
      : reinterpret_cast< ::koinos::error_status&>(::koinos::_error_status_default_instance_);
}
inline const ::koinos::error_status& transaction_store_response::error() const {
  // @@protoc_insertion_point(field_get:koinos.transaction_store.transaction_store_response.error)
  return _internal_error();
}
inline ::koinos::error_status* transaction_store_response::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.transaction_store.transaction_store_response.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::koinos::error_status* temp = response_.error_;
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void transaction_store_response::unsafe_arena_set_allocated_error(::koinos::error_status* error) {
  clear_response();
  if (error) {
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.transaction_store.transaction_store_response.error)
}
inline ::koinos::error_status* transaction_store_response::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_response();
    set_has_error();
    response_.error_ = CreateMaybeMessage< ::koinos::error_status >(GetArenaForAllocation());
  }
  return response_.error_;
}
inline ::koinos::error_status* transaction_store_response::mutable_error() {
  ::koinos::error_status* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:koinos.transaction_store.transaction_store_response.error)
  return _msg;
}

// .koinos.transaction_store.get_transactions_by_id_response get_transactions_by_id = 3;
inline bool transaction_store_response::_internal_has_get_transactions_by_id() const {
  return response_case() == kGetTransactionsById;
}
inline bool transaction_store_response::has_get_transactions_by_id() const {
  return _internal_has_get_transactions_by_id();
}
inline void transaction_store_response::set_has_get_transactions_by_id() {
  _oneof_case_[0] = kGetTransactionsById;
}
inline void transaction_store_response::clear_get_transactions_by_id() {
  if (_internal_has_get_transactions_by_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.get_transactions_by_id_;
    }
    clear_has_response();
  }
}
inline ::koinos::transaction_store::get_transactions_by_id_response* transaction_store_response::release_get_transactions_by_id() {
  // @@protoc_insertion_point(field_release:koinos.transaction_store.transaction_store_response.get_transactions_by_id)
  if (_internal_has_get_transactions_by_id()) {
    clear_has_response();
      ::koinos::transaction_store::get_transactions_by_id_response* temp = response_.get_transactions_by_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_transactions_by_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::transaction_store::get_transactions_by_id_response& transaction_store_response::_internal_get_transactions_by_id() const {
  return _internal_has_get_transactions_by_id()
      ? *response_.get_transactions_by_id_
      : reinterpret_cast< ::koinos::transaction_store::get_transactions_by_id_response&>(::koinos::transaction_store::_get_transactions_by_id_response_default_instance_);
}
inline const ::koinos::transaction_store::get_transactions_by_id_response& transaction_store_response::get_transactions_by_id() const {
  // @@protoc_insertion_point(field_get:koinos.transaction_store.transaction_store_response.get_transactions_by_id)
  return _internal_get_transactions_by_id();
}
inline ::koinos::transaction_store::get_transactions_by_id_response* transaction_store_response::unsafe_arena_release_get_transactions_by_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.transaction_store.transaction_store_response.get_transactions_by_id)
  if (_internal_has_get_transactions_by_id()) {
    clear_has_response();
    ::koinos::transaction_store::get_transactions_by_id_response* temp = response_.get_transactions_by_id_;
    response_.get_transactions_by_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void transaction_store_response::unsafe_arena_set_allocated_get_transactions_by_id(::koinos::transaction_store::get_transactions_by_id_response* get_transactions_by_id) {
  clear_response();
  if (get_transactions_by_id) {
    set_has_get_transactions_by_id();
    response_.get_transactions_by_id_ = get_transactions_by_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.transaction_store.transaction_store_response.get_transactions_by_id)
}
inline ::koinos::transaction_store::get_transactions_by_id_response* transaction_store_response::_internal_mutable_get_transactions_by_id() {
  if (!_internal_has_get_transactions_by_id()) {
    clear_response();
    set_has_get_transactions_by_id();
    response_.get_transactions_by_id_ = CreateMaybeMessage< ::koinos::transaction_store::get_transactions_by_id_response >(GetArenaForAllocation());
  }
  return response_.get_transactions_by_id_;
}
inline ::koinos::transaction_store::get_transactions_by_id_response* transaction_store_response::mutable_get_transactions_by_id() {
  ::koinos::transaction_store::get_transactions_by_id_response* _msg = _internal_mutable_get_transactions_by_id();
  // @@protoc_insertion_point(field_mutable:koinos.transaction_store.transaction_store_response.get_transactions_by_id)
  return _msg;
}

inline bool transaction_store_response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void transaction_store_response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline transaction_store_response::ResponseCase transaction_store_response::response_case() const {
  return transaction_store_response::ResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transaction_store
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2ftransaction_5fstore_2frpc_2eproto
