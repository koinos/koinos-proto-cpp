// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/contracts/token/token.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2ftoken_2ftoken_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2ftoken_2ftoken_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "koinos/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fcontracts_2ftoken_2ftoken_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
namespace koinos {
namespace contracts {
namespace token {
class balance_object;
struct balance_objectDefaultTypeInternal;
extern balance_objectDefaultTypeInternal _balance_object_default_instance_;
class balance_of_arguments;
struct balance_of_argumentsDefaultTypeInternal;
extern balance_of_argumentsDefaultTypeInternal _balance_of_arguments_default_instance_;
class balance_of_result;
struct balance_of_resultDefaultTypeInternal;
extern balance_of_resultDefaultTypeInternal _balance_of_result_default_instance_;
class burn_arguments;
struct burn_argumentsDefaultTypeInternal;
extern burn_argumentsDefaultTypeInternal _burn_arguments_default_instance_;
class burn_event;
struct burn_eventDefaultTypeInternal;
extern burn_eventDefaultTypeInternal _burn_event_default_instance_;
class burn_result;
struct burn_resultDefaultTypeInternal;
extern burn_resultDefaultTypeInternal _burn_result_default_instance_;
class decimals_arguments;
struct decimals_argumentsDefaultTypeInternal;
extern decimals_argumentsDefaultTypeInternal _decimals_arguments_default_instance_;
class decimals_result;
struct decimals_resultDefaultTypeInternal;
extern decimals_resultDefaultTypeInternal _decimals_result_default_instance_;
class effective_balance_object;
struct effective_balance_objectDefaultTypeInternal;
extern effective_balance_objectDefaultTypeInternal _effective_balance_object_default_instance_;
class effective_balance_object_PastBalancesEntry_DoNotUse;
struct effective_balance_object_PastBalancesEntry_DoNotUseDefaultTypeInternal;
extern effective_balance_object_PastBalancesEntry_DoNotUseDefaultTypeInternal _effective_balance_object_PastBalancesEntry_DoNotUse_default_instance_;
class effective_balance_of_arguments;
struct effective_balance_of_argumentsDefaultTypeInternal;
extern effective_balance_of_argumentsDefaultTypeInternal _effective_balance_of_arguments_default_instance_;
class effective_balance_of_result;
struct effective_balance_of_resultDefaultTypeInternal;
extern effective_balance_of_resultDefaultTypeInternal _effective_balance_of_result_default_instance_;
class mana_balance_object;
struct mana_balance_objectDefaultTypeInternal;
extern mana_balance_objectDefaultTypeInternal _mana_balance_object_default_instance_;
class mint_arguments;
struct mint_argumentsDefaultTypeInternal;
extern mint_argumentsDefaultTypeInternal _mint_arguments_default_instance_;
class mint_event;
struct mint_eventDefaultTypeInternal;
extern mint_eventDefaultTypeInternal _mint_event_default_instance_;
class mint_result;
struct mint_resultDefaultTypeInternal;
extern mint_resultDefaultTypeInternal _mint_result_default_instance_;
class name_arguments;
struct name_argumentsDefaultTypeInternal;
extern name_argumentsDefaultTypeInternal _name_arguments_default_instance_;
class name_result;
struct name_resultDefaultTypeInternal;
extern name_resultDefaultTypeInternal _name_result_default_instance_;
class symbol_arguments;
struct symbol_argumentsDefaultTypeInternal;
extern symbol_argumentsDefaultTypeInternal _symbol_arguments_default_instance_;
class symbol_result;
struct symbol_resultDefaultTypeInternal;
extern symbol_resultDefaultTypeInternal _symbol_result_default_instance_;
class total_supply_arguments;
struct total_supply_argumentsDefaultTypeInternal;
extern total_supply_argumentsDefaultTypeInternal _total_supply_arguments_default_instance_;
class total_supply_result;
struct total_supply_resultDefaultTypeInternal;
extern total_supply_resultDefaultTypeInternal _total_supply_result_default_instance_;
class transfer_arguments;
struct transfer_argumentsDefaultTypeInternal;
extern transfer_argumentsDefaultTypeInternal _transfer_arguments_default_instance_;
class transfer_event;
struct transfer_eventDefaultTypeInternal;
extern transfer_eventDefaultTypeInternal _transfer_event_default_instance_;
class transfer_result;
struct transfer_resultDefaultTypeInternal;
extern transfer_resultDefaultTypeInternal _transfer_result_default_instance_;
}  // namespace token
}  // namespace contracts
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::contracts::token::balance_object* Arena::CreateMaybeMessage<::koinos::contracts::token::balance_object>(Arena*);
template<> ::koinos::contracts::token::balance_of_arguments* Arena::CreateMaybeMessage<::koinos::contracts::token::balance_of_arguments>(Arena*);
template<> ::koinos::contracts::token::balance_of_result* Arena::CreateMaybeMessage<::koinos::contracts::token::balance_of_result>(Arena*);
template<> ::koinos::contracts::token::burn_arguments* Arena::CreateMaybeMessage<::koinos::contracts::token::burn_arguments>(Arena*);
template<> ::koinos::contracts::token::burn_event* Arena::CreateMaybeMessage<::koinos::contracts::token::burn_event>(Arena*);
template<> ::koinos::contracts::token::burn_result* Arena::CreateMaybeMessage<::koinos::contracts::token::burn_result>(Arena*);
template<> ::koinos::contracts::token::decimals_arguments* Arena::CreateMaybeMessage<::koinos::contracts::token::decimals_arguments>(Arena*);
template<> ::koinos::contracts::token::decimals_result* Arena::CreateMaybeMessage<::koinos::contracts::token::decimals_result>(Arena*);
template<> ::koinos::contracts::token::effective_balance_object* Arena::CreateMaybeMessage<::koinos::contracts::token::effective_balance_object>(Arena*);
template<> ::koinos::contracts::token::effective_balance_object_PastBalancesEntry_DoNotUse* Arena::CreateMaybeMessage<::koinos::contracts::token::effective_balance_object_PastBalancesEntry_DoNotUse>(Arena*);
template<> ::koinos::contracts::token::effective_balance_of_arguments* Arena::CreateMaybeMessage<::koinos::contracts::token::effective_balance_of_arguments>(Arena*);
template<> ::koinos::contracts::token::effective_balance_of_result* Arena::CreateMaybeMessage<::koinos::contracts::token::effective_balance_of_result>(Arena*);
template<> ::koinos::contracts::token::mana_balance_object* Arena::CreateMaybeMessage<::koinos::contracts::token::mana_balance_object>(Arena*);
template<> ::koinos::contracts::token::mint_arguments* Arena::CreateMaybeMessage<::koinos::contracts::token::mint_arguments>(Arena*);
template<> ::koinos::contracts::token::mint_event* Arena::CreateMaybeMessage<::koinos::contracts::token::mint_event>(Arena*);
template<> ::koinos::contracts::token::mint_result* Arena::CreateMaybeMessage<::koinos::contracts::token::mint_result>(Arena*);
template<> ::koinos::contracts::token::name_arguments* Arena::CreateMaybeMessage<::koinos::contracts::token::name_arguments>(Arena*);
template<> ::koinos::contracts::token::name_result* Arena::CreateMaybeMessage<::koinos::contracts::token::name_result>(Arena*);
template<> ::koinos::contracts::token::symbol_arguments* Arena::CreateMaybeMessage<::koinos::contracts::token::symbol_arguments>(Arena*);
template<> ::koinos::contracts::token::symbol_result* Arena::CreateMaybeMessage<::koinos::contracts::token::symbol_result>(Arena*);
template<> ::koinos::contracts::token::total_supply_arguments* Arena::CreateMaybeMessage<::koinos::contracts::token::total_supply_arguments>(Arena*);
template<> ::koinos::contracts::token::total_supply_result* Arena::CreateMaybeMessage<::koinos::contracts::token::total_supply_result>(Arena*);
template<> ::koinos::contracts::token::transfer_arguments* Arena::CreateMaybeMessage<::koinos::contracts::token::transfer_arguments>(Arena*);
template<> ::koinos::contracts::token::transfer_event* Arena::CreateMaybeMessage<::koinos::contracts::token::transfer_event>(Arena*);
template<> ::koinos::contracts::token::transfer_result* Arena::CreateMaybeMessage<::koinos::contracts::token::transfer_result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace contracts {
namespace token {

// ===================================================================

class name_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.name_arguments) */ {
 public:
  inline name_arguments() : name_arguments(nullptr) {}
  ~name_arguments() override;
  explicit constexpr name_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  name_arguments(const name_arguments& from);
  name_arguments(name_arguments&& from) noexcept
    : name_arguments() {
    *this = ::std::move(from);
  }

  inline name_arguments& operator=(const name_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline name_arguments& operator=(name_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const name_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const name_arguments* internal_default_instance() {
    return reinterpret_cast<const name_arguments*>(
               &_name_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(name_arguments& a, name_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(name_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(name_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline name_arguments* New() const final {
    return new name_arguments();
  }

  name_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<name_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const name_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const name_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(name_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.name_arguments";
  }
  protected:
  explicit name_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.name_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class name_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.name_result) */ {
 public:
  inline name_result() : name_result(nullptr) {}
  ~name_result() override;
  explicit constexpr name_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  name_result(const name_result& from);
  name_result(name_result&& from) noexcept
    : name_result() {
    *this = ::std::move(from);
  }

  inline name_result& operator=(const name_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline name_result& operator=(name_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const name_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const name_result* internal_default_instance() {
    return reinterpret_cast<const name_result*>(
               &_name_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(name_result& a, name_result& b) {
    a.Swap(&b);
  }
  inline void Swap(name_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(name_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline name_result* New() const final {
    return new name_result();
  }

  name_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<name_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const name_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const name_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(name_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.name_result";
  }
  protected:
  explicit name_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.name_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class symbol_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.symbol_arguments) */ {
 public:
  inline symbol_arguments() : symbol_arguments(nullptr) {}
  ~symbol_arguments() override;
  explicit constexpr symbol_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  symbol_arguments(const symbol_arguments& from);
  symbol_arguments(symbol_arguments&& from) noexcept
    : symbol_arguments() {
    *this = ::std::move(from);
  }

  inline symbol_arguments& operator=(const symbol_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline symbol_arguments& operator=(symbol_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const symbol_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const symbol_arguments* internal_default_instance() {
    return reinterpret_cast<const symbol_arguments*>(
               &_symbol_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(symbol_arguments& a, symbol_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(symbol_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(symbol_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline symbol_arguments* New() const final {
    return new symbol_arguments();
  }

  symbol_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<symbol_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const symbol_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const symbol_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(symbol_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.symbol_arguments";
  }
  protected:
  explicit symbol_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.symbol_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class symbol_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.symbol_result) */ {
 public:
  inline symbol_result() : symbol_result(nullptr) {}
  ~symbol_result() override;
  explicit constexpr symbol_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  symbol_result(const symbol_result& from);
  symbol_result(symbol_result&& from) noexcept
    : symbol_result() {
    *this = ::std::move(from);
  }

  inline symbol_result& operator=(const symbol_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline symbol_result& operator=(symbol_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const symbol_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const symbol_result* internal_default_instance() {
    return reinterpret_cast<const symbol_result*>(
               &_symbol_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(symbol_result& a, symbol_result& b) {
    a.Swap(&b);
  }
  inline void Swap(symbol_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(symbol_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline symbol_result* New() const final {
    return new symbol_result();
  }

  symbol_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<symbol_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const symbol_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const symbol_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(symbol_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.symbol_result";
  }
  protected:
  explicit symbol_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.symbol_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class decimals_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.decimals_arguments) */ {
 public:
  inline decimals_arguments() : decimals_arguments(nullptr) {}
  ~decimals_arguments() override;
  explicit constexpr decimals_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  decimals_arguments(const decimals_arguments& from);
  decimals_arguments(decimals_arguments&& from) noexcept
    : decimals_arguments() {
    *this = ::std::move(from);
  }

  inline decimals_arguments& operator=(const decimals_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline decimals_arguments& operator=(decimals_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const decimals_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const decimals_arguments* internal_default_instance() {
    return reinterpret_cast<const decimals_arguments*>(
               &_decimals_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(decimals_arguments& a, decimals_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(decimals_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(decimals_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline decimals_arguments* New() const final {
    return new decimals_arguments();
  }

  decimals_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<decimals_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const decimals_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const decimals_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(decimals_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.decimals_arguments";
  }
  protected:
  explicit decimals_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.decimals_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class decimals_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.decimals_result) */ {
 public:
  inline decimals_result() : decimals_result(nullptr) {}
  ~decimals_result() override;
  explicit constexpr decimals_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  decimals_result(const decimals_result& from);
  decimals_result(decimals_result&& from) noexcept
    : decimals_result() {
    *this = ::std::move(from);
  }

  inline decimals_result& operator=(const decimals_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline decimals_result& operator=(decimals_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const decimals_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const decimals_result* internal_default_instance() {
    return reinterpret_cast<const decimals_result*>(
               &_decimals_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(decimals_result& a, decimals_result& b) {
    a.Swap(&b);
  }
  inline void Swap(decimals_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(decimals_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline decimals_result* New() const final {
    return new decimals_result();
  }

  decimals_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<decimals_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const decimals_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const decimals_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(decimals_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.decimals_result";
  }
  protected:
  explicit decimals_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.decimals_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class total_supply_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.total_supply_arguments) */ {
 public:
  inline total_supply_arguments() : total_supply_arguments(nullptr) {}
  ~total_supply_arguments() override;
  explicit constexpr total_supply_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  total_supply_arguments(const total_supply_arguments& from);
  total_supply_arguments(total_supply_arguments&& from) noexcept
    : total_supply_arguments() {
    *this = ::std::move(from);
  }

  inline total_supply_arguments& operator=(const total_supply_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline total_supply_arguments& operator=(total_supply_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const total_supply_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const total_supply_arguments* internal_default_instance() {
    return reinterpret_cast<const total_supply_arguments*>(
               &_total_supply_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(total_supply_arguments& a, total_supply_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(total_supply_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(total_supply_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline total_supply_arguments* New() const final {
    return new total_supply_arguments();
  }

  total_supply_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<total_supply_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const total_supply_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const total_supply_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(total_supply_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.total_supply_arguments";
  }
  protected:
  explicit total_supply_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.total_supply_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class total_supply_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.total_supply_result) */ {
 public:
  inline total_supply_result() : total_supply_result(nullptr) {}
  ~total_supply_result() override;
  explicit constexpr total_supply_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  total_supply_result(const total_supply_result& from);
  total_supply_result(total_supply_result&& from) noexcept
    : total_supply_result() {
    *this = ::std::move(from);
  }

  inline total_supply_result& operator=(const total_supply_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline total_supply_result& operator=(total_supply_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const total_supply_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const total_supply_result* internal_default_instance() {
    return reinterpret_cast<const total_supply_result*>(
               &_total_supply_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(total_supply_result& a, total_supply_result& b) {
    a.Swap(&b);
  }
  inline void Swap(total_supply_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(total_supply_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline total_supply_result* New() const final {
    return new total_supply_result();
  }

  total_supply_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<total_supply_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const total_supply_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const total_supply_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(total_supply_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.total_supply_result";
  }
  protected:
  explicit total_supply_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1 [jstype = JS_STRING];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.total_supply_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class balance_of_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.balance_of_arguments) */ {
 public:
  inline balance_of_arguments() : balance_of_arguments(nullptr) {}
  ~balance_of_arguments() override;
  explicit constexpr balance_of_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  balance_of_arguments(const balance_of_arguments& from);
  balance_of_arguments(balance_of_arguments&& from) noexcept
    : balance_of_arguments() {
    *this = ::std::move(from);
  }

  inline balance_of_arguments& operator=(const balance_of_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline balance_of_arguments& operator=(balance_of_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const balance_of_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const balance_of_arguments* internal_default_instance() {
    return reinterpret_cast<const balance_of_arguments*>(
               &_balance_of_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(balance_of_arguments& a, balance_of_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(balance_of_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(balance_of_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline balance_of_arguments* New() const final {
    return new balance_of_arguments();
  }

  balance_of_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<balance_of_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const balance_of_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const balance_of_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(balance_of_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.balance_of_arguments";
  }
  protected:
  explicit balance_of_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
  };
  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.balance_of_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class balance_of_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.balance_of_result) */ {
 public:
  inline balance_of_result() : balance_of_result(nullptr) {}
  ~balance_of_result() override;
  explicit constexpr balance_of_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  balance_of_result(const balance_of_result& from);
  balance_of_result(balance_of_result&& from) noexcept
    : balance_of_result() {
    *this = ::std::move(from);
  }

  inline balance_of_result& operator=(const balance_of_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline balance_of_result& operator=(balance_of_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const balance_of_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const balance_of_result* internal_default_instance() {
    return reinterpret_cast<const balance_of_result*>(
               &_balance_of_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(balance_of_result& a, balance_of_result& b) {
    a.Swap(&b);
  }
  inline void Swap(balance_of_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(balance_of_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline balance_of_result* New() const final {
    return new balance_of_result();
  }

  balance_of_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<balance_of_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const balance_of_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const balance_of_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(balance_of_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.balance_of_result";
  }
  protected:
  explicit balance_of_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1 [jstype = JS_STRING];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.balance_of_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class effective_balance_of_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.effective_balance_of_arguments) */ {
 public:
  inline effective_balance_of_arguments() : effective_balance_of_arguments(nullptr) {}
  ~effective_balance_of_arguments() override;
  explicit constexpr effective_balance_of_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  effective_balance_of_arguments(const effective_balance_of_arguments& from);
  effective_balance_of_arguments(effective_balance_of_arguments&& from) noexcept
    : effective_balance_of_arguments() {
    *this = ::std::move(from);
  }

  inline effective_balance_of_arguments& operator=(const effective_balance_of_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline effective_balance_of_arguments& operator=(effective_balance_of_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const effective_balance_of_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const effective_balance_of_arguments* internal_default_instance() {
    return reinterpret_cast<const effective_balance_of_arguments*>(
               &_effective_balance_of_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(effective_balance_of_arguments& a, effective_balance_of_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(effective_balance_of_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(effective_balance_of_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline effective_balance_of_arguments* New() const final {
    return new effective_balance_of_arguments();
  }

  effective_balance_of_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<effective_balance_of_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const effective_balance_of_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const effective_balance_of_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(effective_balance_of_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.effective_balance_of_arguments";
  }
  protected:
  explicit effective_balance_of_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
  };
  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.effective_balance_of_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class effective_balance_of_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.effective_balance_of_result) */ {
 public:
  inline effective_balance_of_result() : effective_balance_of_result(nullptr) {}
  ~effective_balance_of_result() override;
  explicit constexpr effective_balance_of_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  effective_balance_of_result(const effective_balance_of_result& from);
  effective_balance_of_result(effective_balance_of_result&& from) noexcept
    : effective_balance_of_result() {
    *this = ::std::move(from);
  }

  inline effective_balance_of_result& operator=(const effective_balance_of_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline effective_balance_of_result& operator=(effective_balance_of_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const effective_balance_of_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const effective_balance_of_result* internal_default_instance() {
    return reinterpret_cast<const effective_balance_of_result*>(
               &_effective_balance_of_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(effective_balance_of_result& a, effective_balance_of_result& b) {
    a.Swap(&b);
  }
  inline void Swap(effective_balance_of_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(effective_balance_of_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline effective_balance_of_result* New() const final {
    return new effective_balance_of_result();
  }

  effective_balance_of_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<effective_balance_of_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const effective_balance_of_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const effective_balance_of_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(effective_balance_of_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.effective_balance_of_result";
  }
  protected:
  explicit effective_balance_of_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1 [jstype = JS_STRING];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.effective_balance_of_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class transfer_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.transfer_arguments) */ {
 public:
  inline transfer_arguments() : transfer_arguments(nullptr) {}
  ~transfer_arguments() override;
  explicit constexpr transfer_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transfer_arguments(const transfer_arguments& from);
  transfer_arguments(transfer_arguments&& from) noexcept
    : transfer_arguments() {
    *this = ::std::move(from);
  }

  inline transfer_arguments& operator=(const transfer_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline transfer_arguments& operator=(transfer_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transfer_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const transfer_arguments* internal_default_instance() {
    return reinterpret_cast<const transfer_arguments*>(
               &_transfer_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(transfer_arguments& a, transfer_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(transfer_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transfer_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transfer_arguments* New() const final {
    return new transfer_arguments();
  }

  transfer_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transfer_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transfer_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transfer_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transfer_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.transfer_arguments";
  }
  protected:
  explicit transfer_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_MUST_USE_RESULT std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // uint64 value = 3 [jstype = JS_STRING];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.transfer_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class transfer_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.transfer_result) */ {
 public:
  inline transfer_result() : transfer_result(nullptr) {}
  ~transfer_result() override;
  explicit constexpr transfer_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transfer_result(const transfer_result& from);
  transfer_result(transfer_result&& from) noexcept
    : transfer_result() {
    *this = ::std::move(from);
  }

  inline transfer_result& operator=(const transfer_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline transfer_result& operator=(transfer_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transfer_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const transfer_result* internal_default_instance() {
    return reinterpret_cast<const transfer_result*>(
               &_transfer_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(transfer_result& a, transfer_result& b) {
    a.Swap(&b);
  }
  inline void Swap(transfer_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transfer_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transfer_result* New() const final {
    return new transfer_result();
  }

  transfer_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transfer_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transfer_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transfer_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transfer_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.transfer_result";
  }
  protected:
  explicit transfer_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.transfer_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class mint_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.mint_arguments) */ {
 public:
  inline mint_arguments() : mint_arguments(nullptr) {}
  ~mint_arguments() override;
  explicit constexpr mint_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mint_arguments(const mint_arguments& from);
  mint_arguments(mint_arguments&& from) noexcept
    : mint_arguments() {
    *this = ::std::move(from);
  }

  inline mint_arguments& operator=(const mint_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline mint_arguments& operator=(mint_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mint_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const mint_arguments* internal_default_instance() {
    return reinterpret_cast<const mint_arguments*>(
               &_mint_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(mint_arguments& a, mint_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(mint_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mint_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mint_arguments* New() const final {
    return new mint_arguments();
  }

  mint_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mint_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mint_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const mint_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mint_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.mint_arguments";
  }
  protected:
  explicit mint_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes to = 1 [(.koinos.btype) = ADDRESS];
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // uint64 value = 2 [jstype = JS_STRING];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.mint_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class mint_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.mint_result) */ {
 public:
  inline mint_result() : mint_result(nullptr) {}
  ~mint_result() override;
  explicit constexpr mint_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mint_result(const mint_result& from);
  mint_result(mint_result&& from) noexcept
    : mint_result() {
    *this = ::std::move(from);
  }

  inline mint_result& operator=(const mint_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline mint_result& operator=(mint_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mint_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const mint_result* internal_default_instance() {
    return reinterpret_cast<const mint_result*>(
               &_mint_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(mint_result& a, mint_result& b) {
    a.Swap(&b);
  }
  inline void Swap(mint_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mint_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mint_result* New() const final {
    return new mint_result();
  }

  mint_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mint_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mint_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const mint_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mint_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.mint_result";
  }
  protected:
  explicit mint_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.mint_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class burn_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.burn_arguments) */ {
 public:
  inline burn_arguments() : burn_arguments(nullptr) {}
  ~burn_arguments() override;
  explicit constexpr burn_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  burn_arguments(const burn_arguments& from);
  burn_arguments(burn_arguments&& from) noexcept
    : burn_arguments() {
    *this = ::std::move(from);
  }

  inline burn_arguments& operator=(const burn_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline burn_arguments& operator=(burn_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const burn_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const burn_arguments* internal_default_instance() {
    return reinterpret_cast<const burn_arguments*>(
               &_burn_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(burn_arguments& a, burn_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(burn_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(burn_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline burn_arguments* New() const final {
    return new burn_arguments();
  }

  burn_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<burn_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const burn_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const burn_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(burn_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.burn_arguments";
  }
  protected:
  explicit burn_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_MUST_USE_RESULT std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // uint64 value = 2 [jstype = JS_STRING];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.burn_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class burn_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.burn_result) */ {
 public:
  inline burn_result() : burn_result(nullptr) {}
  ~burn_result() override;
  explicit constexpr burn_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  burn_result(const burn_result& from);
  burn_result(burn_result&& from) noexcept
    : burn_result() {
    *this = ::std::move(from);
  }

  inline burn_result& operator=(const burn_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline burn_result& operator=(burn_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const burn_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const burn_result* internal_default_instance() {
    return reinterpret_cast<const burn_result*>(
               &_burn_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(burn_result& a, burn_result& b) {
    a.Swap(&b);
  }
  inline void Swap(burn_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(burn_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline burn_result* New() const final {
    return new burn_result();
  }

  burn_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<burn_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const burn_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const burn_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(burn_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.burn_result";
  }
  protected:
  explicit burn_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.burn_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class balance_object final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.balance_object) */ {
 public:
  inline balance_object() : balance_object(nullptr) {}
  ~balance_object() override;
  explicit constexpr balance_object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  balance_object(const balance_object& from);
  balance_object(balance_object&& from) noexcept
    : balance_object() {
    *this = ::std::move(from);
  }

  inline balance_object& operator=(const balance_object& from) {
    CopyFrom(from);
    return *this;
  }
  inline balance_object& operator=(balance_object&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const balance_object& default_instance() {
    return *internal_default_instance();
  }
  static inline const balance_object* internal_default_instance() {
    return reinterpret_cast<const balance_object*>(
               &_balance_object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(balance_object& a, balance_object& b) {
    a.Swap(&b);
  }
  inline void Swap(balance_object* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(balance_object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline balance_object* New() const final {
    return new balance_object();
  }

  balance_object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<balance_object>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const balance_object& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const balance_object& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(balance_object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.balance_object";
  }
  protected:
  explicit balance_object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1 [jstype = JS_STRING];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.balance_object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class mana_balance_object final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.mana_balance_object) */ {
 public:
  inline mana_balance_object() : mana_balance_object(nullptr) {}
  ~mana_balance_object() override;
  explicit constexpr mana_balance_object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mana_balance_object(const mana_balance_object& from);
  mana_balance_object(mana_balance_object&& from) noexcept
    : mana_balance_object() {
    *this = ::std::move(from);
  }

  inline mana_balance_object& operator=(const mana_balance_object& from) {
    CopyFrom(from);
    return *this;
  }
  inline mana_balance_object& operator=(mana_balance_object&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mana_balance_object& default_instance() {
    return *internal_default_instance();
  }
  static inline const mana_balance_object* internal_default_instance() {
    return reinterpret_cast<const mana_balance_object*>(
               &_mana_balance_object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(mana_balance_object& a, mana_balance_object& b) {
    a.Swap(&b);
  }
  inline void Swap(mana_balance_object* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mana_balance_object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mana_balance_object* New() const final {
    return new mana_balance_object();
  }

  mana_balance_object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mana_balance_object>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mana_balance_object& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const mana_balance_object& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mana_balance_object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.mana_balance_object";
  }
  protected:
  explicit mana_balance_object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalanceFieldNumber = 1,
    kManaFieldNumber = 2,
    kLastManaUpdateFieldNumber = 3,
  };
  // uint64 balance = 1 [jstype = JS_STRING];
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::uint64 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 mana = 2 [jstype = JS_STRING];
  void clear_mana();
  ::PROTOBUF_NAMESPACE_ID::uint64 mana() const;
  void set_mana(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mana() const;
  void _internal_set_mana(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_mana_update = 3 [jstype = JS_STRING];
  void clear_last_mana_update();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_mana_update() const;
  void set_last_mana_update(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_mana_update() const;
  void _internal_set_last_mana_update(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.mana_balance_object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 balance_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mana_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_mana_update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class effective_balance_object_PastBalancesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<effective_balance_object_PastBalancesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<effective_balance_object_PastBalancesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  effective_balance_object_PastBalancesEntry_DoNotUse();
  explicit constexpr effective_balance_object_PastBalancesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit effective_balance_object_PastBalancesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const effective_balance_object_PastBalancesEntry_DoNotUse& other);
  static const effective_balance_object_PastBalancesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const effective_balance_object_PastBalancesEntry_DoNotUse*>(&_effective_balance_object_PastBalancesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class effective_balance_object final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.effective_balance_object) */ {
 public:
  inline effective_balance_object() : effective_balance_object(nullptr) {}
  ~effective_balance_object() override;
  explicit constexpr effective_balance_object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  effective_balance_object(const effective_balance_object& from);
  effective_balance_object(effective_balance_object&& from) noexcept
    : effective_balance_object() {
    *this = ::std::move(from);
  }

  inline effective_balance_object& operator=(const effective_balance_object& from) {
    CopyFrom(from);
    return *this;
  }
  inline effective_balance_object& operator=(effective_balance_object&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const effective_balance_object& default_instance() {
    return *internal_default_instance();
  }
  static inline const effective_balance_object* internal_default_instance() {
    return reinterpret_cast<const effective_balance_object*>(
               &_effective_balance_object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(effective_balance_object& a, effective_balance_object& b) {
    a.Swap(&b);
  }
  inline void Swap(effective_balance_object* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(effective_balance_object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline effective_balance_object* New() const final {
    return new effective_balance_object();
  }

  effective_balance_object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<effective_balance_object>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const effective_balance_object& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const effective_balance_object& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(effective_balance_object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.effective_balance_object";
  }
  protected:
  explicit effective_balance_object(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPastBalancesFieldNumber = 2,
    kCurrentBalanceFieldNumber = 1,
  };
  // map<uint64, uint64> past_balances = 2;
  int past_balances_size() const;
  private:
  int _internal_past_balances_size() const;
  public:
  void clear_past_balances();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_past_balances() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_past_balances();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >&
      past_balances() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_past_balances();

  // uint64 current_balance = 1 [jstype = JS_STRING];
  void clear_current_balance();
  ::PROTOBUF_NAMESPACE_ID::uint64 current_balance() const;
  void set_current_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current_balance() const;
  void _internal_set_current_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.effective_balance_object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      effective_balance_object_PastBalancesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> past_balances_;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class burn_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.burn_event) */ {
 public:
  inline burn_event() : burn_event(nullptr) {}
  ~burn_event() override;
  explicit constexpr burn_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  burn_event(const burn_event& from);
  burn_event(burn_event&& from) noexcept
    : burn_event() {
    *this = ::std::move(from);
  }

  inline burn_event& operator=(const burn_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline burn_event& operator=(burn_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const burn_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const burn_event* internal_default_instance() {
    return reinterpret_cast<const burn_event*>(
               &_burn_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(burn_event& a, burn_event& b) {
    a.Swap(&b);
  }
  inline void Swap(burn_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(burn_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline burn_event* New() const final {
    return new burn_event();
  }

  burn_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<burn_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const burn_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const burn_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(burn_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.burn_event";
  }
  protected:
  explicit burn_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_MUST_USE_RESULT std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // uint64 value = 2 [jstype = JS_STRING];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.burn_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class mint_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.mint_event) */ {
 public:
  inline mint_event() : mint_event(nullptr) {}
  ~mint_event() override;
  explicit constexpr mint_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mint_event(const mint_event& from);
  mint_event(mint_event&& from) noexcept
    : mint_event() {
    *this = ::std::move(from);
  }

  inline mint_event& operator=(const mint_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline mint_event& operator=(mint_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mint_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const mint_event* internal_default_instance() {
    return reinterpret_cast<const mint_event*>(
               &_mint_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(mint_event& a, mint_event& b) {
    a.Swap(&b);
  }
  inline void Swap(mint_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mint_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mint_event* New() const final {
    return new mint_event();
  }

  mint_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mint_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mint_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const mint_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mint_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.mint_event";
  }
  protected:
  explicit mint_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes to = 1 [(.koinos.btype) = ADDRESS];
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // uint64 value = 2 [jstype = JS_STRING];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.mint_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// -------------------------------------------------------------------

class transfer_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.token.transfer_event) */ {
 public:
  inline transfer_event() : transfer_event(nullptr) {}
  ~transfer_event() override;
  explicit constexpr transfer_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transfer_event(const transfer_event& from);
  transfer_event(transfer_event&& from) noexcept
    : transfer_event() {
    *this = ::std::move(from);
  }

  inline transfer_event& operator=(const transfer_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline transfer_event& operator=(transfer_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transfer_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const transfer_event* internal_default_instance() {
    return reinterpret_cast<const transfer_event*>(
               &_transfer_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(transfer_event& a, transfer_event& b) {
    a.Swap(&b);
  }
  inline void Swap(transfer_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transfer_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transfer_event* New() const final {
    return new transfer_event();
  }

  transfer_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transfer_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transfer_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transfer_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transfer_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.token.transfer_event";
  }
  protected:
  explicit transfer_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_MUST_USE_RESULT std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // uint64 value = 3 [jstype = JS_STRING];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.token.transfer_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// name_arguments

// -------------------------------------------------------------------

// name_result

// string value = 1;
inline void name_result::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& name_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.name_result.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void name_result::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.token.name_result.value)
}
inline std::string* name_result::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.token.name_result.value)
  return _s;
}
inline const std::string& name_result::_internal_value() const {
  return value_.Get();
}
inline void name_result::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* name_result::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* name_result::release_value() {
  // @@protoc_insertion_point(field_release:koinos.contracts.token.name_result.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void name_result::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.token.name_result.value)
}

// -------------------------------------------------------------------

// symbol_arguments

// -------------------------------------------------------------------

// symbol_result

// string value = 1;
inline void symbol_result::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& symbol_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.symbol_result.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void symbol_result::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.token.symbol_result.value)
}
inline std::string* symbol_result::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.token.symbol_result.value)
  return _s;
}
inline const std::string& symbol_result::_internal_value() const {
  return value_.Get();
}
inline void symbol_result::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* symbol_result::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* symbol_result::release_value() {
  // @@protoc_insertion_point(field_release:koinos.contracts.token.symbol_result.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void symbol_result::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.token.symbol_result.value)
}

// -------------------------------------------------------------------

// decimals_arguments

// -------------------------------------------------------------------

// decimals_result

// uint32 value = 1;
inline void decimals_result::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 decimals_result::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 decimals_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.decimals_result.value)
  return _internal_value();
}
inline void decimals_result::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void decimals_result::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.decimals_result.value)
}

// -------------------------------------------------------------------

// total_supply_arguments

// -------------------------------------------------------------------

// total_supply_result

// uint64 value = 1 [jstype = JS_STRING];
inline void total_supply_result::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 total_supply_result::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 total_supply_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.total_supply_result.value)
  return _internal_value();
}
inline void total_supply_result::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void total_supply_result::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.total_supply_result.value)
}

// -------------------------------------------------------------------

// balance_of_arguments

// bytes owner = 1 [(.koinos.btype) = ADDRESS];
inline void balance_of_arguments::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& balance_of_arguments::owner() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.balance_of_arguments.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void balance_of_arguments::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.token.balance_of_arguments.owner)
}
inline std::string* balance_of_arguments::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.token.balance_of_arguments.owner)
  return _s;
}
inline const std::string& balance_of_arguments::_internal_owner() const {
  return owner_.Get();
}
inline void balance_of_arguments::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* balance_of_arguments::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* balance_of_arguments::release_owner() {
  // @@protoc_insertion_point(field_release:koinos.contracts.token.balance_of_arguments.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void balance_of_arguments::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.token.balance_of_arguments.owner)
}

// -------------------------------------------------------------------

// balance_of_result

// uint64 value = 1 [jstype = JS_STRING];
inline void balance_of_result::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 balance_of_result::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 balance_of_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.balance_of_result.value)
  return _internal_value();
}
inline void balance_of_result::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void balance_of_result::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.balance_of_result.value)
}

// -------------------------------------------------------------------

// effective_balance_of_arguments

// bytes owner = 1 [(.koinos.btype) = ADDRESS];
inline void effective_balance_of_arguments::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& effective_balance_of_arguments::owner() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.effective_balance_of_arguments.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void effective_balance_of_arguments::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.token.effective_balance_of_arguments.owner)
}
inline std::string* effective_balance_of_arguments::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.token.effective_balance_of_arguments.owner)
  return _s;
}
inline const std::string& effective_balance_of_arguments::_internal_owner() const {
  return owner_.Get();
}
inline void effective_balance_of_arguments::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* effective_balance_of_arguments::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* effective_balance_of_arguments::release_owner() {
  // @@protoc_insertion_point(field_release:koinos.contracts.token.effective_balance_of_arguments.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void effective_balance_of_arguments::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.token.effective_balance_of_arguments.owner)
}

// -------------------------------------------------------------------

// effective_balance_of_result

// uint64 value = 1 [jstype = JS_STRING];
inline void effective_balance_of_result::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 effective_balance_of_result::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 effective_balance_of_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.effective_balance_of_result.value)
  return _internal_value();
}
inline void effective_balance_of_result::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void effective_balance_of_result::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.effective_balance_of_result.value)
}

// -------------------------------------------------------------------

// transfer_arguments

// bytes from = 1 [(.koinos.btype) = ADDRESS];
inline void transfer_arguments::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& transfer_arguments::from() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.transfer_arguments.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transfer_arguments::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.token.transfer_arguments.from)
}
inline std::string* transfer_arguments::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.token.transfer_arguments.from)
  return _s;
}
inline const std::string& transfer_arguments::_internal_from() const {
  return from_.Get();
}
inline void transfer_arguments::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transfer_arguments::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transfer_arguments::release_from() {
  // @@protoc_insertion_point(field_release:koinos.contracts.token.transfer_arguments.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transfer_arguments::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.token.transfer_arguments.from)
}

// bytes to = 2 [(.koinos.btype) = ADDRESS];
inline void transfer_arguments::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& transfer_arguments::to() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.transfer_arguments.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transfer_arguments::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.token.transfer_arguments.to)
}
inline std::string* transfer_arguments::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.token.transfer_arguments.to)
  return _s;
}
inline const std::string& transfer_arguments::_internal_to() const {
  return to_.Get();
}
inline void transfer_arguments::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transfer_arguments::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transfer_arguments::release_to() {
  // @@protoc_insertion_point(field_release:koinos.contracts.token.transfer_arguments.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transfer_arguments::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.token.transfer_arguments.to)
}

// uint64 value = 3 [jstype = JS_STRING];
inline void transfer_arguments::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transfer_arguments::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transfer_arguments::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.transfer_arguments.value)
  return _internal_value();
}
inline void transfer_arguments::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void transfer_arguments::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.transfer_arguments.value)
}

// -------------------------------------------------------------------

// transfer_result

// -------------------------------------------------------------------

// mint_arguments

// bytes to = 1 [(.koinos.btype) = ADDRESS];
inline void mint_arguments::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& mint_arguments::to() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.mint_arguments.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mint_arguments::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.token.mint_arguments.to)
}
inline std::string* mint_arguments::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.token.mint_arguments.to)
  return _s;
}
inline const std::string& mint_arguments::_internal_to() const {
  return to_.Get();
}
inline void mint_arguments::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* mint_arguments::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* mint_arguments::release_to() {
  // @@protoc_insertion_point(field_release:koinos.contracts.token.mint_arguments.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void mint_arguments::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.token.mint_arguments.to)
}

// uint64 value = 2 [jstype = JS_STRING];
inline void mint_arguments::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 mint_arguments::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 mint_arguments::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.mint_arguments.value)
  return _internal_value();
}
inline void mint_arguments::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void mint_arguments::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.mint_arguments.value)
}

// -------------------------------------------------------------------

// mint_result

// -------------------------------------------------------------------

// burn_arguments

// bytes from = 1 [(.koinos.btype) = ADDRESS];
inline void burn_arguments::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& burn_arguments::from() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.burn_arguments.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void burn_arguments::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.token.burn_arguments.from)
}
inline std::string* burn_arguments::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.token.burn_arguments.from)
  return _s;
}
inline const std::string& burn_arguments::_internal_from() const {
  return from_.Get();
}
inline void burn_arguments::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* burn_arguments::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* burn_arguments::release_from() {
  // @@protoc_insertion_point(field_release:koinos.contracts.token.burn_arguments.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void burn_arguments::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.token.burn_arguments.from)
}

// uint64 value = 2 [jstype = JS_STRING];
inline void burn_arguments::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 burn_arguments::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 burn_arguments::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.burn_arguments.value)
  return _internal_value();
}
inline void burn_arguments::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void burn_arguments::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.burn_arguments.value)
}

// -------------------------------------------------------------------

// burn_result

// -------------------------------------------------------------------

// balance_object

// uint64 value = 1 [jstype = JS_STRING];
inline void balance_object::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 balance_object::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 balance_object::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.balance_object.value)
  return _internal_value();
}
inline void balance_object::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void balance_object::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.balance_object.value)
}

// -------------------------------------------------------------------

// mana_balance_object

// uint64 balance = 1 [jstype = JS_STRING];
inline void mana_balance_object::clear_balance() {
  balance_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 mana_balance_object::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 mana_balance_object::balance() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.mana_balance_object.balance)
  return _internal_balance();
}
inline void mana_balance_object::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  balance_ = value;
}
inline void mana_balance_object::set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.mana_balance_object.balance)
}

// uint64 mana = 2 [jstype = JS_STRING];
inline void mana_balance_object::clear_mana() {
  mana_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 mana_balance_object::_internal_mana() const {
  return mana_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 mana_balance_object::mana() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.mana_balance_object.mana)
  return _internal_mana();
}
inline void mana_balance_object::_internal_set_mana(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mana_ = value;
}
inline void mana_balance_object::set_mana(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mana(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.mana_balance_object.mana)
}

// uint64 last_mana_update = 3 [jstype = JS_STRING];
inline void mana_balance_object::clear_last_mana_update() {
  last_mana_update_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 mana_balance_object::_internal_last_mana_update() const {
  return last_mana_update_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 mana_balance_object::last_mana_update() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.mana_balance_object.last_mana_update)
  return _internal_last_mana_update();
}
inline void mana_balance_object::_internal_set_last_mana_update(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_mana_update_ = value;
}
inline void mana_balance_object::set_last_mana_update(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_mana_update(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.mana_balance_object.last_mana_update)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// effective_balance_object

// uint64 current_balance = 1 [jstype = JS_STRING];
inline void effective_balance_object::clear_current_balance() {
  current_balance_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 effective_balance_object::_internal_current_balance() const {
  return current_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 effective_balance_object::current_balance() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.effective_balance_object.current_balance)
  return _internal_current_balance();
}
inline void effective_balance_object::_internal_set_current_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  current_balance_ = value;
}
inline void effective_balance_object::set_current_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current_balance(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.effective_balance_object.current_balance)
}

// map<uint64, uint64> past_balances = 2;
inline int effective_balance_object::_internal_past_balances_size() const {
  return past_balances_.size();
}
inline int effective_balance_object::past_balances_size() const {
  return _internal_past_balances_size();
}
inline void effective_balance_object::clear_past_balances() {
  past_balances_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >&
effective_balance_object::_internal_past_balances() const {
  return past_balances_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >&
effective_balance_object::past_balances() const {
  // @@protoc_insertion_point(field_map:koinos.contracts.token.effective_balance_object.past_balances)
  return _internal_past_balances();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >*
effective_balance_object::_internal_mutable_past_balances() {
  return past_balances_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::uint64 >*
effective_balance_object::mutable_past_balances() {
  // @@protoc_insertion_point(field_mutable_map:koinos.contracts.token.effective_balance_object.past_balances)
  return _internal_mutable_past_balances();
}

// -------------------------------------------------------------------

// burn_event

// bytes from = 1 [(.koinos.btype) = ADDRESS];
inline void burn_event::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& burn_event::from() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.burn_event.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void burn_event::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.token.burn_event.from)
}
inline std::string* burn_event::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.token.burn_event.from)
  return _s;
}
inline const std::string& burn_event::_internal_from() const {
  return from_.Get();
}
inline void burn_event::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* burn_event::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* burn_event::release_from() {
  // @@protoc_insertion_point(field_release:koinos.contracts.token.burn_event.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void burn_event::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.token.burn_event.from)
}

// uint64 value = 2 [jstype = JS_STRING];
inline void burn_event::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 burn_event::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 burn_event::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.burn_event.value)
  return _internal_value();
}
inline void burn_event::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void burn_event::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.burn_event.value)
}

// -------------------------------------------------------------------

// mint_event

// bytes to = 1 [(.koinos.btype) = ADDRESS];
inline void mint_event::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& mint_event::to() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.mint_event.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mint_event::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.token.mint_event.to)
}
inline std::string* mint_event::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.token.mint_event.to)
  return _s;
}
inline const std::string& mint_event::_internal_to() const {
  return to_.Get();
}
inline void mint_event::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* mint_event::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* mint_event::release_to() {
  // @@protoc_insertion_point(field_release:koinos.contracts.token.mint_event.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void mint_event::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.token.mint_event.to)
}

// uint64 value = 2 [jstype = JS_STRING];
inline void mint_event::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 mint_event::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 mint_event::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.mint_event.value)
  return _internal_value();
}
inline void mint_event::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void mint_event::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.mint_event.value)
}

// -------------------------------------------------------------------

// transfer_event

// bytes from = 1 [(.koinos.btype) = ADDRESS];
inline void transfer_event::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& transfer_event::from() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.transfer_event.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transfer_event::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.token.transfer_event.from)
}
inline std::string* transfer_event::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.token.transfer_event.from)
  return _s;
}
inline const std::string& transfer_event::_internal_from() const {
  return from_.Get();
}
inline void transfer_event::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transfer_event::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transfer_event::release_from() {
  // @@protoc_insertion_point(field_release:koinos.contracts.token.transfer_event.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transfer_event::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.token.transfer_event.from)
}

// bytes to = 2 [(.koinos.btype) = ADDRESS];
inline void transfer_event::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& transfer_event::to() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.transfer_event.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transfer_event::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.token.transfer_event.to)
}
inline std::string* transfer_event::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.token.transfer_event.to)
  return _s;
}
inline const std::string& transfer_event::_internal_to() const {
  return to_.Get();
}
inline void transfer_event::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transfer_event::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transfer_event::release_to() {
  // @@protoc_insertion_point(field_release:koinos.contracts.token.transfer_event.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transfer_event::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.token.transfer_event.to)
}

// uint64 value = 3 [jstype = JS_STRING];
inline void transfer_event::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transfer_event::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transfer_event::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.token.transfer_event.value)
  return _internal_value();
}
inline void transfer_event::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void transfer_event::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.token.transfer_event.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace token
}  // namespace contracts
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2ftoken_2ftoken_2eproto
