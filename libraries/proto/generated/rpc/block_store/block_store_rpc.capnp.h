// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: block_store_rpc.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 8000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "../../block_store/block_store.capnp.h"
#include "../../common.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(87da3244a36c507f);
CAPNP_DECLARE_SCHEMA(e354f5c9bb74797c);
CAPNP_DECLARE_SCHEMA(91195b6a31dc7fec);
CAPNP_DECLARE_SCHEMA(d956b2e681b967dc);
CAPNP_DECLARE_SCHEMA(acd894b20e9e9dae);
CAPNP_DECLARE_SCHEMA(974976c0e4871874);
CAPNP_DECLARE_SCHEMA(b92294c30ccbf9c6);
CAPNP_DECLARE_SCHEMA(e3748c65f22dba2c);
CAPNP_DECLARE_SCHEMA(8c7e896efbf33dd7);
CAPNP_DECLARE_SCHEMA(b36e5c1fb370347d);
CAPNP_DECLARE_SCHEMA(e80c1d8ad928139e);
CAPNP_DECLARE_SCHEMA(f2bb9a8c50dad870);
CAPNP_DECLARE_SCHEMA(dc75dd2b3bb315d0);

}  // namespace schemas
}  // namespace capnp

namespace koinos {
namespace rpc {
namespace block_store {

struct BlockStoreReservedRequest {
  BlockStoreReservedRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(87da3244a36c507f, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BlockStoreReservedResponse {
  BlockStoreReservedResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e354f5c9bb74797c, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetBlocksByIDRequest {
  GetBlocksByIDRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91195b6a31dc7fec, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetBlocksByIDResponse {
  GetBlocksByIDResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d956b2e681b967dc, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetBlocksByHeightRequest {
  GetBlocksByHeightRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(acd894b20e9e9dae, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetBlocksByHeightResponse {
  GetBlocksByHeightResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(974976c0e4871874, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AddBlockRequest {
  AddBlockRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b92294c30ccbf9c6, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AddBlockResponse {
  AddBlockResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3748c65f22dba2c, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetHighestBlockRequest {
  GetHighestBlockRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c7e896efbf33dd7, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetHighestBlockResponse {
  GetHighestBlockResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b36e5c1fb370347d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BlockStoreErrorResponse {
  BlockStoreErrorResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e80c1d8ad928139e, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BlockStoreRequest {
  BlockStoreRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    BLOCK_STORE_RESERVED,
    GET_BLOCKS_BY_I_D,
    GET_BLOCKS_BY_HEIGHT,
    ADD_BLOCK,
    GET_HIGHEST_BLOCK,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2bb9a8c50dad870, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BlockStoreResponse {
  BlockStoreResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    BLOCK_STORE_RESERVED,
    ERROR_RESPONSE,
    GET_BLOCKS_BY_I_D,
    GET_BLOCKS_BY_HEIGHT,
    ADD_BLOCK,
    GET_HIGHEST_BLOCK,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dc75dd2b3bb315d0, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class BlockStoreReservedRequest::Reader {
public:
  typedef BlockStoreReservedRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BlockStoreReservedRequest::Builder {
public:
  typedef BlockStoreReservedRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BlockStoreReservedRequest::Pipeline {
public:
  typedef BlockStoreReservedRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BlockStoreReservedResponse::Reader {
public:
  typedef BlockStoreReservedResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BlockStoreReservedResponse::Builder {
public:
  typedef BlockStoreReservedResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BlockStoreReservedResponse::Pipeline {
public:
  typedef BlockStoreReservedResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetBlocksByIDRequest::Reader {
public:
  typedef GetBlocksByIDRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBlockID() const;
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader getBlockID() const;

  inline bool getReturnBlockBlob() const;

  inline bool getReturnReceiptBlob() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetBlocksByIDRequest::Builder {
public:
  typedef GetBlocksByIDRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBlockID();
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder getBlockID();
  inline void setBlockID( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value);
  inline void setBlockID(::kj::ArrayPtr<const  ::capnp::Data::Reader> value);
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder initBlockID(unsigned int size);
  inline void adoptBlockID(::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> disownBlockID();

  inline bool getReturnBlockBlob();
  inline void setReturnBlockBlob(bool value);

  inline bool getReturnReceiptBlob();
  inline void setReturnReceiptBlob(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetBlocksByIDRequest::Pipeline {
public:
  typedef GetBlocksByIDRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetBlocksByIDResponse::Reader {
public:
  typedef GetBlocksByIDResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBlockItems() const;
  inline  ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Reader getBlockItems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetBlocksByIDResponse::Builder {
public:
  typedef GetBlocksByIDResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBlockItems();
  inline  ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Builder getBlockItems();
  inline void setBlockItems( ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Builder initBlockItems(unsigned int size);
  inline void adoptBlockItems(::capnp::Orphan< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>> disownBlockItems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetBlocksByIDResponse::Pipeline {
public:
  typedef GetBlocksByIDResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetBlocksByHeightRequest::Reader {
public:
  typedef GetBlocksByHeightRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeadBlockID() const;
  inline  ::capnp::Data::Reader getHeadBlockID() const;

  inline  ::uint32_t getAncestorStartHeight() const;

  inline  ::uint32_t getNumBlocks() const;

  inline bool getReturnBlock() const;

  inline bool getReturnReceipt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetBlocksByHeightRequest::Builder {
public:
  typedef GetBlocksByHeightRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeadBlockID();
  inline  ::capnp::Data::Builder getHeadBlockID();
  inline void setHeadBlockID( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initHeadBlockID(unsigned int size);
  inline void adoptHeadBlockID(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownHeadBlockID();

  inline  ::uint32_t getAncestorStartHeight();
  inline void setAncestorStartHeight( ::uint32_t value);

  inline  ::uint32_t getNumBlocks();
  inline void setNumBlocks( ::uint32_t value);

  inline bool getReturnBlock();
  inline void setReturnBlock(bool value);

  inline bool getReturnReceipt();
  inline void setReturnReceipt(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetBlocksByHeightRequest::Pipeline {
public:
  typedef GetBlocksByHeightRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetBlocksByHeightResponse::Reader {
public:
  typedef GetBlocksByHeightResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBlockItems() const;
  inline  ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Reader getBlockItems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetBlocksByHeightResponse::Builder {
public:
  typedef GetBlocksByHeightResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBlockItems();
  inline  ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Builder getBlockItems();
  inline void setBlockItems( ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Builder initBlockItems(unsigned int size);
  inline void adoptBlockItems(::capnp::Orphan< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>> disownBlockItems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetBlocksByHeightResponse::Pipeline {
public:
  typedef GetBlocksByHeightResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AddBlockRequest::Reader {
public:
  typedef AddBlockRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBlockToAdd() const;
  inline  ::koinos::block_store::BlockItem::Reader getBlockToAdd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AddBlockRequest::Builder {
public:
  typedef AddBlockRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBlockToAdd();
  inline  ::koinos::block_store::BlockItem::Builder getBlockToAdd();
  inline void setBlockToAdd( ::koinos::block_store::BlockItem::Reader value);
  inline  ::koinos::block_store::BlockItem::Builder initBlockToAdd();
  inline void adoptBlockToAdd(::capnp::Orphan< ::koinos::block_store::BlockItem>&& value);
  inline ::capnp::Orphan< ::koinos::block_store::BlockItem> disownBlockToAdd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AddBlockRequest::Pipeline {
public:
  typedef AddBlockRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::koinos::block_store::BlockItem::Pipeline getBlockToAdd();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AddBlockResponse::Reader {
public:
  typedef AddBlockResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AddBlockResponse::Builder {
public:
  typedef AddBlockResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AddBlockResponse::Pipeline {
public:
  typedef AddBlockResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetHighestBlockRequest::Reader {
public:
  typedef GetHighestBlockRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetHighestBlockRequest::Builder {
public:
  typedef GetHighestBlockRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetHighestBlockRequest::Pipeline {
public:
  typedef GetHighestBlockRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetHighestBlockResponse::Reader {
public:
  typedef GetHighestBlockResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTopology() const;
  inline  ::koinos::BlockTopology::Reader getTopology() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetHighestBlockResponse::Builder {
public:
  typedef GetHighestBlockResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTopology();
  inline  ::koinos::BlockTopology::Builder getTopology();
  inline void setTopology( ::koinos::BlockTopology::Reader value);
  inline  ::koinos::BlockTopology::Builder initTopology();
  inline void adoptTopology(::capnp::Orphan< ::koinos::BlockTopology>&& value);
  inline ::capnp::Orphan< ::koinos::BlockTopology> disownTopology();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetHighestBlockResponse::Pipeline {
public:
  typedef GetHighestBlockResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::koinos::BlockTopology::Pipeline getTopology();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BlockStoreErrorResponse::Reader {
public:
  typedef BlockStoreErrorResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasErrorText() const;
  inline  ::capnp::Text::Reader getErrorText() const;

  inline bool hasErrorData() const;
  inline  ::capnp::Text::Reader getErrorData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BlockStoreErrorResponse::Builder {
public:
  typedef BlockStoreErrorResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasErrorText();
  inline  ::capnp::Text::Builder getErrorText();
  inline void setErrorText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initErrorText(unsigned int size);
  inline void adoptErrorText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownErrorText();

  inline bool hasErrorData();
  inline  ::capnp::Text::Builder getErrorData();
  inline void setErrorData( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initErrorData(unsigned int size);
  inline void adoptErrorData(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownErrorData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BlockStoreErrorResponse::Pipeline {
public:
  typedef BlockStoreErrorResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BlockStoreRequest::Reader {
public:
  typedef BlockStoreRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isBlockStoreReserved() const;
  inline bool hasBlockStoreReserved() const;
  inline  ::koinos::rpc::block_store::BlockStoreReservedRequest::Reader getBlockStoreReserved() const;

  inline bool isGetBlocksByID() const;
  inline bool hasGetBlocksByID() const;
  inline  ::koinos::rpc::block_store::GetBlocksByIDRequest::Reader getGetBlocksByID() const;

  inline bool isGetBlocksByHeight() const;
  inline bool hasGetBlocksByHeight() const;
  inline  ::koinos::rpc::block_store::GetBlocksByHeightRequest::Reader getGetBlocksByHeight() const;

  inline bool isAddBlock() const;
  inline bool hasAddBlock() const;
  inline  ::koinos::rpc::block_store::AddBlockRequest::Reader getAddBlock() const;

  inline bool isGetHighestBlock() const;
  inline bool hasGetHighestBlock() const;
  inline  ::koinos::rpc::block_store::GetHighestBlockRequest::Reader getGetHighestBlock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BlockStoreRequest::Builder {
public:
  typedef BlockStoreRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isBlockStoreReserved();
  inline bool hasBlockStoreReserved();
  inline  ::koinos::rpc::block_store::BlockStoreReservedRequest::Builder getBlockStoreReserved();
  inline void setBlockStoreReserved( ::koinos::rpc::block_store::BlockStoreReservedRequest::Reader value);
  inline  ::koinos::rpc::block_store::BlockStoreReservedRequest::Builder initBlockStoreReserved();
  inline void adoptBlockStoreReserved(::capnp::Orphan< ::koinos::rpc::block_store::BlockStoreReservedRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::block_store::BlockStoreReservedRequest> disownBlockStoreReserved();

  inline bool isGetBlocksByID();
  inline bool hasGetBlocksByID();
  inline  ::koinos::rpc::block_store::GetBlocksByIDRequest::Builder getGetBlocksByID();
  inline void setGetBlocksByID( ::koinos::rpc::block_store::GetBlocksByIDRequest::Reader value);
  inline  ::koinos::rpc::block_store::GetBlocksByIDRequest::Builder initGetBlocksByID();
  inline void adoptGetBlocksByID(::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByIDRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByIDRequest> disownGetBlocksByID();

  inline bool isGetBlocksByHeight();
  inline bool hasGetBlocksByHeight();
  inline  ::koinos::rpc::block_store::GetBlocksByHeightRequest::Builder getGetBlocksByHeight();
  inline void setGetBlocksByHeight( ::koinos::rpc::block_store::GetBlocksByHeightRequest::Reader value);
  inline  ::koinos::rpc::block_store::GetBlocksByHeightRequest::Builder initGetBlocksByHeight();
  inline void adoptGetBlocksByHeight(::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByHeightRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByHeightRequest> disownGetBlocksByHeight();

  inline bool isAddBlock();
  inline bool hasAddBlock();
  inline  ::koinos::rpc::block_store::AddBlockRequest::Builder getAddBlock();
  inline void setAddBlock( ::koinos::rpc::block_store::AddBlockRequest::Reader value);
  inline  ::koinos::rpc::block_store::AddBlockRequest::Builder initAddBlock();
  inline void adoptAddBlock(::capnp::Orphan< ::koinos::rpc::block_store::AddBlockRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::block_store::AddBlockRequest> disownAddBlock();

  inline bool isGetHighestBlock();
  inline bool hasGetHighestBlock();
  inline  ::koinos::rpc::block_store::GetHighestBlockRequest::Builder getGetHighestBlock();
  inline void setGetHighestBlock( ::koinos::rpc::block_store::GetHighestBlockRequest::Reader value);
  inline  ::koinos::rpc::block_store::GetHighestBlockRequest::Builder initGetHighestBlock();
  inline void adoptGetHighestBlock(::capnp::Orphan< ::koinos::rpc::block_store::GetHighestBlockRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::block_store::GetHighestBlockRequest> disownGetHighestBlock();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BlockStoreRequest::Pipeline {
public:
  typedef BlockStoreRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BlockStoreResponse::Reader {
public:
  typedef BlockStoreResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isBlockStoreReserved() const;
  inline bool hasBlockStoreReserved() const;
  inline  ::koinos::rpc::block_store::BlockStoreReservedResponse::Reader getBlockStoreReserved() const;

  inline bool isErrorResponse() const;
  inline bool hasErrorResponse() const;
  inline  ::koinos::rpc::block_store::BlockStoreErrorResponse::Reader getErrorResponse() const;

  inline bool isGetBlocksByID() const;
  inline bool hasGetBlocksByID() const;
  inline  ::koinos::rpc::block_store::GetBlocksByIDResponse::Reader getGetBlocksByID() const;

  inline bool isGetBlocksByHeight() const;
  inline bool hasGetBlocksByHeight() const;
  inline  ::koinos::rpc::block_store::GetBlocksByHeightResponse::Reader getGetBlocksByHeight() const;

  inline bool isAddBlock() const;
  inline bool hasAddBlock() const;
  inline  ::koinos::rpc::block_store::AddBlockResponse::Reader getAddBlock() const;

  inline bool isGetHighestBlock() const;
  inline bool hasGetHighestBlock() const;
  inline  ::koinos::rpc::block_store::GetHighestBlockResponse::Reader getGetHighestBlock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BlockStoreResponse::Builder {
public:
  typedef BlockStoreResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isBlockStoreReserved();
  inline bool hasBlockStoreReserved();
  inline  ::koinos::rpc::block_store::BlockStoreReservedResponse::Builder getBlockStoreReserved();
  inline void setBlockStoreReserved( ::koinos::rpc::block_store::BlockStoreReservedResponse::Reader value);
  inline  ::koinos::rpc::block_store::BlockStoreReservedResponse::Builder initBlockStoreReserved();
  inline void adoptBlockStoreReserved(::capnp::Orphan< ::koinos::rpc::block_store::BlockStoreReservedResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::block_store::BlockStoreReservedResponse> disownBlockStoreReserved();

  inline bool isErrorResponse();
  inline bool hasErrorResponse();
  inline  ::koinos::rpc::block_store::BlockStoreErrorResponse::Builder getErrorResponse();
  inline void setErrorResponse( ::koinos::rpc::block_store::BlockStoreErrorResponse::Reader value);
  inline  ::koinos::rpc::block_store::BlockStoreErrorResponse::Builder initErrorResponse();
  inline void adoptErrorResponse(::capnp::Orphan< ::koinos::rpc::block_store::BlockStoreErrorResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::block_store::BlockStoreErrorResponse> disownErrorResponse();

  inline bool isGetBlocksByID();
  inline bool hasGetBlocksByID();
  inline  ::koinos::rpc::block_store::GetBlocksByIDResponse::Builder getGetBlocksByID();
  inline void setGetBlocksByID( ::koinos::rpc::block_store::GetBlocksByIDResponse::Reader value);
  inline  ::koinos::rpc::block_store::GetBlocksByIDResponse::Builder initGetBlocksByID();
  inline void adoptGetBlocksByID(::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByIDResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByIDResponse> disownGetBlocksByID();

  inline bool isGetBlocksByHeight();
  inline bool hasGetBlocksByHeight();
  inline  ::koinos::rpc::block_store::GetBlocksByHeightResponse::Builder getGetBlocksByHeight();
  inline void setGetBlocksByHeight( ::koinos::rpc::block_store::GetBlocksByHeightResponse::Reader value);
  inline  ::koinos::rpc::block_store::GetBlocksByHeightResponse::Builder initGetBlocksByHeight();
  inline void adoptGetBlocksByHeight(::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByHeightResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByHeightResponse> disownGetBlocksByHeight();

  inline bool isAddBlock();
  inline bool hasAddBlock();
  inline  ::koinos::rpc::block_store::AddBlockResponse::Builder getAddBlock();
  inline void setAddBlock( ::koinos::rpc::block_store::AddBlockResponse::Reader value);
  inline  ::koinos::rpc::block_store::AddBlockResponse::Builder initAddBlock();
  inline void adoptAddBlock(::capnp::Orphan< ::koinos::rpc::block_store::AddBlockResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::block_store::AddBlockResponse> disownAddBlock();

  inline bool isGetHighestBlock();
  inline bool hasGetHighestBlock();
  inline  ::koinos::rpc::block_store::GetHighestBlockResponse::Builder getGetHighestBlock();
  inline void setGetHighestBlock( ::koinos::rpc::block_store::GetHighestBlockResponse::Reader value);
  inline  ::koinos::rpc::block_store::GetHighestBlockResponse::Builder initGetHighestBlock();
  inline void adoptGetHighestBlock(::capnp::Orphan< ::koinos::rpc::block_store::GetHighestBlockResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::block_store::GetHighestBlockResponse> disownGetHighestBlock();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BlockStoreResponse::Pipeline {
public:
  typedef BlockStoreResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool GetBlocksByIDRequest::Reader::hasBlockID() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetBlocksByIDRequest::Builder::hasBlockID() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader GetBlocksByIDRequest::Reader::getBlockID() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder GetBlocksByIDRequest::Builder::getBlockID() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetBlocksByIDRequest::Builder::setBlockID( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void GetBlocksByIDRequest::Builder::setBlockID(::kj::ArrayPtr<const  ::capnp::Data::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder GetBlocksByIDRequest::Builder::initBlockID(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GetBlocksByIDRequest::Builder::adoptBlockID(
    ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> GetBlocksByIDRequest::Builder::disownBlockID() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GetBlocksByIDRequest::Reader::getReturnBlockBlob() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool GetBlocksByIDRequest::Builder::getReturnBlockBlob() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GetBlocksByIDRequest::Builder::setReturnBlockBlob(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GetBlocksByIDRequest::Reader::getReturnReceiptBlob() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool GetBlocksByIDRequest::Builder::getReturnReceiptBlob() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GetBlocksByIDRequest::Builder::setReturnReceiptBlob(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool GetBlocksByIDResponse::Reader::hasBlockItems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetBlocksByIDResponse::Builder::hasBlockItems() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Reader GetBlocksByIDResponse::Reader::getBlockItems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Builder GetBlocksByIDResponse::Builder::getBlockItems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetBlocksByIDResponse::Builder::setBlockItems( ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Builder GetBlocksByIDResponse::Builder::initBlockItems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GetBlocksByIDResponse::Builder::adoptBlockItems(
    ::capnp::Orphan< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>> GetBlocksByIDResponse::Builder::disownBlockItems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GetBlocksByHeightRequest::Reader::hasHeadBlockID() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetBlocksByHeightRequest::Builder::hasHeadBlockID() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader GetBlocksByHeightRequest::Reader::getHeadBlockID() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder GetBlocksByHeightRequest::Builder::getHeadBlockID() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetBlocksByHeightRequest::Builder::setHeadBlockID( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder GetBlocksByHeightRequest::Builder::initHeadBlockID(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GetBlocksByHeightRequest::Builder::adoptHeadBlockID(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> GetBlocksByHeightRequest::Builder::disownHeadBlockID() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t GetBlocksByHeightRequest::Reader::getAncestorStartHeight() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t GetBlocksByHeightRequest::Builder::getAncestorStartHeight() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GetBlocksByHeightRequest::Builder::setAncestorStartHeight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t GetBlocksByHeightRequest::Reader::getNumBlocks() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t GetBlocksByHeightRequest::Builder::getNumBlocks() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GetBlocksByHeightRequest::Builder::setNumBlocks( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool GetBlocksByHeightRequest::Reader::getReturnBlock() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool GetBlocksByHeightRequest::Builder::getReturnBlock() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void GetBlocksByHeightRequest::Builder::setReturnBlock(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool GetBlocksByHeightRequest::Reader::getReturnReceipt() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool GetBlocksByHeightRequest::Builder::getReturnReceipt() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void GetBlocksByHeightRequest::Builder::setReturnReceipt(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool GetBlocksByHeightResponse::Reader::hasBlockItems() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetBlocksByHeightResponse::Builder::hasBlockItems() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Reader GetBlocksByHeightResponse::Reader::getBlockItems() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Builder GetBlocksByHeightResponse::Builder::getBlockItems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetBlocksByHeightResponse::Builder::setBlockItems( ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>::Builder GetBlocksByHeightResponse::Builder::initBlockItems(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GetBlocksByHeightResponse::Builder::adoptBlockItems(
    ::capnp::Orphan< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>> GetBlocksByHeightResponse::Builder::disownBlockItems() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::block_store::BlockItem,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AddBlockRequest::Reader::hasBlockToAdd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AddBlockRequest::Builder::hasBlockToAdd() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::block_store::BlockItem::Reader AddBlockRequest::Reader::getBlockToAdd() const {
  return ::capnp::_::PointerHelpers< ::koinos::block_store::BlockItem>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::block_store::BlockItem::Builder AddBlockRequest::Builder::getBlockToAdd() {
  return ::capnp::_::PointerHelpers< ::koinos::block_store::BlockItem>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::block_store::BlockItem::Pipeline AddBlockRequest::Pipeline::getBlockToAdd() {
  return  ::koinos::block_store::BlockItem::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AddBlockRequest::Builder::setBlockToAdd( ::koinos::block_store::BlockItem::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::block_store::BlockItem>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::block_store::BlockItem::Builder AddBlockRequest::Builder::initBlockToAdd() {
  return ::capnp::_::PointerHelpers< ::koinos::block_store::BlockItem>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AddBlockRequest::Builder::adoptBlockToAdd(
    ::capnp::Orphan< ::koinos::block_store::BlockItem>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::block_store::BlockItem>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::block_store::BlockItem> AddBlockRequest::Builder::disownBlockToAdd() {
  return ::capnp::_::PointerHelpers< ::koinos::block_store::BlockItem>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GetHighestBlockResponse::Reader::hasTopology() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetHighestBlockResponse::Builder::hasTopology() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::BlockTopology::Reader GetHighestBlockResponse::Reader::getTopology() const {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::BlockTopology::Builder GetHighestBlockResponse::Builder::getTopology() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::BlockTopology::Pipeline GetHighestBlockResponse::Pipeline::getTopology() {
  return  ::koinos::BlockTopology::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GetHighestBlockResponse::Builder::setTopology( ::koinos::BlockTopology::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::BlockTopology::Builder GetHighestBlockResponse::Builder::initTopology() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetHighestBlockResponse::Builder::adoptTopology(
    ::capnp::Orphan< ::koinos::BlockTopology>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::BlockTopology> GetHighestBlockResponse::Builder::disownTopology() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BlockStoreErrorResponse::Reader::hasErrorText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockStoreErrorResponse::Builder::hasErrorText() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BlockStoreErrorResponse::Reader::getErrorText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BlockStoreErrorResponse::Builder::getErrorText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreErrorResponse::Builder::setErrorText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BlockStoreErrorResponse::Builder::initErrorText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BlockStoreErrorResponse::Builder::adoptErrorText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BlockStoreErrorResponse::Builder::disownErrorText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BlockStoreErrorResponse::Reader::hasErrorData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool BlockStoreErrorResponse::Builder::hasErrorData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BlockStoreErrorResponse::Reader::getErrorData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BlockStoreErrorResponse::Builder::getErrorData() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void BlockStoreErrorResponse::Builder::setErrorData( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BlockStoreErrorResponse::Builder::initErrorData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void BlockStoreErrorResponse::Builder::adoptErrorData(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BlockStoreErrorResponse::Builder::disownErrorData() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::koinos::rpc::block_store::BlockStoreRequest::Which BlockStoreRequest::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::koinos::rpc::block_store::BlockStoreRequest::Which BlockStoreRequest::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool BlockStoreRequest::Reader::isBlockStoreReserved() const {
  return which() == BlockStoreRequest::BLOCK_STORE_RESERVED;
}
inline bool BlockStoreRequest::Builder::isBlockStoreReserved() {
  return which() == BlockStoreRequest::BLOCK_STORE_RESERVED;
}
inline bool BlockStoreRequest::Reader::hasBlockStoreReserved() const {
  if (which() != BlockStoreRequest::BLOCK_STORE_RESERVED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockStoreRequest::Builder::hasBlockStoreReserved() {
  if (which() != BlockStoreRequest::BLOCK_STORE_RESERVED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::block_store::BlockStoreReservedRequest::Reader BlockStoreRequest::Reader::getBlockStoreReserved() const {
  KJ_IREQUIRE((which() == BlockStoreRequest::BLOCK_STORE_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreReservedRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::block_store::BlockStoreReservedRequest::Builder BlockStoreRequest::Builder::getBlockStoreReserved() {
  KJ_IREQUIRE((which() == BlockStoreRequest::BLOCK_STORE_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreReservedRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreRequest::Builder::setBlockStoreReserved( ::koinos::rpc::block_store::BlockStoreReservedRequest::Reader value) {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::BLOCK_STORE_RESERVED);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreReservedRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::block_store::BlockStoreReservedRequest::Builder BlockStoreRequest::Builder::initBlockStoreReserved() {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::BLOCK_STORE_RESERVED);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreReservedRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreRequest::Builder::adoptBlockStoreReserved(
    ::capnp::Orphan< ::koinos::rpc::block_store::BlockStoreReservedRequest>&& value) {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::BLOCK_STORE_RESERVED);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreReservedRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::block_store::BlockStoreReservedRequest> BlockStoreRequest::Builder::disownBlockStoreReserved() {
  KJ_IREQUIRE((which() == BlockStoreRequest::BLOCK_STORE_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreReservedRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BlockStoreRequest::Reader::isGetBlocksByID() const {
  return which() == BlockStoreRequest::GET_BLOCKS_BY_I_D;
}
inline bool BlockStoreRequest::Builder::isGetBlocksByID() {
  return which() == BlockStoreRequest::GET_BLOCKS_BY_I_D;
}
inline bool BlockStoreRequest::Reader::hasGetBlocksByID() const {
  if (which() != BlockStoreRequest::GET_BLOCKS_BY_I_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockStoreRequest::Builder::hasGetBlocksByID() {
  if (which() != BlockStoreRequest::GET_BLOCKS_BY_I_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::block_store::GetBlocksByIDRequest::Reader BlockStoreRequest::Reader::getGetBlocksByID() const {
  KJ_IREQUIRE((which() == BlockStoreRequest::GET_BLOCKS_BY_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByIDRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::block_store::GetBlocksByIDRequest::Builder BlockStoreRequest::Builder::getGetBlocksByID() {
  KJ_IREQUIRE((which() == BlockStoreRequest::GET_BLOCKS_BY_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByIDRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreRequest::Builder::setGetBlocksByID( ::koinos::rpc::block_store::GetBlocksByIDRequest::Reader value) {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::GET_BLOCKS_BY_I_D);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByIDRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::block_store::GetBlocksByIDRequest::Builder BlockStoreRequest::Builder::initGetBlocksByID() {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::GET_BLOCKS_BY_I_D);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByIDRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreRequest::Builder::adoptGetBlocksByID(
    ::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByIDRequest>&& value) {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::GET_BLOCKS_BY_I_D);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByIDRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByIDRequest> BlockStoreRequest::Builder::disownGetBlocksByID() {
  KJ_IREQUIRE((which() == BlockStoreRequest::GET_BLOCKS_BY_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByIDRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BlockStoreRequest::Reader::isGetBlocksByHeight() const {
  return which() == BlockStoreRequest::GET_BLOCKS_BY_HEIGHT;
}
inline bool BlockStoreRequest::Builder::isGetBlocksByHeight() {
  return which() == BlockStoreRequest::GET_BLOCKS_BY_HEIGHT;
}
inline bool BlockStoreRequest::Reader::hasGetBlocksByHeight() const {
  if (which() != BlockStoreRequest::GET_BLOCKS_BY_HEIGHT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockStoreRequest::Builder::hasGetBlocksByHeight() {
  if (which() != BlockStoreRequest::GET_BLOCKS_BY_HEIGHT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::block_store::GetBlocksByHeightRequest::Reader BlockStoreRequest::Reader::getGetBlocksByHeight() const {
  KJ_IREQUIRE((which() == BlockStoreRequest::GET_BLOCKS_BY_HEIGHT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByHeightRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::block_store::GetBlocksByHeightRequest::Builder BlockStoreRequest::Builder::getGetBlocksByHeight() {
  KJ_IREQUIRE((which() == BlockStoreRequest::GET_BLOCKS_BY_HEIGHT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByHeightRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreRequest::Builder::setGetBlocksByHeight( ::koinos::rpc::block_store::GetBlocksByHeightRequest::Reader value) {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::GET_BLOCKS_BY_HEIGHT);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByHeightRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::block_store::GetBlocksByHeightRequest::Builder BlockStoreRequest::Builder::initGetBlocksByHeight() {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::GET_BLOCKS_BY_HEIGHT);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByHeightRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreRequest::Builder::adoptGetBlocksByHeight(
    ::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByHeightRequest>&& value) {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::GET_BLOCKS_BY_HEIGHT);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByHeightRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByHeightRequest> BlockStoreRequest::Builder::disownGetBlocksByHeight() {
  KJ_IREQUIRE((which() == BlockStoreRequest::GET_BLOCKS_BY_HEIGHT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByHeightRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BlockStoreRequest::Reader::isAddBlock() const {
  return which() == BlockStoreRequest::ADD_BLOCK;
}
inline bool BlockStoreRequest::Builder::isAddBlock() {
  return which() == BlockStoreRequest::ADD_BLOCK;
}
inline bool BlockStoreRequest::Reader::hasAddBlock() const {
  if (which() != BlockStoreRequest::ADD_BLOCK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockStoreRequest::Builder::hasAddBlock() {
  if (which() != BlockStoreRequest::ADD_BLOCK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::block_store::AddBlockRequest::Reader BlockStoreRequest::Reader::getAddBlock() const {
  KJ_IREQUIRE((which() == BlockStoreRequest::ADD_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::AddBlockRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::block_store::AddBlockRequest::Builder BlockStoreRequest::Builder::getAddBlock() {
  KJ_IREQUIRE((which() == BlockStoreRequest::ADD_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::AddBlockRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreRequest::Builder::setAddBlock( ::koinos::rpc::block_store::AddBlockRequest::Reader value) {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::ADD_BLOCK);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::AddBlockRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::block_store::AddBlockRequest::Builder BlockStoreRequest::Builder::initAddBlock() {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::ADD_BLOCK);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::AddBlockRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreRequest::Builder::adoptAddBlock(
    ::capnp::Orphan< ::koinos::rpc::block_store::AddBlockRequest>&& value) {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::ADD_BLOCK);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::AddBlockRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::block_store::AddBlockRequest> BlockStoreRequest::Builder::disownAddBlock() {
  KJ_IREQUIRE((which() == BlockStoreRequest::ADD_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::AddBlockRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BlockStoreRequest::Reader::isGetHighestBlock() const {
  return which() == BlockStoreRequest::GET_HIGHEST_BLOCK;
}
inline bool BlockStoreRequest::Builder::isGetHighestBlock() {
  return which() == BlockStoreRequest::GET_HIGHEST_BLOCK;
}
inline bool BlockStoreRequest::Reader::hasGetHighestBlock() const {
  if (which() != BlockStoreRequest::GET_HIGHEST_BLOCK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockStoreRequest::Builder::hasGetHighestBlock() {
  if (which() != BlockStoreRequest::GET_HIGHEST_BLOCK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::block_store::GetHighestBlockRequest::Reader BlockStoreRequest::Reader::getGetHighestBlock() const {
  KJ_IREQUIRE((which() == BlockStoreRequest::GET_HIGHEST_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetHighestBlockRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::block_store::GetHighestBlockRequest::Builder BlockStoreRequest::Builder::getGetHighestBlock() {
  KJ_IREQUIRE((which() == BlockStoreRequest::GET_HIGHEST_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetHighestBlockRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreRequest::Builder::setGetHighestBlock( ::koinos::rpc::block_store::GetHighestBlockRequest::Reader value) {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::GET_HIGHEST_BLOCK);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetHighestBlockRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::block_store::GetHighestBlockRequest::Builder BlockStoreRequest::Builder::initGetHighestBlock() {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::GET_HIGHEST_BLOCK);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetHighestBlockRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreRequest::Builder::adoptGetHighestBlock(
    ::capnp::Orphan< ::koinos::rpc::block_store::GetHighestBlockRequest>&& value) {
  _builder.setDataField<BlockStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreRequest::GET_HIGHEST_BLOCK);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetHighestBlockRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::block_store::GetHighestBlockRequest> BlockStoreRequest::Builder::disownGetHighestBlock() {
  KJ_IREQUIRE((which() == BlockStoreRequest::GET_HIGHEST_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetHighestBlockRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::koinos::rpc::block_store::BlockStoreResponse::Which BlockStoreResponse::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::koinos::rpc::block_store::BlockStoreResponse::Which BlockStoreResponse::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool BlockStoreResponse::Reader::isBlockStoreReserved() const {
  return which() == BlockStoreResponse::BLOCK_STORE_RESERVED;
}
inline bool BlockStoreResponse::Builder::isBlockStoreReserved() {
  return which() == BlockStoreResponse::BLOCK_STORE_RESERVED;
}
inline bool BlockStoreResponse::Reader::hasBlockStoreReserved() const {
  if (which() != BlockStoreResponse::BLOCK_STORE_RESERVED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockStoreResponse::Builder::hasBlockStoreReserved() {
  if (which() != BlockStoreResponse::BLOCK_STORE_RESERVED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::block_store::BlockStoreReservedResponse::Reader BlockStoreResponse::Reader::getBlockStoreReserved() const {
  KJ_IREQUIRE((which() == BlockStoreResponse::BLOCK_STORE_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreReservedResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::block_store::BlockStoreReservedResponse::Builder BlockStoreResponse::Builder::getBlockStoreReserved() {
  KJ_IREQUIRE((which() == BlockStoreResponse::BLOCK_STORE_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreReservedResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreResponse::Builder::setBlockStoreReserved( ::koinos::rpc::block_store::BlockStoreReservedResponse::Reader value) {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::BLOCK_STORE_RESERVED);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreReservedResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::block_store::BlockStoreReservedResponse::Builder BlockStoreResponse::Builder::initBlockStoreReserved() {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::BLOCK_STORE_RESERVED);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreReservedResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreResponse::Builder::adoptBlockStoreReserved(
    ::capnp::Orphan< ::koinos::rpc::block_store::BlockStoreReservedResponse>&& value) {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::BLOCK_STORE_RESERVED);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreReservedResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::block_store::BlockStoreReservedResponse> BlockStoreResponse::Builder::disownBlockStoreReserved() {
  KJ_IREQUIRE((which() == BlockStoreResponse::BLOCK_STORE_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreReservedResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BlockStoreResponse::Reader::isErrorResponse() const {
  return which() == BlockStoreResponse::ERROR_RESPONSE;
}
inline bool BlockStoreResponse::Builder::isErrorResponse() {
  return which() == BlockStoreResponse::ERROR_RESPONSE;
}
inline bool BlockStoreResponse::Reader::hasErrorResponse() const {
  if (which() != BlockStoreResponse::ERROR_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockStoreResponse::Builder::hasErrorResponse() {
  if (which() != BlockStoreResponse::ERROR_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::block_store::BlockStoreErrorResponse::Reader BlockStoreResponse::Reader::getErrorResponse() const {
  KJ_IREQUIRE((which() == BlockStoreResponse::ERROR_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreErrorResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::block_store::BlockStoreErrorResponse::Builder BlockStoreResponse::Builder::getErrorResponse() {
  KJ_IREQUIRE((which() == BlockStoreResponse::ERROR_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreErrorResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreResponse::Builder::setErrorResponse( ::koinos::rpc::block_store::BlockStoreErrorResponse::Reader value) {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::ERROR_RESPONSE);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreErrorResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::block_store::BlockStoreErrorResponse::Builder BlockStoreResponse::Builder::initErrorResponse() {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::ERROR_RESPONSE);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreErrorResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreResponse::Builder::adoptErrorResponse(
    ::capnp::Orphan< ::koinos::rpc::block_store::BlockStoreErrorResponse>&& value) {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::ERROR_RESPONSE);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreErrorResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::block_store::BlockStoreErrorResponse> BlockStoreResponse::Builder::disownErrorResponse() {
  KJ_IREQUIRE((which() == BlockStoreResponse::ERROR_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::BlockStoreErrorResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BlockStoreResponse::Reader::isGetBlocksByID() const {
  return which() == BlockStoreResponse::GET_BLOCKS_BY_I_D;
}
inline bool BlockStoreResponse::Builder::isGetBlocksByID() {
  return which() == BlockStoreResponse::GET_BLOCKS_BY_I_D;
}
inline bool BlockStoreResponse::Reader::hasGetBlocksByID() const {
  if (which() != BlockStoreResponse::GET_BLOCKS_BY_I_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockStoreResponse::Builder::hasGetBlocksByID() {
  if (which() != BlockStoreResponse::GET_BLOCKS_BY_I_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::block_store::GetBlocksByIDResponse::Reader BlockStoreResponse::Reader::getGetBlocksByID() const {
  KJ_IREQUIRE((which() == BlockStoreResponse::GET_BLOCKS_BY_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByIDResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::block_store::GetBlocksByIDResponse::Builder BlockStoreResponse::Builder::getGetBlocksByID() {
  KJ_IREQUIRE((which() == BlockStoreResponse::GET_BLOCKS_BY_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByIDResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreResponse::Builder::setGetBlocksByID( ::koinos::rpc::block_store::GetBlocksByIDResponse::Reader value) {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::GET_BLOCKS_BY_I_D);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByIDResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::block_store::GetBlocksByIDResponse::Builder BlockStoreResponse::Builder::initGetBlocksByID() {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::GET_BLOCKS_BY_I_D);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByIDResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreResponse::Builder::adoptGetBlocksByID(
    ::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByIDResponse>&& value) {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::GET_BLOCKS_BY_I_D);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByIDResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByIDResponse> BlockStoreResponse::Builder::disownGetBlocksByID() {
  KJ_IREQUIRE((which() == BlockStoreResponse::GET_BLOCKS_BY_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByIDResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BlockStoreResponse::Reader::isGetBlocksByHeight() const {
  return which() == BlockStoreResponse::GET_BLOCKS_BY_HEIGHT;
}
inline bool BlockStoreResponse::Builder::isGetBlocksByHeight() {
  return which() == BlockStoreResponse::GET_BLOCKS_BY_HEIGHT;
}
inline bool BlockStoreResponse::Reader::hasGetBlocksByHeight() const {
  if (which() != BlockStoreResponse::GET_BLOCKS_BY_HEIGHT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockStoreResponse::Builder::hasGetBlocksByHeight() {
  if (which() != BlockStoreResponse::GET_BLOCKS_BY_HEIGHT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::block_store::GetBlocksByHeightResponse::Reader BlockStoreResponse::Reader::getGetBlocksByHeight() const {
  KJ_IREQUIRE((which() == BlockStoreResponse::GET_BLOCKS_BY_HEIGHT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByHeightResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::block_store::GetBlocksByHeightResponse::Builder BlockStoreResponse::Builder::getGetBlocksByHeight() {
  KJ_IREQUIRE((which() == BlockStoreResponse::GET_BLOCKS_BY_HEIGHT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByHeightResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreResponse::Builder::setGetBlocksByHeight( ::koinos::rpc::block_store::GetBlocksByHeightResponse::Reader value) {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::GET_BLOCKS_BY_HEIGHT);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByHeightResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::block_store::GetBlocksByHeightResponse::Builder BlockStoreResponse::Builder::initGetBlocksByHeight() {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::GET_BLOCKS_BY_HEIGHT);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByHeightResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreResponse::Builder::adoptGetBlocksByHeight(
    ::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByHeightResponse>&& value) {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::GET_BLOCKS_BY_HEIGHT);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByHeightResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::block_store::GetBlocksByHeightResponse> BlockStoreResponse::Builder::disownGetBlocksByHeight() {
  KJ_IREQUIRE((which() == BlockStoreResponse::GET_BLOCKS_BY_HEIGHT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetBlocksByHeightResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BlockStoreResponse::Reader::isAddBlock() const {
  return which() == BlockStoreResponse::ADD_BLOCK;
}
inline bool BlockStoreResponse::Builder::isAddBlock() {
  return which() == BlockStoreResponse::ADD_BLOCK;
}
inline bool BlockStoreResponse::Reader::hasAddBlock() const {
  if (which() != BlockStoreResponse::ADD_BLOCK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockStoreResponse::Builder::hasAddBlock() {
  if (which() != BlockStoreResponse::ADD_BLOCK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::block_store::AddBlockResponse::Reader BlockStoreResponse::Reader::getAddBlock() const {
  KJ_IREQUIRE((which() == BlockStoreResponse::ADD_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::AddBlockResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::block_store::AddBlockResponse::Builder BlockStoreResponse::Builder::getAddBlock() {
  KJ_IREQUIRE((which() == BlockStoreResponse::ADD_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::AddBlockResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreResponse::Builder::setAddBlock( ::koinos::rpc::block_store::AddBlockResponse::Reader value) {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::ADD_BLOCK);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::AddBlockResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::block_store::AddBlockResponse::Builder BlockStoreResponse::Builder::initAddBlock() {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::ADD_BLOCK);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::AddBlockResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreResponse::Builder::adoptAddBlock(
    ::capnp::Orphan< ::koinos::rpc::block_store::AddBlockResponse>&& value) {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::ADD_BLOCK);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::AddBlockResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::block_store::AddBlockResponse> BlockStoreResponse::Builder::disownAddBlock() {
  KJ_IREQUIRE((which() == BlockStoreResponse::ADD_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::AddBlockResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BlockStoreResponse::Reader::isGetHighestBlock() const {
  return which() == BlockStoreResponse::GET_HIGHEST_BLOCK;
}
inline bool BlockStoreResponse::Builder::isGetHighestBlock() {
  return which() == BlockStoreResponse::GET_HIGHEST_BLOCK;
}
inline bool BlockStoreResponse::Reader::hasGetHighestBlock() const {
  if (which() != BlockStoreResponse::GET_HIGHEST_BLOCK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockStoreResponse::Builder::hasGetHighestBlock() {
  if (which() != BlockStoreResponse::GET_HIGHEST_BLOCK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::block_store::GetHighestBlockResponse::Reader BlockStoreResponse::Reader::getGetHighestBlock() const {
  KJ_IREQUIRE((which() == BlockStoreResponse::GET_HIGHEST_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetHighestBlockResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::block_store::GetHighestBlockResponse::Builder BlockStoreResponse::Builder::getGetHighestBlock() {
  KJ_IREQUIRE((which() == BlockStoreResponse::GET_HIGHEST_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetHighestBlockResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreResponse::Builder::setGetHighestBlock( ::koinos::rpc::block_store::GetHighestBlockResponse::Reader value) {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::GET_HIGHEST_BLOCK);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetHighestBlockResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::block_store::GetHighestBlockResponse::Builder BlockStoreResponse::Builder::initGetHighestBlock() {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::GET_HIGHEST_BLOCK);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetHighestBlockResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockStoreResponse::Builder::adoptGetHighestBlock(
    ::capnp::Orphan< ::koinos::rpc::block_store::GetHighestBlockResponse>&& value) {
  _builder.setDataField<BlockStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, BlockStoreResponse::GET_HIGHEST_BLOCK);
  ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetHighestBlockResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::block_store::GetHighestBlockResponse> BlockStoreResponse::Builder::disownGetHighestBlock() {
  KJ_IREQUIRE((which() == BlockStoreResponse::GET_HIGHEST_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::block_store::GetHighestBlockResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

