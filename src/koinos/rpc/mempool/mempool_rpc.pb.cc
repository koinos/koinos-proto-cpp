// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/mempool/mempool_rpc.proto

#include "koinos/rpc/mempool/mempool_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace rpc {
namespace mempool {
constexpr pending_transaction::pending_transaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(nullptr)
  , disk_storage_used_(uint64_t{0u})
  , network_bandwidth_used_(uint64_t{0u})
  , compute_bandwidth_used_(uint64_t{0u}){}
struct pending_transactionDefaultTypeInternal {
  constexpr pending_transactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pending_transactionDefaultTypeInternal() {}
  union {
    pending_transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pending_transactionDefaultTypeInternal _pending_transaction_default_instance_;
constexpr check_pending_account_resources_request::check_pending_account_resources_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_payer_rc_(uint64_t{0u})
  , rc_limit_(uint64_t{0u}){}
struct check_pending_account_resources_requestDefaultTypeInternal {
  constexpr check_pending_account_resources_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~check_pending_account_resources_requestDefaultTypeInternal() {}
  union {
    check_pending_account_resources_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT check_pending_account_resources_requestDefaultTypeInternal _check_pending_account_resources_request_default_instance_;
constexpr check_pending_account_resources_response::check_pending_account_resources_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct check_pending_account_resources_responseDefaultTypeInternal {
  constexpr check_pending_account_resources_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~check_pending_account_resources_responseDefaultTypeInternal() {}
  union {
    check_pending_account_resources_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT check_pending_account_resources_responseDefaultTypeInternal _check_pending_account_resources_response_default_instance_;
constexpr get_pending_transactions_request::get_pending_transactions_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , limit_(uint64_t{0u}){}
struct get_pending_transactions_requestDefaultTypeInternal {
  constexpr get_pending_transactions_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_pending_transactions_requestDefaultTypeInternal() {}
  union {
    get_pending_transactions_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_pending_transactions_requestDefaultTypeInternal _get_pending_transactions_request_default_instance_;
constexpr get_pending_transactions_response::get_pending_transactions_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pending_transactions_(){}
struct get_pending_transactions_responseDefaultTypeInternal {
  constexpr get_pending_transactions_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_pending_transactions_responseDefaultTypeInternal() {}
  union {
    get_pending_transactions_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_pending_transactions_responseDefaultTypeInternal _get_pending_transactions_response_default_instance_;
constexpr check_account_nonce_request::check_account_nonce_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payee_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nonce_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct check_account_nonce_requestDefaultTypeInternal {
  constexpr check_account_nonce_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~check_account_nonce_requestDefaultTypeInternal() {}
  union {
    check_account_nonce_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT check_account_nonce_requestDefaultTypeInternal _check_account_nonce_request_default_instance_;
constexpr check_account_nonce_response::check_account_nonce_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct check_account_nonce_responseDefaultTypeInternal {
  constexpr check_account_nonce_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~check_account_nonce_responseDefaultTypeInternal() {}
  union {
    check_account_nonce_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT check_account_nonce_responseDefaultTypeInternal _check_account_nonce_response_default_instance_;
constexpr get_reserved_account_rc_request::get_reserved_account_rc_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_reserved_account_rc_requestDefaultTypeInternal {
  constexpr get_reserved_account_rc_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_reserved_account_rc_requestDefaultTypeInternal() {}
  union {
    get_reserved_account_rc_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_reserved_account_rc_requestDefaultTypeInternal _get_reserved_account_rc_request_default_instance_;
constexpr get_reserved_account_rc_response::get_reserved_account_rc_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rc_(uint64_t{0u}){}
struct get_reserved_account_rc_responseDefaultTypeInternal {
  constexpr get_reserved_account_rc_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_reserved_account_rc_responseDefaultTypeInternal() {}
  union {
    get_reserved_account_rc_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_reserved_account_rc_responseDefaultTypeInternal _get_reserved_account_rc_response_default_instance_;
constexpr mempool_request::mempool_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct mempool_requestDefaultTypeInternal {
  constexpr mempool_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mempool_requestDefaultTypeInternal() {}
  union {
    mempool_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mempool_requestDefaultTypeInternal _mempool_request_default_instance_;
constexpr mempool_response::mempool_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct mempool_responseDefaultTypeInternal {
  constexpr mempool_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mempool_responseDefaultTypeInternal() {}
  union {
    mempool_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mempool_responseDefaultTypeInternal _mempool_response_default_instance_;
}  // namespace mempool
}  // namespace rpc
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::pending_transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::pending_transaction, transaction_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::pending_transaction, disk_storage_used_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::pending_transaction, network_bandwidth_used_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::pending_transaction, compute_bandwidth_used_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_pending_account_resources_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_pending_account_resources_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_pending_account_resources_request, payer_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_pending_account_resources_request, max_payer_rc_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_pending_account_resources_request, rc_limit_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_pending_account_resources_request, block_id_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_pending_account_resources_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_pending_account_resources_response, success_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::get_pending_transactions_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::get_pending_transactions_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::get_pending_transactions_request, limit_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::get_pending_transactions_request, block_id_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::get_pending_transactions_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::get_pending_transactions_response, pending_transactions_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_account_nonce_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_account_nonce_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_account_nonce_request, payee_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_account_nonce_request, nonce_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_account_nonce_request, block_id_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_account_nonce_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::check_account_nonce_response, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::get_reserved_account_rc_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::get_reserved_account_rc_request, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::get_reserved_account_rc_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::get_reserved_account_rc_response, rc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::mempool_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::mempool_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::mempool_request, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::mempool_response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::mempool_response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::mempool::mempool_response, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::rpc::mempool::pending_transaction)},
  { 9, 18, sizeof(::koinos::rpc::mempool::check_pending_account_resources_request)},
  { 22, -1, sizeof(::koinos::rpc::mempool::check_pending_account_resources_response)},
  { 28, 35, sizeof(::koinos::rpc::mempool::get_pending_transactions_request)},
  { 37, -1, sizeof(::koinos::rpc::mempool::get_pending_transactions_response)},
  { 43, 51, sizeof(::koinos::rpc::mempool::check_account_nonce_request)},
  { 54, -1, sizeof(::koinos::rpc::mempool::check_account_nonce_response)},
  { 60, -1, sizeof(::koinos::rpc::mempool::get_reserved_account_rc_request)},
  { 66, -1, sizeof(::koinos::rpc::mempool::get_reserved_account_rc_response)},
  { 72, -1, sizeof(::koinos::rpc::mempool::mempool_request)},
  { 83, -1, sizeof(::koinos::rpc::mempool::mempool_response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::mempool::_pending_transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::mempool::_check_pending_account_resources_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::mempool::_check_pending_account_resources_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::mempool::_get_pending_transactions_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::mempool::_get_pending_transactions_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::mempool::_check_account_nonce_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::mempool::_check_account_nonce_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::mempool::_get_reserved_account_rc_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::mempool::_get_reserved_account_rc_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::mempool::_mempool_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::mempool::_mempool_response_default_instance_),
};

const char descriptor_table_protodef_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$koinos/rpc/mempool/mempool_rpc.proto\022\022"
  "koinos.rpc.mempool\032\024koinos/options.proto"
  "\032\036koinos/protocol/protocol.proto\032\024koinos"
  "/rpc/rpc.proto\"\257\001\n\023pending_transaction\0221"
  "\n\013transaction\030\001 \001(\0132\034.koinos.protocol.tr"
  "ansaction\022\035\n\021disk_storage_used\030\002 \001(\004B\0020\001"
  "\022\"\n\026network_bandwidth_used\030\003 \001(\004B\0020\001\022\"\n\026"
  "compute_bandwidth_used\030\004 \001(\004B\0020\001\"\230\001\n\'che"
  "ck_pending_account_resources_request\022\023\n\005"
  "payer\030\001 \001(\014B\004\200\265\030\006\022\030\n\014max_payer_rc\030\002 \001(\004B"
  "\0020\001\022\024\n\010rc_limit\030\003 \001(\004B\0020\001\022\033\n\010block_id\030\004 "
  "\001(\014B\004\200\265\030\003H\000\210\001\001B\013\n\t_block_id\";\n(check_pen"
  "ding_account_resources_response\022\017\n\007succe"
  "ss\030\001 \001(\010\"_\n get_pending_transactions_req"
  "uest\022\021\n\005limit\030\001 \001(\004B\0020\001\022\033\n\010block_id\030\002 \001("
  "\014B\004\200\265\030\003H\000\210\001\001B\013\n\t_block_id\"j\n!get_pending"
  "_transactions_response\022E\n\024pending_transa"
  "ctions\030\001 \003(\0132\'.koinos.rpc.mempool.pendin"
  "g_transaction\"k\n\033check_account_nonce_req"
  "uest\022\023\n\005payee\030\001 \001(\014B\004\200\265\030\006\022\r\n\005nonce\030\002 \001(\014"
  "\022\033\n\010block_id\030\003 \001(\014B\004\200\265\030\003H\000\210\001\001B\013\n\t_block_"
  "id\"/\n\034check_account_nonce_response\022\017\n\007su"
  "ccess\030\001 \001(\010\"8\n\037get_reserved_account_rc_r"
  "equest\022\025\n\007account\030\001 \001(\014B\004\200\265\030\006\".\n get_res"
  "erved_account_rc_response\022\n\n\002rc\030\001 \001(\004\"\264\003"
  "\n\017mempool_request\022,\n\010reserved\030\001 \001(\0132\030.ko"
  "inos.rpc.reserved_rpcH\000\022f\n\037check_pending"
  "_account_resources\030\002 \001(\0132;.koinos.rpc.me"
  "mpool.check_pending_account_resources_re"
  "questH\000\022X\n\030get_pending_transactions\030\003 \001("
  "\01324.koinos.rpc.mempool.get_pending_trans"
  "actions_requestH\000\022N\n\023check_account_nonce"
  "\030\004 \001(\0132/.koinos.rpc.mempool.check_accoun"
  "t_nonce_requestH\000\022V\n\027get_reserved_accoun"
  "t_rc\030\005 \001(\01323.koinos.rpc.mempool.get_rese"
  "rved_account_rc_requestH\000B\t\n\007request\"\345\003\n"
  "\020mempool_response\022,\n\010reserved\030\001 \001(\0132\030.ko"
  "inos.rpc.reserved_rpcH\000\022)\n\005error\030\002 \001(\0132\030"
  ".koinos.rpc.error_statusH\000\022g\n\037check_pend"
  "ing_account_resources\030\003 \001(\0132<.koinos.rpc"
  ".mempool.check_pending_account_resources"
  "_responseH\000\022Y\n\030get_pending_transactions\030"
  "\004 \001(\01325.koinos.rpc.mempool.get_pending_t"
  "ransactions_responseH\000\022O\n\023check_account_"
  "nonce\030\005 \001(\01320.koinos.rpc.mempool.check_a"
  "ccount_nonce_responseH\000\022W\n\027get_reserved_"
  "account_rc\030\006 \001(\01324.koinos.rpc.mempool.ge"
  "t_reserved_account_rc_responseH\000B\n\n\010resp"
  "onseB=Z;github.com/koinos/koinos-proto-g"
  "olang/v2/koinos/rpc/mempoolb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_deps[3] = {
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto,
  &::descriptor_table_koinos_2frpc_2frpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto = {
  false, false, 1995, descriptor_table_protodef_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto, "koinos/rpc/mempool/mempool_rpc.proto", 
  &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_once, descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_deps, 3, 11,
  schemas, file_default_instances, TableStruct_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto::offsets,
  file_level_metadata_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto, file_level_enum_descriptors_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto, file_level_service_descriptors_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_getter() {
  return &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto(&descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto);
namespace koinos {
namespace rpc {
namespace mempool {

// ===================================================================

class pending_transaction::_Internal {
 public:
  static const ::koinos::protocol::transaction& transaction(const pending_transaction* msg);
};

const ::koinos::protocol::transaction&
pending_transaction::_Internal::transaction(const pending_transaction* msg) {
  return *msg->transaction_;
}
void pending_transaction::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
pending_transaction::pending_transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.mempool.pending_transaction)
}
pending_transaction::pending_transaction(const pending_transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::koinos::protocol::transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  ::memcpy(&disk_storage_used_, &from.disk_storage_used_,
    static_cast<size_t>(reinterpret_cast<char*>(&compute_bandwidth_used_) -
    reinterpret_cast<char*>(&disk_storage_used_)) + sizeof(compute_bandwidth_used_));
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.mempool.pending_transaction)
}

inline void pending_transaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compute_bandwidth_used_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(compute_bandwidth_used_));
}

pending_transaction::~pending_transaction() {
  // @@protoc_insertion_point(destructor:koinos.rpc.mempool.pending_transaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void pending_transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void pending_transaction::ArenaDtor(void* object) {
  pending_transaction* _this = reinterpret_cast< pending_transaction* >(object);
  (void)_this;
}
void pending_transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pending_transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pending_transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.mempool.pending_transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  ::memset(&disk_storage_used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compute_bandwidth_used_) -
      reinterpret_cast<char*>(&disk_storage_used_)) + sizeof(compute_bandwidth_used_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pending_transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 disk_storage_used = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          disk_storage_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 network_bandwidth_used = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          network_bandwidth_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 compute_bandwidth_used = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          compute_bandwidth_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pending_transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.mempool.pending_transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // uint64 disk_storage_used = 2 [jstype = JS_STRING];
  if (this->_internal_disk_storage_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_disk_storage_used(), target);
  }

  // uint64 network_bandwidth_used = 3 [jstype = JS_STRING];
  if (this->_internal_network_bandwidth_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_network_bandwidth_used(), target);
  }

  // uint64 compute_bandwidth_used = 4 [jstype = JS_STRING];
  if (this->_internal_compute_bandwidth_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_compute_bandwidth_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.mempool.pending_transaction)
  return target;
}

size_t pending_transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.mempool.pending_transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // uint64 disk_storage_used = 2 [jstype = JS_STRING];
  if (this->_internal_disk_storage_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_disk_storage_used());
  }

  // uint64 network_bandwidth_used = 3 [jstype = JS_STRING];
  if (this->_internal_network_bandwidth_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_network_bandwidth_used());
  }

  // uint64 compute_bandwidth_used = 4 [jstype = JS_STRING];
  if (this->_internal_compute_bandwidth_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_compute_bandwidth_used());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pending_transaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    pending_transaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pending_transaction::GetClassData() const { return &_class_data_; }

void pending_transaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<pending_transaction *>(to)->MergeFrom(
      static_cast<const pending_transaction &>(from));
}


void pending_transaction::MergeFrom(const pending_transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.mempool.pending_transaction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::koinos::protocol::transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_disk_storage_used() != 0) {
    _internal_set_disk_storage_used(from._internal_disk_storage_used());
  }
  if (from._internal_network_bandwidth_used() != 0) {
    _internal_set_network_bandwidth_used(from._internal_network_bandwidth_used());
  }
  if (from._internal_compute_bandwidth_used() != 0) {
    _internal_set_compute_bandwidth_used(from._internal_compute_bandwidth_used());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pending_transaction::CopyFrom(const pending_transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.mempool.pending_transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pending_transaction::IsInitialized() const {
  return true;
}

void pending_transaction::InternalSwap(pending_transaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pending_transaction, compute_bandwidth_used_)
      + sizeof(pending_transaction::compute_bandwidth_used_)
      - PROTOBUF_FIELD_OFFSET(pending_transaction, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pending_transaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto[0]);
}

// ===================================================================

class check_pending_account_resources_request::_Internal {
 public:
  using HasBits = decltype(std::declval<check_pending_account_resources_request>()._has_bits_);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

check_pending_account_resources_request::check_pending_account_resources_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.mempool.check_pending_account_resources_request)
}
check_pending_account_resources_request::check_pending_account_resources_request(const check_pending_account_resources_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payer().empty()) {
    payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payer(), 
      GetArenaForAllocation());
  }
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_block_id()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&max_payer_rc_, &from.max_payer_rc_,
    static_cast<size_t>(reinterpret_cast<char*>(&rc_limit_) -
    reinterpret_cast<char*>(&max_payer_rc_)) + sizeof(rc_limit_));
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.mempool.check_pending_account_resources_request)
}

inline void check_pending_account_resources_request::SharedCtor() {
payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_payer_rc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rc_limit_) -
    reinterpret_cast<char*>(&max_payer_rc_)) + sizeof(rc_limit_));
}

check_pending_account_resources_request::~check_pending_account_resources_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.mempool.check_pending_account_resources_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void check_pending_account_resources_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void check_pending_account_resources_request::ArenaDtor(void* object) {
  check_pending_account_resources_request* _this = reinterpret_cast< check_pending_account_resources_request* >(object);
  (void)_this;
}
void check_pending_account_resources_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void check_pending_account_resources_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void check_pending_account_resources_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.mempool.check_pending_account_resources_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payer_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    block_id_.ClearNonDefaultToEmpty();
  }
  ::memset(&max_payer_rc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_limit_) -
      reinterpret_cast<char*>(&max_payer_rc_)) + sizeof(rc_limit_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* check_pending_account_resources_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payer = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_payer_rc = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_payer_rc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rc_limit = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rc_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes block_id = 4 [(.koinos.btype) = BLOCK_ID];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* check_pending_account_resources_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.mempool.check_pending_account_resources_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payer = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_payer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payer(), target);
  }

  // uint64 max_payer_rc = 2 [jstype = JS_STRING];
  if (this->_internal_max_payer_rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_payer_rc(), target);
  }

  // uint64 rc_limit = 3 [jstype = JS_STRING];
  if (this->_internal_rc_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_rc_limit(), target);
  }

  // optional bytes block_id = 4 [(.koinos.btype) = BLOCK_ID];
  if (_internal_has_block_id()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.mempool.check_pending_account_resources_request)
  return target;
}

size_t check_pending_account_resources_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.mempool.check_pending_account_resources_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payer = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_payer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payer());
  }

  // optional bytes block_id = 4 [(.koinos.btype) = BLOCK_ID];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // uint64 max_payer_rc = 2 [jstype = JS_STRING];
  if (this->_internal_max_payer_rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_payer_rc());
  }

  // uint64 rc_limit = 3 [jstype = JS_STRING];
  if (this->_internal_rc_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rc_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData check_pending_account_resources_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    check_pending_account_resources_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*check_pending_account_resources_request::GetClassData() const { return &_class_data_; }

void check_pending_account_resources_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<check_pending_account_resources_request *>(to)->MergeFrom(
      static_cast<const check_pending_account_resources_request &>(from));
}


void check_pending_account_resources_request::MergeFrom(const check_pending_account_resources_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.mempool.check_pending_account_resources_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payer().empty()) {
    _internal_set_payer(from._internal_payer());
  }
  if (from._internal_has_block_id()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (from._internal_max_payer_rc() != 0) {
    _internal_set_max_payer_rc(from._internal_max_payer_rc());
  }
  if (from._internal_rc_limit() != 0) {
    _internal_set_rc_limit(from._internal_rc_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void check_pending_account_resources_request::CopyFrom(const check_pending_account_resources_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.mempool.check_pending_account_resources_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool check_pending_account_resources_request::IsInitialized() const {
  return true;
}

void check_pending_account_resources_request::InternalSwap(check_pending_account_resources_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payer_, GetArenaForAllocation(),
      &other->payer_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, GetArenaForAllocation(),
      &other->block_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(check_pending_account_resources_request, rc_limit_)
      + sizeof(check_pending_account_resources_request::rc_limit_)
      - PROTOBUF_FIELD_OFFSET(check_pending_account_resources_request, max_payer_rc_)>(
          reinterpret_cast<char*>(&max_payer_rc_),
          reinterpret_cast<char*>(&other->max_payer_rc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata check_pending_account_resources_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto[1]);
}

// ===================================================================

class check_pending_account_resources_response::_Internal {
 public:
};

check_pending_account_resources_response::check_pending_account_resources_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.mempool.check_pending_account_resources_response)
}
check_pending_account_resources_response::check_pending_account_resources_response(const check_pending_account_resources_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.mempool.check_pending_account_resources_response)
}

inline void check_pending_account_resources_response::SharedCtor() {
success_ = false;
}

check_pending_account_resources_response::~check_pending_account_resources_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.mempool.check_pending_account_resources_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void check_pending_account_resources_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void check_pending_account_resources_response::ArenaDtor(void* object) {
  check_pending_account_resources_response* _this = reinterpret_cast< check_pending_account_resources_response* >(object);
  (void)_this;
}
void check_pending_account_resources_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void check_pending_account_resources_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void check_pending_account_resources_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.mempool.check_pending_account_resources_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* check_pending_account_resources_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* check_pending_account_resources_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.mempool.check_pending_account_resources_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.mempool.check_pending_account_resources_response)
  return target;
}

size_t check_pending_account_resources_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.mempool.check_pending_account_resources_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData check_pending_account_resources_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    check_pending_account_resources_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*check_pending_account_resources_response::GetClassData() const { return &_class_data_; }

void check_pending_account_resources_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<check_pending_account_resources_response *>(to)->MergeFrom(
      static_cast<const check_pending_account_resources_response &>(from));
}


void check_pending_account_resources_response::MergeFrom(const check_pending_account_resources_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.mempool.check_pending_account_resources_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void check_pending_account_resources_response::CopyFrom(const check_pending_account_resources_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.mempool.check_pending_account_resources_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool check_pending_account_resources_response::IsInitialized() const {
  return true;
}

void check_pending_account_resources_response::InternalSwap(check_pending_account_resources_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata check_pending_account_resources_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto[2]);
}

// ===================================================================

class get_pending_transactions_request::_Internal {
 public:
  using HasBits = decltype(std::declval<get_pending_transactions_request>()._has_bits_);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

get_pending_transactions_request::get_pending_transactions_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.mempool.get_pending_transactions_request)
}
get_pending_transactions_request::get_pending_transactions_request(const get_pending_transactions_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_block_id()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.mempool.get_pending_transactions_request)
}

inline void get_pending_transactions_request::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
limit_ = uint64_t{0u};
}

get_pending_transactions_request::~get_pending_transactions_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.mempool.get_pending_transactions_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_pending_transactions_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_pending_transactions_request::ArenaDtor(void* object) {
  get_pending_transactions_request* _this = reinterpret_cast< get_pending_transactions_request* >(object);
  (void)_this;
}
void get_pending_transactions_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_pending_transactions_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_pending_transactions_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.mempool.get_pending_transactions_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    block_id_.ClearNonDefaultToEmpty();
  }
  limit_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_pending_transactions_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 limit = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes block_id = 2 [(.koinos.btype) = BLOCK_ID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_pending_transactions_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.mempool.get_pending_transactions_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 limit = 1 [jstype = JS_STRING];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_limit(), target);
  }

  // optional bytes block_id = 2 [(.koinos.btype) = BLOCK_ID];
  if (_internal_has_block_id()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.mempool.get_pending_transactions_request)
  return target;
}

size_t get_pending_transactions_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.mempool.get_pending_transactions_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes block_id = 2 [(.koinos.btype) = BLOCK_ID];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // uint64 limit = 1 [jstype = JS_STRING];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_pending_transactions_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_pending_transactions_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_pending_transactions_request::GetClassData() const { return &_class_data_; }

void get_pending_transactions_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_pending_transactions_request *>(to)->MergeFrom(
      static_cast<const get_pending_transactions_request &>(from));
}


void get_pending_transactions_request::MergeFrom(const get_pending_transactions_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.mempool.get_pending_transactions_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block_id()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_pending_transactions_request::CopyFrom(const get_pending_transactions_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.mempool.get_pending_transactions_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_pending_transactions_request::IsInitialized() const {
  return true;
}

void get_pending_transactions_request::InternalSwap(get_pending_transactions_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, GetArenaForAllocation(),
      &other->block_id_, other->GetArenaForAllocation()
  );
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_pending_transactions_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto[3]);
}

// ===================================================================

class get_pending_transactions_response::_Internal {
 public:
};

get_pending_transactions_response::get_pending_transactions_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pending_transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.mempool.get_pending_transactions_response)
}
get_pending_transactions_response::get_pending_transactions_response(const get_pending_transactions_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pending_transactions_(from.pending_transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.mempool.get_pending_transactions_response)
}

inline void get_pending_transactions_response::SharedCtor() {
}

get_pending_transactions_response::~get_pending_transactions_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.mempool.get_pending_transactions_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_pending_transactions_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_pending_transactions_response::ArenaDtor(void* object) {
  get_pending_transactions_response* _this = reinterpret_cast< get_pending_transactions_response* >(object);
  (void)_this;
}
void get_pending_transactions_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_pending_transactions_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_pending_transactions_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.mempool.get_pending_transactions_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_transactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_pending_transactions_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .koinos.rpc.mempool.pending_transaction pending_transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pending_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_pending_transactions_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.mempool.get_pending_transactions_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .koinos.rpc.mempool.pending_transaction pending_transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pending_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pending_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.mempool.get_pending_transactions_response)
  return target;
}

size_t get_pending_transactions_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.mempool.get_pending_transactions_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.rpc.mempool.pending_transaction pending_transactions = 1;
  total_size += 1UL * this->_internal_pending_transactions_size();
  for (const auto& msg : this->pending_transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_pending_transactions_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_pending_transactions_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_pending_transactions_response::GetClassData() const { return &_class_data_; }

void get_pending_transactions_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_pending_transactions_response *>(to)->MergeFrom(
      static_cast<const get_pending_transactions_response &>(from));
}


void get_pending_transactions_response::MergeFrom(const get_pending_transactions_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.mempool.get_pending_transactions_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pending_transactions_.MergeFrom(from.pending_transactions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_pending_transactions_response::CopyFrom(const get_pending_transactions_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.mempool.get_pending_transactions_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_pending_transactions_response::IsInitialized() const {
  return true;
}

void get_pending_transactions_response::InternalSwap(get_pending_transactions_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pending_transactions_.InternalSwap(&other->pending_transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_pending_transactions_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto[4]);
}

// ===================================================================

class check_account_nonce_request::_Internal {
 public:
  using HasBits = decltype(std::declval<check_account_nonce_request>()._has_bits_);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

check_account_nonce_request::check_account_nonce_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.mempool.check_account_nonce_request)
}
check_account_nonce_request::check_account_nonce_request(const check_account_nonce_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payee().empty()) {
    payee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payee(), 
      GetArenaForAllocation());
  }
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce(), 
      GetArenaForAllocation());
  }
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_block_id()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.mempool.check_account_nonce_request)
}

inline void check_account_nonce_request::SharedCtor() {
payee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

check_account_nonce_request::~check_account_nonce_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.mempool.check_account_nonce_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void check_account_nonce_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void check_account_nonce_request::ArenaDtor(void* object) {
  check_account_nonce_request* _this = reinterpret_cast< check_account_nonce_request* >(object);
  (void)_this;
}
void check_account_nonce_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void check_account_nonce_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void check_account_nonce_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.mempool.check_account_nonce_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payee_.ClearToEmpty();
  nonce_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    block_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* check_account_nonce_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payee = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes block_id = 3 [(.koinos.btype) = BLOCK_ID];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* check_account_nonce_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.mempool.check_account_nonce_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payee = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_payee().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payee(), target);
  }

  // bytes nonce = 2;
  if (!this->_internal_nonce().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nonce(), target);
  }

  // optional bytes block_id = 3 [(.koinos.btype) = BLOCK_ID];
  if (_internal_has_block_id()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_block_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.mempool.check_account_nonce_request)
  return target;
}

size_t check_account_nonce_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.mempool.check_account_nonce_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payee = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_payee().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payee());
  }

  // bytes nonce = 2;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce());
  }

  // optional bytes block_id = 3 [(.koinos.btype) = BLOCK_ID];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData check_account_nonce_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    check_account_nonce_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*check_account_nonce_request::GetClassData() const { return &_class_data_; }

void check_account_nonce_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<check_account_nonce_request *>(to)->MergeFrom(
      static_cast<const check_account_nonce_request &>(from));
}


void check_account_nonce_request::MergeFrom(const check_account_nonce_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.mempool.check_account_nonce_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payee().empty()) {
    _internal_set_payee(from._internal_payee());
  }
  if (!from._internal_nonce().empty()) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_has_block_id()) {
    _internal_set_block_id(from._internal_block_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void check_account_nonce_request::CopyFrom(const check_account_nonce_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.mempool.check_account_nonce_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool check_account_nonce_request::IsInitialized() const {
  return true;
}

void check_account_nonce_request::InternalSwap(check_account_nonce_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payee_, GetArenaForAllocation(),
      &other->payee_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nonce_, GetArenaForAllocation(),
      &other->nonce_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, GetArenaForAllocation(),
      &other->block_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata check_account_nonce_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto[5]);
}

// ===================================================================

class check_account_nonce_response::_Internal {
 public:
};

check_account_nonce_response::check_account_nonce_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.mempool.check_account_nonce_response)
}
check_account_nonce_response::check_account_nonce_response(const check_account_nonce_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.mempool.check_account_nonce_response)
}

inline void check_account_nonce_response::SharedCtor() {
success_ = false;
}

check_account_nonce_response::~check_account_nonce_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.mempool.check_account_nonce_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void check_account_nonce_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void check_account_nonce_response::ArenaDtor(void* object) {
  check_account_nonce_response* _this = reinterpret_cast< check_account_nonce_response* >(object);
  (void)_this;
}
void check_account_nonce_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void check_account_nonce_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void check_account_nonce_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.mempool.check_account_nonce_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* check_account_nonce_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* check_account_nonce_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.mempool.check_account_nonce_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.mempool.check_account_nonce_response)
  return target;
}

size_t check_account_nonce_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.mempool.check_account_nonce_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData check_account_nonce_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    check_account_nonce_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*check_account_nonce_response::GetClassData() const { return &_class_data_; }

void check_account_nonce_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<check_account_nonce_response *>(to)->MergeFrom(
      static_cast<const check_account_nonce_response &>(from));
}


void check_account_nonce_response::MergeFrom(const check_account_nonce_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.mempool.check_account_nonce_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void check_account_nonce_response::CopyFrom(const check_account_nonce_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.mempool.check_account_nonce_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool check_account_nonce_response::IsInitialized() const {
  return true;
}

void check_account_nonce_response::InternalSwap(check_account_nonce_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata check_account_nonce_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto[6]);
}

// ===================================================================

class get_reserved_account_rc_request::_Internal {
 public:
};

get_reserved_account_rc_request::get_reserved_account_rc_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.mempool.get_reserved_account_rc_request)
}
get_reserved_account_rc_request::get_reserved_account_rc_request(const get_reserved_account_rc_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.mempool.get_reserved_account_rc_request)
}

inline void get_reserved_account_rc_request::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_reserved_account_rc_request::~get_reserved_account_rc_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.mempool.get_reserved_account_rc_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_reserved_account_rc_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_reserved_account_rc_request::ArenaDtor(void* object) {
  get_reserved_account_rc_request* _this = reinterpret_cast< get_reserved_account_rc_request* >(object);
  (void)_this;
}
void get_reserved_account_rc_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_reserved_account_rc_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_reserved_account_rc_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.mempool.get_reserved_account_rc_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_reserved_account_rc_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_reserved_account_rc_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.mempool.get_reserved_account_rc_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.mempool.get_reserved_account_rc_request)
  return target;
}

size_t get_reserved_account_rc_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.mempool.get_reserved_account_rc_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_reserved_account_rc_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_reserved_account_rc_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_reserved_account_rc_request::GetClassData() const { return &_class_data_; }

void get_reserved_account_rc_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_reserved_account_rc_request *>(to)->MergeFrom(
      static_cast<const get_reserved_account_rc_request &>(from));
}


void get_reserved_account_rc_request::MergeFrom(const get_reserved_account_rc_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.mempool.get_reserved_account_rc_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_reserved_account_rc_request::CopyFrom(const get_reserved_account_rc_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.mempool.get_reserved_account_rc_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_reserved_account_rc_request::IsInitialized() const {
  return true;
}

void get_reserved_account_rc_request::InternalSwap(get_reserved_account_rc_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_reserved_account_rc_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto[7]);
}

// ===================================================================

class get_reserved_account_rc_response::_Internal {
 public:
};

get_reserved_account_rc_response::get_reserved_account_rc_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.mempool.get_reserved_account_rc_response)
}
get_reserved_account_rc_response::get_reserved_account_rc_response(const get_reserved_account_rc_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rc_ = from.rc_;
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.mempool.get_reserved_account_rc_response)
}

inline void get_reserved_account_rc_response::SharedCtor() {
rc_ = uint64_t{0u};
}

get_reserved_account_rc_response::~get_reserved_account_rc_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.mempool.get_reserved_account_rc_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_reserved_account_rc_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_reserved_account_rc_response::ArenaDtor(void* object) {
  get_reserved_account_rc_response* _this = reinterpret_cast< get_reserved_account_rc_response* >(object);
  (void)_this;
}
void get_reserved_account_rc_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_reserved_account_rc_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_reserved_account_rc_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.mempool.get_reserved_account_rc_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rc_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_reserved_account_rc_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 rc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_reserved_account_rc_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.mempool.get_reserved_account_rc_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rc = 1;
  if (this->_internal_rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.mempool.get_reserved_account_rc_response)
  return target;
}

size_t get_reserved_account_rc_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.mempool.get_reserved_account_rc_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 rc = 1;
  if (this->_internal_rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_reserved_account_rc_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_reserved_account_rc_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_reserved_account_rc_response::GetClassData() const { return &_class_data_; }

void get_reserved_account_rc_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_reserved_account_rc_response *>(to)->MergeFrom(
      static_cast<const get_reserved_account_rc_response &>(from));
}


void get_reserved_account_rc_response::MergeFrom(const get_reserved_account_rc_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.mempool.get_reserved_account_rc_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rc() != 0) {
    _internal_set_rc(from._internal_rc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_reserved_account_rc_response::CopyFrom(const get_reserved_account_rc_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.mempool.get_reserved_account_rc_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_reserved_account_rc_response::IsInitialized() const {
  return true;
}

void get_reserved_account_rc_response::InternalSwap(get_reserved_account_rc_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(rc_, other->rc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_reserved_account_rc_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto[8]);
}

// ===================================================================

class mempool_request::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const mempool_request* msg);
  static const ::koinos::rpc::mempool::check_pending_account_resources_request& check_pending_account_resources(const mempool_request* msg);
  static const ::koinos::rpc::mempool::get_pending_transactions_request& get_pending_transactions(const mempool_request* msg);
  static const ::koinos::rpc::mempool::check_account_nonce_request& check_account_nonce(const mempool_request* msg);
  static const ::koinos::rpc::mempool::get_reserved_account_rc_request& get_reserved_account_rc(const mempool_request* msg);
};

const ::koinos::rpc::reserved_rpc&
mempool_request::_Internal::reserved(const mempool_request* msg) {
  return *msg->request_.reserved_;
}
const ::koinos::rpc::mempool::check_pending_account_resources_request&
mempool_request::_Internal::check_pending_account_resources(const mempool_request* msg) {
  return *msg->request_.check_pending_account_resources_;
}
const ::koinos::rpc::mempool::get_pending_transactions_request&
mempool_request::_Internal::get_pending_transactions(const mempool_request* msg) {
  return *msg->request_.get_pending_transactions_;
}
const ::koinos::rpc::mempool::check_account_nonce_request&
mempool_request::_Internal::check_account_nonce(const mempool_request* msg) {
  return *msg->request_.check_account_nonce_;
}
const ::koinos::rpc::mempool::get_reserved_account_rc_request&
mempool_request::_Internal::get_reserved_account_rc(const mempool_request* msg) {
  return *msg->request_.get_reserved_account_rc_;
}
void mempool_request::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.mempool.mempool_request.reserved)
}
void mempool_request::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.reserved_;
    }
    clear_has_request();
  }
}
void mempool_request::set_allocated_check_pending_account_resources(::koinos::rpc::mempool::check_pending_account_resources_request* check_pending_account_resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (check_pending_account_resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::mempool::check_pending_account_resources_request>::GetOwningArena(check_pending_account_resources);
    if (message_arena != submessage_arena) {
      check_pending_account_resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_pending_account_resources, submessage_arena);
    }
    set_has_check_pending_account_resources();
    request_.check_pending_account_resources_ = check_pending_account_resources;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.mempool.mempool_request.check_pending_account_resources)
}
void mempool_request::set_allocated_get_pending_transactions(::koinos::rpc::mempool::get_pending_transactions_request* get_pending_transactions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_pending_transactions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::mempool::get_pending_transactions_request>::GetOwningArena(get_pending_transactions);
    if (message_arena != submessage_arena) {
      get_pending_transactions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_pending_transactions, submessage_arena);
    }
    set_has_get_pending_transactions();
    request_.get_pending_transactions_ = get_pending_transactions;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.mempool.mempool_request.get_pending_transactions)
}
void mempool_request::set_allocated_check_account_nonce(::koinos::rpc::mempool::check_account_nonce_request* check_account_nonce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (check_account_nonce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::mempool::check_account_nonce_request>::GetOwningArena(check_account_nonce);
    if (message_arena != submessage_arena) {
      check_account_nonce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_account_nonce, submessage_arena);
    }
    set_has_check_account_nonce();
    request_.check_account_nonce_ = check_account_nonce;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.mempool.mempool_request.check_account_nonce)
}
void mempool_request::set_allocated_get_reserved_account_rc(::koinos::rpc::mempool::get_reserved_account_rc_request* get_reserved_account_rc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_reserved_account_rc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::mempool::get_reserved_account_rc_request>::GetOwningArena(get_reserved_account_rc);
    if (message_arena != submessage_arena) {
      get_reserved_account_rc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_reserved_account_rc, submessage_arena);
    }
    set_has_get_reserved_account_rc();
    request_.get_reserved_account_rc_ = get_reserved_account_rc;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.mempool.mempool_request.get_reserved_account_rc)
}
mempool_request::mempool_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.mempool.mempool_request)
}
mempool_request::mempool_request(const mempool_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kCheckPendingAccountResources: {
      _internal_mutable_check_pending_account_resources()->::koinos::rpc::mempool::check_pending_account_resources_request::MergeFrom(from._internal_check_pending_account_resources());
      break;
    }
    case kGetPendingTransactions: {
      _internal_mutable_get_pending_transactions()->::koinos::rpc::mempool::get_pending_transactions_request::MergeFrom(from._internal_get_pending_transactions());
      break;
    }
    case kCheckAccountNonce: {
      _internal_mutable_check_account_nonce()->::koinos::rpc::mempool::check_account_nonce_request::MergeFrom(from._internal_check_account_nonce());
      break;
    }
    case kGetReservedAccountRc: {
      _internal_mutable_get_reserved_account_rc()->::koinos::rpc::mempool::get_reserved_account_rc_request::MergeFrom(from._internal_get_reserved_account_rc());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.mempool.mempool_request)
}

inline void mempool_request::SharedCtor() {
clear_has_request();
}

mempool_request::~mempool_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.mempool.mempool_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mempool_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void mempool_request::ArenaDtor(void* object) {
  mempool_request* _this = reinterpret_cast< mempool_request* >(object);
  (void)_this;
}
void mempool_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mempool_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mempool_request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.mempool.mempool_request)
  switch (request_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.reserved_;
      }
      break;
    }
    case kCheckPendingAccountResources: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.check_pending_account_resources_;
      }
      break;
    }
    case kGetPendingTransactions: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_pending_transactions_;
      }
      break;
    }
    case kCheckAccountNonce: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.check_account_nonce_;
      }
      break;
    }
    case kGetReservedAccountRc: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_reserved_account_rc_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void mempool_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.mempool.mempool_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mempool_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.mempool.check_pending_account_resources_request check_pending_account_resources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_pending_account_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.mempool.get_pending_transactions_request get_pending_transactions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_pending_transactions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.mempool.check_account_nonce_request check_account_nonce = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_account_nonce(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.mempool.get_reserved_account_rc_request get_reserved_account_rc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_reserved_account_rc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mempool_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.mempool.mempool_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.mempool.check_pending_account_resources_request check_pending_account_resources = 2;
  if (_internal_has_check_pending_account_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::check_pending_account_resources(this), target, stream);
  }

  // .koinos.rpc.mempool.get_pending_transactions_request get_pending_transactions = 3;
  if (_internal_has_get_pending_transactions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get_pending_transactions(this), target, stream);
  }

  // .koinos.rpc.mempool.check_account_nonce_request check_account_nonce = 4;
  if (_internal_has_check_account_nonce()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::check_account_nonce(this), target, stream);
  }

  // .koinos.rpc.mempool.get_reserved_account_rc_request get_reserved_account_rc = 5;
  if (_internal_has_get_reserved_account_rc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::get_reserved_account_rc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.mempool.mempool_request)
  return target;
}

size_t mempool_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.mempool.mempool_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.reserved_);
      break;
    }
    // .koinos.rpc.mempool.check_pending_account_resources_request check_pending_account_resources = 2;
    case kCheckPendingAccountResources: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.check_pending_account_resources_);
      break;
    }
    // .koinos.rpc.mempool.get_pending_transactions_request get_pending_transactions = 3;
    case kGetPendingTransactions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_pending_transactions_);
      break;
    }
    // .koinos.rpc.mempool.check_account_nonce_request check_account_nonce = 4;
    case kCheckAccountNonce: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.check_account_nonce_);
      break;
    }
    // .koinos.rpc.mempool.get_reserved_account_rc_request get_reserved_account_rc = 5;
    case kGetReservedAccountRc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_reserved_account_rc_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mempool_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mempool_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mempool_request::GetClassData() const { return &_class_data_; }

void mempool_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mempool_request *>(to)->MergeFrom(
      static_cast<const mempool_request &>(from));
}


void mempool_request::MergeFrom(const mempool_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.mempool.mempool_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kCheckPendingAccountResources: {
      _internal_mutable_check_pending_account_resources()->::koinos::rpc::mempool::check_pending_account_resources_request::MergeFrom(from._internal_check_pending_account_resources());
      break;
    }
    case kGetPendingTransactions: {
      _internal_mutable_get_pending_transactions()->::koinos::rpc::mempool::get_pending_transactions_request::MergeFrom(from._internal_get_pending_transactions());
      break;
    }
    case kCheckAccountNonce: {
      _internal_mutable_check_account_nonce()->::koinos::rpc::mempool::check_account_nonce_request::MergeFrom(from._internal_check_account_nonce());
      break;
    }
    case kGetReservedAccountRc: {
      _internal_mutable_get_reserved_account_rc()->::koinos::rpc::mempool::get_reserved_account_rc_request::MergeFrom(from._internal_get_reserved_account_rc());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mempool_request::CopyFrom(const mempool_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.mempool.mempool_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mempool_request::IsInitialized() const {
  return true;
}

void mempool_request::InternalSwap(mempool_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata mempool_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto[9]);
}

// ===================================================================

class mempool_response::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const mempool_response* msg);
  static const ::koinos::rpc::error_status& error(const mempool_response* msg);
  static const ::koinos::rpc::mempool::check_pending_account_resources_response& check_pending_account_resources(const mempool_response* msg);
  static const ::koinos::rpc::mempool::get_pending_transactions_response& get_pending_transactions(const mempool_response* msg);
  static const ::koinos::rpc::mempool::check_account_nonce_response& check_account_nonce(const mempool_response* msg);
  static const ::koinos::rpc::mempool::get_reserved_account_rc_response& get_reserved_account_rc(const mempool_response* msg);
};

const ::koinos::rpc::reserved_rpc&
mempool_response::_Internal::reserved(const mempool_response* msg) {
  return *msg->response_.reserved_;
}
const ::koinos::rpc::error_status&
mempool_response::_Internal::error(const mempool_response* msg) {
  return *msg->response_.error_;
}
const ::koinos::rpc::mempool::check_pending_account_resources_response&
mempool_response::_Internal::check_pending_account_resources(const mempool_response* msg) {
  return *msg->response_.check_pending_account_resources_;
}
const ::koinos::rpc::mempool::get_pending_transactions_response&
mempool_response::_Internal::get_pending_transactions(const mempool_response* msg) {
  return *msg->response_.get_pending_transactions_;
}
const ::koinos::rpc::mempool::check_account_nonce_response&
mempool_response::_Internal::check_account_nonce(const mempool_response* msg) {
  return *msg->response_.check_account_nonce_;
}
const ::koinos::rpc::mempool::get_reserved_account_rc_response&
mempool_response::_Internal::get_reserved_account_rc(const mempool_response* msg) {
  return *msg->response_.get_reserved_account_rc_;
}
void mempool_response::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.mempool.mempool_response.reserved)
}
void mempool_response::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.reserved_;
    }
    clear_has_response();
  }
}
void mempool_response::set_allocated_error(::koinos::rpc::error_status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.mempool.mempool_response.error)
}
void mempool_response::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
void mempool_response::set_allocated_check_pending_account_resources(::koinos::rpc::mempool::check_pending_account_resources_response* check_pending_account_resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (check_pending_account_resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::mempool::check_pending_account_resources_response>::GetOwningArena(check_pending_account_resources);
    if (message_arena != submessage_arena) {
      check_pending_account_resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_pending_account_resources, submessage_arena);
    }
    set_has_check_pending_account_resources();
    response_.check_pending_account_resources_ = check_pending_account_resources;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.mempool.mempool_response.check_pending_account_resources)
}
void mempool_response::set_allocated_get_pending_transactions(::koinos::rpc::mempool::get_pending_transactions_response* get_pending_transactions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_pending_transactions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::mempool::get_pending_transactions_response>::GetOwningArena(get_pending_transactions);
    if (message_arena != submessage_arena) {
      get_pending_transactions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_pending_transactions, submessage_arena);
    }
    set_has_get_pending_transactions();
    response_.get_pending_transactions_ = get_pending_transactions;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.mempool.mempool_response.get_pending_transactions)
}
void mempool_response::set_allocated_check_account_nonce(::koinos::rpc::mempool::check_account_nonce_response* check_account_nonce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (check_account_nonce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::mempool::check_account_nonce_response>::GetOwningArena(check_account_nonce);
    if (message_arena != submessage_arena) {
      check_account_nonce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_account_nonce, submessage_arena);
    }
    set_has_check_account_nonce();
    response_.check_account_nonce_ = check_account_nonce;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.mempool.mempool_response.check_account_nonce)
}
void mempool_response::set_allocated_get_reserved_account_rc(::koinos::rpc::mempool::get_reserved_account_rc_response* get_reserved_account_rc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_reserved_account_rc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::mempool::get_reserved_account_rc_response>::GetOwningArena(get_reserved_account_rc);
    if (message_arena != submessage_arena) {
      get_reserved_account_rc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_reserved_account_rc, submessage_arena);
    }
    set_has_get_reserved_account_rc();
    response_.get_reserved_account_rc_ = get_reserved_account_rc;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.mempool.mempool_response.get_reserved_account_rc)
}
mempool_response::mempool_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.mempool.mempool_response)
}
mempool_response::mempool_response(const mempool_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_status::MergeFrom(from._internal_error());
      break;
    }
    case kCheckPendingAccountResources: {
      _internal_mutable_check_pending_account_resources()->::koinos::rpc::mempool::check_pending_account_resources_response::MergeFrom(from._internal_check_pending_account_resources());
      break;
    }
    case kGetPendingTransactions: {
      _internal_mutable_get_pending_transactions()->::koinos::rpc::mempool::get_pending_transactions_response::MergeFrom(from._internal_get_pending_transactions());
      break;
    }
    case kCheckAccountNonce: {
      _internal_mutable_check_account_nonce()->::koinos::rpc::mempool::check_account_nonce_response::MergeFrom(from._internal_check_account_nonce());
      break;
    }
    case kGetReservedAccountRc: {
      _internal_mutable_get_reserved_account_rc()->::koinos::rpc::mempool::get_reserved_account_rc_response::MergeFrom(from._internal_get_reserved_account_rc());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.mempool.mempool_response)
}

inline void mempool_response::SharedCtor() {
clear_has_response();
}

mempool_response::~mempool_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.mempool.mempool_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mempool_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void mempool_response::ArenaDtor(void* object) {
  mempool_response* _this = reinterpret_cast< mempool_response* >(object);
  (void)_this;
}
void mempool_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mempool_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mempool_response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.mempool.mempool_response)
  switch (response_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.reserved_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case kCheckPendingAccountResources: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.check_pending_account_resources_;
      }
      break;
    }
    case kGetPendingTransactions: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_pending_transactions_;
      }
      break;
    }
    case kCheckAccountNonce: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.check_account_nonce_;
      }
      break;
    }
    case kGetReservedAccountRc: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_reserved_account_rc_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void mempool_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.mempool.mempool_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mempool_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.error_status error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.mempool.check_pending_account_resources_response check_pending_account_resources = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_pending_account_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.mempool.get_pending_transactions_response get_pending_transactions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_pending_transactions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.mempool.check_account_nonce_response check_account_nonce = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_account_nonce(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.mempool.get_reserved_account_rc_response get_reserved_account_rc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_reserved_account_rc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mempool_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.mempool.mempool_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.error_status error = 2;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // .koinos.rpc.mempool.check_pending_account_resources_response check_pending_account_resources = 3;
  if (_internal_has_check_pending_account_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::check_pending_account_resources(this), target, stream);
  }

  // .koinos.rpc.mempool.get_pending_transactions_response get_pending_transactions = 4;
  if (_internal_has_get_pending_transactions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::get_pending_transactions(this), target, stream);
  }

  // .koinos.rpc.mempool.check_account_nonce_response check_account_nonce = 5;
  if (_internal_has_check_account_nonce()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::check_account_nonce(this), target, stream);
  }

  // .koinos.rpc.mempool.get_reserved_account_rc_response get_reserved_account_rc = 6;
  if (_internal_has_get_reserved_account_rc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::get_reserved_account_rc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.mempool.mempool_response)
  return target;
}

size_t mempool_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.mempool.mempool_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.reserved_);
      break;
    }
    // .koinos.rpc.error_status error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    // .koinos.rpc.mempool.check_pending_account_resources_response check_pending_account_resources = 3;
    case kCheckPendingAccountResources: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.check_pending_account_resources_);
      break;
    }
    // .koinos.rpc.mempool.get_pending_transactions_response get_pending_transactions = 4;
    case kGetPendingTransactions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_pending_transactions_);
      break;
    }
    // .koinos.rpc.mempool.check_account_nonce_response check_account_nonce = 5;
    case kCheckAccountNonce: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.check_account_nonce_);
      break;
    }
    // .koinos.rpc.mempool.get_reserved_account_rc_response get_reserved_account_rc = 6;
    case kGetReservedAccountRc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_reserved_account_rc_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mempool_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mempool_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mempool_response::GetClassData() const { return &_class_data_; }

void mempool_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mempool_response *>(to)->MergeFrom(
      static_cast<const mempool_response &>(from));
}


void mempool_response::MergeFrom(const mempool_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.mempool.mempool_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_status::MergeFrom(from._internal_error());
      break;
    }
    case kCheckPendingAccountResources: {
      _internal_mutable_check_pending_account_resources()->::koinos::rpc::mempool::check_pending_account_resources_response::MergeFrom(from._internal_check_pending_account_resources());
      break;
    }
    case kGetPendingTransactions: {
      _internal_mutable_get_pending_transactions()->::koinos::rpc::mempool::get_pending_transactions_response::MergeFrom(from._internal_get_pending_transactions());
      break;
    }
    case kCheckAccountNonce: {
      _internal_mutable_check_account_nonce()->::koinos::rpc::mempool::check_account_nonce_response::MergeFrom(from._internal_check_account_nonce());
      break;
    }
    case kGetReservedAccountRc: {
      _internal_mutable_get_reserved_account_rc()->::koinos::rpc::mempool::get_reserved_account_rc_response::MergeFrom(from._internal_get_reserved_account_rc());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mempool_response::CopyFrom(const mempool_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.mempool.mempool_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mempool_response::IsInitialized() const {
  return true;
}

void mempool_response::InternalSwap(mempool_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata mempool_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mempool
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::rpc::mempool::pending_transaction* Arena::CreateMaybeMessage< ::koinos::rpc::mempool::pending_transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::mempool::pending_transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::mempool::check_pending_account_resources_request* Arena::CreateMaybeMessage< ::koinos::rpc::mempool::check_pending_account_resources_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::mempool::check_pending_account_resources_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::mempool::check_pending_account_resources_response* Arena::CreateMaybeMessage< ::koinos::rpc::mempool::check_pending_account_resources_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::mempool::check_pending_account_resources_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::mempool::get_pending_transactions_request* Arena::CreateMaybeMessage< ::koinos::rpc::mempool::get_pending_transactions_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::mempool::get_pending_transactions_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::mempool::get_pending_transactions_response* Arena::CreateMaybeMessage< ::koinos::rpc::mempool::get_pending_transactions_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::mempool::get_pending_transactions_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::mempool::check_account_nonce_request* Arena::CreateMaybeMessage< ::koinos::rpc::mempool::check_account_nonce_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::mempool::check_account_nonce_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::mempool::check_account_nonce_response* Arena::CreateMaybeMessage< ::koinos::rpc::mempool::check_account_nonce_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::mempool::check_account_nonce_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::mempool::get_reserved_account_rc_request* Arena::CreateMaybeMessage< ::koinos::rpc::mempool::get_reserved_account_rc_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::mempool::get_reserved_account_rc_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::mempool::get_reserved_account_rc_response* Arena::CreateMaybeMessage< ::koinos::rpc::mempool::get_reserved_account_rc_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::mempool::get_reserved_account_rc_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::mempool::mempool_request* Arena::CreateMaybeMessage< ::koinos::rpc::mempool::mempool_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::mempool::mempool_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::mempool::mempool_response* Arena::CreateMaybeMessage< ::koinos::rpc::mempool::mempool_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::mempool::mempool_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
