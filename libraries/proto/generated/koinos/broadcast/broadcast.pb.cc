// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/broadcast/broadcast.proto

#include "koinos/broadcast/broadcast.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace broadcast {
constexpr transaction_accepted::transaction_accepted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(nullptr)
  , receipt_(nullptr)
  , height_(uint64_t{0u}){}
struct transaction_acceptedDefaultTypeInternal {
  constexpr transaction_acceptedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_acceptedDefaultTypeInternal() {}
  union {
    transaction_accepted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_acceptedDefaultTypeInternal _transaction_accepted_default_instance_;
constexpr transaction_failed::transaction_failed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct transaction_failedDefaultTypeInternal {
  constexpr transaction_failedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_failedDefaultTypeInternal() {}
  union {
    transaction_failed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_failedDefaultTypeInternal _transaction_failed_default_instance_;
constexpr mempool_accepted::mempool_accepted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(nullptr)
  , receipt_(nullptr)
  , height_(uint64_t{0u})
  , pending_rc_used_(uint64_t{0u})
  , rc_limit_(uint64_t{0u}){}
struct mempool_acceptedDefaultTypeInternal {
  constexpr mempool_acceptedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mempool_acceptedDefaultTypeInternal() {}
  union {
    mempool_accepted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mempool_acceptedDefaultTypeInternal _mempool_accepted_default_instance_;
constexpr block_accepted::block_accepted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr)
  , receipt_(nullptr)
  , live_(false){}
struct block_acceptedDefaultTypeInternal {
  constexpr block_acceptedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_acceptedDefaultTypeInternal() {}
  union {
    block_accepted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_acceptedDefaultTypeInternal _block_accepted_default_instance_;
constexpr block_irreversible::block_irreversible(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : topology_(nullptr){}
struct block_irreversibleDefaultTypeInternal {
  constexpr block_irreversibleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_irreversibleDefaultTypeInternal() {}
  union {
    block_irreversible _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_irreversibleDefaultTypeInternal _block_irreversible_default_instance_;
constexpr fork_heads::fork_heads(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : heads_()
  , last_irreversible_block_(nullptr){}
struct fork_headsDefaultTypeInternal {
  constexpr fork_headsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~fork_headsDefaultTypeInternal() {}
  union {
    fork_heads _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT fork_headsDefaultTypeInternal _fork_heads_default_instance_;
constexpr gossip_status::gossip_status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enabled_(false){}
struct gossip_statusDefaultTypeInternal {
  constexpr gossip_statusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~gossip_statusDefaultTypeInternal() {}
  union {
    gossip_status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT gossip_statusDefaultTypeInternal _gossip_status_default_instance_;
constexpr event_parcel::event_parcel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_(nullptr)
  , height_(uint64_t{0u}){}
struct event_parcelDefaultTypeInternal {
  constexpr event_parcelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~event_parcelDefaultTypeInternal() {}
  union {
    event_parcel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT event_parcelDefaultTypeInternal _event_parcel_default_instance_;
}  // namespace broadcast
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fbroadcast_2fbroadcast_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fbroadcast_2fbroadcast_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fbroadcast_2fbroadcast_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::transaction_accepted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::transaction_accepted, transaction_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::transaction_accepted, receipt_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::transaction_accepted, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::transaction_failed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::transaction_failed, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::mempool_accepted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::mempool_accepted, transaction_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::mempool_accepted, receipt_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::mempool_accepted, height_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::mempool_accepted, pending_rc_used_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::mempool_accepted, rc_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::block_accepted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::block_accepted, block_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::block_accepted, receipt_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::block_accepted, live_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::block_irreversible, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::block_irreversible, topology_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::fork_heads, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::fork_heads, last_irreversible_block_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::fork_heads, heads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::gossip_status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::gossip_status, enabled_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::event_parcel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::event_parcel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::event_parcel, block_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::event_parcel, height_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::event_parcel, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::event_parcel, event_),
  ~0u,
  ~0u,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::broadcast::transaction_accepted)},
  { 8, -1, sizeof(::koinos::broadcast::transaction_failed)},
  { 14, -1, sizeof(::koinos::broadcast::mempool_accepted)},
  { 24, -1, sizeof(::koinos::broadcast::block_accepted)},
  { 32, -1, sizeof(::koinos::broadcast::block_irreversible)},
  { 38, -1, sizeof(::koinos::broadcast::fork_heads)},
  { 45, -1, sizeof(::koinos::broadcast::gossip_status)},
  { 51, 60, sizeof(::koinos::broadcast::event_parcel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::broadcast::_transaction_accepted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::broadcast::_transaction_failed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::broadcast::_mempool_accepted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::broadcast::_block_accepted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::broadcast::_block_irreversible_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::broadcast::_fork_heads_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::broadcast::_gossip_status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::broadcast::_event_parcel_default_instance_),
};

const char descriptor_table_protodef_koinos_2fbroadcast_2fbroadcast_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n koinos/broadcast/broadcast.proto\022\020koin"
  "os.broadcast\032\023koinos/common.proto\032\024koino"
  "s/options.proto\032\036koinos/protocol/protoco"
  "l.proto\"\224\001\n\024transaction_accepted\0221\n\013tran"
  "saction\030\001 \001(\0132\034.koinos.protocol.transact"
  "ion\0225\n\007receipt\030\002 \001(\0132$.koinos.protocol.t"
  "ransaction_receipt\022\022\n\006height\030\003 \001(\004B\0020\001\"&"
  "\n\022transaction_failed\022\020\n\002id\030\001 \001(\014B\004\200\265\030\004\"\303"
  "\001\n\020mempool_accepted\0221\n\013transaction\030\001 \001(\013"
  "2\034.koinos.protocol.transaction\0225\n\007receip"
  "t\030\002 \001(\0132$.koinos.protocol.transaction_re"
  "ceipt\022\022\n\006height\030\003 \001(\004B\0020\001\022\033\n\017pending_rc_"
  "used\030\004 \001(\004B\0020\001\022\024\n\010rc_limit\030\005 \001(\004B\0020\001\"v\n\016"
  "block_accepted\022%\n\005block\030\001 \001(\0132\026.koinos.p"
  "rotocol.block\022/\n\007receipt\030\002 \001(\0132\036.koinos."
  "protocol.block_receipt\022\014\n\004live\030\003 \001(\010\">\n\022"
  "block_irreversible\022(\n\010topology\030\001 \001(\0132\026.k"
  "oinos.block_topology\"l\n\nfork_heads\0227\n\027la"
  "st_irreversible_block\030\001 \001(\0132\026.koinos.blo"
  "ck_topology\022%\n\005heads\030\002 \003(\0132\026.koinos.bloc"
  "k_topology\" \n\rgossip_status\022\017\n\007enabled\030\001"
  " \001(\010\"\230\001\n\014event_parcel\022\026\n\010block_id\030\001 \001(\014B"
  "\004\200\265\030\003\022\016\n\006height\030\002 \001(\004\022!\n\016transaction_id\030"
  "\003 \001(\014B\004\200\265\030\004H\000\210\001\001\022*\n\005event\030\004 \001(\0132\033.koinos"
  ".protocol.event_dataB\021\n\017_transaction_idB"
  "8Z6github.com/koinos/koinos-proto-golang"
  "/koinos/broadcastb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_deps[3] = {
  &::descriptor_table_koinos_2fcommon_2eproto,
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto = {
  false, false, 1065, descriptor_table_protodef_koinos_2fbroadcast_2fbroadcast_2eproto, "koinos/broadcast/broadcast.proto", 
  &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once, descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_deps, 3, 8,
  schemas, file_default_instances, TableStruct_koinos_2fbroadcast_2fbroadcast_2eproto::offsets,
  file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto, file_level_enum_descriptors_koinos_2fbroadcast_2fbroadcast_2eproto, file_level_service_descriptors_koinos_2fbroadcast_2fbroadcast_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter() {
  return &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fbroadcast_2fbroadcast_2eproto(&descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto);
namespace koinos {
namespace broadcast {

// ===================================================================

class transaction_accepted::_Internal {
 public:
  static const ::koinos::protocol::transaction& transaction(const transaction_accepted* msg);
  static const ::koinos::protocol::transaction_receipt& receipt(const transaction_accepted* msg);
};

const ::koinos::protocol::transaction&
transaction_accepted::_Internal::transaction(const transaction_accepted* msg) {
  return *msg->transaction_;
}
const ::koinos::protocol::transaction_receipt&
transaction_accepted::_Internal::receipt(const transaction_accepted* msg) {
  return *msg->receipt_;
}
void transaction_accepted::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
void transaction_accepted::clear_receipt() {
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
}
transaction_accepted::transaction_accepted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.broadcast.transaction_accepted)
}
transaction_accepted::transaction_accepted(const transaction_accepted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::koinos::protocol::transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  if (from._internal_has_receipt()) {
    receipt_ = new ::koinos::protocol::transaction_receipt(*from.receipt_);
  } else {
    receipt_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:koinos.broadcast.transaction_accepted)
}

inline void transaction_accepted::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(height_));
}

transaction_accepted::~transaction_accepted() {
  // @@protoc_insertion_point(destructor:koinos.broadcast.transaction_accepted)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_accepted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete receipt_;
}

void transaction_accepted::ArenaDtor(void* object) {
  transaction_accepted* _this = reinterpret_cast< transaction_accepted* >(object);
  (void)_this;
}
void transaction_accepted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_accepted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_accepted::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.broadcast.transaction_accepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_accepted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.transaction_receipt receipt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction_accepted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.broadcast.transaction_accepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // .koinos.protocol.transaction_receipt receipt = 2;
  if (this->_internal_has_receipt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::receipt(this), target, stream);
  }

  // uint64 height = 3 [jstype = JS_STRING];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.broadcast.transaction_accepted)
  return target;
}

size_t transaction_accepted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.broadcast.transaction_accepted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // .koinos.protocol.transaction_receipt receipt = 2;
  if (this->_internal_has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_);
  }

  // uint64 height = 3 [jstype = JS_STRING];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_accepted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_accepted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_accepted::GetClassData() const { return &_class_data_; }

void transaction_accepted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transaction_accepted *>(to)->MergeFrom(
      static_cast<const transaction_accepted &>(from));
}


void transaction_accepted::MergeFrom(const transaction_accepted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.broadcast.transaction_accepted)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::koinos::protocol::transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_has_receipt()) {
    _internal_mutable_receipt()->::koinos::protocol::transaction_receipt::MergeFrom(from._internal_receipt());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_accepted::CopyFrom(const transaction_accepted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.broadcast.transaction_accepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_accepted::IsInitialized() const {
  return true;
}

void transaction_accepted::InternalSwap(transaction_accepted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transaction_accepted, height_)
      + sizeof(transaction_accepted::height_)
      - PROTOBUF_FIELD_OFFSET(transaction_accepted, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_accepted::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter, &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once,
      file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[0]);
}

// ===================================================================

class transaction_failed::_Internal {
 public:
};

transaction_failed::transaction_failed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.broadcast.transaction_failed)
}
transaction_failed::transaction_failed(const transaction_failed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.broadcast.transaction_failed)
}

inline void transaction_failed::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

transaction_failed::~transaction_failed() {
  // @@protoc_insertion_point(destructor:koinos.broadcast.transaction_failed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_failed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transaction_failed::ArenaDtor(void* object) {
  transaction_failed* _this = reinterpret_cast< transaction_failed* >(object);
  (void)_this;
}
void transaction_failed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_failed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_failed::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.broadcast.transaction_failed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_failed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction_failed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.broadcast.transaction_failed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.broadcast.transaction_failed)
  return target;
}

size_t transaction_failed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.broadcast.transaction_failed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_failed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_failed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_failed::GetClassData() const { return &_class_data_; }

void transaction_failed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transaction_failed *>(to)->MergeFrom(
      static_cast<const transaction_failed &>(from));
}


void transaction_failed::MergeFrom(const transaction_failed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.broadcast.transaction_failed)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_failed::CopyFrom(const transaction_failed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.broadcast.transaction_failed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_failed::IsInitialized() const {
  return true;
}

void transaction_failed::InternalSwap(transaction_failed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_failed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter, &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once,
      file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[1]);
}

// ===================================================================

class mempool_accepted::_Internal {
 public:
  static const ::koinos::protocol::transaction& transaction(const mempool_accepted* msg);
  static const ::koinos::protocol::transaction_receipt& receipt(const mempool_accepted* msg);
};

const ::koinos::protocol::transaction&
mempool_accepted::_Internal::transaction(const mempool_accepted* msg) {
  return *msg->transaction_;
}
const ::koinos::protocol::transaction_receipt&
mempool_accepted::_Internal::receipt(const mempool_accepted* msg) {
  return *msg->receipt_;
}
void mempool_accepted::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
void mempool_accepted::clear_receipt() {
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
}
mempool_accepted::mempool_accepted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.broadcast.mempool_accepted)
}
mempool_accepted::mempool_accepted(const mempool_accepted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::koinos::protocol::transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  if (from._internal_has_receipt()) {
    receipt_ = new ::koinos::protocol::transaction_receipt(*from.receipt_);
  } else {
    receipt_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&rc_limit_) -
    reinterpret_cast<char*>(&height_)) + sizeof(rc_limit_));
  // @@protoc_insertion_point(copy_constructor:koinos.broadcast.mempool_accepted)
}

inline void mempool_accepted::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rc_limit_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(rc_limit_));
}

mempool_accepted::~mempool_accepted() {
  // @@protoc_insertion_point(destructor:koinos.broadcast.mempool_accepted)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mempool_accepted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete receipt_;
}

void mempool_accepted::ArenaDtor(void* object) {
  mempool_accepted* _this = reinterpret_cast< mempool_accepted* >(object);
  (void)_this;
}
void mempool_accepted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mempool_accepted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mempool_accepted::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.broadcast.mempool_accepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rc_limit_) -
      reinterpret_cast<char*>(&height_)) + sizeof(rc_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mempool_accepted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.transaction_receipt receipt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pending_rc_used = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pending_rc_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rc_limit = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rc_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mempool_accepted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.broadcast.mempool_accepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // .koinos.protocol.transaction_receipt receipt = 2;
  if (this->_internal_has_receipt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::receipt(this), target, stream);
  }

  // uint64 height = 3 [jstype = JS_STRING];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  // uint64 pending_rc_used = 4 [jstype = JS_STRING];
  if (this->_internal_pending_rc_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pending_rc_used(), target);
  }

  // uint64 rc_limit = 5 [jstype = JS_STRING];
  if (this->_internal_rc_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_rc_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.broadcast.mempool_accepted)
  return target;
}

size_t mempool_accepted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.broadcast.mempool_accepted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // .koinos.protocol.transaction_receipt receipt = 2;
  if (this->_internal_has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_);
  }

  // uint64 height = 3 [jstype = JS_STRING];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint64 pending_rc_used = 4 [jstype = JS_STRING];
  if (this->_internal_pending_rc_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pending_rc_used());
  }

  // uint64 rc_limit = 5 [jstype = JS_STRING];
  if (this->_internal_rc_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rc_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mempool_accepted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mempool_accepted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mempool_accepted::GetClassData() const { return &_class_data_; }

void mempool_accepted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mempool_accepted *>(to)->MergeFrom(
      static_cast<const mempool_accepted &>(from));
}


void mempool_accepted::MergeFrom(const mempool_accepted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.broadcast.mempool_accepted)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::koinos::protocol::transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_has_receipt()) {
    _internal_mutable_receipt()->::koinos::protocol::transaction_receipt::MergeFrom(from._internal_receipt());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_pending_rc_used() != 0) {
    _internal_set_pending_rc_used(from._internal_pending_rc_used());
  }
  if (from._internal_rc_limit() != 0) {
    _internal_set_rc_limit(from._internal_rc_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mempool_accepted::CopyFrom(const mempool_accepted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.broadcast.mempool_accepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mempool_accepted::IsInitialized() const {
  return true;
}

void mempool_accepted::InternalSwap(mempool_accepted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mempool_accepted, rc_limit_)
      + sizeof(mempool_accepted::rc_limit_)
      - PROTOBUF_FIELD_OFFSET(mempool_accepted, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mempool_accepted::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter, &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once,
      file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[2]);
}

// ===================================================================

class block_accepted::_Internal {
 public:
  static const ::koinos::protocol::block& block(const block_accepted* msg);
  static const ::koinos::protocol::block_receipt& receipt(const block_accepted* msg);
};

const ::koinos::protocol::block&
block_accepted::_Internal::block(const block_accepted* msg) {
  return *msg->block_;
}
const ::koinos::protocol::block_receipt&
block_accepted::_Internal::receipt(const block_accepted* msg) {
  return *msg->receipt_;
}
void block_accepted::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
void block_accepted::clear_receipt() {
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
}
block_accepted::block_accepted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.broadcast.block_accepted)
}
block_accepted::block_accepted(const block_accepted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::koinos::protocol::block(*from.block_);
  } else {
    block_ = nullptr;
  }
  if (from._internal_has_receipt()) {
    receipt_ = new ::koinos::protocol::block_receipt(*from.receipt_);
  } else {
    receipt_ = nullptr;
  }
  live_ = from.live_;
  // @@protoc_insertion_point(copy_constructor:koinos.broadcast.block_accepted)
}

inline void block_accepted::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&live_) -
    reinterpret_cast<char*>(&block_)) + sizeof(live_));
}

block_accepted::~block_accepted() {
  // @@protoc_insertion_point(destructor:koinos.broadcast.block_accepted)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_accepted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
  if (this != internal_default_instance()) delete receipt_;
}

void block_accepted::ArenaDtor(void* object) {
  block_accepted* _this = reinterpret_cast< block_accepted* >(object);
  (void)_this;
}
void block_accepted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_accepted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_accepted::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.broadcast.block_accepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
  live_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_accepted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.block_receipt receipt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool live = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          live_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_accepted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.broadcast.block_accepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.block block = 1;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  // .koinos.protocol.block_receipt receipt = 2;
  if (this->_internal_has_receipt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::receipt(this), target, stream);
  }

  // bool live = 3;
  if (this->_internal_live() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_live(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.broadcast.block_accepted)
  return target;
}

size_t block_accepted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.broadcast.block_accepted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.block block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .koinos.protocol.block_receipt receipt = 2;
  if (this->_internal_has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_);
  }

  // bool live = 3;
  if (this->_internal_live() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_accepted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_accepted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_accepted::GetClassData() const { return &_class_data_; }

void block_accepted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block_accepted *>(to)->MergeFrom(
      static_cast<const block_accepted &>(from));
}


void block_accepted::MergeFrom(const block_accepted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.broadcast.block_accepted)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::koinos::protocol::block::MergeFrom(from._internal_block());
  }
  if (from._internal_has_receipt()) {
    _internal_mutable_receipt()->::koinos::protocol::block_receipt::MergeFrom(from._internal_receipt());
  }
  if (from._internal_live() != 0) {
    _internal_set_live(from._internal_live());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_accepted::CopyFrom(const block_accepted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.broadcast.block_accepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_accepted::IsInitialized() const {
  return true;
}

void block_accepted::InternalSwap(block_accepted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(block_accepted, live_)
      + sizeof(block_accepted::live_)
      - PROTOBUF_FIELD_OFFSET(block_accepted, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata block_accepted::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter, &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once,
      file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[3]);
}

// ===================================================================

class block_irreversible::_Internal {
 public:
  static const ::koinos::block_topology& topology(const block_irreversible* msg);
};

const ::koinos::block_topology&
block_irreversible::_Internal::topology(const block_irreversible* msg) {
  return *msg->topology_;
}
void block_irreversible::clear_topology() {
  if (GetArenaForAllocation() == nullptr && topology_ != nullptr) {
    delete topology_;
  }
  topology_ = nullptr;
}
block_irreversible::block_irreversible(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.broadcast.block_irreversible)
}
block_irreversible::block_irreversible(const block_irreversible& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topology()) {
    topology_ = new ::koinos::block_topology(*from.topology_);
  } else {
    topology_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.broadcast.block_irreversible)
}

inline void block_irreversible::SharedCtor() {
topology_ = nullptr;
}

block_irreversible::~block_irreversible() {
  // @@protoc_insertion_point(destructor:koinos.broadcast.block_irreversible)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_irreversible::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete topology_;
}

void block_irreversible::ArenaDtor(void* object) {
  block_irreversible* _this = reinterpret_cast< block_irreversible* >(object);
  (void)_this;
}
void block_irreversible::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_irreversible::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_irreversible::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.broadcast.block_irreversible)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && topology_ != nullptr) {
    delete topology_;
  }
  topology_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_irreversible::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.block_topology topology = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topology(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_irreversible::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.broadcast.block_irreversible)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.block_topology topology = 1;
  if (this->_internal_has_topology()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::topology(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.broadcast.block_irreversible)
  return target;
}

size_t block_irreversible::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.broadcast.block_irreversible)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.block_topology topology = 1;
  if (this->_internal_has_topology()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topology_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_irreversible::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_irreversible::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_irreversible::GetClassData() const { return &_class_data_; }

void block_irreversible::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block_irreversible *>(to)->MergeFrom(
      static_cast<const block_irreversible &>(from));
}


void block_irreversible::MergeFrom(const block_irreversible& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.broadcast.block_irreversible)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topology()) {
    _internal_mutable_topology()->::koinos::block_topology::MergeFrom(from._internal_topology());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_irreversible::CopyFrom(const block_irreversible& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.broadcast.block_irreversible)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_irreversible::IsInitialized() const {
  return true;
}

void block_irreversible::InternalSwap(block_irreversible* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(topology_, other->topology_);
}

::PROTOBUF_NAMESPACE_ID::Metadata block_irreversible::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter, &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once,
      file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[4]);
}

// ===================================================================

class fork_heads::_Internal {
 public:
  static const ::koinos::block_topology& last_irreversible_block(const fork_heads* msg);
};

const ::koinos::block_topology&
fork_heads::_Internal::last_irreversible_block(const fork_heads* msg) {
  return *msg->last_irreversible_block_;
}
void fork_heads::clear_last_irreversible_block() {
  if (GetArenaForAllocation() == nullptr && last_irreversible_block_ != nullptr) {
    delete last_irreversible_block_;
  }
  last_irreversible_block_ = nullptr;
}
void fork_heads::clear_heads() {
  heads_.Clear();
}
fork_heads::fork_heads(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  heads_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.broadcast.fork_heads)
}
fork_heads::fork_heads(const fork_heads& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      heads_(from.heads_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_irreversible_block()) {
    last_irreversible_block_ = new ::koinos::block_topology(*from.last_irreversible_block_);
  } else {
    last_irreversible_block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.broadcast.fork_heads)
}

inline void fork_heads::SharedCtor() {
last_irreversible_block_ = nullptr;
}

fork_heads::~fork_heads() {
  // @@protoc_insertion_point(destructor:koinos.broadcast.fork_heads)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void fork_heads::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete last_irreversible_block_;
}

void fork_heads::ArenaDtor(void* object) {
  fork_heads* _this = reinterpret_cast< fork_heads* >(object);
  (void)_this;
}
void fork_heads::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void fork_heads::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void fork_heads::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.broadcast.fork_heads)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heads_.Clear();
  if (GetArenaForAllocation() == nullptr && last_irreversible_block_ != nullptr) {
    delete last_irreversible_block_;
  }
  last_irreversible_block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* fork_heads::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.block_topology last_irreversible_block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_irreversible_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .koinos.block_topology heads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_heads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fork_heads::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.broadcast.fork_heads)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.block_topology last_irreversible_block = 1;
  if (this->_internal_has_last_irreversible_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::last_irreversible_block(this), target, stream);
  }

  // repeated .koinos.block_topology heads = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_heads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_heads(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.broadcast.fork_heads)
  return target;
}

size_t fork_heads::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.broadcast.fork_heads)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.block_topology heads = 2;
  total_size += 1UL * this->_internal_heads_size();
  for (const auto& msg : this->heads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .koinos.block_topology last_irreversible_block = 1;
  if (this->_internal_has_last_irreversible_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_irreversible_block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData fork_heads::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    fork_heads::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*fork_heads::GetClassData() const { return &_class_data_; }

void fork_heads::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<fork_heads *>(to)->MergeFrom(
      static_cast<const fork_heads &>(from));
}


void fork_heads::MergeFrom(const fork_heads& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.broadcast.fork_heads)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heads_.MergeFrom(from.heads_);
  if (from._internal_has_last_irreversible_block()) {
    _internal_mutable_last_irreversible_block()->::koinos::block_topology::MergeFrom(from._internal_last_irreversible_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void fork_heads::CopyFrom(const fork_heads& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.broadcast.fork_heads)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fork_heads::IsInitialized() const {
  return true;
}

void fork_heads::InternalSwap(fork_heads* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  heads_.InternalSwap(&other->heads_);
  swap(last_irreversible_block_, other->last_irreversible_block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fork_heads::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter, &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once,
      file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[5]);
}

// ===================================================================

class gossip_status::_Internal {
 public:
};

gossip_status::gossip_status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.broadcast.gossip_status)
}
gossip_status::gossip_status(const gossip_status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:koinos.broadcast.gossip_status)
}

inline void gossip_status::SharedCtor() {
enabled_ = false;
}

gossip_status::~gossip_status() {
  // @@protoc_insertion_point(destructor:koinos.broadcast.gossip_status)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void gossip_status::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void gossip_status::ArenaDtor(void* object) {
  gossip_status* _this = reinterpret_cast< gossip_status* >(object);
  (void)_this;
}
void gossip_status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void gossip_status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void gossip_status::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.broadcast.gossip_status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gossip_status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* gossip_status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.broadcast.gossip_status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.broadcast.gossip_status)
  return target;
}

size_t gossip_status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.broadcast.gossip_status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData gossip_status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    gossip_status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*gossip_status::GetClassData() const { return &_class_data_; }

void gossip_status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<gossip_status *>(to)->MergeFrom(
      static_cast<const gossip_status &>(from));
}


void gossip_status::MergeFrom(const gossip_status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.broadcast.gossip_status)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void gossip_status::CopyFrom(const gossip_status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.broadcast.gossip_status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gossip_status::IsInitialized() const {
  return true;
}

void gossip_status::InternalSwap(gossip_status* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata gossip_status::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter, &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once,
      file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[6]);
}

// ===================================================================

class event_parcel::_Internal {
 public:
  using HasBits = decltype(std::declval<event_parcel>()._has_bits_);
  static void set_has_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::koinos::protocol::event_data& event(const event_parcel* msg);
};

const ::koinos::protocol::event_data&
event_parcel::_Internal::event(const event_parcel* msg) {
  return *msg->event_;
}
void event_parcel::clear_event() {
  if (GetArenaForAllocation() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
event_parcel::event_parcel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.broadcast.event_parcel)
}
event_parcel::event_parcel(const event_parcel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_id().empty()) {
    block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_id(), 
      GetArenaForAllocation());
  }
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transaction_id()) {
    transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_event()) {
    event_ = new ::koinos::protocol::event_data(*from.event_);
  } else {
    event_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:koinos.broadcast.event_parcel)
}

inline void event_parcel::SharedCtor() {
block_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&event_)) + sizeof(height_));
}

event_parcel::~event_parcel() {
  // @@protoc_insertion_point(destructor:koinos.broadcast.event_parcel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void event_parcel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  block_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_;
}

void event_parcel::ArenaDtor(void* object) {
  event_parcel* _this = reinterpret_cast< event_parcel* >(object);
  (void)_this;
}
void event_parcel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void event_parcel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void event_parcel::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.broadcast.event_parcel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    transaction_id_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
  height_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* event_parcel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes block_id = 1 [(.koinos.btype) = BLOCK_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes transaction_id = 3 [(.koinos.btype) = TRANSACTION_ID];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.event_data event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* event_parcel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.broadcast.event_parcel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_id = 1 [(.koinos.btype) = BLOCK_ID];
  if (!this->_internal_block_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_id(), target);
  }

  // uint64 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  // optional bytes transaction_id = 3 [(.koinos.btype) = TRANSACTION_ID];
  if (_internal_has_transaction_id()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transaction_id(), target);
  }

  // .koinos.protocol.event_data event = 4;
  if (this->_internal_has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.broadcast.event_parcel)
  return target;
}

size_t event_parcel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.broadcast.event_parcel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_id = 1 [(.koinos.btype) = BLOCK_ID];
  if (!this->_internal_block_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_id());
  }

  // optional bytes transaction_id = 3 [(.koinos.btype) = TRANSACTION_ID];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_id());
  }

  // .koinos.protocol.event_data event = 4;
  if (this->_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);
  }

  // uint64 height = 2;
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData event_parcel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    event_parcel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*event_parcel::GetClassData() const { return &_class_data_; }

void event_parcel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<event_parcel *>(to)->MergeFrom(
      static_cast<const event_parcel &>(from));
}


void event_parcel::MergeFrom(const event_parcel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.broadcast.event_parcel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_id().empty()) {
    _internal_set_block_id(from._internal_block_id());
  }
  if (from._internal_has_transaction_id()) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from._internal_has_event()) {
    _internal_mutable_event()->::koinos::protocol::event_data::MergeFrom(from._internal_event());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void event_parcel::CopyFrom(const event_parcel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.broadcast.event_parcel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_parcel::IsInitialized() const {
  return true;
}

void event_parcel::InternalSwap(event_parcel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_id_, GetArenaForAllocation(),
      &other->block_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_id_, GetArenaForAllocation(),
      &other->transaction_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(event_parcel, height_)
      + sizeof(event_parcel::height_)
      - PROTOBUF_FIELD_OFFSET(event_parcel, event_)>(
          reinterpret_cast<char*>(&event_),
          reinterpret_cast<char*>(&other->event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata event_parcel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter, &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once,
      file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace broadcast
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::broadcast::transaction_accepted* Arena::CreateMaybeMessage< ::koinos::broadcast::transaction_accepted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::broadcast::transaction_accepted >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::broadcast::transaction_failed* Arena::CreateMaybeMessage< ::koinos::broadcast::transaction_failed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::broadcast::transaction_failed >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::broadcast::mempool_accepted* Arena::CreateMaybeMessage< ::koinos::broadcast::mempool_accepted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::broadcast::mempool_accepted >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::broadcast::block_accepted* Arena::CreateMaybeMessage< ::koinos::broadcast::block_accepted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::broadcast::block_accepted >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::broadcast::block_irreversible* Arena::CreateMaybeMessage< ::koinos::broadcast::block_irreversible >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::broadcast::block_irreversible >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::broadcast::fork_heads* Arena::CreateMaybeMessage< ::koinos::broadcast::fork_heads >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::broadcast::fork_heads >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::broadcast::gossip_status* Arena::CreateMaybeMessage< ::koinos::broadcast::gossip_status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::broadcast::gossip_status >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::broadcast::event_parcel* Arena::CreateMaybeMessage< ::koinos::broadcast::event_parcel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::broadcast::event_parcel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
