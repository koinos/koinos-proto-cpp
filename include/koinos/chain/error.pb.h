// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/chain/error.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2ferror_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2ferror_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fchain_2ferror_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fchain_2ferror_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fchain_2ferror_2eproto;
namespace koinos {
namespace chain {
class error_details;
struct error_detailsDefaultTypeInternal;
extern error_detailsDefaultTypeInternal _error_details_default_instance_;
}  // namespace chain
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::chain::error_details* Arena::CreateMaybeMessage<::koinos::chain::error_details>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace chain {

enum error_code : int {
  success = 0,
  reversion = 1,
  internal_error = 100,
  system_authorization_failure = 101,
  invalid_contract = 102,
  insufficient_privileges = 103,
  insufficient_rc = 104,
  insufficient_return_buffer = 105,
  unknown_thunk = 106,
  unknown_operation = 107,
  read_only_context = 108,
  failure = -1,
  field_not_found = -100,
  unknown_hash_code = -101,
  unknown_dsa = -102,
  unknown_system_call = -103,
  operation_not_found = -104,
  authorization_failure = -200,
  invalid_nonce = -201,
  invalid_signature = -202,
  malformed_block = -203,
  malformed_transaction = -204,
  block_resource_failure = -205,
  pending_transaction_limit_exceeded = -206,
  unknown_backend = -1000,
  unexpected_state = -1001,
  missing_required_arguments = -1002,
  unknown_previous_block = -1003,
  unexpected_height = -1004,
  block_state_error = -1005,
  state_merkle_mismatch = -1006,
  unexpected_receipt = -1007,
  rpc_failure = -1008,
  pending_state_error = -1009,
  timestamp_out_of_bounds = -1010,
  indexer_failure = -1011,
  network_bandwidth_limit_exceeded = -1012,
  compute_bandwidth_limit_exceeded = -1013,
  disk_storage_limit_exceeded = -1014,
  pre_irreversibility_block = -1015,
  error_code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  error_code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool error_code_IsValid(int value);
constexpr error_code error_code_MIN = pre_irreversibility_block;
constexpr error_code error_code_MAX = read_only_context;
constexpr int error_code_ARRAYSIZE = error_code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* error_code_descriptor();
template<typename T>
inline const std::string& error_code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, error_code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function error_code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    error_code_descriptor(), enum_t_value);
}
inline bool error_code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, error_code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<error_code>(
    error_code_descriptor(), name, value);
}
// ===================================================================

class error_details final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.error_details) */ {
 public:
  inline error_details() : error_details(nullptr) {}
  ~error_details() override;
  explicit constexpr error_details(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  error_details(const error_details& from);
  error_details(error_details&& from) noexcept
    : error_details() {
    *this = ::std::move(from);
  }

  inline error_details& operator=(const error_details& from) {
    CopyFrom(from);
    return *this;
  }
  inline error_details& operator=(error_details&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const error_details& default_instance() {
    return *internal_default_instance();
  }
  static inline const error_details* internal_default_instance() {
    return reinterpret_cast<const error_details*>(
               &_error_details_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(error_details& a, error_details& b) {
    a.Swap(&b);
  }
  inline void Swap(error_details* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(error_details* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline error_details* New() const final {
    return new error_details();
  }

  error_details* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<error_details>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const error_details& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const error_details& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(error_details* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.error_details";
  }
  protected:
  explicit error_details(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated string logs = 2;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  const std::string& logs(int index) const;
  std::string* mutable_logs(int index);
  void set_logs(int index, const std::string& value);
  void set_logs(int index, std::string&& value);
  void set_logs(int index, const char* value);
  void set_logs(int index, const char* value, size_t size);
  std::string* add_logs();
  void add_logs(const std::string& value);
  void add_logs(std::string&& value);
  void add_logs(const char* value);
  void add_logs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& logs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_logs();
  private:
  const std::string& _internal_logs(int index) const;
  std::string* _internal_add_logs();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.error_details)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> logs_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2ferror_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// error_details

// int32 code = 1;
inline void error_details::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 error_details::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 error_details::code() const {
  // @@protoc_insertion_point(field_get:koinos.chain.error_details.code)
  return _internal_code();
}
inline void error_details::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void error_details::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:koinos.chain.error_details.code)
}

// repeated string logs = 2;
inline int error_details::_internal_logs_size() const {
  return logs_.size();
}
inline int error_details::logs_size() const {
  return _internal_logs_size();
}
inline void error_details::clear_logs() {
  logs_.Clear();
}
inline std::string* error_details::add_logs() {
  std::string* _s = _internal_add_logs();
  // @@protoc_insertion_point(field_add_mutable:koinos.chain.error_details.logs)
  return _s;
}
inline const std::string& error_details::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const std::string& error_details::logs(int index) const {
  // @@protoc_insertion_point(field_get:koinos.chain.error_details.logs)
  return _internal_logs(index);
}
inline std::string* error_details::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.chain.error_details.logs)
  return logs_.Mutable(index);
}
inline void error_details::set_logs(int index, const std::string& value) {
  logs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:koinos.chain.error_details.logs)
}
inline void error_details::set_logs(int index, std::string&& value) {
  logs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:koinos.chain.error_details.logs)
}
inline void error_details::set_logs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:koinos.chain.error_details.logs)
}
inline void error_details::set_logs(int index, const char* value, size_t size) {
  logs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.error_details.logs)
}
inline std::string* error_details::_internal_add_logs() {
  return logs_.Add();
}
inline void error_details::add_logs(const std::string& value) {
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:koinos.chain.error_details.logs)
}
inline void error_details::add_logs(std::string&& value) {
  logs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:koinos.chain.error_details.logs)
}
inline void error_details::add_logs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:koinos.chain.error_details.logs)
}
inline void error_details::add_logs(const char* value, size_t size) {
  logs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:koinos.chain.error_details.logs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
error_details::logs() const {
  // @@protoc_insertion_point(field_list:koinos.chain.error_details.logs)
  return logs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
error_details::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:koinos.chain.error_details.logs)
  return &logs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace chain
}  // namespace koinos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::koinos::chain::error_code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::koinos::chain::error_code>() {
  return ::koinos::chain::error_code_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2ferror_2eproto
