// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: broadcast.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 8000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "../common.capnp.h"
#include "../protocol/protocol.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(926c186ab23617c0);
CAPNP_DECLARE_SCHEMA(c180f754a3d036b2);
CAPNP_DECLARE_SCHEMA(fb289a76e96e2384);
CAPNP_DECLARE_SCHEMA(c344d482fcf3e3e4);

}  // namespace schemas
}  // namespace capnp

namespace koinos {
namespace broadcast {

struct TransactionAccepted {
  TransactionAccepted() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(926c186ab23617c0, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BlockAccepted {
  BlockAccepted() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c180f754a3d036b2, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BlockIrreversible {
  BlockIrreversible() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb289a76e96e2384, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ForkHeads {
  ForkHeads() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c344d482fcf3e3e4, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TransactionAccepted::Reader {
public:
  typedef TransactionAccepted Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTransaction() const;
  inline  ::koinos::protocol::Transaction::Reader getTransaction() const;

  inline bool hasPayer() const;
  inline  ::capnp::Data::Reader getPayer() const;

  inline bool hasMaxPayerResources() const;
  inline  ::capnp::Data::Reader getMaxPayerResources() const;

  inline bool hasTrxResourceLimit() const;
  inline  ::capnp::Data::Reader getTrxResourceLimit() const;

  inline  ::uint64_t getHeight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TransactionAccepted::Builder {
public:
  typedef TransactionAccepted Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTransaction();
  inline  ::koinos::protocol::Transaction::Builder getTransaction();
  inline void setTransaction( ::koinos::protocol::Transaction::Reader value);
  inline  ::koinos::protocol::Transaction::Builder initTransaction();
  inline void adoptTransaction(::capnp::Orphan< ::koinos::protocol::Transaction>&& value);
  inline ::capnp::Orphan< ::koinos::protocol::Transaction> disownTransaction();

  inline bool hasPayer();
  inline  ::capnp::Data::Builder getPayer();
  inline void setPayer( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initPayer(unsigned int size);
  inline void adoptPayer(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownPayer();

  inline bool hasMaxPayerResources();
  inline  ::capnp::Data::Builder getMaxPayerResources();
  inline void setMaxPayerResources( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initMaxPayerResources(unsigned int size);
  inline void adoptMaxPayerResources(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownMaxPayerResources();

  inline bool hasTrxResourceLimit();
  inline  ::capnp::Data::Builder getTrxResourceLimit();
  inline void setTrxResourceLimit( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initTrxResourceLimit(unsigned int size);
  inline void adoptTrxResourceLimit(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownTrxResourceLimit();

  inline  ::uint64_t getHeight();
  inline void setHeight( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TransactionAccepted::Pipeline {
public:
  typedef TransactionAccepted Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::koinos::protocol::Transaction::Pipeline getTransaction();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BlockAccepted::Reader {
public:
  typedef BlockAccepted Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBlock() const;
  inline  ::koinos::protocol::Block::Reader getBlock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BlockAccepted::Builder {
public:
  typedef BlockAccepted Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBlock();
  inline  ::koinos::protocol::Block::Builder getBlock();
  inline void setBlock( ::koinos::protocol::Block::Reader value);
  inline  ::koinos::protocol::Block::Builder initBlock();
  inline void adoptBlock(::capnp::Orphan< ::koinos::protocol::Block>&& value);
  inline ::capnp::Orphan< ::koinos::protocol::Block> disownBlock();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BlockAccepted::Pipeline {
public:
  typedef BlockAccepted Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::koinos::protocol::Block::Pipeline getBlock();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BlockIrreversible::Reader {
public:
  typedef BlockIrreversible Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTopology() const;
  inline  ::koinos::BlockTopology::Reader getTopology() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BlockIrreversible::Builder {
public:
  typedef BlockIrreversible Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTopology();
  inline  ::koinos::BlockTopology::Builder getTopology();
  inline void setTopology( ::koinos::BlockTopology::Reader value);
  inline  ::koinos::BlockTopology::Builder initTopology();
  inline void adoptTopology(::capnp::Orphan< ::koinos::BlockTopology>&& value);
  inline ::capnp::Orphan< ::koinos::BlockTopology> disownTopology();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BlockIrreversible::Pipeline {
public:
  typedef BlockIrreversible Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::koinos::BlockTopology::Pipeline getTopology();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ForkHeads::Reader {
public:
  typedef ForkHeads Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasForkHeads() const;
  inline  ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Reader getForkHeads() const;

  inline bool hasLastIrreversibleBlock() const;
  inline  ::koinos::BlockTopology::Reader getLastIrreversibleBlock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ForkHeads::Builder {
public:
  typedef ForkHeads Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasForkHeads();
  inline  ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Builder getForkHeads();
  inline void setForkHeads( ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Builder initForkHeads(unsigned int size);
  inline void adoptForkHeads(::capnp::Orphan< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>> disownForkHeads();

  inline bool hasLastIrreversibleBlock();
  inline  ::koinos::BlockTopology::Builder getLastIrreversibleBlock();
  inline void setLastIrreversibleBlock( ::koinos::BlockTopology::Reader value);
  inline  ::koinos::BlockTopology::Builder initLastIrreversibleBlock();
  inline void adoptLastIrreversibleBlock(::capnp::Orphan< ::koinos::BlockTopology>&& value);
  inline ::capnp::Orphan< ::koinos::BlockTopology> disownLastIrreversibleBlock();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ForkHeads::Pipeline {
public:
  typedef ForkHeads Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::koinos::BlockTopology::Pipeline getLastIrreversibleBlock();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool TransactionAccepted::Reader::hasTransaction() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TransactionAccepted::Builder::hasTransaction() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::protocol::Transaction::Reader TransactionAccepted::Reader::getTransaction() const {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Transaction>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::protocol::Transaction::Builder TransactionAccepted::Builder::getTransaction() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Transaction>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::protocol::Transaction::Pipeline TransactionAccepted::Pipeline::getTransaction() {
  return  ::koinos::protocol::Transaction::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void TransactionAccepted::Builder::setTransaction( ::koinos::protocol::Transaction::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::protocol::Transaction>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::protocol::Transaction::Builder TransactionAccepted::Builder::initTransaction() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Transaction>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TransactionAccepted::Builder::adoptTransaction(
    ::capnp::Orphan< ::koinos::protocol::Transaction>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::protocol::Transaction>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::protocol::Transaction> TransactionAccepted::Builder::disownTransaction() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Transaction>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TransactionAccepted::Reader::hasPayer() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TransactionAccepted::Builder::hasPayer() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TransactionAccepted::Reader::getPayer() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TransactionAccepted::Builder::getPayer() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TransactionAccepted::Builder::setPayer( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TransactionAccepted::Builder::initPayer(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TransactionAccepted::Builder::adoptPayer(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TransactionAccepted::Builder::disownPayer() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TransactionAccepted::Reader::hasMaxPayerResources() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TransactionAccepted::Builder::hasMaxPayerResources() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TransactionAccepted::Reader::getMaxPayerResources() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TransactionAccepted::Builder::getMaxPayerResources() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TransactionAccepted::Builder::setMaxPayerResources( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TransactionAccepted::Builder::initMaxPayerResources(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void TransactionAccepted::Builder::adoptMaxPayerResources(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TransactionAccepted::Builder::disownMaxPayerResources() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TransactionAccepted::Reader::hasTrxResourceLimit() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TransactionAccepted::Builder::hasTrxResourceLimit() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TransactionAccepted::Reader::getTrxResourceLimit() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TransactionAccepted::Builder::getTrxResourceLimit() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TransactionAccepted::Builder::setTrxResourceLimit( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TransactionAccepted::Builder::initTrxResourceLimit(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void TransactionAccepted::Builder::adoptTrxResourceLimit(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TransactionAccepted::Builder::disownTrxResourceLimit() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t TransactionAccepted::Reader::getHeight() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TransactionAccepted::Builder::getHeight() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TransactionAccepted::Builder::setHeight( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool BlockAccepted::Reader::hasBlock() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockAccepted::Builder::hasBlock() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::protocol::Block::Reader BlockAccepted::Reader::getBlock() const {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::protocol::Block::Builder BlockAccepted::Builder::getBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::protocol::Block::Pipeline BlockAccepted::Pipeline::getBlock() {
  return  ::koinos::protocol::Block::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void BlockAccepted::Builder::setBlock( ::koinos::protocol::Block::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::protocol::Block::Builder BlockAccepted::Builder::initBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockAccepted::Builder::adoptBlock(
    ::capnp::Orphan< ::koinos::protocol::Block>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::protocol::Block> BlockAccepted::Builder::disownBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BlockIrreversible::Reader::hasTopology() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockIrreversible::Builder::hasTopology() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::BlockTopology::Reader BlockIrreversible::Reader::getTopology() const {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::BlockTopology::Builder BlockIrreversible::Builder::getTopology() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::BlockTopology::Pipeline BlockIrreversible::Pipeline::getTopology() {
  return  ::koinos::BlockTopology::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void BlockIrreversible::Builder::setTopology( ::koinos::BlockTopology::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::BlockTopology::Builder BlockIrreversible::Builder::initTopology() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockIrreversible::Builder::adoptTopology(
    ::capnp::Orphan< ::koinos::BlockTopology>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::BlockTopology> BlockIrreversible::Builder::disownTopology() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ForkHeads::Reader::hasForkHeads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ForkHeads::Builder::hasForkHeads() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Reader ForkHeads::Reader::getForkHeads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Builder ForkHeads::Builder::getForkHeads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ForkHeads::Builder::setForkHeads( ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Builder ForkHeads::Builder::initForkHeads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ForkHeads::Builder::adoptForkHeads(
    ::capnp::Orphan< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>> ForkHeads::Builder::disownForkHeads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ForkHeads::Reader::hasLastIrreversibleBlock() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ForkHeads::Builder::hasLastIrreversibleBlock() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::BlockTopology::Reader ForkHeads::Reader::getLastIrreversibleBlock() const {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::koinos::BlockTopology::Builder ForkHeads::Builder::getLastIrreversibleBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::BlockTopology::Pipeline ForkHeads::Pipeline::getLastIrreversibleBlock() {
  return  ::koinos::BlockTopology::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ForkHeads::Builder::setLastIrreversibleBlock( ::koinos::BlockTopology::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::koinos::BlockTopology::Builder ForkHeads::Builder::initLastIrreversibleBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ForkHeads::Builder::adoptLastIrreversibleBlock(
    ::capnp::Orphan< ::koinos::BlockTopology>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::BlockTopology> ForkHeads::Builder::disownLastIrreversibleBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

