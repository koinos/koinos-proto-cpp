// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: transaction_store_rpc.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 8000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "../../common.capnp.h"
#include "../../protocol/protocol.capnp.h"
#include "../rpc.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d40e5435bd211eac);
CAPNP_DECLARE_SCHEMA(d4b943e6eab7b8b6);
CAPNP_DECLARE_SCHEMA(d8f2817e4471d835);
CAPNP_DECLARE_SCHEMA(b8e16e3306b23463);
CAPNP_DECLARE_SCHEMA(9bf21bd12da5e512);
CAPNP_DECLARE_SCHEMA(9c06f50b962a08d5);

}  // namespace schemas
}  // namespace capnp

namespace koinos {
namespace rpc {
namespace chain {

struct TransactionStoreReservedRequest {
  TransactionStoreReservedRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d40e5435bd211eac, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TransactionStoreReservedResponse {
  TransactionStoreReservedResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d4b943e6eab7b8b6, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetTransactionsByIDRequest {
  GetTransactionsByIDRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8f2817e4471d835, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetTransactionsByIDResponse {
  GetTransactionsByIDResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8e16e3306b23463, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TransactionStoreRequest {
  TransactionStoreRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    TRANSACTION_STORE_RESERVED,
    GET_TRANSACTIONS_BY_I_D,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9bf21bd12da5e512, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TransactionStoreResponse {
  TransactionStoreResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    TRANSACTION_STORE_RESERVED,
    TRANSACTION_STORE_ERROR,
    GET_TRANSACTIONS_BY_I_D,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9c06f50b962a08d5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class TransactionStoreReservedRequest::Reader {
public:
  typedef TransactionStoreReservedRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TransactionStoreReservedRequest::Builder {
public:
  typedef TransactionStoreReservedRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TransactionStoreReservedRequest::Pipeline {
public:
  typedef TransactionStoreReservedRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TransactionStoreReservedResponse::Reader {
public:
  typedef TransactionStoreReservedResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TransactionStoreReservedResponse::Builder {
public:
  typedef TransactionStoreReservedResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TransactionStoreReservedResponse::Pipeline {
public:
  typedef TransactionStoreReservedResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetTransactionsByIDRequest::Reader {
public:
  typedef GetTransactionsByIDRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTransactionIDs() const;
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader getTransactionIDs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetTransactionsByIDRequest::Builder {
public:
  typedef GetTransactionsByIDRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTransactionIDs();
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder getTransactionIDs();
  inline void setTransactionIDs( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value);
  inline void setTransactionIDs(::kj::ArrayPtr<const  ::capnp::Data::Reader> value);
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder initTransactionIDs(unsigned int size);
  inline void adoptTransactionIDs(::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> disownTransactionIDs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetTransactionsByIDRequest::Pipeline {
public:
  typedef GetTransactionsByIDRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetTransactionsByIDResponse::Reader {
public:
  typedef GetTransactionsByIDResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTransactions() const;
  inline  ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>::Reader getTransactions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetTransactionsByIDResponse::Builder {
public:
  typedef GetTransactionsByIDResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTransactions();
  inline  ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>::Builder getTransactions();
  inline void setTransactions( ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>::Builder initTransactions(unsigned int size);
  inline void adoptTransactions(::capnp::Orphan< ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>> disownTransactions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetTransactionsByIDResponse::Pipeline {
public:
  typedef GetTransactionsByIDResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TransactionStoreRequest::Reader {
public:
  typedef TransactionStoreRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isTransactionStoreReserved() const;
  inline bool hasTransactionStoreReserved() const;
  inline  ::koinos::rpc::chain::TransactionStoreReservedRequest::Reader getTransactionStoreReserved() const;

  inline bool isGetTransactionsByID() const;
  inline bool hasGetTransactionsByID() const;
  inline  ::koinos::rpc::chain::GetTransactionsByIDRequest::Reader getGetTransactionsByID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TransactionStoreRequest::Builder {
public:
  typedef TransactionStoreRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isTransactionStoreReserved();
  inline bool hasTransactionStoreReserved();
  inline  ::koinos::rpc::chain::TransactionStoreReservedRequest::Builder getTransactionStoreReserved();
  inline void setTransactionStoreReserved( ::koinos::rpc::chain::TransactionStoreReservedRequest::Reader value);
  inline  ::koinos::rpc::chain::TransactionStoreReservedRequest::Builder initTransactionStoreReserved();
  inline void adoptTransactionStoreReserved(::capnp::Orphan< ::koinos::rpc::chain::TransactionStoreReservedRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::TransactionStoreReservedRequest> disownTransactionStoreReserved();

  inline bool isGetTransactionsByID();
  inline bool hasGetTransactionsByID();
  inline  ::koinos::rpc::chain::GetTransactionsByIDRequest::Builder getGetTransactionsByID();
  inline void setGetTransactionsByID( ::koinos::rpc::chain::GetTransactionsByIDRequest::Reader value);
  inline  ::koinos::rpc::chain::GetTransactionsByIDRequest::Builder initGetTransactionsByID();
  inline void adoptGetTransactionsByID(::capnp::Orphan< ::koinos::rpc::chain::GetTransactionsByIDRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::GetTransactionsByIDRequest> disownGetTransactionsByID();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TransactionStoreRequest::Pipeline {
public:
  typedef TransactionStoreRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TransactionStoreResponse::Reader {
public:
  typedef TransactionStoreResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isTransactionStoreReserved() const;
  inline bool hasTransactionStoreReserved() const;
  inline  ::koinos::rpc::chain::TransactionStoreReservedResponse::Reader getTransactionStoreReserved() const;

  inline bool isTransactionStoreError() const;
  inline bool hasTransactionStoreError() const;
  inline  ::koinos::rpc::ErrorResponse::Reader getTransactionStoreError() const;

  inline bool isGetTransactionsByID() const;
  inline bool hasGetTransactionsByID() const;
  inline  ::koinos::rpc::chain::GetTransactionsByIDResponse::Reader getGetTransactionsByID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TransactionStoreResponse::Builder {
public:
  typedef TransactionStoreResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isTransactionStoreReserved();
  inline bool hasTransactionStoreReserved();
  inline  ::koinos::rpc::chain::TransactionStoreReservedResponse::Builder getTransactionStoreReserved();
  inline void setTransactionStoreReserved( ::koinos::rpc::chain::TransactionStoreReservedResponse::Reader value);
  inline  ::koinos::rpc::chain::TransactionStoreReservedResponse::Builder initTransactionStoreReserved();
  inline void adoptTransactionStoreReserved(::capnp::Orphan< ::koinos::rpc::chain::TransactionStoreReservedResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::TransactionStoreReservedResponse> disownTransactionStoreReserved();

  inline bool isTransactionStoreError();
  inline bool hasTransactionStoreError();
  inline  ::koinos::rpc::ErrorResponse::Builder getTransactionStoreError();
  inline void setTransactionStoreError( ::koinos::rpc::ErrorResponse::Reader value);
  inline  ::koinos::rpc::ErrorResponse::Builder initTransactionStoreError();
  inline void adoptTransactionStoreError(::capnp::Orphan< ::koinos::rpc::ErrorResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::ErrorResponse> disownTransactionStoreError();

  inline bool isGetTransactionsByID();
  inline bool hasGetTransactionsByID();
  inline  ::koinos::rpc::chain::GetTransactionsByIDResponse::Builder getGetTransactionsByID();
  inline void setGetTransactionsByID( ::koinos::rpc::chain::GetTransactionsByIDResponse::Reader value);
  inline  ::koinos::rpc::chain::GetTransactionsByIDResponse::Builder initGetTransactionsByID();
  inline void adoptGetTransactionsByID(::capnp::Orphan< ::koinos::rpc::chain::GetTransactionsByIDResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::GetTransactionsByIDResponse> disownGetTransactionsByID();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TransactionStoreResponse::Pipeline {
public:
  typedef TransactionStoreResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool GetTransactionsByIDRequest::Reader::hasTransactionIDs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetTransactionsByIDRequest::Builder::hasTransactionIDs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader GetTransactionsByIDRequest::Reader::getTransactionIDs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder GetTransactionsByIDRequest::Builder::getTransactionIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetTransactionsByIDRequest::Builder::setTransactionIDs( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void GetTransactionsByIDRequest::Builder::setTransactionIDs(::kj::ArrayPtr<const  ::capnp::Data::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder GetTransactionsByIDRequest::Builder::initTransactionIDs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GetTransactionsByIDRequest::Builder::adoptTransactionIDs(
    ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> GetTransactionsByIDRequest::Builder::disownTransactionIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GetTransactionsByIDResponse::Reader::hasTransactions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetTransactionsByIDResponse::Builder::hasTransactions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>::Reader GetTransactionsByIDResponse::Reader::getTransactions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>::Builder GetTransactionsByIDResponse::Builder::getTransactions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetTransactionsByIDResponse::Builder::setTransactions( ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>::Builder GetTransactionsByIDResponse::Builder::initTransactions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GetTransactionsByIDResponse::Builder::adoptTransactions(
    ::capnp::Orphan< ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>> GetTransactionsByIDResponse::Builder::disownTransactions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::Optional< ::koinos::protocol::Transaction>,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::koinos::rpc::chain::TransactionStoreRequest::Which TransactionStoreRequest::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::koinos::rpc::chain::TransactionStoreRequest::Which TransactionStoreRequest::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool TransactionStoreRequest::Reader::isTransactionStoreReserved() const {
  return which() == TransactionStoreRequest::TRANSACTION_STORE_RESERVED;
}
inline bool TransactionStoreRequest::Builder::isTransactionStoreReserved() {
  return which() == TransactionStoreRequest::TRANSACTION_STORE_RESERVED;
}
inline bool TransactionStoreRequest::Reader::hasTransactionStoreReserved() const {
  if (which() != TransactionStoreRequest::TRANSACTION_STORE_RESERVED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TransactionStoreRequest::Builder::hasTransactionStoreReserved() {
  if (which() != TransactionStoreRequest::TRANSACTION_STORE_RESERVED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::TransactionStoreReservedRequest::Reader TransactionStoreRequest::Reader::getTransactionStoreReserved() const {
  KJ_IREQUIRE((which() == TransactionStoreRequest::TRANSACTION_STORE_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::TransactionStoreReservedRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::TransactionStoreReservedRequest::Builder TransactionStoreRequest::Builder::getTransactionStoreReserved() {
  KJ_IREQUIRE((which() == TransactionStoreRequest::TRANSACTION_STORE_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::TransactionStoreReservedRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TransactionStoreRequest::Builder::setTransactionStoreReserved( ::koinos::rpc::chain::TransactionStoreReservedRequest::Reader value) {
  _builder.setDataField<TransactionStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreRequest::TRANSACTION_STORE_RESERVED);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::TransactionStoreReservedRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::TransactionStoreReservedRequest::Builder TransactionStoreRequest::Builder::initTransactionStoreReserved() {
  _builder.setDataField<TransactionStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreRequest::TRANSACTION_STORE_RESERVED);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::TransactionStoreReservedRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TransactionStoreRequest::Builder::adoptTransactionStoreReserved(
    ::capnp::Orphan< ::koinos::rpc::chain::TransactionStoreReservedRequest>&& value) {
  _builder.setDataField<TransactionStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreRequest::TRANSACTION_STORE_RESERVED);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::TransactionStoreReservedRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::TransactionStoreReservedRequest> TransactionStoreRequest::Builder::disownTransactionStoreReserved() {
  KJ_IREQUIRE((which() == TransactionStoreRequest::TRANSACTION_STORE_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::TransactionStoreReservedRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TransactionStoreRequest::Reader::isGetTransactionsByID() const {
  return which() == TransactionStoreRequest::GET_TRANSACTIONS_BY_I_D;
}
inline bool TransactionStoreRequest::Builder::isGetTransactionsByID() {
  return which() == TransactionStoreRequest::GET_TRANSACTIONS_BY_I_D;
}
inline bool TransactionStoreRequest::Reader::hasGetTransactionsByID() const {
  if (which() != TransactionStoreRequest::GET_TRANSACTIONS_BY_I_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TransactionStoreRequest::Builder::hasGetTransactionsByID() {
  if (which() != TransactionStoreRequest::GET_TRANSACTIONS_BY_I_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::GetTransactionsByIDRequest::Reader TransactionStoreRequest::Reader::getGetTransactionsByID() const {
  KJ_IREQUIRE((which() == TransactionStoreRequest::GET_TRANSACTIONS_BY_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetTransactionsByIDRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::GetTransactionsByIDRequest::Builder TransactionStoreRequest::Builder::getGetTransactionsByID() {
  KJ_IREQUIRE((which() == TransactionStoreRequest::GET_TRANSACTIONS_BY_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetTransactionsByIDRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TransactionStoreRequest::Builder::setGetTransactionsByID( ::koinos::rpc::chain::GetTransactionsByIDRequest::Reader value) {
  _builder.setDataField<TransactionStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreRequest::GET_TRANSACTIONS_BY_I_D);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetTransactionsByIDRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::GetTransactionsByIDRequest::Builder TransactionStoreRequest::Builder::initGetTransactionsByID() {
  _builder.setDataField<TransactionStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreRequest::GET_TRANSACTIONS_BY_I_D);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetTransactionsByIDRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TransactionStoreRequest::Builder::adoptGetTransactionsByID(
    ::capnp::Orphan< ::koinos::rpc::chain::GetTransactionsByIDRequest>&& value) {
  _builder.setDataField<TransactionStoreRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreRequest::GET_TRANSACTIONS_BY_I_D);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetTransactionsByIDRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::GetTransactionsByIDRequest> TransactionStoreRequest::Builder::disownGetTransactionsByID() {
  KJ_IREQUIRE((which() == TransactionStoreRequest::GET_TRANSACTIONS_BY_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetTransactionsByIDRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::koinos::rpc::chain::TransactionStoreResponse::Which TransactionStoreResponse::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::koinos::rpc::chain::TransactionStoreResponse::Which TransactionStoreResponse::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool TransactionStoreResponse::Reader::isTransactionStoreReserved() const {
  return which() == TransactionStoreResponse::TRANSACTION_STORE_RESERVED;
}
inline bool TransactionStoreResponse::Builder::isTransactionStoreReserved() {
  return which() == TransactionStoreResponse::TRANSACTION_STORE_RESERVED;
}
inline bool TransactionStoreResponse::Reader::hasTransactionStoreReserved() const {
  if (which() != TransactionStoreResponse::TRANSACTION_STORE_RESERVED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TransactionStoreResponse::Builder::hasTransactionStoreReserved() {
  if (which() != TransactionStoreResponse::TRANSACTION_STORE_RESERVED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::TransactionStoreReservedResponse::Reader TransactionStoreResponse::Reader::getTransactionStoreReserved() const {
  KJ_IREQUIRE((which() == TransactionStoreResponse::TRANSACTION_STORE_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::TransactionStoreReservedResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::TransactionStoreReservedResponse::Builder TransactionStoreResponse::Builder::getTransactionStoreReserved() {
  KJ_IREQUIRE((which() == TransactionStoreResponse::TRANSACTION_STORE_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::TransactionStoreReservedResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TransactionStoreResponse::Builder::setTransactionStoreReserved( ::koinos::rpc::chain::TransactionStoreReservedResponse::Reader value) {
  _builder.setDataField<TransactionStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreResponse::TRANSACTION_STORE_RESERVED);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::TransactionStoreReservedResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::TransactionStoreReservedResponse::Builder TransactionStoreResponse::Builder::initTransactionStoreReserved() {
  _builder.setDataField<TransactionStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreResponse::TRANSACTION_STORE_RESERVED);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::TransactionStoreReservedResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TransactionStoreResponse::Builder::adoptTransactionStoreReserved(
    ::capnp::Orphan< ::koinos::rpc::chain::TransactionStoreReservedResponse>&& value) {
  _builder.setDataField<TransactionStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreResponse::TRANSACTION_STORE_RESERVED);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::TransactionStoreReservedResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::TransactionStoreReservedResponse> TransactionStoreResponse::Builder::disownTransactionStoreReserved() {
  KJ_IREQUIRE((which() == TransactionStoreResponse::TRANSACTION_STORE_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::TransactionStoreReservedResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TransactionStoreResponse::Reader::isTransactionStoreError() const {
  return which() == TransactionStoreResponse::TRANSACTION_STORE_ERROR;
}
inline bool TransactionStoreResponse::Builder::isTransactionStoreError() {
  return which() == TransactionStoreResponse::TRANSACTION_STORE_ERROR;
}
inline bool TransactionStoreResponse::Reader::hasTransactionStoreError() const {
  if (which() != TransactionStoreResponse::TRANSACTION_STORE_ERROR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TransactionStoreResponse::Builder::hasTransactionStoreError() {
  if (which() != TransactionStoreResponse::TRANSACTION_STORE_ERROR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::ErrorResponse::Reader TransactionStoreResponse::Reader::getTransactionStoreError() const {
  KJ_IREQUIRE((which() == TransactionStoreResponse::TRANSACTION_STORE_ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::ErrorResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::ErrorResponse::Builder TransactionStoreResponse::Builder::getTransactionStoreError() {
  KJ_IREQUIRE((which() == TransactionStoreResponse::TRANSACTION_STORE_ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::ErrorResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TransactionStoreResponse::Builder::setTransactionStoreError( ::koinos::rpc::ErrorResponse::Reader value) {
  _builder.setDataField<TransactionStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreResponse::TRANSACTION_STORE_ERROR);
  ::capnp::_::PointerHelpers< ::koinos::rpc::ErrorResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::ErrorResponse::Builder TransactionStoreResponse::Builder::initTransactionStoreError() {
  _builder.setDataField<TransactionStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreResponse::TRANSACTION_STORE_ERROR);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::ErrorResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TransactionStoreResponse::Builder::adoptTransactionStoreError(
    ::capnp::Orphan< ::koinos::rpc::ErrorResponse>&& value) {
  _builder.setDataField<TransactionStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreResponse::TRANSACTION_STORE_ERROR);
  ::capnp::_::PointerHelpers< ::koinos::rpc::ErrorResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::ErrorResponse> TransactionStoreResponse::Builder::disownTransactionStoreError() {
  KJ_IREQUIRE((which() == TransactionStoreResponse::TRANSACTION_STORE_ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::ErrorResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TransactionStoreResponse::Reader::isGetTransactionsByID() const {
  return which() == TransactionStoreResponse::GET_TRANSACTIONS_BY_I_D;
}
inline bool TransactionStoreResponse::Builder::isGetTransactionsByID() {
  return which() == TransactionStoreResponse::GET_TRANSACTIONS_BY_I_D;
}
inline bool TransactionStoreResponse::Reader::hasGetTransactionsByID() const {
  if (which() != TransactionStoreResponse::GET_TRANSACTIONS_BY_I_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TransactionStoreResponse::Builder::hasGetTransactionsByID() {
  if (which() != TransactionStoreResponse::GET_TRANSACTIONS_BY_I_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::GetTransactionsByIDResponse::Reader TransactionStoreResponse::Reader::getGetTransactionsByID() const {
  KJ_IREQUIRE((which() == TransactionStoreResponse::GET_TRANSACTIONS_BY_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetTransactionsByIDResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::GetTransactionsByIDResponse::Builder TransactionStoreResponse::Builder::getGetTransactionsByID() {
  KJ_IREQUIRE((which() == TransactionStoreResponse::GET_TRANSACTIONS_BY_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetTransactionsByIDResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TransactionStoreResponse::Builder::setGetTransactionsByID( ::koinos::rpc::chain::GetTransactionsByIDResponse::Reader value) {
  _builder.setDataField<TransactionStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreResponse::GET_TRANSACTIONS_BY_I_D);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetTransactionsByIDResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::GetTransactionsByIDResponse::Builder TransactionStoreResponse::Builder::initGetTransactionsByID() {
  _builder.setDataField<TransactionStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreResponse::GET_TRANSACTIONS_BY_I_D);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetTransactionsByIDResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TransactionStoreResponse::Builder::adoptGetTransactionsByID(
    ::capnp::Orphan< ::koinos::rpc::chain::GetTransactionsByIDResponse>&& value) {
  _builder.setDataField<TransactionStoreResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, TransactionStoreResponse::GET_TRANSACTIONS_BY_I_D);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetTransactionsByIDResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::GetTransactionsByIDResponse> TransactionStoreResponse::Builder::disownGetTransactionsByID() {
  KJ_IREQUIRE((which() == TransactionStoreResponse::GET_TRANSACTIONS_BY_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetTransactionsByIDResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

