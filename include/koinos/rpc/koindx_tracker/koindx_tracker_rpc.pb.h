// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/koindx_tracker/koindx_tracker_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/koindx_tracker/koindx_tracker.pb.h"
#include "koinos/options.pb.h"
#include "koinos/rpc/rpc.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto;
namespace koinos {
namespace rpc {
namespace koindx_tracker {
class account_liquidity;
struct account_liquidityDefaultTypeInternal;
extern account_liquidityDefaultTypeInternal _account_liquidity_default_instance_;
class get_liquidity_request;
struct get_liquidity_requestDefaultTypeInternal;
extern get_liquidity_requestDefaultTypeInternal _get_liquidity_request_default_instance_;
class get_liquidity_response;
struct get_liquidity_responseDefaultTypeInternal;
extern get_liquidity_responseDefaultTypeInternal _get_liquidity_response_default_instance_;
class get_pools_request;
struct get_pools_requestDefaultTypeInternal;
extern get_pools_requestDefaultTypeInternal _get_pools_request_default_instance_;
class get_pools_response;
struct get_pools_responseDefaultTypeInternal;
extern get_pools_responseDefaultTypeInternal _get_pools_response_default_instance_;
class get_tvl_request;
struct get_tvl_requestDefaultTypeInternal;
extern get_tvl_requestDefaultTypeInternal _get_tvl_request_default_instance_;
class get_tvl_response;
struct get_tvl_responseDefaultTypeInternal;
extern get_tvl_responseDefaultTypeInternal _get_tvl_response_default_instance_;
class koindx_tracker_request;
struct koindx_tracker_requestDefaultTypeInternal;
extern koindx_tracker_requestDefaultTypeInternal _koindx_tracker_request_default_instance_;
class koindx_tracker_response;
struct koindx_tracker_responseDefaultTypeInternal;
extern koindx_tracker_responseDefaultTypeInternal _koindx_tracker_response_default_instance_;
class pool_pair;
struct pool_pairDefaultTypeInternal;
extern pool_pairDefaultTypeInternal _pool_pair_default_instance_;
class pool_tvl;
struct pool_tvlDefaultTypeInternal;
extern pool_tvlDefaultTypeInternal _pool_tvl_default_instance_;
}  // namespace koindx_tracker
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::rpc::koindx_tracker::account_liquidity* Arena::CreateMaybeMessage<::koinos::rpc::koindx_tracker::account_liquidity>(Arena*);
template<> ::koinos::rpc::koindx_tracker::get_liquidity_request* Arena::CreateMaybeMessage<::koinos::rpc::koindx_tracker::get_liquidity_request>(Arena*);
template<> ::koinos::rpc::koindx_tracker::get_liquidity_response* Arena::CreateMaybeMessage<::koinos::rpc::koindx_tracker::get_liquidity_response>(Arena*);
template<> ::koinos::rpc::koindx_tracker::get_pools_request* Arena::CreateMaybeMessage<::koinos::rpc::koindx_tracker::get_pools_request>(Arena*);
template<> ::koinos::rpc::koindx_tracker::get_pools_response* Arena::CreateMaybeMessage<::koinos::rpc::koindx_tracker::get_pools_response>(Arena*);
template<> ::koinos::rpc::koindx_tracker::get_tvl_request* Arena::CreateMaybeMessage<::koinos::rpc::koindx_tracker::get_tvl_request>(Arena*);
template<> ::koinos::rpc::koindx_tracker::get_tvl_response* Arena::CreateMaybeMessage<::koinos::rpc::koindx_tracker::get_tvl_response>(Arena*);
template<> ::koinos::rpc::koindx_tracker::koindx_tracker_request* Arena::CreateMaybeMessage<::koinos::rpc::koindx_tracker::koindx_tracker_request>(Arena*);
template<> ::koinos::rpc::koindx_tracker::koindx_tracker_response* Arena::CreateMaybeMessage<::koinos::rpc::koindx_tracker::koindx_tracker_response>(Arena*);
template<> ::koinos::rpc::koindx_tracker::pool_pair* Arena::CreateMaybeMessage<::koinos::rpc::koindx_tracker::pool_pair>(Arena*);
template<> ::koinos::rpc::koindx_tracker::pool_tvl* Arena::CreateMaybeMessage<::koinos::rpc::koindx_tracker::pool_tvl>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace rpc {
namespace koindx_tracker {

// ===================================================================

class pool_pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.koindx_tracker.pool_pair) */ {
 public:
  inline pool_pair() : pool_pair(nullptr) {}
  ~pool_pair() override;
  explicit constexpr pool_pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pool_pair(const pool_pair& from);
  pool_pair(pool_pair&& from) noexcept
    : pool_pair() {
    *this = ::std::move(from);
  }

  inline pool_pair& operator=(const pool_pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline pool_pair& operator=(pool_pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pool_pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const pool_pair* internal_default_instance() {
    return reinterpret_cast<const pool_pair*>(
               &_pool_pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pool_pair& a, pool_pair& b) {
    a.Swap(&b);
  }
  inline void Swap(pool_pair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pool_pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pool_pair* New() const final {
    return new pool_pair();
  }

  pool_pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pool_pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pool_pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const pool_pair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pool_pair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.koindx_tracker.pool_pair";
  }
  protected:
  explicit pool_pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolFieldNumber = 1,
    kTokenAFieldNumber = 2,
    kTokenBFieldNumber = 3,
  };
  // bytes pool = 1 [(.koinos.btype) = ADDRESS];
  void clear_pool();
  const std::string& pool() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pool(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pool();
  PROTOBUF_MUST_USE_RESULT std::string* release_pool();
  void set_allocated_pool(std::string* pool);
  private:
  const std::string& _internal_pool() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pool(const std::string& value);
  std::string* _internal_mutable_pool();
  public:

  // string token_a = 2;
  void clear_token_a();
  const std::string& token_a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_a();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_a();
  void set_allocated_token_a(std::string* token_a);
  private:
  const std::string& _internal_token_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_a(const std::string& value);
  std::string* _internal_mutable_token_a();
  public:

  // string token_b = 3;
  void clear_token_b();
  const std::string& token_b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_b();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_b();
  void set_allocated_token_b(std::string* token_b);
  private:
  const std::string& _internal_token_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_b(const std::string& value);
  std::string* _internal_mutable_token_b();
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.koindx_tracker.pool_pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pool_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_a_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_pools_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.koindx_tracker.get_pools_request) */ {
 public:
  inline get_pools_request() : get_pools_request(nullptr) {}
  ~get_pools_request() override;
  explicit constexpr get_pools_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_pools_request(const get_pools_request& from);
  get_pools_request(get_pools_request&& from) noexcept
    : get_pools_request() {
    *this = ::std::move(from);
  }

  inline get_pools_request& operator=(const get_pools_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_pools_request& operator=(get_pools_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_pools_request& default_instance() {
    return *internal_default_instance();
  }
  enum TargetCase {
    kStart = 1,
    kPool = 2,
    TARGET_NOT_SET = 0,
  };

  static inline const get_pools_request* internal_default_instance() {
    return reinterpret_cast<const get_pools_request*>(
               &_get_pools_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(get_pools_request& a, get_pools_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_pools_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_pools_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_pools_request* New() const final {
    return new get_pools_request();
  }

  get_pools_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_pools_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_pools_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_pools_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_pools_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.koindx_tracker.get_pools_request";
  }
  protected:
  explicit get_pools_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 3,
    kStartFieldNumber = 1,
    kPoolFieldNumber = 2,
  };
  // uint64 limit = 3 [jstype = JS_STRING];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bytes start = 1 [(.koinos.btype) = ADDRESS];
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const std::string& start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start();
  PROTOBUF_MUST_USE_RESULT std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // bytes pool = 2 [(.koinos.btype) = ADDRESS];
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  const std::string& pool() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pool(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pool();
  PROTOBUF_MUST_USE_RESULT std::string* release_pool();
  void set_allocated_pool(std::string* pool);
  private:
  const std::string& _internal_pool() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pool(const std::string& value);
  std::string* _internal_mutable_pool();
  public:

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.koindx_tracker.get_pools_request)
 private:
  class _Internal;
  void set_has_start();
  void set_has_pool();

  inline bool has_target() const;
  inline void clear_has_target();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_;
  union TargetUnion {
    constexpr TargetUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pool_;
  } target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_pools_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.koindx_tracker.get_pools_response) */ {
 public:
  inline get_pools_response() : get_pools_response(nullptr) {}
  ~get_pools_response() override;
  explicit constexpr get_pools_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_pools_response(const get_pools_response& from);
  get_pools_response(get_pools_response&& from) noexcept
    : get_pools_response() {
    *this = ::std::move(from);
  }

  inline get_pools_response& operator=(const get_pools_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_pools_response& operator=(get_pools_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_pools_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_pools_response* internal_default_instance() {
    return reinterpret_cast<const get_pools_response*>(
               &_get_pools_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(get_pools_response& a, get_pools_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_pools_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_pools_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_pools_response* New() const final {
    return new get_pools_response();
  }

  get_pools_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_pools_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_pools_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_pools_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_pools_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.koindx_tracker.get_pools_response";
  }
  protected:
  explicit get_pools_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .koinos.rpc.koindx_tracker.pool_pair values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::koinos::rpc::koindx_tracker::pool_pair* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::pool_pair >*
      mutable_values();
  private:
  const ::koinos::rpc::koindx_tracker::pool_pair& _internal_values(int index) const;
  ::koinos::rpc::koindx_tracker::pool_pair* _internal_add_values();
  public:
  const ::koinos::rpc::koindx_tracker::pool_pair& values(int index) const;
  ::koinos::rpc::koindx_tracker::pool_pair* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::pool_pair >&
      values() const;

  // @@protoc_insertion_point(class_scope:koinos.rpc.koindx_tracker.get_pools_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::pool_pair > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto;
};
// -------------------------------------------------------------------

class account_liquidity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.koindx_tracker.account_liquidity) */ {
 public:
  inline account_liquidity() : account_liquidity(nullptr) {}
  ~account_liquidity() override;
  explicit constexpr account_liquidity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  account_liquidity(const account_liquidity& from);
  account_liquidity(account_liquidity&& from) noexcept
    : account_liquidity() {
    *this = ::std::move(from);
  }

  inline account_liquidity& operator=(const account_liquidity& from) {
    CopyFrom(from);
    return *this;
  }
  inline account_liquidity& operator=(account_liquidity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const account_liquidity& default_instance() {
    return *internal_default_instance();
  }
  static inline const account_liquidity* internal_default_instance() {
    return reinterpret_cast<const account_liquidity*>(
               &_account_liquidity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(account_liquidity& a, account_liquidity& b) {
    a.Swap(&b);
  }
  inline void Swap(account_liquidity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(account_liquidity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline account_liquidity* New() const final {
    return new account_liquidity();
  }

  account_liquidity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<account_liquidity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const account_liquidity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const account_liquidity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(account_liquidity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.koindx_tracker.account_liquidity";
  }
  protected:
  explicit account_liquidity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kBalanceFieldNumber = 2,
    kCoinMsHiFieldNumber = 3,
    kCoinMsLoFieldNumber = 4,
  };
  // bytes address = 1 [(.koinos.btype) = ADDRESS];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint64 balance = 2 [jstype = JS_STRING];
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::uint64 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 coin_ms_hi = 3 [jstype = JS_STRING];
  void clear_coin_ms_hi();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_ms_hi() const;
  void set_coin_ms_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin_ms_hi() const;
  void _internal_set_coin_ms_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 coin_ms_lo = 4 [jstype = JS_STRING];
  void clear_coin_ms_lo();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_ms_lo() const;
  void set_coin_ms_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin_ms_lo() const;
  void _internal_set_coin_ms_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.koindx_tracker.account_liquidity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 balance_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_ms_hi_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_ms_lo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_liquidity_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.koindx_tracker.get_liquidity_request) */ {
 public:
  inline get_liquidity_request() : get_liquidity_request(nullptr) {}
  ~get_liquidity_request() override;
  explicit constexpr get_liquidity_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_liquidity_request(const get_liquidity_request& from);
  get_liquidity_request(get_liquidity_request&& from) noexcept
    : get_liquidity_request() {
    *this = ::std::move(from);
  }

  inline get_liquidity_request& operator=(const get_liquidity_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_liquidity_request& operator=(get_liquidity_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_liquidity_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_liquidity_request* internal_default_instance() {
    return reinterpret_cast<const get_liquidity_request*>(
               &_get_liquidity_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(get_liquidity_request& a, get_liquidity_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_liquidity_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_liquidity_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_liquidity_request* New() const final {
    return new get_liquidity_request();
  }

  get_liquidity_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_liquidity_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_liquidity_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_liquidity_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_liquidity_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.koindx_tracker.get_liquidity_request";
  }
  protected:
  explicit get_liquidity_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolFieldNumber = 1,
    kStartFieldNumber = 2,
    kLimitFieldNumber = 3,
    kStartMsFieldNumber = 4,
    kEndMsFieldNumber = 5,
  };
  // bytes pool = 1 [(.koinos.btype) = ADDRESS];
  void clear_pool();
  const std::string& pool() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pool(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pool();
  PROTOBUF_MUST_USE_RESULT std::string* release_pool();
  void set_allocated_pool(std::string* pool);
  private:
  const std::string& _internal_pool() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pool(const std::string& value);
  std::string* _internal_mutable_pool();
  public:

  // bytes start = 2 [(.koinos.btype) = ADDRESS];
  void clear_start();
  const std::string& start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start();
  PROTOBUF_MUST_USE_RESULT std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // uint64 limit = 3 [jstype = JS_STRING];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 start_ms = 4 [jstype = JS_STRING];
  bool has_start_ms() const;
  private:
  bool _internal_has_start_ms() const;
  public:
  void clear_start_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_ms() const;
  void set_start_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_ms() const;
  void _internal_set_start_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 end_ms = 5 [jstype = JS_STRING];
  bool has_end_ms() const;
  private:
  bool _internal_has_end_ms() const;
  public:
  void clear_end_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_ms() const;
  void set_end_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_ms() const;
  void _internal_set_end_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.koindx_tracker.get_liquidity_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pool_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_ms_;
  friend struct ::TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_liquidity_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.koindx_tracker.get_liquidity_response) */ {
 public:
  inline get_liquidity_response() : get_liquidity_response(nullptr) {}
  ~get_liquidity_response() override;
  explicit constexpr get_liquidity_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_liquidity_response(const get_liquidity_response& from);
  get_liquidity_response(get_liquidity_response&& from) noexcept
    : get_liquidity_response() {
    *this = ::std::move(from);
  }

  inline get_liquidity_response& operator=(const get_liquidity_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_liquidity_response& operator=(get_liquidity_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_liquidity_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_liquidity_response* internal_default_instance() {
    return reinterpret_cast<const get_liquidity_response*>(
               &_get_liquidity_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(get_liquidity_response& a, get_liquidity_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_liquidity_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_liquidity_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_liquidity_response* New() const final {
    return new get_liquidity_response();
  }

  get_liquidity_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_liquidity_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_liquidity_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_liquidity_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_liquidity_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.koindx_tracker.get_liquidity_response";
  }
  protected:
  explicit get_liquidity_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .koinos.rpc.koindx_tracker.account_liquidity values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::koinos::rpc::koindx_tracker::account_liquidity* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::account_liquidity >*
      mutable_values();
  private:
  const ::koinos::rpc::koindx_tracker::account_liquidity& _internal_values(int index) const;
  ::koinos::rpc::koindx_tracker::account_liquidity* _internal_add_values();
  public:
  const ::koinos::rpc::koindx_tracker::account_liquidity& values(int index) const;
  ::koinos::rpc::koindx_tracker::account_liquidity* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::account_liquidity >&
      values() const;

  // @@protoc_insertion_point(class_scope:koinos.rpc.koindx_tracker.get_liquidity_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::account_liquidity > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto;
};
// -------------------------------------------------------------------

class pool_tvl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.koindx_tracker.pool_tvl) */ {
 public:
  inline pool_tvl() : pool_tvl(nullptr) {}
  ~pool_tvl() override;
  explicit constexpr pool_tvl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pool_tvl(const pool_tvl& from);
  pool_tvl(pool_tvl&& from) noexcept
    : pool_tvl() {
    *this = ::std::move(from);
  }

  inline pool_tvl& operator=(const pool_tvl& from) {
    CopyFrom(from);
    return *this;
  }
  inline pool_tvl& operator=(pool_tvl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pool_tvl& default_instance() {
    return *internal_default_instance();
  }
  static inline const pool_tvl* internal_default_instance() {
    return reinterpret_cast<const pool_tvl*>(
               &_pool_tvl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(pool_tvl& a, pool_tvl& b) {
    a.Swap(&b);
  }
  inline void Swap(pool_tvl* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pool_tvl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pool_tvl* New() const final {
    return new pool_tvl();
  }

  pool_tvl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pool_tvl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pool_tvl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const pool_tvl& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pool_tvl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.koindx_tracker.pool_tvl";
  }
  protected:
  explicit pool_tvl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoolFieldNumber = 1,
    kTvlFieldNumber = 2,
  };
  // bytes pool = 1 [(.koinos.btype) = ADDRESS];
  void clear_pool();
  const std::string& pool() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pool(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pool();
  PROTOBUF_MUST_USE_RESULT std::string* release_pool();
  void set_allocated_pool(std::string* pool);
  private:
  const std::string& _internal_pool() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pool(const std::string& value);
  std::string* _internal_mutable_pool();
  public:

  // uint64 tvl = 2 [jstype = JS_STRING];
  void clear_tvl();
  ::PROTOBUF_NAMESPACE_ID::uint64 tvl() const;
  void set_tvl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tvl() const;
  void _internal_set_tvl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.koindx_tracker.pool_tvl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pool_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tvl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_tvl_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.koindx_tracker.get_tvl_request) */ {
 public:
  inline get_tvl_request() : get_tvl_request(nullptr) {}
  ~get_tvl_request() override;
  explicit constexpr get_tvl_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_tvl_request(const get_tvl_request& from);
  get_tvl_request(get_tvl_request&& from) noexcept
    : get_tvl_request() {
    *this = ::std::move(from);
  }

  inline get_tvl_request& operator=(const get_tvl_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_tvl_request& operator=(get_tvl_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_tvl_request& default_instance() {
    return *internal_default_instance();
  }
  enum TargetCase {
    kStart = 1,
    kPool = 2,
    TARGET_NOT_SET = 0,
  };

  static inline const get_tvl_request* internal_default_instance() {
    return reinterpret_cast<const get_tvl_request*>(
               &_get_tvl_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(get_tvl_request& a, get_tvl_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_tvl_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_tvl_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_tvl_request* New() const final {
    return new get_tvl_request();
  }

  get_tvl_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_tvl_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_tvl_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_tvl_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_tvl_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.koindx_tracker.get_tvl_request";
  }
  protected:
  explicit get_tvl_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 3,
    kMsFieldNumber = 4,
    kStartFieldNumber = 1,
    kPoolFieldNumber = 2,
  };
  // uint64 limit = 3 [jstype = JS_STRING];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 ms = 4 [jstype = JS_STRING];
  bool has_ms() const;
  private:
  bool _internal_has_ms() const;
  public:
  void clear_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 ms() const;
  void set_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ms() const;
  void _internal_set_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bytes start = 1 [(.koinos.btype) = ADDRESS];
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const std::string& start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start();
  PROTOBUF_MUST_USE_RESULT std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // bytes pool = 2 [(.koinos.btype) = ADDRESS];
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  const std::string& pool() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pool(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pool();
  PROTOBUF_MUST_USE_RESULT std::string* release_pool();
  void set_allocated_pool(std::string* pool);
  private:
  const std::string& _internal_pool() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pool(const std::string& value);
  std::string* _internal_mutable_pool();
  public:

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.koindx_tracker.get_tvl_request)
 private:
  class _Internal;
  void set_has_start();
  void set_has_pool();

  inline bool has_target() const;
  inline void clear_has_target();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ms_;
  union TargetUnion {
    constexpr TargetUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pool_;
  } target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_tvl_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.koindx_tracker.get_tvl_response) */ {
 public:
  inline get_tvl_response() : get_tvl_response(nullptr) {}
  ~get_tvl_response() override;
  explicit constexpr get_tvl_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_tvl_response(const get_tvl_response& from);
  get_tvl_response(get_tvl_response&& from) noexcept
    : get_tvl_response() {
    *this = ::std::move(from);
  }

  inline get_tvl_response& operator=(const get_tvl_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_tvl_response& operator=(get_tvl_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_tvl_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_tvl_response* internal_default_instance() {
    return reinterpret_cast<const get_tvl_response*>(
               &_get_tvl_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(get_tvl_response& a, get_tvl_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_tvl_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_tvl_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_tvl_response* New() const final {
    return new get_tvl_response();
  }

  get_tvl_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_tvl_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_tvl_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_tvl_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_tvl_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.koindx_tracker.get_tvl_response";
  }
  protected:
  explicit get_tvl_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .koinos.rpc.koindx_tracker.pool_tvl values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::koinos::rpc::koindx_tracker::pool_tvl* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::pool_tvl >*
      mutable_values();
  private:
  const ::koinos::rpc::koindx_tracker::pool_tvl& _internal_values(int index) const;
  ::koinos::rpc::koindx_tracker::pool_tvl* _internal_add_values();
  public:
  const ::koinos::rpc::koindx_tracker::pool_tvl& values(int index) const;
  ::koinos::rpc::koindx_tracker::pool_tvl* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::pool_tvl >&
      values() const;

  // @@protoc_insertion_point(class_scope:koinos.rpc.koindx_tracker.get_tvl_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::pool_tvl > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto;
};
// -------------------------------------------------------------------

class koindx_tracker_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.koindx_tracker.koindx_tracker_request) */ {
 public:
  inline koindx_tracker_request() : koindx_tracker_request(nullptr) {}
  ~koindx_tracker_request() override;
  explicit constexpr koindx_tracker_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  koindx_tracker_request(const koindx_tracker_request& from);
  koindx_tracker_request(koindx_tracker_request&& from) noexcept
    : koindx_tracker_request() {
    *this = ::std::move(from);
  }

  inline koindx_tracker_request& operator=(const koindx_tracker_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline koindx_tracker_request& operator=(koindx_tracker_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const koindx_tracker_request& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kReserved = 1,
    kGetPools = 2,
    kGetLiquidity = 3,
    kGetTvl = 4,
    REQUEST_NOT_SET = 0,
  };

  static inline const koindx_tracker_request* internal_default_instance() {
    return reinterpret_cast<const koindx_tracker_request*>(
               &_koindx_tracker_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(koindx_tracker_request& a, koindx_tracker_request& b) {
    a.Swap(&b);
  }
  inline void Swap(koindx_tracker_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(koindx_tracker_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline koindx_tracker_request* New() const final {
    return new koindx_tracker_request();
  }

  koindx_tracker_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<koindx_tracker_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const koindx_tracker_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const koindx_tracker_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(koindx_tracker_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.koindx_tracker.koindx_tracker_request";
  }
  protected:
  explicit koindx_tracker_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kGetPoolsFieldNumber = 2,
    kGetLiquidityFieldNumber = 3,
    kGetTvlFieldNumber = 4,
  };
  // .koinos.rpc.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::rpc::reserved_rpc& reserved() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::reserved_rpc* release_reserved();
  ::koinos::rpc::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved);
  private:
  const ::koinos::rpc::reserved_rpc& _internal_reserved() const;
  ::koinos::rpc::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::rpc::reserved_rpc* reserved);
  ::koinos::rpc::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.rpc.koindx_tracker.get_pools_request get_pools = 2;
  bool has_get_pools() const;
  private:
  bool _internal_has_get_pools() const;
  public:
  void clear_get_pools();
  const ::koinos::rpc::koindx_tracker::get_pools_request& get_pools() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::koindx_tracker::get_pools_request* release_get_pools();
  ::koinos::rpc::koindx_tracker::get_pools_request* mutable_get_pools();
  void set_allocated_get_pools(::koinos::rpc::koindx_tracker::get_pools_request* get_pools);
  private:
  const ::koinos::rpc::koindx_tracker::get_pools_request& _internal_get_pools() const;
  ::koinos::rpc::koindx_tracker::get_pools_request* _internal_mutable_get_pools();
  public:
  void unsafe_arena_set_allocated_get_pools(
      ::koinos::rpc::koindx_tracker::get_pools_request* get_pools);
  ::koinos::rpc::koindx_tracker::get_pools_request* unsafe_arena_release_get_pools();

  // .koinos.rpc.koindx_tracker.get_liquidity_request get_liquidity = 3;
  bool has_get_liquidity() const;
  private:
  bool _internal_has_get_liquidity() const;
  public:
  void clear_get_liquidity();
  const ::koinos::rpc::koindx_tracker::get_liquidity_request& get_liquidity() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::koindx_tracker::get_liquidity_request* release_get_liquidity();
  ::koinos::rpc::koindx_tracker::get_liquidity_request* mutable_get_liquidity();
  void set_allocated_get_liquidity(::koinos::rpc::koindx_tracker::get_liquidity_request* get_liquidity);
  private:
  const ::koinos::rpc::koindx_tracker::get_liquidity_request& _internal_get_liquidity() const;
  ::koinos::rpc::koindx_tracker::get_liquidity_request* _internal_mutable_get_liquidity();
  public:
  void unsafe_arena_set_allocated_get_liquidity(
      ::koinos::rpc::koindx_tracker::get_liquidity_request* get_liquidity);
  ::koinos::rpc::koindx_tracker::get_liquidity_request* unsafe_arena_release_get_liquidity();

  // .koinos.rpc.koindx_tracker.get_tvl_request get_tvl = 4;
  bool has_get_tvl() const;
  private:
  bool _internal_has_get_tvl() const;
  public:
  void clear_get_tvl();
  const ::koinos::rpc::koindx_tracker::get_tvl_request& get_tvl() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::koindx_tracker::get_tvl_request* release_get_tvl();
  ::koinos::rpc::koindx_tracker::get_tvl_request* mutable_get_tvl();
  void set_allocated_get_tvl(::koinos::rpc::koindx_tracker::get_tvl_request* get_tvl);
  private:
  const ::koinos::rpc::koindx_tracker::get_tvl_request& _internal_get_tvl() const;
  ::koinos::rpc::koindx_tracker::get_tvl_request* _internal_mutable_get_tvl();
  public:
  void unsafe_arena_set_allocated_get_tvl(
      ::koinos::rpc::koindx_tracker::get_tvl_request* get_tvl);
  ::koinos::rpc::koindx_tracker::get_tvl_request* unsafe_arena_release_get_tvl();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.koindx_tracker.koindx_tracker_request)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_get_pools();
  void set_has_get_liquidity();
  void set_has_get_tvl();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestUnion {
    constexpr RequestUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::rpc::reserved_rpc* reserved_;
    ::koinos::rpc::koindx_tracker::get_pools_request* get_pools_;
    ::koinos::rpc::koindx_tracker::get_liquidity_request* get_liquidity_;
    ::koinos::rpc::koindx_tracker::get_tvl_request* get_tvl_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto;
};
// -------------------------------------------------------------------

class koindx_tracker_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.koindx_tracker.koindx_tracker_response) */ {
 public:
  inline koindx_tracker_response() : koindx_tracker_response(nullptr) {}
  ~koindx_tracker_response() override;
  explicit constexpr koindx_tracker_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  koindx_tracker_response(const koindx_tracker_response& from);
  koindx_tracker_response(koindx_tracker_response&& from) noexcept
    : koindx_tracker_response() {
    *this = ::std::move(from);
  }

  inline koindx_tracker_response& operator=(const koindx_tracker_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline koindx_tracker_response& operator=(koindx_tracker_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const koindx_tracker_response& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kReserved = 1,
    kError = 2,
    kGetPools = 3,
    kGetLiquidity = 4,
    kGetTvl = 5,
    RESPONSE_NOT_SET = 0,
  };

  static inline const koindx_tracker_response* internal_default_instance() {
    return reinterpret_cast<const koindx_tracker_response*>(
               &_koindx_tracker_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(koindx_tracker_response& a, koindx_tracker_response& b) {
    a.Swap(&b);
  }
  inline void Swap(koindx_tracker_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(koindx_tracker_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline koindx_tracker_response* New() const final {
    return new koindx_tracker_response();
  }

  koindx_tracker_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<koindx_tracker_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const koindx_tracker_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const koindx_tracker_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(koindx_tracker_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.koindx_tracker.koindx_tracker_response";
  }
  protected:
  explicit koindx_tracker_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kErrorFieldNumber = 2,
    kGetPoolsFieldNumber = 3,
    kGetLiquidityFieldNumber = 4,
    kGetTvlFieldNumber = 5,
  };
  // .koinos.rpc.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::rpc::reserved_rpc& reserved() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::reserved_rpc* release_reserved();
  ::koinos::rpc::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved);
  private:
  const ::koinos::rpc::reserved_rpc& _internal_reserved() const;
  ::koinos::rpc::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::rpc::reserved_rpc* reserved);
  ::koinos::rpc::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.rpc.error_status error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::koinos::rpc::error_status& error() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::error_status* release_error();
  ::koinos::rpc::error_status* mutable_error();
  void set_allocated_error(::koinos::rpc::error_status* error);
  private:
  const ::koinos::rpc::error_status& _internal_error() const;
  ::koinos::rpc::error_status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::koinos::rpc::error_status* error);
  ::koinos::rpc::error_status* unsafe_arena_release_error();

  // .koinos.rpc.koindx_tracker.get_pools_response get_pools = 3;
  bool has_get_pools() const;
  private:
  bool _internal_has_get_pools() const;
  public:
  void clear_get_pools();
  const ::koinos::rpc::koindx_tracker::get_pools_response& get_pools() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::koindx_tracker::get_pools_response* release_get_pools();
  ::koinos::rpc::koindx_tracker::get_pools_response* mutable_get_pools();
  void set_allocated_get_pools(::koinos::rpc::koindx_tracker::get_pools_response* get_pools);
  private:
  const ::koinos::rpc::koindx_tracker::get_pools_response& _internal_get_pools() const;
  ::koinos::rpc::koindx_tracker::get_pools_response* _internal_mutable_get_pools();
  public:
  void unsafe_arena_set_allocated_get_pools(
      ::koinos::rpc::koindx_tracker::get_pools_response* get_pools);
  ::koinos::rpc::koindx_tracker::get_pools_response* unsafe_arena_release_get_pools();

  // .koinos.rpc.koindx_tracker.get_liquidity_response get_liquidity = 4;
  bool has_get_liquidity() const;
  private:
  bool _internal_has_get_liquidity() const;
  public:
  void clear_get_liquidity();
  const ::koinos::rpc::koindx_tracker::get_liquidity_response& get_liquidity() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::koindx_tracker::get_liquidity_response* release_get_liquidity();
  ::koinos::rpc::koindx_tracker::get_liquidity_response* mutable_get_liquidity();
  void set_allocated_get_liquidity(::koinos::rpc::koindx_tracker::get_liquidity_response* get_liquidity);
  private:
  const ::koinos::rpc::koindx_tracker::get_liquidity_response& _internal_get_liquidity() const;
  ::koinos::rpc::koindx_tracker::get_liquidity_response* _internal_mutable_get_liquidity();
  public:
  void unsafe_arena_set_allocated_get_liquidity(
      ::koinos::rpc::koindx_tracker::get_liquidity_response* get_liquidity);
  ::koinos::rpc::koindx_tracker::get_liquidity_response* unsafe_arena_release_get_liquidity();

  // .koinos.rpc.koindx_tracker.get_tvl_response get_tvl = 5;
  bool has_get_tvl() const;
  private:
  bool _internal_has_get_tvl() const;
  public:
  void clear_get_tvl();
  const ::koinos::rpc::koindx_tracker::get_tvl_response& get_tvl() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::rpc::koindx_tracker::get_tvl_response* release_get_tvl();
  ::koinos::rpc::koindx_tracker::get_tvl_response* mutable_get_tvl();
  void set_allocated_get_tvl(::koinos::rpc::koindx_tracker::get_tvl_response* get_tvl);
  private:
  const ::koinos::rpc::koindx_tracker::get_tvl_response& _internal_get_tvl() const;
  ::koinos::rpc::koindx_tracker::get_tvl_response* _internal_mutable_get_tvl();
  public:
  void unsafe_arena_set_allocated_get_tvl(
      ::koinos::rpc::koindx_tracker::get_tvl_response* get_tvl);
  ::koinos::rpc::koindx_tracker::get_tvl_response* unsafe_arena_release_get_tvl();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.koindx_tracker.koindx_tracker_response)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_error();
  void set_has_get_pools();
  void set_has_get_liquidity();
  void set_has_get_tvl();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResponseUnion {
    constexpr ResponseUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::rpc::reserved_rpc* reserved_;
    ::koinos::rpc::error_status* error_;
    ::koinos::rpc::koindx_tracker::get_pools_response* get_pools_;
    ::koinos::rpc::koindx_tracker::get_liquidity_response* get_liquidity_;
    ::koinos::rpc::koindx_tracker::get_tvl_response* get_tvl_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pool_pair

// bytes pool = 1 [(.koinos.btype) = ADDRESS];
inline void pool_pair::clear_pool() {
  pool_.ClearToEmpty();
}
inline const std::string& pool_pair::pool() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.pool_pair.pool)
  return _internal_pool();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pool_pair::set_pool(ArgT0&& arg0, ArgT... args) {
 
 pool_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.pool_pair.pool)
}
inline std::string* pool_pair::mutable_pool() {
  std::string* _s = _internal_mutable_pool();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.pool_pair.pool)
  return _s;
}
inline const std::string& pool_pair::_internal_pool() const {
  return pool_.Get();
}
inline void pool_pair::_internal_set_pool(const std::string& value) {
  
  pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* pool_pair::_internal_mutable_pool() {
  
  return pool_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* pool_pair::release_pool() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.pool_pair.pool)
  return pool_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void pool_pair::set_allocated_pool(std::string* pool) {
  if (pool != nullptr) {
    
  } else {
    
  }
  pool_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pool,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.pool_pair.pool)
}

// string token_a = 2;
inline void pool_pair::clear_token_a() {
  token_a_.ClearToEmpty();
}
inline const std::string& pool_pair::token_a() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.pool_pair.token_a)
  return _internal_token_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pool_pair::set_token_a(ArgT0&& arg0, ArgT... args) {
 
 token_a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.pool_pair.token_a)
}
inline std::string* pool_pair::mutable_token_a() {
  std::string* _s = _internal_mutable_token_a();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.pool_pair.token_a)
  return _s;
}
inline const std::string& pool_pair::_internal_token_a() const {
  return token_a_.Get();
}
inline void pool_pair::_internal_set_token_a(const std::string& value) {
  
  token_a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* pool_pair::_internal_mutable_token_a() {
  
  return token_a_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* pool_pair::release_token_a() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.pool_pair.token_a)
  return token_a_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void pool_pair::set_allocated_token_a(std::string* token_a) {
  if (token_a != nullptr) {
    
  } else {
    
  }
  token_a_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_a,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.pool_pair.token_a)
}

// string token_b = 3;
inline void pool_pair::clear_token_b() {
  token_b_.ClearToEmpty();
}
inline const std::string& pool_pair::token_b() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.pool_pair.token_b)
  return _internal_token_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pool_pair::set_token_b(ArgT0&& arg0, ArgT... args) {
 
 token_b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.pool_pair.token_b)
}
inline std::string* pool_pair::mutable_token_b() {
  std::string* _s = _internal_mutable_token_b();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.pool_pair.token_b)
  return _s;
}
inline const std::string& pool_pair::_internal_token_b() const {
  return token_b_.Get();
}
inline void pool_pair::_internal_set_token_b(const std::string& value) {
  
  token_b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* pool_pair::_internal_mutable_token_b() {
  
  return token_b_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* pool_pair::release_token_b() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.pool_pair.token_b)
  return token_b_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void pool_pair::set_allocated_token_b(std::string* token_b) {
  if (token_b != nullptr) {
    
  } else {
    
  }
  token_b_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_b,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.pool_pair.token_b)
}

// -------------------------------------------------------------------

// get_pools_request

// bytes start = 1 [(.koinos.btype) = ADDRESS];
inline bool get_pools_request::_internal_has_start() const {
  return target_case() == kStart;
}
inline bool get_pools_request::has_start() const {
  return _internal_has_start();
}
inline void get_pools_request::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline void get_pools_request::clear_start() {
  if (_internal_has_start()) {
    target_.start_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_target();
  }
}
inline const std::string& get_pools_request::start() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_pools_request.start)
  return _internal_start();
}
template <typename ArgT0, typename... ArgT>
inline void get_pools_request::set_start(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_start()) {
    clear_target();
    set_has_start();
    target_.start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.start_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.get_pools_request.start)
}
inline std::string* get_pools_request::mutable_start() {
  std::string* _s = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.get_pools_request.start)
  return _s;
}
inline const std::string& get_pools_request::_internal_start() const {
  if (_internal_has_start()) {
    return target_.start_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void get_pools_request::_internal_set_start(const std::string& value) {
  if (!_internal_has_start()) {
    clear_target();
    set_has_start();
    target_.start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_pools_request::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_target();
    set_has_start();
    target_.start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return target_.start_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_pools_request::release_start() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.get_pools_request.start)
  if (_internal_has_start()) {
    clear_has_target();
    return target_.start_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void get_pools_request::set_allocated_start(std::string* start) {
  if (has_target()) {
    clear_target();
  }
  if (start != nullptr) {
    set_has_start();
    target_.start_.UnsafeSetDefault(start);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(start);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.get_pools_request.start)
}

// bytes pool = 2 [(.koinos.btype) = ADDRESS];
inline bool get_pools_request::_internal_has_pool() const {
  return target_case() == kPool;
}
inline bool get_pools_request::has_pool() const {
  return _internal_has_pool();
}
inline void get_pools_request::set_has_pool() {
  _oneof_case_[0] = kPool;
}
inline void get_pools_request::clear_pool() {
  if (_internal_has_pool()) {
    target_.pool_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_target();
  }
}
inline const std::string& get_pools_request::pool() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_pools_request.pool)
  return _internal_pool();
}
template <typename ArgT0, typename... ArgT>
inline void get_pools_request::set_pool(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_pool()) {
    clear_target();
    set_has_pool();
    target_.pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.pool_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.get_pools_request.pool)
}
inline std::string* get_pools_request::mutable_pool() {
  std::string* _s = _internal_mutable_pool();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.get_pools_request.pool)
  return _s;
}
inline const std::string& get_pools_request::_internal_pool() const {
  if (_internal_has_pool()) {
    return target_.pool_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void get_pools_request::_internal_set_pool(const std::string& value) {
  if (!_internal_has_pool()) {
    clear_target();
    set_has_pool();
    target_.pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_pools_request::_internal_mutable_pool() {
  if (!_internal_has_pool()) {
    clear_target();
    set_has_pool();
    target_.pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return target_.pool_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_pools_request::release_pool() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.get_pools_request.pool)
  if (_internal_has_pool()) {
    clear_has_target();
    return target_.pool_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void get_pools_request::set_allocated_pool(std::string* pool) {
  if (has_target()) {
    clear_target();
  }
  if (pool != nullptr) {
    set_has_pool();
    target_.pool_.UnsafeSetDefault(pool);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(pool);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.get_pools_request.pool)
}

// uint64 limit = 3 [jstype = JS_STRING];
inline void get_pools_request::clear_limit() {
  limit_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_pools_request::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_pools_request::limit() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_pools_request.limit)
  return _internal_limit();
}
inline void get_pools_request::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  limit_ = value;
}
inline void get_pools_request::set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.get_pools_request.limit)
}

inline bool get_pools_request::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void get_pools_request::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline get_pools_request::TargetCase get_pools_request::target_case() const {
  return get_pools_request::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// get_pools_response

// repeated .koinos.rpc.koindx_tracker.pool_pair values = 1;
inline int get_pools_response::_internal_values_size() const {
  return values_.size();
}
inline int get_pools_response::values_size() const {
  return _internal_values_size();
}
inline void get_pools_response::clear_values() {
  values_.Clear();
}
inline ::koinos::rpc::koindx_tracker::pool_pair* get_pools_response::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.get_pools_response.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::pool_pair >*
get_pools_response::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:koinos.rpc.koindx_tracker.get_pools_response.values)
  return &values_;
}
inline const ::koinos::rpc::koindx_tracker::pool_pair& get_pools_response::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::koinos::rpc::koindx_tracker::pool_pair& get_pools_response::values(int index) const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_pools_response.values)
  return _internal_values(index);
}
inline ::koinos::rpc::koindx_tracker::pool_pair* get_pools_response::_internal_add_values() {
  return values_.Add();
}
inline ::koinos::rpc::koindx_tracker::pool_pair* get_pools_response::add_values() {
  ::koinos::rpc::koindx_tracker::pool_pair* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:koinos.rpc.koindx_tracker.get_pools_response.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::pool_pair >&
get_pools_response::values() const {
  // @@protoc_insertion_point(field_list:koinos.rpc.koindx_tracker.get_pools_response.values)
  return values_;
}

// -------------------------------------------------------------------

// account_liquidity

// bytes address = 1 [(.koinos.btype) = ADDRESS];
inline void account_liquidity::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& account_liquidity::address() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.account_liquidity.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void account_liquidity::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.account_liquidity.address)
}
inline std::string* account_liquidity::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.account_liquidity.address)
  return _s;
}
inline const std::string& account_liquidity::_internal_address() const {
  return address_.Get();
}
inline void account_liquidity::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* account_liquidity::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* account_liquidity::release_address() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.account_liquidity.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void account_liquidity::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.account_liquidity.address)
}

// uint64 balance = 2 [jstype = JS_STRING];
inline void account_liquidity::clear_balance() {
  balance_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 account_liquidity::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 account_liquidity::balance() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.account_liquidity.balance)
  return _internal_balance();
}
inline void account_liquidity::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  balance_ = value;
}
inline void account_liquidity::set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.account_liquidity.balance)
}

// uint64 coin_ms_hi = 3 [jstype = JS_STRING];
inline void account_liquidity::clear_coin_ms_hi() {
  coin_ms_hi_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 account_liquidity::_internal_coin_ms_hi() const {
  return coin_ms_hi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 account_liquidity::coin_ms_hi() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.account_liquidity.coin_ms_hi)
  return _internal_coin_ms_hi();
}
inline void account_liquidity::_internal_set_coin_ms_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ms_hi_ = value;
}
inline void account_liquidity::set_coin_ms_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin_ms_hi(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.account_liquidity.coin_ms_hi)
}

// uint64 coin_ms_lo = 4 [jstype = JS_STRING];
inline void account_liquidity::clear_coin_ms_lo() {
  coin_ms_lo_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 account_liquidity::_internal_coin_ms_lo() const {
  return coin_ms_lo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 account_liquidity::coin_ms_lo() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.account_liquidity.coin_ms_lo)
  return _internal_coin_ms_lo();
}
inline void account_liquidity::_internal_set_coin_ms_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ms_lo_ = value;
}
inline void account_liquidity::set_coin_ms_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin_ms_lo(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.account_liquidity.coin_ms_lo)
}

// -------------------------------------------------------------------

// get_liquidity_request

// bytes pool = 1 [(.koinos.btype) = ADDRESS];
inline void get_liquidity_request::clear_pool() {
  pool_.ClearToEmpty();
}
inline const std::string& get_liquidity_request::pool() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_liquidity_request.pool)
  return _internal_pool();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_liquidity_request::set_pool(ArgT0&& arg0, ArgT... args) {
 
 pool_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.get_liquidity_request.pool)
}
inline std::string* get_liquidity_request::mutable_pool() {
  std::string* _s = _internal_mutable_pool();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.get_liquidity_request.pool)
  return _s;
}
inline const std::string& get_liquidity_request::_internal_pool() const {
  return pool_.Get();
}
inline void get_liquidity_request::_internal_set_pool(const std::string& value) {
  
  pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_liquidity_request::_internal_mutable_pool() {
  
  return pool_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_liquidity_request::release_pool() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.get_liquidity_request.pool)
  return pool_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_liquidity_request::set_allocated_pool(std::string* pool) {
  if (pool != nullptr) {
    
  } else {
    
  }
  pool_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pool,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.get_liquidity_request.pool)
}

// bytes start = 2 [(.koinos.btype) = ADDRESS];
inline void get_liquidity_request::clear_start() {
  start_.ClearToEmpty();
}
inline const std::string& get_liquidity_request::start() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_liquidity_request.start)
  return _internal_start();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_liquidity_request::set_start(ArgT0&& arg0, ArgT... args) {
 
 start_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.get_liquidity_request.start)
}
inline std::string* get_liquidity_request::mutable_start() {
  std::string* _s = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.get_liquidity_request.start)
  return _s;
}
inline const std::string& get_liquidity_request::_internal_start() const {
  return start_.Get();
}
inline void get_liquidity_request::_internal_set_start(const std::string& value) {
  
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_liquidity_request::_internal_mutable_start() {
  
  return start_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_liquidity_request::release_start() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.get_liquidity_request.start)
  return start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_liquidity_request::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.get_liquidity_request.start)
}

// uint64 limit = 3 [jstype = JS_STRING];
inline void get_liquidity_request::clear_limit() {
  limit_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_liquidity_request::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_liquidity_request::limit() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_liquidity_request.limit)
  return _internal_limit();
}
inline void get_liquidity_request::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  limit_ = value;
}
inline void get_liquidity_request::set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.get_liquidity_request.limit)
}

// optional uint64 start_ms = 4 [jstype = JS_STRING];
inline bool get_liquidity_request::_internal_has_start_ms() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool get_liquidity_request::has_start_ms() const {
  return _internal_has_start_ms();
}
inline void get_liquidity_request::clear_start_ms() {
  start_ms_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_liquidity_request::_internal_start_ms() const {
  return start_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_liquidity_request::start_ms() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_liquidity_request.start_ms)
  return _internal_start_ms();
}
inline void get_liquidity_request::_internal_set_start_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  start_ms_ = value;
}
inline void get_liquidity_request::set_start_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_ms(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.get_liquidity_request.start_ms)
}

// optional uint64 end_ms = 5 [jstype = JS_STRING];
inline bool get_liquidity_request::_internal_has_end_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool get_liquidity_request::has_end_ms() const {
  return _internal_has_end_ms();
}
inline void get_liquidity_request::clear_end_ms() {
  end_ms_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_liquidity_request::_internal_end_ms() const {
  return end_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_liquidity_request::end_ms() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_liquidity_request.end_ms)
  return _internal_end_ms();
}
inline void get_liquidity_request::_internal_set_end_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  end_ms_ = value;
}
inline void get_liquidity_request::set_end_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_ms(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.get_liquidity_request.end_ms)
}

// -------------------------------------------------------------------

// get_liquidity_response

// repeated .koinos.rpc.koindx_tracker.account_liquidity values = 1;
inline int get_liquidity_response::_internal_values_size() const {
  return values_.size();
}
inline int get_liquidity_response::values_size() const {
  return _internal_values_size();
}
inline void get_liquidity_response::clear_values() {
  values_.Clear();
}
inline ::koinos::rpc::koindx_tracker::account_liquidity* get_liquidity_response::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.get_liquidity_response.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::account_liquidity >*
get_liquidity_response::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:koinos.rpc.koindx_tracker.get_liquidity_response.values)
  return &values_;
}
inline const ::koinos::rpc::koindx_tracker::account_liquidity& get_liquidity_response::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::koinos::rpc::koindx_tracker::account_liquidity& get_liquidity_response::values(int index) const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_liquidity_response.values)
  return _internal_values(index);
}
inline ::koinos::rpc::koindx_tracker::account_liquidity* get_liquidity_response::_internal_add_values() {
  return values_.Add();
}
inline ::koinos::rpc::koindx_tracker::account_liquidity* get_liquidity_response::add_values() {
  ::koinos::rpc::koindx_tracker::account_liquidity* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:koinos.rpc.koindx_tracker.get_liquidity_response.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::account_liquidity >&
get_liquidity_response::values() const {
  // @@protoc_insertion_point(field_list:koinos.rpc.koindx_tracker.get_liquidity_response.values)
  return values_;
}

// -------------------------------------------------------------------

// pool_tvl

// bytes pool = 1 [(.koinos.btype) = ADDRESS];
inline void pool_tvl::clear_pool() {
  pool_.ClearToEmpty();
}
inline const std::string& pool_tvl::pool() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.pool_tvl.pool)
  return _internal_pool();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pool_tvl::set_pool(ArgT0&& arg0, ArgT... args) {
 
 pool_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.pool_tvl.pool)
}
inline std::string* pool_tvl::mutable_pool() {
  std::string* _s = _internal_mutable_pool();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.pool_tvl.pool)
  return _s;
}
inline const std::string& pool_tvl::_internal_pool() const {
  return pool_.Get();
}
inline void pool_tvl::_internal_set_pool(const std::string& value) {
  
  pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* pool_tvl::_internal_mutable_pool() {
  
  return pool_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* pool_tvl::release_pool() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.pool_tvl.pool)
  return pool_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void pool_tvl::set_allocated_pool(std::string* pool) {
  if (pool != nullptr) {
    
  } else {
    
  }
  pool_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pool,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.pool_tvl.pool)
}

// uint64 tvl = 2 [jstype = JS_STRING];
inline void pool_tvl::clear_tvl() {
  tvl_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pool_tvl::_internal_tvl() const {
  return tvl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 pool_tvl::tvl() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.pool_tvl.tvl)
  return _internal_tvl();
}
inline void pool_tvl::_internal_set_tvl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tvl_ = value;
}
inline void pool_tvl::set_tvl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tvl(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.pool_tvl.tvl)
}

// -------------------------------------------------------------------

// get_tvl_request

// bytes start = 1 [(.koinos.btype) = ADDRESS];
inline bool get_tvl_request::_internal_has_start() const {
  return target_case() == kStart;
}
inline bool get_tvl_request::has_start() const {
  return _internal_has_start();
}
inline void get_tvl_request::set_has_start() {
  _oneof_case_[0] = kStart;
}
inline void get_tvl_request::clear_start() {
  if (_internal_has_start()) {
    target_.start_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_target();
  }
}
inline const std::string& get_tvl_request::start() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_tvl_request.start)
  return _internal_start();
}
template <typename ArgT0, typename... ArgT>
inline void get_tvl_request::set_start(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_start()) {
    clear_target();
    set_has_start();
    target_.start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.start_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.get_tvl_request.start)
}
inline std::string* get_tvl_request::mutable_start() {
  std::string* _s = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.get_tvl_request.start)
  return _s;
}
inline const std::string& get_tvl_request::_internal_start() const {
  if (_internal_has_start()) {
    return target_.start_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void get_tvl_request::_internal_set_start(const std::string& value) {
  if (!_internal_has_start()) {
    clear_target();
    set_has_start();
    target_.start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_tvl_request::_internal_mutable_start() {
  if (!_internal_has_start()) {
    clear_target();
    set_has_start();
    target_.start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return target_.start_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_tvl_request::release_start() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.get_tvl_request.start)
  if (_internal_has_start()) {
    clear_has_target();
    return target_.start_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void get_tvl_request::set_allocated_start(std::string* start) {
  if (has_target()) {
    clear_target();
  }
  if (start != nullptr) {
    set_has_start();
    target_.start_.UnsafeSetDefault(start);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(start);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.get_tvl_request.start)
}

// bytes pool = 2 [(.koinos.btype) = ADDRESS];
inline bool get_tvl_request::_internal_has_pool() const {
  return target_case() == kPool;
}
inline bool get_tvl_request::has_pool() const {
  return _internal_has_pool();
}
inline void get_tvl_request::set_has_pool() {
  _oneof_case_[0] = kPool;
}
inline void get_tvl_request::clear_pool() {
  if (_internal_has_pool()) {
    target_.pool_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_target();
  }
}
inline const std::string& get_tvl_request::pool() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_tvl_request.pool)
  return _internal_pool();
}
template <typename ArgT0, typename... ArgT>
inline void get_tvl_request::set_pool(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_pool()) {
    clear_target();
    set_has_pool();
    target_.pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.pool_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.get_tvl_request.pool)
}
inline std::string* get_tvl_request::mutable_pool() {
  std::string* _s = _internal_mutable_pool();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.get_tvl_request.pool)
  return _s;
}
inline const std::string& get_tvl_request::_internal_pool() const {
  if (_internal_has_pool()) {
    return target_.pool_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void get_tvl_request::_internal_set_pool(const std::string& value) {
  if (!_internal_has_pool()) {
    clear_target();
    set_has_pool();
    target_.pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  target_.pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_tvl_request::_internal_mutable_pool() {
  if (!_internal_has_pool()) {
    clear_target();
    set_has_pool();
    target_.pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return target_.pool_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_tvl_request::release_pool() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.get_tvl_request.pool)
  if (_internal_has_pool()) {
    clear_has_target();
    return target_.pool_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void get_tvl_request::set_allocated_pool(std::string* pool) {
  if (has_target()) {
    clear_target();
  }
  if (pool != nullptr) {
    set_has_pool();
    target_.pool_.UnsafeSetDefault(pool);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(pool);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.get_tvl_request.pool)
}

// uint64 limit = 3 [jstype = JS_STRING];
inline void get_tvl_request::clear_limit() {
  limit_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_tvl_request::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_tvl_request::limit() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_tvl_request.limit)
  return _internal_limit();
}
inline void get_tvl_request::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  limit_ = value;
}
inline void get_tvl_request::set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.get_tvl_request.limit)
}

// optional uint64 ms = 4 [jstype = JS_STRING];
inline bool get_tvl_request::_internal_has_ms() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool get_tvl_request::has_ms() const {
  return _internal_has_ms();
}
inline void get_tvl_request::clear_ms() {
  ms_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_tvl_request::_internal_ms() const {
  return ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_tvl_request::ms() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_tvl_request.ms)
  return _internal_ms();
}
inline void get_tvl_request::_internal_set_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ms_ = value;
}
inline void get_tvl_request::set_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ms(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.koindx_tracker.get_tvl_request.ms)
}

inline bool get_tvl_request::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void get_tvl_request::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline get_tvl_request::TargetCase get_tvl_request::target_case() const {
  return get_tvl_request::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// get_tvl_response

// repeated .koinos.rpc.koindx_tracker.pool_tvl values = 1;
inline int get_tvl_response::_internal_values_size() const {
  return values_.size();
}
inline int get_tvl_response::values_size() const {
  return _internal_values_size();
}
inline void get_tvl_response::clear_values() {
  values_.Clear();
}
inline ::koinos::rpc::koindx_tracker::pool_tvl* get_tvl_response::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.get_tvl_response.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::pool_tvl >*
get_tvl_response::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:koinos.rpc.koindx_tracker.get_tvl_response.values)
  return &values_;
}
inline const ::koinos::rpc::koindx_tracker::pool_tvl& get_tvl_response::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::koinos::rpc::koindx_tracker::pool_tvl& get_tvl_response::values(int index) const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.get_tvl_response.values)
  return _internal_values(index);
}
inline ::koinos::rpc::koindx_tracker::pool_tvl* get_tvl_response::_internal_add_values() {
  return values_.Add();
}
inline ::koinos::rpc::koindx_tracker::pool_tvl* get_tvl_response::add_values() {
  ::koinos::rpc::koindx_tracker::pool_tvl* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:koinos.rpc.koindx_tracker.get_tvl_response.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::rpc::koindx_tracker::pool_tvl >&
get_tvl_response::values() const {
  // @@protoc_insertion_point(field_list:koinos.rpc.koindx_tracker.get_tvl_response.values)
  return values_;
}

// -------------------------------------------------------------------

// koindx_tracker_request

// .koinos.rpc.reserved_rpc reserved = 1;
inline bool koindx_tracker_request::_internal_has_reserved() const {
  return request_case() == kReserved;
}
inline bool koindx_tracker_request::has_reserved() const {
  return _internal_has_reserved();
}
inline void koindx_tracker_request::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::rpc::reserved_rpc* koindx_tracker_request::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.koindx_tracker_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
      ::koinos::rpc::reserved_rpc* temp = request_.reserved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::reserved_rpc& koindx_tracker_request::_internal_reserved() const {
  return _internal_has_reserved()
      ? *request_.reserved_
      : reinterpret_cast< ::koinos::rpc::reserved_rpc&>(::koinos::rpc::_reserved_rpc_default_instance_);
}
inline const ::koinos::rpc::reserved_rpc& koindx_tracker_request::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.koindx_tracker_request.reserved)
  return _internal_reserved();
}
inline ::koinos::rpc::reserved_rpc* koindx_tracker_request::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.koindx_tracker.koindx_tracker_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
    ::koinos::rpc::reserved_rpc* temp = request_.reserved_;
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void koindx_tracker_request::unsafe_arena_set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  clear_request();
  if (reserved) {
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_request.reserved)
}
inline ::koinos::rpc::reserved_rpc* koindx_tracker_request::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_request();
    set_has_reserved();
    request_.reserved_ = CreateMaybeMessage< ::koinos::rpc::reserved_rpc >(GetArenaForAllocation());
  }
  return request_.reserved_;
}
inline ::koinos::rpc::reserved_rpc* koindx_tracker_request::mutable_reserved() {
  ::koinos::rpc::reserved_rpc* _msg = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.koindx_tracker_request.reserved)
  return _msg;
}

// .koinos.rpc.koindx_tracker.get_pools_request get_pools = 2;
inline bool koindx_tracker_request::_internal_has_get_pools() const {
  return request_case() == kGetPools;
}
inline bool koindx_tracker_request::has_get_pools() const {
  return _internal_has_get_pools();
}
inline void koindx_tracker_request::set_has_get_pools() {
  _oneof_case_[0] = kGetPools;
}
inline void koindx_tracker_request::clear_get_pools() {
  if (_internal_has_get_pools()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_pools_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::koindx_tracker::get_pools_request* koindx_tracker_request::release_get_pools() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.koindx_tracker_request.get_pools)
  if (_internal_has_get_pools()) {
    clear_has_request();
      ::koinos::rpc::koindx_tracker::get_pools_request* temp = request_.get_pools_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_pools_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::koindx_tracker::get_pools_request& koindx_tracker_request::_internal_get_pools() const {
  return _internal_has_get_pools()
      ? *request_.get_pools_
      : reinterpret_cast< ::koinos::rpc::koindx_tracker::get_pools_request&>(::koinos::rpc::koindx_tracker::_get_pools_request_default_instance_);
}
inline const ::koinos::rpc::koindx_tracker::get_pools_request& koindx_tracker_request::get_pools() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.koindx_tracker_request.get_pools)
  return _internal_get_pools();
}
inline ::koinos::rpc::koindx_tracker::get_pools_request* koindx_tracker_request::unsafe_arena_release_get_pools() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.koindx_tracker.koindx_tracker_request.get_pools)
  if (_internal_has_get_pools()) {
    clear_has_request();
    ::koinos::rpc::koindx_tracker::get_pools_request* temp = request_.get_pools_;
    request_.get_pools_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void koindx_tracker_request::unsafe_arena_set_allocated_get_pools(::koinos::rpc::koindx_tracker::get_pools_request* get_pools) {
  clear_request();
  if (get_pools) {
    set_has_get_pools();
    request_.get_pools_ = get_pools;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_request.get_pools)
}
inline ::koinos::rpc::koindx_tracker::get_pools_request* koindx_tracker_request::_internal_mutable_get_pools() {
  if (!_internal_has_get_pools()) {
    clear_request();
    set_has_get_pools();
    request_.get_pools_ = CreateMaybeMessage< ::koinos::rpc::koindx_tracker::get_pools_request >(GetArenaForAllocation());
  }
  return request_.get_pools_;
}
inline ::koinos::rpc::koindx_tracker::get_pools_request* koindx_tracker_request::mutable_get_pools() {
  ::koinos::rpc::koindx_tracker::get_pools_request* _msg = _internal_mutable_get_pools();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.koindx_tracker_request.get_pools)
  return _msg;
}

// .koinos.rpc.koindx_tracker.get_liquidity_request get_liquidity = 3;
inline bool koindx_tracker_request::_internal_has_get_liquidity() const {
  return request_case() == kGetLiquidity;
}
inline bool koindx_tracker_request::has_get_liquidity() const {
  return _internal_has_get_liquidity();
}
inline void koindx_tracker_request::set_has_get_liquidity() {
  _oneof_case_[0] = kGetLiquidity;
}
inline void koindx_tracker_request::clear_get_liquidity() {
  if (_internal_has_get_liquidity()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_liquidity_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::koindx_tracker::get_liquidity_request* koindx_tracker_request::release_get_liquidity() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.koindx_tracker_request.get_liquidity)
  if (_internal_has_get_liquidity()) {
    clear_has_request();
      ::koinos::rpc::koindx_tracker::get_liquidity_request* temp = request_.get_liquidity_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_liquidity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::koindx_tracker::get_liquidity_request& koindx_tracker_request::_internal_get_liquidity() const {
  return _internal_has_get_liquidity()
      ? *request_.get_liquidity_
      : reinterpret_cast< ::koinos::rpc::koindx_tracker::get_liquidity_request&>(::koinos::rpc::koindx_tracker::_get_liquidity_request_default_instance_);
}
inline const ::koinos::rpc::koindx_tracker::get_liquidity_request& koindx_tracker_request::get_liquidity() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.koindx_tracker_request.get_liquidity)
  return _internal_get_liquidity();
}
inline ::koinos::rpc::koindx_tracker::get_liquidity_request* koindx_tracker_request::unsafe_arena_release_get_liquidity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.koindx_tracker.koindx_tracker_request.get_liquidity)
  if (_internal_has_get_liquidity()) {
    clear_has_request();
    ::koinos::rpc::koindx_tracker::get_liquidity_request* temp = request_.get_liquidity_;
    request_.get_liquidity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void koindx_tracker_request::unsafe_arena_set_allocated_get_liquidity(::koinos::rpc::koindx_tracker::get_liquidity_request* get_liquidity) {
  clear_request();
  if (get_liquidity) {
    set_has_get_liquidity();
    request_.get_liquidity_ = get_liquidity;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_request.get_liquidity)
}
inline ::koinos::rpc::koindx_tracker::get_liquidity_request* koindx_tracker_request::_internal_mutable_get_liquidity() {
  if (!_internal_has_get_liquidity()) {
    clear_request();
    set_has_get_liquidity();
    request_.get_liquidity_ = CreateMaybeMessage< ::koinos::rpc::koindx_tracker::get_liquidity_request >(GetArenaForAllocation());
  }
  return request_.get_liquidity_;
}
inline ::koinos::rpc::koindx_tracker::get_liquidity_request* koindx_tracker_request::mutable_get_liquidity() {
  ::koinos::rpc::koindx_tracker::get_liquidity_request* _msg = _internal_mutable_get_liquidity();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.koindx_tracker_request.get_liquidity)
  return _msg;
}

// .koinos.rpc.koindx_tracker.get_tvl_request get_tvl = 4;
inline bool koindx_tracker_request::_internal_has_get_tvl() const {
  return request_case() == kGetTvl;
}
inline bool koindx_tracker_request::has_get_tvl() const {
  return _internal_has_get_tvl();
}
inline void koindx_tracker_request::set_has_get_tvl() {
  _oneof_case_[0] = kGetTvl;
}
inline void koindx_tracker_request::clear_get_tvl() {
  if (_internal_has_get_tvl()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_tvl_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::koindx_tracker::get_tvl_request* koindx_tracker_request::release_get_tvl() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.koindx_tracker_request.get_tvl)
  if (_internal_has_get_tvl()) {
    clear_has_request();
      ::koinos::rpc::koindx_tracker::get_tvl_request* temp = request_.get_tvl_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_tvl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::koindx_tracker::get_tvl_request& koindx_tracker_request::_internal_get_tvl() const {
  return _internal_has_get_tvl()
      ? *request_.get_tvl_
      : reinterpret_cast< ::koinos::rpc::koindx_tracker::get_tvl_request&>(::koinos::rpc::koindx_tracker::_get_tvl_request_default_instance_);
}
inline const ::koinos::rpc::koindx_tracker::get_tvl_request& koindx_tracker_request::get_tvl() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.koindx_tracker_request.get_tvl)
  return _internal_get_tvl();
}
inline ::koinos::rpc::koindx_tracker::get_tvl_request* koindx_tracker_request::unsafe_arena_release_get_tvl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.koindx_tracker.koindx_tracker_request.get_tvl)
  if (_internal_has_get_tvl()) {
    clear_has_request();
    ::koinos::rpc::koindx_tracker::get_tvl_request* temp = request_.get_tvl_;
    request_.get_tvl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void koindx_tracker_request::unsafe_arena_set_allocated_get_tvl(::koinos::rpc::koindx_tracker::get_tvl_request* get_tvl) {
  clear_request();
  if (get_tvl) {
    set_has_get_tvl();
    request_.get_tvl_ = get_tvl;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_request.get_tvl)
}
inline ::koinos::rpc::koindx_tracker::get_tvl_request* koindx_tracker_request::_internal_mutable_get_tvl() {
  if (!_internal_has_get_tvl()) {
    clear_request();
    set_has_get_tvl();
    request_.get_tvl_ = CreateMaybeMessage< ::koinos::rpc::koindx_tracker::get_tvl_request >(GetArenaForAllocation());
  }
  return request_.get_tvl_;
}
inline ::koinos::rpc::koindx_tracker::get_tvl_request* koindx_tracker_request::mutable_get_tvl() {
  ::koinos::rpc::koindx_tracker::get_tvl_request* _msg = _internal_mutable_get_tvl();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.koindx_tracker_request.get_tvl)
  return _msg;
}

inline bool koindx_tracker_request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void koindx_tracker_request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline koindx_tracker_request::RequestCase koindx_tracker_request::request_case() const {
  return koindx_tracker_request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// koindx_tracker_response

// .koinos.rpc.reserved_rpc reserved = 1;
inline bool koindx_tracker_response::_internal_has_reserved() const {
  return response_case() == kReserved;
}
inline bool koindx_tracker_response::has_reserved() const {
  return _internal_has_reserved();
}
inline void koindx_tracker_response::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::rpc::reserved_rpc* koindx_tracker_response::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.koindx_tracker_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
      ::koinos::rpc::reserved_rpc* temp = response_.reserved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::reserved_rpc& koindx_tracker_response::_internal_reserved() const {
  return _internal_has_reserved()
      ? *response_.reserved_
      : reinterpret_cast< ::koinos::rpc::reserved_rpc&>(::koinos::rpc::_reserved_rpc_default_instance_);
}
inline const ::koinos::rpc::reserved_rpc& koindx_tracker_response::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.koindx_tracker_response.reserved)
  return _internal_reserved();
}
inline ::koinos::rpc::reserved_rpc* koindx_tracker_response::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.koindx_tracker.koindx_tracker_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
    ::koinos::rpc::reserved_rpc* temp = response_.reserved_;
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void koindx_tracker_response::unsafe_arena_set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  clear_response();
  if (reserved) {
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_response.reserved)
}
inline ::koinos::rpc::reserved_rpc* koindx_tracker_response::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_response();
    set_has_reserved();
    response_.reserved_ = CreateMaybeMessage< ::koinos::rpc::reserved_rpc >(GetArenaForAllocation());
  }
  return response_.reserved_;
}
inline ::koinos::rpc::reserved_rpc* koindx_tracker_response::mutable_reserved() {
  ::koinos::rpc::reserved_rpc* _msg = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.koindx_tracker_response.reserved)
  return _msg;
}

// .koinos.rpc.error_status error = 2;
inline bool koindx_tracker_response::_internal_has_error() const {
  return response_case() == kError;
}
inline bool koindx_tracker_response::has_error() const {
  return _internal_has_error();
}
inline void koindx_tracker_response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::koinos::rpc::error_status* koindx_tracker_response::release_error() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.koindx_tracker_response.error)
  if (_internal_has_error()) {
    clear_has_response();
      ::koinos::rpc::error_status* temp = response_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::error_status& koindx_tracker_response::_internal_error() const {
  return _internal_has_error()
      ? *response_.error_
      : reinterpret_cast< ::koinos::rpc::error_status&>(::koinos::rpc::_error_status_default_instance_);
}
inline const ::koinos::rpc::error_status& koindx_tracker_response::error() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.koindx_tracker_response.error)
  return _internal_error();
}
inline ::koinos::rpc::error_status* koindx_tracker_response::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.koindx_tracker.koindx_tracker_response.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::koinos::rpc::error_status* temp = response_.error_;
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void koindx_tracker_response::unsafe_arena_set_allocated_error(::koinos::rpc::error_status* error) {
  clear_response();
  if (error) {
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_response.error)
}
inline ::koinos::rpc::error_status* koindx_tracker_response::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_response();
    set_has_error();
    response_.error_ = CreateMaybeMessage< ::koinos::rpc::error_status >(GetArenaForAllocation());
  }
  return response_.error_;
}
inline ::koinos::rpc::error_status* koindx_tracker_response::mutable_error() {
  ::koinos::rpc::error_status* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.koindx_tracker_response.error)
  return _msg;
}

// .koinos.rpc.koindx_tracker.get_pools_response get_pools = 3;
inline bool koindx_tracker_response::_internal_has_get_pools() const {
  return response_case() == kGetPools;
}
inline bool koindx_tracker_response::has_get_pools() const {
  return _internal_has_get_pools();
}
inline void koindx_tracker_response::set_has_get_pools() {
  _oneof_case_[0] = kGetPools;
}
inline void koindx_tracker_response::clear_get_pools() {
  if (_internal_has_get_pools()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.get_pools_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::koindx_tracker::get_pools_response* koindx_tracker_response::release_get_pools() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.koindx_tracker_response.get_pools)
  if (_internal_has_get_pools()) {
    clear_has_response();
      ::koinos::rpc::koindx_tracker::get_pools_response* temp = response_.get_pools_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_pools_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::koindx_tracker::get_pools_response& koindx_tracker_response::_internal_get_pools() const {
  return _internal_has_get_pools()
      ? *response_.get_pools_
      : reinterpret_cast< ::koinos::rpc::koindx_tracker::get_pools_response&>(::koinos::rpc::koindx_tracker::_get_pools_response_default_instance_);
}
inline const ::koinos::rpc::koindx_tracker::get_pools_response& koindx_tracker_response::get_pools() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.koindx_tracker_response.get_pools)
  return _internal_get_pools();
}
inline ::koinos::rpc::koindx_tracker::get_pools_response* koindx_tracker_response::unsafe_arena_release_get_pools() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.koindx_tracker.koindx_tracker_response.get_pools)
  if (_internal_has_get_pools()) {
    clear_has_response();
    ::koinos::rpc::koindx_tracker::get_pools_response* temp = response_.get_pools_;
    response_.get_pools_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void koindx_tracker_response::unsafe_arena_set_allocated_get_pools(::koinos::rpc::koindx_tracker::get_pools_response* get_pools) {
  clear_response();
  if (get_pools) {
    set_has_get_pools();
    response_.get_pools_ = get_pools;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_response.get_pools)
}
inline ::koinos::rpc::koindx_tracker::get_pools_response* koindx_tracker_response::_internal_mutable_get_pools() {
  if (!_internal_has_get_pools()) {
    clear_response();
    set_has_get_pools();
    response_.get_pools_ = CreateMaybeMessage< ::koinos::rpc::koindx_tracker::get_pools_response >(GetArenaForAllocation());
  }
  return response_.get_pools_;
}
inline ::koinos::rpc::koindx_tracker::get_pools_response* koindx_tracker_response::mutable_get_pools() {
  ::koinos::rpc::koindx_tracker::get_pools_response* _msg = _internal_mutable_get_pools();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.koindx_tracker_response.get_pools)
  return _msg;
}

// .koinos.rpc.koindx_tracker.get_liquidity_response get_liquidity = 4;
inline bool koindx_tracker_response::_internal_has_get_liquidity() const {
  return response_case() == kGetLiquidity;
}
inline bool koindx_tracker_response::has_get_liquidity() const {
  return _internal_has_get_liquidity();
}
inline void koindx_tracker_response::set_has_get_liquidity() {
  _oneof_case_[0] = kGetLiquidity;
}
inline void koindx_tracker_response::clear_get_liquidity() {
  if (_internal_has_get_liquidity()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.get_liquidity_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::koindx_tracker::get_liquidity_response* koindx_tracker_response::release_get_liquidity() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.koindx_tracker_response.get_liquidity)
  if (_internal_has_get_liquidity()) {
    clear_has_response();
      ::koinos::rpc::koindx_tracker::get_liquidity_response* temp = response_.get_liquidity_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_liquidity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::koindx_tracker::get_liquidity_response& koindx_tracker_response::_internal_get_liquidity() const {
  return _internal_has_get_liquidity()
      ? *response_.get_liquidity_
      : reinterpret_cast< ::koinos::rpc::koindx_tracker::get_liquidity_response&>(::koinos::rpc::koindx_tracker::_get_liquidity_response_default_instance_);
}
inline const ::koinos::rpc::koindx_tracker::get_liquidity_response& koindx_tracker_response::get_liquidity() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.koindx_tracker_response.get_liquidity)
  return _internal_get_liquidity();
}
inline ::koinos::rpc::koindx_tracker::get_liquidity_response* koindx_tracker_response::unsafe_arena_release_get_liquidity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.koindx_tracker.koindx_tracker_response.get_liquidity)
  if (_internal_has_get_liquidity()) {
    clear_has_response();
    ::koinos::rpc::koindx_tracker::get_liquidity_response* temp = response_.get_liquidity_;
    response_.get_liquidity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void koindx_tracker_response::unsafe_arena_set_allocated_get_liquidity(::koinos::rpc::koindx_tracker::get_liquidity_response* get_liquidity) {
  clear_response();
  if (get_liquidity) {
    set_has_get_liquidity();
    response_.get_liquidity_ = get_liquidity;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_response.get_liquidity)
}
inline ::koinos::rpc::koindx_tracker::get_liquidity_response* koindx_tracker_response::_internal_mutable_get_liquidity() {
  if (!_internal_has_get_liquidity()) {
    clear_response();
    set_has_get_liquidity();
    response_.get_liquidity_ = CreateMaybeMessage< ::koinos::rpc::koindx_tracker::get_liquidity_response >(GetArenaForAllocation());
  }
  return response_.get_liquidity_;
}
inline ::koinos::rpc::koindx_tracker::get_liquidity_response* koindx_tracker_response::mutable_get_liquidity() {
  ::koinos::rpc::koindx_tracker::get_liquidity_response* _msg = _internal_mutable_get_liquidity();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.koindx_tracker_response.get_liquidity)
  return _msg;
}

// .koinos.rpc.koindx_tracker.get_tvl_response get_tvl = 5;
inline bool koindx_tracker_response::_internal_has_get_tvl() const {
  return response_case() == kGetTvl;
}
inline bool koindx_tracker_response::has_get_tvl() const {
  return _internal_has_get_tvl();
}
inline void koindx_tracker_response::set_has_get_tvl() {
  _oneof_case_[0] = kGetTvl;
}
inline void koindx_tracker_response::clear_get_tvl() {
  if (_internal_has_get_tvl()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.get_tvl_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::koindx_tracker::get_tvl_response* koindx_tracker_response::release_get_tvl() {
  // @@protoc_insertion_point(field_release:koinos.rpc.koindx_tracker.koindx_tracker_response.get_tvl)
  if (_internal_has_get_tvl()) {
    clear_has_response();
      ::koinos::rpc::koindx_tracker::get_tvl_response* temp = response_.get_tvl_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_tvl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::koindx_tracker::get_tvl_response& koindx_tracker_response::_internal_get_tvl() const {
  return _internal_has_get_tvl()
      ? *response_.get_tvl_
      : reinterpret_cast< ::koinos::rpc::koindx_tracker::get_tvl_response&>(::koinos::rpc::koindx_tracker::_get_tvl_response_default_instance_);
}
inline const ::koinos::rpc::koindx_tracker::get_tvl_response& koindx_tracker_response::get_tvl() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.koindx_tracker.koindx_tracker_response.get_tvl)
  return _internal_get_tvl();
}
inline ::koinos::rpc::koindx_tracker::get_tvl_response* koindx_tracker_response::unsafe_arena_release_get_tvl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.koindx_tracker.koindx_tracker_response.get_tvl)
  if (_internal_has_get_tvl()) {
    clear_has_response();
    ::koinos::rpc::koindx_tracker::get_tvl_response* temp = response_.get_tvl_;
    response_.get_tvl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void koindx_tracker_response::unsafe_arena_set_allocated_get_tvl(::koinos::rpc::koindx_tracker::get_tvl_response* get_tvl) {
  clear_response();
  if (get_tvl) {
    set_has_get_tvl();
    response_.get_tvl_ = get_tvl;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_response.get_tvl)
}
inline ::koinos::rpc::koindx_tracker::get_tvl_response* koindx_tracker_response::_internal_mutable_get_tvl() {
  if (!_internal_has_get_tvl()) {
    clear_response();
    set_has_get_tvl();
    response_.get_tvl_ = CreateMaybeMessage< ::koinos::rpc::koindx_tracker::get_tvl_response >(GetArenaForAllocation());
  }
  return response_.get_tvl_;
}
inline ::koinos::rpc::koindx_tracker::get_tvl_response* koindx_tracker_response::mutable_get_tvl() {
  ::koinos::rpc::koindx_tracker::get_tvl_response* _msg = _internal_mutable_get_tvl();
  // @@protoc_insertion_point(field_mutable:koinos.rpc.koindx_tracker.koindx_tracker_response.get_tvl)
  return _msg;
}

inline bool koindx_tracker_response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void koindx_tracker_response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline koindx_tracker_response::ResponseCase koindx_tracker_response::response_case() const {
  return koindx_tracker_response::ResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace koindx_tracker
}  // namespace rpc
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto
