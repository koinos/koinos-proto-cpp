// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/p2p/p2p_rpc.proto

#include "koinos/rpc/p2p/p2p_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace rpc {
namespace p2p {
constexpr get_gossip_status_request::get_gossip_status_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_gossip_status_requestDefaultTypeInternal {
  constexpr get_gossip_status_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_gossip_status_requestDefaultTypeInternal() {}
  union {
    get_gossip_status_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_gossip_status_requestDefaultTypeInternal _get_gossip_status_request_default_instance_;
constexpr get_gossip_status_response::get_gossip_status_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enabled_(false){}
struct get_gossip_status_responseDefaultTypeInternal {
  constexpr get_gossip_status_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_gossip_status_responseDefaultTypeInternal() {}
  union {
    get_gossip_status_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_gossip_status_responseDefaultTypeInternal _get_gossip_status_response_default_instance_;
constexpr p2p_request::p2p_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct p2p_requestDefaultTypeInternal {
  constexpr p2p_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~p2p_requestDefaultTypeInternal() {}
  union {
    p2p_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT p2p_requestDefaultTypeInternal _p2p_request_default_instance_;
constexpr p2p_response::p2p_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct p2p_responseDefaultTypeInternal {
  constexpr p2p_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~p2p_responseDefaultTypeInternal() {}
  union {
    p2p_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT p2p_responseDefaultTypeInternal _p2p_response_default_instance_;
}  // namespace p2p
}  // namespace rpc
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::p2p::get_gossip_status_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::p2p::get_gossip_status_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::p2p::get_gossip_status_response, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::p2p::p2p_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::p2p::p2p_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::p2p::p2p_request, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::p2p::p2p_response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::p2p::p2p_response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::p2p::p2p_response, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::rpc::p2p::get_gossip_status_request)},
  { 5, -1, sizeof(::koinos::rpc::p2p::get_gossip_status_response)},
  { 11, -1, sizeof(::koinos::rpc::p2p::p2p_request)},
  { 19, -1, sizeof(::koinos::rpc::p2p::p2p_response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::p2p::_get_gossip_status_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::p2p::_get_gossip_status_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::p2p::_p2p_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::p2p::_p2p_response_default_instance_),
};

const char descriptor_table_protodef_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034koinos/rpc/p2p/p2p_rpc.proto\022\016koinos.r"
  "pc.p2p\032\024koinos/options.proto\032\024koinos/rpc"
  "/rpc.proto\"\033\n\031get_gossip_status_request\""
  "-\n\032get_gossip_status_response\022\017\n\007enabled"
  "\030\001 \001(\010\"\216\001\n\013p2p_request\022,\n\010reserved\030\001 \001(\013"
  "2\030.koinos.rpc.reserved_rpcH\000\022F\n\021get_goss"
  "ip_status\030\002 \001(\0132).koinos.rpc.p2p.get_gos"
  "sip_status_requestH\000B\t\n\007request\"\276\001\n\014p2p_"
  "response\022,\n\010reserved\030\001 \001(\0132\030.koinos.rpc."
  "reserved_rpcH\000\022+\n\005error\030\002 \001(\0132\032.koinos.r"
  "pc.error_responseH\000\022G\n\021get_gossip_status"
  "\030\003 \001(\0132*.koinos.rpc.p2p.get_gossip_statu"
  "s_responseH\000B\n\n\010responseB6Z4github.com/k"
  "oinos/koinos-proto-golang/koinos/rpc/p2p"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto_deps[2] = {
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2frpc_2frpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto = {
  false, false, 568, descriptor_table_protodef_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto, "koinos/rpc/p2p/p2p_rpc.proto", 
  &descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto_once, descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto::offsets,
  file_level_metadata_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto, file_level_enum_descriptors_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto, file_level_service_descriptors_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto_getter() {
  return &descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto(&descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto);
namespace koinos {
namespace rpc {
namespace p2p {

// ===================================================================

class get_gossip_status_request::_Internal {
 public:
};

get_gossip_status_request::get_gossip_status_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.p2p.get_gossip_status_request)
}
get_gossip_status_request::get_gossip_status_request(const get_gossip_status_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.p2p.get_gossip_status_request)
}

inline void get_gossip_status_request::SharedCtor() {
}

get_gossip_status_request::~get_gossip_status_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.p2p.get_gossip_status_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_gossip_status_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_gossip_status_request::ArenaDtor(void* object) {
  get_gossip_status_request* _this = reinterpret_cast< get_gossip_status_request* >(object);
  (void)_this;
}
void get_gossip_status_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_gossip_status_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_gossip_status_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.p2p.get_gossip_status_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_gossip_status_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_gossip_status_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.p2p.get_gossip_status_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.p2p.get_gossip_status_request)
  return target;
}

size_t get_gossip_status_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.p2p.get_gossip_status_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_gossip_status_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_gossip_status_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_gossip_status_request::GetClassData() const { return &_class_data_; }

void get_gossip_status_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_gossip_status_request *>(to)->MergeFrom(
      static_cast<const get_gossip_status_request &>(from));
}


void get_gossip_status_request::MergeFrom(const get_gossip_status_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.p2p.get_gossip_status_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_gossip_status_request::CopyFrom(const get_gossip_status_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.p2p.get_gossip_status_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_gossip_status_request::IsInitialized() const {
  return true;
}

void get_gossip_status_request::InternalSwap(get_gossip_status_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_gossip_status_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto[0]);
}

// ===================================================================

class get_gossip_status_response::_Internal {
 public:
};

get_gossip_status_response::get_gossip_status_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.p2p.get_gossip_status_response)
}
get_gossip_status_response::get_gossip_status_response(const get_gossip_status_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.p2p.get_gossip_status_response)
}

inline void get_gossip_status_response::SharedCtor() {
enabled_ = false;
}

get_gossip_status_response::~get_gossip_status_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.p2p.get_gossip_status_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_gossip_status_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_gossip_status_response::ArenaDtor(void* object) {
  get_gossip_status_response* _this = reinterpret_cast< get_gossip_status_response* >(object);
  (void)_this;
}
void get_gossip_status_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_gossip_status_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_gossip_status_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.p2p.get_gossip_status_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_gossip_status_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_gossip_status_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.p2p.get_gossip_status_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.p2p.get_gossip_status_response)
  return target;
}

size_t get_gossip_status_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.p2p.get_gossip_status_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_gossip_status_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_gossip_status_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_gossip_status_response::GetClassData() const { return &_class_data_; }

void get_gossip_status_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_gossip_status_response *>(to)->MergeFrom(
      static_cast<const get_gossip_status_response &>(from));
}


void get_gossip_status_response::MergeFrom(const get_gossip_status_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.p2p.get_gossip_status_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_gossip_status_response::CopyFrom(const get_gossip_status_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.p2p.get_gossip_status_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_gossip_status_response::IsInitialized() const {
  return true;
}

void get_gossip_status_response::InternalSwap(get_gossip_status_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_gossip_status_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto[1]);
}

// ===================================================================

class p2p_request::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const p2p_request* msg);
  static const ::koinos::rpc::p2p::get_gossip_status_request& get_gossip_status(const p2p_request* msg);
};

const ::koinos::rpc::reserved_rpc&
p2p_request::_Internal::reserved(const p2p_request* msg) {
  return *msg->request_.reserved_;
}
const ::koinos::rpc::p2p::get_gossip_status_request&
p2p_request::_Internal::get_gossip_status(const p2p_request* msg) {
  return *msg->request_.get_gossip_status_;
}
void p2p_request::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.p2p.p2p_request.reserved)
}
void p2p_request::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.reserved_;
    }
    clear_has_request();
  }
}
void p2p_request::set_allocated_get_gossip_status(::koinos::rpc::p2p::get_gossip_status_request* get_gossip_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_gossip_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::p2p::get_gossip_status_request>::GetOwningArena(get_gossip_status);
    if (message_arena != submessage_arena) {
      get_gossip_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_gossip_status, submessage_arena);
    }
    set_has_get_gossip_status();
    request_.get_gossip_status_ = get_gossip_status;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.p2p.p2p_request.get_gossip_status)
}
p2p_request::p2p_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.p2p.p2p_request)
}
p2p_request::p2p_request(const p2p_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kGetGossipStatus: {
      _internal_mutable_get_gossip_status()->::koinos::rpc::p2p::get_gossip_status_request::MergeFrom(from._internal_get_gossip_status());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.p2p.p2p_request)
}

inline void p2p_request::SharedCtor() {
clear_has_request();
}

p2p_request::~p2p_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.p2p.p2p_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void p2p_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void p2p_request::ArenaDtor(void* object) {
  p2p_request* _this = reinterpret_cast< p2p_request* >(object);
  (void)_this;
}
void p2p_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void p2p_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void p2p_request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.p2p.p2p_request)
  switch (request_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.reserved_;
      }
      break;
    }
    case kGetGossipStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_gossip_status_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void p2p_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.p2p.p2p_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* p2p_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.p2p.get_gossip_status_request get_gossip_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_gossip_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* p2p_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.p2p.p2p_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.p2p.get_gossip_status_request get_gossip_status = 2;
  if (_internal_has_get_gossip_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::get_gossip_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.p2p.p2p_request)
  return target;
}

size_t p2p_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.p2p.p2p_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.reserved_);
      break;
    }
    // .koinos.rpc.p2p.get_gossip_status_request get_gossip_status = 2;
    case kGetGossipStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_gossip_status_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData p2p_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    p2p_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*p2p_request::GetClassData() const { return &_class_data_; }

void p2p_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<p2p_request *>(to)->MergeFrom(
      static_cast<const p2p_request &>(from));
}


void p2p_request::MergeFrom(const p2p_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.p2p.p2p_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kGetGossipStatus: {
      _internal_mutable_get_gossip_status()->::koinos::rpc::p2p::get_gossip_status_request::MergeFrom(from._internal_get_gossip_status());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void p2p_request::CopyFrom(const p2p_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.p2p.p2p_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool p2p_request::IsInitialized() const {
  return true;
}

void p2p_request::InternalSwap(p2p_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata p2p_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto[2]);
}

// ===================================================================

class p2p_response::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const p2p_response* msg);
  static const ::koinos::rpc::error_response& error(const p2p_response* msg);
  static const ::koinos::rpc::p2p::get_gossip_status_response& get_gossip_status(const p2p_response* msg);
};

const ::koinos::rpc::reserved_rpc&
p2p_response::_Internal::reserved(const p2p_response* msg) {
  return *msg->response_.reserved_;
}
const ::koinos::rpc::error_response&
p2p_response::_Internal::error(const p2p_response* msg) {
  return *msg->response_.error_;
}
const ::koinos::rpc::p2p::get_gossip_status_response&
p2p_response::_Internal::get_gossip_status(const p2p_response* msg) {
  return *msg->response_.get_gossip_status_;
}
void p2p_response::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.p2p.p2p_response.reserved)
}
void p2p_response::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.reserved_;
    }
    clear_has_response();
  }
}
void p2p_response::set_allocated_error(::koinos::rpc::error_response* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.p2p.p2p_response.error)
}
void p2p_response::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
void p2p_response::set_allocated_get_gossip_status(::koinos::rpc::p2p::get_gossip_status_response* get_gossip_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_gossip_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::p2p::get_gossip_status_response>::GetOwningArena(get_gossip_status);
    if (message_arena != submessage_arena) {
      get_gossip_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_gossip_status, submessage_arena);
    }
    set_has_get_gossip_status();
    response_.get_gossip_status_ = get_gossip_status;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.p2p.p2p_response.get_gossip_status)
}
p2p_response::p2p_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.p2p.p2p_response)
}
p2p_response::p2p_response(const p2p_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_response::MergeFrom(from._internal_error());
      break;
    }
    case kGetGossipStatus: {
      _internal_mutable_get_gossip_status()->::koinos::rpc::p2p::get_gossip_status_response::MergeFrom(from._internal_get_gossip_status());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.p2p.p2p_response)
}

inline void p2p_response::SharedCtor() {
clear_has_response();
}

p2p_response::~p2p_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.p2p.p2p_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void p2p_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void p2p_response::ArenaDtor(void* object) {
  p2p_response* _this = reinterpret_cast< p2p_response* >(object);
  (void)_this;
}
void p2p_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void p2p_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void p2p_response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.p2p.p2p_response)
  switch (response_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.reserved_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case kGetGossipStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_gossip_status_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void p2p_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.p2p.p2p_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* p2p_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.error_response error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.p2p.get_gossip_status_response get_gossip_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_gossip_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* p2p_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.p2p.p2p_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.error_response error = 2;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // .koinos.rpc.p2p.get_gossip_status_response get_gossip_status = 3;
  if (_internal_has_get_gossip_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get_gossip_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.p2p.p2p_response)
  return target;
}

size_t p2p_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.p2p.p2p_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.reserved_);
      break;
    }
    // .koinos.rpc.error_response error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    // .koinos.rpc.p2p.get_gossip_status_response get_gossip_status = 3;
    case kGetGossipStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_gossip_status_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData p2p_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    p2p_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*p2p_response::GetClassData() const { return &_class_data_; }

void p2p_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<p2p_response *>(to)->MergeFrom(
      static_cast<const p2p_response &>(from));
}


void p2p_response::MergeFrom(const p2p_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.p2p.p2p_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_response::MergeFrom(from._internal_error());
      break;
    }
    case kGetGossipStatus: {
      _internal_mutable_get_gossip_status()->::koinos::rpc::p2p::get_gossip_status_response::MergeFrom(from._internal_get_gossip_status());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void p2p_response::CopyFrom(const p2p_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.p2p.p2p_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool p2p_response::IsInitialized() const {
  return true;
}

void p2p_response::InternalSwap(p2p_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata p2p_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fp2p_2fp2p_5frpc_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace p2p
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::rpc::p2p::get_gossip_status_request* Arena::CreateMaybeMessage< ::koinos::rpc::p2p::get_gossip_status_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::p2p::get_gossip_status_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::p2p::get_gossip_status_response* Arena::CreateMaybeMessage< ::koinos::rpc::p2p::get_gossip_status_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::p2p::get_gossip_status_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::p2p::p2p_request* Arena::CreateMaybeMessage< ::koinos::rpc::p2p::p2p_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::p2p::p2p_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::p2p::p2p_response* Arena::CreateMaybeMessage< ::koinos::rpc::p2p::p2p_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::p2p::p2p_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
