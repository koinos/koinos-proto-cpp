// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/transaction_store/transaction_store_rpc.proto

#include "koinos/rpc/transaction_store/transaction_store_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace rpc {
namespace transaction_store {
constexpr get_transactions_by_id_request::get_transactions_by_id_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_ids_(){}
struct get_transactions_by_id_requestDefaultTypeInternal {
  constexpr get_transactions_by_id_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_transactions_by_id_requestDefaultTypeInternal() {}
  union {
    get_transactions_by_id_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_transactions_by_id_requestDefaultTypeInternal _get_transactions_by_id_request_default_instance_;
constexpr get_transactions_by_id_response::get_transactions_by_id_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_(){}
struct get_transactions_by_id_responseDefaultTypeInternal {
  constexpr get_transactions_by_id_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_transactions_by_id_responseDefaultTypeInternal() {}
  union {
    get_transactions_by_id_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_transactions_by_id_responseDefaultTypeInternal _get_transactions_by_id_response_default_instance_;
constexpr transaction_store_request::transaction_store_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct transaction_store_requestDefaultTypeInternal {
  constexpr transaction_store_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_store_requestDefaultTypeInternal() {}
  union {
    transaction_store_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_store_requestDefaultTypeInternal _transaction_store_request_default_instance_;
constexpr transaction_store_response::transaction_store_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct transaction_store_responseDefaultTypeInternal {
  constexpr transaction_store_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_store_responseDefaultTypeInternal() {}
  union {
    transaction_store_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_store_responseDefaultTypeInternal _transaction_store_response_default_instance_;
}  // namespace transaction_store
}  // namespace rpc
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::transaction_store::get_transactions_by_id_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::transaction_store::get_transactions_by_id_request, transaction_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::transaction_store::get_transactions_by_id_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::transaction_store::get_transactions_by_id_response, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::transaction_store::transaction_store_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::transaction_store::transaction_store_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::transaction_store::transaction_store_request, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::transaction_store::transaction_store_response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::transaction_store::transaction_store_response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::transaction_store::transaction_store_response, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::rpc::transaction_store::get_transactions_by_id_request)},
  { 6, -1, sizeof(::koinos::rpc::transaction_store::get_transactions_by_id_response)},
  { 12, -1, sizeof(::koinos::rpc::transaction_store::transaction_store_request)},
  { 20, -1, sizeof(::koinos::rpc::transaction_store::transaction_store_response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::transaction_store::_get_transactions_by_id_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::transaction_store::_get_transactions_by_id_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::transaction_store::_transaction_store_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::transaction_store::_transaction_store_response_default_instance_),
};

const char descriptor_table_protodef_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8koinos/rpc/transaction_store/transacti"
  "on_store_rpc.proto\022\034koinos.rpc.transacti"
  "on_store\032\024koinos/rpc/rpc.proto\0320koinos/t"
  "ransaction_store/transaction_store.proto"
  "\"9\n\036get_transactions_by_id_request\022\027\n\017tr"
  "ansaction_ids\030\001 \003(\014\"c\n\037get_transactions_"
  "by_id_response\022@\n\014transactions\030\001 \003(\0132*.k"
  "oinos.transaction_store.transaction_item"
  "\"\264\001\n\031transaction_store_request\022,\n\010reserv"
  "ed\030\001 \001(\0132\030.koinos.rpc.reserved_rpcH\000\022^\n\026"
  "get_transactions_by_id\030\002 \001(\0132<.koinos.rp"
  "c.transaction_store.get_transactions_by_"
  "id_requestH\000B\t\n\007request\"\344\001\n\032transaction_"
  "store_response\022,\n\010reserved\030\001 \001(\0132\030.koino"
  "s.rpc.reserved_rpcH\000\022+\n\005error\030\002 \001(\0132\032.ko"
  "inos.rpc.error_responseH\000\022_\n\026get_transac"
  "tions_by_id\030\003 \001(\0132=.koinos.rpc.transacti"
  "on_store.get_transactions_by_id_response"
  "H\000B\n\n\010responseBDZBgithub.com/koinos/koin"
  "os-proto-golang/koinos/rpc/transaction_s"
  "toreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto_deps[2] = {
  &::descriptor_table_koinos_2frpc_2frpc_2eproto,
  &::descriptor_table_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto = {
  false, false, 812, descriptor_table_protodef_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto, "koinos/rpc/transaction_store/transaction_store_rpc.proto", 
  &descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto_once, descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto::offsets,
  file_level_metadata_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto, file_level_enum_descriptors_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto, file_level_service_descriptors_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto_getter() {
  return &descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto(&descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto);
namespace koinos {
namespace rpc {
namespace transaction_store {

// ===================================================================

class get_transactions_by_id_request::_Internal {
 public:
};

get_transactions_by_id_request::get_transactions_by_id_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transaction_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.transaction_store.get_transactions_by_id_request)
}
get_transactions_by_id_request::get_transactions_by_id_request(const get_transactions_by_id_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transaction_ids_(from.transaction_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.transaction_store.get_transactions_by_id_request)
}

inline void get_transactions_by_id_request::SharedCtor() {
}

get_transactions_by_id_request::~get_transactions_by_id_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.transaction_store.get_transactions_by_id_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_transactions_by_id_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_transactions_by_id_request::ArenaDtor(void* object) {
  get_transactions_by_id_request* _this = reinterpret_cast< get_transactions_by_id_request* >(object);
  (void)_this;
}
void get_transactions_by_id_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transactions_by_id_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_transactions_by_id_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.transaction_store.get_transactions_by_id_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transactions_by_id_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes transaction_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transaction_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transactions_by_id_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.transaction_store.get_transactions_by_id_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes transaction_ids = 1;
  for (int i = 0, n = this->_internal_transaction_ids_size(); i < n; i++) {
    const auto& s = this->_internal_transaction_ids(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.transaction_store.get_transactions_by_id_request)
  return target;
}

size_t get_transactions_by_id_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.transaction_store.get_transactions_by_id_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes transaction_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(transaction_ids_.size());
  for (int i = 0, n = transaction_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      transaction_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_transactions_by_id_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_transactions_by_id_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_transactions_by_id_request::GetClassData() const { return &_class_data_; }

void get_transactions_by_id_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_transactions_by_id_request *>(to)->MergeFrom(
      static_cast<const get_transactions_by_id_request &>(from));
}


void get_transactions_by_id_request::MergeFrom(const get_transactions_by_id_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.transaction_store.get_transactions_by_id_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transaction_ids_.MergeFrom(from.transaction_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_transactions_by_id_request::CopyFrom(const get_transactions_by_id_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.transaction_store.get_transactions_by_id_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transactions_by_id_request::IsInitialized() const {
  return true;
}

void get_transactions_by_id_request::InternalSwap(get_transactions_by_id_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transaction_ids_.InternalSwap(&other->transaction_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transactions_by_id_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto[0]);
}

// ===================================================================

class get_transactions_by_id_response::_Internal {
 public:
};

void get_transactions_by_id_response::clear_transactions() {
  transactions_.Clear();
}
get_transactions_by_id_response::get_transactions_by_id_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.transaction_store.get_transactions_by_id_response)
}
get_transactions_by_id_response::get_transactions_by_id_response(const get_transactions_by_id_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.transaction_store.get_transactions_by_id_response)
}

inline void get_transactions_by_id_response::SharedCtor() {
}

get_transactions_by_id_response::~get_transactions_by_id_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.transaction_store.get_transactions_by_id_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_transactions_by_id_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_transactions_by_id_response::ArenaDtor(void* object) {
  get_transactions_by_id_response* _this = reinterpret_cast< get_transactions_by_id_response* >(object);
  (void)_this;
}
void get_transactions_by_id_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transactions_by_id_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_transactions_by_id_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.transaction_store.get_transactions_by_id_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transactions_by_id_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .koinos.transaction_store.transaction_item transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transactions_by_id_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.transaction_store.get_transactions_by_id_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .koinos.transaction_store.transaction_item transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.transaction_store.get_transactions_by_id_response)
  return target;
}

size_t get_transactions_by_id_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.transaction_store.get_transactions_by_id_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.transaction_store.transaction_item transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_transactions_by_id_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_transactions_by_id_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_transactions_by_id_response::GetClassData() const { return &_class_data_; }

void get_transactions_by_id_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_transactions_by_id_response *>(to)->MergeFrom(
      static_cast<const get_transactions_by_id_response &>(from));
}


void get_transactions_by_id_response::MergeFrom(const get_transactions_by_id_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.transaction_store.get_transactions_by_id_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_transactions_by_id_response::CopyFrom(const get_transactions_by_id_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.transaction_store.get_transactions_by_id_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transactions_by_id_response::IsInitialized() const {
  return true;
}

void get_transactions_by_id_response::InternalSwap(get_transactions_by_id_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transactions_by_id_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto[1]);
}

// ===================================================================

class transaction_store_request::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const transaction_store_request* msg);
  static const ::koinos::rpc::transaction_store::get_transactions_by_id_request& get_transactions_by_id(const transaction_store_request* msg);
};

const ::koinos::rpc::reserved_rpc&
transaction_store_request::_Internal::reserved(const transaction_store_request* msg) {
  return *msg->request_.reserved_;
}
const ::koinos::rpc::transaction_store::get_transactions_by_id_request&
transaction_store_request::_Internal::get_transactions_by_id(const transaction_store_request* msg) {
  return *msg->request_.get_transactions_by_id_;
}
void transaction_store_request::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.transaction_store.transaction_store_request.reserved)
}
void transaction_store_request::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.reserved_;
    }
    clear_has_request();
  }
}
void transaction_store_request::set_allocated_get_transactions_by_id(::koinos::rpc::transaction_store::get_transactions_by_id_request* get_transactions_by_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_transactions_by_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::transaction_store::get_transactions_by_id_request>::GetOwningArena(get_transactions_by_id);
    if (message_arena != submessage_arena) {
      get_transactions_by_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_transactions_by_id, submessage_arena);
    }
    set_has_get_transactions_by_id();
    request_.get_transactions_by_id_ = get_transactions_by_id;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.transaction_store.transaction_store_request.get_transactions_by_id)
}
transaction_store_request::transaction_store_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.transaction_store.transaction_store_request)
}
transaction_store_request::transaction_store_request(const transaction_store_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kGetTransactionsById: {
      _internal_mutable_get_transactions_by_id()->::koinos::rpc::transaction_store::get_transactions_by_id_request::MergeFrom(from._internal_get_transactions_by_id());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.transaction_store.transaction_store_request)
}

inline void transaction_store_request::SharedCtor() {
clear_has_request();
}

transaction_store_request::~transaction_store_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.transaction_store.transaction_store_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_store_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void transaction_store_request::ArenaDtor(void* object) {
  transaction_store_request* _this = reinterpret_cast< transaction_store_request* >(object);
  (void)_this;
}
void transaction_store_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_store_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_store_request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.transaction_store.transaction_store_request)
  switch (request_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.reserved_;
      }
      break;
    }
    case kGetTransactionsById: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_transactions_by_id_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void transaction_store_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.transaction_store.transaction_store_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_store_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.transaction_store.get_transactions_by_id_request get_transactions_by_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_transactions_by_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction_store_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.transaction_store.transaction_store_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.transaction_store.get_transactions_by_id_request get_transactions_by_id = 2;
  if (_internal_has_get_transactions_by_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::get_transactions_by_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.transaction_store.transaction_store_request)
  return target;
}

size_t transaction_store_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.transaction_store.transaction_store_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.reserved_);
      break;
    }
    // .koinos.rpc.transaction_store.get_transactions_by_id_request get_transactions_by_id = 2;
    case kGetTransactionsById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_transactions_by_id_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_store_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_store_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_store_request::GetClassData() const { return &_class_data_; }

void transaction_store_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transaction_store_request *>(to)->MergeFrom(
      static_cast<const transaction_store_request &>(from));
}


void transaction_store_request::MergeFrom(const transaction_store_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.transaction_store.transaction_store_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kGetTransactionsById: {
      _internal_mutable_get_transactions_by_id()->::koinos::rpc::transaction_store::get_transactions_by_id_request::MergeFrom(from._internal_get_transactions_by_id());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_store_request::CopyFrom(const transaction_store_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.transaction_store.transaction_store_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_store_request::IsInitialized() const {
  return true;
}

void transaction_store_request::InternalSwap(transaction_store_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_store_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto[2]);
}

// ===================================================================

class transaction_store_response::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const transaction_store_response* msg);
  static const ::koinos::rpc::error_response& error(const transaction_store_response* msg);
  static const ::koinos::rpc::transaction_store::get_transactions_by_id_response& get_transactions_by_id(const transaction_store_response* msg);
};

const ::koinos::rpc::reserved_rpc&
transaction_store_response::_Internal::reserved(const transaction_store_response* msg) {
  return *msg->response_.reserved_;
}
const ::koinos::rpc::error_response&
transaction_store_response::_Internal::error(const transaction_store_response* msg) {
  return *msg->response_.error_;
}
const ::koinos::rpc::transaction_store::get_transactions_by_id_response&
transaction_store_response::_Internal::get_transactions_by_id(const transaction_store_response* msg) {
  return *msg->response_.get_transactions_by_id_;
}
void transaction_store_response::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.transaction_store.transaction_store_response.reserved)
}
void transaction_store_response::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.reserved_;
    }
    clear_has_response();
  }
}
void transaction_store_response::set_allocated_error(::koinos::rpc::error_response* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.transaction_store.transaction_store_response.error)
}
void transaction_store_response::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
void transaction_store_response::set_allocated_get_transactions_by_id(::koinos::rpc::transaction_store::get_transactions_by_id_response* get_transactions_by_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_transactions_by_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::transaction_store::get_transactions_by_id_response>::GetOwningArena(get_transactions_by_id);
    if (message_arena != submessage_arena) {
      get_transactions_by_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_transactions_by_id, submessage_arena);
    }
    set_has_get_transactions_by_id();
    response_.get_transactions_by_id_ = get_transactions_by_id;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.transaction_store.transaction_store_response.get_transactions_by_id)
}
transaction_store_response::transaction_store_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.transaction_store.transaction_store_response)
}
transaction_store_response::transaction_store_response(const transaction_store_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_response::MergeFrom(from._internal_error());
      break;
    }
    case kGetTransactionsById: {
      _internal_mutable_get_transactions_by_id()->::koinos::rpc::transaction_store::get_transactions_by_id_response::MergeFrom(from._internal_get_transactions_by_id());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.transaction_store.transaction_store_response)
}

inline void transaction_store_response::SharedCtor() {
clear_has_response();
}

transaction_store_response::~transaction_store_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.transaction_store.transaction_store_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_store_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void transaction_store_response::ArenaDtor(void* object) {
  transaction_store_response* _this = reinterpret_cast< transaction_store_response* >(object);
  (void)_this;
}
void transaction_store_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_store_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_store_response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.transaction_store.transaction_store_response)
  switch (response_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.reserved_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case kGetTransactionsById: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_transactions_by_id_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void transaction_store_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.transaction_store.transaction_store_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_store_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.error_response error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.transaction_store.get_transactions_by_id_response get_transactions_by_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_transactions_by_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction_store_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.transaction_store.transaction_store_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.error_response error = 2;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // .koinos.rpc.transaction_store.get_transactions_by_id_response get_transactions_by_id = 3;
  if (_internal_has_get_transactions_by_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get_transactions_by_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.transaction_store.transaction_store_response)
  return target;
}

size_t transaction_store_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.transaction_store.transaction_store_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.reserved_);
      break;
    }
    // .koinos.rpc.error_response error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    // .koinos.rpc.transaction_store.get_transactions_by_id_response get_transactions_by_id = 3;
    case kGetTransactionsById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_transactions_by_id_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_store_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_store_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_store_response::GetClassData() const { return &_class_data_; }

void transaction_store_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transaction_store_response *>(to)->MergeFrom(
      static_cast<const transaction_store_response &>(from));
}


void transaction_store_response::MergeFrom(const transaction_store_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.transaction_store.transaction_store_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_response::MergeFrom(from._internal_error());
      break;
    }
    case kGetTransactionsById: {
      _internal_mutable_get_transactions_by_id()->::koinos::rpc::transaction_store::get_transactions_by_id_response::MergeFrom(from._internal_get_transactions_by_id());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_store_response::CopyFrom(const transaction_store_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.transaction_store.transaction_store_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_store_response::IsInitialized() const {
  return true;
}

void transaction_store_response::InternalSwap(transaction_store_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_store_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2ftransaction_5fstore_2ftransaction_5fstore_5frpc_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace transaction_store
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::rpc::transaction_store::get_transactions_by_id_request* Arena::CreateMaybeMessage< ::koinos::rpc::transaction_store::get_transactions_by_id_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::transaction_store::get_transactions_by_id_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::transaction_store::get_transactions_by_id_response* Arena::CreateMaybeMessage< ::koinos::rpc::transaction_store::get_transactions_by_id_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::transaction_store::get_transactions_by_id_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::transaction_store::transaction_store_request* Arena::CreateMaybeMessage< ::koinos::rpc::transaction_store::transaction_store_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::transaction_store::transaction_store_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::transaction_store::transaction_store_response* Arena::CreateMaybeMessage< ::koinos::rpc::transaction_store::transaction_store_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::transaction_store::transaction_store_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
