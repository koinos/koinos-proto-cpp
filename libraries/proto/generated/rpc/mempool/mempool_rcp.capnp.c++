// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: mempool_rcp.capnp

#include "mempool_rcp.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<20> b_e308cfcad1d2a029 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     41, 160, 210, 209, 202, 207,   8, 227,
     30,   0,   0,   0,   1,   0,   0,   0,
    233,  80,  27, 159, 129,   0,  19, 136,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47, 109, 101, 109, 112,
    111, 111, 108,  47, 109, 101, 109, 112,
    111, 111, 108,  95, 114,  99, 112,  46,
     99,  97, 112, 110, 112,  58,  77, 101,
    109, 112, 111, 111, 108,  82, 101, 115,
    101, 114, 118, 101, 100,  82, 101, 113,
    117, 101, 115, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e308cfcad1d2a029 = b_e308cfcad1d2a029.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e308cfcad1d2a029 = {
  0xe308cfcad1d2a029, b_e308cfcad1d2a029.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e308cfcad1d2a029, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<80> b_c797e21ceb4b22dd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    221,  34,  75, 235,  28, 226, 151, 199,
     30,   0,   0,   0,   1,   0,   2,   0,
    233,  80,  27, 159, 129,   0,  19, 136,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47, 109, 101, 109, 112,
    111, 111, 108,  47, 109, 101, 109, 112,
    111, 111, 108,  95, 114,  99, 112,  46,
     99,  97, 112, 110, 112,  58,  67, 104,
    101,  99, 107,  80, 101, 110, 100, 105,
    110, 103,  65,  99,  99, 111, 117, 110,
    116,  82, 101, 115, 111, 117, 114,  99,
    101, 115,  82, 101, 113, 117, 101, 115,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
     69,   0,   0,   0,  31,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 121, 101, 114,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    181, 199, 229,  10,  47, 226,  97, 240,
      4,   0,   0,   0,   2,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 120,  80,  97, 121, 101, 114,
     82, 101, 115, 111, 117, 114,  99, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 114, 120,  82, 101, 115, 111, 117,
    114,  99, 101,  76, 105, 109, 105, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c797e21ceb4b22dd = b_c797e21ceb4b22dd.words;
#if !CAPNP_LITE
static const uint16_t m_c797e21ceb4b22dd[] = {1, 0, 2};
static const uint16_t i_c797e21ceb4b22dd[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c797e21ceb4b22dd = {
  0xc797e21ceb4b22dd, b_c797e21ceb4b22dd.words, 80, nullptr, m_c797e21ceb4b22dd,
  0, 3, i_c797e21ceb4b22dd, nullptr, nullptr, { &s_c797e21ceb4b22dd, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_ff4847a1cca6dda0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    160, 221, 166, 204, 161,  71,  72, 255,
     30,   0,   0,   0,   1,   0,   1,   0,
    233,  80,  27, 159, 129,   0,  19, 136,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47, 109, 101, 109, 112,
    111, 111, 108,  47, 109, 101, 109, 112,
    111, 111, 108,  95, 114,  99, 112,  46,
     99,  97, 112, 110, 112,  58,  71, 101,
    116,  80, 101, 110, 100, 105, 110, 103,
     84, 114,  97, 110, 115,  97,  99, 116,
    105, 111, 110, 115,  82, 101, 113, 117,
    101, 115, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    108, 105, 109, 105, 116,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ff4847a1cca6dda0 = b_ff4847a1cca6dda0.words;
#if !CAPNP_LITE
static const uint16_t m_ff4847a1cca6dda0[] = {0};
static const uint16_t i_ff4847a1cca6dda0[] = {0};
const ::capnp::_::RawSchema s_ff4847a1cca6dda0 = {
  0xff4847a1cca6dda0, b_ff4847a1cca6dda0.words, 37, nullptr, m_ff4847a1cca6dda0,
  0, 1, i_ff4847a1cca6dda0, nullptr, nullptr, { &s_ff4847a1cca6dda0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<71> b_ca8abc89f18ff6cb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    203, 246, 143, 241, 137, 188, 138, 202,
     30,   0,   0,   0,   1,   0,   1,   0,
    233,  80,  27, 159, 129,   0,  19, 136,
      1,   0,   7,   0,   0,   0,   3,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47, 109, 101, 109, 112,
    111, 111, 108,  47, 109, 101, 109, 112,
    111, 111, 108,  95, 114,  99, 112,  46,
     99,  97, 112, 110, 112,  58,  77, 101,
    109, 112, 111, 111, 108,  82,  80,  67,
     82, 101, 113, 117, 101, 115, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 234,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0, 186,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 109, 112, 111, 111, 108,  82,
    101, 115, 101, 114, 118, 101, 100,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     41, 160, 210, 209, 202, 207,   8, 227,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 104, 101,  99, 107,  80, 101, 110,
    100, 105, 110, 103,  65,  99,  99, 111,
    117, 110, 116,  82, 101, 115, 111, 117,
    114,  99, 101, 115,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    221,  34,  75, 235,  28, 226, 151, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 116,  80, 101, 110, 100, 105,
    110, 103,  84, 114,  97, 110, 115,  97,
     99, 116, 105, 111, 110, 115,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    160, 221, 166, 204, 161,  71,  72, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ca8abc89f18ff6cb = b_ca8abc89f18ff6cb.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ca8abc89f18ff6cb[] = {
  &s_c797e21ceb4b22dd,
  &s_e308cfcad1d2a029,
  &s_ff4847a1cca6dda0,
};
static const uint16_t m_ca8abc89f18ff6cb[] = {1, 2, 0};
static const uint16_t i_ca8abc89f18ff6cb[] = {0, 1, 2};
const ::capnp::_::RawSchema s_ca8abc89f18ff6cb = {
  0xca8abc89f18ff6cb, b_ca8abc89f18ff6cb.words, 71, d_ca8abc89f18ff6cb, m_ca8abc89f18ff6cb,
  3, 3, i_ca8abc89f18ff6cb, nullptr, nullptr, { &s_ca8abc89f18ff6cb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_b114df104ffb0bd3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    211,  11, 251,  79,  16, 223,  20, 177,
     30,   0,   0,   0,   1,   0,   0,   0,
    233,  80,  27, 159, 129,   0,  19, 136,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47, 109, 101, 109, 112,
    111, 111, 108,  47, 109, 101, 109, 112,
    111, 111, 108,  95, 114,  99, 112,  46,
     99,  97, 112, 110, 112,  58,  77, 101,
    109, 112, 111, 111, 108,  82, 101, 115,
    101, 114, 118, 101, 100,  82, 101, 115,
    112, 111, 110, 115, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b114df104ffb0bd3 = b_b114df104ffb0bd3.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b114df104ffb0bd3 = {
  0xb114df104ffb0bd3, b_b114df104ffb0bd3.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b114df104ffb0bd3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_92a2408b299d3477 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    119,  52, 157,  41, 139,  64, 162, 146,
     30,   0,   0,   0,   1,   0,   1,   0,
    233,  80,  27, 159, 129,   0,  19, 136,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47, 109, 101, 109, 112,
    111, 111, 108,  47, 109, 101, 109, 112,
    111, 111, 108,  95, 114,  99, 112,  46,
     99,  97, 112, 110, 112,  58,  67, 104,
    101,  99, 107,  80, 101, 110, 100, 105,
    110, 103,  65,  99,  99, 111, 117, 110,
    116,  82, 101, 115, 111, 117, 114,  99,
    101, 115,  82, 101, 115, 112, 111, 110,
    115, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_92a2408b299d3477 = b_92a2408b299d3477.words;
#if !CAPNP_LITE
static const uint16_t m_92a2408b299d3477[] = {0};
static const uint16_t i_92a2408b299d3477[] = {0};
const ::capnp::_::RawSchema s_92a2408b299d3477 = {
  0x92a2408b299d3477, b_92a2408b299d3477.words, 38, nullptr, m_92a2408b299d3477,
  0, 1, i_92a2408b299d3477, nullptr, nullptr, { &s_92a2408b299d3477, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_f48b72eeabe033a4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    164,  51, 224, 171, 238, 114, 139, 244,
     30,   0,   0,   0,   1,   0,   0,   0,
    233,  80,  27, 159, 129,   0,  19, 136,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47, 109, 101, 109, 112,
    111, 111, 108,  47, 109, 101, 109, 112,
    111, 111, 108,  95, 114,  99, 112,  46,
     99,  97, 112, 110, 112,  58,  71, 101,
    116,  80, 101, 110, 100, 105, 110, 103,
     84, 114,  97, 110, 115,  99, 116, 105,
    111, 110, 115,  82, 101, 115, 112, 111,
    110, 115, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    116, 114,  97, 110, 115,  97,  99, 116,
    105, 111, 110, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     93,  39, 123,  57, 130, 234, 106, 164,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f48b72eeabe033a4 = b_f48b72eeabe033a4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f48b72eeabe033a4[] = {
  &s_a46aea82397b275d,
};
static const uint16_t m_f48b72eeabe033a4[] = {0};
static const uint16_t i_f48b72eeabe033a4[] = {0};
const ::capnp::_::RawSchema s_f48b72eeabe033a4 = {
  0xf48b72eeabe033a4, b_f48b72eeabe033a4.words, 42, d_f48b72eeabe033a4, m_f48b72eeabe033a4,
  1, 1, i_f48b72eeabe033a4, nullptr, nullptr, { &s_f48b72eeabe033a4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<88> b_9648a61c8170654b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     75, 101, 112, 129,  28, 166,  72, 150,
     30,   0,   0,   0,   1,   0,   1,   0,
    233,  80,  27, 159, 129,   0,  19, 136,
      1,   0,   7,   0,   0,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47, 109, 101, 109, 112,
    111, 111, 108,  47, 109, 101, 109, 112,
    111, 111, 108,  95, 114,  99, 112,  46,
     99,  97, 112, 110, 112,  58,  77, 101,
    109, 112, 111, 111, 108,  82,  80,  67,
     82, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0, 234,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0, 186,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 109, 112, 111, 111, 108,  82,
    101, 115, 101, 114, 118, 101, 100,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211,  11, 251,  79,  16, 223,  20, 177,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 109, 112, 111, 111, 108,  69,
    114, 114, 111, 114,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     66, 220,  47,  80, 225,  58, 194, 230,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 104, 101,  99, 107,  80, 101, 110,
    100, 105, 110, 103,  65,  99,  99, 111,
    117, 110, 116,  82, 101, 115, 111, 117,
    114,  99, 101, 115,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    119,  52, 157,  41, 139,  64, 162, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 116,  80, 101, 110, 100, 105,
    110, 103,  84, 114,  97, 110, 115,  97,
     99, 116, 105, 111, 110, 115,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    164,  51, 224, 171, 238, 114, 139, 244,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9648a61c8170654b = b_9648a61c8170654b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9648a61c8170654b[] = {
  &s_92a2408b299d3477,
  &s_b114df104ffb0bd3,
  &s_e6c23ae1502fdc42,
  &s_f48b72eeabe033a4,
};
static const uint16_t m_9648a61c8170654b[] = {2, 3, 1, 0};
static const uint16_t i_9648a61c8170654b[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_9648a61c8170654b = {
  0x9648a61c8170654b, b_9648a61c8170654b.words, 88, d_9648a61c8170654b, m_9648a61c8170654b,
  4, 4, i_9648a61c8170654b, nullptr, nullptr, { &s_9648a61c8170654b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace koinos {
namespace rpc {
namespace mempool {

// MempoolReservedRequest
constexpr uint16_t MempoolReservedRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t MempoolReservedRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind MempoolReservedRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MempoolReservedRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CheckPendingAccountResourcesRequest
constexpr uint16_t CheckPendingAccountResourcesRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t CheckPendingAccountResourcesRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CheckPendingAccountResourcesRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CheckPendingAccountResourcesRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GetPendingTransactionsRequest
constexpr uint16_t GetPendingTransactionsRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t GetPendingTransactionsRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GetPendingTransactionsRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GetPendingTransactionsRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// MempoolRPCRequest
constexpr uint16_t MempoolRPCRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t MempoolRPCRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind MempoolRPCRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MempoolRPCRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// MempoolReservedResponse
constexpr uint16_t MempoolReservedResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t MempoolReservedResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind MempoolReservedResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MempoolReservedResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CheckPendingAccountResourcesResponse
constexpr uint16_t CheckPendingAccountResourcesResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t CheckPendingAccountResourcesResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CheckPendingAccountResourcesResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CheckPendingAccountResourcesResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GetPendingTransctionsResponse
constexpr uint16_t GetPendingTransctionsResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t GetPendingTransctionsResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GetPendingTransctionsResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GetPendingTransctionsResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// MempoolRPCResponse
constexpr uint16_t MempoolRPCResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t MempoolRPCResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind MempoolRPCResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MempoolRPCResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

