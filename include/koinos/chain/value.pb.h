// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/chain/value.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2fvalue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2fvalue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fchain_2fvalue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fchain_2fvalue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fchain_2fvalue_2eproto;
namespace koinos {
namespace chain {
class enum_type;
struct enum_typeDefaultTypeInternal;
extern enum_typeDefaultTypeInternal _enum_type_default_instance_;
class list_type;
struct list_typeDefaultTypeInternal;
extern list_typeDefaultTypeInternal _list_type_default_instance_;
class value_type;
struct value_typeDefaultTypeInternal;
extern value_typeDefaultTypeInternal _value_type_default_instance_;
}  // namespace chain
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::chain::enum_type* Arena::CreateMaybeMessage<::koinos::chain::enum_type>(Arena*);
template<> ::koinos::chain::list_type* Arena::CreateMaybeMessage<::koinos::chain::list_type>(Arena*);
template<> ::koinos::chain::value_type* Arena::CreateMaybeMessage<::koinos::chain::value_type>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace chain {

// ===================================================================

class value_type final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.value_type) */ {
 public:
  inline value_type() : value_type(nullptr) {}
  ~value_type() override;
  explicit constexpr value_type(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  value_type(const value_type& from);
  value_type(value_type&& from) noexcept
    : value_type() {
    *this = ::std::move(from);
  }

  inline value_type& operator=(const value_type& from) {
    CopyFrom(from);
    return *this;
  }
  inline value_type& operator=(value_type&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const value_type& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kMessageValue = 1,
    kInt32Value = 2,
    kInt64Value = 3,
    kUint32Value = 4,
    kUint64Value = 5,
    kSint32Value = 6,
    kSint64Value = 7,
    kFixed32Value = 8,
    kFixed64Value = 9,
    kSfixed32Value = 10,
    kSfixed64Value = 11,
    kBoolValue = 12,
    kStringValue = 13,
    kBytesValue = 14,
    KIND_NOT_SET = 0,
  };

  static inline const value_type* internal_default_instance() {
    return reinterpret_cast<const value_type*>(
               &_value_type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(value_type& a, value_type& b) {
    a.Swap(&b);
  }
  inline void Swap(value_type* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(value_type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline value_type* New() const final {
    return new value_type();
  }

  value_type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<value_type>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const value_type& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const value_type& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(value_type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.value_type";
  }
  protected:
  explicit value_type(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageValueFieldNumber = 1,
    kInt32ValueFieldNumber = 2,
    kInt64ValueFieldNumber = 3,
    kUint32ValueFieldNumber = 4,
    kUint64ValueFieldNumber = 5,
    kSint32ValueFieldNumber = 6,
    kSint64ValueFieldNumber = 7,
    kFixed32ValueFieldNumber = 8,
    kFixed64ValueFieldNumber = 9,
    kSfixed32ValueFieldNumber = 10,
    kSfixed64ValueFieldNumber = 11,
    kBoolValueFieldNumber = 12,
    kStringValueFieldNumber = 13,
    kBytesValueFieldNumber = 14,
  };
  // .google.protobuf.Any message_value = 1;
  bool has_message_value() const;
  private:
  bool _internal_has_message_value() const;
  public:
  void clear_message_value();
  const PROTOBUF_NAMESPACE_ID::Any& message_value() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_message_value();
  PROTOBUF_NAMESPACE_ID::Any* mutable_message_value();
  void set_allocated_message_value(PROTOBUF_NAMESPACE_ID::Any* message_value);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_message_value() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_message_value();
  public:
  void unsafe_arena_set_allocated_message_value(
      PROTOBUF_NAMESPACE_ID::Any* message_value);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_message_value();

  // int32 int32_value = 2;
  bool has_int32_value() const;
  private:
  bool _internal_has_int32_value() const;
  public:
  void clear_int32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int32_value() const;
  void set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_value() const;
  void _internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 int64_value = 3 [jstype = JS_STRING];
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value() const;
  void set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_value() const;
  void _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 uint32_value = 4;
  bool has_uint32_value() const;
  private:
  bool _internal_has_uint32_value() const;
  public:
  void clear_uint32_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value() const;
  void set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_value() const;
  void _internal_set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 uint64_value = 5 [jstype = JS_STRING];
  bool has_uint64_value() const;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value() const;
  void set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_value() const;
  void _internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 sint32_value = 6;
  bool has_sint32_value() const;
  private:
  bool _internal_has_sint32_value() const;
  public:
  void clear_sint32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 sint32_value() const;
  void set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sint32_value() const;
  void _internal_set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint64 sint64_value = 7 [jstype = JS_STRING];
  bool has_sint64_value() const;
  private:
  bool _internal_has_sint64_value() const;
  public:
  void clear_sint64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_value() const;
  void set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64_value() const;
  void _internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // fixed32 fixed32_value = 8;
  bool has_fixed32_value() const;
  private:
  bool _internal_has_fixed32_value() const;
  public:
  void clear_fixed32_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_value() const;
  void set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed32_value() const;
  void _internal_set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed64 fixed64_value = 9 [jstype = JS_STRING];
  bool has_fixed64_value() const;
  private:
  bool _internal_has_fixed64_value() const;
  public:
  void clear_fixed64_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_value() const;
  void set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fixed64_value() const;
  void _internal_set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sfixed32 sfixed32_value = 10;
  bool has_sfixed32_value() const;
  private:
  bool _internal_has_sfixed32_value() const;
  public:
  void clear_sfixed32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_value() const;
  void set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sfixed32_value() const;
  void _internal_set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sfixed64 sfixed64_value = 11 [jstype = JS_STRING];
  bool has_sfixed64_value() const;
  private:
  bool _internal_has_sfixed64_value() const;
  public:
  void clear_sfixed64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_value() const;
  void set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sfixed64_value() const;
  void _internal_set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bool_value = 12;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // string string_value = 13;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bytes bytes_value = 14;
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:koinos.chain.value_type)
 private:
  class _Internal;
  void set_has_message_value();
  void set_has_int32_value();
  void set_has_int64_value();
  void set_has_uint32_value();
  void set_has_uint64_value();
  void set_has_sint32_value();
  void set_has_sint64_value();
  void set_has_fixed32_value();
  void set_has_fixed64_value();
  void set_has_sfixed32_value();
  void set_has_sfixed64_value();
  void set_has_bool_value();
  void set_has_string_value();
  void set_has_bytes_value();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    constexpr KindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    PROTOBUF_NAMESPACE_ID::Any* message_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 int32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 sint32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 sint64_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_value_;
    bool bool_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2fchain_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class enum_type final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.enum_type) */ {
 public:
  inline enum_type() : enum_type(nullptr) {}
  ~enum_type() override;
  explicit constexpr enum_type(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  enum_type(const enum_type& from);
  enum_type(enum_type&& from) noexcept
    : enum_type() {
    *this = ::std::move(from);
  }

  inline enum_type& operator=(const enum_type& from) {
    CopyFrom(from);
    return *this;
  }
  inline enum_type& operator=(enum_type&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const enum_type& default_instance() {
    return *internal_default_instance();
  }
  static inline const enum_type* internal_default_instance() {
    return reinterpret_cast<const enum_type*>(
               &_enum_type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(enum_type& a, enum_type& b) {
    a.Swap(&b);
  }
  inline void Swap(enum_type* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(enum_type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline enum_type* New() const final {
    return new enum_type();
  }

  enum_type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<enum_type>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const enum_type& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const enum_type& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(enum_type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.enum_type";
  }
  protected:
  explicit enum_type(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNumberFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 number = 2;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.enum_type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class list_type final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.list_type) */ {
 public:
  inline list_type() : list_type(nullptr) {}
  ~list_type() override;
  explicit constexpr list_type(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  list_type(const list_type& from);
  list_type(list_type&& from) noexcept
    : list_type() {
    *this = ::std::move(from);
  }

  inline list_type& operator=(const list_type& from) {
    CopyFrom(from);
    return *this;
  }
  inline list_type& operator=(list_type&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const list_type& default_instance() {
    return *internal_default_instance();
  }
  static inline const list_type* internal_default_instance() {
    return reinterpret_cast<const list_type*>(
               &_list_type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(list_type& a, list_type& b) {
    a.Swap(&b);
  }
  inline void Swap(list_type* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(list_type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline list_type* New() const final {
    return new list_type();
  }

  list_type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<list_type>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const list_type& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const list_type& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(list_type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.list_type";
  }
  protected:
  explicit list_type(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .koinos.chain.value_type values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::koinos::chain::value_type* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::chain::value_type >*
      mutable_values();
  private:
  const ::koinos::chain::value_type& _internal_values(int index) const;
  ::koinos::chain::value_type* _internal_add_values();
  public:
  const ::koinos::chain::value_type& values(int index) const;
  ::koinos::chain::value_type* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::chain::value_type >&
      values() const;

  // @@protoc_insertion_point(class_scope:koinos.chain.list_type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::chain::value_type > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fvalue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// value_type

// .google.protobuf.Any message_value = 1;
inline bool value_type::_internal_has_message_value() const {
  return kind_case() == kMessageValue;
}
inline bool value_type::has_message_value() const {
  return _internal_has_message_value();
}
inline void value_type::set_has_message_value() {
  _oneof_case_[0] = kMessageValue;
}
inline PROTOBUF_NAMESPACE_ID::Any* value_type::release_message_value() {
  // @@protoc_insertion_point(field_release:koinos.chain.value_type.message_value)
  if (_internal_has_message_value()) {
    clear_has_kind();
      PROTOBUF_NAMESPACE_ID::Any* temp = kind_.message_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.message_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Any& value_type::_internal_message_value() const {
  return _internal_has_message_value()
      ? *kind_.message_value_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Any&>(PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& value_type::message_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.message_value)
  return _internal_message_value();
}
inline PROTOBUF_NAMESPACE_ID::Any* value_type::unsafe_arena_release_message_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.chain.value_type.message_value)
  if (_internal_has_message_value()) {
    clear_has_kind();
    PROTOBUF_NAMESPACE_ID::Any* temp = kind_.message_value_;
    kind_.message_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void value_type::unsafe_arena_set_allocated_message_value(PROTOBUF_NAMESPACE_ID::Any* message_value) {
  clear_kind();
  if (message_value) {
    set_has_message_value();
    kind_.message_value_ = message_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.value_type.message_value)
}
inline PROTOBUF_NAMESPACE_ID::Any* value_type::_internal_mutable_message_value() {
  if (!_internal_has_message_value()) {
    clear_kind();
    set_has_message_value();
    kind_.message_value_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Any >(GetArenaForAllocation());
  }
  return kind_.message_value_;
}
inline PROTOBUF_NAMESPACE_ID::Any* value_type::mutable_message_value() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_message_value();
  // @@protoc_insertion_point(field_mutable:koinos.chain.value_type.message_value)
  return _msg;
}

// int32 int32_value = 2;
inline bool value_type::_internal_has_int32_value() const {
  return kind_case() == kInt32Value;
}
inline bool value_type::has_int32_value() const {
  return _internal_has_int32_value();
}
inline void value_type::set_has_int32_value() {
  _oneof_case_[0] = kInt32Value;
}
inline void value_type::clear_int32_value() {
  if (_internal_has_int32_value()) {
    kind_.int32_value_ = 0;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 value_type::_internal_int32_value() const {
  if (_internal_has_int32_value()) {
    return kind_.int32_value_;
  }
  return 0;
}
inline void value_type::_internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int32_value()) {
    clear_kind();
    set_has_int32_value();
  }
  kind_.int32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 value_type::int32_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.int32_value)
  return _internal_int32_value();
}
inline void value_type::set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int32_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.value_type.int32_value)
}

// int64 int64_value = 3 [jstype = JS_STRING];
inline bool value_type::_internal_has_int64_value() const {
  return kind_case() == kInt64Value;
}
inline bool value_type::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void value_type::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void value_type::clear_int64_value() {
  if (_internal_has_int64_value()) {
    kind_.int64_value_ = int64_t{0};
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 value_type::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return kind_.int64_value_;
  }
  return int64_t{0};
}
inline void value_type::_internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int64_value()) {
    clear_kind();
    set_has_int64_value();
  }
  kind_.int64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 value_type::int64_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.int64_value)
  return _internal_int64_value();
}
inline void value_type::set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.value_type.int64_value)
}

// uint32 uint32_value = 4;
inline bool value_type::_internal_has_uint32_value() const {
  return kind_case() == kUint32Value;
}
inline bool value_type::has_uint32_value() const {
  return _internal_has_uint32_value();
}
inline void value_type::set_has_uint32_value() {
  _oneof_case_[0] = kUint32Value;
}
inline void value_type::clear_uint32_value() {
  if (_internal_has_uint32_value()) {
    kind_.uint32_value_ = 0u;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 value_type::_internal_uint32_value() const {
  if (_internal_has_uint32_value()) {
    return kind_.uint32_value_;
  }
  return 0u;
}
inline void value_type::_internal_set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_uint32_value()) {
    clear_kind();
    set_has_uint32_value();
  }
  kind_.uint32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 value_type::uint32_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.uint32_value)
  return _internal_uint32_value();
}
inline void value_type::set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.value_type.uint32_value)
}

// uint64 uint64_value = 5 [jstype = JS_STRING];
inline bool value_type::_internal_has_uint64_value() const {
  return kind_case() == kUint64Value;
}
inline bool value_type::has_uint64_value() const {
  return _internal_has_uint64_value();
}
inline void value_type::set_has_uint64_value() {
  _oneof_case_[0] = kUint64Value;
}
inline void value_type::clear_uint64_value() {
  if (_internal_has_uint64_value()) {
    kind_.uint64_value_ = uint64_t{0u};
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 value_type::_internal_uint64_value() const {
  if (_internal_has_uint64_value()) {
    return kind_.uint64_value_;
  }
  return uint64_t{0u};
}
inline void value_type::_internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_uint64_value()) {
    clear_kind();
    set_has_uint64_value();
  }
  kind_.uint64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 value_type::uint64_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.uint64_value)
  return _internal_uint64_value();
}
inline void value_type::set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.value_type.uint64_value)
}

// sint32 sint32_value = 6;
inline bool value_type::_internal_has_sint32_value() const {
  return kind_case() == kSint32Value;
}
inline bool value_type::has_sint32_value() const {
  return _internal_has_sint32_value();
}
inline void value_type::set_has_sint32_value() {
  _oneof_case_[0] = kSint32Value;
}
inline void value_type::clear_sint32_value() {
  if (_internal_has_sint32_value()) {
    kind_.sint32_value_ = 0;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 value_type::_internal_sint32_value() const {
  if (_internal_has_sint32_value()) {
    return kind_.sint32_value_;
  }
  return 0;
}
inline void value_type::_internal_set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_sint32_value()) {
    clear_kind();
    set_has_sint32_value();
  }
  kind_.sint32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 value_type::sint32_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.sint32_value)
  return _internal_sint32_value();
}
inline void value_type::set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sint32_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.value_type.sint32_value)
}

// sint64 sint64_value = 7 [jstype = JS_STRING];
inline bool value_type::_internal_has_sint64_value() const {
  return kind_case() == kSint64Value;
}
inline bool value_type::has_sint64_value() const {
  return _internal_has_sint64_value();
}
inline void value_type::set_has_sint64_value() {
  _oneof_case_[0] = kSint64Value;
}
inline void value_type::clear_sint64_value() {
  if (_internal_has_sint64_value()) {
    kind_.sint64_value_ = int64_t{0};
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 value_type::_internal_sint64_value() const {
  if (_internal_has_sint64_value()) {
    return kind_.sint64_value_;
  }
  return int64_t{0};
}
inline void value_type::_internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sint64_value()) {
    clear_kind();
    set_has_sint64_value();
  }
  kind_.sint64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 value_type::sint64_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.sint64_value)
  return _internal_sint64_value();
}
inline void value_type::set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.value_type.sint64_value)
}

// fixed32 fixed32_value = 8;
inline bool value_type::_internal_has_fixed32_value() const {
  return kind_case() == kFixed32Value;
}
inline bool value_type::has_fixed32_value() const {
  return _internal_has_fixed32_value();
}
inline void value_type::set_has_fixed32_value() {
  _oneof_case_[0] = kFixed32Value;
}
inline void value_type::clear_fixed32_value() {
  if (_internal_has_fixed32_value()) {
    kind_.fixed32_value_ = 0u;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 value_type::_internal_fixed32_value() const {
  if (_internal_has_fixed32_value()) {
    return kind_.fixed32_value_;
  }
  return 0u;
}
inline void value_type::_internal_set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_fixed32_value()) {
    clear_kind();
    set_has_fixed32_value();
  }
  kind_.fixed32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 value_type::fixed32_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.fixed32_value)
  return _internal_fixed32_value();
}
inline void value_type::set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixed32_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.value_type.fixed32_value)
}

// fixed64 fixed64_value = 9 [jstype = JS_STRING];
inline bool value_type::_internal_has_fixed64_value() const {
  return kind_case() == kFixed64Value;
}
inline bool value_type::has_fixed64_value() const {
  return _internal_has_fixed64_value();
}
inline void value_type::set_has_fixed64_value() {
  _oneof_case_[0] = kFixed64Value;
}
inline void value_type::clear_fixed64_value() {
  if (_internal_has_fixed64_value()) {
    kind_.fixed64_value_ = uint64_t{0u};
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 value_type::_internal_fixed64_value() const {
  if (_internal_has_fixed64_value()) {
    return kind_.fixed64_value_;
  }
  return uint64_t{0u};
}
inline void value_type::_internal_set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_fixed64_value()) {
    clear_kind();
    set_has_fixed64_value();
  }
  kind_.fixed64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 value_type::fixed64_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.fixed64_value)
  return _internal_fixed64_value();
}
inline void value_type::set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fixed64_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.value_type.fixed64_value)
}

// sfixed32 sfixed32_value = 10;
inline bool value_type::_internal_has_sfixed32_value() const {
  return kind_case() == kSfixed32Value;
}
inline bool value_type::has_sfixed32_value() const {
  return _internal_has_sfixed32_value();
}
inline void value_type::set_has_sfixed32_value() {
  _oneof_case_[0] = kSfixed32Value;
}
inline void value_type::clear_sfixed32_value() {
  if (_internal_has_sfixed32_value()) {
    kind_.sfixed32_value_ = 0;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 value_type::_internal_sfixed32_value() const {
  if (_internal_has_sfixed32_value()) {
    return kind_.sfixed32_value_;
  }
  return 0;
}
inline void value_type::_internal_set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_sfixed32_value()) {
    clear_kind();
    set_has_sfixed32_value();
  }
  kind_.sfixed32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 value_type::sfixed32_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.sfixed32_value)
  return _internal_sfixed32_value();
}
inline void value_type::set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sfixed32_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.value_type.sfixed32_value)
}

// sfixed64 sfixed64_value = 11 [jstype = JS_STRING];
inline bool value_type::_internal_has_sfixed64_value() const {
  return kind_case() == kSfixed64Value;
}
inline bool value_type::has_sfixed64_value() const {
  return _internal_has_sfixed64_value();
}
inline void value_type::set_has_sfixed64_value() {
  _oneof_case_[0] = kSfixed64Value;
}
inline void value_type::clear_sfixed64_value() {
  if (_internal_has_sfixed64_value()) {
    kind_.sfixed64_value_ = int64_t{0};
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 value_type::_internal_sfixed64_value() const {
  if (_internal_has_sfixed64_value()) {
    return kind_.sfixed64_value_;
  }
  return int64_t{0};
}
inline void value_type::_internal_set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sfixed64_value()) {
    clear_kind();
    set_has_sfixed64_value();
  }
  kind_.sfixed64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 value_type::sfixed64_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.sfixed64_value)
  return _internal_sfixed64_value();
}
inline void value_type::set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sfixed64_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.value_type.sfixed64_value)
}

// bool bool_value = 12;
inline bool value_type::_internal_has_bool_value() const {
  return kind_case() == kBoolValue;
}
inline bool value_type::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void value_type::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void value_type::clear_bool_value() {
  if (_internal_has_bool_value()) {
    kind_.bool_value_ = false;
    clear_has_kind();
  }
}
inline bool value_type::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return kind_.bool_value_;
  }
  return false;
}
inline void value_type::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_kind();
    set_has_bool_value();
  }
  kind_.bool_value_ = value;
}
inline bool value_type::bool_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.bool_value)
  return _internal_bool_value();
}
inline void value_type::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.value_type.bool_value)
}

// string string_value = 13;
inline bool value_type::_internal_has_string_value() const {
  return kind_case() == kStringValue;
}
inline bool value_type::has_string_value() const {
  return _internal_has_string_value();
}
inline void value_type::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void value_type::clear_string_value() {
  if (_internal_has_string_value()) {
    kind_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_kind();
  }
}
inline const std::string& value_type::string_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void value_type::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.chain.value_type.string_value)
}
inline std::string* value_type::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:koinos.chain.value_type.string_value)
  return _s;
}
inline const std::string& value_type::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return kind_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void value_type::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* value_type::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return kind_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* value_type::release_string_value() {
  // @@protoc_insertion_point(field_release:koinos.chain.value_type.string_value)
  if (_internal_has_string_value()) {
    clear_has_kind();
    return kind_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void value_type::set_allocated_string_value(std::string* string_value) {
  if (has_kind()) {
    clear_kind();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.value_type.string_value)
}

// bytes bytes_value = 14;
inline bool value_type::_internal_has_bytes_value() const {
  return kind_case() == kBytesValue;
}
inline bool value_type::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void value_type::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void value_type::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    kind_.bytes_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_kind();
  }
}
inline const std::string& value_type::bytes_value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.value_type.bytes_value)
  return _internal_bytes_value();
}
template <typename ArgT0, typename... ArgT>
inline void value_type::set_bytes_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_value()) {
    clear_kind();
    set_has_bytes_value();
    kind_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.bytes_value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.chain.value_type.bytes_value)
}
inline std::string* value_type::mutable_bytes_value() {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:koinos.chain.value_type.bytes_value)
  return _s;
}
inline const std::string& value_type::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return kind_.bytes_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void value_type::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_kind();
    set_has_bytes_value();
    kind_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.bytes_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* value_type::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_kind();
    set_has_bytes_value();
    kind_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return kind_.bytes_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* value_type::release_bytes_value() {
  // @@protoc_insertion_point(field_release:koinos.chain.value_type.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_kind();
    return kind_.bytes_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void value_type::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_kind()) {
    clear_kind();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    kind_.bytes_value_.UnsafeSetDefault(bytes_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(bytes_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.value_type.bytes_value)
}

inline bool value_type::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void value_type::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline value_type::KindCase value_type::kind_case() const {
  return value_type::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// enum_type

// string name = 1;
inline void enum_type::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& enum_type::name() const {
  // @@protoc_insertion_point(field_get:koinos.chain.enum_type.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void enum_type::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.chain.enum_type.name)
}
inline std::string* enum_type::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:koinos.chain.enum_type.name)
  return _s;
}
inline const std::string& enum_type::_internal_name() const {
  return name_.Get();
}
inline void enum_type::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* enum_type::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* enum_type::release_name() {
  // @@protoc_insertion_point(field_release:koinos.chain.enum_type.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void enum_type::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.enum_type.name)
}

// int32 number = 2;
inline void enum_type::clear_number() {
  number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 enum_type::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 enum_type::number() const {
  // @@protoc_insertion_point(field_get:koinos.chain.enum_type.number)
  return _internal_number();
}
inline void enum_type::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_ = value;
}
inline void enum_type::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:koinos.chain.enum_type.number)
}

// -------------------------------------------------------------------

// list_type

// repeated .koinos.chain.value_type values = 1;
inline int list_type::_internal_values_size() const {
  return values_.size();
}
inline int list_type::values_size() const {
  return _internal_values_size();
}
inline void list_type::clear_values() {
  values_.Clear();
}
inline ::koinos::chain::value_type* list_type::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.chain.list_type.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::chain::value_type >*
list_type::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:koinos.chain.list_type.values)
  return &values_;
}
inline const ::koinos::chain::value_type& list_type::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::koinos::chain::value_type& list_type::values(int index) const {
  // @@protoc_insertion_point(field_get:koinos.chain.list_type.values)
  return _internal_values(index);
}
inline ::koinos::chain::value_type* list_type::_internal_add_values() {
  return values_.Add();
}
inline ::koinos::chain::value_type* list_type::add_values() {
  ::koinos::chain::value_type* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:koinos.chain.list_type.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::chain::value_type >&
list_type::values() const {
  // @@protoc_insertion_point(field_list:koinos.chain.list_type.values)
  return values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chain
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2fvalue_2eproto
