// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: chain_rpc.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 8000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "../../common.capnp.h"
#include "../../protocol/protocol.capnp.h"
#include "../rpc.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(cff4afd45d3aa366);
CAPNP_DECLARE_SCHEMA(92be0f038e62cf7d);
CAPNP_DECLARE_SCHEMA(b8def1844a5aeab4);
CAPNP_DECLARE_SCHEMA(d94f69353dc76c70);
CAPNP_DECLARE_SCHEMA(c0b17b210dd3cd64);
CAPNP_DECLARE_SCHEMA(a00ec3c6a809cd8b);
CAPNP_DECLARE_SCHEMA(c7b456069d3678ad);
CAPNP_DECLARE_SCHEMA(e8522a33787f2718);
CAPNP_DECLARE_SCHEMA(b0c800ef1fe1c293);
CAPNP_DECLARE_SCHEMA(c30944e32061c256);
CAPNP_DECLARE_SCHEMA(ee62256b492299f7);
CAPNP_DECLARE_SCHEMA(a5249a9484d186fe);
CAPNP_DECLARE_SCHEMA(ddab1b0d419144b5);
CAPNP_DECLARE_SCHEMA(a1cbf2908fb1a46c);
CAPNP_DECLARE_SCHEMA(a1ffe76821d5b379);
CAPNP_DECLARE_SCHEMA(e40f9f0120d573b7);
CAPNP_DECLARE_SCHEMA(caea6964e2c74e71);
CAPNP_DECLARE_SCHEMA(c94652f8a3ae286e);

}  // namespace schemas
}  // namespace capnp

namespace koinos {
namespace rpc {
namespace chain {

struct ChainReservedRequest {
  ChainReservedRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cff4afd45d3aa366, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SubmitBlockRequest {
  SubmitBlockRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92be0f038e62cf7d, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SubmitTransactionRequest {
  SubmitTransactionRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8def1844a5aeab4, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetHeadInfoRequest {
  GetHeadInfoRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d94f69353dc76c70, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetChainIDRequest {
  GetChainIDRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0b17b210dd3cd64, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetForkHeadsRequest {
  GetForkHeadsRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a00ec3c6a809cd8b, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ReadContractRequest {
  ReadContractRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c7b456069d3678ad, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetAccountNonceRequest {
  GetAccountNonceRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8522a33787f2718, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ChainRPCRequest {
  ChainRPCRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    CHAIN_RESERVED,
    SUBMIT_BLOCK,
    SUBMIT_TRANSACTION,
    GET_HEAD_INFO,
    GET_CHAIN_I_D,
    GET_FORK_HEADS,
    READ_CONTRACT,
    GET_ACCOUNT_NONCE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0c800ef1fe1c293, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ChainReservedResponse {
  ChainReservedResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c30944e32061c256, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SubmitBlockResponse {
  SubmitBlockResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee62256b492299f7, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SubmitTransactionResponse {
  SubmitTransactionResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5249a9484d186fe, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetHeadInfoResponse {
  GetHeadInfoResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ddab1b0d419144b5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetChainIDResponse {
  GetChainIDResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1cbf2908fb1a46c, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetForkHeadsResponse {
  GetForkHeadsResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1ffe76821d5b379, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ReadContractResponse {
  ReadContractResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e40f9f0120d573b7, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetAccountNonceResponse {
  GetAccountNonceResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(caea6964e2c74e71, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ChainRPCResponse {
  ChainRPCResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    CHAIN_RESERVED,
    CHAIN_ERROR,
    SUBMIT_BLOCK,
    SUBMIT_TRANSACTION,
    GET_HEAD_INFO,
    GET_CHAIN_I_D,
    GET_FORK_HEADS,
    READ_CONTRACT,
    GET_ACCOUNT_NONCE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c94652f8a3ae286e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ChainReservedRequest::Reader {
public:
  typedef ChainReservedRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChainReservedRequest::Builder {
public:
  typedef ChainReservedRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChainReservedRequest::Pipeline {
public:
  typedef ChainReservedRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SubmitBlockRequest::Reader {
public:
  typedef SubmitBlockRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBlock() const;
  inline  ::koinos::protocol::Block::Reader getBlock() const;

  inline bool getVerifyPassiveDatae() const;

  inline bool getVerifyBlockSignature() const;

  inline bool getVerifyTransactionSignature() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SubmitBlockRequest::Builder {
public:
  typedef SubmitBlockRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBlock();
  inline  ::koinos::protocol::Block::Builder getBlock();
  inline void setBlock( ::koinos::protocol::Block::Reader value);
  inline  ::koinos::protocol::Block::Builder initBlock();
  inline void adoptBlock(::capnp::Orphan< ::koinos::protocol::Block>&& value);
  inline ::capnp::Orphan< ::koinos::protocol::Block> disownBlock();

  inline bool getVerifyPassiveDatae();
  inline void setVerifyPassiveDatae(bool value);

  inline bool getVerifyBlockSignature();
  inline void setVerifyBlockSignature(bool value);

  inline bool getVerifyTransactionSignature();
  inline void setVerifyTransactionSignature(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SubmitBlockRequest::Pipeline {
public:
  typedef SubmitBlockRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::koinos::protocol::Block::Pipeline getBlock();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SubmitTransactionRequest::Reader {
public:
  typedef SubmitTransactionRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTransaction() const;
  inline  ::koinos::protocol::Transaction::Reader getTransaction() const;

  inline bool getVerifyPassiveData() const;

  inline bool getVerifyTransactionSignature() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SubmitTransactionRequest::Builder {
public:
  typedef SubmitTransactionRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTransaction();
  inline  ::koinos::protocol::Transaction::Builder getTransaction();
  inline void setTransaction( ::koinos::protocol::Transaction::Reader value);
  inline  ::koinos::protocol::Transaction::Builder initTransaction();
  inline void adoptTransaction(::capnp::Orphan< ::koinos::protocol::Transaction>&& value);
  inline ::capnp::Orphan< ::koinos::protocol::Transaction> disownTransaction();

  inline bool getVerifyPassiveData();
  inline void setVerifyPassiveData(bool value);

  inline bool getVerifyTransactionSignature();
  inline void setVerifyTransactionSignature(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SubmitTransactionRequest::Pipeline {
public:
  typedef SubmitTransactionRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::koinos::protocol::Transaction::Pipeline getTransaction();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetHeadInfoRequest::Reader {
public:
  typedef GetHeadInfoRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetHeadInfoRequest::Builder {
public:
  typedef GetHeadInfoRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetHeadInfoRequest::Pipeline {
public:
  typedef GetHeadInfoRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetChainIDRequest::Reader {
public:
  typedef GetChainIDRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetChainIDRequest::Builder {
public:
  typedef GetChainIDRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetChainIDRequest::Pipeline {
public:
  typedef GetChainIDRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetForkHeadsRequest::Reader {
public:
  typedef GetForkHeadsRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetForkHeadsRequest::Builder {
public:
  typedef GetForkHeadsRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetForkHeadsRequest::Pipeline {
public:
  typedef GetForkHeadsRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReadContractRequest::Reader {
public:
  typedef ReadContractRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasContractID() const;
  inline  ::capnp::Data::Reader getContractID() const;

  inline  ::uint32_t getEntryPoint() const;

  inline bool hasArgs() const;
  inline  ::capnp::Data::Reader getArgs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReadContractRequest::Builder {
public:
  typedef ReadContractRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasContractID();
  inline  ::capnp::Data::Builder getContractID();
  inline void setContractID( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initContractID(unsigned int size);
  inline void adoptContractID(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownContractID();

  inline  ::uint32_t getEntryPoint();
  inline void setEntryPoint( ::uint32_t value);

  inline bool hasArgs();
  inline  ::capnp::Data::Builder getArgs();
  inline void setArgs( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initArgs(unsigned int size);
  inline void adoptArgs(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownArgs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReadContractRequest::Pipeline {
public:
  typedef ReadContractRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetAccountNonceRequest::Reader {
public:
  typedef GetAccountNonceRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAccount() const;
  inline  ::capnp::Data::Reader getAccount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetAccountNonceRequest::Builder {
public:
  typedef GetAccountNonceRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAccount();
  inline  ::capnp::Data::Builder getAccount();
  inline void setAccount( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initAccount(unsigned int size);
  inline void adoptAccount(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownAccount();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetAccountNonceRequest::Pipeline {
public:
  typedef GetAccountNonceRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ChainRPCRequest::Reader {
public:
  typedef ChainRPCRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isChainReserved() const;
  inline bool hasChainReserved() const;
  inline  ::koinos::rpc::chain::ChainReservedRequest::Reader getChainReserved() const;

  inline bool isSubmitBlock() const;
  inline bool hasSubmitBlock() const;
  inline  ::koinos::rpc::chain::SubmitBlockRequest::Reader getSubmitBlock() const;

  inline bool isSubmitTransaction() const;
  inline bool hasSubmitTransaction() const;
  inline  ::koinos::rpc::chain::SubmitTransactionRequest::Reader getSubmitTransaction() const;

  inline bool isGetHeadInfo() const;
  inline bool hasGetHeadInfo() const;
  inline  ::koinos::rpc::chain::GetHeadInfoRequest::Reader getGetHeadInfo() const;

  inline bool isGetChainID() const;
  inline bool hasGetChainID() const;
  inline  ::koinos::rpc::chain::GetChainIDRequest::Reader getGetChainID() const;

  inline bool isGetForkHeads() const;
  inline bool hasGetForkHeads() const;
  inline  ::koinos::rpc::chain::GetForkHeadsRequest::Reader getGetForkHeads() const;

  inline bool isReadContract() const;
  inline bool hasReadContract() const;
  inline  ::koinos::rpc::chain::ReadContractRequest::Reader getReadContract() const;

  inline bool isGetAccountNonce() const;
  inline bool hasGetAccountNonce() const;
  inline  ::koinos::rpc::chain::GetAccountNonceRequest::Reader getGetAccountNonce() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChainRPCRequest::Builder {
public:
  typedef ChainRPCRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isChainReserved();
  inline bool hasChainReserved();
  inline  ::koinos::rpc::chain::ChainReservedRequest::Builder getChainReserved();
  inline void setChainReserved( ::koinos::rpc::chain::ChainReservedRequest::Reader value);
  inline  ::koinos::rpc::chain::ChainReservedRequest::Builder initChainReserved();
  inline void adoptChainReserved(::capnp::Orphan< ::koinos::rpc::chain::ChainReservedRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::ChainReservedRequest> disownChainReserved();

  inline bool isSubmitBlock();
  inline bool hasSubmitBlock();
  inline  ::koinos::rpc::chain::SubmitBlockRequest::Builder getSubmitBlock();
  inline void setSubmitBlock( ::koinos::rpc::chain::SubmitBlockRequest::Reader value);
  inline  ::koinos::rpc::chain::SubmitBlockRequest::Builder initSubmitBlock();
  inline void adoptSubmitBlock(::capnp::Orphan< ::koinos::rpc::chain::SubmitBlockRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::SubmitBlockRequest> disownSubmitBlock();

  inline bool isSubmitTransaction();
  inline bool hasSubmitTransaction();
  inline  ::koinos::rpc::chain::SubmitTransactionRequest::Builder getSubmitTransaction();
  inline void setSubmitTransaction( ::koinos::rpc::chain::SubmitTransactionRequest::Reader value);
  inline  ::koinos::rpc::chain::SubmitTransactionRequest::Builder initSubmitTransaction();
  inline void adoptSubmitTransaction(::capnp::Orphan< ::koinos::rpc::chain::SubmitTransactionRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::SubmitTransactionRequest> disownSubmitTransaction();

  inline bool isGetHeadInfo();
  inline bool hasGetHeadInfo();
  inline  ::koinos::rpc::chain::GetHeadInfoRequest::Builder getGetHeadInfo();
  inline void setGetHeadInfo( ::koinos::rpc::chain::GetHeadInfoRequest::Reader value);
  inline  ::koinos::rpc::chain::GetHeadInfoRequest::Builder initGetHeadInfo();
  inline void adoptGetHeadInfo(::capnp::Orphan< ::koinos::rpc::chain::GetHeadInfoRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::GetHeadInfoRequest> disownGetHeadInfo();

  inline bool isGetChainID();
  inline bool hasGetChainID();
  inline  ::koinos::rpc::chain::GetChainIDRequest::Builder getGetChainID();
  inline void setGetChainID( ::koinos::rpc::chain::GetChainIDRequest::Reader value);
  inline  ::koinos::rpc::chain::GetChainIDRequest::Builder initGetChainID();
  inline void adoptGetChainID(::capnp::Orphan< ::koinos::rpc::chain::GetChainIDRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::GetChainIDRequest> disownGetChainID();

  inline bool isGetForkHeads();
  inline bool hasGetForkHeads();
  inline  ::koinos::rpc::chain::GetForkHeadsRequest::Builder getGetForkHeads();
  inline void setGetForkHeads( ::koinos::rpc::chain::GetForkHeadsRequest::Reader value);
  inline  ::koinos::rpc::chain::GetForkHeadsRequest::Builder initGetForkHeads();
  inline void adoptGetForkHeads(::capnp::Orphan< ::koinos::rpc::chain::GetForkHeadsRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::GetForkHeadsRequest> disownGetForkHeads();

  inline bool isReadContract();
  inline bool hasReadContract();
  inline  ::koinos::rpc::chain::ReadContractRequest::Builder getReadContract();
  inline void setReadContract( ::koinos::rpc::chain::ReadContractRequest::Reader value);
  inline  ::koinos::rpc::chain::ReadContractRequest::Builder initReadContract();
  inline void adoptReadContract(::capnp::Orphan< ::koinos::rpc::chain::ReadContractRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::ReadContractRequest> disownReadContract();

  inline bool isGetAccountNonce();
  inline bool hasGetAccountNonce();
  inline  ::koinos::rpc::chain::GetAccountNonceRequest::Builder getGetAccountNonce();
  inline void setGetAccountNonce( ::koinos::rpc::chain::GetAccountNonceRequest::Reader value);
  inline  ::koinos::rpc::chain::GetAccountNonceRequest::Builder initGetAccountNonce();
  inline void adoptGetAccountNonce(::capnp::Orphan< ::koinos::rpc::chain::GetAccountNonceRequest>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::GetAccountNonceRequest> disownGetAccountNonce();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChainRPCRequest::Pipeline {
public:
  typedef ChainRPCRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ChainReservedResponse::Reader {
public:
  typedef ChainReservedResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChainReservedResponse::Builder {
public:
  typedef ChainReservedResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChainReservedResponse::Pipeline {
public:
  typedef ChainReservedResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SubmitBlockResponse::Reader {
public:
  typedef SubmitBlockResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SubmitBlockResponse::Builder {
public:
  typedef SubmitBlockResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SubmitBlockResponse::Pipeline {
public:
  typedef SubmitBlockResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SubmitTransactionResponse::Reader {
public:
  typedef SubmitTransactionResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SubmitTransactionResponse::Builder {
public:
  typedef SubmitTransactionResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SubmitTransactionResponse::Pipeline {
public:
  typedef SubmitTransactionResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetHeadInfoResponse::Reader {
public:
  typedef GetHeadInfoResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHeadTopology() const;
  inline  ::koinos::BlockTopology::Reader getHeadTopology() const;

  inline  ::uint64_t getLastIrreversibleBlock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetHeadInfoResponse::Builder {
public:
  typedef GetHeadInfoResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHeadTopology();
  inline  ::koinos::BlockTopology::Builder getHeadTopology();
  inline void setHeadTopology( ::koinos::BlockTopology::Reader value);
  inline  ::koinos::BlockTopology::Builder initHeadTopology();
  inline void adoptHeadTopology(::capnp::Orphan< ::koinos::BlockTopology>&& value);
  inline ::capnp::Orphan< ::koinos::BlockTopology> disownHeadTopology();

  inline  ::uint64_t getLastIrreversibleBlock();
  inline void setLastIrreversibleBlock( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetHeadInfoResponse::Pipeline {
public:
  typedef GetHeadInfoResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::koinos::BlockTopology::Pipeline getHeadTopology();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetChainIDResponse::Reader {
public:
  typedef GetChainIDResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasChainID() const;
  inline  ::capnp::Data::Reader getChainID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetChainIDResponse::Builder {
public:
  typedef GetChainIDResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasChainID();
  inline  ::capnp::Data::Builder getChainID();
  inline void setChainID( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initChainID(unsigned int size);
  inline void adoptChainID(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownChainID();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetChainIDResponse::Pipeline {
public:
  typedef GetChainIDResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetForkHeadsResponse::Reader {
public:
  typedef GetForkHeadsResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasForkHeads() const;
  inline  ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Reader getForkHeads() const;

  inline bool hasLastIrreversibleBlock() const;
  inline  ::koinos::BlockTopology::Reader getLastIrreversibleBlock() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetForkHeadsResponse::Builder {
public:
  typedef GetForkHeadsResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasForkHeads();
  inline  ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Builder getForkHeads();
  inline void setForkHeads( ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Builder initForkHeads(unsigned int size);
  inline void adoptForkHeads(::capnp::Orphan< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>> disownForkHeads();

  inline bool hasLastIrreversibleBlock();
  inline  ::koinos::BlockTopology::Builder getLastIrreversibleBlock();
  inline void setLastIrreversibleBlock( ::koinos::BlockTopology::Reader value);
  inline  ::koinos::BlockTopology::Builder initLastIrreversibleBlock();
  inline void adoptLastIrreversibleBlock(::capnp::Orphan< ::koinos::BlockTopology>&& value);
  inline ::capnp::Orphan< ::koinos::BlockTopology> disownLastIrreversibleBlock();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetForkHeadsResponse::Pipeline {
public:
  typedef GetForkHeadsResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::koinos::BlockTopology::Pipeline getLastIrreversibleBlock();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReadContractResponse::Reader {
public:
  typedef ReadContractResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasResult() const;
  inline  ::capnp::Data::Reader getResult() const;

  inline bool hasLogs() const;
  inline  ::capnp::Text::Reader getLogs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReadContractResponse::Builder {
public:
  typedef ReadContractResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasResult();
  inline  ::capnp::Data::Builder getResult();
  inline void setResult( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initResult(unsigned int size);
  inline void adoptResult(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownResult();

  inline bool hasLogs();
  inline  ::capnp::Text::Builder getLogs();
  inline void setLogs( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLogs(unsigned int size);
  inline void adoptLogs(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLogs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReadContractResponse::Pipeline {
public:
  typedef ReadContractResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetAccountNonceResponse::Reader {
public:
  typedef GetAccountNonceResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getNoncee() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetAccountNonceResponse::Builder {
public:
  typedef GetAccountNonceResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getNoncee();
  inline void setNoncee( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetAccountNonceResponse::Pipeline {
public:
  typedef GetAccountNonceResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ChainRPCResponse::Reader {
public:
  typedef ChainRPCResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isChainReserved() const;
  inline bool hasChainReserved() const;
  inline  ::koinos::rpc::chain::ChainReservedResponse::Reader getChainReserved() const;

  inline bool isChainError() const;
  inline bool hasChainError() const;
  inline  ::koinos::rpc::ErrorResponse::Reader getChainError() const;

  inline bool isSubmitBlock() const;
  inline bool hasSubmitBlock() const;
  inline  ::koinos::rpc::chain::SubmitBlockResponse::Reader getSubmitBlock() const;

  inline bool isSubmitTransaction() const;
  inline bool hasSubmitTransaction() const;
  inline  ::koinos::rpc::chain::SubmitTransactionResponse::Reader getSubmitTransaction() const;

  inline bool isGetHeadInfo() const;
  inline bool hasGetHeadInfo() const;
  inline  ::koinos::rpc::chain::GetHeadInfoResponse::Reader getGetHeadInfo() const;

  inline bool isGetChainID() const;
  inline bool hasGetChainID() const;
  inline  ::koinos::rpc::chain::GetChainIDResponse::Reader getGetChainID() const;

  inline bool isGetForkHeads() const;
  inline bool hasGetForkHeads() const;
  inline  ::koinos::rpc::chain::GetForkHeadsResponse::Reader getGetForkHeads() const;

  inline bool isReadContract() const;
  inline bool hasReadContract() const;
  inline  ::koinos::rpc::chain::ReadContractResponse::Reader getReadContract() const;

  inline bool isGetAccountNonce() const;
  inline bool hasGetAccountNonce() const;
  inline  ::koinos::rpc::chain::GetAccountNonceResponse::Reader getGetAccountNonce() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChainRPCResponse::Builder {
public:
  typedef ChainRPCResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isChainReserved();
  inline bool hasChainReserved();
  inline  ::koinos::rpc::chain::ChainReservedResponse::Builder getChainReserved();
  inline void setChainReserved( ::koinos::rpc::chain::ChainReservedResponse::Reader value);
  inline  ::koinos::rpc::chain::ChainReservedResponse::Builder initChainReserved();
  inline void adoptChainReserved(::capnp::Orphan< ::koinos::rpc::chain::ChainReservedResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::ChainReservedResponse> disownChainReserved();

  inline bool isChainError();
  inline bool hasChainError();
  inline  ::koinos::rpc::ErrorResponse::Builder getChainError();
  inline void setChainError( ::koinos::rpc::ErrorResponse::Reader value);
  inline  ::koinos::rpc::ErrorResponse::Builder initChainError();
  inline void adoptChainError(::capnp::Orphan< ::koinos::rpc::ErrorResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::ErrorResponse> disownChainError();

  inline bool isSubmitBlock();
  inline bool hasSubmitBlock();
  inline  ::koinos::rpc::chain::SubmitBlockResponse::Builder getSubmitBlock();
  inline void setSubmitBlock( ::koinos::rpc::chain::SubmitBlockResponse::Reader value);
  inline  ::koinos::rpc::chain::SubmitBlockResponse::Builder initSubmitBlock();
  inline void adoptSubmitBlock(::capnp::Orphan< ::koinos::rpc::chain::SubmitBlockResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::SubmitBlockResponse> disownSubmitBlock();

  inline bool isSubmitTransaction();
  inline bool hasSubmitTransaction();
  inline  ::koinos::rpc::chain::SubmitTransactionResponse::Builder getSubmitTransaction();
  inline void setSubmitTransaction( ::koinos::rpc::chain::SubmitTransactionResponse::Reader value);
  inline  ::koinos::rpc::chain::SubmitTransactionResponse::Builder initSubmitTransaction();
  inline void adoptSubmitTransaction(::capnp::Orphan< ::koinos::rpc::chain::SubmitTransactionResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::SubmitTransactionResponse> disownSubmitTransaction();

  inline bool isGetHeadInfo();
  inline bool hasGetHeadInfo();
  inline  ::koinos::rpc::chain::GetHeadInfoResponse::Builder getGetHeadInfo();
  inline void setGetHeadInfo( ::koinos::rpc::chain::GetHeadInfoResponse::Reader value);
  inline  ::koinos::rpc::chain::GetHeadInfoResponse::Builder initGetHeadInfo();
  inline void adoptGetHeadInfo(::capnp::Orphan< ::koinos::rpc::chain::GetHeadInfoResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::GetHeadInfoResponse> disownGetHeadInfo();

  inline bool isGetChainID();
  inline bool hasGetChainID();
  inline  ::koinos::rpc::chain::GetChainIDResponse::Builder getGetChainID();
  inline void setGetChainID( ::koinos::rpc::chain::GetChainIDResponse::Reader value);
  inline  ::koinos::rpc::chain::GetChainIDResponse::Builder initGetChainID();
  inline void adoptGetChainID(::capnp::Orphan< ::koinos::rpc::chain::GetChainIDResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::GetChainIDResponse> disownGetChainID();

  inline bool isGetForkHeads();
  inline bool hasGetForkHeads();
  inline  ::koinos::rpc::chain::GetForkHeadsResponse::Builder getGetForkHeads();
  inline void setGetForkHeads( ::koinos::rpc::chain::GetForkHeadsResponse::Reader value);
  inline  ::koinos::rpc::chain::GetForkHeadsResponse::Builder initGetForkHeads();
  inline void adoptGetForkHeads(::capnp::Orphan< ::koinos::rpc::chain::GetForkHeadsResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::GetForkHeadsResponse> disownGetForkHeads();

  inline bool isReadContract();
  inline bool hasReadContract();
  inline  ::koinos::rpc::chain::ReadContractResponse::Builder getReadContract();
  inline void setReadContract( ::koinos::rpc::chain::ReadContractResponse::Reader value);
  inline  ::koinos::rpc::chain::ReadContractResponse::Builder initReadContract();
  inline void adoptReadContract(::capnp::Orphan< ::koinos::rpc::chain::ReadContractResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::ReadContractResponse> disownReadContract();

  inline bool isGetAccountNonce();
  inline bool hasGetAccountNonce();
  inline  ::koinos::rpc::chain::GetAccountNonceResponse::Builder getGetAccountNonce();
  inline void setGetAccountNonce( ::koinos::rpc::chain::GetAccountNonceResponse::Reader value);
  inline  ::koinos::rpc::chain::GetAccountNonceResponse::Builder initGetAccountNonce();
  inline void adoptGetAccountNonce(::capnp::Orphan< ::koinos::rpc::chain::GetAccountNonceResponse>&& value);
  inline ::capnp::Orphan< ::koinos::rpc::chain::GetAccountNonceResponse> disownGetAccountNonce();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChainRPCResponse::Pipeline {
public:
  typedef ChainRPCResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool SubmitBlockRequest::Reader::hasBlock() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SubmitBlockRequest::Builder::hasBlock() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::protocol::Block::Reader SubmitBlockRequest::Reader::getBlock() const {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::protocol::Block::Builder SubmitBlockRequest::Builder::getBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::protocol::Block::Pipeline SubmitBlockRequest::Pipeline::getBlock() {
  return  ::koinos::protocol::Block::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SubmitBlockRequest::Builder::setBlock( ::koinos::protocol::Block::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::protocol::Block::Builder SubmitBlockRequest::Builder::initBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SubmitBlockRequest::Builder::adoptBlock(
    ::capnp::Orphan< ::koinos::protocol::Block>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::protocol::Block> SubmitBlockRequest::Builder::disownBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SubmitBlockRequest::Reader::getVerifyPassiveDatae() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool SubmitBlockRequest::Builder::getVerifyPassiveDatae() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SubmitBlockRequest::Builder::setVerifyPassiveDatae(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SubmitBlockRequest::Reader::getVerifyBlockSignature() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool SubmitBlockRequest::Builder::getVerifyBlockSignature() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SubmitBlockRequest::Builder::setVerifyBlockSignature(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SubmitBlockRequest::Reader::getVerifyTransactionSignature() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool SubmitBlockRequest::Builder::getVerifyTransactionSignature() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SubmitBlockRequest::Builder::setVerifyTransactionSignature(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool SubmitTransactionRequest::Reader::hasTransaction() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SubmitTransactionRequest::Builder::hasTransaction() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::protocol::Transaction::Reader SubmitTransactionRequest::Reader::getTransaction() const {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Transaction>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::protocol::Transaction::Builder SubmitTransactionRequest::Builder::getTransaction() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Transaction>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::protocol::Transaction::Pipeline SubmitTransactionRequest::Pipeline::getTransaction() {
  return  ::koinos::protocol::Transaction::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SubmitTransactionRequest::Builder::setTransaction( ::koinos::protocol::Transaction::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::protocol::Transaction>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::protocol::Transaction::Builder SubmitTransactionRequest::Builder::initTransaction() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Transaction>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SubmitTransactionRequest::Builder::adoptTransaction(
    ::capnp::Orphan< ::koinos::protocol::Transaction>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::protocol::Transaction>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::protocol::Transaction> SubmitTransactionRequest::Builder::disownTransaction() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Transaction>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SubmitTransactionRequest::Reader::getVerifyPassiveData() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool SubmitTransactionRequest::Builder::getVerifyPassiveData() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SubmitTransactionRequest::Builder::setVerifyPassiveData(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SubmitTransactionRequest::Reader::getVerifyTransactionSignature() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool SubmitTransactionRequest::Builder::getVerifyTransactionSignature() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SubmitTransactionRequest::Builder::setVerifyTransactionSignature(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ReadContractRequest::Reader::hasContractID() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ReadContractRequest::Builder::hasContractID() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader ReadContractRequest::Reader::getContractID() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder ReadContractRequest::Builder::getContractID() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ReadContractRequest::Builder::setContractID( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder ReadContractRequest::Builder::initContractID(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ReadContractRequest::Builder::adoptContractID(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> ReadContractRequest::Builder::disownContractID() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t ReadContractRequest::Reader::getEntryPoint() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ReadContractRequest::Builder::getEntryPoint() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ReadContractRequest::Builder::setEntryPoint( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ReadContractRequest::Reader::hasArgs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ReadContractRequest::Builder::hasArgs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader ReadContractRequest::Reader::getArgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder ReadContractRequest::Builder::getArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReadContractRequest::Builder::setArgs( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder ReadContractRequest::Builder::initArgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ReadContractRequest::Builder::adoptArgs(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> ReadContractRequest::Builder::disownArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GetAccountNonceRequest::Reader::hasAccount() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetAccountNonceRequest::Builder::hasAccount() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader GetAccountNonceRequest::Reader::getAccount() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder GetAccountNonceRequest::Builder::getAccount() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetAccountNonceRequest::Builder::setAccount( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder GetAccountNonceRequest::Builder::initAccount(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GetAccountNonceRequest::Builder::adoptAccount(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> GetAccountNonceRequest::Builder::disownAccount() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::koinos::rpc::chain::ChainRPCRequest::Which ChainRPCRequest::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::koinos::rpc::chain::ChainRPCRequest::Which ChainRPCRequest::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ChainRPCRequest::Reader::isChainReserved() const {
  return which() == ChainRPCRequest::CHAIN_RESERVED;
}
inline bool ChainRPCRequest::Builder::isChainReserved() {
  return which() == ChainRPCRequest::CHAIN_RESERVED;
}
inline bool ChainRPCRequest::Reader::hasChainReserved() const {
  if (which() != ChainRPCRequest::CHAIN_RESERVED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCRequest::Builder::hasChainReserved() {
  if (which() != ChainRPCRequest::CHAIN_RESERVED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::ChainReservedRequest::Reader ChainRPCRequest::Reader::getChainReserved() const {
  KJ_IREQUIRE((which() == ChainRPCRequest::CHAIN_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ChainReservedRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::ChainReservedRequest::Builder ChainRPCRequest::Builder::getChainReserved() {
  KJ_IREQUIRE((which() == ChainRPCRequest::CHAIN_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ChainReservedRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::setChainReserved( ::koinos::rpc::chain::ChainReservedRequest::Reader value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::CHAIN_RESERVED);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ChainReservedRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::ChainReservedRequest::Builder ChainRPCRequest::Builder::initChainReserved() {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::CHAIN_RESERVED);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ChainReservedRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::adoptChainReserved(
    ::capnp::Orphan< ::koinos::rpc::chain::ChainReservedRequest>&& value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::CHAIN_RESERVED);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ChainReservedRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::ChainReservedRequest> ChainRPCRequest::Builder::disownChainReserved() {
  KJ_IREQUIRE((which() == ChainRPCRequest::CHAIN_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ChainReservedRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCRequest::Reader::isSubmitBlock() const {
  return which() == ChainRPCRequest::SUBMIT_BLOCK;
}
inline bool ChainRPCRequest::Builder::isSubmitBlock() {
  return which() == ChainRPCRequest::SUBMIT_BLOCK;
}
inline bool ChainRPCRequest::Reader::hasSubmitBlock() const {
  if (which() != ChainRPCRequest::SUBMIT_BLOCK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCRequest::Builder::hasSubmitBlock() {
  if (which() != ChainRPCRequest::SUBMIT_BLOCK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::SubmitBlockRequest::Reader ChainRPCRequest::Reader::getSubmitBlock() const {
  KJ_IREQUIRE((which() == ChainRPCRequest::SUBMIT_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitBlockRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::SubmitBlockRequest::Builder ChainRPCRequest::Builder::getSubmitBlock() {
  KJ_IREQUIRE((which() == ChainRPCRequest::SUBMIT_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitBlockRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::setSubmitBlock( ::koinos::rpc::chain::SubmitBlockRequest::Reader value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::SUBMIT_BLOCK);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitBlockRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::SubmitBlockRequest::Builder ChainRPCRequest::Builder::initSubmitBlock() {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::SUBMIT_BLOCK);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitBlockRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::adoptSubmitBlock(
    ::capnp::Orphan< ::koinos::rpc::chain::SubmitBlockRequest>&& value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::SUBMIT_BLOCK);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitBlockRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::SubmitBlockRequest> ChainRPCRequest::Builder::disownSubmitBlock() {
  KJ_IREQUIRE((which() == ChainRPCRequest::SUBMIT_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitBlockRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCRequest::Reader::isSubmitTransaction() const {
  return which() == ChainRPCRequest::SUBMIT_TRANSACTION;
}
inline bool ChainRPCRequest::Builder::isSubmitTransaction() {
  return which() == ChainRPCRequest::SUBMIT_TRANSACTION;
}
inline bool ChainRPCRequest::Reader::hasSubmitTransaction() const {
  if (which() != ChainRPCRequest::SUBMIT_TRANSACTION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCRequest::Builder::hasSubmitTransaction() {
  if (which() != ChainRPCRequest::SUBMIT_TRANSACTION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::SubmitTransactionRequest::Reader ChainRPCRequest::Reader::getSubmitTransaction() const {
  KJ_IREQUIRE((which() == ChainRPCRequest::SUBMIT_TRANSACTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitTransactionRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::SubmitTransactionRequest::Builder ChainRPCRequest::Builder::getSubmitTransaction() {
  KJ_IREQUIRE((which() == ChainRPCRequest::SUBMIT_TRANSACTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitTransactionRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::setSubmitTransaction( ::koinos::rpc::chain::SubmitTransactionRequest::Reader value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::SUBMIT_TRANSACTION);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitTransactionRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::SubmitTransactionRequest::Builder ChainRPCRequest::Builder::initSubmitTransaction() {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::SUBMIT_TRANSACTION);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitTransactionRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::adoptSubmitTransaction(
    ::capnp::Orphan< ::koinos::rpc::chain::SubmitTransactionRequest>&& value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::SUBMIT_TRANSACTION);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitTransactionRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::SubmitTransactionRequest> ChainRPCRequest::Builder::disownSubmitTransaction() {
  KJ_IREQUIRE((which() == ChainRPCRequest::SUBMIT_TRANSACTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitTransactionRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCRequest::Reader::isGetHeadInfo() const {
  return which() == ChainRPCRequest::GET_HEAD_INFO;
}
inline bool ChainRPCRequest::Builder::isGetHeadInfo() {
  return which() == ChainRPCRequest::GET_HEAD_INFO;
}
inline bool ChainRPCRequest::Reader::hasGetHeadInfo() const {
  if (which() != ChainRPCRequest::GET_HEAD_INFO) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCRequest::Builder::hasGetHeadInfo() {
  if (which() != ChainRPCRequest::GET_HEAD_INFO) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::GetHeadInfoRequest::Reader ChainRPCRequest::Reader::getGetHeadInfo() const {
  KJ_IREQUIRE((which() == ChainRPCRequest::GET_HEAD_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetHeadInfoRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::GetHeadInfoRequest::Builder ChainRPCRequest::Builder::getGetHeadInfo() {
  KJ_IREQUIRE((which() == ChainRPCRequest::GET_HEAD_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetHeadInfoRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::setGetHeadInfo( ::koinos::rpc::chain::GetHeadInfoRequest::Reader value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::GET_HEAD_INFO);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetHeadInfoRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::GetHeadInfoRequest::Builder ChainRPCRequest::Builder::initGetHeadInfo() {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::GET_HEAD_INFO);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetHeadInfoRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::adoptGetHeadInfo(
    ::capnp::Orphan< ::koinos::rpc::chain::GetHeadInfoRequest>&& value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::GET_HEAD_INFO);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetHeadInfoRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::GetHeadInfoRequest> ChainRPCRequest::Builder::disownGetHeadInfo() {
  KJ_IREQUIRE((which() == ChainRPCRequest::GET_HEAD_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetHeadInfoRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCRequest::Reader::isGetChainID() const {
  return which() == ChainRPCRequest::GET_CHAIN_I_D;
}
inline bool ChainRPCRequest::Builder::isGetChainID() {
  return which() == ChainRPCRequest::GET_CHAIN_I_D;
}
inline bool ChainRPCRequest::Reader::hasGetChainID() const {
  if (which() != ChainRPCRequest::GET_CHAIN_I_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCRequest::Builder::hasGetChainID() {
  if (which() != ChainRPCRequest::GET_CHAIN_I_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::GetChainIDRequest::Reader ChainRPCRequest::Reader::getGetChainID() const {
  KJ_IREQUIRE((which() == ChainRPCRequest::GET_CHAIN_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetChainIDRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::GetChainIDRequest::Builder ChainRPCRequest::Builder::getGetChainID() {
  KJ_IREQUIRE((which() == ChainRPCRequest::GET_CHAIN_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetChainIDRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::setGetChainID( ::koinos::rpc::chain::GetChainIDRequest::Reader value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::GET_CHAIN_I_D);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetChainIDRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::GetChainIDRequest::Builder ChainRPCRequest::Builder::initGetChainID() {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::GET_CHAIN_I_D);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetChainIDRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::adoptGetChainID(
    ::capnp::Orphan< ::koinos::rpc::chain::GetChainIDRequest>&& value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::GET_CHAIN_I_D);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetChainIDRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::GetChainIDRequest> ChainRPCRequest::Builder::disownGetChainID() {
  KJ_IREQUIRE((which() == ChainRPCRequest::GET_CHAIN_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetChainIDRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCRequest::Reader::isGetForkHeads() const {
  return which() == ChainRPCRequest::GET_FORK_HEADS;
}
inline bool ChainRPCRequest::Builder::isGetForkHeads() {
  return which() == ChainRPCRequest::GET_FORK_HEADS;
}
inline bool ChainRPCRequest::Reader::hasGetForkHeads() const {
  if (which() != ChainRPCRequest::GET_FORK_HEADS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCRequest::Builder::hasGetForkHeads() {
  if (which() != ChainRPCRequest::GET_FORK_HEADS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::GetForkHeadsRequest::Reader ChainRPCRequest::Reader::getGetForkHeads() const {
  KJ_IREQUIRE((which() == ChainRPCRequest::GET_FORK_HEADS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetForkHeadsRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::GetForkHeadsRequest::Builder ChainRPCRequest::Builder::getGetForkHeads() {
  KJ_IREQUIRE((which() == ChainRPCRequest::GET_FORK_HEADS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetForkHeadsRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::setGetForkHeads( ::koinos::rpc::chain::GetForkHeadsRequest::Reader value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::GET_FORK_HEADS);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetForkHeadsRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::GetForkHeadsRequest::Builder ChainRPCRequest::Builder::initGetForkHeads() {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::GET_FORK_HEADS);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetForkHeadsRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::adoptGetForkHeads(
    ::capnp::Orphan< ::koinos::rpc::chain::GetForkHeadsRequest>&& value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::GET_FORK_HEADS);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetForkHeadsRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::GetForkHeadsRequest> ChainRPCRequest::Builder::disownGetForkHeads() {
  KJ_IREQUIRE((which() == ChainRPCRequest::GET_FORK_HEADS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetForkHeadsRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCRequest::Reader::isReadContract() const {
  return which() == ChainRPCRequest::READ_CONTRACT;
}
inline bool ChainRPCRequest::Builder::isReadContract() {
  return which() == ChainRPCRequest::READ_CONTRACT;
}
inline bool ChainRPCRequest::Reader::hasReadContract() const {
  if (which() != ChainRPCRequest::READ_CONTRACT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCRequest::Builder::hasReadContract() {
  if (which() != ChainRPCRequest::READ_CONTRACT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::ReadContractRequest::Reader ChainRPCRequest::Reader::getReadContract() const {
  KJ_IREQUIRE((which() == ChainRPCRequest::READ_CONTRACT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ReadContractRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::ReadContractRequest::Builder ChainRPCRequest::Builder::getReadContract() {
  KJ_IREQUIRE((which() == ChainRPCRequest::READ_CONTRACT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ReadContractRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::setReadContract( ::koinos::rpc::chain::ReadContractRequest::Reader value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::READ_CONTRACT);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ReadContractRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::ReadContractRequest::Builder ChainRPCRequest::Builder::initReadContract() {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::READ_CONTRACT);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ReadContractRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::adoptReadContract(
    ::capnp::Orphan< ::koinos::rpc::chain::ReadContractRequest>&& value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::READ_CONTRACT);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ReadContractRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::ReadContractRequest> ChainRPCRequest::Builder::disownReadContract() {
  KJ_IREQUIRE((which() == ChainRPCRequest::READ_CONTRACT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ReadContractRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCRequest::Reader::isGetAccountNonce() const {
  return which() == ChainRPCRequest::GET_ACCOUNT_NONCE;
}
inline bool ChainRPCRequest::Builder::isGetAccountNonce() {
  return which() == ChainRPCRequest::GET_ACCOUNT_NONCE;
}
inline bool ChainRPCRequest::Reader::hasGetAccountNonce() const {
  if (which() != ChainRPCRequest::GET_ACCOUNT_NONCE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCRequest::Builder::hasGetAccountNonce() {
  if (which() != ChainRPCRequest::GET_ACCOUNT_NONCE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::GetAccountNonceRequest::Reader ChainRPCRequest::Reader::getGetAccountNonce() const {
  KJ_IREQUIRE((which() == ChainRPCRequest::GET_ACCOUNT_NONCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetAccountNonceRequest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::GetAccountNonceRequest::Builder ChainRPCRequest::Builder::getGetAccountNonce() {
  KJ_IREQUIRE((which() == ChainRPCRequest::GET_ACCOUNT_NONCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetAccountNonceRequest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::setGetAccountNonce( ::koinos::rpc::chain::GetAccountNonceRequest::Reader value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::GET_ACCOUNT_NONCE);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetAccountNonceRequest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::GetAccountNonceRequest::Builder ChainRPCRequest::Builder::initGetAccountNonce() {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::GET_ACCOUNT_NONCE);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetAccountNonceRequest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCRequest::Builder::adoptGetAccountNonce(
    ::capnp::Orphan< ::koinos::rpc::chain::GetAccountNonceRequest>&& value) {
  _builder.setDataField<ChainRPCRequest::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCRequest::GET_ACCOUNT_NONCE);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetAccountNonceRequest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::GetAccountNonceRequest> ChainRPCRequest::Builder::disownGetAccountNonce() {
  KJ_IREQUIRE((which() == ChainRPCRequest::GET_ACCOUNT_NONCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetAccountNonceRequest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GetHeadInfoResponse::Reader::hasHeadTopology() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetHeadInfoResponse::Builder::hasHeadTopology() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::BlockTopology::Reader GetHeadInfoResponse::Reader::getHeadTopology() const {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::BlockTopology::Builder GetHeadInfoResponse::Builder::getHeadTopology() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::BlockTopology::Pipeline GetHeadInfoResponse::Pipeline::getHeadTopology() {
  return  ::koinos::BlockTopology::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GetHeadInfoResponse::Builder::setHeadTopology( ::koinos::BlockTopology::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::BlockTopology::Builder GetHeadInfoResponse::Builder::initHeadTopology() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetHeadInfoResponse::Builder::adoptHeadTopology(
    ::capnp::Orphan< ::koinos::BlockTopology>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::BlockTopology> GetHeadInfoResponse::Builder::disownHeadTopology() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t GetHeadInfoResponse::Reader::getLastIrreversibleBlock() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GetHeadInfoResponse::Builder::getLastIrreversibleBlock() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GetHeadInfoResponse::Builder::setLastIrreversibleBlock( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GetChainIDResponse::Reader::hasChainID() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetChainIDResponse::Builder::hasChainID() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader GetChainIDResponse::Reader::getChainID() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder GetChainIDResponse::Builder::getChainID() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetChainIDResponse::Builder::setChainID( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder GetChainIDResponse::Builder::initChainID(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GetChainIDResponse::Builder::adoptChainID(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> GetChainIDResponse::Builder::disownChainID() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GetForkHeadsResponse::Reader::hasForkHeads() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GetForkHeadsResponse::Builder::hasForkHeads() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Reader GetForkHeadsResponse::Reader::getForkHeads() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Builder GetForkHeadsResponse::Builder::getForkHeads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GetForkHeadsResponse::Builder::setForkHeads( ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>::Builder GetForkHeadsResponse::Builder::initForkHeads(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GetForkHeadsResponse::Builder::adoptForkHeads(
    ::capnp::Orphan< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>> GetForkHeadsResponse::Builder::disownForkHeads() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::koinos::BlockTopology,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GetForkHeadsResponse::Reader::hasLastIrreversibleBlock() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GetForkHeadsResponse::Builder::hasLastIrreversibleBlock() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::BlockTopology::Reader GetForkHeadsResponse::Reader::getLastIrreversibleBlock() const {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::koinos::BlockTopology::Builder GetForkHeadsResponse::Builder::getLastIrreversibleBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::BlockTopology::Pipeline GetForkHeadsResponse::Pipeline::getLastIrreversibleBlock() {
  return  ::koinos::BlockTopology::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void GetForkHeadsResponse::Builder::setLastIrreversibleBlock( ::koinos::BlockTopology::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::koinos::BlockTopology::Builder GetForkHeadsResponse::Builder::initLastIrreversibleBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GetForkHeadsResponse::Builder::adoptLastIrreversibleBlock(
    ::capnp::Orphan< ::koinos::BlockTopology>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::BlockTopology> GetForkHeadsResponse::Builder::disownLastIrreversibleBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::BlockTopology>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReadContractResponse::Reader::hasResult() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ReadContractResponse::Builder::hasResult() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader ReadContractResponse::Reader::getResult() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder ReadContractResponse::Builder::getResult() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ReadContractResponse::Builder::setResult( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder ReadContractResponse::Builder::initResult(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ReadContractResponse::Builder::adoptResult(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> ReadContractResponse::Builder::disownResult() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ReadContractResponse::Reader::hasLogs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ReadContractResponse::Builder::hasLogs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ReadContractResponse::Reader::getLogs() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ReadContractResponse::Builder::getLogs() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReadContractResponse::Builder::setLogs( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ReadContractResponse::Builder::initLogs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ReadContractResponse::Builder::adoptLogs(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ReadContractResponse::Builder::disownLogs() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t GetAccountNonceResponse::Reader::getNoncee() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GetAccountNonceResponse::Builder::getNoncee() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GetAccountNonceResponse::Builder::setNoncee( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::koinos::rpc::chain::ChainRPCResponse::Which ChainRPCResponse::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::koinos::rpc::chain::ChainRPCResponse::Which ChainRPCResponse::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ChainRPCResponse::Reader::isChainReserved() const {
  return which() == ChainRPCResponse::CHAIN_RESERVED;
}
inline bool ChainRPCResponse::Builder::isChainReserved() {
  return which() == ChainRPCResponse::CHAIN_RESERVED;
}
inline bool ChainRPCResponse::Reader::hasChainReserved() const {
  if (which() != ChainRPCResponse::CHAIN_RESERVED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCResponse::Builder::hasChainReserved() {
  if (which() != ChainRPCResponse::CHAIN_RESERVED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::ChainReservedResponse::Reader ChainRPCResponse::Reader::getChainReserved() const {
  KJ_IREQUIRE((which() == ChainRPCResponse::CHAIN_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ChainReservedResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::ChainReservedResponse::Builder ChainRPCResponse::Builder::getChainReserved() {
  KJ_IREQUIRE((which() == ChainRPCResponse::CHAIN_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ChainReservedResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::setChainReserved( ::koinos::rpc::chain::ChainReservedResponse::Reader value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::CHAIN_RESERVED);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ChainReservedResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::ChainReservedResponse::Builder ChainRPCResponse::Builder::initChainReserved() {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::CHAIN_RESERVED);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ChainReservedResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::adoptChainReserved(
    ::capnp::Orphan< ::koinos::rpc::chain::ChainReservedResponse>&& value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::CHAIN_RESERVED);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ChainReservedResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::ChainReservedResponse> ChainRPCResponse::Builder::disownChainReserved() {
  KJ_IREQUIRE((which() == ChainRPCResponse::CHAIN_RESERVED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ChainReservedResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCResponse::Reader::isChainError() const {
  return which() == ChainRPCResponse::CHAIN_ERROR;
}
inline bool ChainRPCResponse::Builder::isChainError() {
  return which() == ChainRPCResponse::CHAIN_ERROR;
}
inline bool ChainRPCResponse::Reader::hasChainError() const {
  if (which() != ChainRPCResponse::CHAIN_ERROR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCResponse::Builder::hasChainError() {
  if (which() != ChainRPCResponse::CHAIN_ERROR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::ErrorResponse::Reader ChainRPCResponse::Reader::getChainError() const {
  KJ_IREQUIRE((which() == ChainRPCResponse::CHAIN_ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::ErrorResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::ErrorResponse::Builder ChainRPCResponse::Builder::getChainError() {
  KJ_IREQUIRE((which() == ChainRPCResponse::CHAIN_ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::ErrorResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::setChainError( ::koinos::rpc::ErrorResponse::Reader value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::CHAIN_ERROR);
  ::capnp::_::PointerHelpers< ::koinos::rpc::ErrorResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::ErrorResponse::Builder ChainRPCResponse::Builder::initChainError() {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::CHAIN_ERROR);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::ErrorResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::adoptChainError(
    ::capnp::Orphan< ::koinos::rpc::ErrorResponse>&& value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::CHAIN_ERROR);
  ::capnp::_::PointerHelpers< ::koinos::rpc::ErrorResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::ErrorResponse> ChainRPCResponse::Builder::disownChainError() {
  KJ_IREQUIRE((which() == ChainRPCResponse::CHAIN_ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::ErrorResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCResponse::Reader::isSubmitBlock() const {
  return which() == ChainRPCResponse::SUBMIT_BLOCK;
}
inline bool ChainRPCResponse::Builder::isSubmitBlock() {
  return which() == ChainRPCResponse::SUBMIT_BLOCK;
}
inline bool ChainRPCResponse::Reader::hasSubmitBlock() const {
  if (which() != ChainRPCResponse::SUBMIT_BLOCK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCResponse::Builder::hasSubmitBlock() {
  if (which() != ChainRPCResponse::SUBMIT_BLOCK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::SubmitBlockResponse::Reader ChainRPCResponse::Reader::getSubmitBlock() const {
  KJ_IREQUIRE((which() == ChainRPCResponse::SUBMIT_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitBlockResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::SubmitBlockResponse::Builder ChainRPCResponse::Builder::getSubmitBlock() {
  KJ_IREQUIRE((which() == ChainRPCResponse::SUBMIT_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitBlockResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::setSubmitBlock( ::koinos::rpc::chain::SubmitBlockResponse::Reader value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::SUBMIT_BLOCK);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitBlockResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::SubmitBlockResponse::Builder ChainRPCResponse::Builder::initSubmitBlock() {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::SUBMIT_BLOCK);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitBlockResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::adoptSubmitBlock(
    ::capnp::Orphan< ::koinos::rpc::chain::SubmitBlockResponse>&& value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::SUBMIT_BLOCK);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitBlockResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::SubmitBlockResponse> ChainRPCResponse::Builder::disownSubmitBlock() {
  KJ_IREQUIRE((which() == ChainRPCResponse::SUBMIT_BLOCK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitBlockResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCResponse::Reader::isSubmitTransaction() const {
  return which() == ChainRPCResponse::SUBMIT_TRANSACTION;
}
inline bool ChainRPCResponse::Builder::isSubmitTransaction() {
  return which() == ChainRPCResponse::SUBMIT_TRANSACTION;
}
inline bool ChainRPCResponse::Reader::hasSubmitTransaction() const {
  if (which() != ChainRPCResponse::SUBMIT_TRANSACTION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCResponse::Builder::hasSubmitTransaction() {
  if (which() != ChainRPCResponse::SUBMIT_TRANSACTION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::SubmitTransactionResponse::Reader ChainRPCResponse::Reader::getSubmitTransaction() const {
  KJ_IREQUIRE((which() == ChainRPCResponse::SUBMIT_TRANSACTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitTransactionResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::SubmitTransactionResponse::Builder ChainRPCResponse::Builder::getSubmitTransaction() {
  KJ_IREQUIRE((which() == ChainRPCResponse::SUBMIT_TRANSACTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitTransactionResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::setSubmitTransaction( ::koinos::rpc::chain::SubmitTransactionResponse::Reader value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::SUBMIT_TRANSACTION);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitTransactionResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::SubmitTransactionResponse::Builder ChainRPCResponse::Builder::initSubmitTransaction() {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::SUBMIT_TRANSACTION);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitTransactionResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::adoptSubmitTransaction(
    ::capnp::Orphan< ::koinos::rpc::chain::SubmitTransactionResponse>&& value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::SUBMIT_TRANSACTION);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitTransactionResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::SubmitTransactionResponse> ChainRPCResponse::Builder::disownSubmitTransaction() {
  KJ_IREQUIRE((which() == ChainRPCResponse::SUBMIT_TRANSACTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::SubmitTransactionResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCResponse::Reader::isGetHeadInfo() const {
  return which() == ChainRPCResponse::GET_HEAD_INFO;
}
inline bool ChainRPCResponse::Builder::isGetHeadInfo() {
  return which() == ChainRPCResponse::GET_HEAD_INFO;
}
inline bool ChainRPCResponse::Reader::hasGetHeadInfo() const {
  if (which() != ChainRPCResponse::GET_HEAD_INFO) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCResponse::Builder::hasGetHeadInfo() {
  if (which() != ChainRPCResponse::GET_HEAD_INFO) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::GetHeadInfoResponse::Reader ChainRPCResponse::Reader::getGetHeadInfo() const {
  KJ_IREQUIRE((which() == ChainRPCResponse::GET_HEAD_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetHeadInfoResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::GetHeadInfoResponse::Builder ChainRPCResponse::Builder::getGetHeadInfo() {
  KJ_IREQUIRE((which() == ChainRPCResponse::GET_HEAD_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetHeadInfoResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::setGetHeadInfo( ::koinos::rpc::chain::GetHeadInfoResponse::Reader value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::GET_HEAD_INFO);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetHeadInfoResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::GetHeadInfoResponse::Builder ChainRPCResponse::Builder::initGetHeadInfo() {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::GET_HEAD_INFO);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetHeadInfoResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::adoptGetHeadInfo(
    ::capnp::Orphan< ::koinos::rpc::chain::GetHeadInfoResponse>&& value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::GET_HEAD_INFO);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetHeadInfoResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::GetHeadInfoResponse> ChainRPCResponse::Builder::disownGetHeadInfo() {
  KJ_IREQUIRE((which() == ChainRPCResponse::GET_HEAD_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetHeadInfoResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCResponse::Reader::isGetChainID() const {
  return which() == ChainRPCResponse::GET_CHAIN_I_D;
}
inline bool ChainRPCResponse::Builder::isGetChainID() {
  return which() == ChainRPCResponse::GET_CHAIN_I_D;
}
inline bool ChainRPCResponse::Reader::hasGetChainID() const {
  if (which() != ChainRPCResponse::GET_CHAIN_I_D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCResponse::Builder::hasGetChainID() {
  if (which() != ChainRPCResponse::GET_CHAIN_I_D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::GetChainIDResponse::Reader ChainRPCResponse::Reader::getGetChainID() const {
  KJ_IREQUIRE((which() == ChainRPCResponse::GET_CHAIN_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetChainIDResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::GetChainIDResponse::Builder ChainRPCResponse::Builder::getGetChainID() {
  KJ_IREQUIRE((which() == ChainRPCResponse::GET_CHAIN_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetChainIDResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::setGetChainID( ::koinos::rpc::chain::GetChainIDResponse::Reader value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::GET_CHAIN_I_D);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetChainIDResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::GetChainIDResponse::Builder ChainRPCResponse::Builder::initGetChainID() {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::GET_CHAIN_I_D);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetChainIDResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::adoptGetChainID(
    ::capnp::Orphan< ::koinos::rpc::chain::GetChainIDResponse>&& value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::GET_CHAIN_I_D);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetChainIDResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::GetChainIDResponse> ChainRPCResponse::Builder::disownGetChainID() {
  KJ_IREQUIRE((which() == ChainRPCResponse::GET_CHAIN_I_D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetChainIDResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCResponse::Reader::isGetForkHeads() const {
  return which() == ChainRPCResponse::GET_FORK_HEADS;
}
inline bool ChainRPCResponse::Builder::isGetForkHeads() {
  return which() == ChainRPCResponse::GET_FORK_HEADS;
}
inline bool ChainRPCResponse::Reader::hasGetForkHeads() const {
  if (which() != ChainRPCResponse::GET_FORK_HEADS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCResponse::Builder::hasGetForkHeads() {
  if (which() != ChainRPCResponse::GET_FORK_HEADS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::GetForkHeadsResponse::Reader ChainRPCResponse::Reader::getGetForkHeads() const {
  KJ_IREQUIRE((which() == ChainRPCResponse::GET_FORK_HEADS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetForkHeadsResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::GetForkHeadsResponse::Builder ChainRPCResponse::Builder::getGetForkHeads() {
  KJ_IREQUIRE((which() == ChainRPCResponse::GET_FORK_HEADS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetForkHeadsResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::setGetForkHeads( ::koinos::rpc::chain::GetForkHeadsResponse::Reader value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::GET_FORK_HEADS);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetForkHeadsResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::GetForkHeadsResponse::Builder ChainRPCResponse::Builder::initGetForkHeads() {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::GET_FORK_HEADS);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetForkHeadsResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::adoptGetForkHeads(
    ::capnp::Orphan< ::koinos::rpc::chain::GetForkHeadsResponse>&& value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::GET_FORK_HEADS);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetForkHeadsResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::GetForkHeadsResponse> ChainRPCResponse::Builder::disownGetForkHeads() {
  KJ_IREQUIRE((which() == ChainRPCResponse::GET_FORK_HEADS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetForkHeadsResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCResponse::Reader::isReadContract() const {
  return which() == ChainRPCResponse::READ_CONTRACT;
}
inline bool ChainRPCResponse::Builder::isReadContract() {
  return which() == ChainRPCResponse::READ_CONTRACT;
}
inline bool ChainRPCResponse::Reader::hasReadContract() const {
  if (which() != ChainRPCResponse::READ_CONTRACT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCResponse::Builder::hasReadContract() {
  if (which() != ChainRPCResponse::READ_CONTRACT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::ReadContractResponse::Reader ChainRPCResponse::Reader::getReadContract() const {
  KJ_IREQUIRE((which() == ChainRPCResponse::READ_CONTRACT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ReadContractResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::ReadContractResponse::Builder ChainRPCResponse::Builder::getReadContract() {
  KJ_IREQUIRE((which() == ChainRPCResponse::READ_CONTRACT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ReadContractResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::setReadContract( ::koinos::rpc::chain::ReadContractResponse::Reader value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::READ_CONTRACT);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ReadContractResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::ReadContractResponse::Builder ChainRPCResponse::Builder::initReadContract() {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::READ_CONTRACT);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ReadContractResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::adoptReadContract(
    ::capnp::Orphan< ::koinos::rpc::chain::ReadContractResponse>&& value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::READ_CONTRACT);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ReadContractResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::ReadContractResponse> ChainRPCResponse::Builder::disownReadContract() {
  KJ_IREQUIRE((which() == ChainRPCResponse::READ_CONTRACT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::ReadContractResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ChainRPCResponse::Reader::isGetAccountNonce() const {
  return which() == ChainRPCResponse::GET_ACCOUNT_NONCE;
}
inline bool ChainRPCResponse::Builder::isGetAccountNonce() {
  return which() == ChainRPCResponse::GET_ACCOUNT_NONCE;
}
inline bool ChainRPCResponse::Reader::hasGetAccountNonce() const {
  if (which() != ChainRPCResponse::GET_ACCOUNT_NONCE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ChainRPCResponse::Builder::hasGetAccountNonce() {
  if (which() != ChainRPCResponse::GET_ACCOUNT_NONCE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::rpc::chain::GetAccountNonceResponse::Reader ChainRPCResponse::Reader::getGetAccountNonce() const {
  KJ_IREQUIRE((which() == ChainRPCResponse::GET_ACCOUNT_NONCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetAccountNonceResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::koinos::rpc::chain::GetAccountNonceResponse::Builder ChainRPCResponse::Builder::getGetAccountNonce() {
  KJ_IREQUIRE((which() == ChainRPCResponse::GET_ACCOUNT_NONCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetAccountNonceResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::setGetAccountNonce( ::koinos::rpc::chain::GetAccountNonceResponse::Reader value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::GET_ACCOUNT_NONCE);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetAccountNonceResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::koinos::rpc::chain::GetAccountNonceResponse::Builder ChainRPCResponse::Builder::initGetAccountNonce() {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::GET_ACCOUNT_NONCE);
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetAccountNonceResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ChainRPCResponse::Builder::adoptGetAccountNonce(
    ::capnp::Orphan< ::koinos::rpc::chain::GetAccountNonceResponse>&& value) {
  _builder.setDataField<ChainRPCResponse::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ChainRPCResponse::GET_ACCOUNT_NONCE);
  ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetAccountNonceResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::rpc::chain::GetAccountNonceResponse> ChainRPCResponse::Builder::disownGetAccountNonce() {
  KJ_IREQUIRE((which() == ChainRPCResponse::GET_ACCOUNT_NONCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::koinos::rpc::chain::GetAccountNonceResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

