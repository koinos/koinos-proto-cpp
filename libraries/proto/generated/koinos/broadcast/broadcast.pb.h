// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/broadcast/broadcast.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fbroadcast_2fbroadcast_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fbroadcast_2fbroadcast_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/common.pb.h"
#include "koinos/options.pb.h"
#include "koinos/protocol/protocol.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fbroadcast_2fbroadcast_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fbroadcast_2fbroadcast_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto;
namespace koinos {
namespace broadcast {
class block_accepted;
struct block_acceptedDefaultTypeInternal;
extern block_acceptedDefaultTypeInternal _block_accepted_default_instance_;
class block_irreversible;
struct block_irreversibleDefaultTypeInternal;
extern block_irreversibleDefaultTypeInternal _block_irreversible_default_instance_;
class fork_heads;
struct fork_headsDefaultTypeInternal;
extern fork_headsDefaultTypeInternal _fork_heads_default_instance_;
class transaction_accepted;
struct transaction_acceptedDefaultTypeInternal;
extern transaction_acceptedDefaultTypeInternal _transaction_accepted_default_instance_;
}  // namespace broadcast
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::broadcast::block_accepted* Arena::CreateMaybeMessage<::koinos::broadcast::block_accepted>(Arena*);
template<> ::koinos::broadcast::block_irreversible* Arena::CreateMaybeMessage<::koinos::broadcast::block_irreversible>(Arena*);
template<> ::koinos::broadcast::fork_heads* Arena::CreateMaybeMessage<::koinos::broadcast::fork_heads>(Arena*);
template<> ::koinos::broadcast::transaction_accepted* Arena::CreateMaybeMessage<::koinos::broadcast::transaction_accepted>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace broadcast {

// ===================================================================

class transaction_accepted final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.broadcast.transaction_accepted) */ {
 public:
  inline transaction_accepted() : transaction_accepted(nullptr) {}
  ~transaction_accepted() override;
  explicit constexpr transaction_accepted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_accepted(const transaction_accepted& from);
  transaction_accepted(transaction_accepted&& from) noexcept
    : transaction_accepted() {
    *this = ::std::move(from);
  }

  inline transaction_accepted& operator=(const transaction_accepted& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_accepted& operator=(transaction_accepted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_accepted& default_instance() {
    return *internal_default_instance();
  }
  static inline const transaction_accepted* internal_default_instance() {
    return reinterpret_cast<const transaction_accepted*>(
               &_transaction_accepted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(transaction_accepted& a, transaction_accepted& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_accepted* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_accepted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transaction_accepted* New() const final {
    return new transaction_accepted();
  }

  transaction_accepted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transaction_accepted>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_accepted& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_accepted& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_accepted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.broadcast.transaction_accepted";
  }
  protected:
  explicit transaction_accepted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
    kReceiptFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // .koinos.protocol.transaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::koinos::protocol::transaction& transaction() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::transaction* release_transaction();
  ::koinos::protocol::transaction* mutable_transaction();
  void set_allocated_transaction(::koinos::protocol::transaction* transaction);
  private:
  const ::koinos::protocol::transaction& _internal_transaction() const;
  ::koinos::protocol::transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::koinos::protocol::transaction* transaction);
  ::koinos::protocol::transaction* unsafe_arena_release_transaction();

  // .koinos.protocol.transaction_receipt receipt = 2;
  bool has_receipt() const;
  private:
  bool _internal_has_receipt() const;
  public:
  void clear_receipt();
  const ::koinos::protocol::transaction_receipt& receipt() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::transaction_receipt* release_receipt();
  ::koinos::protocol::transaction_receipt* mutable_receipt();
  void set_allocated_receipt(::koinos::protocol::transaction_receipt* receipt);
  private:
  const ::koinos::protocol::transaction_receipt& _internal_receipt() const;
  ::koinos::protocol::transaction_receipt* _internal_mutable_receipt();
  public:
  void unsafe_arena_set_allocated_receipt(
      ::koinos::protocol::transaction_receipt* receipt);
  ::koinos::protocol::transaction_receipt* unsafe_arena_release_receipt();

  // uint64 height = 3 [jstype = JS_STRING];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.broadcast.transaction_accepted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::transaction* transaction_;
  ::koinos::protocol::transaction_receipt* receipt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fbroadcast_2fbroadcast_2eproto;
};
// -------------------------------------------------------------------

class block_accepted final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.broadcast.block_accepted) */ {
 public:
  inline block_accepted() : block_accepted(nullptr) {}
  ~block_accepted() override;
  explicit constexpr block_accepted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_accepted(const block_accepted& from);
  block_accepted(block_accepted&& from) noexcept
    : block_accepted() {
    *this = ::std::move(from);
  }

  inline block_accepted& operator=(const block_accepted& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_accepted& operator=(block_accepted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_accepted& default_instance() {
    return *internal_default_instance();
  }
  static inline const block_accepted* internal_default_instance() {
    return reinterpret_cast<const block_accepted*>(
               &_block_accepted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(block_accepted& a, block_accepted& b) {
    a.Swap(&b);
  }
  inline void Swap(block_accepted* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_accepted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_accepted* New() const final {
    return new block_accepted();
  }

  block_accepted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_accepted>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_accepted& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_accepted& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_accepted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.broadcast.block_accepted";
  }
  protected:
  explicit block_accepted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
    kReceiptFieldNumber = 2,
  };
  // .koinos.protocol.block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::koinos::protocol::block& block() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::block* release_block();
  ::koinos::protocol::block* mutable_block();
  void set_allocated_block(::koinos::protocol::block* block);
  private:
  const ::koinos::protocol::block& _internal_block() const;
  ::koinos::protocol::block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::koinos::protocol::block* block);
  ::koinos::protocol::block* unsafe_arena_release_block();

  // .koinos.protocol.block_receipt receipt = 2;
  bool has_receipt() const;
  private:
  bool _internal_has_receipt() const;
  public:
  void clear_receipt();
  const ::koinos::protocol::block_receipt& receipt() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::block_receipt* release_receipt();
  ::koinos::protocol::block_receipt* mutable_receipt();
  void set_allocated_receipt(::koinos::protocol::block_receipt* receipt);
  private:
  const ::koinos::protocol::block_receipt& _internal_receipt() const;
  ::koinos::protocol::block_receipt* _internal_mutable_receipt();
  public:
  void unsafe_arena_set_allocated_receipt(
      ::koinos::protocol::block_receipt* receipt);
  ::koinos::protocol::block_receipt* unsafe_arena_release_receipt();

  // @@protoc_insertion_point(class_scope:koinos.broadcast.block_accepted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::block* block_;
  ::koinos::protocol::block_receipt* receipt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fbroadcast_2fbroadcast_2eproto;
};
// -------------------------------------------------------------------

class block_irreversible final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.broadcast.block_irreversible) */ {
 public:
  inline block_irreversible() : block_irreversible(nullptr) {}
  ~block_irreversible() override;
  explicit constexpr block_irreversible(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_irreversible(const block_irreversible& from);
  block_irreversible(block_irreversible&& from) noexcept
    : block_irreversible() {
    *this = ::std::move(from);
  }

  inline block_irreversible& operator=(const block_irreversible& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_irreversible& operator=(block_irreversible&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_irreversible& default_instance() {
    return *internal_default_instance();
  }
  static inline const block_irreversible* internal_default_instance() {
    return reinterpret_cast<const block_irreversible*>(
               &_block_irreversible_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(block_irreversible& a, block_irreversible& b) {
    a.Swap(&b);
  }
  inline void Swap(block_irreversible* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_irreversible* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_irreversible* New() const final {
    return new block_irreversible();
  }

  block_irreversible* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_irreversible>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_irreversible& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_irreversible& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_irreversible* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.broadcast.block_irreversible";
  }
  protected:
  explicit block_irreversible(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopologyFieldNumber = 1,
  };
  // .koinos.block_topology topology = 1;
  bool has_topology() const;
  private:
  bool _internal_has_topology() const;
  public:
  void clear_topology();
  const ::koinos::block_topology& topology() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::block_topology* release_topology();
  ::koinos::block_topology* mutable_topology();
  void set_allocated_topology(::koinos::block_topology* topology);
  private:
  const ::koinos::block_topology& _internal_topology() const;
  ::koinos::block_topology* _internal_mutable_topology();
  public:
  void unsafe_arena_set_allocated_topology(
      ::koinos::block_topology* topology);
  ::koinos::block_topology* unsafe_arena_release_topology();

  // @@protoc_insertion_point(class_scope:koinos.broadcast.block_irreversible)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::block_topology* topology_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fbroadcast_2fbroadcast_2eproto;
};
// -------------------------------------------------------------------

class fork_heads final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.broadcast.fork_heads) */ {
 public:
  inline fork_heads() : fork_heads(nullptr) {}
  ~fork_heads() override;
  explicit constexpr fork_heads(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  fork_heads(const fork_heads& from);
  fork_heads(fork_heads&& from) noexcept
    : fork_heads() {
    *this = ::std::move(from);
  }

  inline fork_heads& operator=(const fork_heads& from) {
    CopyFrom(from);
    return *this;
  }
  inline fork_heads& operator=(fork_heads&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const fork_heads& default_instance() {
    return *internal_default_instance();
  }
  static inline const fork_heads* internal_default_instance() {
    return reinterpret_cast<const fork_heads*>(
               &_fork_heads_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(fork_heads& a, fork_heads& b) {
    a.Swap(&b);
  }
  inline void Swap(fork_heads* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fork_heads* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fork_heads* New() const final {
    return new fork_heads();
  }

  fork_heads* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fork_heads>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const fork_heads& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const fork_heads& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fork_heads* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.broadcast.fork_heads";
  }
  protected:
  explicit fork_heads(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadsFieldNumber = 2,
    kLastIrreversibleBlockFieldNumber = 1,
  };
  // repeated .koinos.block_topology heads = 2;
  int heads_size() const;
  private:
  int _internal_heads_size() const;
  public:
  void clear_heads();
  ::koinos::block_topology* mutable_heads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_topology >*
      mutable_heads();
  private:
  const ::koinos::block_topology& _internal_heads(int index) const;
  ::koinos::block_topology* _internal_add_heads();
  public:
  const ::koinos::block_topology& heads(int index) const;
  ::koinos::block_topology* add_heads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_topology >&
      heads() const;

  // .koinos.block_topology last_irreversible_block = 1;
  bool has_last_irreversible_block() const;
  private:
  bool _internal_has_last_irreversible_block() const;
  public:
  void clear_last_irreversible_block();
  const ::koinos::block_topology& last_irreversible_block() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::block_topology* release_last_irreversible_block();
  ::koinos::block_topology* mutable_last_irreversible_block();
  void set_allocated_last_irreversible_block(::koinos::block_topology* last_irreversible_block);
  private:
  const ::koinos::block_topology& _internal_last_irreversible_block() const;
  ::koinos::block_topology* _internal_mutable_last_irreversible_block();
  public:
  void unsafe_arena_set_allocated_last_irreversible_block(
      ::koinos::block_topology* last_irreversible_block);
  ::koinos::block_topology* unsafe_arena_release_last_irreversible_block();

  // @@protoc_insertion_point(class_scope:koinos.broadcast.fork_heads)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_topology > heads_;
  ::koinos::block_topology* last_irreversible_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fbroadcast_2fbroadcast_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// transaction_accepted

// .koinos.protocol.transaction transaction = 1;
inline bool transaction_accepted::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool transaction_accepted::has_transaction() const {
  return _internal_has_transaction();
}
inline const ::koinos::protocol::transaction& transaction_accepted::_internal_transaction() const {
  const ::koinos::protocol::transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::transaction&>(
      ::koinos::protocol::_transaction_default_instance_);
}
inline const ::koinos::protocol::transaction& transaction_accepted::transaction() const {
  // @@protoc_insertion_point(field_get:koinos.broadcast.transaction_accepted.transaction)
  return _internal_transaction();
}
inline void transaction_accepted::unsafe_arena_set_allocated_transaction(
    ::koinos::protocol::transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.broadcast.transaction_accepted.transaction)
}
inline ::koinos::protocol::transaction* transaction_accepted::release_transaction() {
  
  ::koinos::protocol::transaction* temp = transaction_;
  transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::transaction* transaction_accepted::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:koinos.broadcast.transaction_accepted.transaction)
  
  ::koinos::protocol::transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::koinos::protocol::transaction* transaction_accepted::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::transaction>(GetArenaForAllocation());
    transaction_ = p;
  }
  return transaction_;
}
inline ::koinos::protocol::transaction* transaction_accepted::mutable_transaction() {
  ::koinos::protocol::transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:koinos.broadcast.transaction_accepted.transaction)
  return _msg;
}
inline void transaction_accepted::set_allocated_transaction(::koinos::protocol::transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction));
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:koinos.broadcast.transaction_accepted.transaction)
}

// .koinos.protocol.transaction_receipt receipt = 2;
inline bool transaction_accepted::_internal_has_receipt() const {
  return this != internal_default_instance() && receipt_ != nullptr;
}
inline bool transaction_accepted::has_receipt() const {
  return _internal_has_receipt();
}
inline const ::koinos::protocol::transaction_receipt& transaction_accepted::_internal_receipt() const {
  const ::koinos::protocol::transaction_receipt* p = receipt_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::transaction_receipt&>(
      ::koinos::protocol::_transaction_receipt_default_instance_);
}
inline const ::koinos::protocol::transaction_receipt& transaction_accepted::receipt() const {
  // @@protoc_insertion_point(field_get:koinos.broadcast.transaction_accepted.receipt)
  return _internal_receipt();
}
inline void transaction_accepted::unsafe_arena_set_allocated_receipt(
    ::koinos::protocol::transaction_receipt* receipt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  receipt_ = receipt;
  if (receipt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.broadcast.transaction_accepted.receipt)
}
inline ::koinos::protocol::transaction_receipt* transaction_accepted::release_receipt() {
  
  ::koinos::protocol::transaction_receipt* temp = receipt_;
  receipt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::transaction_receipt* transaction_accepted::unsafe_arena_release_receipt() {
  // @@protoc_insertion_point(field_release:koinos.broadcast.transaction_accepted.receipt)
  
  ::koinos::protocol::transaction_receipt* temp = receipt_;
  receipt_ = nullptr;
  return temp;
}
inline ::koinos::protocol::transaction_receipt* transaction_accepted::_internal_mutable_receipt() {
  
  if (receipt_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::transaction_receipt>(GetArenaForAllocation());
    receipt_ = p;
  }
  return receipt_;
}
inline ::koinos::protocol::transaction_receipt* transaction_accepted::mutable_receipt() {
  ::koinos::protocol::transaction_receipt* _msg = _internal_mutable_receipt();
  // @@protoc_insertion_point(field_mutable:koinos.broadcast.transaction_accepted.receipt)
  return _msg;
}
inline void transaction_accepted::set_allocated_receipt(::koinos::protocol::transaction_receipt* receipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  if (receipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt));
    if (message_arena != submessage_arena) {
      receipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receipt, submessage_arena);
    }
    
  } else {
    
  }
  receipt_ = receipt;
  // @@protoc_insertion_point(field_set_allocated:koinos.broadcast.transaction_accepted.receipt)
}

// uint64 height = 3 [jstype = JS_STRING];
inline void transaction_accepted::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_accepted::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 transaction_accepted::height() const {
  // @@protoc_insertion_point(field_get:koinos.broadcast.transaction_accepted.height)
  return _internal_height();
}
inline void transaction_accepted::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void transaction_accepted::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:koinos.broadcast.transaction_accepted.height)
}

// -------------------------------------------------------------------

// block_accepted

// .koinos.protocol.block block = 1;
inline bool block_accepted::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool block_accepted::has_block() const {
  return _internal_has_block();
}
inline const ::koinos::protocol::block& block_accepted::_internal_block() const {
  const ::koinos::protocol::block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block&>(
      ::koinos::protocol::_block_default_instance_);
}
inline const ::koinos::protocol::block& block_accepted::block() const {
  // @@protoc_insertion_point(field_get:koinos.broadcast.block_accepted.block)
  return _internal_block();
}
inline void block_accepted::unsafe_arena_set_allocated_block(
    ::koinos::protocol::block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.broadcast.block_accepted.block)
}
inline ::koinos::protocol::block* block_accepted::release_block() {
  
  ::koinos::protocol::block* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::block* block_accepted::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:koinos.broadcast.block_accepted.block)
  
  ::koinos::protocol::block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block* block_accepted::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::koinos::protocol::block* block_accepted::mutable_block() {
  ::koinos::protocol::block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:koinos.broadcast.block_accepted.block)
  return _msg;
}
inline void block_accepted::set_allocated_block(::koinos::protocol::block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block));
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:koinos.broadcast.block_accepted.block)
}

// .koinos.protocol.block_receipt receipt = 2;
inline bool block_accepted::_internal_has_receipt() const {
  return this != internal_default_instance() && receipt_ != nullptr;
}
inline bool block_accepted::has_receipt() const {
  return _internal_has_receipt();
}
inline const ::koinos::protocol::block_receipt& block_accepted::_internal_receipt() const {
  const ::koinos::protocol::block_receipt* p = receipt_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block_receipt&>(
      ::koinos::protocol::_block_receipt_default_instance_);
}
inline const ::koinos::protocol::block_receipt& block_accepted::receipt() const {
  // @@protoc_insertion_point(field_get:koinos.broadcast.block_accepted.receipt)
  return _internal_receipt();
}
inline void block_accepted::unsafe_arena_set_allocated_receipt(
    ::koinos::protocol::block_receipt* receipt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  receipt_ = receipt;
  if (receipt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.broadcast.block_accepted.receipt)
}
inline ::koinos::protocol::block_receipt* block_accepted::release_receipt() {
  
  ::koinos::protocol::block_receipt* temp = receipt_;
  receipt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::block_receipt* block_accepted::unsafe_arena_release_receipt() {
  // @@protoc_insertion_point(field_release:koinos.broadcast.block_accepted.receipt)
  
  ::koinos::protocol::block_receipt* temp = receipt_;
  receipt_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block_receipt* block_accepted::_internal_mutable_receipt() {
  
  if (receipt_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block_receipt>(GetArenaForAllocation());
    receipt_ = p;
  }
  return receipt_;
}
inline ::koinos::protocol::block_receipt* block_accepted::mutable_receipt() {
  ::koinos::protocol::block_receipt* _msg = _internal_mutable_receipt();
  // @@protoc_insertion_point(field_mutable:koinos.broadcast.block_accepted.receipt)
  return _msg;
}
inline void block_accepted::set_allocated_receipt(::koinos::protocol::block_receipt* receipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  if (receipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt));
    if (message_arena != submessage_arena) {
      receipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receipt, submessage_arena);
    }
    
  } else {
    
  }
  receipt_ = receipt;
  // @@protoc_insertion_point(field_set_allocated:koinos.broadcast.block_accepted.receipt)
}

// -------------------------------------------------------------------

// block_irreversible

// .koinos.block_topology topology = 1;
inline bool block_irreversible::_internal_has_topology() const {
  return this != internal_default_instance() && topology_ != nullptr;
}
inline bool block_irreversible::has_topology() const {
  return _internal_has_topology();
}
inline const ::koinos::block_topology& block_irreversible::_internal_topology() const {
  const ::koinos::block_topology* p = topology_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::block_topology&>(
      ::koinos::_block_topology_default_instance_);
}
inline const ::koinos::block_topology& block_irreversible::topology() const {
  // @@protoc_insertion_point(field_get:koinos.broadcast.block_irreversible.topology)
  return _internal_topology();
}
inline void block_irreversible::unsafe_arena_set_allocated_topology(
    ::koinos::block_topology* topology) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topology_);
  }
  topology_ = topology;
  if (topology) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.broadcast.block_irreversible.topology)
}
inline ::koinos::block_topology* block_irreversible::release_topology() {
  
  ::koinos::block_topology* temp = topology_;
  topology_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::block_topology* block_irreversible::unsafe_arena_release_topology() {
  // @@protoc_insertion_point(field_release:koinos.broadcast.block_irreversible.topology)
  
  ::koinos::block_topology* temp = topology_;
  topology_ = nullptr;
  return temp;
}
inline ::koinos::block_topology* block_irreversible::_internal_mutable_topology() {
  
  if (topology_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::block_topology>(GetArenaForAllocation());
    topology_ = p;
  }
  return topology_;
}
inline ::koinos::block_topology* block_irreversible::mutable_topology() {
  ::koinos::block_topology* _msg = _internal_mutable_topology();
  // @@protoc_insertion_point(field_mutable:koinos.broadcast.block_irreversible.topology)
  return _msg;
}
inline void block_irreversible::set_allocated_topology(::koinos::block_topology* topology) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(topology_);
  }
  if (topology) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topology));
    if (message_arena != submessage_arena) {
      topology = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topology, submessage_arena);
    }
    
  } else {
    
  }
  topology_ = topology;
  // @@protoc_insertion_point(field_set_allocated:koinos.broadcast.block_irreversible.topology)
}

// -------------------------------------------------------------------

// fork_heads

// .koinos.block_topology last_irreversible_block = 1;
inline bool fork_heads::_internal_has_last_irreversible_block() const {
  return this != internal_default_instance() && last_irreversible_block_ != nullptr;
}
inline bool fork_heads::has_last_irreversible_block() const {
  return _internal_has_last_irreversible_block();
}
inline const ::koinos::block_topology& fork_heads::_internal_last_irreversible_block() const {
  const ::koinos::block_topology* p = last_irreversible_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::block_topology&>(
      ::koinos::_block_topology_default_instance_);
}
inline const ::koinos::block_topology& fork_heads::last_irreversible_block() const {
  // @@protoc_insertion_point(field_get:koinos.broadcast.fork_heads.last_irreversible_block)
  return _internal_last_irreversible_block();
}
inline void fork_heads::unsafe_arena_set_allocated_last_irreversible_block(
    ::koinos::block_topology* last_irreversible_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_irreversible_block_);
  }
  last_irreversible_block_ = last_irreversible_block;
  if (last_irreversible_block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.broadcast.fork_heads.last_irreversible_block)
}
inline ::koinos::block_topology* fork_heads::release_last_irreversible_block() {
  
  ::koinos::block_topology* temp = last_irreversible_block_;
  last_irreversible_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::block_topology* fork_heads::unsafe_arena_release_last_irreversible_block() {
  // @@protoc_insertion_point(field_release:koinos.broadcast.fork_heads.last_irreversible_block)
  
  ::koinos::block_topology* temp = last_irreversible_block_;
  last_irreversible_block_ = nullptr;
  return temp;
}
inline ::koinos::block_topology* fork_heads::_internal_mutable_last_irreversible_block() {
  
  if (last_irreversible_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::block_topology>(GetArenaForAllocation());
    last_irreversible_block_ = p;
  }
  return last_irreversible_block_;
}
inline ::koinos::block_topology* fork_heads::mutable_last_irreversible_block() {
  ::koinos::block_topology* _msg = _internal_mutable_last_irreversible_block();
  // @@protoc_insertion_point(field_mutable:koinos.broadcast.fork_heads.last_irreversible_block)
  return _msg;
}
inline void fork_heads::set_allocated_last_irreversible_block(::koinos::block_topology* last_irreversible_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_irreversible_block_);
  }
  if (last_irreversible_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_irreversible_block));
    if (message_arena != submessage_arena) {
      last_irreversible_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_irreversible_block, submessage_arena);
    }
    
  } else {
    
  }
  last_irreversible_block_ = last_irreversible_block;
  // @@protoc_insertion_point(field_set_allocated:koinos.broadcast.fork_heads.last_irreversible_block)
}

// repeated .koinos.block_topology heads = 2;
inline int fork_heads::_internal_heads_size() const {
  return heads_.size();
}
inline int fork_heads::heads_size() const {
  return _internal_heads_size();
}
inline ::koinos::block_topology* fork_heads::mutable_heads(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.broadcast.fork_heads.heads)
  return heads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_topology >*
fork_heads::mutable_heads() {
  // @@protoc_insertion_point(field_mutable_list:koinos.broadcast.fork_heads.heads)
  return &heads_;
}
inline const ::koinos::block_topology& fork_heads::_internal_heads(int index) const {
  return heads_.Get(index);
}
inline const ::koinos::block_topology& fork_heads::heads(int index) const {
  // @@protoc_insertion_point(field_get:koinos.broadcast.fork_heads.heads)
  return _internal_heads(index);
}
inline ::koinos::block_topology* fork_heads::_internal_add_heads() {
  return heads_.Add();
}
inline ::koinos::block_topology* fork_heads::add_heads() {
  ::koinos::block_topology* _add = _internal_add_heads();
  // @@protoc_insertion_point(field_add:koinos.broadcast.fork_heads.heads)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_topology >&
fork_heads::heads() const {
  // @@protoc_insertion_point(field_list:koinos.broadcast.fork_heads.heads)
  return heads_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace broadcast
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fbroadcast_2fbroadcast_2eproto
