// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/account_history/account_history.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/options.pb.h"
#include "koinos/protocol/protocol.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto;
namespace koinos {
namespace account_history {
class account_metadata;
struct account_metadataDefaultTypeInternal;
extern account_metadataDefaultTypeInternal _account_metadata_default_instance_;
class block_record;
struct block_recordDefaultTypeInternal;
extern block_recordDefaultTypeInternal _block_record_default_instance_;
class history_index;
struct history_indexDefaultTypeInternal;
extern history_indexDefaultTypeInternal _history_index_default_instance_;
class history_record;
struct history_recordDefaultTypeInternal;
extern history_recordDefaultTypeInternal _history_record_default_instance_;
class transaction_record;
struct transaction_recordDefaultTypeInternal;
extern transaction_recordDefaultTypeInternal _transaction_record_default_instance_;
}  // namespace account_history
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::account_history::account_metadata* Arena::CreateMaybeMessage<::koinos::account_history::account_metadata>(Arena*);
template<> ::koinos::account_history::block_record* Arena::CreateMaybeMessage<::koinos::account_history::block_record>(Arena*);
template<> ::koinos::account_history::history_index* Arena::CreateMaybeMessage<::koinos::account_history::history_index>(Arena*);
template<> ::koinos::account_history::history_record* Arena::CreateMaybeMessage<::koinos::account_history::history_record>(Arena*);
template<> ::koinos::account_history::transaction_record* Arena::CreateMaybeMessage<::koinos::account_history::transaction_record>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace account_history {

// ===================================================================

class account_metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.account_history.account_metadata) */ {
 public:
  inline account_metadata() : account_metadata(nullptr) {}
  ~account_metadata() override;
  explicit constexpr account_metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  account_metadata(const account_metadata& from);
  account_metadata(account_metadata&& from) noexcept
    : account_metadata() {
    *this = ::std::move(from);
  }

  inline account_metadata& operator=(const account_metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline account_metadata& operator=(account_metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const account_metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const account_metadata* internal_default_instance() {
    return reinterpret_cast<const account_metadata*>(
               &_account_metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(account_metadata& a, account_metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(account_metadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(account_metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline account_metadata* New() const final {
    return new account_metadata();
  }

  account_metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<account_metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const account_metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const account_metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(account_metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.account_history.account_metadata";
  }
  protected:
  explicit account_metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqNumFieldNumber = 1,
  };
  // uint64 seq_num = 1;
  void clear_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num() const;
  void set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_num() const;
  void _internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.account_history.account_metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto;
};
// -------------------------------------------------------------------

class history_index final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.account_history.history_index) */ {
 public:
  inline history_index() : history_index(nullptr) {}
  ~history_index() override;
  explicit constexpr history_index(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  history_index(const history_index& from);
  history_index(history_index&& from) noexcept
    : history_index() {
    *this = ::std::move(from);
  }

  inline history_index& operator=(const history_index& from) {
    CopyFrom(from);
    return *this;
  }
  inline history_index& operator=(history_index&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const history_index& default_instance() {
    return *internal_default_instance();
  }
  static inline const history_index* internal_default_instance() {
    return reinterpret_cast<const history_index*>(
               &_history_index_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(history_index& a, history_index& b) {
    a.Swap(&b);
  }
  inline void Swap(history_index* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(history_index* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline history_index* New() const final {
    return new history_index();
  }

  history_index* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<history_index>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const history_index& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const history_index& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(history_index* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.account_history.history_index";
  }
  protected:
  explicit history_index(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSeqNumFieldNumber = 2,
  };
  // bytes address = 1 [(.koinos.btype) = ADDRESS];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint64 seq_num = 2;
  void clear_seq_num();
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num() const;
  void set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_seq_num() const;
  void _internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.account_history.history_index)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto;
};
// -------------------------------------------------------------------

class transaction_record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.account_history.transaction_record) */ {
 public:
  inline transaction_record() : transaction_record(nullptr) {}
  ~transaction_record() override;
  explicit constexpr transaction_record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transaction_record(const transaction_record& from);
  transaction_record(transaction_record&& from) noexcept
    : transaction_record() {
    *this = ::std::move(from);
  }

  inline transaction_record& operator=(const transaction_record& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_record& operator=(transaction_record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transaction_record& default_instance() {
    return *internal_default_instance();
  }
  static inline const transaction_record* internal_default_instance() {
    return reinterpret_cast<const transaction_record*>(
               &_transaction_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(transaction_record& a, transaction_record& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_record* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transaction_record* New() const final {
    return new transaction_record();
  }

  transaction_record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transaction_record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transaction_record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transaction_record& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.account_history.transaction_record";
  }
  protected:
  explicit transaction_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
    kReceiptFieldNumber = 2,
  };
  // .koinos.protocol.transaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::koinos::protocol::transaction& transaction() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::transaction* release_transaction();
  ::koinos::protocol::transaction* mutable_transaction();
  void set_allocated_transaction(::koinos::protocol::transaction* transaction);
  private:
  const ::koinos::protocol::transaction& _internal_transaction() const;
  ::koinos::protocol::transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::koinos::protocol::transaction* transaction);
  ::koinos::protocol::transaction* unsafe_arena_release_transaction();

  // .koinos.protocol.transaction_receipt receipt = 2;
  bool has_receipt() const;
  private:
  bool _internal_has_receipt() const;
  public:
  void clear_receipt();
  const ::koinos::protocol::transaction_receipt& receipt() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::transaction_receipt* release_receipt();
  ::koinos::protocol::transaction_receipt* mutable_receipt();
  void set_allocated_receipt(::koinos::protocol::transaction_receipt* receipt);
  private:
  const ::koinos::protocol::transaction_receipt& _internal_receipt() const;
  ::koinos::protocol::transaction_receipt* _internal_mutable_receipt();
  public:
  void unsafe_arena_set_allocated_receipt(
      ::koinos::protocol::transaction_receipt* receipt);
  ::koinos::protocol::transaction_receipt* unsafe_arena_release_receipt();

  // @@protoc_insertion_point(class_scope:koinos.account_history.transaction_record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::transaction* transaction_;
  ::koinos::protocol::transaction_receipt* receipt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto;
};
// -------------------------------------------------------------------

class block_record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.account_history.block_record) */ {
 public:
  inline block_record() : block_record(nullptr) {}
  ~block_record() override;
  explicit constexpr block_record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_record(const block_record& from);
  block_record(block_record&& from) noexcept
    : block_record() {
    *this = ::std::move(from);
  }

  inline block_record& operator=(const block_record& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_record& operator=(block_record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_record& default_instance() {
    return *internal_default_instance();
  }
  static inline const block_record* internal_default_instance() {
    return reinterpret_cast<const block_record*>(
               &_block_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(block_record& a, block_record& b) {
    a.Swap(&b);
  }
  inline void Swap(block_record* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_record* New() const final {
    return new block_record();
  }

  block_record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_record& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.account_history.block_record";
  }
  protected:
  explicit block_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kReceiptFieldNumber = 2,
  };
  // .koinos.protocol.block_header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::koinos::protocol::block_header& header() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::block_header* release_header();
  ::koinos::protocol::block_header* mutable_header();
  void set_allocated_header(::koinos::protocol::block_header* header);
  private:
  const ::koinos::protocol::block_header& _internal_header() const;
  ::koinos::protocol::block_header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::koinos::protocol::block_header* header);
  ::koinos::protocol::block_header* unsafe_arena_release_header();

  // .koinos.protocol.block_receipt receipt = 2;
  bool has_receipt() const;
  private:
  bool _internal_has_receipt() const;
  public:
  void clear_receipt();
  const ::koinos::protocol::block_receipt& receipt() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::block_receipt* release_receipt();
  ::koinos::protocol::block_receipt* mutable_receipt();
  void set_allocated_receipt(::koinos::protocol::block_receipt* receipt);
  private:
  const ::koinos::protocol::block_receipt& _internal_receipt() const;
  ::koinos::protocol::block_receipt* _internal_mutable_receipt();
  public:
  void unsafe_arena_set_allocated_receipt(
      ::koinos::protocol::block_receipt* receipt);
  ::koinos::protocol::block_receipt* unsafe_arena_release_receipt();

  // @@protoc_insertion_point(class_scope:koinos.account_history.block_record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::block_header* header_;
  ::koinos::protocol::block_receipt* receipt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto;
};
// -------------------------------------------------------------------

class history_record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.account_history.history_record) */ {
 public:
  inline history_record() : history_record(nullptr) {}
  ~history_record() override;
  explicit constexpr history_record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  history_record(const history_record& from);
  history_record(history_record&& from) noexcept
    : history_record() {
    *this = ::std::move(from);
  }

  inline history_record& operator=(const history_record& from) {
    CopyFrom(from);
    return *this;
  }
  inline history_record& operator=(history_record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const history_record& default_instance() {
    return *internal_default_instance();
  }
  enum RecordCase {
    kTrx = 1,
    kBlock = 2,
    RECORD_NOT_SET = 0,
  };

  static inline const history_record* internal_default_instance() {
    return reinterpret_cast<const history_record*>(
               &_history_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(history_record& a, history_record& b) {
    a.Swap(&b);
  }
  inline void Swap(history_record* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(history_record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline history_record* New() const final {
    return new history_record();
  }

  history_record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<history_record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const history_record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const history_record& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(history_record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.account_history.history_record";
  }
  protected:
  explicit history_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrxFieldNumber = 1,
    kBlockFieldNumber = 2,
  };
  // .koinos.account_history.transaction_record trx = 1;
  bool has_trx() const;
  private:
  bool _internal_has_trx() const;
  public:
  void clear_trx();
  const ::koinos::account_history::transaction_record& trx() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::account_history::transaction_record* release_trx();
  ::koinos::account_history::transaction_record* mutable_trx();
  void set_allocated_trx(::koinos::account_history::transaction_record* trx);
  private:
  const ::koinos::account_history::transaction_record& _internal_trx() const;
  ::koinos::account_history::transaction_record* _internal_mutable_trx();
  public:
  void unsafe_arena_set_allocated_trx(
      ::koinos::account_history::transaction_record* trx);
  ::koinos::account_history::transaction_record* unsafe_arena_release_trx();

  // .koinos.account_history.block_record block = 2;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::koinos::account_history::block_record& block() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::account_history::block_record* release_block();
  ::koinos::account_history::block_record* mutable_block();
  void set_allocated_block(::koinos::account_history::block_record* block);
  private:
  const ::koinos::account_history::block_record& _internal_block() const;
  ::koinos::account_history::block_record* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::koinos::account_history::block_record* block);
  ::koinos::account_history::block_record* unsafe_arena_release_block();

  void clear_record();
  RecordCase record_case() const;
  // @@protoc_insertion_point(class_scope:koinos.account_history.history_record)
 private:
  class _Internal;
  void set_has_trx();
  void set_has_block();

  inline bool has_record() const;
  inline void clear_has_record();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RecordUnion {
    constexpr RecordUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::account_history::transaction_record* trx_;
    ::koinos::account_history::block_record* block_;
  } record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// account_metadata

// uint64 seq_num = 1;
inline void account_metadata::clear_seq_num() {
  seq_num_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 account_metadata::_internal_seq_num() const {
  return seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 account_metadata::seq_num() const {
  // @@protoc_insertion_point(field_get:koinos.account_history.account_metadata.seq_num)
  return _internal_seq_num();
}
inline void account_metadata::_internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_num_ = value;
}
inline void account_metadata::set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:koinos.account_history.account_metadata.seq_num)
}

// -------------------------------------------------------------------

// history_index

// bytes address = 1 [(.koinos.btype) = ADDRESS];
inline void history_index::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& history_index::address() const {
  // @@protoc_insertion_point(field_get:koinos.account_history.history_index.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void history_index::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.account_history.history_index.address)
}
inline std::string* history_index::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:koinos.account_history.history_index.address)
  return _s;
}
inline const std::string& history_index::_internal_address() const {
  return address_.Get();
}
inline void history_index::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* history_index::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* history_index::release_address() {
  // @@protoc_insertion_point(field_release:koinos.account_history.history_index.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void history_index::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.account_history.history_index.address)
}

// uint64 seq_num = 2;
inline void history_index::clear_seq_num() {
  seq_num_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 history_index::_internal_seq_num() const {
  return seq_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 history_index::seq_num() const {
  // @@protoc_insertion_point(field_get:koinos.account_history.history_index.seq_num)
  return _internal_seq_num();
}
inline void history_index::_internal_set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  seq_num_ = value;
}
inline void history_index::set_seq_num(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_seq_num(value);
  // @@protoc_insertion_point(field_set:koinos.account_history.history_index.seq_num)
}

// -------------------------------------------------------------------

// transaction_record

// .koinos.protocol.transaction transaction = 1;
inline bool transaction_record::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool transaction_record::has_transaction() const {
  return _internal_has_transaction();
}
inline const ::koinos::protocol::transaction& transaction_record::_internal_transaction() const {
  const ::koinos::protocol::transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::transaction&>(
      ::koinos::protocol::_transaction_default_instance_);
}
inline const ::koinos::protocol::transaction& transaction_record::transaction() const {
  // @@protoc_insertion_point(field_get:koinos.account_history.transaction_record.transaction)
  return _internal_transaction();
}
inline void transaction_record::unsafe_arena_set_allocated_transaction(
    ::koinos::protocol::transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.account_history.transaction_record.transaction)
}
inline ::koinos::protocol::transaction* transaction_record::release_transaction() {
  
  ::koinos::protocol::transaction* temp = transaction_;
  transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::transaction* transaction_record::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:koinos.account_history.transaction_record.transaction)
  
  ::koinos::protocol::transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::koinos::protocol::transaction* transaction_record::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::transaction>(GetArenaForAllocation());
    transaction_ = p;
  }
  return transaction_;
}
inline ::koinos::protocol::transaction* transaction_record::mutable_transaction() {
  ::koinos::protocol::transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:koinos.account_history.transaction_record.transaction)
  return _msg;
}
inline void transaction_record::set_allocated_transaction(::koinos::protocol::transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction));
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:koinos.account_history.transaction_record.transaction)
}

// .koinos.protocol.transaction_receipt receipt = 2;
inline bool transaction_record::_internal_has_receipt() const {
  return this != internal_default_instance() && receipt_ != nullptr;
}
inline bool transaction_record::has_receipt() const {
  return _internal_has_receipt();
}
inline const ::koinos::protocol::transaction_receipt& transaction_record::_internal_receipt() const {
  const ::koinos::protocol::transaction_receipt* p = receipt_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::transaction_receipt&>(
      ::koinos::protocol::_transaction_receipt_default_instance_);
}
inline const ::koinos::protocol::transaction_receipt& transaction_record::receipt() const {
  // @@protoc_insertion_point(field_get:koinos.account_history.transaction_record.receipt)
  return _internal_receipt();
}
inline void transaction_record::unsafe_arena_set_allocated_receipt(
    ::koinos::protocol::transaction_receipt* receipt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  receipt_ = receipt;
  if (receipt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.account_history.transaction_record.receipt)
}
inline ::koinos::protocol::transaction_receipt* transaction_record::release_receipt() {
  
  ::koinos::protocol::transaction_receipt* temp = receipt_;
  receipt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::transaction_receipt* transaction_record::unsafe_arena_release_receipt() {
  // @@protoc_insertion_point(field_release:koinos.account_history.transaction_record.receipt)
  
  ::koinos::protocol::transaction_receipt* temp = receipt_;
  receipt_ = nullptr;
  return temp;
}
inline ::koinos::protocol::transaction_receipt* transaction_record::_internal_mutable_receipt() {
  
  if (receipt_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::transaction_receipt>(GetArenaForAllocation());
    receipt_ = p;
  }
  return receipt_;
}
inline ::koinos::protocol::transaction_receipt* transaction_record::mutable_receipt() {
  ::koinos::protocol::transaction_receipt* _msg = _internal_mutable_receipt();
  // @@protoc_insertion_point(field_mutable:koinos.account_history.transaction_record.receipt)
  return _msg;
}
inline void transaction_record::set_allocated_receipt(::koinos::protocol::transaction_receipt* receipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  if (receipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt));
    if (message_arena != submessage_arena) {
      receipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receipt, submessage_arena);
    }
    
  } else {
    
  }
  receipt_ = receipt;
  // @@protoc_insertion_point(field_set_allocated:koinos.account_history.transaction_record.receipt)
}

// -------------------------------------------------------------------

// block_record

// .koinos.protocol.block_header header = 1;
inline bool block_record::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool block_record::has_header() const {
  return _internal_has_header();
}
inline const ::koinos::protocol::block_header& block_record::_internal_header() const {
  const ::koinos::protocol::block_header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block_header&>(
      ::koinos::protocol::_block_header_default_instance_);
}
inline const ::koinos::protocol::block_header& block_record::header() const {
  // @@protoc_insertion_point(field_get:koinos.account_history.block_record.header)
  return _internal_header();
}
inline void block_record::unsafe_arena_set_allocated_header(
    ::koinos::protocol::block_header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.account_history.block_record.header)
}
inline ::koinos::protocol::block_header* block_record::release_header() {
  
  ::koinos::protocol::block_header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::block_header* block_record::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:koinos.account_history.block_record.header)
  
  ::koinos::protocol::block_header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block_header* block_record::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block_header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::koinos::protocol::block_header* block_record::mutable_header() {
  ::koinos::protocol::block_header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:koinos.account_history.block_record.header)
  return _msg;
}
inline void block_record::set_allocated_header(::koinos::protocol::block_header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:koinos.account_history.block_record.header)
}

// .koinos.protocol.block_receipt receipt = 2;
inline bool block_record::_internal_has_receipt() const {
  return this != internal_default_instance() && receipt_ != nullptr;
}
inline bool block_record::has_receipt() const {
  return _internal_has_receipt();
}
inline const ::koinos::protocol::block_receipt& block_record::_internal_receipt() const {
  const ::koinos::protocol::block_receipt* p = receipt_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block_receipt&>(
      ::koinos::protocol::_block_receipt_default_instance_);
}
inline const ::koinos::protocol::block_receipt& block_record::receipt() const {
  // @@protoc_insertion_point(field_get:koinos.account_history.block_record.receipt)
  return _internal_receipt();
}
inline void block_record::unsafe_arena_set_allocated_receipt(
    ::koinos::protocol::block_receipt* receipt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  receipt_ = receipt;
  if (receipt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.account_history.block_record.receipt)
}
inline ::koinos::protocol::block_receipt* block_record::release_receipt() {
  
  ::koinos::protocol::block_receipt* temp = receipt_;
  receipt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::block_receipt* block_record::unsafe_arena_release_receipt() {
  // @@protoc_insertion_point(field_release:koinos.account_history.block_record.receipt)
  
  ::koinos::protocol::block_receipt* temp = receipt_;
  receipt_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block_receipt* block_record::_internal_mutable_receipt() {
  
  if (receipt_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block_receipt>(GetArenaForAllocation());
    receipt_ = p;
  }
  return receipt_;
}
inline ::koinos::protocol::block_receipt* block_record::mutable_receipt() {
  ::koinos::protocol::block_receipt* _msg = _internal_mutable_receipt();
  // @@protoc_insertion_point(field_mutable:koinos.account_history.block_record.receipt)
  return _msg;
}
inline void block_record::set_allocated_receipt(::koinos::protocol::block_receipt* receipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  if (receipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt));
    if (message_arena != submessage_arena) {
      receipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receipt, submessage_arena);
    }
    
  } else {
    
  }
  receipt_ = receipt;
  // @@protoc_insertion_point(field_set_allocated:koinos.account_history.block_record.receipt)
}

// -------------------------------------------------------------------

// history_record

// .koinos.account_history.transaction_record trx = 1;
inline bool history_record::_internal_has_trx() const {
  return record_case() == kTrx;
}
inline bool history_record::has_trx() const {
  return _internal_has_trx();
}
inline void history_record::set_has_trx() {
  _oneof_case_[0] = kTrx;
}
inline void history_record::clear_trx() {
  if (_internal_has_trx()) {
    if (GetArenaForAllocation() == nullptr) {
      delete record_.trx_;
    }
    clear_has_record();
  }
}
inline ::koinos::account_history::transaction_record* history_record::release_trx() {
  // @@protoc_insertion_point(field_release:koinos.account_history.history_record.trx)
  if (_internal_has_trx()) {
    clear_has_record();
      ::koinos::account_history::transaction_record* temp = record_.trx_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    record_.trx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::account_history::transaction_record& history_record::_internal_trx() const {
  return _internal_has_trx()
      ? *record_.trx_
      : reinterpret_cast< ::koinos::account_history::transaction_record&>(::koinos::account_history::_transaction_record_default_instance_);
}
inline const ::koinos::account_history::transaction_record& history_record::trx() const {
  // @@protoc_insertion_point(field_get:koinos.account_history.history_record.trx)
  return _internal_trx();
}
inline ::koinos::account_history::transaction_record* history_record::unsafe_arena_release_trx() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.account_history.history_record.trx)
  if (_internal_has_trx()) {
    clear_has_record();
    ::koinos::account_history::transaction_record* temp = record_.trx_;
    record_.trx_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void history_record::unsafe_arena_set_allocated_trx(::koinos::account_history::transaction_record* trx) {
  clear_record();
  if (trx) {
    set_has_trx();
    record_.trx_ = trx;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.account_history.history_record.trx)
}
inline ::koinos::account_history::transaction_record* history_record::_internal_mutable_trx() {
  if (!_internal_has_trx()) {
    clear_record();
    set_has_trx();
    record_.trx_ = CreateMaybeMessage< ::koinos::account_history::transaction_record >(GetArenaForAllocation());
  }
  return record_.trx_;
}
inline ::koinos::account_history::transaction_record* history_record::mutable_trx() {
  ::koinos::account_history::transaction_record* _msg = _internal_mutable_trx();
  // @@protoc_insertion_point(field_mutable:koinos.account_history.history_record.trx)
  return _msg;
}

// .koinos.account_history.block_record block = 2;
inline bool history_record::_internal_has_block() const {
  return record_case() == kBlock;
}
inline bool history_record::has_block() const {
  return _internal_has_block();
}
inline void history_record::set_has_block() {
  _oneof_case_[0] = kBlock;
}
inline void history_record::clear_block() {
  if (_internal_has_block()) {
    if (GetArenaForAllocation() == nullptr) {
      delete record_.block_;
    }
    clear_has_record();
  }
}
inline ::koinos::account_history::block_record* history_record::release_block() {
  // @@protoc_insertion_point(field_release:koinos.account_history.history_record.block)
  if (_internal_has_block()) {
    clear_has_record();
      ::koinos::account_history::block_record* temp = record_.block_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    record_.block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::account_history::block_record& history_record::_internal_block() const {
  return _internal_has_block()
      ? *record_.block_
      : reinterpret_cast< ::koinos::account_history::block_record&>(::koinos::account_history::_block_record_default_instance_);
}
inline const ::koinos::account_history::block_record& history_record::block() const {
  // @@protoc_insertion_point(field_get:koinos.account_history.history_record.block)
  return _internal_block();
}
inline ::koinos::account_history::block_record* history_record::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.account_history.history_record.block)
  if (_internal_has_block()) {
    clear_has_record();
    ::koinos::account_history::block_record* temp = record_.block_;
    record_.block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void history_record::unsafe_arena_set_allocated_block(::koinos::account_history::block_record* block) {
  clear_record();
  if (block) {
    set_has_block();
    record_.block_ = block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.account_history.history_record.block)
}
inline ::koinos::account_history::block_record* history_record::_internal_mutable_block() {
  if (!_internal_has_block()) {
    clear_record();
    set_has_block();
    record_.block_ = CreateMaybeMessage< ::koinos::account_history::block_record >(GetArenaForAllocation());
  }
  return record_.block_;
}
inline ::koinos::account_history::block_record* history_record::mutable_block() {
  ::koinos::account_history::block_record* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:koinos.account_history.history_record.block)
  return _msg;
}

inline bool history_record::has_record() const {
  return record_case() != RECORD_NOT_SET;
}
inline void history_record::clear_has_record() {
  _oneof_case_[0] = RECORD_NOT_SET;
}
inline history_record::RecordCase history_record::record_case() const {
  return history_record::RecordCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace account_history
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto
