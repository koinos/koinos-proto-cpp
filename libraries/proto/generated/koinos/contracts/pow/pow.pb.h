// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/contracts/pow/pow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fpow_2fpow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fpow_2fpow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fcontracts_2fpow_2fpow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fcontracts_2fpow_2fpow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fcontracts_2fpow_2fpow_2eproto;
namespace koinos {
namespace contracts {
namespace pow {
class difficulty_metadata;
struct difficulty_metadataDefaultTypeInternal;
extern difficulty_metadataDefaultTypeInternal _difficulty_metadata_default_instance_;
class pow_signature_data;
struct pow_signature_dataDefaultTypeInternal;
extern pow_signature_dataDefaultTypeInternal _pow_signature_data_default_instance_;
}  // namespace pow
}  // namespace contracts
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::contracts::pow::difficulty_metadata* Arena::CreateMaybeMessage<::koinos::contracts::pow::difficulty_metadata>(Arena*);
template<> ::koinos::contracts::pow::pow_signature_data* Arena::CreateMaybeMessage<::koinos::contracts::pow::pow_signature_data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace contracts {
namespace pow {

// ===================================================================

class difficulty_metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.pow.difficulty_metadata) */ {
 public:
  inline difficulty_metadata() : difficulty_metadata(nullptr) {}
  ~difficulty_metadata() override;
  explicit constexpr difficulty_metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  difficulty_metadata(const difficulty_metadata& from);
  difficulty_metadata(difficulty_metadata&& from) noexcept
    : difficulty_metadata() {
    *this = ::std::move(from);
  }

  inline difficulty_metadata& operator=(const difficulty_metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline difficulty_metadata& operator=(difficulty_metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const difficulty_metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const difficulty_metadata* internal_default_instance() {
    return reinterpret_cast<const difficulty_metadata*>(
               &_difficulty_metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(difficulty_metadata& a, difficulty_metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(difficulty_metadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(difficulty_metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline difficulty_metadata* New() const final {
    return new difficulty_metadata();
  }

  difficulty_metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<difficulty_metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const difficulty_metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const difficulty_metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(difficulty_metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.pow.difficulty_metadata";
  }
  protected:
  explicit difficulty_metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kDifficultyFieldNumber = 3,
    kLastBlockTimeFieldNumber = 2,
    kTargetBlockIntervalFieldNumber = 4,
  };
  // bytes target = 1;
  void clear_target();
  const std::string& target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target();
  PROTOBUF_MUST_USE_RESULT std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // bytes difficulty = 3;
  void clear_difficulty();
  const std::string& difficulty() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_difficulty(ArgT0&& arg0, ArgT... args);
  std::string* mutable_difficulty();
  PROTOBUF_MUST_USE_RESULT std::string* release_difficulty();
  void set_allocated_difficulty(std::string* difficulty);
  private:
  const std::string& _internal_difficulty() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_difficulty(const std::string& value);
  std::string* _internal_mutable_difficulty();
  public:

  // uint64 last_block_time = 2 [jstype = JS_STRING];
  void clear_last_block_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_block_time() const;
  void set_last_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_block_time() const;
  void _internal_set_last_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 target_block_interval = 4 [jstype = JS_STRING];
  void clear_target_block_interval();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_block_interval() const;
  void set_target_block_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_block_interval() const;
  void _internal_set_target_block_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.pow.difficulty_metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr difficulty_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_block_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_block_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fpow_2fpow_2eproto;
};
// -------------------------------------------------------------------

class pow_signature_data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.pow.pow_signature_data) */ {
 public:
  inline pow_signature_data() : pow_signature_data(nullptr) {}
  ~pow_signature_data() override;
  explicit constexpr pow_signature_data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pow_signature_data(const pow_signature_data& from);
  pow_signature_data(pow_signature_data&& from) noexcept
    : pow_signature_data() {
    *this = ::std::move(from);
  }

  inline pow_signature_data& operator=(const pow_signature_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline pow_signature_data& operator=(pow_signature_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pow_signature_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const pow_signature_data* internal_default_instance() {
    return reinterpret_cast<const pow_signature_data*>(
               &_pow_signature_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(pow_signature_data& a, pow_signature_data& b) {
    a.Swap(&b);
  }
  inline void Swap(pow_signature_data* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pow_signature_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pow_signature_data* New() const final {
    return new pow_signature_data();
  }

  pow_signature_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pow_signature_data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pow_signature_data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const pow_signature_data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pow_signature_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.pow.pow_signature_data";
  }
  protected:
  explicit pow_signature_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceFieldNumber = 1,
    kRecoverableSignatureFieldNumber = 2,
  };
  // bytes nonce = 1;
  void clear_nonce();
  const std::string& nonce() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nonce(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nonce();
  PROTOBUF_MUST_USE_RESULT std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes recoverable_signature = 2;
  void clear_recoverable_signature();
  const std::string& recoverable_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recoverable_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recoverable_signature();
  PROTOBUF_MUST_USE_RESULT std::string* release_recoverable_signature();
  void set_allocated_recoverable_signature(std::string* recoverable_signature);
  private:
  const std::string& _internal_recoverable_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recoverable_signature(const std::string& value);
  std::string* _internal_mutable_recoverable_signature();
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.pow.pow_signature_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recoverable_signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fpow_2fpow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// difficulty_metadata

// bytes target = 1;
inline void difficulty_metadata::clear_target() {
  target_.ClearToEmpty();
}
inline const std::string& difficulty_metadata::target() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pow.difficulty_metadata.target)
  return _internal_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void difficulty_metadata::set_target(ArgT0&& arg0, ArgT... args) {
 
 target_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pow.difficulty_metadata.target)
}
inline std::string* difficulty_metadata::mutable_target() {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pow.difficulty_metadata.target)
  return _s;
}
inline const std::string& difficulty_metadata::_internal_target() const {
  return target_.Get();
}
inline void difficulty_metadata::_internal_set_target(const std::string& value) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* difficulty_metadata::_internal_mutable_target() {
  
  return target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* difficulty_metadata::release_target() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pow.difficulty_metadata.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void difficulty_metadata::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pow.difficulty_metadata.target)
}

// uint64 last_block_time = 2 [jstype = JS_STRING];
inline void difficulty_metadata::clear_last_block_time() {
  last_block_time_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 difficulty_metadata::_internal_last_block_time() const {
  return last_block_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 difficulty_metadata::last_block_time() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pow.difficulty_metadata.last_block_time)
  return _internal_last_block_time();
}
inline void difficulty_metadata::_internal_set_last_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_block_time_ = value;
}
inline void difficulty_metadata::set_last_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_block_time(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.pow.difficulty_metadata.last_block_time)
}

// bytes difficulty = 3;
inline void difficulty_metadata::clear_difficulty() {
  difficulty_.ClearToEmpty();
}
inline const std::string& difficulty_metadata::difficulty() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pow.difficulty_metadata.difficulty)
  return _internal_difficulty();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void difficulty_metadata::set_difficulty(ArgT0&& arg0, ArgT... args) {
 
 difficulty_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pow.difficulty_metadata.difficulty)
}
inline std::string* difficulty_metadata::mutable_difficulty() {
  std::string* _s = _internal_mutable_difficulty();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pow.difficulty_metadata.difficulty)
  return _s;
}
inline const std::string& difficulty_metadata::_internal_difficulty() const {
  return difficulty_.Get();
}
inline void difficulty_metadata::_internal_set_difficulty(const std::string& value) {
  
  difficulty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* difficulty_metadata::_internal_mutable_difficulty() {
  
  return difficulty_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* difficulty_metadata::release_difficulty() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pow.difficulty_metadata.difficulty)
  return difficulty_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void difficulty_metadata::set_allocated_difficulty(std::string* difficulty) {
  if (difficulty != nullptr) {
    
  } else {
    
  }
  difficulty_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), difficulty,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pow.difficulty_metadata.difficulty)
}

// uint64 target_block_interval = 4 [jstype = JS_STRING];
inline void difficulty_metadata::clear_target_block_interval() {
  target_block_interval_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 difficulty_metadata::_internal_target_block_interval() const {
  return target_block_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 difficulty_metadata::target_block_interval() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pow.difficulty_metadata.target_block_interval)
  return _internal_target_block_interval();
}
inline void difficulty_metadata::_internal_set_target_block_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  target_block_interval_ = value;
}
inline void difficulty_metadata::set_target_block_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_block_interval(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.pow.difficulty_metadata.target_block_interval)
}

// -------------------------------------------------------------------

// pow_signature_data

// bytes nonce = 1;
inline void pow_signature_data::clear_nonce() {
  nonce_.ClearToEmpty();
}
inline const std::string& pow_signature_data::nonce() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pow.pow_signature_data.nonce)
  return _internal_nonce();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pow_signature_data::set_nonce(ArgT0&& arg0, ArgT... args) {
 
 nonce_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pow.pow_signature_data.nonce)
}
inline std::string* pow_signature_data::mutable_nonce() {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pow.pow_signature_data.nonce)
  return _s;
}
inline const std::string& pow_signature_data::_internal_nonce() const {
  return nonce_.Get();
}
inline void pow_signature_data::_internal_set_nonce(const std::string& value) {
  
  nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* pow_signature_data::_internal_mutable_nonce() {
  
  return nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* pow_signature_data::release_nonce() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pow.pow_signature_data.nonce)
  return nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void pow_signature_data::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pow.pow_signature_data.nonce)
}

// bytes recoverable_signature = 2;
inline void pow_signature_data::clear_recoverable_signature() {
  recoverable_signature_.ClearToEmpty();
}
inline const std::string& pow_signature_data::recoverable_signature() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pow.pow_signature_data.recoverable_signature)
  return _internal_recoverable_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pow_signature_data::set_recoverable_signature(ArgT0&& arg0, ArgT... args) {
 
 recoverable_signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pow.pow_signature_data.recoverable_signature)
}
inline std::string* pow_signature_data::mutable_recoverable_signature() {
  std::string* _s = _internal_mutable_recoverable_signature();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pow.pow_signature_data.recoverable_signature)
  return _s;
}
inline const std::string& pow_signature_data::_internal_recoverable_signature() const {
  return recoverable_signature_.Get();
}
inline void pow_signature_data::_internal_set_recoverable_signature(const std::string& value) {
  
  recoverable_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* pow_signature_data::_internal_mutable_recoverable_signature() {
  
  return recoverable_signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* pow_signature_data::release_recoverable_signature() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pow.pow_signature_data.recoverable_signature)
  return recoverable_signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void pow_signature_data::set_allocated_recoverable_signature(std::string* recoverable_signature) {
  if (recoverable_signature != nullptr) {
    
  } else {
    
  }
  recoverable_signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recoverable_signature,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pow.pow_signature_data.recoverable_signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pow
}  // namespace contracts
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fpow_2fpow_2eproto
