// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/block_store/rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fblock_5fstore_2frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fblock_5fstore_2frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/block_store/block_store.pb.h"
#include "koinos/options.pb.h"
#include "koinos/common.pb.h"
#include "koinos/protocol/protocol.pb.h"
#include "koinos/rpc.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fblock_5fstore_2frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fblock_5fstore_2frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fblock_5fstore_2frpc_2eproto;
namespace koinos {
namespace block_store {
class add_block_request;
struct add_block_requestDefaultTypeInternal;
extern add_block_requestDefaultTypeInternal _add_block_request_default_instance_;
class add_block_response;
struct add_block_responseDefaultTypeInternal;
extern add_block_responseDefaultTypeInternal _add_block_response_default_instance_;
class block_store_request;
struct block_store_requestDefaultTypeInternal;
extern block_store_requestDefaultTypeInternal _block_store_request_default_instance_;
class block_store_response;
struct block_store_responseDefaultTypeInternal;
extern block_store_responseDefaultTypeInternal _block_store_response_default_instance_;
class get_blocks_by_height_request;
struct get_blocks_by_height_requestDefaultTypeInternal;
extern get_blocks_by_height_requestDefaultTypeInternal _get_blocks_by_height_request_default_instance_;
class get_blocks_by_height_response;
struct get_blocks_by_height_responseDefaultTypeInternal;
extern get_blocks_by_height_responseDefaultTypeInternal _get_blocks_by_height_response_default_instance_;
class get_blocks_by_id_request;
struct get_blocks_by_id_requestDefaultTypeInternal;
extern get_blocks_by_id_requestDefaultTypeInternal _get_blocks_by_id_request_default_instance_;
class get_blocks_by_id_response;
struct get_blocks_by_id_responseDefaultTypeInternal;
extern get_blocks_by_id_responseDefaultTypeInternal _get_blocks_by_id_response_default_instance_;
class get_highest_block_request;
struct get_highest_block_requestDefaultTypeInternal;
extern get_highest_block_requestDefaultTypeInternal _get_highest_block_request_default_instance_;
class get_highest_block_response;
struct get_highest_block_responseDefaultTypeInternal;
extern get_highest_block_responseDefaultTypeInternal _get_highest_block_response_default_instance_;
}  // namespace block_store
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::block_store::add_block_request* Arena::CreateMaybeMessage<::koinos::block_store::add_block_request>(Arena*);
template<> ::koinos::block_store::add_block_response* Arena::CreateMaybeMessage<::koinos::block_store::add_block_response>(Arena*);
template<> ::koinos::block_store::block_store_request* Arena::CreateMaybeMessage<::koinos::block_store::block_store_request>(Arena*);
template<> ::koinos::block_store::block_store_response* Arena::CreateMaybeMessage<::koinos::block_store::block_store_response>(Arena*);
template<> ::koinos::block_store::get_blocks_by_height_request* Arena::CreateMaybeMessage<::koinos::block_store::get_blocks_by_height_request>(Arena*);
template<> ::koinos::block_store::get_blocks_by_height_response* Arena::CreateMaybeMessage<::koinos::block_store::get_blocks_by_height_response>(Arena*);
template<> ::koinos::block_store::get_blocks_by_id_request* Arena::CreateMaybeMessage<::koinos::block_store::get_blocks_by_id_request>(Arena*);
template<> ::koinos::block_store::get_blocks_by_id_response* Arena::CreateMaybeMessage<::koinos::block_store::get_blocks_by_id_response>(Arena*);
template<> ::koinos::block_store::get_highest_block_request* Arena::CreateMaybeMessage<::koinos::block_store::get_highest_block_request>(Arena*);
template<> ::koinos::block_store::get_highest_block_response* Arena::CreateMaybeMessage<::koinos::block_store::get_highest_block_response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace block_store {

// ===================================================================

class get_blocks_by_id_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.block_store.get_blocks_by_id_request) */ {
 public:
  inline get_blocks_by_id_request() : get_blocks_by_id_request(nullptr) {}
  ~get_blocks_by_id_request() override;
  explicit constexpr get_blocks_by_id_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_blocks_by_id_request(const get_blocks_by_id_request& from);
  get_blocks_by_id_request(get_blocks_by_id_request&& from) noexcept
    : get_blocks_by_id_request() {
    *this = ::std::move(from);
  }

  inline get_blocks_by_id_request& operator=(const get_blocks_by_id_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_blocks_by_id_request& operator=(get_blocks_by_id_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_blocks_by_id_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_blocks_by_id_request* internal_default_instance() {
    return reinterpret_cast<const get_blocks_by_id_request*>(
               &_get_blocks_by_id_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(get_blocks_by_id_request& a, get_blocks_by_id_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_blocks_by_id_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_blocks_by_id_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_blocks_by_id_request* New() const final {
    return new get_blocks_by_id_request();
  }

  get_blocks_by_id_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_blocks_by_id_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_blocks_by_id_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_blocks_by_id_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_blocks_by_id_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.block_store.get_blocks_by_id_request";
  }
  protected:
  explicit get_blocks_by_id_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdsFieldNumber = 1,
    kReturnBlockFieldNumber = 2,
    kReturnReceiptFieldNumber = 3,
  };
  // repeated bytes block_ids = 1 [(.koinos.btype) = BLOCK_ID];
  int block_ids_size() const;
  private:
  int _internal_block_ids_size() const;
  public:
  void clear_block_ids();
  const std::string& block_ids(int index) const;
  std::string* mutable_block_ids(int index);
  void set_block_ids(int index, const std::string& value);
  void set_block_ids(int index, std::string&& value);
  void set_block_ids(int index, const char* value);
  void set_block_ids(int index, const void* value, size_t size);
  std::string* add_block_ids();
  void add_block_ids(const std::string& value);
  void add_block_ids(std::string&& value);
  void add_block_ids(const char* value);
  void add_block_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& block_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_block_ids();
  private:
  const std::string& _internal_block_ids(int index) const;
  std::string* _internal_add_block_ids();
  public:

  // bool return_block = 2;
  void clear_return_block();
  bool return_block() const;
  void set_return_block(bool value);
  private:
  bool _internal_return_block() const;
  void _internal_set_return_block(bool value);
  public:

  // bool return_receipt = 3;
  void clear_return_receipt();
  bool return_receipt() const;
  void set_return_receipt(bool value);
  private:
  bool _internal_return_receipt() const;
  void _internal_set_return_receipt(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.block_store.get_blocks_by_id_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> block_ids_;
  bool return_block_;
  bool return_receipt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fblock_5fstore_2frpc_2eproto;
};
// -------------------------------------------------------------------

class get_blocks_by_id_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.block_store.get_blocks_by_id_response) */ {
 public:
  inline get_blocks_by_id_response() : get_blocks_by_id_response(nullptr) {}
  ~get_blocks_by_id_response() override;
  explicit constexpr get_blocks_by_id_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_blocks_by_id_response(const get_blocks_by_id_response& from);
  get_blocks_by_id_response(get_blocks_by_id_response&& from) noexcept
    : get_blocks_by_id_response() {
    *this = ::std::move(from);
  }

  inline get_blocks_by_id_response& operator=(const get_blocks_by_id_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_blocks_by_id_response& operator=(get_blocks_by_id_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_blocks_by_id_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_blocks_by_id_response* internal_default_instance() {
    return reinterpret_cast<const get_blocks_by_id_response*>(
               &_get_blocks_by_id_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(get_blocks_by_id_response& a, get_blocks_by_id_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_blocks_by_id_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_blocks_by_id_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_blocks_by_id_response* New() const final {
    return new get_blocks_by_id_response();
  }

  get_blocks_by_id_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_blocks_by_id_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_blocks_by_id_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_blocks_by_id_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_blocks_by_id_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.block_store.get_blocks_by_id_response";
  }
  protected:
  explicit get_blocks_by_id_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockItemsFieldNumber = 1,
  };
  // repeated .koinos.block_store.block_item block_items = 1;
  int block_items_size() const;
  private:
  int _internal_block_items_size() const;
  public:
  void clear_block_items();
  ::koinos::block_store::block_item* mutable_block_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_store::block_item >*
      mutable_block_items();
  private:
  const ::koinos::block_store::block_item& _internal_block_items(int index) const;
  ::koinos::block_store::block_item* _internal_add_block_items();
  public:
  const ::koinos::block_store::block_item& block_items(int index) const;
  ::koinos::block_store::block_item* add_block_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_store::block_item >&
      block_items() const;

  // @@protoc_insertion_point(class_scope:koinos.block_store.get_blocks_by_id_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_store::block_item > block_items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fblock_5fstore_2frpc_2eproto;
};
// -------------------------------------------------------------------

class get_blocks_by_height_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.block_store.get_blocks_by_height_request) */ {
 public:
  inline get_blocks_by_height_request() : get_blocks_by_height_request(nullptr) {}
  ~get_blocks_by_height_request() override;
  explicit constexpr get_blocks_by_height_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_blocks_by_height_request(const get_blocks_by_height_request& from);
  get_blocks_by_height_request(get_blocks_by_height_request&& from) noexcept
    : get_blocks_by_height_request() {
    *this = ::std::move(from);
  }

  inline get_blocks_by_height_request& operator=(const get_blocks_by_height_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_blocks_by_height_request& operator=(get_blocks_by_height_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_blocks_by_height_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_blocks_by_height_request* internal_default_instance() {
    return reinterpret_cast<const get_blocks_by_height_request*>(
               &_get_blocks_by_height_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(get_blocks_by_height_request& a, get_blocks_by_height_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_blocks_by_height_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_blocks_by_height_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_blocks_by_height_request* New() const final {
    return new get_blocks_by_height_request();
  }

  get_blocks_by_height_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_blocks_by_height_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_blocks_by_height_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_blocks_by_height_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_blocks_by_height_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.block_store.get_blocks_by_height_request";
  }
  protected:
  explicit get_blocks_by_height_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadBlockIdFieldNumber = 1,
    kAncestorStartHeightFieldNumber = 2,
    kNumBlocksFieldNumber = 3,
    kReturnBlockFieldNumber = 4,
    kReturnReceiptFieldNumber = 5,
  };
  // bytes head_block_id = 1 [(.koinos.btype) = BLOCK_ID];
  void clear_head_block_id();
  const std::string& head_block_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_head_block_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_head_block_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_head_block_id();
  void set_allocated_head_block_id(std::string* head_block_id);
  private:
  const std::string& _internal_head_block_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_head_block_id(const std::string& value);
  std::string* _internal_mutable_head_block_id();
  public:

  // uint64 ancestor_start_height = 2 [jstype = JS_STRING];
  void clear_ancestor_start_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 ancestor_start_height() const;
  void set_ancestor_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ancestor_start_height() const;
  void _internal_set_ancestor_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 num_blocks = 3;
  void clear_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_blocks() const;
  void set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_blocks() const;
  void _internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool return_block = 4;
  void clear_return_block();
  bool return_block() const;
  void set_return_block(bool value);
  private:
  bool _internal_return_block() const;
  void _internal_set_return_block(bool value);
  public:

  // bool return_receipt = 5;
  void clear_return_receipt();
  bool return_receipt() const;
  void set_return_receipt(bool value);
  private:
  bool _internal_return_receipt() const;
  void _internal_set_return_receipt(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.block_store.get_blocks_by_height_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_block_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ancestor_start_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_blocks_;
  bool return_block_;
  bool return_receipt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fblock_5fstore_2frpc_2eproto;
};
// -------------------------------------------------------------------

class get_blocks_by_height_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.block_store.get_blocks_by_height_response) */ {
 public:
  inline get_blocks_by_height_response() : get_blocks_by_height_response(nullptr) {}
  ~get_blocks_by_height_response() override;
  explicit constexpr get_blocks_by_height_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_blocks_by_height_response(const get_blocks_by_height_response& from);
  get_blocks_by_height_response(get_blocks_by_height_response&& from) noexcept
    : get_blocks_by_height_response() {
    *this = ::std::move(from);
  }

  inline get_blocks_by_height_response& operator=(const get_blocks_by_height_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_blocks_by_height_response& operator=(get_blocks_by_height_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_blocks_by_height_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_blocks_by_height_response* internal_default_instance() {
    return reinterpret_cast<const get_blocks_by_height_response*>(
               &_get_blocks_by_height_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(get_blocks_by_height_response& a, get_blocks_by_height_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_blocks_by_height_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_blocks_by_height_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_blocks_by_height_response* New() const final {
    return new get_blocks_by_height_response();
  }

  get_blocks_by_height_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_blocks_by_height_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_blocks_by_height_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_blocks_by_height_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_blocks_by_height_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.block_store.get_blocks_by_height_response";
  }
  protected:
  explicit get_blocks_by_height_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockItemsFieldNumber = 1,
  };
  // repeated .koinos.block_store.block_item block_items = 1;
  int block_items_size() const;
  private:
  int _internal_block_items_size() const;
  public:
  void clear_block_items();
  ::koinos::block_store::block_item* mutable_block_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_store::block_item >*
      mutable_block_items();
  private:
  const ::koinos::block_store::block_item& _internal_block_items(int index) const;
  ::koinos::block_store::block_item* _internal_add_block_items();
  public:
  const ::koinos::block_store::block_item& block_items(int index) const;
  ::koinos::block_store::block_item* add_block_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_store::block_item >&
      block_items() const;

  // @@protoc_insertion_point(class_scope:koinos.block_store.get_blocks_by_height_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_store::block_item > block_items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fblock_5fstore_2frpc_2eproto;
};
// -------------------------------------------------------------------

class add_block_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.block_store.add_block_request) */ {
 public:
  inline add_block_request() : add_block_request(nullptr) {}
  ~add_block_request() override;
  explicit constexpr add_block_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  add_block_request(const add_block_request& from);
  add_block_request(add_block_request&& from) noexcept
    : add_block_request() {
    *this = ::std::move(from);
  }

  inline add_block_request& operator=(const add_block_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline add_block_request& operator=(add_block_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const add_block_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const add_block_request* internal_default_instance() {
    return reinterpret_cast<const add_block_request*>(
               &_add_block_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(add_block_request& a, add_block_request& b) {
    a.Swap(&b);
  }
  inline void Swap(add_block_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(add_block_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline add_block_request* New() const final {
    return new add_block_request();
  }

  add_block_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<add_block_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const add_block_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const add_block_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(add_block_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.block_store.add_block_request";
  }
  protected:
  explicit add_block_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockToAddFieldNumber = 1,
    kReceiptToAddFieldNumber = 2,
  };
  // .koinos.protocol.block block_to_add = 1;
  bool has_block_to_add() const;
  private:
  bool _internal_has_block_to_add() const;
  public:
  void clear_block_to_add();
  const ::koinos::protocol::block& block_to_add() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::block* release_block_to_add();
  ::koinos::protocol::block* mutable_block_to_add();
  void set_allocated_block_to_add(::koinos::protocol::block* block_to_add);
  private:
  const ::koinos::protocol::block& _internal_block_to_add() const;
  ::koinos::protocol::block* _internal_mutable_block_to_add();
  public:
  void unsafe_arena_set_allocated_block_to_add(
      ::koinos::protocol::block* block_to_add);
  ::koinos::protocol::block* unsafe_arena_release_block_to_add();

  // .koinos.protocol.block_receipt receipt_to_add = 2;
  bool has_receipt_to_add() const;
  private:
  bool _internal_has_receipt_to_add() const;
  public:
  void clear_receipt_to_add();
  const ::koinos::protocol::block_receipt& receipt_to_add() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::block_receipt* release_receipt_to_add();
  ::koinos::protocol::block_receipt* mutable_receipt_to_add();
  void set_allocated_receipt_to_add(::koinos::protocol::block_receipt* receipt_to_add);
  private:
  const ::koinos::protocol::block_receipt& _internal_receipt_to_add() const;
  ::koinos::protocol::block_receipt* _internal_mutable_receipt_to_add();
  public:
  void unsafe_arena_set_allocated_receipt_to_add(
      ::koinos::protocol::block_receipt* receipt_to_add);
  ::koinos::protocol::block_receipt* unsafe_arena_release_receipt_to_add();

  // @@protoc_insertion_point(class_scope:koinos.block_store.add_block_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::block* block_to_add_;
  ::koinos::protocol::block_receipt* receipt_to_add_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fblock_5fstore_2frpc_2eproto;
};
// -------------------------------------------------------------------

class add_block_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.block_store.add_block_response) */ {
 public:
  inline add_block_response() : add_block_response(nullptr) {}
  ~add_block_response() override;
  explicit constexpr add_block_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  add_block_response(const add_block_response& from);
  add_block_response(add_block_response&& from) noexcept
    : add_block_response() {
    *this = ::std::move(from);
  }

  inline add_block_response& operator=(const add_block_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline add_block_response& operator=(add_block_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const add_block_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const add_block_response* internal_default_instance() {
    return reinterpret_cast<const add_block_response*>(
               &_add_block_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(add_block_response& a, add_block_response& b) {
    a.Swap(&b);
  }
  inline void Swap(add_block_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(add_block_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline add_block_response* New() const final {
    return new add_block_response();
  }

  add_block_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<add_block_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const add_block_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const add_block_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(add_block_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.block_store.add_block_response";
  }
  protected:
  explicit add_block_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.block_store.add_block_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fblock_5fstore_2frpc_2eproto;
};
// -------------------------------------------------------------------

class get_highest_block_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.block_store.get_highest_block_request) */ {
 public:
  inline get_highest_block_request() : get_highest_block_request(nullptr) {}
  ~get_highest_block_request() override;
  explicit constexpr get_highest_block_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_highest_block_request(const get_highest_block_request& from);
  get_highest_block_request(get_highest_block_request&& from) noexcept
    : get_highest_block_request() {
    *this = ::std::move(from);
  }

  inline get_highest_block_request& operator=(const get_highest_block_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_highest_block_request& operator=(get_highest_block_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_highest_block_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_highest_block_request* internal_default_instance() {
    return reinterpret_cast<const get_highest_block_request*>(
               &_get_highest_block_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(get_highest_block_request& a, get_highest_block_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_highest_block_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_highest_block_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_highest_block_request* New() const final {
    return new get_highest_block_request();
  }

  get_highest_block_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_highest_block_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_highest_block_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_highest_block_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_highest_block_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.block_store.get_highest_block_request";
  }
  protected:
  explicit get_highest_block_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.block_store.get_highest_block_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fblock_5fstore_2frpc_2eproto;
};
// -------------------------------------------------------------------

class get_highest_block_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.block_store.get_highest_block_response) */ {
 public:
  inline get_highest_block_response() : get_highest_block_response(nullptr) {}
  ~get_highest_block_response() override;
  explicit constexpr get_highest_block_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_highest_block_response(const get_highest_block_response& from);
  get_highest_block_response(get_highest_block_response&& from) noexcept
    : get_highest_block_response() {
    *this = ::std::move(from);
  }

  inline get_highest_block_response& operator=(const get_highest_block_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_highest_block_response& operator=(get_highest_block_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_highest_block_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_highest_block_response* internal_default_instance() {
    return reinterpret_cast<const get_highest_block_response*>(
               &_get_highest_block_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(get_highest_block_response& a, get_highest_block_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_highest_block_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_highest_block_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_highest_block_response* New() const final {
    return new get_highest_block_response();
  }

  get_highest_block_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_highest_block_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_highest_block_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_highest_block_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_highest_block_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.block_store.get_highest_block_response";
  }
  protected:
  explicit get_highest_block_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopologyFieldNumber = 1,
  };
  // .koinos.block_topology topology = 1;
  bool has_topology() const;
  private:
  bool _internal_has_topology() const;
  public:
  void clear_topology();
  const ::koinos::block_topology& topology() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::block_topology* release_topology();
  ::koinos::block_topology* mutable_topology();
  void set_allocated_topology(::koinos::block_topology* topology);
  private:
  const ::koinos::block_topology& _internal_topology() const;
  ::koinos::block_topology* _internal_mutable_topology();
  public:
  void unsafe_arena_set_allocated_topology(
      ::koinos::block_topology* topology);
  ::koinos::block_topology* unsafe_arena_release_topology();

  // @@protoc_insertion_point(class_scope:koinos.block_store.get_highest_block_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::block_topology* topology_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fblock_5fstore_2frpc_2eproto;
};
// -------------------------------------------------------------------

class block_store_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.block_store.block_store_request) */ {
 public:
  inline block_store_request() : block_store_request(nullptr) {}
  ~block_store_request() override;
  explicit constexpr block_store_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_store_request(const block_store_request& from);
  block_store_request(block_store_request&& from) noexcept
    : block_store_request() {
    *this = ::std::move(from);
  }

  inline block_store_request& operator=(const block_store_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_store_request& operator=(block_store_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_store_request& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kReserved = 1,
    kGetBlocksById = 2,
    kGetBlocksByHeight = 3,
    kAddBlock = 4,
    kGetHighestBlock = 5,
    REQUEST_NOT_SET = 0,
  };

  static inline const block_store_request* internal_default_instance() {
    return reinterpret_cast<const block_store_request*>(
               &_block_store_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(block_store_request& a, block_store_request& b) {
    a.Swap(&b);
  }
  inline void Swap(block_store_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_store_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_store_request* New() const final {
    return new block_store_request();
  }

  block_store_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_store_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_store_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_store_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_store_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.block_store.block_store_request";
  }
  protected:
  explicit block_store_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kGetBlocksByIdFieldNumber = 2,
    kGetBlocksByHeightFieldNumber = 3,
    kAddBlockFieldNumber = 4,
    kGetHighestBlockFieldNumber = 5,
  };
  // .koinos.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::reserved_rpc& reserved() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::reserved_rpc* release_reserved();
  ::koinos::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::reserved_rpc* reserved);
  private:
  const ::koinos::reserved_rpc& _internal_reserved() const;
  ::koinos::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::reserved_rpc* reserved);
  ::koinos::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.block_store.get_blocks_by_id_request get_blocks_by_id = 2;
  bool has_get_blocks_by_id() const;
  private:
  bool _internal_has_get_blocks_by_id() const;
  public:
  void clear_get_blocks_by_id();
  const ::koinos::block_store::get_blocks_by_id_request& get_blocks_by_id() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::block_store::get_blocks_by_id_request* release_get_blocks_by_id();
  ::koinos::block_store::get_blocks_by_id_request* mutable_get_blocks_by_id();
  void set_allocated_get_blocks_by_id(::koinos::block_store::get_blocks_by_id_request* get_blocks_by_id);
  private:
  const ::koinos::block_store::get_blocks_by_id_request& _internal_get_blocks_by_id() const;
  ::koinos::block_store::get_blocks_by_id_request* _internal_mutable_get_blocks_by_id();
  public:
  void unsafe_arena_set_allocated_get_blocks_by_id(
      ::koinos::block_store::get_blocks_by_id_request* get_blocks_by_id);
  ::koinos::block_store::get_blocks_by_id_request* unsafe_arena_release_get_blocks_by_id();

  // .koinos.block_store.get_blocks_by_height_request get_blocks_by_height = 3;
  bool has_get_blocks_by_height() const;
  private:
  bool _internal_has_get_blocks_by_height() const;
  public:
  void clear_get_blocks_by_height();
  const ::koinos::block_store::get_blocks_by_height_request& get_blocks_by_height() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::block_store::get_blocks_by_height_request* release_get_blocks_by_height();
  ::koinos::block_store::get_blocks_by_height_request* mutable_get_blocks_by_height();
  void set_allocated_get_blocks_by_height(::koinos::block_store::get_blocks_by_height_request* get_blocks_by_height);
  private:
  const ::koinos::block_store::get_blocks_by_height_request& _internal_get_blocks_by_height() const;
  ::koinos::block_store::get_blocks_by_height_request* _internal_mutable_get_blocks_by_height();
  public:
  void unsafe_arena_set_allocated_get_blocks_by_height(
      ::koinos::block_store::get_blocks_by_height_request* get_blocks_by_height);
  ::koinos::block_store::get_blocks_by_height_request* unsafe_arena_release_get_blocks_by_height();

  // .koinos.block_store.add_block_request add_block = 4;
  bool has_add_block() const;
  private:
  bool _internal_has_add_block() const;
  public:
  void clear_add_block();
  const ::koinos::block_store::add_block_request& add_block() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::block_store::add_block_request* release_add_block();
  ::koinos::block_store::add_block_request* mutable_add_block();
  void set_allocated_add_block(::koinos::block_store::add_block_request* add_block);
  private:
  const ::koinos::block_store::add_block_request& _internal_add_block() const;
  ::koinos::block_store::add_block_request* _internal_mutable_add_block();
  public:
  void unsafe_arena_set_allocated_add_block(
      ::koinos::block_store::add_block_request* add_block);
  ::koinos::block_store::add_block_request* unsafe_arena_release_add_block();

  // .koinos.block_store.get_highest_block_request get_highest_block = 5;
  bool has_get_highest_block() const;
  private:
  bool _internal_has_get_highest_block() const;
  public:
  void clear_get_highest_block();
  const ::koinos::block_store::get_highest_block_request& get_highest_block() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::block_store::get_highest_block_request* release_get_highest_block();
  ::koinos::block_store::get_highest_block_request* mutable_get_highest_block();
  void set_allocated_get_highest_block(::koinos::block_store::get_highest_block_request* get_highest_block);
  private:
  const ::koinos::block_store::get_highest_block_request& _internal_get_highest_block() const;
  ::koinos::block_store::get_highest_block_request* _internal_mutable_get_highest_block();
  public:
  void unsafe_arena_set_allocated_get_highest_block(
      ::koinos::block_store::get_highest_block_request* get_highest_block);
  ::koinos::block_store::get_highest_block_request* unsafe_arena_release_get_highest_block();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:koinos.block_store.block_store_request)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_get_blocks_by_id();
  void set_has_get_blocks_by_height();
  void set_has_add_block();
  void set_has_get_highest_block();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestUnion {
    constexpr RequestUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::reserved_rpc* reserved_;
    ::koinos::block_store::get_blocks_by_id_request* get_blocks_by_id_;
    ::koinos::block_store::get_blocks_by_height_request* get_blocks_by_height_;
    ::koinos::block_store::add_block_request* add_block_;
    ::koinos::block_store::get_highest_block_request* get_highest_block_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2fblock_5fstore_2frpc_2eproto;
};
// -------------------------------------------------------------------

class block_store_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.block_store.block_store_response) */ {
 public:
  inline block_store_response() : block_store_response(nullptr) {}
  ~block_store_response() override;
  explicit constexpr block_store_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_store_response(const block_store_response& from);
  block_store_response(block_store_response&& from) noexcept
    : block_store_response() {
    *this = ::std::move(from);
  }

  inline block_store_response& operator=(const block_store_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_store_response& operator=(block_store_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_store_response& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kReserved = 1,
    kError = 2,
    kGetBlocksById = 3,
    kGetBlocksByHeight = 4,
    kAddBlock = 5,
    kGetHighestBlock = 6,
    RESPONSE_NOT_SET = 0,
  };

  static inline const block_store_response* internal_default_instance() {
    return reinterpret_cast<const block_store_response*>(
               &_block_store_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(block_store_response& a, block_store_response& b) {
    a.Swap(&b);
  }
  inline void Swap(block_store_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_store_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_store_response* New() const final {
    return new block_store_response();
  }

  block_store_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_store_response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_store_response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_store_response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_store_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.block_store.block_store_response";
  }
  protected:
  explicit block_store_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kErrorFieldNumber = 2,
    kGetBlocksByIdFieldNumber = 3,
    kGetBlocksByHeightFieldNumber = 4,
    kAddBlockFieldNumber = 5,
    kGetHighestBlockFieldNumber = 6,
  };
  // .koinos.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::reserved_rpc& reserved() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::reserved_rpc* release_reserved();
  ::koinos::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::reserved_rpc* reserved);
  private:
  const ::koinos::reserved_rpc& _internal_reserved() const;
  ::koinos::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::reserved_rpc* reserved);
  ::koinos::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.error_status error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::koinos::error_status& error() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::error_status* release_error();
  ::koinos::error_status* mutable_error();
  void set_allocated_error(::koinos::error_status* error);
  private:
  const ::koinos::error_status& _internal_error() const;
  ::koinos::error_status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::koinos::error_status* error);
  ::koinos::error_status* unsafe_arena_release_error();

  // .koinos.block_store.get_blocks_by_id_response get_blocks_by_id = 3;
  bool has_get_blocks_by_id() const;
  private:
  bool _internal_has_get_blocks_by_id() const;
  public:
  void clear_get_blocks_by_id();
  const ::koinos::block_store::get_blocks_by_id_response& get_blocks_by_id() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::block_store::get_blocks_by_id_response* release_get_blocks_by_id();
  ::koinos::block_store::get_blocks_by_id_response* mutable_get_blocks_by_id();
  void set_allocated_get_blocks_by_id(::koinos::block_store::get_blocks_by_id_response* get_blocks_by_id);
  private:
  const ::koinos::block_store::get_blocks_by_id_response& _internal_get_blocks_by_id() const;
  ::koinos::block_store::get_blocks_by_id_response* _internal_mutable_get_blocks_by_id();
  public:
  void unsafe_arena_set_allocated_get_blocks_by_id(
      ::koinos::block_store::get_blocks_by_id_response* get_blocks_by_id);
  ::koinos::block_store::get_blocks_by_id_response* unsafe_arena_release_get_blocks_by_id();

  // .koinos.block_store.get_blocks_by_height_response get_blocks_by_height = 4;
  bool has_get_blocks_by_height() const;
  private:
  bool _internal_has_get_blocks_by_height() const;
  public:
  void clear_get_blocks_by_height();
  const ::koinos::block_store::get_blocks_by_height_response& get_blocks_by_height() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::block_store::get_blocks_by_height_response* release_get_blocks_by_height();
  ::koinos::block_store::get_blocks_by_height_response* mutable_get_blocks_by_height();
  void set_allocated_get_blocks_by_height(::koinos::block_store::get_blocks_by_height_response* get_blocks_by_height);
  private:
  const ::koinos::block_store::get_blocks_by_height_response& _internal_get_blocks_by_height() const;
  ::koinos::block_store::get_blocks_by_height_response* _internal_mutable_get_blocks_by_height();
  public:
  void unsafe_arena_set_allocated_get_blocks_by_height(
      ::koinos::block_store::get_blocks_by_height_response* get_blocks_by_height);
  ::koinos::block_store::get_blocks_by_height_response* unsafe_arena_release_get_blocks_by_height();

  // .koinos.block_store.add_block_response add_block = 5;
  bool has_add_block() const;
  private:
  bool _internal_has_add_block() const;
  public:
  void clear_add_block();
  const ::koinos::block_store::add_block_response& add_block() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::block_store::add_block_response* release_add_block();
  ::koinos::block_store::add_block_response* mutable_add_block();
  void set_allocated_add_block(::koinos::block_store::add_block_response* add_block);
  private:
  const ::koinos::block_store::add_block_response& _internal_add_block() const;
  ::koinos::block_store::add_block_response* _internal_mutable_add_block();
  public:
  void unsafe_arena_set_allocated_add_block(
      ::koinos::block_store::add_block_response* add_block);
  ::koinos::block_store::add_block_response* unsafe_arena_release_add_block();

  // .koinos.block_store.get_highest_block_response get_highest_block = 6;
  bool has_get_highest_block() const;
  private:
  bool _internal_has_get_highest_block() const;
  public:
  void clear_get_highest_block();
  const ::koinos::block_store::get_highest_block_response& get_highest_block() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::block_store::get_highest_block_response* release_get_highest_block();
  ::koinos::block_store::get_highest_block_response* mutable_get_highest_block();
  void set_allocated_get_highest_block(::koinos::block_store::get_highest_block_response* get_highest_block);
  private:
  const ::koinos::block_store::get_highest_block_response& _internal_get_highest_block() const;
  ::koinos::block_store::get_highest_block_response* _internal_mutable_get_highest_block();
  public:
  void unsafe_arena_set_allocated_get_highest_block(
      ::koinos::block_store::get_highest_block_response* get_highest_block);
  ::koinos::block_store::get_highest_block_response* unsafe_arena_release_get_highest_block();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:koinos.block_store.block_store_response)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_error();
  void set_has_get_blocks_by_id();
  void set_has_get_blocks_by_height();
  void set_has_add_block();
  void set_has_get_highest_block();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResponseUnion {
    constexpr ResponseUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::koinos::reserved_rpc* reserved_;
    ::koinos::error_status* error_;
    ::koinos::block_store::get_blocks_by_id_response* get_blocks_by_id_;
    ::koinos::block_store::get_blocks_by_height_response* get_blocks_by_height_;
    ::koinos::block_store::add_block_response* add_block_;
    ::koinos::block_store::get_highest_block_response* get_highest_block_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2fblock_5fstore_2frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// get_blocks_by_id_request

// repeated bytes block_ids = 1 [(.koinos.btype) = BLOCK_ID];
inline int get_blocks_by_id_request::_internal_block_ids_size() const {
  return block_ids_.size();
}
inline int get_blocks_by_id_request::block_ids_size() const {
  return _internal_block_ids_size();
}
inline void get_blocks_by_id_request::clear_block_ids() {
  block_ids_.Clear();
}
inline std::string* get_blocks_by_id_request::add_block_ids() {
  std::string* _s = _internal_add_block_ids();
  // @@protoc_insertion_point(field_add_mutable:koinos.block_store.get_blocks_by_id_request.block_ids)
  return _s;
}
inline const std::string& get_blocks_by_id_request::_internal_block_ids(int index) const {
  return block_ids_.Get(index);
}
inline const std::string& get_blocks_by_id_request::block_ids(int index) const {
  // @@protoc_insertion_point(field_get:koinos.block_store.get_blocks_by_id_request.block_ids)
  return _internal_block_ids(index);
}
inline std::string* get_blocks_by_id_request::mutable_block_ids(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.block_store.get_blocks_by_id_request.block_ids)
  return block_ids_.Mutable(index);
}
inline void get_blocks_by_id_request::set_block_ids(int index, const std::string& value) {
  block_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:koinos.block_store.get_blocks_by_id_request.block_ids)
}
inline void get_blocks_by_id_request::set_block_ids(int index, std::string&& value) {
  block_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:koinos.block_store.get_blocks_by_id_request.block_ids)
}
inline void get_blocks_by_id_request::set_block_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:koinos.block_store.get_blocks_by_id_request.block_ids)
}
inline void get_blocks_by_id_request::set_block_ids(int index, const void* value, size_t size) {
  block_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:koinos.block_store.get_blocks_by_id_request.block_ids)
}
inline std::string* get_blocks_by_id_request::_internal_add_block_ids() {
  return block_ids_.Add();
}
inline void get_blocks_by_id_request::add_block_ids(const std::string& value) {
  block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:koinos.block_store.get_blocks_by_id_request.block_ids)
}
inline void get_blocks_by_id_request::add_block_ids(std::string&& value) {
  block_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:koinos.block_store.get_blocks_by_id_request.block_ids)
}
inline void get_blocks_by_id_request::add_block_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:koinos.block_store.get_blocks_by_id_request.block_ids)
}
inline void get_blocks_by_id_request::add_block_ids(const void* value, size_t size) {
  block_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:koinos.block_store.get_blocks_by_id_request.block_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
get_blocks_by_id_request::block_ids() const {
  // @@protoc_insertion_point(field_list:koinos.block_store.get_blocks_by_id_request.block_ids)
  return block_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
get_blocks_by_id_request::mutable_block_ids() {
  // @@protoc_insertion_point(field_mutable_list:koinos.block_store.get_blocks_by_id_request.block_ids)
  return &block_ids_;
}

// bool return_block = 2;
inline void get_blocks_by_id_request::clear_return_block() {
  return_block_ = false;
}
inline bool get_blocks_by_id_request::_internal_return_block() const {
  return return_block_;
}
inline bool get_blocks_by_id_request::return_block() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.get_blocks_by_id_request.return_block)
  return _internal_return_block();
}
inline void get_blocks_by_id_request::_internal_set_return_block(bool value) {
  
  return_block_ = value;
}
inline void get_blocks_by_id_request::set_return_block(bool value) {
  _internal_set_return_block(value);
  // @@protoc_insertion_point(field_set:koinos.block_store.get_blocks_by_id_request.return_block)
}

// bool return_receipt = 3;
inline void get_blocks_by_id_request::clear_return_receipt() {
  return_receipt_ = false;
}
inline bool get_blocks_by_id_request::_internal_return_receipt() const {
  return return_receipt_;
}
inline bool get_blocks_by_id_request::return_receipt() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.get_blocks_by_id_request.return_receipt)
  return _internal_return_receipt();
}
inline void get_blocks_by_id_request::_internal_set_return_receipt(bool value) {
  
  return_receipt_ = value;
}
inline void get_blocks_by_id_request::set_return_receipt(bool value) {
  _internal_set_return_receipt(value);
  // @@protoc_insertion_point(field_set:koinos.block_store.get_blocks_by_id_request.return_receipt)
}

// -------------------------------------------------------------------

// get_blocks_by_id_response

// repeated .koinos.block_store.block_item block_items = 1;
inline int get_blocks_by_id_response::_internal_block_items_size() const {
  return block_items_.size();
}
inline int get_blocks_by_id_response::block_items_size() const {
  return _internal_block_items_size();
}
inline ::koinos::block_store::block_item* get_blocks_by_id_response::mutable_block_items(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.block_store.get_blocks_by_id_response.block_items)
  return block_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_store::block_item >*
get_blocks_by_id_response::mutable_block_items() {
  // @@protoc_insertion_point(field_mutable_list:koinos.block_store.get_blocks_by_id_response.block_items)
  return &block_items_;
}
inline const ::koinos::block_store::block_item& get_blocks_by_id_response::_internal_block_items(int index) const {
  return block_items_.Get(index);
}
inline const ::koinos::block_store::block_item& get_blocks_by_id_response::block_items(int index) const {
  // @@protoc_insertion_point(field_get:koinos.block_store.get_blocks_by_id_response.block_items)
  return _internal_block_items(index);
}
inline ::koinos::block_store::block_item* get_blocks_by_id_response::_internal_add_block_items() {
  return block_items_.Add();
}
inline ::koinos::block_store::block_item* get_blocks_by_id_response::add_block_items() {
  ::koinos::block_store::block_item* _add = _internal_add_block_items();
  // @@protoc_insertion_point(field_add:koinos.block_store.get_blocks_by_id_response.block_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_store::block_item >&
get_blocks_by_id_response::block_items() const {
  // @@protoc_insertion_point(field_list:koinos.block_store.get_blocks_by_id_response.block_items)
  return block_items_;
}

// -------------------------------------------------------------------

// get_blocks_by_height_request

// bytes head_block_id = 1 [(.koinos.btype) = BLOCK_ID];
inline void get_blocks_by_height_request::clear_head_block_id() {
  head_block_id_.ClearToEmpty();
}
inline const std::string& get_blocks_by_height_request::head_block_id() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.get_blocks_by_height_request.head_block_id)
  return _internal_head_block_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_blocks_by_height_request::set_head_block_id(ArgT0&& arg0, ArgT... args) {
 
 head_block_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.block_store.get_blocks_by_height_request.head_block_id)
}
inline std::string* get_blocks_by_height_request::mutable_head_block_id() {
  std::string* _s = _internal_mutable_head_block_id();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.get_blocks_by_height_request.head_block_id)
  return _s;
}
inline const std::string& get_blocks_by_height_request::_internal_head_block_id() const {
  return head_block_id_.Get();
}
inline void get_blocks_by_height_request::_internal_set_head_block_id(const std::string& value) {
  
  head_block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_blocks_by_height_request::_internal_mutable_head_block_id() {
  
  return head_block_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_blocks_by_height_request::release_head_block_id() {
  // @@protoc_insertion_point(field_release:koinos.block_store.get_blocks_by_height_request.head_block_id)
  return head_block_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_blocks_by_height_request::set_allocated_head_block_id(std::string* head_block_id) {
  if (head_block_id != nullptr) {
    
  } else {
    
  }
  head_block_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head_block_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.block_store.get_blocks_by_height_request.head_block_id)
}

// uint64 ancestor_start_height = 2 [jstype = JS_STRING];
inline void get_blocks_by_height_request::clear_ancestor_start_height() {
  ancestor_start_height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_blocks_by_height_request::_internal_ancestor_start_height() const {
  return ancestor_start_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_blocks_by_height_request::ancestor_start_height() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.get_blocks_by_height_request.ancestor_start_height)
  return _internal_ancestor_start_height();
}
inline void get_blocks_by_height_request::_internal_set_ancestor_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ancestor_start_height_ = value;
}
inline void get_blocks_by_height_request::set_ancestor_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ancestor_start_height(value);
  // @@protoc_insertion_point(field_set:koinos.block_store.get_blocks_by_height_request.ancestor_start_height)
}

// uint32 num_blocks = 3;
inline void get_blocks_by_height_request::clear_num_blocks() {
  num_blocks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 get_blocks_by_height_request::_internal_num_blocks() const {
  return num_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 get_blocks_by_height_request::num_blocks() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.get_blocks_by_height_request.num_blocks)
  return _internal_num_blocks();
}
inline void get_blocks_by_height_request::_internal_set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_blocks_ = value;
}
inline void get_blocks_by_height_request::set_num_blocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:koinos.block_store.get_blocks_by_height_request.num_blocks)
}

// bool return_block = 4;
inline void get_blocks_by_height_request::clear_return_block() {
  return_block_ = false;
}
inline bool get_blocks_by_height_request::_internal_return_block() const {
  return return_block_;
}
inline bool get_blocks_by_height_request::return_block() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.get_blocks_by_height_request.return_block)
  return _internal_return_block();
}
inline void get_blocks_by_height_request::_internal_set_return_block(bool value) {
  
  return_block_ = value;
}
inline void get_blocks_by_height_request::set_return_block(bool value) {
  _internal_set_return_block(value);
  // @@protoc_insertion_point(field_set:koinos.block_store.get_blocks_by_height_request.return_block)
}

// bool return_receipt = 5;
inline void get_blocks_by_height_request::clear_return_receipt() {
  return_receipt_ = false;
}
inline bool get_blocks_by_height_request::_internal_return_receipt() const {
  return return_receipt_;
}
inline bool get_blocks_by_height_request::return_receipt() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.get_blocks_by_height_request.return_receipt)
  return _internal_return_receipt();
}
inline void get_blocks_by_height_request::_internal_set_return_receipt(bool value) {
  
  return_receipt_ = value;
}
inline void get_blocks_by_height_request::set_return_receipt(bool value) {
  _internal_set_return_receipt(value);
  // @@protoc_insertion_point(field_set:koinos.block_store.get_blocks_by_height_request.return_receipt)
}

// -------------------------------------------------------------------

// get_blocks_by_height_response

// repeated .koinos.block_store.block_item block_items = 1;
inline int get_blocks_by_height_response::_internal_block_items_size() const {
  return block_items_.size();
}
inline int get_blocks_by_height_response::block_items_size() const {
  return _internal_block_items_size();
}
inline ::koinos::block_store::block_item* get_blocks_by_height_response::mutable_block_items(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.block_store.get_blocks_by_height_response.block_items)
  return block_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_store::block_item >*
get_blocks_by_height_response::mutable_block_items() {
  // @@protoc_insertion_point(field_mutable_list:koinos.block_store.get_blocks_by_height_response.block_items)
  return &block_items_;
}
inline const ::koinos::block_store::block_item& get_blocks_by_height_response::_internal_block_items(int index) const {
  return block_items_.Get(index);
}
inline const ::koinos::block_store::block_item& get_blocks_by_height_response::block_items(int index) const {
  // @@protoc_insertion_point(field_get:koinos.block_store.get_blocks_by_height_response.block_items)
  return _internal_block_items(index);
}
inline ::koinos::block_store::block_item* get_blocks_by_height_response::_internal_add_block_items() {
  return block_items_.Add();
}
inline ::koinos::block_store::block_item* get_blocks_by_height_response::add_block_items() {
  ::koinos::block_store::block_item* _add = _internal_add_block_items();
  // @@protoc_insertion_point(field_add:koinos.block_store.get_blocks_by_height_response.block_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::block_store::block_item >&
get_blocks_by_height_response::block_items() const {
  // @@protoc_insertion_point(field_list:koinos.block_store.get_blocks_by_height_response.block_items)
  return block_items_;
}

// -------------------------------------------------------------------

// add_block_request

// .koinos.protocol.block block_to_add = 1;
inline bool add_block_request::_internal_has_block_to_add() const {
  return this != internal_default_instance() && block_to_add_ != nullptr;
}
inline bool add_block_request::has_block_to_add() const {
  return _internal_has_block_to_add();
}
inline const ::koinos::protocol::block& add_block_request::_internal_block_to_add() const {
  const ::koinos::protocol::block* p = block_to_add_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block&>(
      ::koinos::protocol::_block_default_instance_);
}
inline const ::koinos::protocol::block& add_block_request::block_to_add() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.add_block_request.block_to_add)
  return _internal_block_to_add();
}
inline void add_block_request::unsafe_arena_set_allocated_block_to_add(
    ::koinos::protocol::block* block_to_add) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_to_add_);
  }
  block_to_add_ = block_to_add;
  if (block_to_add) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.add_block_request.block_to_add)
}
inline ::koinos::protocol::block* add_block_request::release_block_to_add() {
  
  ::koinos::protocol::block* temp = block_to_add_;
  block_to_add_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::block* add_block_request::unsafe_arena_release_block_to_add() {
  // @@protoc_insertion_point(field_release:koinos.block_store.add_block_request.block_to_add)
  
  ::koinos::protocol::block* temp = block_to_add_;
  block_to_add_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block* add_block_request::_internal_mutable_block_to_add() {
  
  if (block_to_add_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block>(GetArenaForAllocation());
    block_to_add_ = p;
  }
  return block_to_add_;
}
inline ::koinos::protocol::block* add_block_request::mutable_block_to_add() {
  ::koinos::protocol::block* _msg = _internal_mutable_block_to_add();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.add_block_request.block_to_add)
  return _msg;
}
inline void add_block_request::set_allocated_block_to_add(::koinos::protocol::block* block_to_add) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_to_add_);
  }
  if (block_to_add) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_to_add));
    if (message_arena != submessage_arena) {
      block_to_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_to_add, submessage_arena);
    }
    
  } else {
    
  }
  block_to_add_ = block_to_add;
  // @@protoc_insertion_point(field_set_allocated:koinos.block_store.add_block_request.block_to_add)
}

// .koinos.protocol.block_receipt receipt_to_add = 2;
inline bool add_block_request::_internal_has_receipt_to_add() const {
  return this != internal_default_instance() && receipt_to_add_ != nullptr;
}
inline bool add_block_request::has_receipt_to_add() const {
  return _internal_has_receipt_to_add();
}
inline const ::koinos::protocol::block_receipt& add_block_request::_internal_receipt_to_add() const {
  const ::koinos::protocol::block_receipt* p = receipt_to_add_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block_receipt&>(
      ::koinos::protocol::_block_receipt_default_instance_);
}
inline const ::koinos::protocol::block_receipt& add_block_request::receipt_to_add() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.add_block_request.receipt_to_add)
  return _internal_receipt_to_add();
}
inline void add_block_request::unsafe_arena_set_allocated_receipt_to_add(
    ::koinos::protocol::block_receipt* receipt_to_add) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_to_add_);
  }
  receipt_to_add_ = receipt_to_add;
  if (receipt_to_add) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.add_block_request.receipt_to_add)
}
inline ::koinos::protocol::block_receipt* add_block_request::release_receipt_to_add() {
  
  ::koinos::protocol::block_receipt* temp = receipt_to_add_;
  receipt_to_add_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::block_receipt* add_block_request::unsafe_arena_release_receipt_to_add() {
  // @@protoc_insertion_point(field_release:koinos.block_store.add_block_request.receipt_to_add)
  
  ::koinos::protocol::block_receipt* temp = receipt_to_add_;
  receipt_to_add_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block_receipt* add_block_request::_internal_mutable_receipt_to_add() {
  
  if (receipt_to_add_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block_receipt>(GetArenaForAllocation());
    receipt_to_add_ = p;
  }
  return receipt_to_add_;
}
inline ::koinos::protocol::block_receipt* add_block_request::mutable_receipt_to_add() {
  ::koinos::protocol::block_receipt* _msg = _internal_mutable_receipt_to_add();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.add_block_request.receipt_to_add)
  return _msg;
}
inline void add_block_request::set_allocated_receipt_to_add(::koinos::protocol::block_receipt* receipt_to_add) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_to_add_);
  }
  if (receipt_to_add) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_to_add));
    if (message_arena != submessage_arena) {
      receipt_to_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receipt_to_add, submessage_arena);
    }
    
  } else {
    
  }
  receipt_to_add_ = receipt_to_add;
  // @@protoc_insertion_point(field_set_allocated:koinos.block_store.add_block_request.receipt_to_add)
}

// -------------------------------------------------------------------

// add_block_response

// -------------------------------------------------------------------

// get_highest_block_request

// -------------------------------------------------------------------

// get_highest_block_response

// .koinos.block_topology topology = 1;
inline bool get_highest_block_response::_internal_has_topology() const {
  return this != internal_default_instance() && topology_ != nullptr;
}
inline bool get_highest_block_response::has_topology() const {
  return _internal_has_topology();
}
inline const ::koinos::block_topology& get_highest_block_response::_internal_topology() const {
  const ::koinos::block_topology* p = topology_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::block_topology&>(
      ::koinos::_block_topology_default_instance_);
}
inline const ::koinos::block_topology& get_highest_block_response::topology() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.get_highest_block_response.topology)
  return _internal_topology();
}
inline void get_highest_block_response::unsafe_arena_set_allocated_topology(
    ::koinos::block_topology* topology) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topology_);
  }
  topology_ = topology;
  if (topology) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.get_highest_block_response.topology)
}
inline ::koinos::block_topology* get_highest_block_response::release_topology() {
  
  ::koinos::block_topology* temp = topology_;
  topology_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::block_topology* get_highest_block_response::unsafe_arena_release_topology() {
  // @@protoc_insertion_point(field_release:koinos.block_store.get_highest_block_response.topology)
  
  ::koinos::block_topology* temp = topology_;
  topology_ = nullptr;
  return temp;
}
inline ::koinos::block_topology* get_highest_block_response::_internal_mutable_topology() {
  
  if (topology_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::block_topology>(GetArenaForAllocation());
    topology_ = p;
  }
  return topology_;
}
inline ::koinos::block_topology* get_highest_block_response::mutable_topology() {
  ::koinos::block_topology* _msg = _internal_mutable_topology();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.get_highest_block_response.topology)
  return _msg;
}
inline void get_highest_block_response::set_allocated_topology(::koinos::block_topology* topology) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(topology_);
  }
  if (topology) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topology));
    if (message_arena != submessage_arena) {
      topology = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topology, submessage_arena);
    }
    
  } else {
    
  }
  topology_ = topology;
  // @@protoc_insertion_point(field_set_allocated:koinos.block_store.get_highest_block_response.topology)
}

// -------------------------------------------------------------------

// block_store_request

// .koinos.reserved_rpc reserved = 1;
inline bool block_store_request::_internal_has_reserved() const {
  return request_case() == kReserved;
}
inline bool block_store_request::has_reserved() const {
  return _internal_has_reserved();
}
inline void block_store_request::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::reserved_rpc* block_store_request::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_store_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
      ::koinos::reserved_rpc* temp = request_.reserved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::reserved_rpc& block_store_request::_internal_reserved() const {
  return _internal_has_reserved()
      ? *request_.reserved_
      : reinterpret_cast< ::koinos::reserved_rpc&>(::koinos::_reserved_rpc_default_instance_);
}
inline const ::koinos::reserved_rpc& block_store_request::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_store_request.reserved)
  return _internal_reserved();
}
inline ::koinos::reserved_rpc* block_store_request::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.block_store.block_store_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
    ::koinos::reserved_rpc* temp = request_.reserved_;
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void block_store_request::unsafe_arena_set_allocated_reserved(::koinos::reserved_rpc* reserved) {
  clear_request();
  if (reserved) {
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_store_request.reserved)
}
inline ::koinos::reserved_rpc* block_store_request::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_request();
    set_has_reserved();
    request_.reserved_ = CreateMaybeMessage< ::koinos::reserved_rpc >(GetArenaForAllocation());
  }
  return request_.reserved_;
}
inline ::koinos::reserved_rpc* block_store_request::mutable_reserved() {
  ::koinos::reserved_rpc* _msg = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_store_request.reserved)
  return _msg;
}

// .koinos.block_store.get_blocks_by_id_request get_blocks_by_id = 2;
inline bool block_store_request::_internal_has_get_blocks_by_id() const {
  return request_case() == kGetBlocksById;
}
inline bool block_store_request::has_get_blocks_by_id() const {
  return _internal_has_get_blocks_by_id();
}
inline void block_store_request::set_has_get_blocks_by_id() {
  _oneof_case_[0] = kGetBlocksById;
}
inline void block_store_request::clear_get_blocks_by_id() {
  if (_internal_has_get_blocks_by_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_blocks_by_id_;
    }
    clear_has_request();
  }
}
inline ::koinos::block_store::get_blocks_by_id_request* block_store_request::release_get_blocks_by_id() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_store_request.get_blocks_by_id)
  if (_internal_has_get_blocks_by_id()) {
    clear_has_request();
      ::koinos::block_store::get_blocks_by_id_request* temp = request_.get_blocks_by_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_blocks_by_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::block_store::get_blocks_by_id_request& block_store_request::_internal_get_blocks_by_id() const {
  return _internal_has_get_blocks_by_id()
      ? *request_.get_blocks_by_id_
      : reinterpret_cast< ::koinos::block_store::get_blocks_by_id_request&>(::koinos::block_store::_get_blocks_by_id_request_default_instance_);
}
inline const ::koinos::block_store::get_blocks_by_id_request& block_store_request::get_blocks_by_id() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_store_request.get_blocks_by_id)
  return _internal_get_blocks_by_id();
}
inline ::koinos::block_store::get_blocks_by_id_request* block_store_request::unsafe_arena_release_get_blocks_by_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.block_store.block_store_request.get_blocks_by_id)
  if (_internal_has_get_blocks_by_id()) {
    clear_has_request();
    ::koinos::block_store::get_blocks_by_id_request* temp = request_.get_blocks_by_id_;
    request_.get_blocks_by_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void block_store_request::unsafe_arena_set_allocated_get_blocks_by_id(::koinos::block_store::get_blocks_by_id_request* get_blocks_by_id) {
  clear_request();
  if (get_blocks_by_id) {
    set_has_get_blocks_by_id();
    request_.get_blocks_by_id_ = get_blocks_by_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_store_request.get_blocks_by_id)
}
inline ::koinos::block_store::get_blocks_by_id_request* block_store_request::_internal_mutable_get_blocks_by_id() {
  if (!_internal_has_get_blocks_by_id()) {
    clear_request();
    set_has_get_blocks_by_id();
    request_.get_blocks_by_id_ = CreateMaybeMessage< ::koinos::block_store::get_blocks_by_id_request >(GetArenaForAllocation());
  }
  return request_.get_blocks_by_id_;
}
inline ::koinos::block_store::get_blocks_by_id_request* block_store_request::mutable_get_blocks_by_id() {
  ::koinos::block_store::get_blocks_by_id_request* _msg = _internal_mutable_get_blocks_by_id();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_store_request.get_blocks_by_id)
  return _msg;
}

// .koinos.block_store.get_blocks_by_height_request get_blocks_by_height = 3;
inline bool block_store_request::_internal_has_get_blocks_by_height() const {
  return request_case() == kGetBlocksByHeight;
}
inline bool block_store_request::has_get_blocks_by_height() const {
  return _internal_has_get_blocks_by_height();
}
inline void block_store_request::set_has_get_blocks_by_height() {
  _oneof_case_[0] = kGetBlocksByHeight;
}
inline void block_store_request::clear_get_blocks_by_height() {
  if (_internal_has_get_blocks_by_height()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_blocks_by_height_;
    }
    clear_has_request();
  }
}
inline ::koinos::block_store::get_blocks_by_height_request* block_store_request::release_get_blocks_by_height() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_store_request.get_blocks_by_height)
  if (_internal_has_get_blocks_by_height()) {
    clear_has_request();
      ::koinos::block_store::get_blocks_by_height_request* temp = request_.get_blocks_by_height_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_blocks_by_height_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::block_store::get_blocks_by_height_request& block_store_request::_internal_get_blocks_by_height() const {
  return _internal_has_get_blocks_by_height()
      ? *request_.get_blocks_by_height_
      : reinterpret_cast< ::koinos::block_store::get_blocks_by_height_request&>(::koinos::block_store::_get_blocks_by_height_request_default_instance_);
}
inline const ::koinos::block_store::get_blocks_by_height_request& block_store_request::get_blocks_by_height() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_store_request.get_blocks_by_height)
  return _internal_get_blocks_by_height();
}
inline ::koinos::block_store::get_blocks_by_height_request* block_store_request::unsafe_arena_release_get_blocks_by_height() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.block_store.block_store_request.get_blocks_by_height)
  if (_internal_has_get_blocks_by_height()) {
    clear_has_request();
    ::koinos::block_store::get_blocks_by_height_request* temp = request_.get_blocks_by_height_;
    request_.get_blocks_by_height_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void block_store_request::unsafe_arena_set_allocated_get_blocks_by_height(::koinos::block_store::get_blocks_by_height_request* get_blocks_by_height) {
  clear_request();
  if (get_blocks_by_height) {
    set_has_get_blocks_by_height();
    request_.get_blocks_by_height_ = get_blocks_by_height;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_store_request.get_blocks_by_height)
}
inline ::koinos::block_store::get_blocks_by_height_request* block_store_request::_internal_mutable_get_blocks_by_height() {
  if (!_internal_has_get_blocks_by_height()) {
    clear_request();
    set_has_get_blocks_by_height();
    request_.get_blocks_by_height_ = CreateMaybeMessage< ::koinos::block_store::get_blocks_by_height_request >(GetArenaForAllocation());
  }
  return request_.get_blocks_by_height_;
}
inline ::koinos::block_store::get_blocks_by_height_request* block_store_request::mutable_get_blocks_by_height() {
  ::koinos::block_store::get_blocks_by_height_request* _msg = _internal_mutable_get_blocks_by_height();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_store_request.get_blocks_by_height)
  return _msg;
}

// .koinos.block_store.add_block_request add_block = 4;
inline bool block_store_request::_internal_has_add_block() const {
  return request_case() == kAddBlock;
}
inline bool block_store_request::has_add_block() const {
  return _internal_has_add_block();
}
inline void block_store_request::set_has_add_block() {
  _oneof_case_[0] = kAddBlock;
}
inline void block_store_request::clear_add_block() {
  if (_internal_has_add_block()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.add_block_;
    }
    clear_has_request();
  }
}
inline ::koinos::block_store::add_block_request* block_store_request::release_add_block() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_store_request.add_block)
  if (_internal_has_add_block()) {
    clear_has_request();
      ::koinos::block_store::add_block_request* temp = request_.add_block_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.add_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::block_store::add_block_request& block_store_request::_internal_add_block() const {
  return _internal_has_add_block()
      ? *request_.add_block_
      : reinterpret_cast< ::koinos::block_store::add_block_request&>(::koinos::block_store::_add_block_request_default_instance_);
}
inline const ::koinos::block_store::add_block_request& block_store_request::add_block() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_store_request.add_block)
  return _internal_add_block();
}
inline ::koinos::block_store::add_block_request* block_store_request::unsafe_arena_release_add_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.block_store.block_store_request.add_block)
  if (_internal_has_add_block()) {
    clear_has_request();
    ::koinos::block_store::add_block_request* temp = request_.add_block_;
    request_.add_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void block_store_request::unsafe_arena_set_allocated_add_block(::koinos::block_store::add_block_request* add_block) {
  clear_request();
  if (add_block) {
    set_has_add_block();
    request_.add_block_ = add_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_store_request.add_block)
}
inline ::koinos::block_store::add_block_request* block_store_request::_internal_mutable_add_block() {
  if (!_internal_has_add_block()) {
    clear_request();
    set_has_add_block();
    request_.add_block_ = CreateMaybeMessage< ::koinos::block_store::add_block_request >(GetArenaForAllocation());
  }
  return request_.add_block_;
}
inline ::koinos::block_store::add_block_request* block_store_request::mutable_add_block() {
  ::koinos::block_store::add_block_request* _msg = _internal_mutable_add_block();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_store_request.add_block)
  return _msg;
}

// .koinos.block_store.get_highest_block_request get_highest_block = 5;
inline bool block_store_request::_internal_has_get_highest_block() const {
  return request_case() == kGetHighestBlock;
}
inline bool block_store_request::has_get_highest_block() const {
  return _internal_has_get_highest_block();
}
inline void block_store_request::set_has_get_highest_block() {
  _oneof_case_[0] = kGetHighestBlock;
}
inline void block_store_request::clear_get_highest_block() {
  if (_internal_has_get_highest_block()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.get_highest_block_;
    }
    clear_has_request();
  }
}
inline ::koinos::block_store::get_highest_block_request* block_store_request::release_get_highest_block() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_store_request.get_highest_block)
  if (_internal_has_get_highest_block()) {
    clear_has_request();
      ::koinos::block_store::get_highest_block_request* temp = request_.get_highest_block_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_highest_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::block_store::get_highest_block_request& block_store_request::_internal_get_highest_block() const {
  return _internal_has_get_highest_block()
      ? *request_.get_highest_block_
      : reinterpret_cast< ::koinos::block_store::get_highest_block_request&>(::koinos::block_store::_get_highest_block_request_default_instance_);
}
inline const ::koinos::block_store::get_highest_block_request& block_store_request::get_highest_block() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_store_request.get_highest_block)
  return _internal_get_highest_block();
}
inline ::koinos::block_store::get_highest_block_request* block_store_request::unsafe_arena_release_get_highest_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.block_store.block_store_request.get_highest_block)
  if (_internal_has_get_highest_block()) {
    clear_has_request();
    ::koinos::block_store::get_highest_block_request* temp = request_.get_highest_block_;
    request_.get_highest_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void block_store_request::unsafe_arena_set_allocated_get_highest_block(::koinos::block_store::get_highest_block_request* get_highest_block) {
  clear_request();
  if (get_highest_block) {
    set_has_get_highest_block();
    request_.get_highest_block_ = get_highest_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_store_request.get_highest_block)
}
inline ::koinos::block_store::get_highest_block_request* block_store_request::_internal_mutable_get_highest_block() {
  if (!_internal_has_get_highest_block()) {
    clear_request();
    set_has_get_highest_block();
    request_.get_highest_block_ = CreateMaybeMessage< ::koinos::block_store::get_highest_block_request >(GetArenaForAllocation());
  }
  return request_.get_highest_block_;
}
inline ::koinos::block_store::get_highest_block_request* block_store_request::mutable_get_highest_block() {
  ::koinos::block_store::get_highest_block_request* _msg = _internal_mutable_get_highest_block();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_store_request.get_highest_block)
  return _msg;
}

inline bool block_store_request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void block_store_request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline block_store_request::RequestCase block_store_request::request_case() const {
  return block_store_request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// block_store_response

// .koinos.reserved_rpc reserved = 1;
inline bool block_store_response::_internal_has_reserved() const {
  return response_case() == kReserved;
}
inline bool block_store_response::has_reserved() const {
  return _internal_has_reserved();
}
inline void block_store_response::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::reserved_rpc* block_store_response::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_store_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
      ::koinos::reserved_rpc* temp = response_.reserved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::reserved_rpc& block_store_response::_internal_reserved() const {
  return _internal_has_reserved()
      ? *response_.reserved_
      : reinterpret_cast< ::koinos::reserved_rpc&>(::koinos::_reserved_rpc_default_instance_);
}
inline const ::koinos::reserved_rpc& block_store_response::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_store_response.reserved)
  return _internal_reserved();
}
inline ::koinos::reserved_rpc* block_store_response::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.block_store.block_store_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
    ::koinos::reserved_rpc* temp = response_.reserved_;
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void block_store_response::unsafe_arena_set_allocated_reserved(::koinos::reserved_rpc* reserved) {
  clear_response();
  if (reserved) {
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_store_response.reserved)
}
inline ::koinos::reserved_rpc* block_store_response::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_response();
    set_has_reserved();
    response_.reserved_ = CreateMaybeMessage< ::koinos::reserved_rpc >(GetArenaForAllocation());
  }
  return response_.reserved_;
}
inline ::koinos::reserved_rpc* block_store_response::mutable_reserved() {
  ::koinos::reserved_rpc* _msg = _internal_mutable_reserved();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_store_response.reserved)
  return _msg;
}

// .koinos.error_status error = 2;
inline bool block_store_response::_internal_has_error() const {
  return response_case() == kError;
}
inline bool block_store_response::has_error() const {
  return _internal_has_error();
}
inline void block_store_response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::koinos::error_status* block_store_response::release_error() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_store_response.error)
  if (_internal_has_error()) {
    clear_has_response();
      ::koinos::error_status* temp = response_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::error_status& block_store_response::_internal_error() const {
  return _internal_has_error()
      ? *response_.error_
      : reinterpret_cast< ::koinos::error_status&>(::koinos::_error_status_default_instance_);
}
inline const ::koinos::error_status& block_store_response::error() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_store_response.error)
  return _internal_error();
}
inline ::koinos::error_status* block_store_response::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.block_store.block_store_response.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::koinos::error_status* temp = response_.error_;
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void block_store_response::unsafe_arena_set_allocated_error(::koinos::error_status* error) {
  clear_response();
  if (error) {
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_store_response.error)
}
inline ::koinos::error_status* block_store_response::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_response();
    set_has_error();
    response_.error_ = CreateMaybeMessage< ::koinos::error_status >(GetArenaForAllocation());
  }
  return response_.error_;
}
inline ::koinos::error_status* block_store_response::mutable_error() {
  ::koinos::error_status* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_store_response.error)
  return _msg;
}

// .koinos.block_store.get_blocks_by_id_response get_blocks_by_id = 3;
inline bool block_store_response::_internal_has_get_blocks_by_id() const {
  return response_case() == kGetBlocksById;
}
inline bool block_store_response::has_get_blocks_by_id() const {
  return _internal_has_get_blocks_by_id();
}
inline void block_store_response::set_has_get_blocks_by_id() {
  _oneof_case_[0] = kGetBlocksById;
}
inline void block_store_response::clear_get_blocks_by_id() {
  if (_internal_has_get_blocks_by_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.get_blocks_by_id_;
    }
    clear_has_response();
  }
}
inline ::koinos::block_store::get_blocks_by_id_response* block_store_response::release_get_blocks_by_id() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_store_response.get_blocks_by_id)
  if (_internal_has_get_blocks_by_id()) {
    clear_has_response();
      ::koinos::block_store::get_blocks_by_id_response* temp = response_.get_blocks_by_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_blocks_by_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::block_store::get_blocks_by_id_response& block_store_response::_internal_get_blocks_by_id() const {
  return _internal_has_get_blocks_by_id()
      ? *response_.get_blocks_by_id_
      : reinterpret_cast< ::koinos::block_store::get_blocks_by_id_response&>(::koinos::block_store::_get_blocks_by_id_response_default_instance_);
}
inline const ::koinos::block_store::get_blocks_by_id_response& block_store_response::get_blocks_by_id() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_store_response.get_blocks_by_id)
  return _internal_get_blocks_by_id();
}
inline ::koinos::block_store::get_blocks_by_id_response* block_store_response::unsafe_arena_release_get_blocks_by_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.block_store.block_store_response.get_blocks_by_id)
  if (_internal_has_get_blocks_by_id()) {
    clear_has_response();
    ::koinos::block_store::get_blocks_by_id_response* temp = response_.get_blocks_by_id_;
    response_.get_blocks_by_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void block_store_response::unsafe_arena_set_allocated_get_blocks_by_id(::koinos::block_store::get_blocks_by_id_response* get_blocks_by_id) {
  clear_response();
  if (get_blocks_by_id) {
    set_has_get_blocks_by_id();
    response_.get_blocks_by_id_ = get_blocks_by_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_store_response.get_blocks_by_id)
}
inline ::koinos::block_store::get_blocks_by_id_response* block_store_response::_internal_mutable_get_blocks_by_id() {
  if (!_internal_has_get_blocks_by_id()) {
    clear_response();
    set_has_get_blocks_by_id();
    response_.get_blocks_by_id_ = CreateMaybeMessage< ::koinos::block_store::get_blocks_by_id_response >(GetArenaForAllocation());
  }
  return response_.get_blocks_by_id_;
}
inline ::koinos::block_store::get_blocks_by_id_response* block_store_response::mutable_get_blocks_by_id() {
  ::koinos::block_store::get_blocks_by_id_response* _msg = _internal_mutable_get_blocks_by_id();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_store_response.get_blocks_by_id)
  return _msg;
}

// .koinos.block_store.get_blocks_by_height_response get_blocks_by_height = 4;
inline bool block_store_response::_internal_has_get_blocks_by_height() const {
  return response_case() == kGetBlocksByHeight;
}
inline bool block_store_response::has_get_blocks_by_height() const {
  return _internal_has_get_blocks_by_height();
}
inline void block_store_response::set_has_get_blocks_by_height() {
  _oneof_case_[0] = kGetBlocksByHeight;
}
inline void block_store_response::clear_get_blocks_by_height() {
  if (_internal_has_get_blocks_by_height()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.get_blocks_by_height_;
    }
    clear_has_response();
  }
}
inline ::koinos::block_store::get_blocks_by_height_response* block_store_response::release_get_blocks_by_height() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_store_response.get_blocks_by_height)
  if (_internal_has_get_blocks_by_height()) {
    clear_has_response();
      ::koinos::block_store::get_blocks_by_height_response* temp = response_.get_blocks_by_height_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_blocks_by_height_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::block_store::get_blocks_by_height_response& block_store_response::_internal_get_blocks_by_height() const {
  return _internal_has_get_blocks_by_height()
      ? *response_.get_blocks_by_height_
      : reinterpret_cast< ::koinos::block_store::get_blocks_by_height_response&>(::koinos::block_store::_get_blocks_by_height_response_default_instance_);
}
inline const ::koinos::block_store::get_blocks_by_height_response& block_store_response::get_blocks_by_height() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_store_response.get_blocks_by_height)
  return _internal_get_blocks_by_height();
}
inline ::koinos::block_store::get_blocks_by_height_response* block_store_response::unsafe_arena_release_get_blocks_by_height() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.block_store.block_store_response.get_blocks_by_height)
  if (_internal_has_get_blocks_by_height()) {
    clear_has_response();
    ::koinos::block_store::get_blocks_by_height_response* temp = response_.get_blocks_by_height_;
    response_.get_blocks_by_height_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void block_store_response::unsafe_arena_set_allocated_get_blocks_by_height(::koinos::block_store::get_blocks_by_height_response* get_blocks_by_height) {
  clear_response();
  if (get_blocks_by_height) {
    set_has_get_blocks_by_height();
    response_.get_blocks_by_height_ = get_blocks_by_height;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_store_response.get_blocks_by_height)
}
inline ::koinos::block_store::get_blocks_by_height_response* block_store_response::_internal_mutable_get_blocks_by_height() {
  if (!_internal_has_get_blocks_by_height()) {
    clear_response();
    set_has_get_blocks_by_height();
    response_.get_blocks_by_height_ = CreateMaybeMessage< ::koinos::block_store::get_blocks_by_height_response >(GetArenaForAllocation());
  }
  return response_.get_blocks_by_height_;
}
inline ::koinos::block_store::get_blocks_by_height_response* block_store_response::mutable_get_blocks_by_height() {
  ::koinos::block_store::get_blocks_by_height_response* _msg = _internal_mutable_get_blocks_by_height();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_store_response.get_blocks_by_height)
  return _msg;
}

// .koinos.block_store.add_block_response add_block = 5;
inline bool block_store_response::_internal_has_add_block() const {
  return response_case() == kAddBlock;
}
inline bool block_store_response::has_add_block() const {
  return _internal_has_add_block();
}
inline void block_store_response::set_has_add_block() {
  _oneof_case_[0] = kAddBlock;
}
inline void block_store_response::clear_add_block() {
  if (_internal_has_add_block()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.add_block_;
    }
    clear_has_response();
  }
}
inline ::koinos::block_store::add_block_response* block_store_response::release_add_block() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_store_response.add_block)
  if (_internal_has_add_block()) {
    clear_has_response();
      ::koinos::block_store::add_block_response* temp = response_.add_block_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.add_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::block_store::add_block_response& block_store_response::_internal_add_block() const {
  return _internal_has_add_block()
      ? *response_.add_block_
      : reinterpret_cast< ::koinos::block_store::add_block_response&>(::koinos::block_store::_add_block_response_default_instance_);
}
inline const ::koinos::block_store::add_block_response& block_store_response::add_block() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_store_response.add_block)
  return _internal_add_block();
}
inline ::koinos::block_store::add_block_response* block_store_response::unsafe_arena_release_add_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.block_store.block_store_response.add_block)
  if (_internal_has_add_block()) {
    clear_has_response();
    ::koinos::block_store::add_block_response* temp = response_.add_block_;
    response_.add_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void block_store_response::unsafe_arena_set_allocated_add_block(::koinos::block_store::add_block_response* add_block) {
  clear_response();
  if (add_block) {
    set_has_add_block();
    response_.add_block_ = add_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_store_response.add_block)
}
inline ::koinos::block_store::add_block_response* block_store_response::_internal_mutable_add_block() {
  if (!_internal_has_add_block()) {
    clear_response();
    set_has_add_block();
    response_.add_block_ = CreateMaybeMessage< ::koinos::block_store::add_block_response >(GetArenaForAllocation());
  }
  return response_.add_block_;
}
inline ::koinos::block_store::add_block_response* block_store_response::mutable_add_block() {
  ::koinos::block_store::add_block_response* _msg = _internal_mutable_add_block();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_store_response.add_block)
  return _msg;
}

// .koinos.block_store.get_highest_block_response get_highest_block = 6;
inline bool block_store_response::_internal_has_get_highest_block() const {
  return response_case() == kGetHighestBlock;
}
inline bool block_store_response::has_get_highest_block() const {
  return _internal_has_get_highest_block();
}
inline void block_store_response::set_has_get_highest_block() {
  _oneof_case_[0] = kGetHighestBlock;
}
inline void block_store_response::clear_get_highest_block() {
  if (_internal_has_get_highest_block()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.get_highest_block_;
    }
    clear_has_response();
  }
}
inline ::koinos::block_store::get_highest_block_response* block_store_response::release_get_highest_block() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_store_response.get_highest_block)
  if (_internal_has_get_highest_block()) {
    clear_has_response();
      ::koinos::block_store::get_highest_block_response* temp = response_.get_highest_block_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_highest_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::block_store::get_highest_block_response& block_store_response::_internal_get_highest_block() const {
  return _internal_has_get_highest_block()
      ? *response_.get_highest_block_
      : reinterpret_cast< ::koinos::block_store::get_highest_block_response&>(::koinos::block_store::_get_highest_block_response_default_instance_);
}
inline const ::koinos::block_store::get_highest_block_response& block_store_response::get_highest_block() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_store_response.get_highest_block)
  return _internal_get_highest_block();
}
inline ::koinos::block_store::get_highest_block_response* block_store_response::unsafe_arena_release_get_highest_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.block_store.block_store_response.get_highest_block)
  if (_internal_has_get_highest_block()) {
    clear_has_response();
    ::koinos::block_store::get_highest_block_response* temp = response_.get_highest_block_;
    response_.get_highest_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void block_store_response::unsafe_arena_set_allocated_get_highest_block(::koinos::block_store::get_highest_block_response* get_highest_block) {
  clear_response();
  if (get_highest_block) {
    set_has_get_highest_block();
    response_.get_highest_block_ = get_highest_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_store_response.get_highest_block)
}
inline ::koinos::block_store::get_highest_block_response* block_store_response::_internal_mutable_get_highest_block() {
  if (!_internal_has_get_highest_block()) {
    clear_response();
    set_has_get_highest_block();
    response_.get_highest_block_ = CreateMaybeMessage< ::koinos::block_store::get_highest_block_response >(GetArenaForAllocation());
  }
  return response_.get_highest_block_;
}
inline ::koinos::block_store::get_highest_block_response* block_store_response::mutable_get_highest_block() {
  ::koinos::block_store::get_highest_block_response* _msg = _internal_mutable_get_highest_block();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_store_response.get_highest_block)
  return _msg;
}

inline bool block_store_response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void block_store_response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline block_store_response::ResponseCase block_store_response::response_case() const {
  return block_store_response::ResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace block_store
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fblock_5fstore_2frpc_2eproto
