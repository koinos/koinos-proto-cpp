// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/block_store/block_store.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fblock_5fstore_2fblock_5fstore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fblock_5fstore_2fblock_5fstore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/options.pb.h"
#include "koinos/protocol/protocol.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fblock_5fstore_2fblock_5fstore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fblock_5fstore_2fblock_5fstore_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fblock_5fstore_2fblock_5fstore_2eproto;
namespace koinos {
namespace block_store {
class block_item;
struct block_itemDefaultTypeInternal;
extern block_itemDefaultTypeInternal _block_item_default_instance_;
class block_record;
struct block_recordDefaultTypeInternal;
extern block_recordDefaultTypeInternal _block_record_default_instance_;
}  // namespace block_store
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::block_store::block_item* Arena::CreateMaybeMessage<::koinos::block_store::block_item>(Arena*);
template<> ::koinos::block_store::block_record* Arena::CreateMaybeMessage<::koinos::block_store::block_record>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace block_store {

// ===================================================================

class block_item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.block_store.block_item) */ {
 public:
  inline block_item() : block_item(nullptr) {}
  ~block_item() override;
  explicit constexpr block_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_item(const block_item& from);
  block_item(block_item&& from) noexcept
    : block_item() {
    *this = ::std::move(from);
  }

  inline block_item& operator=(const block_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_item& operator=(block_item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_item& default_instance() {
    return *internal_default_instance();
  }
  static inline const block_item* internal_default_instance() {
    return reinterpret_cast<const block_item*>(
               &_block_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(block_item& a, block_item& b) {
    a.Swap(&b);
  }
  inline void Swap(block_item* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_item* New() const final {
    return new block_item();
  }

  block_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_item& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.block_store.block_item";
  }
  protected:
  explicit block_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
    kBlockFieldNumber = 3,
    kReceiptFieldNumber = 4,
    kBlockHeightFieldNumber = 2,
  };
  // bytes block_id = 1 [(.koinos.koinos_bytes_type) = BLOCK_ID];
  void clear_block_id();
  const std::string& block_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);
  private:
  const std::string& _internal_block_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_id(const std::string& value);
  std::string* _internal_mutable_block_id();
  public:

  // .koinos.protocol.block block = 3;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::koinos::protocol::block& block() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::block* release_block();
  ::koinos::protocol::block* mutable_block();
  void set_allocated_block(::koinos::protocol::block* block);
  private:
  const ::koinos::protocol::block& _internal_block() const;
  ::koinos::protocol::block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::koinos::protocol::block* block);
  ::koinos::protocol::block* unsafe_arena_release_block();

  // .koinos.protocol.block_receipt receipt = 4;
  bool has_receipt() const;
  private:
  bool _internal_has_receipt() const;
  public:
  void clear_receipt();
  const ::koinos::protocol::block_receipt& receipt() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::block_receipt* release_receipt();
  ::koinos::protocol::block_receipt* mutable_receipt();
  void set_allocated_receipt(::koinos::protocol::block_receipt* receipt);
  private:
  const ::koinos::protocol::block_receipt& _internal_receipt() const;
  ::koinos::protocol::block_receipt* _internal_mutable_receipt();
  public:
  void unsafe_arena_set_allocated_receipt(
      ::koinos::protocol::block_receipt* receipt);
  ::koinos::protocol::block_receipt* unsafe_arena_release_receipt();

  // uint64 block_height = 2 [jstype = JS_STRING];
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.block_store.block_item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  ::koinos::protocol::block* block_;
  ::koinos::protocol::block_receipt* receipt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fblock_5fstore_2fblock_5fstore_2eproto;
};
// -------------------------------------------------------------------

class block_record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.block_store.block_record) */ {
 public:
  inline block_record() : block_record(nullptr) {}
  ~block_record() override;
  explicit constexpr block_record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  block_record(const block_record& from);
  block_record(block_record&& from) noexcept
    : block_record() {
    *this = ::std::move(from);
  }

  inline block_record& operator=(const block_record& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_record& operator=(block_record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const block_record& default_instance() {
    return *internal_default_instance();
  }
  static inline const block_record* internal_default_instance() {
    return reinterpret_cast<const block_record*>(
               &_block_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(block_record& a, block_record& b) {
    a.Swap(&b);
  }
  inline void Swap(block_record* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_record* New() const final {
    return new block_record();
  }

  block_record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const block_record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const block_record& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.block_store.block_record";
  }
  protected:
  explicit block_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousBlockIdsFieldNumber = 5,
    kBlockIdFieldNumber = 1,
    kBlockFieldNumber = 3,
    kReceiptFieldNumber = 4,
    kBlockHeightFieldNumber = 2,
  };
  // repeated bytes previous_block_ids = 5 [(.koinos.koinos_bytes_type) = BLOCK_ID];
  int previous_block_ids_size() const;
  private:
  int _internal_previous_block_ids_size() const;
  public:
  void clear_previous_block_ids();
  const std::string& previous_block_ids(int index) const;
  std::string* mutable_previous_block_ids(int index);
  void set_previous_block_ids(int index, const std::string& value);
  void set_previous_block_ids(int index, std::string&& value);
  void set_previous_block_ids(int index, const char* value);
  void set_previous_block_ids(int index, const void* value, size_t size);
  std::string* add_previous_block_ids();
  void add_previous_block_ids(const std::string& value);
  void add_previous_block_ids(std::string&& value);
  void add_previous_block_ids(const char* value);
  void add_previous_block_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& previous_block_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_previous_block_ids();
  private:
  const std::string& _internal_previous_block_ids(int index) const;
  std::string* _internal_add_previous_block_ids();
  public:

  // bytes block_id = 1 [(.koinos.koinos_bytes_type) = BLOCK_ID];
  void clear_block_id();
  const std::string& block_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);
  private:
  const std::string& _internal_block_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_id(const std::string& value);
  std::string* _internal_mutable_block_id();
  public:

  // .koinos.protocol.block block = 3;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::koinos::protocol::block& block() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::block* release_block();
  ::koinos::protocol::block* mutable_block();
  void set_allocated_block(::koinos::protocol::block* block);
  private:
  const ::koinos::protocol::block& _internal_block() const;
  ::koinos::protocol::block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::koinos::protocol::block* block);
  ::koinos::protocol::block* unsafe_arena_release_block();

  // .koinos.protocol.block_receipt receipt = 4;
  bool has_receipt() const;
  private:
  bool _internal_has_receipt() const;
  public:
  void clear_receipt();
  const ::koinos::protocol::block_receipt& receipt() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::block_receipt* release_receipt();
  ::koinos::protocol::block_receipt* mutable_receipt();
  void set_allocated_receipt(::koinos::protocol::block_receipt* receipt);
  private:
  const ::koinos::protocol::block_receipt& _internal_receipt() const;
  ::koinos::protocol::block_receipt* _internal_mutable_receipt();
  public:
  void unsafe_arena_set_allocated_receipt(
      ::koinos::protocol::block_receipt* receipt);
  ::koinos::protocol::block_receipt* unsafe_arena_release_receipt();

  // uint64 block_height = 2 [jstype = JS_STRING];
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.block_store.block_record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> previous_block_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  ::koinos::protocol::block* block_;
  ::koinos::protocol::block_receipt* receipt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fblock_5fstore_2fblock_5fstore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// block_item

// bytes block_id = 1 [(.koinos.koinos_bytes_type) = BLOCK_ID];
inline void block_item::clear_block_id() {
  block_id_.ClearToEmpty();
}
inline const std::string& block_item::block_id() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_item.block_id)
  return _internal_block_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void block_item::set_block_id(ArgT0&& arg0, ArgT... args) {
 
 block_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.block_store.block_item.block_id)
}
inline std::string* block_item::mutable_block_id() {
  std::string* _s = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_item.block_id)
  return _s;
}
inline const std::string& block_item::_internal_block_id() const {
  return block_id_.Get();
}
inline void block_item::_internal_set_block_id(const std::string& value) {
  
  block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* block_item::_internal_mutable_block_id() {
  
  return block_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* block_item::release_block_id() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_item.block_id)
  return block_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void block_item::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.block_store.block_item.block_id)
}

// uint64 block_height = 2 [jstype = JS_STRING];
inline void block_item::clear_block_height() {
  block_height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_item::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_item::block_height() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_item.block_height)
  return _internal_block_height();
}
inline void block_item::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_height_ = value;
}
inline void block_item::set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:koinos.block_store.block_item.block_height)
}

// .koinos.protocol.block block = 3;
inline bool block_item::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool block_item::has_block() const {
  return _internal_has_block();
}
inline const ::koinos::protocol::block& block_item::_internal_block() const {
  const ::koinos::protocol::block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block&>(
      ::koinos::protocol::_block_default_instance_);
}
inline const ::koinos::protocol::block& block_item::block() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_item.block)
  return _internal_block();
}
inline void block_item::unsafe_arena_set_allocated_block(
    ::koinos::protocol::block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_item.block)
}
inline ::koinos::protocol::block* block_item::release_block() {
  
  ::koinos::protocol::block* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::block* block_item::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_item.block)
  
  ::koinos::protocol::block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block* block_item::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::koinos::protocol::block* block_item::mutable_block() {
  ::koinos::protocol::block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_item.block)
  return _msg;
}
inline void block_item::set_allocated_block(::koinos::protocol::block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block));
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:koinos.block_store.block_item.block)
}

// .koinos.protocol.block_receipt receipt = 4;
inline bool block_item::_internal_has_receipt() const {
  return this != internal_default_instance() && receipt_ != nullptr;
}
inline bool block_item::has_receipt() const {
  return _internal_has_receipt();
}
inline const ::koinos::protocol::block_receipt& block_item::_internal_receipt() const {
  const ::koinos::protocol::block_receipt* p = receipt_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block_receipt&>(
      ::koinos::protocol::_block_receipt_default_instance_);
}
inline const ::koinos::protocol::block_receipt& block_item::receipt() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_item.receipt)
  return _internal_receipt();
}
inline void block_item::unsafe_arena_set_allocated_receipt(
    ::koinos::protocol::block_receipt* receipt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  receipt_ = receipt;
  if (receipt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_item.receipt)
}
inline ::koinos::protocol::block_receipt* block_item::release_receipt() {
  
  ::koinos::protocol::block_receipt* temp = receipt_;
  receipt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::block_receipt* block_item::unsafe_arena_release_receipt() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_item.receipt)
  
  ::koinos::protocol::block_receipt* temp = receipt_;
  receipt_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block_receipt* block_item::_internal_mutable_receipt() {
  
  if (receipt_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block_receipt>(GetArenaForAllocation());
    receipt_ = p;
  }
  return receipt_;
}
inline ::koinos::protocol::block_receipt* block_item::mutable_receipt() {
  ::koinos::protocol::block_receipt* _msg = _internal_mutable_receipt();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_item.receipt)
  return _msg;
}
inline void block_item::set_allocated_receipt(::koinos::protocol::block_receipt* receipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  if (receipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt));
    if (message_arena != submessage_arena) {
      receipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receipt, submessage_arena);
    }
    
  } else {
    
  }
  receipt_ = receipt;
  // @@protoc_insertion_point(field_set_allocated:koinos.block_store.block_item.receipt)
}

// -------------------------------------------------------------------

// block_record

// bytes block_id = 1 [(.koinos.koinos_bytes_type) = BLOCK_ID];
inline void block_record::clear_block_id() {
  block_id_.ClearToEmpty();
}
inline const std::string& block_record::block_id() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_record.block_id)
  return _internal_block_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void block_record::set_block_id(ArgT0&& arg0, ArgT... args) {
 
 block_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.block_store.block_record.block_id)
}
inline std::string* block_record::mutable_block_id() {
  std::string* _s = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_record.block_id)
  return _s;
}
inline const std::string& block_record::_internal_block_id() const {
  return block_id_.Get();
}
inline void block_record::_internal_set_block_id(const std::string& value) {
  
  block_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* block_record::_internal_mutable_block_id() {
  
  return block_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* block_record::release_block_id() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_record.block_id)
  return block_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void block_record::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.block_store.block_record.block_id)
}

// uint64 block_height = 2 [jstype = JS_STRING];
inline void block_record::clear_block_height() {
  block_height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_record::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_record::block_height() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_record.block_height)
  return _internal_block_height();
}
inline void block_record::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_height_ = value;
}
inline void block_record::set_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:koinos.block_store.block_record.block_height)
}

// .koinos.protocol.block block = 3;
inline bool block_record::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool block_record::has_block() const {
  return _internal_has_block();
}
inline const ::koinos::protocol::block& block_record::_internal_block() const {
  const ::koinos::protocol::block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block&>(
      ::koinos::protocol::_block_default_instance_);
}
inline const ::koinos::protocol::block& block_record::block() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_record.block)
  return _internal_block();
}
inline void block_record::unsafe_arena_set_allocated_block(
    ::koinos::protocol::block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_record.block)
}
inline ::koinos::protocol::block* block_record::release_block() {
  
  ::koinos::protocol::block* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::block* block_record::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_record.block)
  
  ::koinos::protocol::block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block* block_record::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::koinos::protocol::block* block_record::mutable_block() {
  ::koinos::protocol::block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_record.block)
  return _msg;
}
inline void block_record::set_allocated_block(::koinos::protocol::block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block));
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:koinos.block_store.block_record.block)
}

// .koinos.protocol.block_receipt receipt = 4;
inline bool block_record::_internal_has_receipt() const {
  return this != internal_default_instance() && receipt_ != nullptr;
}
inline bool block_record::has_receipt() const {
  return _internal_has_receipt();
}
inline const ::koinos::protocol::block_receipt& block_record::_internal_receipt() const {
  const ::koinos::protocol::block_receipt* p = receipt_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block_receipt&>(
      ::koinos::protocol::_block_receipt_default_instance_);
}
inline const ::koinos::protocol::block_receipt& block_record::receipt() const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_record.receipt)
  return _internal_receipt();
}
inline void block_record::unsafe_arena_set_allocated_receipt(
    ::koinos::protocol::block_receipt* receipt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  receipt_ = receipt;
  if (receipt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.block_store.block_record.receipt)
}
inline ::koinos::protocol::block_receipt* block_record::release_receipt() {
  
  ::koinos::protocol::block_receipt* temp = receipt_;
  receipt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::block_receipt* block_record::unsafe_arena_release_receipt() {
  // @@protoc_insertion_point(field_release:koinos.block_store.block_record.receipt)
  
  ::koinos::protocol::block_receipt* temp = receipt_;
  receipt_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block_receipt* block_record::_internal_mutable_receipt() {
  
  if (receipt_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block_receipt>(GetArenaForAllocation());
    receipt_ = p;
  }
  return receipt_;
}
inline ::koinos::protocol::block_receipt* block_record::mutable_receipt() {
  ::koinos::protocol::block_receipt* _msg = _internal_mutable_receipt();
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_record.receipt)
  return _msg;
}
inline void block_record::set_allocated_receipt(::koinos::protocol::block_receipt* receipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  if (receipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt));
    if (message_arena != submessage_arena) {
      receipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receipt, submessage_arena);
    }
    
  } else {
    
  }
  receipt_ = receipt;
  // @@protoc_insertion_point(field_set_allocated:koinos.block_store.block_record.receipt)
}

// repeated bytes previous_block_ids = 5 [(.koinos.koinos_bytes_type) = BLOCK_ID];
inline int block_record::_internal_previous_block_ids_size() const {
  return previous_block_ids_.size();
}
inline int block_record::previous_block_ids_size() const {
  return _internal_previous_block_ids_size();
}
inline void block_record::clear_previous_block_ids() {
  previous_block_ids_.Clear();
}
inline std::string* block_record::add_previous_block_ids() {
  std::string* _s = _internal_add_previous_block_ids();
  // @@protoc_insertion_point(field_add_mutable:koinos.block_store.block_record.previous_block_ids)
  return _s;
}
inline const std::string& block_record::_internal_previous_block_ids(int index) const {
  return previous_block_ids_.Get(index);
}
inline const std::string& block_record::previous_block_ids(int index) const {
  // @@protoc_insertion_point(field_get:koinos.block_store.block_record.previous_block_ids)
  return _internal_previous_block_ids(index);
}
inline std::string* block_record::mutable_previous_block_ids(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.block_store.block_record.previous_block_ids)
  return previous_block_ids_.Mutable(index);
}
inline void block_record::set_previous_block_ids(int index, const std::string& value) {
  previous_block_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:koinos.block_store.block_record.previous_block_ids)
}
inline void block_record::set_previous_block_ids(int index, std::string&& value) {
  previous_block_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:koinos.block_store.block_record.previous_block_ids)
}
inline void block_record::set_previous_block_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  previous_block_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:koinos.block_store.block_record.previous_block_ids)
}
inline void block_record::set_previous_block_ids(int index, const void* value, size_t size) {
  previous_block_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:koinos.block_store.block_record.previous_block_ids)
}
inline std::string* block_record::_internal_add_previous_block_ids() {
  return previous_block_ids_.Add();
}
inline void block_record::add_previous_block_ids(const std::string& value) {
  previous_block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:koinos.block_store.block_record.previous_block_ids)
}
inline void block_record::add_previous_block_ids(std::string&& value) {
  previous_block_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:koinos.block_store.block_record.previous_block_ids)
}
inline void block_record::add_previous_block_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  previous_block_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:koinos.block_store.block_record.previous_block_ids)
}
inline void block_record::add_previous_block_ids(const void* value, size_t size) {
  previous_block_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:koinos.block_store.block_record.previous_block_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
block_record::previous_block_ids() const {
  // @@protoc_insertion_point(field_list:koinos.block_store.block_record.previous_block_ids)
  return previous_block_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
block_record::mutable_previous_block_ids() {
  // @@protoc_insertion_point(field_mutable_list:koinos.block_store.block_record.previous_block_ids)
  return &previous_block_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace block_store
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fblock_5fstore_2fblock_5fstore_2eproto
