// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/transaction_store/transaction_store.proto

#include "koinos/transaction_store/transaction_store.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace transaction_store {
constexpr transaction_item::transaction_item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : containing_blocks_()
  , transaction_(nullptr){}
struct transaction_itemDefaultTypeInternal {
  constexpr transaction_itemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_itemDefaultTypeInternal() {}
  union {
    transaction_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_itemDefaultTypeInternal _transaction_item_default_instance_;
}  // namespace transaction_store
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::transaction_store::transaction_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::transaction_store::transaction_item, transaction_),
  PROTOBUF_FIELD_OFFSET(::koinos::transaction_store::transaction_item, containing_blocks_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::transaction_store::transaction_item)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::transaction_store::_transaction_item_default_instance_),
};

const char descriptor_table_protodef_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0koinos/transaction_store/transaction_s"
  "tore.proto\022\030koinos.transaction_store\032\024ko"
  "inos/options.proto\032\036koinos/protocol/prot"
  "ocol.proto\"f\n\020transaction_item\0221\n\013transa"
  "ction\030\001 \001(\0132\034.koinos.protocol.transactio"
  "n\022\037\n\021containing_blocks\030\002 \003(\014B\004\200\265\030\003BCZAgi"
  "thub.com/koinos/koinos-proto-golang/v2/k"
  "oinos/transaction_storeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto_deps[2] = {
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto = {
  false, false, 311, descriptor_table_protodef_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto, "koinos/transaction_store/transaction_store.proto", 
  &descriptor_table_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto_once, descriptor_table_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto::offsets,
  file_level_metadata_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto, file_level_enum_descriptors_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto, file_level_service_descriptors_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto_getter() {
  return &descriptor_table_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto(&descriptor_table_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto);
namespace koinos {
namespace transaction_store {

// ===================================================================

class transaction_item::_Internal {
 public:
  static const ::koinos::protocol::transaction& transaction(const transaction_item* msg);
};

const ::koinos::protocol::transaction&
transaction_item::_Internal::transaction(const transaction_item* msg) {
  return *msg->transaction_;
}
void transaction_item::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
transaction_item::transaction_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  containing_blocks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.transaction_store.transaction_item)
}
transaction_item::transaction_item(const transaction_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      containing_blocks_(from.containing_blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::koinos::protocol::transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.transaction_store.transaction_item)
}

inline void transaction_item::SharedCtor() {
transaction_ = nullptr;
}

transaction_item::~transaction_item() {
  // @@protoc_insertion_point(destructor:koinos.transaction_store.transaction_item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void transaction_item::ArenaDtor(void* object) {
  transaction_item* _this = reinterpret_cast< transaction_item* >(object);
  (void)_this;
}
void transaction_item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_item::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.transaction_store.transaction_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containing_blocks_.Clear();
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes containing_blocks = 2 [(.koinos.btype) = BLOCK_ID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_containing_blocks();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction_item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.transaction_store.transaction_item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // repeated bytes containing_blocks = 2 [(.koinos.btype) = BLOCK_ID];
  for (int i = 0, n = this->_internal_containing_blocks_size(); i < n; i++) {
    const auto& s = this->_internal_containing_blocks(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.transaction_store.transaction_item)
  return target;
}

size_t transaction_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.transaction_store.transaction_item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes containing_blocks = 2 [(.koinos.btype) = BLOCK_ID];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(containing_blocks_.size());
  for (int i = 0, n = containing_blocks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      containing_blocks_.Get(i));
  }

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_item::GetClassData() const { return &_class_data_; }

void transaction_item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transaction_item *>(to)->MergeFrom(
      static_cast<const transaction_item &>(from));
}


void transaction_item::MergeFrom(const transaction_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.transaction_store.transaction_item)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  containing_blocks_.MergeFrom(from.containing_blocks_);
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::koinos::protocol::transaction::MergeFrom(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_item::CopyFrom(const transaction_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.transaction_store.transaction_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_item::IsInitialized() const {
  return true;
}

void transaction_item::InternalSwap(transaction_item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  containing_blocks_.InternalSwap(&other->containing_blocks_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto_getter, &descriptor_table_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto_once,
      file_level_metadata_koinos_2ftransaction_5fstore_2ftransaction_5fstore_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace transaction_store
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::transaction_store::transaction_item* Arena::CreateMaybeMessage< ::koinos::transaction_store::transaction_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::transaction_store::transaction_item >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
