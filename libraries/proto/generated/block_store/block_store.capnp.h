// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: block_store.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 8000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "../common.capnp.h"
#include "../protocol/protocol.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(8024ab7d496f29f2);
CAPNP_DECLARE_SCHEMA(bedc648042e1373a);

}  // namespace schemas
}  // namespace capnp

namespace koinos {
namespace block_store {

struct BlockItem {
  BlockItem() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8024ab7d496f29f2, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BlockRecord {
  BlockRecord() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bedc648042e1373a, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class BlockItem::Reader {
public:
  typedef BlockItem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBlockID() const;
  inline  ::capnp::Data::Reader getBlockID() const;

  inline  ::uint64_t getBlockHeight() const;

  inline bool hasBlock() const;
  inline  ::koinos::Optional< ::koinos::protocol::Block>::Reader getBlock() const;

  inline bool hasReceipt() const;
  inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Reader getReceipt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BlockItem::Builder {
public:
  typedef BlockItem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBlockID();
  inline  ::capnp::Data::Builder getBlockID();
  inline void setBlockID( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initBlockID(unsigned int size);
  inline void adoptBlockID(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownBlockID();

  inline  ::uint64_t getBlockHeight();
  inline void setBlockHeight( ::uint64_t value);

  inline bool hasBlock();
  inline  ::koinos::Optional< ::koinos::protocol::Block>::Builder getBlock();
  inline void setBlock( ::koinos::Optional< ::koinos::protocol::Block>::Reader value);
  inline  ::koinos::Optional< ::koinos::protocol::Block>::Builder initBlock();
  inline void adoptBlock(::capnp::Orphan< ::koinos::Optional< ::koinos::protocol::Block>>&& value);
  inline ::capnp::Orphan< ::koinos::Optional< ::koinos::protocol::Block>> disownBlock();

  inline bool hasReceipt();
  inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Builder getReceipt();
  inline void setReceipt( ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Reader value);
  inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Builder initReceipt();
  inline void adoptReceipt(::capnp::Orphan< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>&& value);
  inline ::capnp::Orphan< ::koinos::Optional< ::koinos::protocol::BlockReceipt>> disownReceipt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BlockItem::Pipeline {
public:
  typedef BlockItem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::koinos::Optional< ::koinos::protocol::Block>::Pipeline getBlock();
  inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Pipeline getReceipt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BlockRecord::Reader {
public:
  typedef BlockRecord Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBlockID() const;
  inline  ::capnp::Data::Reader getBlockID() const;

  inline  ::uint64_t getBlockHeight() const;

  inline bool hasPreviousBlockIDs() const;
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader getPreviousBlockIDs() const;

  inline bool hasBlock() const;
  inline  ::koinos::protocol::Block::Reader getBlock() const;

  inline bool hasBlockReceipt() const;
  inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Reader getBlockReceipt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BlockRecord::Builder {
public:
  typedef BlockRecord Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBlockID();
  inline  ::capnp::Data::Builder getBlockID();
  inline void setBlockID( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initBlockID(unsigned int size);
  inline void adoptBlockID(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownBlockID();

  inline  ::uint64_t getBlockHeight();
  inline void setBlockHeight( ::uint64_t value);

  inline bool hasPreviousBlockIDs();
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder getPreviousBlockIDs();
  inline void setPreviousBlockIDs( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value);
  inline void setPreviousBlockIDs(::kj::ArrayPtr<const  ::capnp::Data::Reader> value);
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder initPreviousBlockIDs(unsigned int size);
  inline void adoptPreviousBlockIDs(::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> disownPreviousBlockIDs();

  inline bool hasBlock();
  inline  ::koinos::protocol::Block::Builder getBlock();
  inline void setBlock( ::koinos::protocol::Block::Reader value);
  inline  ::koinos::protocol::Block::Builder initBlock();
  inline void adoptBlock(::capnp::Orphan< ::koinos::protocol::Block>&& value);
  inline ::capnp::Orphan< ::koinos::protocol::Block> disownBlock();

  inline bool hasBlockReceipt();
  inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Builder getBlockReceipt();
  inline void setBlockReceipt( ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Reader value);
  inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Builder initBlockReceipt();
  inline void adoptBlockReceipt(::capnp::Orphan< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>&& value);
  inline ::capnp::Orphan< ::koinos::Optional< ::koinos::protocol::BlockReceipt>> disownBlockReceipt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BlockRecord::Pipeline {
public:
  typedef BlockRecord Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::koinos::protocol::Block::Pipeline getBlock();
  inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Pipeline getBlockReceipt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool BlockItem::Reader::hasBlockID() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockItem::Builder::hasBlockID() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader BlockItem::Reader::getBlockID() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder BlockItem::Builder::getBlockID() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockItem::Builder::setBlockID( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder BlockItem::Builder::initBlockID(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BlockItem::Builder::adoptBlockID(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> BlockItem::Builder::disownBlockID() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t BlockItem::Reader::getBlockHeight() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t BlockItem::Builder::getBlockHeight() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BlockItem::Builder::setBlockHeight( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool BlockItem::Reader::hasBlock() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool BlockItem::Builder::hasBlock() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::Optional< ::koinos::protocol::Block>::Reader BlockItem::Reader::getBlock() const {
  return ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::Block>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::koinos::Optional< ::koinos::protocol::Block>::Builder BlockItem::Builder::getBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::Block>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::Optional< ::koinos::protocol::Block>::Pipeline BlockItem::Pipeline::getBlock() {
  return  ::koinos::Optional< ::koinos::protocol::Block>::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void BlockItem::Builder::setBlock( ::koinos::Optional< ::koinos::protocol::Block>::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::Block>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::koinos::Optional< ::koinos::protocol::Block>::Builder BlockItem::Builder::initBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::Block>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void BlockItem::Builder::adoptBlock(
    ::capnp::Orphan< ::koinos::Optional< ::koinos::protocol::Block>>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::Block>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::Optional< ::koinos::protocol::Block>> BlockItem::Builder::disownBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::Block>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool BlockItem::Reader::hasReceipt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool BlockItem::Builder::hasReceipt() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Reader BlockItem::Reader::getReceipt() const {
  return ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Builder BlockItem::Builder::getReceipt() {
  return ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Pipeline BlockItem::Pipeline::getReceipt() {
  return  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void BlockItem::Builder::setReceipt( ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Builder BlockItem::Builder::initReceipt() {
  return ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void BlockItem::Builder::adoptReceipt(
    ::capnp::Orphan< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::Optional< ::koinos::protocol::BlockReceipt>> BlockItem::Builder::disownReceipt() {
  return ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool BlockRecord::Reader::hasBlockID() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BlockRecord::Builder::hasBlockID() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader BlockRecord::Reader::getBlockID() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder BlockRecord::Builder::getBlockID() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BlockRecord::Builder::setBlockID( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder BlockRecord::Builder::initBlockID(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BlockRecord::Builder::adoptBlockID(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> BlockRecord::Builder::disownBlockID() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t BlockRecord::Reader::getBlockHeight() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t BlockRecord::Builder::getBlockHeight() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BlockRecord::Builder::setBlockHeight( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool BlockRecord::Reader::hasPreviousBlockIDs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool BlockRecord::Builder::hasPreviousBlockIDs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader BlockRecord::Reader::getPreviousBlockIDs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder BlockRecord::Builder::getPreviousBlockIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void BlockRecord::Builder::setPreviousBlockIDs( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void BlockRecord::Builder::setPreviousBlockIDs(::kj::ArrayPtr<const  ::capnp::Data::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder BlockRecord::Builder::initPreviousBlockIDs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void BlockRecord::Builder::adoptPreviousBlockIDs(
    ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> BlockRecord::Builder::disownPreviousBlockIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool BlockRecord::Reader::hasBlock() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool BlockRecord::Builder::hasBlock() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::protocol::Block::Reader BlockRecord::Reader::getBlock() const {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::koinos::protocol::Block::Builder BlockRecord::Builder::getBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::protocol::Block::Pipeline BlockRecord::Pipeline::getBlock() {
  return  ::koinos::protocol::Block::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void BlockRecord::Builder::setBlock( ::koinos::protocol::Block::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::koinos::protocol::Block::Builder BlockRecord::Builder::initBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void BlockRecord::Builder::adoptBlock(
    ::capnp::Orphan< ::koinos::protocol::Block>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::protocol::Block> BlockRecord::Builder::disownBlock() {
  return ::capnp::_::PointerHelpers< ::koinos::protocol::Block>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool BlockRecord::Reader::hasBlockReceipt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool BlockRecord::Builder::hasBlockReceipt() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Reader BlockRecord::Reader::getBlockReceipt() const {
  return ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Builder BlockRecord::Builder::getBlockReceipt() {
  return ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Pipeline BlockRecord::Pipeline::getBlockReceipt() {
  return  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void BlockRecord::Builder::setBlockReceipt( ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Reader value) {
  ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::koinos::Optional< ::koinos::protocol::BlockReceipt>::Builder BlockRecord::Builder::initBlockReceipt() {
  return ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void BlockRecord::Builder::adoptBlockReceipt(
    ::capnp::Orphan< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>&& value) {
  ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::koinos::Optional< ::koinos::protocol::BlockReceipt>> BlockRecord::Builder::disownBlockReceipt() {
  return ::capnp::_::PointerHelpers< ::koinos::Optional< ::koinos::protocol::BlockReceipt>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

