// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/contracts/resources/resources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fresources_2fresources_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fresources_2fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fcontracts_2fresources_2fresources_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fcontracts_2fresources_2fresources_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto;
namespace koinos {
namespace contracts {
namespace resources {
class get_resource_markets_arguments;
struct get_resource_markets_argumentsDefaultTypeInternal;
extern get_resource_markets_argumentsDefaultTypeInternal _get_resource_markets_arguments_default_instance_;
class get_resource_markets_result;
struct get_resource_markets_resultDefaultTypeInternal;
extern get_resource_markets_resultDefaultTypeInternal _get_resource_markets_result_default_instance_;
class market;
struct marketDefaultTypeInternal;
extern marketDefaultTypeInternal _market_default_instance_;
class resource_markets;
struct resource_marketsDefaultTypeInternal;
extern resource_marketsDefaultTypeInternal _resource_markets_default_instance_;
}  // namespace resources
}  // namespace contracts
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::contracts::resources::get_resource_markets_arguments* Arena::CreateMaybeMessage<::koinos::contracts::resources::get_resource_markets_arguments>(Arena*);
template<> ::koinos::contracts::resources::get_resource_markets_result* Arena::CreateMaybeMessage<::koinos::contracts::resources::get_resource_markets_result>(Arena*);
template<> ::koinos::contracts::resources::market* Arena::CreateMaybeMessage<::koinos::contracts::resources::market>(Arena*);
template<> ::koinos::contracts::resources::resource_markets* Arena::CreateMaybeMessage<::koinos::contracts::resources::resource_markets>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace contracts {
namespace resources {

// ===================================================================

class market final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.resources.market) */ {
 public:
  inline market() : market(nullptr) {}
  ~market() override;
  explicit constexpr market(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  market(const market& from);
  market(market&& from) noexcept
    : market() {
    *this = ::std::move(from);
  }

  inline market& operator=(const market& from) {
    CopyFrom(from);
    return *this;
  }
  inline market& operator=(market&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const market& default_instance() {
    return *internal_default_instance();
  }
  static inline const market* internal_default_instance() {
    return reinterpret_cast<const market*>(
               &_market_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(market& a, market& b) {
    a.Swap(&b);
  }
  inline void Swap(market* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(market* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline market* New() const final {
    return new market();
  }

  market* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<market>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const market& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const market& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(market* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.resources.market";
  }
  protected:
  explicit market(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceSupplyFieldNumber = 1,
    kRcReserveFieldNumber = 2,
    kBlockBudgetFieldNumber = 3,
    kBlockLimitFieldNumber = 4,
  };
  // uint64 resource_supply = 1 [jstype = JS_STRING];
  void clear_resource_supply();
  ::PROTOBUF_NAMESPACE_ID::uint64 resource_supply() const;
  void set_resource_supply(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_resource_supply() const;
  void _internal_set_resource_supply(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 rc_reserve = 2 [jstype = JS_STRING];
  void clear_rc_reserve();
  ::PROTOBUF_NAMESPACE_ID::uint64 rc_reserve() const;
  void set_rc_reserve(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rc_reserve() const;
  void _internal_set_rc_reserve(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 block_budget = 3 [jstype = JS_STRING];
  void clear_block_budget();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_budget() const;
  void set_block_budget(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_budget() const;
  void _internal_set_block_budget(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 block_limit = 4 [jstype = JS_STRING];
  void clear_block_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_limit() const;
  void set_block_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_limit() const;
  void _internal_set_block_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.resources.market)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 resource_supply_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rc_reserve_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_budget_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fresources_2fresources_2eproto;
};
// -------------------------------------------------------------------

class resource_markets final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.resources.resource_markets) */ {
 public:
  inline resource_markets() : resource_markets(nullptr) {}
  ~resource_markets() override;
  explicit constexpr resource_markets(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  resource_markets(const resource_markets& from);
  resource_markets(resource_markets&& from) noexcept
    : resource_markets() {
    *this = ::std::move(from);
  }

  inline resource_markets& operator=(const resource_markets& from) {
    CopyFrom(from);
    return *this;
  }
  inline resource_markets& operator=(resource_markets&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const resource_markets& default_instance() {
    return *internal_default_instance();
  }
  static inline const resource_markets* internal_default_instance() {
    return reinterpret_cast<const resource_markets*>(
               &_resource_markets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(resource_markets& a, resource_markets& b) {
    a.Swap(&b);
  }
  inline void Swap(resource_markets* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(resource_markets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline resource_markets* New() const final {
    return new resource_markets();
  }

  resource_markets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<resource_markets>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const resource_markets& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const resource_markets& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(resource_markets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.resources.resource_markets";
  }
  protected:
  explicit resource_markets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiskStorageFieldNumber = 1,
    kNetworkBandwidthFieldNumber = 2,
    kComputeBandwidthFieldNumber = 3,
  };
  // .koinos.contracts.resources.market disk_storage = 1;
  bool has_disk_storage() const;
  private:
  bool _internal_has_disk_storage() const;
  public:
  void clear_disk_storage();
  const ::koinos::contracts::resources::market& disk_storage() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::contracts::resources::market* release_disk_storage();
  ::koinos::contracts::resources::market* mutable_disk_storage();
  void set_allocated_disk_storage(::koinos::contracts::resources::market* disk_storage);
  private:
  const ::koinos::contracts::resources::market& _internal_disk_storage() const;
  ::koinos::contracts::resources::market* _internal_mutable_disk_storage();
  public:
  void unsafe_arena_set_allocated_disk_storage(
      ::koinos::contracts::resources::market* disk_storage);
  ::koinos::contracts::resources::market* unsafe_arena_release_disk_storage();

  // .koinos.contracts.resources.market network_bandwidth = 2;
  bool has_network_bandwidth() const;
  private:
  bool _internal_has_network_bandwidth() const;
  public:
  void clear_network_bandwidth();
  const ::koinos::contracts::resources::market& network_bandwidth() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::contracts::resources::market* release_network_bandwidth();
  ::koinos::contracts::resources::market* mutable_network_bandwidth();
  void set_allocated_network_bandwidth(::koinos::contracts::resources::market* network_bandwidth);
  private:
  const ::koinos::contracts::resources::market& _internal_network_bandwidth() const;
  ::koinos::contracts::resources::market* _internal_mutable_network_bandwidth();
  public:
  void unsafe_arena_set_allocated_network_bandwidth(
      ::koinos::contracts::resources::market* network_bandwidth);
  ::koinos::contracts::resources::market* unsafe_arena_release_network_bandwidth();

  // .koinos.contracts.resources.market compute_bandwidth = 3;
  bool has_compute_bandwidth() const;
  private:
  bool _internal_has_compute_bandwidth() const;
  public:
  void clear_compute_bandwidth();
  const ::koinos::contracts::resources::market& compute_bandwidth() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::contracts::resources::market* release_compute_bandwidth();
  ::koinos::contracts::resources::market* mutable_compute_bandwidth();
  void set_allocated_compute_bandwidth(::koinos::contracts::resources::market* compute_bandwidth);
  private:
  const ::koinos::contracts::resources::market& _internal_compute_bandwidth() const;
  ::koinos::contracts::resources::market* _internal_mutable_compute_bandwidth();
  public:
  void unsafe_arena_set_allocated_compute_bandwidth(
      ::koinos::contracts::resources::market* compute_bandwidth);
  ::koinos::contracts::resources::market* unsafe_arena_release_compute_bandwidth();

  // @@protoc_insertion_point(class_scope:koinos.contracts.resources.resource_markets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::contracts::resources::market* disk_storage_;
  ::koinos::contracts::resources::market* network_bandwidth_;
  ::koinos::contracts::resources::market* compute_bandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fresources_2fresources_2eproto;
};
// -------------------------------------------------------------------

class get_resource_markets_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.resources.get_resource_markets_arguments) */ {
 public:
  inline get_resource_markets_arguments() : get_resource_markets_arguments(nullptr) {}
  ~get_resource_markets_arguments() override;
  explicit constexpr get_resource_markets_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_resource_markets_arguments(const get_resource_markets_arguments& from);
  get_resource_markets_arguments(get_resource_markets_arguments&& from) noexcept
    : get_resource_markets_arguments() {
    *this = ::std::move(from);
  }

  inline get_resource_markets_arguments& operator=(const get_resource_markets_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_resource_markets_arguments& operator=(get_resource_markets_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_resource_markets_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_resource_markets_arguments* internal_default_instance() {
    return reinterpret_cast<const get_resource_markets_arguments*>(
               &_get_resource_markets_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(get_resource_markets_arguments& a, get_resource_markets_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(get_resource_markets_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_resource_markets_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_resource_markets_arguments* New() const final {
    return new get_resource_markets_arguments();
  }

  get_resource_markets_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_resource_markets_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_resource_markets_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_resource_markets_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_resource_markets_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.resources.get_resource_markets_arguments";
  }
  protected:
  explicit get_resource_markets_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.resources.get_resource_markets_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fresources_2fresources_2eproto;
};
// -------------------------------------------------------------------

class get_resource_markets_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.resources.get_resource_markets_result) */ {
 public:
  inline get_resource_markets_result() : get_resource_markets_result(nullptr) {}
  ~get_resource_markets_result() override;
  explicit constexpr get_resource_markets_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_resource_markets_result(const get_resource_markets_result& from);
  get_resource_markets_result(get_resource_markets_result&& from) noexcept
    : get_resource_markets_result() {
    *this = ::std::move(from);
  }

  inline get_resource_markets_result& operator=(const get_resource_markets_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_resource_markets_result& operator=(get_resource_markets_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_resource_markets_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_resource_markets_result* internal_default_instance() {
    return reinterpret_cast<const get_resource_markets_result*>(
               &_get_resource_markets_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(get_resource_markets_result& a, get_resource_markets_result& b) {
    a.Swap(&b);
  }
  inline void Swap(get_resource_markets_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_resource_markets_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_resource_markets_result* New() const final {
    return new get_resource_markets_result();
  }

  get_resource_markets_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_resource_markets_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_resource_markets_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_resource_markets_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_resource_markets_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.resources.get_resource_markets_result";
  }
  protected:
  explicit get_resource_markets_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .koinos.contracts.resources.resource_markets value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::koinos::contracts::resources::resource_markets& value() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::contracts::resources::resource_markets* release_value();
  ::koinos::contracts::resources::resource_markets* mutable_value();
  void set_allocated_value(::koinos::contracts::resources::resource_markets* value);
  private:
  const ::koinos::contracts::resources::resource_markets& _internal_value() const;
  ::koinos::contracts::resources::resource_markets* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::koinos::contracts::resources::resource_markets* value);
  ::koinos::contracts::resources::resource_markets* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:koinos.contracts.resources.get_resource_markets_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::contracts::resources::resource_markets* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fresources_2fresources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// market

// uint64 resource_supply = 1 [jstype = JS_STRING];
inline void market::clear_resource_supply() {
  resource_supply_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 market::_internal_resource_supply() const {
  return resource_supply_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 market::resource_supply() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.resources.market.resource_supply)
  return _internal_resource_supply();
}
inline void market::_internal_set_resource_supply(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  resource_supply_ = value;
}
inline void market::set_resource_supply(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_resource_supply(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.resources.market.resource_supply)
}

// uint64 rc_reserve = 2 [jstype = JS_STRING];
inline void market::clear_rc_reserve() {
  rc_reserve_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 market::_internal_rc_reserve() const {
  return rc_reserve_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 market::rc_reserve() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.resources.market.rc_reserve)
  return _internal_rc_reserve();
}
inline void market::_internal_set_rc_reserve(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  rc_reserve_ = value;
}
inline void market::set_rc_reserve(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rc_reserve(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.resources.market.rc_reserve)
}

// uint64 block_budget = 3 [jstype = JS_STRING];
inline void market::clear_block_budget() {
  block_budget_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 market::_internal_block_budget() const {
  return block_budget_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 market::block_budget() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.resources.market.block_budget)
  return _internal_block_budget();
}
inline void market::_internal_set_block_budget(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_budget_ = value;
}
inline void market::set_block_budget(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_budget(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.resources.market.block_budget)
}

// uint64 block_limit = 4 [jstype = JS_STRING];
inline void market::clear_block_limit() {
  block_limit_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 market::_internal_block_limit() const {
  return block_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 market::block_limit() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.resources.market.block_limit)
  return _internal_block_limit();
}
inline void market::_internal_set_block_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_limit_ = value;
}
inline void market::set_block_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_limit(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.resources.market.block_limit)
}

// -------------------------------------------------------------------

// resource_markets

// .koinos.contracts.resources.market disk_storage = 1;
inline bool resource_markets::_internal_has_disk_storage() const {
  return this != internal_default_instance() && disk_storage_ != nullptr;
}
inline bool resource_markets::has_disk_storage() const {
  return _internal_has_disk_storage();
}
inline void resource_markets::clear_disk_storage() {
  if (GetArenaForAllocation() == nullptr && disk_storage_ != nullptr) {
    delete disk_storage_;
  }
  disk_storage_ = nullptr;
}
inline const ::koinos::contracts::resources::market& resource_markets::_internal_disk_storage() const {
  const ::koinos::contracts::resources::market* p = disk_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::contracts::resources::market&>(
      ::koinos::contracts::resources::_market_default_instance_);
}
inline const ::koinos::contracts::resources::market& resource_markets::disk_storage() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.resources.resource_markets.disk_storage)
  return _internal_disk_storage();
}
inline void resource_markets::unsafe_arena_set_allocated_disk_storage(
    ::koinos::contracts::resources::market* disk_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disk_storage_);
  }
  disk_storage_ = disk_storage;
  if (disk_storage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.contracts.resources.resource_markets.disk_storage)
}
inline ::koinos::contracts::resources::market* resource_markets::release_disk_storage() {
  
  ::koinos::contracts::resources::market* temp = disk_storage_;
  disk_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::contracts::resources::market* resource_markets::unsafe_arena_release_disk_storage() {
  // @@protoc_insertion_point(field_release:koinos.contracts.resources.resource_markets.disk_storage)
  
  ::koinos::contracts::resources::market* temp = disk_storage_;
  disk_storage_ = nullptr;
  return temp;
}
inline ::koinos::contracts::resources::market* resource_markets::_internal_mutable_disk_storage() {
  
  if (disk_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::contracts::resources::market>(GetArenaForAllocation());
    disk_storage_ = p;
  }
  return disk_storage_;
}
inline ::koinos::contracts::resources::market* resource_markets::mutable_disk_storage() {
  ::koinos::contracts::resources::market* _msg = _internal_mutable_disk_storage();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.resources.resource_markets.disk_storage)
  return _msg;
}
inline void resource_markets::set_allocated_disk_storage(::koinos::contracts::resources::market* disk_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete disk_storage_;
  }
  if (disk_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::contracts::resources::market>::GetOwningArena(disk_storage);
    if (message_arena != submessage_arena) {
      disk_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disk_storage, submessage_arena);
    }
    
  } else {
    
  }
  disk_storage_ = disk_storage;
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.resources.resource_markets.disk_storage)
}

// .koinos.contracts.resources.market network_bandwidth = 2;
inline bool resource_markets::_internal_has_network_bandwidth() const {
  return this != internal_default_instance() && network_bandwidth_ != nullptr;
}
inline bool resource_markets::has_network_bandwidth() const {
  return _internal_has_network_bandwidth();
}
inline void resource_markets::clear_network_bandwidth() {
  if (GetArenaForAllocation() == nullptr && network_bandwidth_ != nullptr) {
    delete network_bandwidth_;
  }
  network_bandwidth_ = nullptr;
}
inline const ::koinos::contracts::resources::market& resource_markets::_internal_network_bandwidth() const {
  const ::koinos::contracts::resources::market* p = network_bandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::contracts::resources::market&>(
      ::koinos::contracts::resources::_market_default_instance_);
}
inline const ::koinos::contracts::resources::market& resource_markets::network_bandwidth() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.resources.resource_markets.network_bandwidth)
  return _internal_network_bandwidth();
}
inline void resource_markets::unsafe_arena_set_allocated_network_bandwidth(
    ::koinos::contracts::resources::market* network_bandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_bandwidth_);
  }
  network_bandwidth_ = network_bandwidth;
  if (network_bandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.contracts.resources.resource_markets.network_bandwidth)
}
inline ::koinos::contracts::resources::market* resource_markets::release_network_bandwidth() {
  
  ::koinos::contracts::resources::market* temp = network_bandwidth_;
  network_bandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::contracts::resources::market* resource_markets::unsafe_arena_release_network_bandwidth() {
  // @@protoc_insertion_point(field_release:koinos.contracts.resources.resource_markets.network_bandwidth)
  
  ::koinos::contracts::resources::market* temp = network_bandwidth_;
  network_bandwidth_ = nullptr;
  return temp;
}
inline ::koinos::contracts::resources::market* resource_markets::_internal_mutable_network_bandwidth() {
  
  if (network_bandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::contracts::resources::market>(GetArenaForAllocation());
    network_bandwidth_ = p;
  }
  return network_bandwidth_;
}
inline ::koinos::contracts::resources::market* resource_markets::mutable_network_bandwidth() {
  ::koinos::contracts::resources::market* _msg = _internal_mutable_network_bandwidth();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.resources.resource_markets.network_bandwidth)
  return _msg;
}
inline void resource_markets::set_allocated_network_bandwidth(::koinos::contracts::resources::market* network_bandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete network_bandwidth_;
  }
  if (network_bandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::contracts::resources::market>::GetOwningArena(network_bandwidth);
    if (message_arena != submessage_arena) {
      network_bandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_bandwidth, submessage_arena);
    }
    
  } else {
    
  }
  network_bandwidth_ = network_bandwidth;
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.resources.resource_markets.network_bandwidth)
}

// .koinos.contracts.resources.market compute_bandwidth = 3;
inline bool resource_markets::_internal_has_compute_bandwidth() const {
  return this != internal_default_instance() && compute_bandwidth_ != nullptr;
}
inline bool resource_markets::has_compute_bandwidth() const {
  return _internal_has_compute_bandwidth();
}
inline void resource_markets::clear_compute_bandwidth() {
  if (GetArenaForAllocation() == nullptr && compute_bandwidth_ != nullptr) {
    delete compute_bandwidth_;
  }
  compute_bandwidth_ = nullptr;
}
inline const ::koinos::contracts::resources::market& resource_markets::_internal_compute_bandwidth() const {
  const ::koinos::contracts::resources::market* p = compute_bandwidth_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::contracts::resources::market&>(
      ::koinos::contracts::resources::_market_default_instance_);
}
inline const ::koinos::contracts::resources::market& resource_markets::compute_bandwidth() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.resources.resource_markets.compute_bandwidth)
  return _internal_compute_bandwidth();
}
inline void resource_markets::unsafe_arena_set_allocated_compute_bandwidth(
    ::koinos::contracts::resources::market* compute_bandwidth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compute_bandwidth_);
  }
  compute_bandwidth_ = compute_bandwidth;
  if (compute_bandwidth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.contracts.resources.resource_markets.compute_bandwidth)
}
inline ::koinos::contracts::resources::market* resource_markets::release_compute_bandwidth() {
  
  ::koinos::contracts::resources::market* temp = compute_bandwidth_;
  compute_bandwidth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::contracts::resources::market* resource_markets::unsafe_arena_release_compute_bandwidth() {
  // @@protoc_insertion_point(field_release:koinos.contracts.resources.resource_markets.compute_bandwidth)
  
  ::koinos::contracts::resources::market* temp = compute_bandwidth_;
  compute_bandwidth_ = nullptr;
  return temp;
}
inline ::koinos::contracts::resources::market* resource_markets::_internal_mutable_compute_bandwidth() {
  
  if (compute_bandwidth_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::contracts::resources::market>(GetArenaForAllocation());
    compute_bandwidth_ = p;
  }
  return compute_bandwidth_;
}
inline ::koinos::contracts::resources::market* resource_markets::mutable_compute_bandwidth() {
  ::koinos::contracts::resources::market* _msg = _internal_mutable_compute_bandwidth();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.resources.resource_markets.compute_bandwidth)
  return _msg;
}
inline void resource_markets::set_allocated_compute_bandwidth(::koinos::contracts::resources::market* compute_bandwidth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete compute_bandwidth_;
  }
  if (compute_bandwidth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::contracts::resources::market>::GetOwningArena(compute_bandwidth);
    if (message_arena != submessage_arena) {
      compute_bandwidth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compute_bandwidth, submessage_arena);
    }
    
  } else {
    
  }
  compute_bandwidth_ = compute_bandwidth;
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.resources.resource_markets.compute_bandwidth)
}

// -------------------------------------------------------------------

// get_resource_markets_arguments

// -------------------------------------------------------------------

// get_resource_markets_result

// .koinos.contracts.resources.resource_markets value = 1;
inline bool get_resource_markets_result::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool get_resource_markets_result::has_value() const {
  return _internal_has_value();
}
inline void get_resource_markets_result::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::koinos::contracts::resources::resource_markets& get_resource_markets_result::_internal_value() const {
  const ::koinos::contracts::resources::resource_markets* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::contracts::resources::resource_markets&>(
      ::koinos::contracts::resources::_resource_markets_default_instance_);
}
inline const ::koinos::contracts::resources::resource_markets& get_resource_markets_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.resources.get_resource_markets_result.value)
  return _internal_value();
}
inline void get_resource_markets_result::unsafe_arena_set_allocated_value(
    ::koinos::contracts::resources::resource_markets* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.contracts.resources.get_resource_markets_result.value)
}
inline ::koinos::contracts::resources::resource_markets* get_resource_markets_result::release_value() {
  
  ::koinos::contracts::resources::resource_markets* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::contracts::resources::resource_markets* get_resource_markets_result::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:koinos.contracts.resources.get_resource_markets_result.value)
  
  ::koinos::contracts::resources::resource_markets* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::koinos::contracts::resources::resource_markets* get_resource_markets_result::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::contracts::resources::resource_markets>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::koinos::contracts::resources::resource_markets* get_resource_markets_result::mutable_value() {
  ::koinos::contracts::resources::resource_markets* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.resources.get_resource_markets_result.value)
  return _msg;
}
inline void get_resource_markets_result::set_allocated_value(::koinos::contracts::resources::resource_markets* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::contracts::resources::resource_markets>::GetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.resources.get_resource_markets_result.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace resources
}  // namespace contracts
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fresources_2fresources_2eproto
