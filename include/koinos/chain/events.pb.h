// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/chain/events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2fevents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2fevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/options.pb.h"
#include "koinos/protocol/protocol.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fchain_2fevents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fchain_2fevents_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fchain_2fevents_2eproto;
namespace koinos {
namespace chain {
class set_system_call_event;
struct set_system_call_eventDefaultTypeInternal;
extern set_system_call_eventDefaultTypeInternal _set_system_call_event_default_instance_;
class set_system_contract_event;
struct set_system_contract_eventDefaultTypeInternal;
extern set_system_contract_eventDefaultTypeInternal _set_system_contract_event_default_instance_;
}  // namespace chain
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::chain::set_system_call_event* Arena::CreateMaybeMessage<::koinos::chain::set_system_call_event>(Arena*);
template<> ::koinos::chain::set_system_contract_event* Arena::CreateMaybeMessage<::koinos::chain::set_system_contract_event>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace chain {

// ===================================================================

class set_system_call_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.set_system_call_event) */ {
 public:
  inline set_system_call_event() : set_system_call_event(nullptr) {}
  ~set_system_call_event() override;
  explicit constexpr set_system_call_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set_system_call_event(const set_system_call_event& from);
  set_system_call_event(set_system_call_event&& from) noexcept
    : set_system_call_event() {
    *this = ::std::move(from);
  }

  inline set_system_call_event& operator=(const set_system_call_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_system_call_event& operator=(set_system_call_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set_system_call_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const set_system_call_event* internal_default_instance() {
    return reinterpret_cast<const set_system_call_event*>(
               &_set_system_call_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(set_system_call_event& a, set_system_call_event& b) {
    a.Swap(&b);
  }
  inline void Swap(set_system_call_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_system_call_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_system_call_event* New() const final {
    return new set_system_call_event();
  }

  set_system_call_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_system_call_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set_system_call_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const set_system_call_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_system_call_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.set_system_call_event";
  }
  protected:
  explicit set_system_call_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 2,
    kCallIdFieldNumber = 1,
  };
  // .koinos.protocol.system_call_target target = 2;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::koinos::protocol::system_call_target& target() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::protocol::system_call_target* release_target();
  ::koinos::protocol::system_call_target* mutable_target();
  void set_allocated_target(::koinos::protocol::system_call_target* target);
  private:
  const ::koinos::protocol::system_call_target& _internal_target() const;
  ::koinos::protocol::system_call_target* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::koinos::protocol::system_call_target* target);
  ::koinos::protocol::system_call_target* unsafe_arena_release_target();

  // uint32 call_id = 1;
  void clear_call_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 call_id() const;
  void set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_call_id() const;
  void _internal_set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.set_system_call_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::system_call_target* target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 call_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fevents_2eproto;
};
// -------------------------------------------------------------------

class set_system_contract_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.set_system_contract_event) */ {
 public:
  inline set_system_contract_event() : set_system_contract_event(nullptr) {}
  ~set_system_contract_event() override;
  explicit constexpr set_system_contract_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set_system_contract_event(const set_system_contract_event& from);
  set_system_contract_event(set_system_contract_event&& from) noexcept
    : set_system_contract_event() {
    *this = ::std::move(from);
  }

  inline set_system_contract_event& operator=(const set_system_contract_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_system_contract_event& operator=(set_system_contract_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set_system_contract_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const set_system_contract_event* internal_default_instance() {
    return reinterpret_cast<const set_system_contract_event*>(
               &_set_system_contract_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(set_system_contract_event& a, set_system_contract_event& b) {
    a.Swap(&b);
  }
  inline void Swap(set_system_contract_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_system_contract_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_system_contract_event* New() const final {
    return new set_system_contract_event();
  }

  set_system_contract_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_system_contract_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set_system_contract_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const set_system_contract_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_system_contract_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.set_system_contract_event";
  }
  protected:
  explicit set_system_contract_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kSystemContractFieldNumber = 2,
  };
  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  void clear_contract_id();
  const std::string& contract_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // bool system_contract = 2;
  void clear_system_contract();
  bool system_contract() const;
  void set_system_contract(bool value);
  private:
  bool _internal_system_contract() const;
  void _internal_set_system_contract(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.set_system_contract_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  bool system_contract_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// set_system_call_event

// uint32 call_id = 1;
inline void set_system_call_event::clear_call_id() {
  call_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 set_system_call_event::_internal_call_id() const {
  return call_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 set_system_call_event::call_id() const {
  // @@protoc_insertion_point(field_get:koinos.chain.set_system_call_event.call_id)
  return _internal_call_id();
}
inline void set_system_call_event::_internal_set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  call_id_ = value;
}
inline void set_system_call_event::set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_call_id(value);
  // @@protoc_insertion_point(field_set:koinos.chain.set_system_call_event.call_id)
}

// .koinos.protocol.system_call_target target = 2;
inline bool set_system_call_event::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool set_system_call_event::has_target() const {
  return _internal_has_target();
}
inline const ::koinos::protocol::system_call_target& set_system_call_event::_internal_target() const {
  const ::koinos::protocol::system_call_target* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::system_call_target&>(
      ::koinos::protocol::_system_call_target_default_instance_);
}
inline const ::koinos::protocol::system_call_target& set_system_call_event::target() const {
  // @@protoc_insertion_point(field_get:koinos.chain.set_system_call_event.target)
  return _internal_target();
}
inline void set_system_call_event::unsafe_arena_set_allocated_target(
    ::koinos::protocol::system_call_target* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.set_system_call_event.target)
}
inline ::koinos::protocol::system_call_target* set_system_call_event::release_target() {
  
  ::koinos::protocol::system_call_target* temp = target_;
  target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::protocol::system_call_target* set_system_call_event::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:koinos.chain.set_system_call_event.target)
  
  ::koinos::protocol::system_call_target* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::koinos::protocol::system_call_target* set_system_call_event::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::system_call_target>(GetArenaForAllocation());
    target_ = p;
  }
  return target_;
}
inline ::koinos::protocol::system_call_target* set_system_call_event::mutable_target() {
  ::koinos::protocol::system_call_target* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:koinos.chain.set_system_call_event.target)
  return _msg;
}
inline void set_system_call_event::set_allocated_target(::koinos::protocol::system_call_target* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target));
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.set_system_call_event.target)
}

// -------------------------------------------------------------------

// set_system_contract_event

// bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
inline void set_system_contract_event::clear_contract_id() {
  contract_id_.ClearToEmpty();
}
inline const std::string& set_system_contract_event::contract_id() const {
  // @@protoc_insertion_point(field_get:koinos.chain.set_system_contract_event.contract_id)
  return _internal_contract_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set_system_contract_event::set_contract_id(ArgT0&& arg0, ArgT... args) {
 
 contract_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.chain.set_system_contract_event.contract_id)
}
inline std::string* set_system_contract_event::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:koinos.chain.set_system_contract_event.contract_id)
  return _s;
}
inline const std::string& set_system_contract_event::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void set_system_contract_event::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* set_system_contract_event::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* set_system_contract_event::release_contract_id() {
  // @@protoc_insertion_point(field_release:koinos.chain.set_system_contract_event.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void set_system_contract_event::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.set_system_contract_event.contract_id)
}

// bool system_contract = 2;
inline void set_system_contract_event::clear_system_contract() {
  system_contract_ = false;
}
inline bool set_system_contract_event::_internal_system_contract() const {
  return system_contract_;
}
inline bool set_system_contract_event::system_contract() const {
  // @@protoc_insertion_point(field_get:koinos.chain.set_system_contract_event.system_contract)
  return _internal_system_contract();
}
inline void set_system_contract_event::_internal_set_system_contract(bool value) {
  
  system_contract_ = value;
}
inline void set_system_contract_event::set_system_contract(bool value) {
  _internal_set_system_contract(value);
  // @@protoc_insertion_point(field_set:koinos.chain.set_system_contract_event.system_contract)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chain
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2fevents_2eproto
