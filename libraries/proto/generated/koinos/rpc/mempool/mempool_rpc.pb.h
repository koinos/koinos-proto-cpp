// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/mempool/mempool_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/protocol/protocol.pb.h"
#include "koinos/rpc/rpc.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto;
namespace koinos {
namespace rpc {
namespace mempool {
class check_pending_account_resources_request;
class check_pending_account_resources_requestDefaultTypeInternal;
extern check_pending_account_resources_requestDefaultTypeInternal _check_pending_account_resources_request_default_instance_;
class check_pending_account_resources_response;
class check_pending_account_resources_responseDefaultTypeInternal;
extern check_pending_account_resources_responseDefaultTypeInternal _check_pending_account_resources_response_default_instance_;
class get_pending_transactions_request;
class get_pending_transactions_requestDefaultTypeInternal;
extern get_pending_transactions_requestDefaultTypeInternal _get_pending_transactions_request_default_instance_;
class get_pending_transactions_response;
class get_pending_transactions_responseDefaultTypeInternal;
extern get_pending_transactions_responseDefaultTypeInternal _get_pending_transactions_response_default_instance_;
class mempool_rpc_request;
class mempool_rpc_requestDefaultTypeInternal;
extern mempool_rpc_requestDefaultTypeInternal _mempool_rpc_request_default_instance_;
class mempool_rpc_response;
class mempool_rpc_responseDefaultTypeInternal;
extern mempool_rpc_responseDefaultTypeInternal _mempool_rpc_response_default_instance_;
}  // namespace mempool
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::rpc::mempool::check_pending_account_resources_request* Arena::CreateMaybeMessage<::koinos::rpc::mempool::check_pending_account_resources_request>(Arena*);
template<> ::koinos::rpc::mempool::check_pending_account_resources_response* Arena::CreateMaybeMessage<::koinos::rpc::mempool::check_pending_account_resources_response>(Arena*);
template<> ::koinos::rpc::mempool::get_pending_transactions_request* Arena::CreateMaybeMessage<::koinos::rpc::mempool::get_pending_transactions_request>(Arena*);
template<> ::koinos::rpc::mempool::get_pending_transactions_response* Arena::CreateMaybeMessage<::koinos::rpc::mempool::get_pending_transactions_response>(Arena*);
template<> ::koinos::rpc::mempool::mempool_rpc_request* Arena::CreateMaybeMessage<::koinos::rpc::mempool::mempool_rpc_request>(Arena*);
template<> ::koinos::rpc::mempool::mempool_rpc_response* Arena::CreateMaybeMessage<::koinos::rpc::mempool::mempool_rpc_response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace rpc {
namespace mempool {

// ===================================================================

class check_pending_account_resources_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.mempool.check_pending_account_resources_request) */ {
 public:
  inline check_pending_account_resources_request() : check_pending_account_resources_request(nullptr) {}
  virtual ~check_pending_account_resources_request();

  check_pending_account_resources_request(const check_pending_account_resources_request& from);
  check_pending_account_resources_request(check_pending_account_resources_request&& from) noexcept
    : check_pending_account_resources_request() {
    *this = ::std::move(from);
  }

  inline check_pending_account_resources_request& operator=(const check_pending_account_resources_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline check_pending_account_resources_request& operator=(check_pending_account_resources_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const check_pending_account_resources_request& default_instance();

  static inline const check_pending_account_resources_request* internal_default_instance() {
    return reinterpret_cast<const check_pending_account_resources_request*>(
               &_check_pending_account_resources_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(check_pending_account_resources_request& a, check_pending_account_resources_request& b) {
    a.Swap(&b);
  }
  inline void Swap(check_pending_account_resources_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(check_pending_account_resources_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline check_pending_account_resources_request* New() const final {
    return CreateMaybeMessage<check_pending_account_resources_request>(nullptr);
  }

  check_pending_account_resources_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<check_pending_account_resources_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const check_pending_account_resources_request& from);
  void MergeFrom(const check_pending_account_resources_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(check_pending_account_resources_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.mempool.check_pending_account_resources_request";
  }
  protected:
  explicit check_pending_account_resources_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayerFieldNumber = 1,
    kMaxPayerResourcesFieldNumber = 2,
    kTrxResourceLimitFieldNumber = 3,
  };
  // bytes payer = 1;
  void clear_payer();
  const std::string& payer() const;
  void set_payer(const std::string& value);
  void set_payer(std::string&& value);
  void set_payer(const char* value);
  void set_payer(const void* value, size_t size);
  std::string* mutable_payer();
  std::string* release_payer();
  void set_allocated_payer(std::string* payer);
  private:
  const std::string& _internal_payer() const;
  void _internal_set_payer(const std::string& value);
  std::string* _internal_mutable_payer();
  public:

  // uint64 max_payer_resources = 2;
  void clear_max_payer_resources();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_payer_resources() const;
  void set_max_payer_resources(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_payer_resources() const;
  void _internal_set_max_payer_resources(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 trx_resource_limit = 3;
  void clear_trx_resource_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 trx_resource_limit() const;
  void set_trx_resource_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_trx_resource_limit() const;
  void _internal_set_trx_resource_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.mempool.check_pending_account_resources_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_payer_resources_;
  ::PROTOBUF_NAMESPACE_ID::uint64 trx_resource_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto;
};
// -------------------------------------------------------------------

class check_pending_account_resources_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.mempool.check_pending_account_resources_response) */ {
 public:
  inline check_pending_account_resources_response() : check_pending_account_resources_response(nullptr) {}
  virtual ~check_pending_account_resources_response();

  check_pending_account_resources_response(const check_pending_account_resources_response& from);
  check_pending_account_resources_response(check_pending_account_resources_response&& from) noexcept
    : check_pending_account_resources_response() {
    *this = ::std::move(from);
  }

  inline check_pending_account_resources_response& operator=(const check_pending_account_resources_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline check_pending_account_resources_response& operator=(check_pending_account_resources_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const check_pending_account_resources_response& default_instance();

  static inline const check_pending_account_resources_response* internal_default_instance() {
    return reinterpret_cast<const check_pending_account_resources_response*>(
               &_check_pending_account_resources_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(check_pending_account_resources_response& a, check_pending_account_resources_response& b) {
    a.Swap(&b);
  }
  inline void Swap(check_pending_account_resources_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(check_pending_account_resources_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline check_pending_account_resources_response* New() const final {
    return CreateMaybeMessage<check_pending_account_resources_response>(nullptr);
  }

  check_pending_account_resources_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<check_pending_account_resources_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const check_pending_account_resources_response& from);
  void MergeFrom(const check_pending_account_resources_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(check_pending_account_resources_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.mempool.check_pending_account_resources_response";
  }
  protected:
  explicit check_pending_account_resources_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.mempool.check_pending_account_resources_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_pending_transactions_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.mempool.get_pending_transactions_request) */ {
 public:
  inline get_pending_transactions_request() : get_pending_transactions_request(nullptr) {}
  virtual ~get_pending_transactions_request();

  get_pending_transactions_request(const get_pending_transactions_request& from);
  get_pending_transactions_request(get_pending_transactions_request&& from) noexcept
    : get_pending_transactions_request() {
    *this = ::std::move(from);
  }

  inline get_pending_transactions_request& operator=(const get_pending_transactions_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_pending_transactions_request& operator=(get_pending_transactions_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_pending_transactions_request& default_instance();

  static inline const get_pending_transactions_request* internal_default_instance() {
    return reinterpret_cast<const get_pending_transactions_request*>(
               &_get_pending_transactions_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(get_pending_transactions_request& a, get_pending_transactions_request& b) {
    a.Swap(&b);
  }
  inline void Swap(get_pending_transactions_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_pending_transactions_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_pending_transactions_request* New() const final {
    return CreateMaybeMessage<get_pending_transactions_request>(nullptr);
  }

  get_pending_transactions_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_pending_transactions_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_pending_transactions_request& from);
  void MergeFrom(const get_pending_transactions_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_pending_transactions_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.mempool.get_pending_transactions_request";
  }
  protected:
  explicit get_pending_transactions_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
  };
  // uint64 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.rpc.mempool.get_pending_transactions_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto;
};
// -------------------------------------------------------------------

class get_pending_transactions_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.mempool.get_pending_transactions_response) */ {
 public:
  inline get_pending_transactions_response() : get_pending_transactions_response(nullptr) {}
  virtual ~get_pending_transactions_response();

  get_pending_transactions_response(const get_pending_transactions_response& from);
  get_pending_transactions_response(get_pending_transactions_response&& from) noexcept
    : get_pending_transactions_response() {
    *this = ::std::move(from);
  }

  inline get_pending_transactions_response& operator=(const get_pending_transactions_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_pending_transactions_response& operator=(get_pending_transactions_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_pending_transactions_response& default_instance();

  static inline const get_pending_transactions_response* internal_default_instance() {
    return reinterpret_cast<const get_pending_transactions_response*>(
               &_get_pending_transactions_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(get_pending_transactions_response& a, get_pending_transactions_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_pending_transactions_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_pending_transactions_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_pending_transactions_response* New() const final {
    return CreateMaybeMessage<get_pending_transactions_response>(nullptr);
  }

  get_pending_transactions_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_pending_transactions_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_pending_transactions_response& from);
  void MergeFrom(const get_pending_transactions_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_pending_transactions_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.mempool.get_pending_transactions_response";
  }
  protected:
  explicit get_pending_transactions_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 1,
  };
  // repeated .koinos.protocol.transaction transactions = 1;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::koinos::protocol::transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction >*
      mutable_transactions();
  private:
  const ::koinos::protocol::transaction& _internal_transactions(int index) const;
  ::koinos::protocol::transaction* _internal_add_transactions();
  public:
  const ::koinos::protocol::transaction& transactions(int index) const;
  ::koinos::protocol::transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction >&
      transactions() const;

  // @@protoc_insertion_point(class_scope:koinos.rpc.mempool.get_pending_transactions_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction > transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto;
};
// -------------------------------------------------------------------

class mempool_rpc_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.mempool.mempool_rpc_request) */ {
 public:
  inline mempool_rpc_request() : mempool_rpc_request(nullptr) {}
  virtual ~mempool_rpc_request();

  mempool_rpc_request(const mempool_rpc_request& from);
  mempool_rpc_request(mempool_rpc_request&& from) noexcept
    : mempool_rpc_request() {
    *this = ::std::move(from);
  }

  inline mempool_rpc_request& operator=(const mempool_rpc_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline mempool_rpc_request& operator=(mempool_rpc_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mempool_rpc_request& default_instance();

  enum RequestCase {
    kReserved = 1,
    kCheckPendingAccountResources = 2,
    kGetPendingTransactions = 3,
    REQUEST_NOT_SET = 0,
  };

  static inline const mempool_rpc_request* internal_default_instance() {
    return reinterpret_cast<const mempool_rpc_request*>(
               &_mempool_rpc_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(mempool_rpc_request& a, mempool_rpc_request& b) {
    a.Swap(&b);
  }
  inline void Swap(mempool_rpc_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mempool_rpc_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mempool_rpc_request* New() const final {
    return CreateMaybeMessage<mempool_rpc_request>(nullptr);
  }

  mempool_rpc_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mempool_rpc_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mempool_rpc_request& from);
  void MergeFrom(const mempool_rpc_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mempool_rpc_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.mempool.mempool_rpc_request";
  }
  protected:
  explicit mempool_rpc_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kCheckPendingAccountResourcesFieldNumber = 2,
    kGetPendingTransactionsFieldNumber = 3,
  };
  // .koinos.rpc.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::rpc::reserved_rpc& reserved() const;
  ::koinos::rpc::reserved_rpc* release_reserved();
  ::koinos::rpc::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved);
  private:
  const ::koinos::rpc::reserved_rpc& _internal_reserved() const;
  ::koinos::rpc::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::rpc::reserved_rpc* reserved);
  ::koinos::rpc::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.rpc.mempool.check_pending_account_resources_request check_pending_account_resources = 2;
  bool has_check_pending_account_resources() const;
  private:
  bool _internal_has_check_pending_account_resources() const;
  public:
  void clear_check_pending_account_resources();
  const ::koinos::rpc::mempool::check_pending_account_resources_request& check_pending_account_resources() const;
  ::koinos::rpc::mempool::check_pending_account_resources_request* release_check_pending_account_resources();
  ::koinos::rpc::mempool::check_pending_account_resources_request* mutable_check_pending_account_resources();
  void set_allocated_check_pending_account_resources(::koinos::rpc::mempool::check_pending_account_resources_request* check_pending_account_resources);
  private:
  const ::koinos::rpc::mempool::check_pending_account_resources_request& _internal_check_pending_account_resources() const;
  ::koinos::rpc::mempool::check_pending_account_resources_request* _internal_mutable_check_pending_account_resources();
  public:
  void unsafe_arena_set_allocated_check_pending_account_resources(
      ::koinos::rpc::mempool::check_pending_account_resources_request* check_pending_account_resources);
  ::koinos::rpc::mempool::check_pending_account_resources_request* unsafe_arena_release_check_pending_account_resources();

  // .koinos.rpc.mempool.get_pending_transactions_request get_pending_transactions = 3;
  bool has_get_pending_transactions() const;
  private:
  bool _internal_has_get_pending_transactions() const;
  public:
  void clear_get_pending_transactions();
  const ::koinos::rpc::mempool::get_pending_transactions_request& get_pending_transactions() const;
  ::koinos::rpc::mempool::get_pending_transactions_request* release_get_pending_transactions();
  ::koinos::rpc::mempool::get_pending_transactions_request* mutable_get_pending_transactions();
  void set_allocated_get_pending_transactions(::koinos::rpc::mempool::get_pending_transactions_request* get_pending_transactions);
  private:
  const ::koinos::rpc::mempool::get_pending_transactions_request& _internal_get_pending_transactions() const;
  ::koinos::rpc::mempool::get_pending_transactions_request* _internal_mutable_get_pending_transactions();
  public:
  void unsafe_arena_set_allocated_get_pending_transactions(
      ::koinos::rpc::mempool::get_pending_transactions_request* get_pending_transactions);
  ::koinos::rpc::mempool::get_pending_transactions_request* unsafe_arena_release_get_pending_transactions();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.mempool.mempool_rpc_request)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_check_pending_account_resources();
  void set_has_get_pending_transactions();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union RequestUnion {
    RequestUnion() {}
    ::koinos::rpc::reserved_rpc* reserved_;
    ::koinos::rpc::mempool::check_pending_account_resources_request* check_pending_account_resources_;
    ::koinos::rpc::mempool::get_pending_transactions_request* get_pending_transactions_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto;
};
// -------------------------------------------------------------------

class mempool_rpc_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.rpc.mempool.mempool_rpc_response) */ {
 public:
  inline mempool_rpc_response() : mempool_rpc_response(nullptr) {}
  virtual ~mempool_rpc_response();

  mempool_rpc_response(const mempool_rpc_response& from);
  mempool_rpc_response(mempool_rpc_response&& from) noexcept
    : mempool_rpc_response() {
    *this = ::std::move(from);
  }

  inline mempool_rpc_response& operator=(const mempool_rpc_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline mempool_rpc_response& operator=(mempool_rpc_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mempool_rpc_response& default_instance();

  enum ResponseCase {
    kReserved = 1,
    kError = 2,
    kCheckPendingAccountResources = 3,
    kGetPendingTransactions = 4,
    RESPONSE_NOT_SET = 0,
  };

  static inline const mempool_rpc_response* internal_default_instance() {
    return reinterpret_cast<const mempool_rpc_response*>(
               &_mempool_rpc_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(mempool_rpc_response& a, mempool_rpc_response& b) {
    a.Swap(&b);
  }
  inline void Swap(mempool_rpc_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mempool_rpc_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mempool_rpc_response* New() const final {
    return CreateMaybeMessage<mempool_rpc_response>(nullptr);
  }

  mempool_rpc_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mempool_rpc_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mempool_rpc_response& from);
  void MergeFrom(const mempool_rpc_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mempool_rpc_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.rpc.mempool.mempool_rpc_response";
  }
  protected:
  explicit mempool_rpc_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto);
    return ::descriptor_table_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReservedFieldNumber = 1,
    kErrorFieldNumber = 2,
    kCheckPendingAccountResourcesFieldNumber = 3,
    kGetPendingTransactionsFieldNumber = 4,
  };
  // .koinos.rpc.reserved_rpc reserved = 1;
  bool has_reserved() const;
  private:
  bool _internal_has_reserved() const;
  public:
  void clear_reserved();
  const ::koinos::rpc::reserved_rpc& reserved() const;
  ::koinos::rpc::reserved_rpc* release_reserved();
  ::koinos::rpc::reserved_rpc* mutable_reserved();
  void set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved);
  private:
  const ::koinos::rpc::reserved_rpc& _internal_reserved() const;
  ::koinos::rpc::reserved_rpc* _internal_mutable_reserved();
  public:
  void unsafe_arena_set_allocated_reserved(
      ::koinos::rpc::reserved_rpc* reserved);
  ::koinos::rpc::reserved_rpc* unsafe_arena_release_reserved();

  // .koinos.rpc.error_response error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::koinos::rpc::error_response& error() const;
  ::koinos::rpc::error_response* release_error();
  ::koinos::rpc::error_response* mutable_error();
  void set_allocated_error(::koinos::rpc::error_response* error);
  private:
  const ::koinos::rpc::error_response& _internal_error() const;
  ::koinos::rpc::error_response* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::koinos::rpc::error_response* error);
  ::koinos::rpc::error_response* unsafe_arena_release_error();

  // .koinos.rpc.mempool.check_pending_account_resources_response check_pending_account_resources = 3;
  bool has_check_pending_account_resources() const;
  private:
  bool _internal_has_check_pending_account_resources() const;
  public:
  void clear_check_pending_account_resources();
  const ::koinos::rpc::mempool::check_pending_account_resources_response& check_pending_account_resources() const;
  ::koinos::rpc::mempool::check_pending_account_resources_response* release_check_pending_account_resources();
  ::koinos::rpc::mempool::check_pending_account_resources_response* mutable_check_pending_account_resources();
  void set_allocated_check_pending_account_resources(::koinos::rpc::mempool::check_pending_account_resources_response* check_pending_account_resources);
  private:
  const ::koinos::rpc::mempool::check_pending_account_resources_response& _internal_check_pending_account_resources() const;
  ::koinos::rpc::mempool::check_pending_account_resources_response* _internal_mutable_check_pending_account_resources();
  public:
  void unsafe_arena_set_allocated_check_pending_account_resources(
      ::koinos::rpc::mempool::check_pending_account_resources_response* check_pending_account_resources);
  ::koinos::rpc::mempool::check_pending_account_resources_response* unsafe_arena_release_check_pending_account_resources();

  // .koinos.rpc.mempool.get_pending_transactions_response get_pending_transactions = 4;
  bool has_get_pending_transactions() const;
  private:
  bool _internal_has_get_pending_transactions() const;
  public:
  void clear_get_pending_transactions();
  const ::koinos::rpc::mempool::get_pending_transactions_response& get_pending_transactions() const;
  ::koinos::rpc::mempool::get_pending_transactions_response* release_get_pending_transactions();
  ::koinos::rpc::mempool::get_pending_transactions_response* mutable_get_pending_transactions();
  void set_allocated_get_pending_transactions(::koinos::rpc::mempool::get_pending_transactions_response* get_pending_transactions);
  private:
  const ::koinos::rpc::mempool::get_pending_transactions_response& _internal_get_pending_transactions() const;
  ::koinos::rpc::mempool::get_pending_transactions_response* _internal_mutable_get_pending_transactions();
  public:
  void unsafe_arena_set_allocated_get_pending_transactions(
      ::koinos::rpc::mempool::get_pending_transactions_response* get_pending_transactions);
  ::koinos::rpc::mempool::get_pending_transactions_response* unsafe_arena_release_get_pending_transactions();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:koinos.rpc.mempool.mempool_rpc_response)
 private:
  class _Internal;
  void set_has_reserved();
  void set_has_error();
  void set_has_check_pending_account_resources();
  void set_has_get_pending_transactions();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ResponseUnion {
    ResponseUnion() {}
    ::koinos::rpc::reserved_rpc* reserved_;
    ::koinos::rpc::error_response* error_;
    ::koinos::rpc::mempool::check_pending_account_resources_response* check_pending_account_resources_;
    ::koinos::rpc::mempool::get_pending_transactions_response* get_pending_transactions_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// check_pending_account_resources_request

// bytes payer = 1;
inline void check_pending_account_resources_request::clear_payer() {
  payer_.ClearToEmpty();
}
inline const std::string& check_pending_account_resources_request::payer() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.mempool.check_pending_account_resources_request.payer)
  return _internal_payer();
}
inline void check_pending_account_resources_request::set_payer(const std::string& value) {
  _internal_set_payer(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.mempool.check_pending_account_resources_request.payer)
}
inline std::string* check_pending_account_resources_request::mutable_payer() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.mempool.check_pending_account_resources_request.payer)
  return _internal_mutable_payer();
}
inline const std::string& check_pending_account_resources_request::_internal_payer() const {
  return payer_.Get();
}
inline void check_pending_account_resources_request::_internal_set_payer(const std::string& value) {
  
  payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void check_pending_account_resources_request::set_payer(std::string&& value) {
  
  payer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.rpc.mempool.check_pending_account_resources_request.payer)
}
inline void check_pending_account_resources_request::set_payer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.rpc.mempool.check_pending_account_resources_request.payer)
}
inline void check_pending_account_resources_request::set_payer(const void* value,
    size_t size) {
  
  payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.rpc.mempool.check_pending_account_resources_request.payer)
}
inline std::string* check_pending_account_resources_request::_internal_mutable_payer() {
  
  return payer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* check_pending_account_resources_request::release_payer() {
  // @@protoc_insertion_point(field_release:koinos.rpc.mempool.check_pending_account_resources_request.payer)
  return payer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void check_pending_account_resources_request::set_allocated_payer(std::string* payer) {
  if (payer != nullptr) {
    
  } else {
    
  }
  payer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.mempool.check_pending_account_resources_request.payer)
}

// uint64 max_payer_resources = 2;
inline void check_pending_account_resources_request::clear_max_payer_resources() {
  max_payer_resources_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 check_pending_account_resources_request::_internal_max_payer_resources() const {
  return max_payer_resources_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 check_pending_account_resources_request::max_payer_resources() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.mempool.check_pending_account_resources_request.max_payer_resources)
  return _internal_max_payer_resources();
}
inline void check_pending_account_resources_request::_internal_set_max_payer_resources(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_payer_resources_ = value;
}
inline void check_pending_account_resources_request::set_max_payer_resources(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_payer_resources(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.mempool.check_pending_account_resources_request.max_payer_resources)
}

// uint64 trx_resource_limit = 3;
inline void check_pending_account_resources_request::clear_trx_resource_limit() {
  trx_resource_limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 check_pending_account_resources_request::_internal_trx_resource_limit() const {
  return trx_resource_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 check_pending_account_resources_request::trx_resource_limit() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.mempool.check_pending_account_resources_request.trx_resource_limit)
  return _internal_trx_resource_limit();
}
inline void check_pending_account_resources_request::_internal_set_trx_resource_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  trx_resource_limit_ = value;
}
inline void check_pending_account_resources_request::set_trx_resource_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_trx_resource_limit(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.mempool.check_pending_account_resources_request.trx_resource_limit)
}

// -------------------------------------------------------------------

// check_pending_account_resources_response

// bool success = 1;
inline void check_pending_account_resources_response::clear_success() {
  success_ = false;
}
inline bool check_pending_account_resources_response::_internal_success() const {
  return success_;
}
inline bool check_pending_account_resources_response::success() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.mempool.check_pending_account_resources_response.success)
  return _internal_success();
}
inline void check_pending_account_resources_response::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void check_pending_account_resources_response::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.mempool.check_pending_account_resources_response.success)
}

// -------------------------------------------------------------------

// get_pending_transactions_request

// uint64 limit = 1;
inline void get_pending_transactions_request::clear_limit() {
  limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_pending_transactions_request::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_pending_transactions_request::limit() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.mempool.get_pending_transactions_request.limit)
  return _internal_limit();
}
inline void get_pending_transactions_request::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  limit_ = value;
}
inline void get_pending_transactions_request::set_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:koinos.rpc.mempool.get_pending_transactions_request.limit)
}

// -------------------------------------------------------------------

// get_pending_transactions_response

// repeated .koinos.protocol.transaction transactions = 1;
inline int get_pending_transactions_response::_internal_transactions_size() const {
  return transactions_.size();
}
inline int get_pending_transactions_response::transactions_size() const {
  return _internal_transactions_size();
}
inline ::koinos::protocol::transaction* get_pending_transactions_response::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.mempool.get_pending_transactions_response.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction >*
get_pending_transactions_response::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:koinos.rpc.mempool.get_pending_transactions_response.transactions)
  return &transactions_;
}
inline const ::koinos::protocol::transaction& get_pending_transactions_response::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::koinos::protocol::transaction& get_pending_transactions_response::transactions(int index) const {
  // @@protoc_insertion_point(field_get:koinos.rpc.mempool.get_pending_transactions_response.transactions)
  return _internal_transactions(index);
}
inline ::koinos::protocol::transaction* get_pending_transactions_response::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::koinos::protocol::transaction* get_pending_transactions_response::add_transactions() {
  // @@protoc_insertion_point(field_add:koinos.rpc.mempool.get_pending_transactions_response.transactions)
  return _internal_add_transactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction >&
get_pending_transactions_response::transactions() const {
  // @@protoc_insertion_point(field_list:koinos.rpc.mempool.get_pending_transactions_response.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// mempool_rpc_request

// .koinos.rpc.reserved_rpc reserved = 1;
inline bool mempool_rpc_request::_internal_has_reserved() const {
  return request_case() == kReserved;
}
inline bool mempool_rpc_request::has_reserved() const {
  return _internal_has_reserved();
}
inline void mempool_rpc_request::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::rpc::reserved_rpc* mempool_rpc_request::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.rpc.mempool.mempool_rpc_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
      ::koinos::rpc::reserved_rpc* temp = request_.reserved_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::reserved_rpc& mempool_rpc_request::_internal_reserved() const {
  return _internal_has_reserved()
      ? *request_.reserved_
      : reinterpret_cast< ::koinos::rpc::reserved_rpc&>(::koinos::rpc::_reserved_rpc_default_instance_);
}
inline const ::koinos::rpc::reserved_rpc& mempool_rpc_request::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.mempool.mempool_rpc_request.reserved)
  return _internal_reserved();
}
inline ::koinos::rpc::reserved_rpc* mempool_rpc_request::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.mempool.mempool_rpc_request.reserved)
  if (_internal_has_reserved()) {
    clear_has_request();
    ::koinos::rpc::reserved_rpc* temp = request_.reserved_;
    request_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void mempool_rpc_request::unsafe_arena_set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  clear_request();
  if (reserved) {
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.mempool.mempool_rpc_request.reserved)
}
inline ::koinos::rpc::reserved_rpc* mempool_rpc_request::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_request();
    set_has_reserved();
    request_.reserved_ = CreateMaybeMessage< ::koinos::rpc::reserved_rpc >(GetArena());
  }
  return request_.reserved_;
}
inline ::koinos::rpc::reserved_rpc* mempool_rpc_request::mutable_reserved() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.mempool.mempool_rpc_request.reserved)
  return _internal_mutable_reserved();
}

// .koinos.rpc.mempool.check_pending_account_resources_request check_pending_account_resources = 2;
inline bool mempool_rpc_request::_internal_has_check_pending_account_resources() const {
  return request_case() == kCheckPendingAccountResources;
}
inline bool mempool_rpc_request::has_check_pending_account_resources() const {
  return _internal_has_check_pending_account_resources();
}
inline void mempool_rpc_request::set_has_check_pending_account_resources() {
  _oneof_case_[0] = kCheckPendingAccountResources;
}
inline void mempool_rpc_request::clear_check_pending_account_resources() {
  if (_internal_has_check_pending_account_resources()) {
    if (GetArena() == nullptr) {
      delete request_.check_pending_account_resources_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::mempool::check_pending_account_resources_request* mempool_rpc_request::release_check_pending_account_resources() {
  // @@protoc_insertion_point(field_release:koinos.rpc.mempool.mempool_rpc_request.check_pending_account_resources)
  if (_internal_has_check_pending_account_resources()) {
    clear_has_request();
      ::koinos::rpc::mempool::check_pending_account_resources_request* temp = request_.check_pending_account_resources_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.check_pending_account_resources_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::mempool::check_pending_account_resources_request& mempool_rpc_request::_internal_check_pending_account_resources() const {
  return _internal_has_check_pending_account_resources()
      ? *request_.check_pending_account_resources_
      : reinterpret_cast< ::koinos::rpc::mempool::check_pending_account_resources_request&>(::koinos::rpc::mempool::_check_pending_account_resources_request_default_instance_);
}
inline const ::koinos::rpc::mempool::check_pending_account_resources_request& mempool_rpc_request::check_pending_account_resources() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.mempool.mempool_rpc_request.check_pending_account_resources)
  return _internal_check_pending_account_resources();
}
inline ::koinos::rpc::mempool::check_pending_account_resources_request* mempool_rpc_request::unsafe_arena_release_check_pending_account_resources() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.mempool.mempool_rpc_request.check_pending_account_resources)
  if (_internal_has_check_pending_account_resources()) {
    clear_has_request();
    ::koinos::rpc::mempool::check_pending_account_resources_request* temp = request_.check_pending_account_resources_;
    request_.check_pending_account_resources_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void mempool_rpc_request::unsafe_arena_set_allocated_check_pending_account_resources(::koinos::rpc::mempool::check_pending_account_resources_request* check_pending_account_resources) {
  clear_request();
  if (check_pending_account_resources) {
    set_has_check_pending_account_resources();
    request_.check_pending_account_resources_ = check_pending_account_resources;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.mempool.mempool_rpc_request.check_pending_account_resources)
}
inline ::koinos::rpc::mempool::check_pending_account_resources_request* mempool_rpc_request::_internal_mutable_check_pending_account_resources() {
  if (!_internal_has_check_pending_account_resources()) {
    clear_request();
    set_has_check_pending_account_resources();
    request_.check_pending_account_resources_ = CreateMaybeMessage< ::koinos::rpc::mempool::check_pending_account_resources_request >(GetArena());
  }
  return request_.check_pending_account_resources_;
}
inline ::koinos::rpc::mempool::check_pending_account_resources_request* mempool_rpc_request::mutable_check_pending_account_resources() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.mempool.mempool_rpc_request.check_pending_account_resources)
  return _internal_mutable_check_pending_account_resources();
}

// .koinos.rpc.mempool.get_pending_transactions_request get_pending_transactions = 3;
inline bool mempool_rpc_request::_internal_has_get_pending_transactions() const {
  return request_case() == kGetPendingTransactions;
}
inline bool mempool_rpc_request::has_get_pending_transactions() const {
  return _internal_has_get_pending_transactions();
}
inline void mempool_rpc_request::set_has_get_pending_transactions() {
  _oneof_case_[0] = kGetPendingTransactions;
}
inline void mempool_rpc_request::clear_get_pending_transactions() {
  if (_internal_has_get_pending_transactions()) {
    if (GetArena() == nullptr) {
      delete request_.get_pending_transactions_;
    }
    clear_has_request();
  }
}
inline ::koinos::rpc::mempool::get_pending_transactions_request* mempool_rpc_request::release_get_pending_transactions() {
  // @@protoc_insertion_point(field_release:koinos.rpc.mempool.mempool_rpc_request.get_pending_transactions)
  if (_internal_has_get_pending_transactions()) {
    clear_has_request();
      ::koinos::rpc::mempool::get_pending_transactions_request* temp = request_.get_pending_transactions_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_pending_transactions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::mempool::get_pending_transactions_request& mempool_rpc_request::_internal_get_pending_transactions() const {
  return _internal_has_get_pending_transactions()
      ? *request_.get_pending_transactions_
      : reinterpret_cast< ::koinos::rpc::mempool::get_pending_transactions_request&>(::koinos::rpc::mempool::_get_pending_transactions_request_default_instance_);
}
inline const ::koinos::rpc::mempool::get_pending_transactions_request& mempool_rpc_request::get_pending_transactions() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.mempool.mempool_rpc_request.get_pending_transactions)
  return _internal_get_pending_transactions();
}
inline ::koinos::rpc::mempool::get_pending_transactions_request* mempool_rpc_request::unsafe_arena_release_get_pending_transactions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.mempool.mempool_rpc_request.get_pending_transactions)
  if (_internal_has_get_pending_transactions()) {
    clear_has_request();
    ::koinos::rpc::mempool::get_pending_transactions_request* temp = request_.get_pending_transactions_;
    request_.get_pending_transactions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void mempool_rpc_request::unsafe_arena_set_allocated_get_pending_transactions(::koinos::rpc::mempool::get_pending_transactions_request* get_pending_transactions) {
  clear_request();
  if (get_pending_transactions) {
    set_has_get_pending_transactions();
    request_.get_pending_transactions_ = get_pending_transactions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.mempool.mempool_rpc_request.get_pending_transactions)
}
inline ::koinos::rpc::mempool::get_pending_transactions_request* mempool_rpc_request::_internal_mutable_get_pending_transactions() {
  if (!_internal_has_get_pending_transactions()) {
    clear_request();
    set_has_get_pending_transactions();
    request_.get_pending_transactions_ = CreateMaybeMessage< ::koinos::rpc::mempool::get_pending_transactions_request >(GetArena());
  }
  return request_.get_pending_transactions_;
}
inline ::koinos::rpc::mempool::get_pending_transactions_request* mempool_rpc_request::mutable_get_pending_transactions() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.mempool.mempool_rpc_request.get_pending_transactions)
  return _internal_mutable_get_pending_transactions();
}

inline bool mempool_rpc_request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void mempool_rpc_request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline mempool_rpc_request::RequestCase mempool_rpc_request::request_case() const {
  return mempool_rpc_request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// mempool_rpc_response

// .koinos.rpc.reserved_rpc reserved = 1;
inline bool mempool_rpc_response::_internal_has_reserved() const {
  return response_case() == kReserved;
}
inline bool mempool_rpc_response::has_reserved() const {
  return _internal_has_reserved();
}
inline void mempool_rpc_response::set_has_reserved() {
  _oneof_case_[0] = kReserved;
}
inline ::koinos::rpc::reserved_rpc* mempool_rpc_response::release_reserved() {
  // @@protoc_insertion_point(field_release:koinos.rpc.mempool.mempool_rpc_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
      ::koinos::rpc::reserved_rpc* temp = response_.reserved_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::reserved_rpc& mempool_rpc_response::_internal_reserved() const {
  return _internal_has_reserved()
      ? *response_.reserved_
      : reinterpret_cast< ::koinos::rpc::reserved_rpc&>(::koinos::rpc::_reserved_rpc_default_instance_);
}
inline const ::koinos::rpc::reserved_rpc& mempool_rpc_response::reserved() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.mempool.mempool_rpc_response.reserved)
  return _internal_reserved();
}
inline ::koinos::rpc::reserved_rpc* mempool_rpc_response::unsafe_arena_release_reserved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.mempool.mempool_rpc_response.reserved)
  if (_internal_has_reserved()) {
    clear_has_response();
    ::koinos::rpc::reserved_rpc* temp = response_.reserved_;
    response_.reserved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void mempool_rpc_response::unsafe_arena_set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  clear_response();
  if (reserved) {
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.mempool.mempool_rpc_response.reserved)
}
inline ::koinos::rpc::reserved_rpc* mempool_rpc_response::_internal_mutable_reserved() {
  if (!_internal_has_reserved()) {
    clear_response();
    set_has_reserved();
    response_.reserved_ = CreateMaybeMessage< ::koinos::rpc::reserved_rpc >(GetArena());
  }
  return response_.reserved_;
}
inline ::koinos::rpc::reserved_rpc* mempool_rpc_response::mutable_reserved() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.mempool.mempool_rpc_response.reserved)
  return _internal_mutable_reserved();
}

// .koinos.rpc.error_response error = 2;
inline bool mempool_rpc_response::_internal_has_error() const {
  return response_case() == kError;
}
inline bool mempool_rpc_response::has_error() const {
  return _internal_has_error();
}
inline void mempool_rpc_response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::koinos::rpc::error_response* mempool_rpc_response::release_error() {
  // @@protoc_insertion_point(field_release:koinos.rpc.mempool.mempool_rpc_response.error)
  if (_internal_has_error()) {
    clear_has_response();
      ::koinos::rpc::error_response* temp = response_.error_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::error_response& mempool_rpc_response::_internal_error() const {
  return _internal_has_error()
      ? *response_.error_
      : reinterpret_cast< ::koinos::rpc::error_response&>(::koinos::rpc::_error_response_default_instance_);
}
inline const ::koinos::rpc::error_response& mempool_rpc_response::error() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.mempool.mempool_rpc_response.error)
  return _internal_error();
}
inline ::koinos::rpc::error_response* mempool_rpc_response::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.mempool.mempool_rpc_response.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::koinos::rpc::error_response* temp = response_.error_;
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void mempool_rpc_response::unsafe_arena_set_allocated_error(::koinos::rpc::error_response* error) {
  clear_response();
  if (error) {
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.mempool.mempool_rpc_response.error)
}
inline ::koinos::rpc::error_response* mempool_rpc_response::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_response();
    set_has_error();
    response_.error_ = CreateMaybeMessage< ::koinos::rpc::error_response >(GetArena());
  }
  return response_.error_;
}
inline ::koinos::rpc::error_response* mempool_rpc_response::mutable_error() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.mempool.mempool_rpc_response.error)
  return _internal_mutable_error();
}

// .koinos.rpc.mempool.check_pending_account_resources_response check_pending_account_resources = 3;
inline bool mempool_rpc_response::_internal_has_check_pending_account_resources() const {
  return response_case() == kCheckPendingAccountResources;
}
inline bool mempool_rpc_response::has_check_pending_account_resources() const {
  return _internal_has_check_pending_account_resources();
}
inline void mempool_rpc_response::set_has_check_pending_account_resources() {
  _oneof_case_[0] = kCheckPendingAccountResources;
}
inline void mempool_rpc_response::clear_check_pending_account_resources() {
  if (_internal_has_check_pending_account_resources()) {
    if (GetArena() == nullptr) {
      delete response_.check_pending_account_resources_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::mempool::check_pending_account_resources_response* mempool_rpc_response::release_check_pending_account_resources() {
  // @@protoc_insertion_point(field_release:koinos.rpc.mempool.mempool_rpc_response.check_pending_account_resources)
  if (_internal_has_check_pending_account_resources()) {
    clear_has_response();
      ::koinos::rpc::mempool::check_pending_account_resources_response* temp = response_.check_pending_account_resources_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.check_pending_account_resources_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::mempool::check_pending_account_resources_response& mempool_rpc_response::_internal_check_pending_account_resources() const {
  return _internal_has_check_pending_account_resources()
      ? *response_.check_pending_account_resources_
      : reinterpret_cast< ::koinos::rpc::mempool::check_pending_account_resources_response&>(::koinos::rpc::mempool::_check_pending_account_resources_response_default_instance_);
}
inline const ::koinos::rpc::mempool::check_pending_account_resources_response& mempool_rpc_response::check_pending_account_resources() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.mempool.mempool_rpc_response.check_pending_account_resources)
  return _internal_check_pending_account_resources();
}
inline ::koinos::rpc::mempool::check_pending_account_resources_response* mempool_rpc_response::unsafe_arena_release_check_pending_account_resources() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.mempool.mempool_rpc_response.check_pending_account_resources)
  if (_internal_has_check_pending_account_resources()) {
    clear_has_response();
    ::koinos::rpc::mempool::check_pending_account_resources_response* temp = response_.check_pending_account_resources_;
    response_.check_pending_account_resources_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void mempool_rpc_response::unsafe_arena_set_allocated_check_pending_account_resources(::koinos::rpc::mempool::check_pending_account_resources_response* check_pending_account_resources) {
  clear_response();
  if (check_pending_account_resources) {
    set_has_check_pending_account_resources();
    response_.check_pending_account_resources_ = check_pending_account_resources;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.mempool.mempool_rpc_response.check_pending_account_resources)
}
inline ::koinos::rpc::mempool::check_pending_account_resources_response* mempool_rpc_response::_internal_mutable_check_pending_account_resources() {
  if (!_internal_has_check_pending_account_resources()) {
    clear_response();
    set_has_check_pending_account_resources();
    response_.check_pending_account_resources_ = CreateMaybeMessage< ::koinos::rpc::mempool::check_pending_account_resources_response >(GetArena());
  }
  return response_.check_pending_account_resources_;
}
inline ::koinos::rpc::mempool::check_pending_account_resources_response* mempool_rpc_response::mutable_check_pending_account_resources() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.mempool.mempool_rpc_response.check_pending_account_resources)
  return _internal_mutable_check_pending_account_resources();
}

// .koinos.rpc.mempool.get_pending_transactions_response get_pending_transactions = 4;
inline bool mempool_rpc_response::_internal_has_get_pending_transactions() const {
  return response_case() == kGetPendingTransactions;
}
inline bool mempool_rpc_response::has_get_pending_transactions() const {
  return _internal_has_get_pending_transactions();
}
inline void mempool_rpc_response::set_has_get_pending_transactions() {
  _oneof_case_[0] = kGetPendingTransactions;
}
inline void mempool_rpc_response::clear_get_pending_transactions() {
  if (_internal_has_get_pending_transactions()) {
    if (GetArena() == nullptr) {
      delete response_.get_pending_transactions_;
    }
    clear_has_response();
  }
}
inline ::koinos::rpc::mempool::get_pending_transactions_response* mempool_rpc_response::release_get_pending_transactions() {
  // @@protoc_insertion_point(field_release:koinos.rpc.mempool.mempool_rpc_response.get_pending_transactions)
  if (_internal_has_get_pending_transactions()) {
    clear_has_response();
      ::koinos::rpc::mempool::get_pending_transactions_response* temp = response_.get_pending_transactions_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_pending_transactions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::rpc::mempool::get_pending_transactions_response& mempool_rpc_response::_internal_get_pending_transactions() const {
  return _internal_has_get_pending_transactions()
      ? *response_.get_pending_transactions_
      : reinterpret_cast< ::koinos::rpc::mempool::get_pending_transactions_response&>(::koinos::rpc::mempool::_get_pending_transactions_response_default_instance_);
}
inline const ::koinos::rpc::mempool::get_pending_transactions_response& mempool_rpc_response::get_pending_transactions() const {
  // @@protoc_insertion_point(field_get:koinos.rpc.mempool.mempool_rpc_response.get_pending_transactions)
  return _internal_get_pending_transactions();
}
inline ::koinos::rpc::mempool::get_pending_transactions_response* mempool_rpc_response::unsafe_arena_release_get_pending_transactions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.rpc.mempool.mempool_rpc_response.get_pending_transactions)
  if (_internal_has_get_pending_transactions()) {
    clear_has_response();
    ::koinos::rpc::mempool::get_pending_transactions_response* temp = response_.get_pending_transactions_;
    response_.get_pending_transactions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void mempool_rpc_response::unsafe_arena_set_allocated_get_pending_transactions(::koinos::rpc::mempool::get_pending_transactions_response* get_pending_transactions) {
  clear_response();
  if (get_pending_transactions) {
    set_has_get_pending_transactions();
    response_.get_pending_transactions_ = get_pending_transactions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.rpc.mempool.mempool_rpc_response.get_pending_transactions)
}
inline ::koinos::rpc::mempool::get_pending_transactions_response* mempool_rpc_response::_internal_mutable_get_pending_transactions() {
  if (!_internal_has_get_pending_transactions()) {
    clear_response();
    set_has_get_pending_transactions();
    response_.get_pending_transactions_ = CreateMaybeMessage< ::koinos::rpc::mempool::get_pending_transactions_response >(GetArena());
  }
  return response_.get_pending_transactions_;
}
inline ::koinos::rpc::mempool::get_pending_transactions_response* mempool_rpc_response::mutable_get_pending_transactions() {
  // @@protoc_insertion_point(field_mutable:koinos.rpc.mempool.mempool_rpc_response.get_pending_transactions)
  return _internal_mutable_get_pending_transactions();
}

inline bool mempool_rpc_response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void mempool_rpc_response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline mempool_rpc_response::ResponseCase mempool_rpc_response::response_case() const {
  return mempool_rpc_response::ResponseCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mempool
}  // namespace rpc
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2frpc_2fmempool_2fmempool_5frpc_2eproto
