// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/contracts/claim/claim.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fclaim_2fclaim_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fclaim_2fclaim_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fcontracts_2fclaim_2fclaim_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fcontracts_2fclaim_2fclaim_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fcontracts_2fclaim_2fclaim_2eproto;
namespace koinos {
namespace contracts {
namespace claim {
class claim_arguments;
struct claim_argumentsDefaultTypeInternal;
extern claim_argumentsDefaultTypeInternal _claim_arguments_default_instance_;
class claim_result;
struct claim_resultDefaultTypeInternal;
extern claim_resultDefaultTypeInternal _claim_result_default_instance_;
class claim_status;
struct claim_statusDefaultTypeInternal;
extern claim_statusDefaultTypeInternal _claim_status_default_instance_;
}  // namespace claim
}  // namespace contracts
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::contracts::claim::claim_arguments* Arena::CreateMaybeMessage<::koinos::contracts::claim::claim_arguments>(Arena*);
template<> ::koinos::contracts::claim::claim_result* Arena::CreateMaybeMessage<::koinos::contracts::claim::claim_result>(Arena*);
template<> ::koinos::contracts::claim::claim_status* Arena::CreateMaybeMessage<::koinos::contracts::claim::claim_status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace contracts {
namespace claim {

// ===================================================================

class claim_status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.claim.claim_status) */ {
 public:
  inline claim_status() : claim_status(nullptr) {}
  ~claim_status() override;
  explicit constexpr claim_status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  claim_status(const claim_status& from);
  claim_status(claim_status&& from) noexcept
    : claim_status() {
    *this = ::std::move(from);
  }

  inline claim_status& operator=(const claim_status& from) {
    CopyFrom(from);
    return *this;
  }
  inline claim_status& operator=(claim_status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const claim_status& default_instance() {
    return *internal_default_instance();
  }
  static inline const claim_status* internal_default_instance() {
    return reinterpret_cast<const claim_status*>(
               &_claim_status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(claim_status& a, claim_status& b) {
    a.Swap(&b);
  }
  inline void Swap(claim_status* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(claim_status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline claim_status* New() const final {
    return new claim_status();
  }

  claim_status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<claim_status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const claim_status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const claim_status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(claim_status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.claim.claim_status";
  }
  protected:
  explicit claim_status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenAmountFieldNumber = 1,
    kClaimedFieldNumber = 2,
  };
  // uint64 token_amount = 1 [jstype = JS_STRING];
  void clear_token_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 token_amount() const;
  void set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_token_amount() const;
  void _internal_set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool claimed = 2;
  void clear_claimed();
  bool claimed() const;
  void set_claimed(bool value);
  private:
  bool _internal_claimed() const;
  void _internal_set_claimed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.claim.claim_status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 token_amount_;
  bool claimed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fclaim_2fclaim_2eproto;
};
// -------------------------------------------------------------------

class claim_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.claim.claim_arguments) */ {
 public:
  inline claim_arguments() : claim_arguments(nullptr) {}
  ~claim_arguments() override;
  explicit constexpr claim_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  claim_arguments(const claim_arguments& from);
  claim_arguments(claim_arguments&& from) noexcept
    : claim_arguments() {
    *this = ::std::move(from);
  }

  inline claim_arguments& operator=(const claim_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline claim_arguments& operator=(claim_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const claim_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const claim_arguments* internal_default_instance() {
    return reinterpret_cast<const claim_arguments*>(
               &_claim_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(claim_arguments& a, claim_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(claim_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(claim_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline claim_arguments* New() const final {
    return new claim_arguments();
  }

  claim_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<claim_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const claim_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const claim_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(claim_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.claim.claim_arguments";
  }
  protected:
  explicit claim_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEthAddressFieldNumber = 1,
    kKoinAddressFieldNumber = 2,
  };
  // bytes eth_address = 1 [(.koinos.btype) = HEX];
  void clear_eth_address();
  const std::string& eth_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eth_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eth_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_eth_address();
  void set_allocated_eth_address(std::string* eth_address);
  private:
  const std::string& _internal_eth_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eth_address(const std::string& value);
  std::string* _internal_mutable_eth_address();
  public:

  // bytes koin_address = 2 [(.koinos.btype) = ADDRESS];
  void clear_koin_address();
  const std::string& koin_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_koin_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_koin_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_koin_address();
  void set_allocated_koin_address(std::string* koin_address);
  private:
  const std::string& _internal_koin_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_koin_address(const std::string& value);
  std::string* _internal_mutable_koin_address();
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.claim.claim_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eth_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr koin_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fclaim_2fclaim_2eproto;
};
// -------------------------------------------------------------------

class claim_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.claim.claim_result) */ {
 public:
  inline claim_result() : claim_result(nullptr) {}
  ~claim_result() override;
  explicit constexpr claim_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  claim_result(const claim_result& from);
  claim_result(claim_result&& from) noexcept
    : claim_result() {
    *this = ::std::move(from);
  }

  inline claim_result& operator=(const claim_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline claim_result& operator=(claim_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const claim_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const claim_result* internal_default_instance() {
    return reinterpret_cast<const claim_result*>(
               &_claim_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(claim_result& a, claim_result& b) {
    a.Swap(&b);
  }
  inline void Swap(claim_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(claim_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline claim_result* New() const final {
    return new claim_result();
  }

  claim_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<claim_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const claim_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const claim_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(claim_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.claim.claim_result";
  }
  protected:
  explicit claim_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.claim.claim_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fclaim_2fclaim_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// claim_status

// uint64 token_amount = 1 [jstype = JS_STRING];
inline void claim_status::clear_token_amount() {
  token_amount_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 claim_status::_internal_token_amount() const {
  return token_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 claim_status::token_amount() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.claim.claim_status.token_amount)
  return _internal_token_amount();
}
inline void claim_status::_internal_set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  token_amount_ = value;
}
inline void claim_status::set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_token_amount(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.claim.claim_status.token_amount)
}

// bool claimed = 2;
inline void claim_status::clear_claimed() {
  claimed_ = false;
}
inline bool claim_status::_internal_claimed() const {
  return claimed_;
}
inline bool claim_status::claimed() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.claim.claim_status.claimed)
  return _internal_claimed();
}
inline void claim_status::_internal_set_claimed(bool value) {
  
  claimed_ = value;
}
inline void claim_status::set_claimed(bool value) {
  _internal_set_claimed(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.claim.claim_status.claimed)
}

// -------------------------------------------------------------------

// claim_arguments

// bytes eth_address = 1 [(.koinos.btype) = HEX];
inline void claim_arguments::clear_eth_address() {
  eth_address_.ClearToEmpty();
}
inline const std::string& claim_arguments::eth_address() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.claim.claim_arguments.eth_address)
  return _internal_eth_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void claim_arguments::set_eth_address(ArgT0&& arg0, ArgT... args) {
 
 eth_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.claim.claim_arguments.eth_address)
}
inline std::string* claim_arguments::mutable_eth_address() {
  std::string* _s = _internal_mutable_eth_address();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.claim.claim_arguments.eth_address)
  return _s;
}
inline const std::string& claim_arguments::_internal_eth_address() const {
  return eth_address_.Get();
}
inline void claim_arguments::_internal_set_eth_address(const std::string& value) {
  
  eth_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* claim_arguments::_internal_mutable_eth_address() {
  
  return eth_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* claim_arguments::release_eth_address() {
  // @@protoc_insertion_point(field_release:koinos.contracts.claim.claim_arguments.eth_address)
  return eth_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void claim_arguments::set_allocated_eth_address(std::string* eth_address) {
  if (eth_address != nullptr) {
    
  } else {
    
  }
  eth_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eth_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.claim.claim_arguments.eth_address)
}

// bytes koin_address = 2 [(.koinos.btype) = ADDRESS];
inline void claim_arguments::clear_koin_address() {
  koin_address_.ClearToEmpty();
}
inline const std::string& claim_arguments::koin_address() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.claim.claim_arguments.koin_address)
  return _internal_koin_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void claim_arguments::set_koin_address(ArgT0&& arg0, ArgT... args) {
 
 koin_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.claim.claim_arguments.koin_address)
}
inline std::string* claim_arguments::mutable_koin_address() {
  std::string* _s = _internal_mutable_koin_address();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.claim.claim_arguments.koin_address)
  return _s;
}
inline const std::string& claim_arguments::_internal_koin_address() const {
  return koin_address_.Get();
}
inline void claim_arguments::_internal_set_koin_address(const std::string& value) {
  
  koin_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* claim_arguments::_internal_mutable_koin_address() {
  
  return koin_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* claim_arguments::release_koin_address() {
  // @@protoc_insertion_point(field_release:koinos.contracts.claim.claim_arguments.koin_address)
  return koin_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void claim_arguments::set_allocated_koin_address(std::string* koin_address) {
  if (koin_address != nullptr) {
    
  } else {
    
  }
  koin_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), koin_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.claim.claim_arguments.koin_address)
}

// -------------------------------------------------------------------

// claim_result

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace claim
}  // namespace contracts
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fclaim_2fclaim_2eproto
