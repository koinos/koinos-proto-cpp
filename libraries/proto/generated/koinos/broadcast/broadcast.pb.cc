// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/broadcast/broadcast.proto

#include "koinos/broadcast/broadcast.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace broadcast {
constexpr transaction_accepted::transaction_accepted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_(nullptr)
  , max_payer_resources_(uint64_t{0u})
  , trx_resource_limit_(uint64_t{0u})
  , height_(uint64_t{0u}){}
struct transaction_acceptedDefaultTypeInternal {
  constexpr transaction_acceptedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transaction_acceptedDefaultTypeInternal() {}
  union {
    transaction_accepted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transaction_acceptedDefaultTypeInternal _transaction_accepted_default_instance_;
constexpr block_accepted::block_accepted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr){}
struct block_acceptedDefaultTypeInternal {
  constexpr block_acceptedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_acceptedDefaultTypeInternal() {}
  union {
    block_accepted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_acceptedDefaultTypeInternal _block_accepted_default_instance_;
constexpr block_irreversible::block_irreversible(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : topology_(nullptr){}
struct block_irreversibleDefaultTypeInternal {
  constexpr block_irreversibleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_irreversibleDefaultTypeInternal() {}
  union {
    block_irreversible _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_irreversibleDefaultTypeInternal _block_irreversible_default_instance_;
constexpr fork_heads::fork_heads(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : heads_()
  , last_irreversible_block_(nullptr){}
struct fork_headsDefaultTypeInternal {
  constexpr fork_headsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~fork_headsDefaultTypeInternal() {}
  union {
    fork_heads _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT fork_headsDefaultTypeInternal _fork_heads_default_instance_;
}  // namespace broadcast
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fbroadcast_2fbroadcast_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fbroadcast_2fbroadcast_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fbroadcast_2fbroadcast_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::transaction_accepted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::transaction_accepted, transaction_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::transaction_accepted, payer_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::transaction_accepted, max_payer_resources_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::transaction_accepted, trx_resource_limit_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::transaction_accepted, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::block_accepted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::block_accepted, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::block_irreversible, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::block_irreversible, topology_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::fork_heads, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::fork_heads, last_irreversible_block_),
  PROTOBUF_FIELD_OFFSET(::koinos::broadcast::fork_heads, heads_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::broadcast::transaction_accepted)},
  { 10, -1, sizeof(::koinos::broadcast::block_accepted)},
  { 16, -1, sizeof(::koinos::broadcast::block_irreversible)},
  { 22, -1, sizeof(::koinos::broadcast::fork_heads)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::broadcast::_transaction_accepted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::broadcast::_block_accepted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::broadcast::_block_irreversible_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::broadcast::_fork_heads_default_instance_),
};

const char descriptor_table_protodef_koinos_2fbroadcast_2fbroadcast_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n koinos/broadcast/broadcast.proto\022\020koin"
  "os.broadcast\032\023koinos/common.proto\032\036koino"
  "s/protocol/protocol.proto\"\241\001\n\024transactio"
  "n_accepted\0221\n\013transaction\030\001 \001(\0132\034.koinos"
  ".protocol.transaction\022\r\n\005payer\030\002 \001(\014\022\033\n\023"
  "max_payer_resources\030\003 \001(\004\022\032\n\022trx_resourc"
  "e_limit\030\004 \001(\004\022\016\n\006height\030\005 \001(\004\"7\n\016block_a"
  "ccepted\022%\n\005block\030\001 \001(\0132\026.koinos.protocol"
  ".block\">\n\022block_irreversible\022(\n\010topology"
  "\030\001 \001(\0132\026.koinos.block_topology\"l\n\nfork_h"
  "eads\0227\n\027last_irreversible_block\030\001 \001(\0132\026."
  "koinos.block_topology\022%\n\005heads\030\002 \003(\0132\026.k"
  "oinos.block_topologyB8Z6github.com/koino"
  "s/koinos-proto-golang/koinos/broadcastb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_deps[2] = {
  &::descriptor_table_koinos_2fcommon_2eproto,
  &::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto = {
  false, false, 566, descriptor_table_protodef_koinos_2fbroadcast_2fbroadcast_2eproto, "koinos/broadcast/broadcast.proto", 
  &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once, descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_koinos_2fbroadcast_2fbroadcast_2eproto::offsets,
  file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto, file_level_enum_descriptors_koinos_2fbroadcast_2fbroadcast_2eproto, file_level_service_descriptors_koinos_2fbroadcast_2fbroadcast_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter() {
  return &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fbroadcast_2fbroadcast_2eproto(&descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto);
namespace koinos {
namespace broadcast {

// ===================================================================

class transaction_accepted::_Internal {
 public:
  static const ::koinos::protocol::transaction& transaction(const transaction_accepted* msg);
};

const ::koinos::protocol::transaction&
transaction_accepted::_Internal::transaction(const transaction_accepted* msg) {
  return *msg->transaction_;
}
void transaction_accepted::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
transaction_accepted::transaction_accepted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.broadcast.transaction_accepted)
}
transaction_accepted::transaction_accepted(const transaction_accepted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payer().empty()) {
    payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payer(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transaction()) {
    transaction_ = new ::koinos::protocol::transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  ::memcpy(&max_payer_resources_, &from.max_payer_resources_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&max_payer_resources_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:koinos.broadcast.transaction_accepted)
}

inline void transaction_accepted::SharedCtor() {
payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(height_));
}

transaction_accepted::~transaction_accepted() {
  // @@protoc_insertion_point(destructor:koinos.broadcast.transaction_accepted)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transaction_accepted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
}

void transaction_accepted::ArenaDtor(void* object) {
  transaction_accepted* _this = reinterpret_cast< transaction_accepted* >(object);
  (void)_this;
}
void transaction_accepted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_accepted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transaction_accepted::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.broadcast.transaction_accepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payer_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  ::memset(&max_payer_resources_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&max_payer_resources_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_accepted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_payer_resources = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_payer_resources_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 trx_resource_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          trx_resource_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction_accepted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.broadcast.transaction_accepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // bytes payer = 2;
  if (!this->_internal_payer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payer(), target);
  }

  // uint64 max_payer_resources = 3;
  if (this->_internal_max_payer_resources() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_max_payer_resources(), target);
  }

  // uint64 trx_resource_limit = 4;
  if (this->_internal_trx_resource_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_trx_resource_limit(), target);
  }

  // uint64 height = 5;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.broadcast.transaction_accepted)
  return target;
}

size_t transaction_accepted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.broadcast.transaction_accepted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payer = 2;
  if (!this->_internal_payer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payer());
  }

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // uint64 max_payer_resources = 3;
  if (this->_internal_max_payer_resources() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_payer_resources());
  }

  // uint64 trx_resource_limit = 4;
  if (this->_internal_trx_resource_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_trx_resource_limit());
  }

  // uint64 height = 5;
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transaction_accepted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transaction_accepted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transaction_accepted::GetClassData() const { return &_class_data_; }

void transaction_accepted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transaction_accepted *>(to)->MergeFrom(
      static_cast<const transaction_accepted &>(from));
}


void transaction_accepted::MergeFrom(const transaction_accepted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.broadcast.transaction_accepted)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payer().empty()) {
    _internal_set_payer(from._internal_payer());
  }
  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::koinos::protocol::transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_max_payer_resources() != 0) {
    _internal_set_max_payer_resources(from._internal_max_payer_resources());
  }
  if (from._internal_trx_resource_limit() != 0) {
    _internal_set_trx_resource_limit(from._internal_trx_resource_limit());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transaction_accepted::CopyFrom(const transaction_accepted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.broadcast.transaction_accepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_accepted::IsInitialized() const {
  return true;
}

void transaction_accepted::InternalSwap(transaction_accepted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payer_, GetArenaForAllocation(),
      &other->payer_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transaction_accepted, height_)
      + sizeof(transaction_accepted::height_)
      - PROTOBUF_FIELD_OFFSET(transaction_accepted, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_accepted::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter, &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once,
      file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[0]);
}

// ===================================================================

class block_accepted::_Internal {
 public:
  static const ::koinos::protocol::block& block(const block_accepted* msg);
};

const ::koinos::protocol::block&
block_accepted::_Internal::block(const block_accepted* msg) {
  return *msg->block_;
}
void block_accepted::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
block_accepted::block_accepted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.broadcast.block_accepted)
}
block_accepted::block_accepted(const block_accepted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::koinos::protocol::block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.broadcast.block_accepted)
}

inline void block_accepted::SharedCtor() {
block_ = nullptr;
}

block_accepted::~block_accepted() {
  // @@protoc_insertion_point(destructor:koinos.broadcast.block_accepted)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_accepted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void block_accepted::ArenaDtor(void* object) {
  block_accepted* _this = reinterpret_cast< block_accepted* >(object);
  (void)_this;
}
void block_accepted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_accepted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_accepted::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.broadcast.block_accepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_accepted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_accepted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.broadcast.block_accepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.block block = 1;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.broadcast.block_accepted)
  return target;
}

size_t block_accepted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.broadcast.block_accepted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.block block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_accepted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_accepted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_accepted::GetClassData() const { return &_class_data_; }

void block_accepted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block_accepted *>(to)->MergeFrom(
      static_cast<const block_accepted &>(from));
}


void block_accepted::MergeFrom(const block_accepted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.broadcast.block_accepted)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::koinos::protocol::block::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_accepted::CopyFrom(const block_accepted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.broadcast.block_accepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_accepted::IsInitialized() const {
  return true;
}

void block_accepted::InternalSwap(block_accepted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata block_accepted::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter, &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once,
      file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[1]);
}

// ===================================================================

class block_irreversible::_Internal {
 public:
  static const ::koinos::block_topology& topology(const block_irreversible* msg);
};

const ::koinos::block_topology&
block_irreversible::_Internal::topology(const block_irreversible* msg) {
  return *msg->topology_;
}
void block_irreversible::clear_topology() {
  if (GetArenaForAllocation() == nullptr && topology_ != nullptr) {
    delete topology_;
  }
  topology_ = nullptr;
}
block_irreversible::block_irreversible(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.broadcast.block_irreversible)
}
block_irreversible::block_irreversible(const block_irreversible& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topology()) {
    topology_ = new ::koinos::block_topology(*from.topology_);
  } else {
    topology_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.broadcast.block_irreversible)
}

inline void block_irreversible::SharedCtor() {
topology_ = nullptr;
}

block_irreversible::~block_irreversible() {
  // @@protoc_insertion_point(destructor:koinos.broadcast.block_irreversible)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_irreversible::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete topology_;
}

void block_irreversible::ArenaDtor(void* object) {
  block_irreversible* _this = reinterpret_cast< block_irreversible* >(object);
  (void)_this;
}
void block_irreversible::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_irreversible::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_irreversible::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.broadcast.block_irreversible)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && topology_ != nullptr) {
    delete topology_;
  }
  topology_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_irreversible::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.block_topology topology = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topology(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_irreversible::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.broadcast.block_irreversible)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.block_topology topology = 1;
  if (this->_internal_has_topology()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::topology(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.broadcast.block_irreversible)
  return target;
}

size_t block_irreversible::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.broadcast.block_irreversible)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.block_topology topology = 1;
  if (this->_internal_has_topology()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topology_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_irreversible::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_irreversible::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_irreversible::GetClassData() const { return &_class_data_; }

void block_irreversible::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block_irreversible *>(to)->MergeFrom(
      static_cast<const block_irreversible &>(from));
}


void block_irreversible::MergeFrom(const block_irreversible& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.broadcast.block_irreversible)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topology()) {
    _internal_mutable_topology()->::koinos::block_topology::MergeFrom(from._internal_topology());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_irreversible::CopyFrom(const block_irreversible& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.broadcast.block_irreversible)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_irreversible::IsInitialized() const {
  return true;
}

void block_irreversible::InternalSwap(block_irreversible* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(topology_, other->topology_);
}

::PROTOBUF_NAMESPACE_ID::Metadata block_irreversible::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter, &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once,
      file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[2]);
}

// ===================================================================

class fork_heads::_Internal {
 public:
  static const ::koinos::block_topology& last_irreversible_block(const fork_heads* msg);
};

const ::koinos::block_topology&
fork_heads::_Internal::last_irreversible_block(const fork_heads* msg) {
  return *msg->last_irreversible_block_;
}
void fork_heads::clear_last_irreversible_block() {
  if (GetArenaForAllocation() == nullptr && last_irreversible_block_ != nullptr) {
    delete last_irreversible_block_;
  }
  last_irreversible_block_ = nullptr;
}
void fork_heads::clear_heads() {
  heads_.Clear();
}
fork_heads::fork_heads(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  heads_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.broadcast.fork_heads)
}
fork_heads::fork_heads(const fork_heads& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      heads_(from.heads_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_irreversible_block()) {
    last_irreversible_block_ = new ::koinos::block_topology(*from.last_irreversible_block_);
  } else {
    last_irreversible_block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.broadcast.fork_heads)
}

inline void fork_heads::SharedCtor() {
last_irreversible_block_ = nullptr;
}

fork_heads::~fork_heads() {
  // @@protoc_insertion_point(destructor:koinos.broadcast.fork_heads)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void fork_heads::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete last_irreversible_block_;
}

void fork_heads::ArenaDtor(void* object) {
  fork_heads* _this = reinterpret_cast< fork_heads* >(object);
  (void)_this;
}
void fork_heads::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void fork_heads::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void fork_heads::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.broadcast.fork_heads)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heads_.Clear();
  if (GetArenaForAllocation() == nullptr && last_irreversible_block_ != nullptr) {
    delete last_irreversible_block_;
  }
  last_irreversible_block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* fork_heads::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.block_topology last_irreversible_block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_irreversible_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .koinos.block_topology heads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_heads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fork_heads::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.broadcast.fork_heads)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.block_topology last_irreversible_block = 1;
  if (this->_internal_has_last_irreversible_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::last_irreversible_block(this), target, stream);
  }

  // repeated .koinos.block_topology heads = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_heads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_heads(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.broadcast.fork_heads)
  return target;
}

size_t fork_heads::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.broadcast.fork_heads)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.block_topology heads = 2;
  total_size += 1UL * this->_internal_heads_size();
  for (const auto& msg : this->heads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .koinos.block_topology last_irreversible_block = 1;
  if (this->_internal_has_last_irreversible_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_irreversible_block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData fork_heads::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    fork_heads::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*fork_heads::GetClassData() const { return &_class_data_; }

void fork_heads::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<fork_heads *>(to)->MergeFrom(
      static_cast<const fork_heads &>(from));
}


void fork_heads::MergeFrom(const fork_heads& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.broadcast.fork_heads)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heads_.MergeFrom(from.heads_);
  if (from._internal_has_last_irreversible_block()) {
    _internal_mutable_last_irreversible_block()->::koinos::block_topology::MergeFrom(from._internal_last_irreversible_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void fork_heads::CopyFrom(const fork_heads& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.broadcast.fork_heads)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fork_heads::IsInitialized() const {
  return true;
}

void fork_heads::InternalSwap(fork_heads* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  heads_.InternalSwap(&other->heads_);
  swap(last_irreversible_block_, other->last_irreversible_block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fork_heads::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_getter, &descriptor_table_koinos_2fbroadcast_2fbroadcast_2eproto_once,
      file_level_metadata_koinos_2fbroadcast_2fbroadcast_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace broadcast
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::broadcast::transaction_accepted* Arena::CreateMaybeMessage< ::koinos::broadcast::transaction_accepted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::broadcast::transaction_accepted >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::broadcast::block_accepted* Arena::CreateMaybeMessage< ::koinos::broadcast::block_accepted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::broadcast::block_accepted >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::broadcast::block_irreversible* Arena::CreateMaybeMessage< ::koinos::broadcast::block_irreversible >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::broadcast::block_irreversible >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::broadcast::fork_heads* Arena::CreateMaybeMessage< ::koinos::broadcast::fork_heads >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::broadcast::fork_heads >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
