// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/contracts/resources/resources.proto

#include "koinos/contracts/resources/resources.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace contracts {
namespace resources {
constexpr market::market(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resource_supply_(uint64_t{0u})
  , block_budget_(uint64_t{0u})
  , block_limit_(uint64_t{0u}){}
struct marketDefaultTypeInternal {
  constexpr marketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~marketDefaultTypeInternal() {}
  union {
    market _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT marketDefaultTypeInternal _market_default_instance_;
constexpr resource_markets::resource_markets(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : disk_storage_(nullptr)
  , network_bandwidth_(nullptr)
  , compute_bandwidth_(nullptr){}
struct resource_marketsDefaultTypeInternal {
  constexpr resource_marketsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~resource_marketsDefaultTypeInternal() {}
  union {
    resource_markets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT resource_marketsDefaultTypeInternal _resource_markets_default_instance_;
constexpr market_parameters::market_parameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_budget_(uint64_t{0u})
  , block_limit_(uint64_t{0u}){}
struct market_parametersDefaultTypeInternal {
  constexpr market_parametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~market_parametersDefaultTypeInternal() {}
  union {
    market_parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT market_parametersDefaultTypeInternal _market_parameters_default_instance_;
constexpr resource_parameters::resource_parameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_interval_ms_(uint64_t{0u})
  , rc_regen_ms_(uint64_t{0u})
  , decay_constant_(uint64_t{0u})
  , one_minus_decay_constant_(uint64_t{0u})
  , print_rate_premium_(uint64_t{0u})
  , print_rate_precision_(uint64_t{0u}){}
struct resource_parametersDefaultTypeInternal {
  constexpr resource_parametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~resource_parametersDefaultTypeInternal() {}
  union {
    resource_parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT resource_parametersDefaultTypeInternal _resource_parameters_default_instance_;
constexpr set_resource_markets_parameters_arguments::set_resource_markets_parameters_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : disk_storage_(nullptr)
  , network_bandwidth_(nullptr)
  , compute_bandwidth_(nullptr){}
struct set_resource_markets_parameters_argumentsDefaultTypeInternal {
  constexpr set_resource_markets_parameters_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_resource_markets_parameters_argumentsDefaultTypeInternal() {}
  union {
    set_resource_markets_parameters_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_resource_markets_parameters_argumentsDefaultTypeInternal _set_resource_markets_parameters_arguments_default_instance_;
constexpr set_resource_markets_parameters_result::set_resource_markets_parameters_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct set_resource_markets_parameters_resultDefaultTypeInternal {
  constexpr set_resource_markets_parameters_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_resource_markets_parameters_resultDefaultTypeInternal() {}
  union {
    set_resource_markets_parameters_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_resource_markets_parameters_resultDefaultTypeInternal _set_resource_markets_parameters_result_default_instance_;
constexpr get_resource_markets_arguments::get_resource_markets_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_resource_markets_argumentsDefaultTypeInternal {
  constexpr get_resource_markets_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_resource_markets_argumentsDefaultTypeInternal() {}
  union {
    get_resource_markets_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_resource_markets_argumentsDefaultTypeInternal _get_resource_markets_arguments_default_instance_;
constexpr get_resource_markets_result::get_resource_markets_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr){}
struct get_resource_markets_resultDefaultTypeInternal {
  constexpr get_resource_markets_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_resource_markets_resultDefaultTypeInternal() {}
  union {
    get_resource_markets_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_resource_markets_resultDefaultTypeInternal _get_resource_markets_result_default_instance_;
constexpr set_resource_parameters_arguments::set_resource_parameters_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : params_(nullptr){}
struct set_resource_parameters_argumentsDefaultTypeInternal {
  constexpr set_resource_parameters_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_resource_parameters_argumentsDefaultTypeInternal() {}
  union {
    set_resource_parameters_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_resource_parameters_argumentsDefaultTypeInternal _set_resource_parameters_arguments_default_instance_;
constexpr set_resource_parameters_result::set_resource_parameters_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct set_resource_parameters_resultDefaultTypeInternal {
  constexpr set_resource_parameters_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~set_resource_parameters_resultDefaultTypeInternal() {}
  union {
    set_resource_parameters_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT set_resource_parameters_resultDefaultTypeInternal _set_resource_parameters_result_default_instance_;
constexpr get_resource_parameters_arguments::get_resource_parameters_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_resource_parameters_argumentsDefaultTypeInternal {
  constexpr get_resource_parameters_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_resource_parameters_argumentsDefaultTypeInternal() {}
  union {
    get_resource_parameters_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_resource_parameters_argumentsDefaultTypeInternal _get_resource_parameters_arguments_default_instance_;
constexpr get_resource_parameters_result::get_resource_parameters_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr){}
struct get_resource_parameters_resultDefaultTypeInternal {
  constexpr get_resource_parameters_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_resource_parameters_resultDefaultTypeInternal() {}
  union {
    get_resource_parameters_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_resource_parameters_resultDefaultTypeInternal _get_resource_parameters_result_default_instance_;
}  // namespace resources
}  // namespace contracts
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fcontracts_2fresources_2fresources_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fcontracts_2fresources_2fresources_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fcontracts_2fresources_2fresources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::market, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::market, resource_supply_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::market, block_budget_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::market, block_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::resource_markets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::resource_markets, disk_storage_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::resource_markets, network_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::resource_markets, compute_bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::market_parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::market_parameters, block_budget_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::market_parameters, block_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::resource_parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::resource_parameters, block_interval_ms_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::resource_parameters, rc_regen_ms_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::resource_parameters, decay_constant_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::resource_parameters, one_minus_decay_constant_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::resource_parameters, print_rate_premium_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::resource_parameters, print_rate_precision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::set_resource_markets_parameters_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::set_resource_markets_parameters_arguments, disk_storage_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::set_resource_markets_parameters_arguments, network_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::set_resource_markets_parameters_arguments, compute_bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::set_resource_markets_parameters_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::get_resource_markets_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::get_resource_markets_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::get_resource_markets_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::set_resource_parameters_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::set_resource_parameters_arguments, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::set_resource_parameters_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::get_resource_parameters_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::get_resource_parameters_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::resources::get_resource_parameters_result, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::contracts::resources::market)},
  { 8, -1, sizeof(::koinos::contracts::resources::resource_markets)},
  { 16, -1, sizeof(::koinos::contracts::resources::market_parameters)},
  { 23, -1, sizeof(::koinos::contracts::resources::resource_parameters)},
  { 34, -1, sizeof(::koinos::contracts::resources::set_resource_markets_parameters_arguments)},
  { 42, -1, sizeof(::koinos::contracts::resources::set_resource_markets_parameters_result)},
  { 47, -1, sizeof(::koinos::contracts::resources::get_resource_markets_arguments)},
  { 52, -1, sizeof(::koinos::contracts::resources::get_resource_markets_result)},
  { 58, -1, sizeof(::koinos::contracts::resources::set_resource_parameters_arguments)},
  { 64, -1, sizeof(::koinos::contracts::resources::set_resource_parameters_result)},
  { 69, -1, sizeof(::koinos::contracts::resources::get_resource_parameters_arguments)},
  { 74, -1, sizeof(::koinos::contracts::resources::get_resource_parameters_result)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::resources::_market_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::resources::_resource_markets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::resources::_market_parameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::resources::_resource_parameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::resources::_set_resource_markets_parameters_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::resources::_set_resource_markets_parameters_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::resources::_get_resource_markets_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::resources::_get_resource_markets_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::resources::_set_resource_parameters_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::resources::_set_resource_parameters_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::resources::_get_resource_parameters_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::resources::_get_resource_parameters_result_default_instance_),
};

const char descriptor_table_protodef_koinos_2fcontracts_2fresources_2fresources_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*koinos/contracts/resources/resources.p"
  "roto\022\032koinos.contracts.resources\"X\n\006mark"
  "et\022\033\n\017resource_supply\030\001 \001(\004B\0020\001\022\030\n\014block"
  "_budget\030\003 \001(\004B\0020\001\022\027\n\013block_limit\030\004 \001(\004B\002"
  "0\001\"\312\001\n\020resource_markets\0228\n\014disk_storage\030"
  "\001 \001(\0132\".koinos.contracts.resources.marke"
  "t\022=\n\021network_bandwidth\030\002 \001(\0132\".koinos.co"
  "ntracts.resources.market\022=\n\021compute_band"
  "width\030\003 \001(\0132\".koinos.contracts.resources"
  ".market\"F\n\021market_parameters\022\030\n\014block_bu"
  "dget\030\001 \001(\004B\0020\001\022\027\n\013block_limit\030\002 \001(\004B\0020\001\""
  "\321\001\n\023resource_parameters\022\035\n\021block_interva"
  "l_ms\030\001 \001(\004B\0020\001\022\027\n\013rc_regen_ms\030\002 \001(\004B\0020\001\022"
  "\032\n\016decay_constant\030\003 \001(\004B\0020\001\022$\n\030one_minus"
  "_decay_constant\030\004 \001(\004B\0020\001\022\036\n\022print_rate_"
  "premium\030\005 \001(\004B\0020\001\022 \n\024print_rate_precisio"
  "n\030\006 \001(\004B\0020\001\"\204\002\n)set_resource_markets_par"
  "ameters_arguments\022C\n\014disk_storage\030\001 \001(\0132"
  "-.koinos.contracts.resources.market_para"
  "meters\022H\n\021network_bandwidth\030\002 \001(\0132-.koin"
  "os.contracts.resources.market_parameters"
  "\022H\n\021compute_bandwidth\030\003 \001(\0132-.koinos.con"
  "tracts.resources.market_parameters\"(\n&se"
  "t_resource_markets_parameters_result\" \n\036"
  "get_resource_markets_arguments\"Z\n\033get_re"
  "source_markets_result\022;\n\005value\030\001 \001(\0132,.k"
  "oinos.contracts.resources.resource_marke"
  "ts\"d\n!set_resource_parameters_arguments\022"
  "\?\n\006params\030\001 \001(\0132/.koinos.contracts.resou"
  "rces.resource_parameters\" \n\036set_resource"
  "_parameters_result\"#\n!get_resource_param"
  "eters_arguments\"`\n\036get_resource_paramete"
  "rs_result\022>\n\005value\030\001 \001(\0132/.koinos.contra"
  "cts.resources.resource_parametersBEZCgit"
  "hub.com/koinos/koinos-proto-golang/v2/ko"
  "inos/contracts/resourcesb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto = {
  false, false, 1432, descriptor_table_protodef_koinos_2fcontracts_2fresources_2fresources_2eproto, "koinos/contracts/resources/resources.proto", 
  &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_koinos_2fcontracts_2fresources_2fresources_2eproto::offsets,
  file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto, file_level_enum_descriptors_koinos_2fcontracts_2fresources_2fresources_2eproto, file_level_service_descriptors_koinos_2fcontracts_2fresources_2fresources_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_getter() {
  return &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fcontracts_2fresources_2fresources_2eproto(&descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto);
namespace koinos {
namespace contracts {
namespace resources {

// ===================================================================

class market::_Internal {
 public:
};

market::market(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.resources.market)
}
market::market(const market& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&resource_supply_, &from.resource_supply_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_limit_) -
    reinterpret_cast<char*>(&resource_supply_)) + sizeof(block_limit_));
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.resources.market)
}

inline void market::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&resource_supply_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_limit_) -
    reinterpret_cast<char*>(&resource_supply_)) + sizeof(block_limit_));
}

market::~market() {
  // @@protoc_insertion_point(destructor:koinos.contracts.resources.market)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void market::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void market::ArenaDtor(void* object) {
  market* _this = reinterpret_cast< market* >(object);
  (void)_this;
}
void market::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void market::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void market::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.resources.market)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&resource_supply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_limit_) -
      reinterpret_cast<char*>(&resource_supply_)) + sizeof(block_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* market::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 resource_supply = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          resource_supply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_budget = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          block_budget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_limit = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          block_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* market::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.resources.market)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 resource_supply = 1 [jstype = JS_STRING];
  if (this->_internal_resource_supply() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_resource_supply(), target);
  }

  // uint64 block_budget = 3 [jstype = JS_STRING];
  if (this->_internal_block_budget() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_block_budget(), target);
  }

  // uint64 block_limit = 4 [jstype = JS_STRING];
  if (this->_internal_block_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_block_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.resources.market)
  return target;
}

size_t market::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.resources.market)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 resource_supply = 1 [jstype = JS_STRING];
  if (this->_internal_resource_supply() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_resource_supply());
  }

  // uint64 block_budget = 3 [jstype = JS_STRING];
  if (this->_internal_block_budget() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_budget());
  }

  // uint64 block_limit = 4 [jstype = JS_STRING];
  if (this->_internal_block_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData market::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    market::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*market::GetClassData() const { return &_class_data_; }

void market::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<market *>(to)->MergeFrom(
      static_cast<const market &>(from));
}


void market::MergeFrom(const market& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.resources.market)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_resource_supply() != 0) {
    _internal_set_resource_supply(from._internal_resource_supply());
  }
  if (from._internal_block_budget() != 0) {
    _internal_set_block_budget(from._internal_block_budget());
  }
  if (from._internal_block_limit() != 0) {
    _internal_set_block_limit(from._internal_block_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void market::CopyFrom(const market& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.resources.market)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool market::IsInitialized() const {
  return true;
}

void market::InternalSwap(market* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(market, block_limit_)
      + sizeof(market::block_limit_)
      - PROTOBUF_FIELD_OFFSET(market, resource_supply_)>(
          reinterpret_cast<char*>(&resource_supply_),
          reinterpret_cast<char*>(&other->resource_supply_));
}

::PROTOBUF_NAMESPACE_ID::Metadata market::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto[0]);
}

// ===================================================================

class resource_markets::_Internal {
 public:
  static const ::koinos::contracts::resources::market& disk_storage(const resource_markets* msg);
  static const ::koinos::contracts::resources::market& network_bandwidth(const resource_markets* msg);
  static const ::koinos::contracts::resources::market& compute_bandwidth(const resource_markets* msg);
};

const ::koinos::contracts::resources::market&
resource_markets::_Internal::disk_storage(const resource_markets* msg) {
  return *msg->disk_storage_;
}
const ::koinos::contracts::resources::market&
resource_markets::_Internal::network_bandwidth(const resource_markets* msg) {
  return *msg->network_bandwidth_;
}
const ::koinos::contracts::resources::market&
resource_markets::_Internal::compute_bandwidth(const resource_markets* msg) {
  return *msg->compute_bandwidth_;
}
resource_markets::resource_markets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.resources.resource_markets)
}
resource_markets::resource_markets(const resource_markets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_disk_storage()) {
    disk_storage_ = new ::koinos::contracts::resources::market(*from.disk_storage_);
  } else {
    disk_storage_ = nullptr;
  }
  if (from._internal_has_network_bandwidth()) {
    network_bandwidth_ = new ::koinos::contracts::resources::market(*from.network_bandwidth_);
  } else {
    network_bandwidth_ = nullptr;
  }
  if (from._internal_has_compute_bandwidth()) {
    compute_bandwidth_ = new ::koinos::contracts::resources::market(*from.compute_bandwidth_);
  } else {
    compute_bandwidth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.resources.resource_markets)
}

inline void resource_markets::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&disk_storage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compute_bandwidth_) -
    reinterpret_cast<char*>(&disk_storage_)) + sizeof(compute_bandwidth_));
}

resource_markets::~resource_markets() {
  // @@protoc_insertion_point(destructor:koinos.contracts.resources.resource_markets)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void resource_markets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete disk_storage_;
  if (this != internal_default_instance()) delete network_bandwidth_;
  if (this != internal_default_instance()) delete compute_bandwidth_;
}

void resource_markets::ArenaDtor(void* object) {
  resource_markets* _this = reinterpret_cast< resource_markets* >(object);
  (void)_this;
}
void resource_markets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void resource_markets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void resource_markets::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.resources.resource_markets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && disk_storage_ != nullptr) {
    delete disk_storage_;
  }
  disk_storage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && network_bandwidth_ != nullptr) {
    delete network_bandwidth_;
  }
  network_bandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && compute_bandwidth_ != nullptr) {
    delete compute_bandwidth_;
  }
  compute_bandwidth_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* resource_markets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.contracts.resources.market disk_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_disk_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.contracts.resources.market network_bandwidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_bandwidth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.contracts.resources.market compute_bandwidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_compute_bandwidth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* resource_markets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.resources.resource_markets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.contracts.resources.market disk_storage = 1;
  if (this->_internal_has_disk_storage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::disk_storage(this), target, stream);
  }

  // .koinos.contracts.resources.market network_bandwidth = 2;
  if (this->_internal_has_network_bandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::network_bandwidth(this), target, stream);
  }

  // .koinos.contracts.resources.market compute_bandwidth = 3;
  if (this->_internal_has_compute_bandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::compute_bandwidth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.resources.resource_markets)
  return target;
}

size_t resource_markets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.resources.resource_markets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.contracts.resources.market disk_storage = 1;
  if (this->_internal_has_disk_storage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disk_storage_);
  }

  // .koinos.contracts.resources.market network_bandwidth = 2;
  if (this->_internal_has_network_bandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_bandwidth_);
  }

  // .koinos.contracts.resources.market compute_bandwidth = 3;
  if (this->_internal_has_compute_bandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compute_bandwidth_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData resource_markets::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    resource_markets::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*resource_markets::GetClassData() const { return &_class_data_; }

void resource_markets::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<resource_markets *>(to)->MergeFrom(
      static_cast<const resource_markets &>(from));
}


void resource_markets::MergeFrom(const resource_markets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.resources.resource_markets)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_disk_storage()) {
    _internal_mutable_disk_storage()->::koinos::contracts::resources::market::MergeFrom(from._internal_disk_storage());
  }
  if (from._internal_has_network_bandwidth()) {
    _internal_mutable_network_bandwidth()->::koinos::contracts::resources::market::MergeFrom(from._internal_network_bandwidth());
  }
  if (from._internal_has_compute_bandwidth()) {
    _internal_mutable_compute_bandwidth()->::koinos::contracts::resources::market::MergeFrom(from._internal_compute_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void resource_markets::CopyFrom(const resource_markets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.resources.resource_markets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool resource_markets::IsInitialized() const {
  return true;
}

void resource_markets::InternalSwap(resource_markets* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(resource_markets, compute_bandwidth_)
      + sizeof(resource_markets::compute_bandwidth_)
      - PROTOBUF_FIELD_OFFSET(resource_markets, disk_storage_)>(
          reinterpret_cast<char*>(&disk_storage_),
          reinterpret_cast<char*>(&other->disk_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata resource_markets::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto[1]);
}

// ===================================================================

class market_parameters::_Internal {
 public:
};

market_parameters::market_parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.resources.market_parameters)
}
market_parameters::market_parameters(const market_parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&block_budget_, &from.block_budget_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_limit_) -
    reinterpret_cast<char*>(&block_budget_)) + sizeof(block_limit_));
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.resources.market_parameters)
}

inline void market_parameters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_budget_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block_limit_) -
    reinterpret_cast<char*>(&block_budget_)) + sizeof(block_limit_));
}

market_parameters::~market_parameters() {
  // @@protoc_insertion_point(destructor:koinos.contracts.resources.market_parameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void market_parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void market_parameters::ArenaDtor(void* object) {
  market_parameters* _this = reinterpret_cast< market_parameters* >(object);
  (void)_this;
}
void market_parameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void market_parameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void market_parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.resources.market_parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&block_budget_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_limit_) -
      reinterpret_cast<char*>(&block_budget_)) + sizeof(block_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* market_parameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_budget = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_budget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_limit = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* market_parameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.resources.market_parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_budget = 1 [jstype = JS_STRING];
  if (this->_internal_block_budget() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_budget(), target);
  }

  // uint64 block_limit = 2 [jstype = JS_STRING];
  if (this->_internal_block_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.resources.market_parameters)
  return target;
}

size_t market_parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.resources.market_parameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_budget = 1 [jstype = JS_STRING];
  if (this->_internal_block_budget() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_budget());
  }

  // uint64 block_limit = 2 [jstype = JS_STRING];
  if (this->_internal_block_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData market_parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    market_parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*market_parameters::GetClassData() const { return &_class_data_; }

void market_parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<market_parameters *>(to)->MergeFrom(
      static_cast<const market_parameters &>(from));
}


void market_parameters::MergeFrom(const market_parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.resources.market_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_budget() != 0) {
    _internal_set_block_budget(from._internal_block_budget());
  }
  if (from._internal_block_limit() != 0) {
    _internal_set_block_limit(from._internal_block_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void market_parameters::CopyFrom(const market_parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.resources.market_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool market_parameters::IsInitialized() const {
  return true;
}

void market_parameters::InternalSwap(market_parameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(market_parameters, block_limit_)
      + sizeof(market_parameters::block_limit_)
      - PROTOBUF_FIELD_OFFSET(market_parameters, block_budget_)>(
          reinterpret_cast<char*>(&block_budget_),
          reinterpret_cast<char*>(&other->block_budget_));
}

::PROTOBUF_NAMESPACE_ID::Metadata market_parameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto[2]);
}

// ===================================================================

class resource_parameters::_Internal {
 public:
};

resource_parameters::resource_parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.resources.resource_parameters)
}
resource_parameters::resource_parameters(const resource_parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&block_interval_ms_, &from.block_interval_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&print_rate_precision_) -
    reinterpret_cast<char*>(&block_interval_ms_)) + sizeof(print_rate_precision_));
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.resources.resource_parameters)
}

inline void resource_parameters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_interval_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&print_rate_precision_) -
    reinterpret_cast<char*>(&block_interval_ms_)) + sizeof(print_rate_precision_));
}

resource_parameters::~resource_parameters() {
  // @@protoc_insertion_point(destructor:koinos.contracts.resources.resource_parameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void resource_parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void resource_parameters::ArenaDtor(void* object) {
  resource_parameters* _this = reinterpret_cast< resource_parameters* >(object);
  (void)_this;
}
void resource_parameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void resource_parameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void resource_parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.resources.resource_parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&block_interval_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&print_rate_precision_) -
      reinterpret_cast<char*>(&block_interval_ms_)) + sizeof(print_rate_precision_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* resource_parameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_interval_ms = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 rc_regen_ms = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rc_regen_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 decay_constant = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          decay_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 one_minus_decay_constant = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          one_minus_decay_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 print_rate_premium = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          print_rate_premium_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 print_rate_precision = 6 [jstype = JS_STRING];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          print_rate_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* resource_parameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.resources.resource_parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_interval_ms = 1 [jstype = JS_STRING];
  if (this->_internal_block_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block_interval_ms(), target);
  }

  // uint64 rc_regen_ms = 2 [jstype = JS_STRING];
  if (this->_internal_rc_regen_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_rc_regen_ms(), target);
  }

  // uint64 decay_constant = 3 [jstype = JS_STRING];
  if (this->_internal_decay_constant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_decay_constant(), target);
  }

  // uint64 one_minus_decay_constant = 4 [jstype = JS_STRING];
  if (this->_internal_one_minus_decay_constant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_one_minus_decay_constant(), target);
  }

  // uint64 print_rate_premium = 5 [jstype = JS_STRING];
  if (this->_internal_print_rate_premium() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_print_rate_premium(), target);
  }

  // uint64 print_rate_precision = 6 [jstype = JS_STRING];
  if (this->_internal_print_rate_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_print_rate_precision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.resources.resource_parameters)
  return target;
}

size_t resource_parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.resources.resource_parameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block_interval_ms = 1 [jstype = JS_STRING];
  if (this->_internal_block_interval_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_interval_ms());
  }

  // uint64 rc_regen_ms = 2 [jstype = JS_STRING];
  if (this->_internal_rc_regen_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rc_regen_ms());
  }

  // uint64 decay_constant = 3 [jstype = JS_STRING];
  if (this->_internal_decay_constant() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_decay_constant());
  }

  // uint64 one_minus_decay_constant = 4 [jstype = JS_STRING];
  if (this->_internal_one_minus_decay_constant() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_one_minus_decay_constant());
  }

  // uint64 print_rate_premium = 5 [jstype = JS_STRING];
  if (this->_internal_print_rate_premium() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_print_rate_premium());
  }

  // uint64 print_rate_precision = 6 [jstype = JS_STRING];
  if (this->_internal_print_rate_precision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_print_rate_precision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData resource_parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    resource_parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*resource_parameters::GetClassData() const { return &_class_data_; }

void resource_parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<resource_parameters *>(to)->MergeFrom(
      static_cast<const resource_parameters &>(from));
}


void resource_parameters::MergeFrom(const resource_parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.resources.resource_parameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block_interval_ms() != 0) {
    _internal_set_block_interval_ms(from._internal_block_interval_ms());
  }
  if (from._internal_rc_regen_ms() != 0) {
    _internal_set_rc_regen_ms(from._internal_rc_regen_ms());
  }
  if (from._internal_decay_constant() != 0) {
    _internal_set_decay_constant(from._internal_decay_constant());
  }
  if (from._internal_one_minus_decay_constant() != 0) {
    _internal_set_one_minus_decay_constant(from._internal_one_minus_decay_constant());
  }
  if (from._internal_print_rate_premium() != 0) {
    _internal_set_print_rate_premium(from._internal_print_rate_premium());
  }
  if (from._internal_print_rate_precision() != 0) {
    _internal_set_print_rate_precision(from._internal_print_rate_precision());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void resource_parameters::CopyFrom(const resource_parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.resources.resource_parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool resource_parameters::IsInitialized() const {
  return true;
}

void resource_parameters::InternalSwap(resource_parameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(resource_parameters, print_rate_precision_)
      + sizeof(resource_parameters::print_rate_precision_)
      - PROTOBUF_FIELD_OFFSET(resource_parameters, block_interval_ms_)>(
          reinterpret_cast<char*>(&block_interval_ms_),
          reinterpret_cast<char*>(&other->block_interval_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata resource_parameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto[3]);
}

// ===================================================================

class set_resource_markets_parameters_arguments::_Internal {
 public:
  static const ::koinos::contracts::resources::market_parameters& disk_storage(const set_resource_markets_parameters_arguments* msg);
  static const ::koinos::contracts::resources::market_parameters& network_bandwidth(const set_resource_markets_parameters_arguments* msg);
  static const ::koinos::contracts::resources::market_parameters& compute_bandwidth(const set_resource_markets_parameters_arguments* msg);
};

const ::koinos::contracts::resources::market_parameters&
set_resource_markets_parameters_arguments::_Internal::disk_storage(const set_resource_markets_parameters_arguments* msg) {
  return *msg->disk_storage_;
}
const ::koinos::contracts::resources::market_parameters&
set_resource_markets_parameters_arguments::_Internal::network_bandwidth(const set_resource_markets_parameters_arguments* msg) {
  return *msg->network_bandwidth_;
}
const ::koinos::contracts::resources::market_parameters&
set_resource_markets_parameters_arguments::_Internal::compute_bandwidth(const set_resource_markets_parameters_arguments* msg) {
  return *msg->compute_bandwidth_;
}
set_resource_markets_parameters_arguments::set_resource_markets_parameters_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.resources.set_resource_markets_parameters_arguments)
}
set_resource_markets_parameters_arguments::set_resource_markets_parameters_arguments(const set_resource_markets_parameters_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_disk_storage()) {
    disk_storage_ = new ::koinos::contracts::resources::market_parameters(*from.disk_storage_);
  } else {
    disk_storage_ = nullptr;
  }
  if (from._internal_has_network_bandwidth()) {
    network_bandwidth_ = new ::koinos::contracts::resources::market_parameters(*from.network_bandwidth_);
  } else {
    network_bandwidth_ = nullptr;
  }
  if (from._internal_has_compute_bandwidth()) {
    compute_bandwidth_ = new ::koinos::contracts::resources::market_parameters(*from.compute_bandwidth_);
  } else {
    compute_bandwidth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.resources.set_resource_markets_parameters_arguments)
}

inline void set_resource_markets_parameters_arguments::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&disk_storage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compute_bandwidth_) -
    reinterpret_cast<char*>(&disk_storage_)) + sizeof(compute_bandwidth_));
}

set_resource_markets_parameters_arguments::~set_resource_markets_parameters_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.resources.set_resource_markets_parameters_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_resource_markets_parameters_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete disk_storage_;
  if (this != internal_default_instance()) delete network_bandwidth_;
  if (this != internal_default_instance()) delete compute_bandwidth_;
}

void set_resource_markets_parameters_arguments::ArenaDtor(void* object) {
  set_resource_markets_parameters_arguments* _this = reinterpret_cast< set_resource_markets_parameters_arguments* >(object);
  (void)_this;
}
void set_resource_markets_parameters_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_resource_markets_parameters_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_resource_markets_parameters_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.resources.set_resource_markets_parameters_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && disk_storage_ != nullptr) {
    delete disk_storage_;
  }
  disk_storage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && network_bandwidth_ != nullptr) {
    delete network_bandwidth_;
  }
  network_bandwidth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && compute_bandwidth_ != nullptr) {
    delete compute_bandwidth_;
  }
  compute_bandwidth_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_resource_markets_parameters_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.contracts.resources.market_parameters disk_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_disk_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.contracts.resources.market_parameters network_bandwidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_bandwidth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.contracts.resources.market_parameters compute_bandwidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_compute_bandwidth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_resource_markets_parameters_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.resources.set_resource_markets_parameters_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.contracts.resources.market_parameters disk_storage = 1;
  if (this->_internal_has_disk_storage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::disk_storage(this), target, stream);
  }

  // .koinos.contracts.resources.market_parameters network_bandwidth = 2;
  if (this->_internal_has_network_bandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::network_bandwidth(this), target, stream);
  }

  // .koinos.contracts.resources.market_parameters compute_bandwidth = 3;
  if (this->_internal_has_compute_bandwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::compute_bandwidth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.resources.set_resource_markets_parameters_arguments)
  return target;
}

size_t set_resource_markets_parameters_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.resources.set_resource_markets_parameters_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.contracts.resources.market_parameters disk_storage = 1;
  if (this->_internal_has_disk_storage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disk_storage_);
  }

  // .koinos.contracts.resources.market_parameters network_bandwidth = 2;
  if (this->_internal_has_network_bandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_bandwidth_);
  }

  // .koinos.contracts.resources.market_parameters compute_bandwidth = 3;
  if (this->_internal_has_compute_bandwidth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compute_bandwidth_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_resource_markets_parameters_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_resource_markets_parameters_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_resource_markets_parameters_arguments::GetClassData() const { return &_class_data_; }

void set_resource_markets_parameters_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_resource_markets_parameters_arguments *>(to)->MergeFrom(
      static_cast<const set_resource_markets_parameters_arguments &>(from));
}


void set_resource_markets_parameters_arguments::MergeFrom(const set_resource_markets_parameters_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.resources.set_resource_markets_parameters_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_disk_storage()) {
    _internal_mutable_disk_storage()->::koinos::contracts::resources::market_parameters::MergeFrom(from._internal_disk_storage());
  }
  if (from._internal_has_network_bandwidth()) {
    _internal_mutable_network_bandwidth()->::koinos::contracts::resources::market_parameters::MergeFrom(from._internal_network_bandwidth());
  }
  if (from._internal_has_compute_bandwidth()) {
    _internal_mutable_compute_bandwidth()->::koinos::contracts::resources::market_parameters::MergeFrom(from._internal_compute_bandwidth());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_resource_markets_parameters_arguments::CopyFrom(const set_resource_markets_parameters_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.resources.set_resource_markets_parameters_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_resource_markets_parameters_arguments::IsInitialized() const {
  return true;
}

void set_resource_markets_parameters_arguments::InternalSwap(set_resource_markets_parameters_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(set_resource_markets_parameters_arguments, compute_bandwidth_)
      + sizeof(set_resource_markets_parameters_arguments::compute_bandwidth_)
      - PROTOBUF_FIELD_OFFSET(set_resource_markets_parameters_arguments, disk_storage_)>(
          reinterpret_cast<char*>(&disk_storage_),
          reinterpret_cast<char*>(&other->disk_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata set_resource_markets_parameters_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto[4]);
}

// ===================================================================

class set_resource_markets_parameters_result::_Internal {
 public:
};

set_resource_markets_parameters_result::set_resource_markets_parameters_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.resources.set_resource_markets_parameters_result)
}
set_resource_markets_parameters_result::set_resource_markets_parameters_result(const set_resource_markets_parameters_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.resources.set_resource_markets_parameters_result)
}

inline void set_resource_markets_parameters_result::SharedCtor() {
}

set_resource_markets_parameters_result::~set_resource_markets_parameters_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.resources.set_resource_markets_parameters_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_resource_markets_parameters_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void set_resource_markets_parameters_result::ArenaDtor(void* object) {
  set_resource_markets_parameters_result* _this = reinterpret_cast< set_resource_markets_parameters_result* >(object);
  (void)_this;
}
void set_resource_markets_parameters_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_resource_markets_parameters_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_resource_markets_parameters_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.resources.set_resource_markets_parameters_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_resource_markets_parameters_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_resource_markets_parameters_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.resources.set_resource_markets_parameters_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.resources.set_resource_markets_parameters_result)
  return target;
}

size_t set_resource_markets_parameters_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.resources.set_resource_markets_parameters_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_resource_markets_parameters_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_resource_markets_parameters_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_resource_markets_parameters_result::GetClassData() const { return &_class_data_; }

void set_resource_markets_parameters_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_resource_markets_parameters_result *>(to)->MergeFrom(
      static_cast<const set_resource_markets_parameters_result &>(from));
}


void set_resource_markets_parameters_result::MergeFrom(const set_resource_markets_parameters_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.resources.set_resource_markets_parameters_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_resource_markets_parameters_result::CopyFrom(const set_resource_markets_parameters_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.resources.set_resource_markets_parameters_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_resource_markets_parameters_result::IsInitialized() const {
  return true;
}

void set_resource_markets_parameters_result::InternalSwap(set_resource_markets_parameters_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata set_resource_markets_parameters_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto[5]);
}

// ===================================================================

class get_resource_markets_arguments::_Internal {
 public:
};

get_resource_markets_arguments::get_resource_markets_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.resources.get_resource_markets_arguments)
}
get_resource_markets_arguments::get_resource_markets_arguments(const get_resource_markets_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.resources.get_resource_markets_arguments)
}

inline void get_resource_markets_arguments::SharedCtor() {
}

get_resource_markets_arguments::~get_resource_markets_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.resources.get_resource_markets_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_resource_markets_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_resource_markets_arguments::ArenaDtor(void* object) {
  get_resource_markets_arguments* _this = reinterpret_cast< get_resource_markets_arguments* >(object);
  (void)_this;
}
void get_resource_markets_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_resource_markets_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_resource_markets_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.resources.get_resource_markets_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_resource_markets_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_resource_markets_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.resources.get_resource_markets_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.resources.get_resource_markets_arguments)
  return target;
}

size_t get_resource_markets_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.resources.get_resource_markets_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_resource_markets_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_resource_markets_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_resource_markets_arguments::GetClassData() const { return &_class_data_; }

void get_resource_markets_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_resource_markets_arguments *>(to)->MergeFrom(
      static_cast<const get_resource_markets_arguments &>(from));
}


void get_resource_markets_arguments::MergeFrom(const get_resource_markets_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.resources.get_resource_markets_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_resource_markets_arguments::CopyFrom(const get_resource_markets_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.resources.get_resource_markets_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_resource_markets_arguments::IsInitialized() const {
  return true;
}

void get_resource_markets_arguments::InternalSwap(get_resource_markets_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_resource_markets_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto[6]);
}

// ===================================================================

class get_resource_markets_result::_Internal {
 public:
  static const ::koinos::contracts::resources::resource_markets& value(const get_resource_markets_result* msg);
};

const ::koinos::contracts::resources::resource_markets&
get_resource_markets_result::_Internal::value(const get_resource_markets_result* msg) {
  return *msg->value_;
}
get_resource_markets_result::get_resource_markets_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.resources.get_resource_markets_result)
}
get_resource_markets_result::get_resource_markets_result(const get_resource_markets_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::koinos::contracts::resources::resource_markets(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.resources.get_resource_markets_result)
}

inline void get_resource_markets_result::SharedCtor() {
value_ = nullptr;
}

get_resource_markets_result::~get_resource_markets_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.resources.get_resource_markets_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_resource_markets_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void get_resource_markets_result::ArenaDtor(void* object) {
  get_resource_markets_result* _this = reinterpret_cast< get_resource_markets_result* >(object);
  (void)_this;
}
void get_resource_markets_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_resource_markets_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_resource_markets_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.resources.get_resource_markets_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_resource_markets_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.contracts.resources.resource_markets value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_resource_markets_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.resources.get_resource_markets_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.contracts.resources.resource_markets value = 1;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.resources.get_resource_markets_result)
  return target;
}

size_t get_resource_markets_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.resources.get_resource_markets_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.contracts.resources.resource_markets value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_resource_markets_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_resource_markets_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_resource_markets_result::GetClassData() const { return &_class_data_; }

void get_resource_markets_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_resource_markets_result *>(to)->MergeFrom(
      static_cast<const get_resource_markets_result &>(from));
}


void get_resource_markets_result::MergeFrom(const get_resource_markets_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.resources.get_resource_markets_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::koinos::contracts::resources::resource_markets::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_resource_markets_result::CopyFrom(const get_resource_markets_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.resources.get_resource_markets_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_resource_markets_result::IsInitialized() const {
  return true;
}

void get_resource_markets_result::InternalSwap(get_resource_markets_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_resource_markets_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto[7]);
}

// ===================================================================

class set_resource_parameters_arguments::_Internal {
 public:
  static const ::koinos::contracts::resources::resource_parameters& params(const set_resource_parameters_arguments* msg);
};

const ::koinos::contracts::resources::resource_parameters&
set_resource_parameters_arguments::_Internal::params(const set_resource_parameters_arguments* msg) {
  return *msg->params_;
}
set_resource_parameters_arguments::set_resource_parameters_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.resources.set_resource_parameters_arguments)
}
set_resource_parameters_arguments::set_resource_parameters_arguments(const set_resource_parameters_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_params()) {
    params_ = new ::koinos::contracts::resources::resource_parameters(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.resources.set_resource_parameters_arguments)
}

inline void set_resource_parameters_arguments::SharedCtor() {
params_ = nullptr;
}

set_resource_parameters_arguments::~set_resource_parameters_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.resources.set_resource_parameters_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_resource_parameters_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete params_;
}

void set_resource_parameters_arguments::ArenaDtor(void* object) {
  set_resource_parameters_arguments* _this = reinterpret_cast< set_resource_parameters_arguments* >(object);
  (void)_this;
}
void set_resource_parameters_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_resource_parameters_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_resource_parameters_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.resources.set_resource_parameters_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_resource_parameters_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.contracts.resources.resource_parameters params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_resource_parameters_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.resources.set_resource_parameters_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.contracts.resources.resource_parameters params = 1;
  if (this->_internal_has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.resources.set_resource_parameters_arguments)
  return target;
}

size_t set_resource_parameters_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.resources.set_resource_parameters_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.contracts.resources.resource_parameters params = 1;
  if (this->_internal_has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_resource_parameters_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_resource_parameters_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_resource_parameters_arguments::GetClassData() const { return &_class_data_; }

void set_resource_parameters_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_resource_parameters_arguments *>(to)->MergeFrom(
      static_cast<const set_resource_parameters_arguments &>(from));
}


void set_resource_parameters_arguments::MergeFrom(const set_resource_parameters_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.resources.set_resource_parameters_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_params()) {
    _internal_mutable_params()->::koinos::contracts::resources::resource_parameters::MergeFrom(from._internal_params());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_resource_parameters_arguments::CopyFrom(const set_resource_parameters_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.resources.set_resource_parameters_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_resource_parameters_arguments::IsInitialized() const {
  return true;
}

void set_resource_parameters_arguments::InternalSwap(set_resource_parameters_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata set_resource_parameters_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto[8]);
}

// ===================================================================

class set_resource_parameters_result::_Internal {
 public:
};

set_resource_parameters_result::set_resource_parameters_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.resources.set_resource_parameters_result)
}
set_resource_parameters_result::set_resource_parameters_result(const set_resource_parameters_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.resources.set_resource_parameters_result)
}

inline void set_resource_parameters_result::SharedCtor() {
}

set_resource_parameters_result::~set_resource_parameters_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.resources.set_resource_parameters_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void set_resource_parameters_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void set_resource_parameters_result::ArenaDtor(void* object) {
  set_resource_parameters_result* _this = reinterpret_cast< set_resource_parameters_result* >(object);
  (void)_this;
}
void set_resource_parameters_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_resource_parameters_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void set_resource_parameters_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.resources.set_resource_parameters_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_resource_parameters_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_resource_parameters_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.resources.set_resource_parameters_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.resources.set_resource_parameters_result)
  return target;
}

size_t set_resource_parameters_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.resources.set_resource_parameters_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData set_resource_parameters_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    set_resource_parameters_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*set_resource_parameters_result::GetClassData() const { return &_class_data_; }

void set_resource_parameters_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<set_resource_parameters_result *>(to)->MergeFrom(
      static_cast<const set_resource_parameters_result &>(from));
}


void set_resource_parameters_result::MergeFrom(const set_resource_parameters_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.resources.set_resource_parameters_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void set_resource_parameters_result::CopyFrom(const set_resource_parameters_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.resources.set_resource_parameters_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_resource_parameters_result::IsInitialized() const {
  return true;
}

void set_resource_parameters_result::InternalSwap(set_resource_parameters_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata set_resource_parameters_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto[9]);
}

// ===================================================================

class get_resource_parameters_arguments::_Internal {
 public:
};

get_resource_parameters_arguments::get_resource_parameters_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.resources.get_resource_parameters_arguments)
}
get_resource_parameters_arguments::get_resource_parameters_arguments(const get_resource_parameters_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.resources.get_resource_parameters_arguments)
}

inline void get_resource_parameters_arguments::SharedCtor() {
}

get_resource_parameters_arguments::~get_resource_parameters_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.resources.get_resource_parameters_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_resource_parameters_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_resource_parameters_arguments::ArenaDtor(void* object) {
  get_resource_parameters_arguments* _this = reinterpret_cast< get_resource_parameters_arguments* >(object);
  (void)_this;
}
void get_resource_parameters_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_resource_parameters_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_resource_parameters_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.resources.get_resource_parameters_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_resource_parameters_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_resource_parameters_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.resources.get_resource_parameters_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.resources.get_resource_parameters_arguments)
  return target;
}

size_t get_resource_parameters_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.resources.get_resource_parameters_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_resource_parameters_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_resource_parameters_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_resource_parameters_arguments::GetClassData() const { return &_class_data_; }

void get_resource_parameters_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_resource_parameters_arguments *>(to)->MergeFrom(
      static_cast<const get_resource_parameters_arguments &>(from));
}


void get_resource_parameters_arguments::MergeFrom(const get_resource_parameters_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.resources.get_resource_parameters_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_resource_parameters_arguments::CopyFrom(const get_resource_parameters_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.resources.get_resource_parameters_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_resource_parameters_arguments::IsInitialized() const {
  return true;
}

void get_resource_parameters_arguments::InternalSwap(get_resource_parameters_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_resource_parameters_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto[10]);
}

// ===================================================================

class get_resource_parameters_result::_Internal {
 public:
  static const ::koinos::contracts::resources::resource_parameters& value(const get_resource_parameters_result* msg);
};

const ::koinos::contracts::resources::resource_parameters&
get_resource_parameters_result::_Internal::value(const get_resource_parameters_result* msg) {
  return *msg->value_;
}
get_resource_parameters_result::get_resource_parameters_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.resources.get_resource_parameters_result)
}
get_resource_parameters_result::get_resource_parameters_result(const get_resource_parameters_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::koinos::contracts::resources::resource_parameters(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.resources.get_resource_parameters_result)
}

inline void get_resource_parameters_result::SharedCtor() {
value_ = nullptr;
}

get_resource_parameters_result::~get_resource_parameters_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.resources.get_resource_parameters_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_resource_parameters_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void get_resource_parameters_result::ArenaDtor(void* object) {
  get_resource_parameters_result* _this = reinterpret_cast< get_resource_parameters_result* >(object);
  (void)_this;
}
void get_resource_parameters_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_resource_parameters_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_resource_parameters_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.resources.get_resource_parameters_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_resource_parameters_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.contracts.resources.resource_parameters value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_resource_parameters_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.resources.get_resource_parameters_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.contracts.resources.resource_parameters value = 1;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.resources.get_resource_parameters_result)
  return target;
}

size_t get_resource_parameters_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.resources.get_resource_parameters_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.contracts.resources.resource_parameters value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_resource_parameters_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_resource_parameters_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_resource_parameters_result::GetClassData() const { return &_class_data_; }

void get_resource_parameters_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_resource_parameters_result *>(to)->MergeFrom(
      static_cast<const get_resource_parameters_result &>(from));
}


void get_resource_parameters_result::MergeFrom(const get_resource_parameters_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.resources.get_resource_parameters_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::koinos::contracts::resources::resource_parameters::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_resource_parameters_result::CopyFrom(const get_resource_parameters_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.resources.get_resource_parameters_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_resource_parameters_result::IsInitialized() const {
  return true;
}

void get_resource_parameters_result::InternalSwap(get_resource_parameters_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_resource_parameters_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fresources_2fresources_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fresources_2fresources_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace resources
}  // namespace contracts
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::contracts::resources::market* Arena::CreateMaybeMessage< ::koinos::contracts::resources::market >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::resources::market >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::resources::resource_markets* Arena::CreateMaybeMessage< ::koinos::contracts::resources::resource_markets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::resources::resource_markets >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::resources::market_parameters* Arena::CreateMaybeMessage< ::koinos::contracts::resources::market_parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::resources::market_parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::resources::resource_parameters* Arena::CreateMaybeMessage< ::koinos::contracts::resources::resource_parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::resources::resource_parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::resources::set_resource_markets_parameters_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::resources::set_resource_markets_parameters_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::resources::set_resource_markets_parameters_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::resources::set_resource_markets_parameters_result* Arena::CreateMaybeMessage< ::koinos::contracts::resources::set_resource_markets_parameters_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::resources::set_resource_markets_parameters_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::resources::get_resource_markets_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::resources::get_resource_markets_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::resources::get_resource_markets_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::resources::get_resource_markets_result* Arena::CreateMaybeMessage< ::koinos::contracts::resources::get_resource_markets_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::resources::get_resource_markets_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::resources::set_resource_parameters_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::resources::set_resource_parameters_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::resources::set_resource_parameters_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::resources::set_resource_parameters_result* Arena::CreateMaybeMessage< ::koinos::contracts::resources::set_resource_parameters_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::resources::set_resource_parameters_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::resources::get_resource_parameters_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::resources::get_resource_parameters_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::resources::get_resource_parameters_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::resources::get_resource_parameters_result* Arena::CreateMaybeMessage< ::koinos::contracts::resources::get_resource_parameters_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::resources::get_resource_parameters_result >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
