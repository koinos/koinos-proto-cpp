// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/contracts/pob/pob.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fpob_2fpob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fpob_2fpob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fcontracts_2fpob_2fpob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fcontracts_2fpob_2fpob_2eproto;
namespace koinos {
namespace contracts {
namespace pob {
class burn_arguments;
struct burn_argumentsDefaultTypeInternal;
extern burn_argumentsDefaultTypeInternal _burn_arguments_default_instance_;
class burn_result;
struct burn_resultDefaultTypeInternal;
extern burn_resultDefaultTypeInternal _burn_result_default_instance_;
class get_metadata_arguments;
struct get_metadata_argumentsDefaultTypeInternal;
extern get_metadata_argumentsDefaultTypeInternal _get_metadata_arguments_default_instance_;
class get_metadata_result;
struct get_metadata_resultDefaultTypeInternal;
extern get_metadata_resultDefaultTypeInternal _get_metadata_result_default_instance_;
class metadata;
struct metadataDefaultTypeInternal;
extern metadataDefaultTypeInternal _metadata_default_instance_;
class public_key_record;
struct public_key_recordDefaultTypeInternal;
extern public_key_recordDefaultTypeInternal _public_key_record_default_instance_;
class register_public_key_arguments;
struct register_public_key_argumentsDefaultTypeInternal;
extern register_public_key_argumentsDefaultTypeInternal _register_public_key_arguments_default_instance_;
class register_public_key_event;
struct register_public_key_eventDefaultTypeInternal;
extern register_public_key_eventDefaultTypeInternal _register_public_key_event_default_instance_;
class register_public_key_result;
struct register_public_key_resultDefaultTypeInternal;
extern register_public_key_resultDefaultTypeInternal _register_public_key_result_default_instance_;
class signature_data;
struct signature_dataDefaultTypeInternal;
extern signature_dataDefaultTypeInternal _signature_data_default_instance_;
class vrf_payload;
struct vrf_payloadDefaultTypeInternal;
extern vrf_payloadDefaultTypeInternal _vrf_payload_default_instance_;
}  // namespace pob
}  // namespace contracts
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::contracts::pob::burn_arguments* Arena::CreateMaybeMessage<::koinos::contracts::pob::burn_arguments>(Arena*);
template<> ::koinos::contracts::pob::burn_result* Arena::CreateMaybeMessage<::koinos::contracts::pob::burn_result>(Arena*);
template<> ::koinos::contracts::pob::get_metadata_arguments* Arena::CreateMaybeMessage<::koinos::contracts::pob::get_metadata_arguments>(Arena*);
template<> ::koinos::contracts::pob::get_metadata_result* Arena::CreateMaybeMessage<::koinos::contracts::pob::get_metadata_result>(Arena*);
template<> ::koinos::contracts::pob::metadata* Arena::CreateMaybeMessage<::koinos::contracts::pob::metadata>(Arena*);
template<> ::koinos::contracts::pob::public_key_record* Arena::CreateMaybeMessage<::koinos::contracts::pob::public_key_record>(Arena*);
template<> ::koinos::contracts::pob::register_public_key_arguments* Arena::CreateMaybeMessage<::koinos::contracts::pob::register_public_key_arguments>(Arena*);
template<> ::koinos::contracts::pob::register_public_key_event* Arena::CreateMaybeMessage<::koinos::contracts::pob::register_public_key_event>(Arena*);
template<> ::koinos::contracts::pob::register_public_key_result* Arena::CreateMaybeMessage<::koinos::contracts::pob::register_public_key_result>(Arena*);
template<> ::koinos::contracts::pob::signature_data* Arena::CreateMaybeMessage<::koinos::contracts::pob::signature_data>(Arena*);
template<> ::koinos::contracts::pob::vrf_payload* Arena::CreateMaybeMessage<::koinos::contracts::pob::vrf_payload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace contracts {
namespace pob {

// ===================================================================

class public_key_record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.pob.public_key_record) */ {
 public:
  inline public_key_record() : public_key_record(nullptr) {}
  ~public_key_record() override;
  explicit constexpr public_key_record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  public_key_record(const public_key_record& from);
  public_key_record(public_key_record&& from) noexcept
    : public_key_record() {
    *this = ::std::move(from);
  }

  inline public_key_record& operator=(const public_key_record& from) {
    CopyFrom(from);
    return *this;
  }
  inline public_key_record& operator=(public_key_record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const public_key_record& default_instance() {
    return *internal_default_instance();
  }
  static inline const public_key_record* internal_default_instance() {
    return reinterpret_cast<const public_key_record*>(
               &_public_key_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(public_key_record& a, public_key_record& b) {
    a.Swap(&b);
  }
  inline void Swap(public_key_record* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(public_key_record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline public_key_record* New() const final {
    return new public_key_record();
  }

  public_key_record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<public_key_record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const public_key_record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const public_key_record& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(public_key_record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.pob.public_key_record";
  }
  protected:
  explicit public_key_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
  };
  // bytes public_key = 1 [(.koinos.btype) = BASE64];
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.pob.public_key_record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto;
};
// -------------------------------------------------------------------

class metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.pob.metadata) */ {
 public:
  inline metadata() : metadata(nullptr) {}
  ~metadata() override;
  explicit constexpr metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  metadata(const metadata& from);
  metadata(metadata&& from) noexcept
    : metadata() {
    *this = ::std::move(from);
  }

  inline metadata& operator=(const metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline metadata& operator=(metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const metadata* internal_default_instance() {
    return reinterpret_cast<const metadata*>(
               &_metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(metadata& a, metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(metadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline metadata* New() const final {
    return new metadata();
  }

  metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.pob.metadata";
  }
  protected:
  explicit metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeedFieldNumber = 1,
    kDifficultyFieldNumber = 2,
    kLastBlockTimeFieldNumber = 3,
    kTargetBlockIntervalFieldNumber = 4,
  };
  // bytes seed = 1 [(.koinos.btype) = BASE64];
  void clear_seed();
  const std::string& seed() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seed(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seed();
  PROTOBUF_MUST_USE_RESULT std::string* release_seed();
  void set_allocated_seed(std::string* seed);
  private:
  const std::string& _internal_seed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seed(const std::string& value);
  std::string* _internal_mutable_seed();
  public:

  // bytes difficulty = 2 [(.koinos.btype) = BASE64];
  void clear_difficulty();
  const std::string& difficulty() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_difficulty(ArgT0&& arg0, ArgT... args);
  std::string* mutable_difficulty();
  PROTOBUF_MUST_USE_RESULT std::string* release_difficulty();
  void set_allocated_difficulty(std::string* difficulty);
  private:
  const std::string& _internal_difficulty() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_difficulty(const std::string& value);
  std::string* _internal_mutable_difficulty();
  public:

  // uint64 last_block_time = 3 [jstype = JS_STRING];
  void clear_last_block_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_block_time() const;
  void set_last_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_block_time() const;
  void _internal_set_last_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 target_block_interval = 4 [jstype = JS_STRING];
  void clear_target_block_interval();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_block_interval() const;
  void set_target_block_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_block_interval() const;
  void _internal_set_target_block_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.pob.metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr difficulty_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_block_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_block_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto;
};
// -------------------------------------------------------------------

class signature_data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.pob.signature_data) */ {
 public:
  inline signature_data() : signature_data(nullptr) {}
  ~signature_data() override;
  explicit constexpr signature_data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  signature_data(const signature_data& from);
  signature_data(signature_data&& from) noexcept
    : signature_data() {
    *this = ::std::move(from);
  }

  inline signature_data& operator=(const signature_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline signature_data& operator=(signature_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const signature_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const signature_data* internal_default_instance() {
    return reinterpret_cast<const signature_data*>(
               &_signature_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(signature_data& a, signature_data& b) {
    a.Swap(&b);
  }
  inline void Swap(signature_data* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(signature_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline signature_data* New() const final {
    return new signature_data();
  }

  signature_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<signature_data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const signature_data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const signature_data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(signature_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.pob.signature_data";
  }
  protected:
  explicit signature_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrfProofFieldNumber = 1,
    kVrfHashFieldNumber = 2,
    kSignatureFieldNumber = 3,
  };
  // bytes vrf_proof = 1 [(.koinos.btype) = BASE64];
  void clear_vrf_proof();
  const std::string& vrf_proof() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vrf_proof(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vrf_proof();
  PROTOBUF_MUST_USE_RESULT std::string* release_vrf_proof();
  void set_allocated_vrf_proof(std::string* vrf_proof);
  private:
  const std::string& _internal_vrf_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vrf_proof(const std::string& value);
  std::string* _internal_mutable_vrf_proof();
  public:

  // bytes vrf_hash = 2 [(.koinos.btype) = BASE64];
  void clear_vrf_hash();
  const std::string& vrf_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vrf_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vrf_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_vrf_hash();
  void set_allocated_vrf_hash(std::string* vrf_hash);
  private:
  const std::string& _internal_vrf_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vrf_hash(const std::string& value);
  std::string* _internal_mutable_vrf_hash();
  public:

  // bytes signature = 3 [(.koinos.btype) = BASE64];
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_MUST_USE_RESULT std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.pob.signature_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrf_proof_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vrf_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto;
};
// -------------------------------------------------------------------

class vrf_payload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.pob.vrf_payload) */ {
 public:
  inline vrf_payload() : vrf_payload(nullptr) {}
  ~vrf_payload() override;
  explicit constexpr vrf_payload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  vrf_payload(const vrf_payload& from);
  vrf_payload(vrf_payload&& from) noexcept
    : vrf_payload() {
    *this = ::std::move(from);
  }

  inline vrf_payload& operator=(const vrf_payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline vrf_payload& operator=(vrf_payload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const vrf_payload& default_instance() {
    return *internal_default_instance();
  }
  static inline const vrf_payload* internal_default_instance() {
    return reinterpret_cast<const vrf_payload*>(
               &_vrf_payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(vrf_payload& a, vrf_payload& b) {
    a.Swap(&b);
  }
  inline void Swap(vrf_payload* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vrf_payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline vrf_payload* New() const final {
    return new vrf_payload();
  }

  vrf_payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<vrf_payload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const vrf_payload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const vrf_payload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vrf_payload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.pob.vrf_payload";
  }
  protected:
  explicit vrf_payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeedFieldNumber = 1,
    kBlockTimeFieldNumber = 2,
  };
  // bytes seed = 1 [(.koinos.btype) = BASE64];
  void clear_seed();
  const std::string& seed() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seed(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seed();
  PROTOBUF_MUST_USE_RESULT std::string* release_seed();
  void set_allocated_seed(std::string* seed);
  private:
  const std::string& _internal_seed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seed(const std::string& value);
  std::string* _internal_mutable_seed();
  public:

  // uint64 block_time = 2 [jstype = JS_STRING];
  void clear_block_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_time() const;
  void set_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_time() const;
  void _internal_set_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.pob.vrf_payload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto;
};
// -------------------------------------------------------------------

class register_public_key_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.pob.register_public_key_arguments) */ {
 public:
  inline register_public_key_arguments() : register_public_key_arguments(nullptr) {}
  ~register_public_key_arguments() override;
  explicit constexpr register_public_key_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  register_public_key_arguments(const register_public_key_arguments& from);
  register_public_key_arguments(register_public_key_arguments&& from) noexcept
    : register_public_key_arguments() {
    *this = ::std::move(from);
  }

  inline register_public_key_arguments& operator=(const register_public_key_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_public_key_arguments& operator=(register_public_key_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const register_public_key_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const register_public_key_arguments* internal_default_instance() {
    return reinterpret_cast<const register_public_key_arguments*>(
               &_register_public_key_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(register_public_key_arguments& a, register_public_key_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(register_public_key_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(register_public_key_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline register_public_key_arguments* New() const final {
    return new register_public_key_arguments();
  }

  register_public_key_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<register_public_key_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const register_public_key_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const register_public_key_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_public_key_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.pob.register_public_key_arguments";
  }
  protected:
  explicit register_public_key_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
  };
  // bytes public_key = 1 [(.koinos.btype) = BASE64];
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.pob.register_public_key_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto;
};
// -------------------------------------------------------------------

class register_public_key_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.pob.register_public_key_result) */ {
 public:
  inline register_public_key_result() : register_public_key_result(nullptr) {}
  ~register_public_key_result() override;
  explicit constexpr register_public_key_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  register_public_key_result(const register_public_key_result& from);
  register_public_key_result(register_public_key_result&& from) noexcept
    : register_public_key_result() {
    *this = ::std::move(from);
  }

  inline register_public_key_result& operator=(const register_public_key_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_public_key_result& operator=(register_public_key_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const register_public_key_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const register_public_key_result* internal_default_instance() {
    return reinterpret_cast<const register_public_key_result*>(
               &_register_public_key_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(register_public_key_result& a, register_public_key_result& b) {
    a.Swap(&b);
  }
  inline void Swap(register_public_key_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(register_public_key_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline register_public_key_result* New() const final {
    return new register_public_key_result();
  }

  register_public_key_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<register_public_key_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const register_public_key_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const register_public_key_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_public_key_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.pob.register_public_key_result";
  }
  protected:
  explicit register_public_key_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.pob.register_public_key_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto;
};
// -------------------------------------------------------------------

class burn_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.pob.burn_arguments) */ {
 public:
  inline burn_arguments() : burn_arguments(nullptr) {}
  ~burn_arguments() override;
  explicit constexpr burn_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  burn_arguments(const burn_arguments& from);
  burn_arguments(burn_arguments&& from) noexcept
    : burn_arguments() {
    *this = ::std::move(from);
  }

  inline burn_arguments& operator=(const burn_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline burn_arguments& operator=(burn_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const burn_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const burn_arguments* internal_default_instance() {
    return reinterpret_cast<const burn_arguments*>(
               &_burn_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(burn_arguments& a, burn_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(burn_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(burn_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline burn_arguments* New() const final {
    return new burn_arguments();
  }

  burn_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<burn_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const burn_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const burn_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(burn_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.pob.burn_arguments";
  }
  protected:
  explicit burn_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBurnAddressFieldNumber = 2,
    kVhpAddressFieldNumber = 3,
    kTokenAmountFieldNumber = 1,
  };
  // bytes burn_address = 2 [(.koinos.btype) = ADDRESS];
  void clear_burn_address();
  const std::string& burn_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_burn_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_burn_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_burn_address();
  void set_allocated_burn_address(std::string* burn_address);
  private:
  const std::string& _internal_burn_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_burn_address(const std::string& value);
  std::string* _internal_mutable_burn_address();
  public:

  // bytes vhp_address = 3 [(.koinos.btype) = ADDRESS];
  void clear_vhp_address();
  const std::string& vhp_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vhp_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vhp_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_vhp_address();
  void set_allocated_vhp_address(std::string* vhp_address);
  private:
  const std::string& _internal_vhp_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vhp_address(const std::string& value);
  std::string* _internal_mutable_vhp_address();
  public:

  // uint64 token_amount = 1 [jstype = JS_STRING];
  void clear_token_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 token_amount() const;
  void set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_token_amount() const;
  void _internal_set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.pob.burn_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr burn_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vhp_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 token_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto;
};
// -------------------------------------------------------------------

class burn_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.pob.burn_result) */ {
 public:
  inline burn_result() : burn_result(nullptr) {}
  ~burn_result() override;
  explicit constexpr burn_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  burn_result(const burn_result& from);
  burn_result(burn_result&& from) noexcept
    : burn_result() {
    *this = ::std::move(from);
  }

  inline burn_result& operator=(const burn_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline burn_result& operator=(burn_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const burn_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const burn_result* internal_default_instance() {
    return reinterpret_cast<const burn_result*>(
               &_burn_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(burn_result& a, burn_result& b) {
    a.Swap(&b);
  }
  inline void Swap(burn_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(burn_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline burn_result* New() const final {
    return new burn_result();
  }

  burn_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<burn_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const burn_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const burn_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(burn_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.pob.burn_result";
  }
  protected:
  explicit burn_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.pob.burn_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto;
};
// -------------------------------------------------------------------

class get_metadata_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.pob.get_metadata_arguments) */ {
 public:
  inline get_metadata_arguments() : get_metadata_arguments(nullptr) {}
  ~get_metadata_arguments() override;
  explicit constexpr get_metadata_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_metadata_arguments(const get_metadata_arguments& from);
  get_metadata_arguments(get_metadata_arguments&& from) noexcept
    : get_metadata_arguments() {
    *this = ::std::move(from);
  }

  inline get_metadata_arguments& operator=(const get_metadata_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_metadata_arguments& operator=(get_metadata_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_metadata_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_metadata_arguments* internal_default_instance() {
    return reinterpret_cast<const get_metadata_arguments*>(
               &_get_metadata_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(get_metadata_arguments& a, get_metadata_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(get_metadata_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_metadata_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_metadata_arguments* New() const final {
    return new get_metadata_arguments();
  }

  get_metadata_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_metadata_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_metadata_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_metadata_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_metadata_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.pob.get_metadata_arguments";
  }
  protected:
  explicit get_metadata_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.contracts.pob.get_metadata_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto;
};
// -------------------------------------------------------------------

class get_metadata_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.pob.get_metadata_result) */ {
 public:
  inline get_metadata_result() : get_metadata_result(nullptr) {}
  ~get_metadata_result() override;
  explicit constexpr get_metadata_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_metadata_result(const get_metadata_result& from);
  get_metadata_result(get_metadata_result&& from) noexcept
    : get_metadata_result() {
    *this = ::std::move(from);
  }

  inline get_metadata_result& operator=(const get_metadata_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_metadata_result& operator=(get_metadata_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_metadata_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_metadata_result* internal_default_instance() {
    return reinterpret_cast<const get_metadata_result*>(
               &_get_metadata_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(get_metadata_result& a, get_metadata_result& b) {
    a.Swap(&b);
  }
  inline void Swap(get_metadata_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_metadata_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_metadata_result* New() const final {
    return new get_metadata_result();
  }

  get_metadata_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_metadata_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_metadata_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_metadata_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_metadata_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.pob.get_metadata_result";
  }
  protected:
  explicit get_metadata_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .koinos.contracts.pob.metadata value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::koinos::contracts::pob::metadata& value() const;
  PROTOBUF_MUST_USE_RESULT ::koinos::contracts::pob::metadata* release_value();
  ::koinos::contracts::pob::metadata* mutable_value();
  void set_allocated_value(::koinos::contracts::pob::metadata* value);
  private:
  const ::koinos::contracts::pob::metadata& _internal_value() const;
  ::koinos::contracts::pob::metadata* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::koinos::contracts::pob::metadata* value);
  ::koinos::contracts::pob::metadata* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:koinos.contracts.pob.get_metadata_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::contracts::pob::metadata* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto;
};
// -------------------------------------------------------------------

class register_public_key_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.contracts.pob.register_public_key_event) */ {
 public:
  inline register_public_key_event() : register_public_key_event(nullptr) {}
  ~register_public_key_event() override;
  explicit constexpr register_public_key_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  register_public_key_event(const register_public_key_event& from);
  register_public_key_event(register_public_key_event&& from) noexcept
    : register_public_key_event() {
    *this = ::std::move(from);
  }

  inline register_public_key_event& operator=(const register_public_key_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_public_key_event& operator=(register_public_key_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const register_public_key_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const register_public_key_event* internal_default_instance() {
    return reinterpret_cast<const register_public_key_event*>(
               &_register_public_key_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(register_public_key_event& a, register_public_key_event& b) {
    a.Swap(&b);
  }
  inline void Swap(register_public_key_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(register_public_key_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline register_public_key_event* New() const final {
    return new register_public_key_event();
  }

  register_public_key_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<register_public_key_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const register_public_key_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const register_public_key_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_public_key_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.contracts.pob.register_public_key_event";
  }
  protected:
  explicit register_public_key_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // bytes public_key = 1 [(.koinos.btype) = BASE64];
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes address = 2 [(.koinos.btype) = ADDRESS];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:koinos.contracts.pob.register_public_key_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fcontracts_2fpob_2fpob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// public_key_record

// bytes public_key = 1 [(.koinos.btype) = BASE64];
inline void public_key_record::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& public_key_record::public_key() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.public_key_record.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void public_key_record::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.public_key_record.public_key)
}
inline std::string* public_key_record::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pob.public_key_record.public_key)
  return _s;
}
inline const std::string& public_key_record::_internal_public_key() const {
  return public_key_.Get();
}
inline void public_key_record::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* public_key_record::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* public_key_record::release_public_key() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pob.public_key_record.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void public_key_record::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pob.public_key_record.public_key)
}

// -------------------------------------------------------------------

// metadata

// bytes seed = 1 [(.koinos.btype) = BASE64];
inline void metadata::clear_seed() {
  seed_.ClearToEmpty();
}
inline const std::string& metadata::seed() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.metadata.seed)
  return _internal_seed();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void metadata::set_seed(ArgT0&& arg0, ArgT... args) {
 
 seed_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.metadata.seed)
}
inline std::string* metadata::mutable_seed() {
  std::string* _s = _internal_mutable_seed();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pob.metadata.seed)
  return _s;
}
inline const std::string& metadata::_internal_seed() const {
  return seed_.Get();
}
inline void metadata::_internal_set_seed(const std::string& value) {
  
  seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* metadata::_internal_mutable_seed() {
  
  return seed_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* metadata::release_seed() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pob.metadata.seed)
  return seed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void metadata::set_allocated_seed(std::string* seed) {
  if (seed != nullptr) {
    
  } else {
    
  }
  seed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seed,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pob.metadata.seed)
}

// bytes difficulty = 2 [(.koinos.btype) = BASE64];
inline void metadata::clear_difficulty() {
  difficulty_.ClearToEmpty();
}
inline const std::string& metadata::difficulty() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.metadata.difficulty)
  return _internal_difficulty();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void metadata::set_difficulty(ArgT0&& arg0, ArgT... args) {
 
 difficulty_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.metadata.difficulty)
}
inline std::string* metadata::mutable_difficulty() {
  std::string* _s = _internal_mutable_difficulty();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pob.metadata.difficulty)
  return _s;
}
inline const std::string& metadata::_internal_difficulty() const {
  return difficulty_.Get();
}
inline void metadata::_internal_set_difficulty(const std::string& value) {
  
  difficulty_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* metadata::_internal_mutable_difficulty() {
  
  return difficulty_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* metadata::release_difficulty() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pob.metadata.difficulty)
  return difficulty_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void metadata::set_allocated_difficulty(std::string* difficulty) {
  if (difficulty != nullptr) {
    
  } else {
    
  }
  difficulty_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), difficulty,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pob.metadata.difficulty)
}

// uint64 last_block_time = 3 [jstype = JS_STRING];
inline void metadata::clear_last_block_time() {
  last_block_time_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 metadata::_internal_last_block_time() const {
  return last_block_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 metadata::last_block_time() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.metadata.last_block_time)
  return _internal_last_block_time();
}
inline void metadata::_internal_set_last_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_block_time_ = value;
}
inline void metadata::set_last_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_block_time(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.metadata.last_block_time)
}

// uint64 target_block_interval = 4 [jstype = JS_STRING];
inline void metadata::clear_target_block_interval() {
  target_block_interval_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 metadata::_internal_target_block_interval() const {
  return target_block_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 metadata::target_block_interval() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.metadata.target_block_interval)
  return _internal_target_block_interval();
}
inline void metadata::_internal_set_target_block_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  target_block_interval_ = value;
}
inline void metadata::set_target_block_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_block_interval(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.metadata.target_block_interval)
}

// -------------------------------------------------------------------

// signature_data

// bytes vrf_proof = 1 [(.koinos.btype) = BASE64];
inline void signature_data::clear_vrf_proof() {
  vrf_proof_.ClearToEmpty();
}
inline const std::string& signature_data::vrf_proof() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.signature_data.vrf_proof)
  return _internal_vrf_proof();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void signature_data::set_vrf_proof(ArgT0&& arg0, ArgT... args) {
 
 vrf_proof_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.signature_data.vrf_proof)
}
inline std::string* signature_data::mutable_vrf_proof() {
  std::string* _s = _internal_mutable_vrf_proof();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pob.signature_data.vrf_proof)
  return _s;
}
inline const std::string& signature_data::_internal_vrf_proof() const {
  return vrf_proof_.Get();
}
inline void signature_data::_internal_set_vrf_proof(const std::string& value) {
  
  vrf_proof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* signature_data::_internal_mutable_vrf_proof() {
  
  return vrf_proof_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* signature_data::release_vrf_proof() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pob.signature_data.vrf_proof)
  return vrf_proof_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void signature_data::set_allocated_vrf_proof(std::string* vrf_proof) {
  if (vrf_proof != nullptr) {
    
  } else {
    
  }
  vrf_proof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrf_proof,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pob.signature_data.vrf_proof)
}

// bytes vrf_hash = 2 [(.koinos.btype) = BASE64];
inline void signature_data::clear_vrf_hash() {
  vrf_hash_.ClearToEmpty();
}
inline const std::string& signature_data::vrf_hash() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.signature_data.vrf_hash)
  return _internal_vrf_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void signature_data::set_vrf_hash(ArgT0&& arg0, ArgT... args) {
 
 vrf_hash_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.signature_data.vrf_hash)
}
inline std::string* signature_data::mutable_vrf_hash() {
  std::string* _s = _internal_mutable_vrf_hash();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pob.signature_data.vrf_hash)
  return _s;
}
inline const std::string& signature_data::_internal_vrf_hash() const {
  return vrf_hash_.Get();
}
inline void signature_data::_internal_set_vrf_hash(const std::string& value) {
  
  vrf_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* signature_data::_internal_mutable_vrf_hash() {
  
  return vrf_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* signature_data::release_vrf_hash() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pob.signature_data.vrf_hash)
  return vrf_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void signature_data::set_allocated_vrf_hash(std::string* vrf_hash) {
  if (vrf_hash != nullptr) {
    
  } else {
    
  }
  vrf_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vrf_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pob.signature_data.vrf_hash)
}

// bytes signature = 3 [(.koinos.btype) = BASE64];
inline void signature_data::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& signature_data::signature() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.signature_data.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void signature_data::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.signature_data.signature)
}
inline std::string* signature_data::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pob.signature_data.signature)
  return _s;
}
inline const std::string& signature_data::_internal_signature() const {
  return signature_.Get();
}
inline void signature_data::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* signature_data::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* signature_data::release_signature() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pob.signature_data.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void signature_data::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pob.signature_data.signature)
}

// -------------------------------------------------------------------

// vrf_payload

// bytes seed = 1 [(.koinos.btype) = BASE64];
inline void vrf_payload::clear_seed() {
  seed_.ClearToEmpty();
}
inline const std::string& vrf_payload::seed() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.vrf_payload.seed)
  return _internal_seed();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void vrf_payload::set_seed(ArgT0&& arg0, ArgT... args) {
 
 seed_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.vrf_payload.seed)
}
inline std::string* vrf_payload::mutable_seed() {
  std::string* _s = _internal_mutable_seed();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pob.vrf_payload.seed)
  return _s;
}
inline const std::string& vrf_payload::_internal_seed() const {
  return seed_.Get();
}
inline void vrf_payload::_internal_set_seed(const std::string& value) {
  
  seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* vrf_payload::_internal_mutable_seed() {
  
  return seed_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* vrf_payload::release_seed() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pob.vrf_payload.seed)
  return seed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void vrf_payload::set_allocated_seed(std::string* seed) {
  if (seed != nullptr) {
    
  } else {
    
  }
  seed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seed,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pob.vrf_payload.seed)
}

// uint64 block_time = 2 [jstype = JS_STRING];
inline void vrf_payload::clear_block_time() {
  block_time_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 vrf_payload::_internal_block_time() const {
  return block_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 vrf_payload::block_time() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.vrf_payload.block_time)
  return _internal_block_time();
}
inline void vrf_payload::_internal_set_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_time_ = value;
}
inline void vrf_payload::set_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_time(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.vrf_payload.block_time)
}

// -------------------------------------------------------------------

// register_public_key_arguments

// bytes public_key = 1 [(.koinos.btype) = BASE64];
inline void register_public_key_arguments::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& register_public_key_arguments::public_key() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.register_public_key_arguments.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void register_public_key_arguments::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.register_public_key_arguments.public_key)
}
inline std::string* register_public_key_arguments::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pob.register_public_key_arguments.public_key)
  return _s;
}
inline const std::string& register_public_key_arguments::_internal_public_key() const {
  return public_key_.Get();
}
inline void register_public_key_arguments::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* register_public_key_arguments::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* register_public_key_arguments::release_public_key() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pob.register_public_key_arguments.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void register_public_key_arguments::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pob.register_public_key_arguments.public_key)
}

// -------------------------------------------------------------------

// register_public_key_result

// -------------------------------------------------------------------

// burn_arguments

// uint64 token_amount = 1 [jstype = JS_STRING];
inline void burn_arguments::clear_token_amount() {
  token_amount_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 burn_arguments::_internal_token_amount() const {
  return token_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 burn_arguments::token_amount() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.burn_arguments.token_amount)
  return _internal_token_amount();
}
inline void burn_arguments::_internal_set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  token_amount_ = value;
}
inline void burn_arguments::set_token_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_token_amount(value);
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.burn_arguments.token_amount)
}

// bytes burn_address = 2 [(.koinos.btype) = ADDRESS];
inline void burn_arguments::clear_burn_address() {
  burn_address_.ClearToEmpty();
}
inline const std::string& burn_arguments::burn_address() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.burn_arguments.burn_address)
  return _internal_burn_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void burn_arguments::set_burn_address(ArgT0&& arg0, ArgT... args) {
 
 burn_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.burn_arguments.burn_address)
}
inline std::string* burn_arguments::mutable_burn_address() {
  std::string* _s = _internal_mutable_burn_address();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pob.burn_arguments.burn_address)
  return _s;
}
inline const std::string& burn_arguments::_internal_burn_address() const {
  return burn_address_.Get();
}
inline void burn_arguments::_internal_set_burn_address(const std::string& value) {
  
  burn_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* burn_arguments::_internal_mutable_burn_address() {
  
  return burn_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* burn_arguments::release_burn_address() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pob.burn_arguments.burn_address)
  return burn_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void burn_arguments::set_allocated_burn_address(std::string* burn_address) {
  if (burn_address != nullptr) {
    
  } else {
    
  }
  burn_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), burn_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pob.burn_arguments.burn_address)
}

// bytes vhp_address = 3 [(.koinos.btype) = ADDRESS];
inline void burn_arguments::clear_vhp_address() {
  vhp_address_.ClearToEmpty();
}
inline const std::string& burn_arguments::vhp_address() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.burn_arguments.vhp_address)
  return _internal_vhp_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void burn_arguments::set_vhp_address(ArgT0&& arg0, ArgT... args) {
 
 vhp_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.burn_arguments.vhp_address)
}
inline std::string* burn_arguments::mutable_vhp_address() {
  std::string* _s = _internal_mutable_vhp_address();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pob.burn_arguments.vhp_address)
  return _s;
}
inline const std::string& burn_arguments::_internal_vhp_address() const {
  return vhp_address_.Get();
}
inline void burn_arguments::_internal_set_vhp_address(const std::string& value) {
  
  vhp_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* burn_arguments::_internal_mutable_vhp_address() {
  
  return vhp_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* burn_arguments::release_vhp_address() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pob.burn_arguments.vhp_address)
  return vhp_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void burn_arguments::set_allocated_vhp_address(std::string* vhp_address) {
  if (vhp_address != nullptr) {
    
  } else {
    
  }
  vhp_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vhp_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pob.burn_arguments.vhp_address)
}

// -------------------------------------------------------------------

// burn_result

// -------------------------------------------------------------------

// get_metadata_arguments

// -------------------------------------------------------------------

// get_metadata_result

// .koinos.contracts.pob.metadata value = 1;
inline bool get_metadata_result::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool get_metadata_result::has_value() const {
  return _internal_has_value();
}
inline void get_metadata_result::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::koinos::contracts::pob::metadata& get_metadata_result::_internal_value() const {
  const ::koinos::contracts::pob::metadata* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::contracts::pob::metadata&>(
      ::koinos::contracts::pob::_metadata_default_instance_);
}
inline const ::koinos::contracts::pob::metadata& get_metadata_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.get_metadata_result.value)
  return _internal_value();
}
inline void get_metadata_result::unsafe_arena_set_allocated_value(
    ::koinos::contracts::pob::metadata* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.contracts.pob.get_metadata_result.value)
}
inline ::koinos::contracts::pob::metadata* get_metadata_result::release_value() {
  
  ::koinos::contracts::pob::metadata* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::koinos::contracts::pob::metadata* get_metadata_result::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pob.get_metadata_result.value)
  
  ::koinos::contracts::pob::metadata* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::koinos::contracts::pob::metadata* get_metadata_result::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::contracts::pob::metadata>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::koinos::contracts::pob::metadata* get_metadata_result::mutable_value() {
  ::koinos::contracts::pob::metadata* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pob.get_metadata_result.value)
  return _msg;
}
inline void get_metadata_result::set_allocated_value(::koinos::contracts::pob::metadata* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::contracts::pob::metadata>::GetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pob.get_metadata_result.value)
}

// -------------------------------------------------------------------

// register_public_key_event

// bytes public_key = 1 [(.koinos.btype) = BASE64];
inline void register_public_key_event::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& register_public_key_event::public_key() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.register_public_key_event.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void register_public_key_event::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.register_public_key_event.public_key)
}
inline std::string* register_public_key_event::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pob.register_public_key_event.public_key)
  return _s;
}
inline const std::string& register_public_key_event::_internal_public_key() const {
  return public_key_.Get();
}
inline void register_public_key_event::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* register_public_key_event::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* register_public_key_event::release_public_key() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pob.register_public_key_event.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void register_public_key_event::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pob.register_public_key_event.public_key)
}

// bytes address = 2 [(.koinos.btype) = ADDRESS];
inline void register_public_key_event::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& register_public_key_event::address() const {
  // @@protoc_insertion_point(field_get:koinos.contracts.pob.register_public_key_event.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void register_public_key_event::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.contracts.pob.register_public_key_event.address)
}
inline std::string* register_public_key_event::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:koinos.contracts.pob.register_public_key_event.address)
  return _s;
}
inline const std::string& register_public_key_event::_internal_address() const {
  return address_.Get();
}
inline void register_public_key_event::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* register_public_key_event::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* register_public_key_event::release_address() {
  // @@protoc_insertion_point(field_release:koinos.contracts.pob.register_public_key_event.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void register_public_key_event::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.contracts.pob.register_public_key_event.address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pob
}  // namespace contracts
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fcontracts_2fpob_2fpob_2eproto
