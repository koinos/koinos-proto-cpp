// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/account_history/account_history_rpc.proto

#include "koinos/rpc/account_history/account_history_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace rpc {
namespace account_history {
constexpr account_history_entry::account_history_entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seq_num_(uint64_t{0u})
  , _oneof_case_{}{}
struct account_history_entryDefaultTypeInternal {
  constexpr account_history_entryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~account_history_entryDefaultTypeInternal() {}
  union {
    account_history_entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT account_history_entryDefaultTypeInternal _account_history_entry_default_instance_;
constexpr get_account_history_request::get_account_history_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_num_(uint64_t{0u})
  , limit_(uint64_t{0u})
  , ascending_(false)
  , irreversible_(false){}
struct get_account_history_requestDefaultTypeInternal {
  constexpr get_account_history_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_account_history_requestDefaultTypeInternal() {}
  union {
    get_account_history_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_account_history_requestDefaultTypeInternal _get_account_history_request_default_instance_;
constexpr get_account_history_response::get_account_history_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct get_account_history_responseDefaultTypeInternal {
  constexpr get_account_history_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_account_history_responseDefaultTypeInternal() {}
  union {
    get_account_history_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_account_history_responseDefaultTypeInternal _get_account_history_response_default_instance_;
constexpr account_history_request::account_history_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct account_history_requestDefaultTypeInternal {
  constexpr account_history_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~account_history_requestDefaultTypeInternal() {}
  union {
    account_history_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT account_history_requestDefaultTypeInternal _account_history_request_default_instance_;
constexpr account_history_response::account_history_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct account_history_responseDefaultTypeInternal {
  constexpr account_history_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~account_history_responseDefaultTypeInternal() {}
  union {
    account_history_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT account_history_responseDefaultTypeInternal _account_history_response_default_instance_;
}  // namespace account_history
}  // namespace rpc
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::account_history_entry, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::account_history_entry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::account_history_entry, seq_num_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::account_history_entry, record_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::get_account_history_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::get_account_history_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::get_account_history_request, address_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::get_account_history_request, seq_num_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::get_account_history_request, limit_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::get_account_history_request, ascending_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::get_account_history_request, irreversible_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::get_account_history_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::get_account_history_response, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::account_history_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::account_history_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::account_history_request, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::account_history_response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::account_history_response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::account_history::account_history_response, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::rpc::account_history::account_history_entry)},
  { 9, 19, sizeof(::koinos::rpc::account_history::get_account_history_request)},
  { 24, -1, sizeof(::koinos::rpc::account_history::get_account_history_response)},
  { 30, -1, sizeof(::koinos::rpc::account_history::account_history_request)},
  { 38, -1, sizeof(::koinos::rpc::account_history::account_history_response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::account_history::_account_history_entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::account_history::_get_account_history_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::account_history::_get_account_history_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::account_history::_account_history_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::account_history::_account_history_response_default_instance_),
};

const char descriptor_table_protodef_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4koinos/rpc/account_history/account_his"
  "tory_rpc.proto\022\032koinos.rpc.account_histo"
  "ry\032,koinos/account_history/account_histo"
  "ry.proto\032\024koinos/options.proto\032\024koinos/r"
  "pc/rpc.proto\"\250\001\n\025account_history_entry\022\023"
  "\n\007seq_num\030\001 \001(\004B\0020\001\0229\n\003trx\030\002 \001(\0132*.koino"
  "s.account_history.transaction_recordH\000\0225"
  "\n\005block\030\003 \001(\0132$.koinos.account_history.b"
  "lock_recordH\000B\010\n\006record\"\226\001\n\033get_account_"
  "history_request\022\025\n\007address\030\001 \001(\014B\004\200\265\030\006\022\030"
  "\n\007seq_num\030\002 \001(\004B\0020\001H\000\210\001\001\022\021\n\005limit\030\003 \001(\004B"
  "\0020\001\022\021\n\tascending\030\004 \001(\010\022\024\n\014irreversible\030\005"
  " \001(\010B\n\n\010_seq_num\"a\n\034get_account_history_"
  "response\022A\n\006values\030\001 \003(\01321.koinos.rpc.ac"
  "count_history.account_history_entry\"\252\001\n\027"
  "account_history_request\022,\n\010reserved\030\001 \001("
  "\0132\030.koinos.rpc.reserved_rpcH\000\022V\n\023get_acc"
  "ount_history\030\002 \001(\01327.koinos.rpc.account_"
  "history.get_account_history_requestH\000B\t\n"
  "\007request\"\330\001\n\030account_history_response\022,\n"
  "\010reserved\030\001 \001(\0132\030.koinos.rpc.reserved_rp"
  "cH\000\022)\n\005error\030\002 \001(\0132\030.koinos.rpc.error_st"
  "atusH\000\022W\n\023get_account_history\030\003 \001(\01328.ko"
  "inos.rpc.account_history.get_account_his"
  "tory_responseH\000B\n\n\010responseBBZ@github.co"
  "m/koinos/koinos-proto-golang/koinos/rpc/"
  "account_historyb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_deps[3] = {
  &::descriptor_table_koinos_2faccount_5fhistory_2faccount_5fhistory_2eproto,
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2frpc_2frpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto = {
  false, false, 1063, descriptor_table_protodef_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto, "koinos/rpc/account_history/account_history_rpc.proto", 
  &descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_once, descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto::offsets,
  file_level_metadata_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto, file_level_enum_descriptors_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto, file_level_service_descriptors_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_getter() {
  return &descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto(&descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto);
namespace koinos {
namespace rpc {
namespace account_history {

// ===================================================================

class account_history_entry::_Internal {
 public:
  static const ::koinos::account_history::transaction_record& trx(const account_history_entry* msg);
  static const ::koinos::account_history::block_record& block(const account_history_entry* msg);
};

const ::koinos::account_history::transaction_record&
account_history_entry::_Internal::trx(const account_history_entry* msg) {
  return *msg->record_.trx_;
}
const ::koinos::account_history::block_record&
account_history_entry::_Internal::block(const account_history_entry* msg) {
  return *msg->record_.block_;
}
void account_history_entry::set_allocated_trx(::koinos::account_history::transaction_record* trx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_record();
  if (trx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trx));
    if (message_arena != submessage_arena) {
      trx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trx, submessage_arena);
    }
    set_has_trx();
    record_.trx_ = trx;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.account_history.account_history_entry.trx)
}
void account_history_entry::clear_trx() {
  if (_internal_has_trx()) {
    if (GetArenaForAllocation() == nullptr) {
      delete record_.trx_;
    }
    clear_has_record();
  }
}
void account_history_entry::set_allocated_block(::koinos::account_history::block_record* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_record();
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block));
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    set_has_block();
    record_.block_ = block;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.account_history.account_history_entry.block)
}
void account_history_entry::clear_block() {
  if (_internal_has_block()) {
    if (GetArenaForAllocation() == nullptr) {
      delete record_.block_;
    }
    clear_has_record();
  }
}
account_history_entry::account_history_entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.account_history.account_history_entry)
}
account_history_entry::account_history_entry(const account_history_entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seq_num_ = from.seq_num_;
  clear_has_record();
  switch (from.record_case()) {
    case kTrx: {
      _internal_mutable_trx()->::koinos::account_history::transaction_record::MergeFrom(from._internal_trx());
      break;
    }
    case kBlock: {
      _internal_mutable_block()->::koinos::account_history::block_record::MergeFrom(from._internal_block());
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.account_history.account_history_entry)
}

inline void account_history_entry::SharedCtor() {
seq_num_ = uint64_t{0u};
clear_has_record();
}

account_history_entry::~account_history_entry() {
  // @@protoc_insertion_point(destructor:koinos.rpc.account_history.account_history_entry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void account_history_entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_record()) {
    clear_record();
  }
}

void account_history_entry::ArenaDtor(void* object) {
  account_history_entry* _this = reinterpret_cast< account_history_entry* >(object);
  (void)_this;
}
void account_history_entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void account_history_entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void account_history_entry::clear_record() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.account_history.account_history_entry)
  switch (record_case()) {
    case kTrx: {
      if (GetArenaForAllocation() == nullptr) {
        delete record_.trx_;
      }
      break;
    }
    case kBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete record_.block_;
      }
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RECORD_NOT_SET;
}


void account_history_entry::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.account_history.account_history_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seq_num_ = uint64_t{0u};
  clear_record();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* account_history_entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 seq_num = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.account_history.transaction_record trx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.account_history.block_record block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* account_history_entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.account_history.account_history_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seq_num = 1 [jstype = JS_STRING];
  if (this->_internal_seq_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq_num(), target);
  }

  // .koinos.account_history.transaction_record trx = 2;
  if (_internal_has_trx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trx(this), target, stream);
  }

  // .koinos.account_history.block_record block = 3;
  if (_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.account_history.account_history_entry)
  return target;
}

size_t account_history_entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.account_history.account_history_entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 seq_num = 1 [jstype = JS_STRING];
  if (this->_internal_seq_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_num());
  }

  switch (record_case()) {
    // .koinos.account_history.transaction_record trx = 2;
    case kTrx: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_.trx_);
      break;
    }
    // .koinos.account_history.block_record block = 3;
    case kBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *record_.block_);
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData account_history_entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    account_history_entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*account_history_entry::GetClassData() const { return &_class_data_; }

void account_history_entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<account_history_entry *>(to)->MergeFrom(
      static_cast<const account_history_entry &>(from));
}


void account_history_entry::MergeFrom(const account_history_entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.account_history.account_history_entry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seq_num() != 0) {
    _internal_set_seq_num(from._internal_seq_num());
  }
  switch (from.record_case()) {
    case kTrx: {
      _internal_mutable_trx()->::koinos::account_history::transaction_record::MergeFrom(from._internal_trx());
      break;
    }
    case kBlock: {
      _internal_mutable_block()->::koinos::account_history::block_record::MergeFrom(from._internal_block());
      break;
    }
    case RECORD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void account_history_entry::CopyFrom(const account_history_entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.account_history.account_history_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_history_entry::IsInitialized() const {
  return true;
}

void account_history_entry::InternalSwap(account_history_entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(seq_num_, other->seq_num_);
  swap(record_, other->record_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata account_history_entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto[0]);
}

// ===================================================================

class get_account_history_request::_Internal {
 public:
  using HasBits = decltype(std::declval<get_account_history_request>()._has_bits_);
  static void set_has_seq_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

get_account_history_request::get_account_history_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.account_history.get_account_history_request)
}
get_account_history_request::get_account_history_request(const get_account_history_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_num_, &from.seq_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&irreversible_) -
    reinterpret_cast<char*>(&seq_num_)) + sizeof(irreversible_));
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.account_history.get_account_history_request)
}

inline void get_account_history_request::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&irreversible_) -
    reinterpret_cast<char*>(&seq_num_)) + sizeof(irreversible_));
}

get_account_history_request::~get_account_history_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.account_history.get_account_history_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_account_history_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_account_history_request::ArenaDtor(void* object) {
  get_account_history_request* _this = reinterpret_cast< get_account_history_request* >(object);
  (void)_this;
}
void get_account_history_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_history_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_account_history_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.account_history.get_account_history_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  seq_num_ = uint64_t{0u};
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&irreversible_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(irreversible_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_history_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 seq_num = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_seq_num(&has_bits);
          seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 limit = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ascending = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ascending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool irreversible = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          irreversible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_history_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.account_history.get_account_history_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // optional uint64 seq_num = 2 [jstype = JS_STRING];
  if (_internal_has_seq_num()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_seq_num(), target);
  }

  // uint64 limit = 3 [jstype = JS_STRING];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_limit(), target);
  }

  // bool ascending = 4;
  if (this->_internal_ascending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ascending(), target);
  }

  // bool irreversible = 5;
  if (this->_internal_irreversible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_irreversible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.account_history.get_account_history_request)
  return target;
}

size_t get_account_history_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.account_history.get_account_history_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // optional uint64 seq_num = 2 [jstype = JS_STRING];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq_num());
  }

  // uint64 limit = 3 [jstype = JS_STRING];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_limit());
  }

  // bool ascending = 4;
  if (this->_internal_ascending() != 0) {
    total_size += 1 + 1;
  }

  // bool irreversible = 5;
  if (this->_internal_irreversible() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_account_history_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_account_history_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_account_history_request::GetClassData() const { return &_class_data_; }

void get_account_history_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_account_history_request *>(to)->MergeFrom(
      static_cast<const get_account_history_request &>(from));
}


void get_account_history_request::MergeFrom(const get_account_history_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.account_history.get_account_history_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_has_seq_num()) {
    _internal_set_seq_num(from._internal_seq_num());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from._internal_ascending() != 0) {
    _internal_set_ascending(from._internal_ascending());
  }
  if (from._internal_irreversible() != 0) {
    _internal_set_irreversible(from._internal_irreversible());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_account_history_request::CopyFrom(const get_account_history_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.account_history.get_account_history_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_history_request::IsInitialized() const {
  return true;
}

void get_account_history_request::InternalSwap(get_account_history_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(get_account_history_request, irreversible_)
      + sizeof(get_account_history_request::irreversible_)
      - PROTOBUF_FIELD_OFFSET(get_account_history_request, seq_num_)>(
          reinterpret_cast<char*>(&seq_num_),
          reinterpret_cast<char*>(&other->seq_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_history_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto[1]);
}

// ===================================================================

class get_account_history_response::_Internal {
 public:
};

get_account_history_response::get_account_history_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.account_history.get_account_history_response)
}
get_account_history_response::get_account_history_response(const get_account_history_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.account_history.get_account_history_response)
}

inline void get_account_history_response::SharedCtor() {
}

get_account_history_response::~get_account_history_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.account_history.get_account_history_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_account_history_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_account_history_response::ArenaDtor(void* object) {
  get_account_history_response* _this = reinterpret_cast< get_account_history_response* >(object);
  (void)_this;
}
void get_account_history_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_history_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_account_history_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.account_history.get_account_history_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_history_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .koinos.rpc.account_history.account_history_entry values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_history_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.account_history.get_account_history_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .koinos.rpc.account_history.account_history_entry values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.account_history.get_account_history_response)
  return target;
}

size_t get_account_history_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.account_history.get_account_history_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.rpc.account_history.account_history_entry values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_account_history_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_account_history_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_account_history_response::GetClassData() const { return &_class_data_; }

void get_account_history_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_account_history_response *>(to)->MergeFrom(
      static_cast<const get_account_history_response &>(from));
}


void get_account_history_response::MergeFrom(const get_account_history_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.account_history.get_account_history_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_account_history_response::CopyFrom(const get_account_history_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.account_history.get_account_history_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_history_response::IsInitialized() const {
  return true;
}

void get_account_history_response::InternalSwap(get_account_history_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_history_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto[2]);
}

// ===================================================================

class account_history_request::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const account_history_request* msg);
  static const ::koinos::rpc::account_history::get_account_history_request& get_account_history(const account_history_request* msg);
};

const ::koinos::rpc::reserved_rpc&
account_history_request::_Internal::reserved(const account_history_request* msg) {
  return *msg->request_.reserved_;
}
const ::koinos::rpc::account_history::get_account_history_request&
account_history_request::_Internal::get_account_history(const account_history_request* msg) {
  return *msg->request_.get_account_history_;
}
void account_history_request::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.account_history.account_history_request.reserved)
}
void account_history_request::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.reserved_;
    }
    clear_has_request();
  }
}
void account_history_request::set_allocated_get_account_history(::koinos::rpc::account_history::get_account_history_request* get_account_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_account_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::account_history::get_account_history_request>::GetOwningArena(get_account_history);
    if (message_arena != submessage_arena) {
      get_account_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_history, submessage_arena);
    }
    set_has_get_account_history();
    request_.get_account_history_ = get_account_history;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.account_history.account_history_request.get_account_history)
}
account_history_request::account_history_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.account_history.account_history_request)
}
account_history_request::account_history_request(const account_history_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kGetAccountHistory: {
      _internal_mutable_get_account_history()->::koinos::rpc::account_history::get_account_history_request::MergeFrom(from._internal_get_account_history());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.account_history.account_history_request)
}

inline void account_history_request::SharedCtor() {
clear_has_request();
}

account_history_request::~account_history_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.account_history.account_history_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void account_history_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void account_history_request::ArenaDtor(void* object) {
  account_history_request* _this = reinterpret_cast< account_history_request* >(object);
  (void)_this;
}
void account_history_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void account_history_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void account_history_request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.account_history.account_history_request)
  switch (request_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.reserved_;
      }
      break;
    }
    case kGetAccountHistory: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_account_history_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void account_history_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.account_history.account_history_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* account_history_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.account_history.get_account_history_request get_account_history = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* account_history_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.account_history.account_history_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.account_history.get_account_history_request get_account_history = 2;
  if (_internal_has_get_account_history()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::get_account_history(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.account_history.account_history_request)
  return target;
}

size_t account_history_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.account_history.account_history_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.reserved_);
      break;
    }
    // .koinos.rpc.account_history.get_account_history_request get_account_history = 2;
    case kGetAccountHistory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_account_history_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData account_history_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    account_history_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*account_history_request::GetClassData() const { return &_class_data_; }

void account_history_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<account_history_request *>(to)->MergeFrom(
      static_cast<const account_history_request &>(from));
}


void account_history_request::MergeFrom(const account_history_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.account_history.account_history_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kGetAccountHistory: {
      _internal_mutable_get_account_history()->::koinos::rpc::account_history::get_account_history_request::MergeFrom(from._internal_get_account_history());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void account_history_request::CopyFrom(const account_history_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.account_history.account_history_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_history_request::IsInitialized() const {
  return true;
}

void account_history_request::InternalSwap(account_history_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata account_history_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto[3]);
}

// ===================================================================

class account_history_response::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const account_history_response* msg);
  static const ::koinos::rpc::error_status& error(const account_history_response* msg);
  static const ::koinos::rpc::account_history::get_account_history_response& get_account_history(const account_history_response* msg);
};

const ::koinos::rpc::reserved_rpc&
account_history_response::_Internal::reserved(const account_history_response* msg) {
  return *msg->response_.reserved_;
}
const ::koinos::rpc::error_status&
account_history_response::_Internal::error(const account_history_response* msg) {
  return *msg->response_.error_;
}
const ::koinos::rpc::account_history::get_account_history_response&
account_history_response::_Internal::get_account_history(const account_history_response* msg) {
  return *msg->response_.get_account_history_;
}
void account_history_response::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.account_history.account_history_response.reserved)
}
void account_history_response::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.reserved_;
    }
    clear_has_response();
  }
}
void account_history_response::set_allocated_error(::koinos::rpc::error_status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.account_history.account_history_response.error)
}
void account_history_response::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
void account_history_response::set_allocated_get_account_history(::koinos::rpc::account_history::get_account_history_response* get_account_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_account_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::account_history::get_account_history_response>::GetOwningArena(get_account_history);
    if (message_arena != submessage_arena) {
      get_account_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_history, submessage_arena);
    }
    set_has_get_account_history();
    response_.get_account_history_ = get_account_history;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.account_history.account_history_response.get_account_history)
}
account_history_response::account_history_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.account_history.account_history_response)
}
account_history_response::account_history_response(const account_history_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_status::MergeFrom(from._internal_error());
      break;
    }
    case kGetAccountHistory: {
      _internal_mutable_get_account_history()->::koinos::rpc::account_history::get_account_history_response::MergeFrom(from._internal_get_account_history());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.account_history.account_history_response)
}

inline void account_history_response::SharedCtor() {
clear_has_response();
}

account_history_response::~account_history_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.account_history.account_history_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void account_history_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void account_history_response::ArenaDtor(void* object) {
  account_history_response* _this = reinterpret_cast< account_history_response* >(object);
  (void)_this;
}
void account_history_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void account_history_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void account_history_response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.account_history.account_history_response)
  switch (response_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.reserved_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case kGetAccountHistory: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_account_history_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void account_history_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.account_history.account_history_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* account_history_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.error_status error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.account_history.get_account_history_response get_account_history = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* account_history_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.account_history.account_history_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.error_status error = 2;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // .koinos.rpc.account_history.get_account_history_response get_account_history = 3;
  if (_internal_has_get_account_history()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get_account_history(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.account_history.account_history_response)
  return target;
}

size_t account_history_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.account_history.account_history_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.reserved_);
      break;
    }
    // .koinos.rpc.error_status error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    // .koinos.rpc.account_history.get_account_history_response get_account_history = 3;
    case kGetAccountHistory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_account_history_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData account_history_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    account_history_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*account_history_response::GetClassData() const { return &_class_data_; }

void account_history_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<account_history_response *>(to)->MergeFrom(
      static_cast<const account_history_response &>(from));
}


void account_history_response::MergeFrom(const account_history_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.account_history.account_history_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_status::MergeFrom(from._internal_error());
      break;
    }
    case kGetAccountHistory: {
      _internal_mutable_get_account_history()->::koinos::rpc::account_history::get_account_history_response::MergeFrom(from._internal_get_account_history());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void account_history_response::CopyFrom(const account_history_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.account_history.account_history_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_history_response::IsInitialized() const {
  return true;
}

void account_history_response::InternalSwap(account_history_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata account_history_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2faccount_5fhistory_2faccount_5fhistory_5frpc_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace account_history
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::rpc::account_history::account_history_entry* Arena::CreateMaybeMessage< ::koinos::rpc::account_history::account_history_entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::account_history::account_history_entry >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::account_history::get_account_history_request* Arena::CreateMaybeMessage< ::koinos::rpc::account_history::get_account_history_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::account_history::get_account_history_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::account_history::get_account_history_response* Arena::CreateMaybeMessage< ::koinos::rpc::account_history::get_account_history_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::account_history::get_account_history_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::account_history::account_history_request* Arena::CreateMaybeMessage< ::koinos::rpc::account_history::account_history_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::account_history::account_history_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::account_history::account_history_response* Arena::CreateMaybeMessage< ::koinos::rpc::account_history::account_history_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::account_history::account_history_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
