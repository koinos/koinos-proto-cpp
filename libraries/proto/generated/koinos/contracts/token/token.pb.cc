// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/contracts/token/token.proto

#include "koinos/contracts/token/token.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace contracts {
namespace token {
constexpr name_args::name_args(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct name_argsDefaultTypeInternal {
  constexpr name_argsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~name_argsDefaultTypeInternal() {}
  union {
    name_args _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT name_argsDefaultTypeInternal _name_args_default_instance_;
constexpr name_return::name_return(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct name_returnDefaultTypeInternal {
  constexpr name_returnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~name_returnDefaultTypeInternal() {}
  union {
    name_return _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT name_returnDefaultTypeInternal _name_return_default_instance_;
constexpr symbol_args::symbol_args(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct symbol_argsDefaultTypeInternal {
  constexpr symbol_argsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~symbol_argsDefaultTypeInternal() {}
  union {
    symbol_args _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT symbol_argsDefaultTypeInternal _symbol_args_default_instance_;
constexpr symbol_return::symbol_return(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct symbol_returnDefaultTypeInternal {
  constexpr symbol_returnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~symbol_returnDefaultTypeInternal() {}
  union {
    symbol_return _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT symbol_returnDefaultTypeInternal _symbol_return_default_instance_;
constexpr decimals_args::decimals_args(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct decimals_argsDefaultTypeInternal {
  constexpr decimals_argsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~decimals_argsDefaultTypeInternal() {}
  union {
    decimals_args _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT decimals_argsDefaultTypeInternal _decimals_args_default_instance_;
constexpr decimals_return::decimals_return(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u){}
struct decimals_returnDefaultTypeInternal {
  constexpr decimals_returnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~decimals_returnDefaultTypeInternal() {}
  union {
    decimals_return _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT decimals_returnDefaultTypeInternal _decimals_return_default_instance_;
constexpr total_supply_args::total_supply_args(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct total_supply_argsDefaultTypeInternal {
  constexpr total_supply_argsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~total_supply_argsDefaultTypeInternal() {}
  union {
    total_supply_args _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT total_supply_argsDefaultTypeInternal _total_supply_args_default_instance_;
constexpr total_supply_return::total_supply_return(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct total_supply_returnDefaultTypeInternal {
  constexpr total_supply_returnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~total_supply_returnDefaultTypeInternal() {}
  union {
    total_supply_return _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT total_supply_returnDefaultTypeInternal _total_supply_return_default_instance_;
constexpr balance_of_args::balance_of_args(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct balance_of_argsDefaultTypeInternal {
  constexpr balance_of_argsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~balance_of_argsDefaultTypeInternal() {}
  union {
    balance_of_args _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT balance_of_argsDefaultTypeInternal _balance_of_args_default_instance_;
constexpr balance_of_return::balance_of_return(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(uint64_t{0u}){}
struct balance_of_returnDefaultTypeInternal {
  constexpr balance_of_returnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~balance_of_returnDefaultTypeInternal() {}
  union {
    balance_of_return _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT balance_of_returnDefaultTypeInternal _balance_of_return_default_instance_;
constexpr transfer_args::transfer_args(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct transfer_argsDefaultTypeInternal {
  constexpr transfer_argsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transfer_argsDefaultTypeInternal() {}
  union {
    transfer_args _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transfer_argsDefaultTypeInternal _transfer_args_default_instance_;
constexpr transfer_return::transfer_return(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct transfer_returnDefaultTypeInternal {
  constexpr transfer_returnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~transfer_returnDefaultTypeInternal() {}
  union {
    transfer_return _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT transfer_returnDefaultTypeInternal _transfer_return_default_instance_;
constexpr mint_args::mint_args(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct mint_argsDefaultTypeInternal {
  constexpr mint_argsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mint_argsDefaultTypeInternal() {}
  union {
    mint_args _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mint_argsDefaultTypeInternal _mint_args_default_instance_;
constexpr mint_return::mint_return(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct mint_returnDefaultTypeInternal {
  constexpr mint_returnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~mint_returnDefaultTypeInternal() {}
  union {
    mint_return _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT mint_returnDefaultTypeInternal _mint_return_default_instance_;
}  // namespace token
}  // namespace contracts
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2fcontracts_2ftoken_2ftoken_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fcontracts_2ftoken_2ftoken_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::name_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::name_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::name_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::symbol_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::symbol_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::symbol_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::decimals_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::decimals_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::decimals_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::total_supply_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::total_supply_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::total_supply_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::balance_of_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::balance_of_args, owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::balance_of_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::balance_of_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::transfer_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::transfer_args, from_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::transfer_args, to_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::transfer_args, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::transfer_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::transfer_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::mint_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::mint_args, to_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::mint_args, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::mint_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::token::mint_return, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::contracts::token::name_args)},
  { 5, -1, sizeof(::koinos::contracts::token::name_return)},
  { 11, -1, sizeof(::koinos::contracts::token::symbol_args)},
  { 16, -1, sizeof(::koinos::contracts::token::symbol_return)},
  { 22, -1, sizeof(::koinos::contracts::token::decimals_args)},
  { 27, -1, sizeof(::koinos::contracts::token::decimals_return)},
  { 33, -1, sizeof(::koinos::contracts::token::total_supply_args)},
  { 38, -1, sizeof(::koinos::contracts::token::total_supply_return)},
  { 44, -1, sizeof(::koinos::contracts::token::balance_of_args)},
  { 50, -1, sizeof(::koinos::contracts::token::balance_of_return)},
  { 56, -1, sizeof(::koinos::contracts::token::transfer_args)},
  { 64, -1, sizeof(::koinos::contracts::token::transfer_return)},
  { 70, -1, sizeof(::koinos::contracts::token::mint_args)},
  { 77, -1, sizeof(::koinos::contracts::token::mint_return)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_name_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_name_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_symbol_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_symbol_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_decimals_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_decimals_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_total_supply_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_total_supply_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_balance_of_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_balance_of_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_transfer_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_transfer_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_mint_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::token::_mint_return_default_instance_),
};

const char descriptor_table_protodef_koinos_2fcontracts_2ftoken_2ftoken_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"koinos/contracts/token/token.proto\022\026ko"
  "inos.contracts.token\"\013\n\tname_args\"\034\n\013nam"
  "e_return\022\r\n\005value\030\001 \001(\t\"\r\n\013symbol_args\"\036"
  "\n\rsymbol_return\022\r\n\005value\030\001 \001(\t\"\017\n\rdecima"
  "ls_args\" \n\017decimals_return\022\r\n\005value\030\001 \001("
  "\r\"\023\n\021total_supply_args\"(\n\023total_supply_r"
  "eturn\022\021\n\005value\030\001 \001(\004B\0020\001\" \n\017balance_of_a"
  "rgs\022\r\n\005owner\030\001 \001(\014\"&\n\021balance_of_return\022"
  "\021\n\005value\030\001 \001(\004B\0020\001\"<\n\rtransfer_args\022\014\n\004f"
  "rom\030\001 \001(\014\022\n\n\002to\030\002 \001(\014\022\021\n\005value\030\003 \001(\004B\0020\001"
  "\" \n\017transfer_return\022\r\n\005value\030\001 \001(\010\"*\n\tmi"
  "nt_args\022\n\n\002to\030\001 \001(\014\022\021\n\005value\030\002 \001(\004B\0020\001\"\034"
  "\n\013mint_return\022\r\n\005value\030\001 \001(\010B>Z<github.c"
  "om/koinos/koinos-proto-golang/koinos/con"
  "tracts/tokenb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto = {
  false, false, 580, descriptor_table_protodef_koinos_2fcontracts_2ftoken_2ftoken_2eproto, "koinos/contracts/token/token.proto", 
  &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once, nullptr, 0, 14,
  schemas, file_default_instances, TableStruct_koinos_2fcontracts_2ftoken_2ftoken_2eproto::offsets,
  file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto, file_level_enum_descriptors_koinos_2fcontracts_2ftoken_2ftoken_2eproto, file_level_service_descriptors_koinos_2fcontracts_2ftoken_2ftoken_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter() {
  return &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fcontracts_2ftoken_2ftoken_2eproto(&descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto);
namespace koinos {
namespace contracts {
namespace token {

// ===================================================================

class name_args::_Internal {
 public:
};

name_args::name_args(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.name_args)
}
name_args::name_args(const name_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.name_args)
}

inline void name_args::SharedCtor() {
}

name_args::~name_args() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.name_args)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void name_args::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void name_args::ArenaDtor(void* object) {
  name_args* _this = reinterpret_cast< name_args* >(object);
  (void)_this;
}
void name_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void name_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void name_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.name_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* name_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* name_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.name_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.name_args)
  return target;
}

size_t name_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.name_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData name_args::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    name_args::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*name_args::GetClassData() const { return &_class_data_; }

void name_args::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<name_args *>(to)->MergeFrom(
      static_cast<const name_args &>(from));
}


void name_args::MergeFrom(const name_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.name_args)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void name_args::CopyFrom(const name_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.name_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool name_args::IsInitialized() const {
  return true;
}

void name_args::InternalSwap(name_args* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata name_args::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[0]);
}

// ===================================================================

class name_return::_Internal {
 public:
};

name_return::name_return(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.name_return)
}
name_return::name_return(const name_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.name_return)
}

inline void name_return::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

name_return::~name_return() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.name_return)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void name_return::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void name_return::ArenaDtor(void* object) {
  name_return* _this = reinterpret_cast< name_return* >(object);
  (void)_this;
}
void name_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void name_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void name_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.name_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* name_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.contracts.token.name_return.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* name_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.name_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.contracts.token.name_return.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.name_return)
  return target;
}

size_t name_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.name_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData name_return::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    name_return::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*name_return::GetClassData() const { return &_class_data_; }

void name_return::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<name_return *>(to)->MergeFrom(
      static_cast<const name_return &>(from));
}


void name_return::MergeFrom(const name_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.name_return)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void name_return::CopyFrom(const name_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.name_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool name_return::IsInitialized() const {
  return true;
}

void name_return::InternalSwap(name_return* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata name_return::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[1]);
}

// ===================================================================

class symbol_args::_Internal {
 public:
};

symbol_args::symbol_args(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.symbol_args)
}
symbol_args::symbol_args(const symbol_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.symbol_args)
}

inline void symbol_args::SharedCtor() {
}

symbol_args::~symbol_args() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.symbol_args)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void symbol_args::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void symbol_args::ArenaDtor(void* object) {
  symbol_args* _this = reinterpret_cast< symbol_args* >(object);
  (void)_this;
}
void symbol_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void symbol_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void symbol_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.symbol_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* symbol_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* symbol_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.symbol_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.symbol_args)
  return target;
}

size_t symbol_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.symbol_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData symbol_args::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    symbol_args::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*symbol_args::GetClassData() const { return &_class_data_; }

void symbol_args::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<symbol_args *>(to)->MergeFrom(
      static_cast<const symbol_args &>(from));
}


void symbol_args::MergeFrom(const symbol_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.symbol_args)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void symbol_args::CopyFrom(const symbol_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.symbol_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool symbol_args::IsInitialized() const {
  return true;
}

void symbol_args::InternalSwap(symbol_args* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata symbol_args::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[2]);
}

// ===================================================================

class symbol_return::_Internal {
 public:
};

symbol_return::symbol_return(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.symbol_return)
}
symbol_return::symbol_return(const symbol_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.symbol_return)
}

inline void symbol_return::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

symbol_return::~symbol_return() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.symbol_return)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void symbol_return::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void symbol_return::ArenaDtor(void* object) {
  symbol_return* _this = reinterpret_cast< symbol_return* >(object);
  (void)_this;
}
void symbol_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void symbol_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void symbol_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.symbol_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* symbol_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.contracts.token.symbol_return.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* symbol_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.symbol_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.contracts.token.symbol_return.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.symbol_return)
  return target;
}

size_t symbol_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.symbol_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData symbol_return::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    symbol_return::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*symbol_return::GetClassData() const { return &_class_data_; }

void symbol_return::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<symbol_return *>(to)->MergeFrom(
      static_cast<const symbol_return &>(from));
}


void symbol_return::MergeFrom(const symbol_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.symbol_return)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void symbol_return::CopyFrom(const symbol_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.symbol_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool symbol_return::IsInitialized() const {
  return true;
}

void symbol_return::InternalSwap(symbol_return* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata symbol_return::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[3]);
}

// ===================================================================

class decimals_args::_Internal {
 public:
};

decimals_args::decimals_args(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.decimals_args)
}
decimals_args::decimals_args(const decimals_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.decimals_args)
}

inline void decimals_args::SharedCtor() {
}

decimals_args::~decimals_args() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.decimals_args)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void decimals_args::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void decimals_args::ArenaDtor(void* object) {
  decimals_args* _this = reinterpret_cast< decimals_args* >(object);
  (void)_this;
}
void decimals_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void decimals_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void decimals_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.decimals_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* decimals_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* decimals_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.decimals_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.decimals_args)
  return target;
}

size_t decimals_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.decimals_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData decimals_args::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    decimals_args::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*decimals_args::GetClassData() const { return &_class_data_; }

void decimals_args::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<decimals_args *>(to)->MergeFrom(
      static_cast<const decimals_args &>(from));
}


void decimals_args::MergeFrom(const decimals_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.decimals_args)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void decimals_args::CopyFrom(const decimals_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.decimals_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool decimals_args::IsInitialized() const {
  return true;
}

void decimals_args::InternalSwap(decimals_args* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata decimals_args::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[4]);
}

// ===================================================================

class decimals_return::_Internal {
 public:
};

decimals_return::decimals_return(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.decimals_return)
}
decimals_return::decimals_return(const decimals_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.decimals_return)
}

inline void decimals_return::SharedCtor() {
value_ = 0u;
}

decimals_return::~decimals_return() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.decimals_return)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void decimals_return::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void decimals_return::ArenaDtor(void* object) {
  decimals_return* _this = reinterpret_cast< decimals_return* >(object);
  (void)_this;
}
void decimals_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void decimals_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void decimals_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.decimals_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* decimals_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* decimals_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.decimals_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.decimals_return)
  return target;
}

size_t decimals_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.decimals_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData decimals_return::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    decimals_return::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*decimals_return::GetClassData() const { return &_class_data_; }

void decimals_return::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<decimals_return *>(to)->MergeFrom(
      static_cast<const decimals_return &>(from));
}


void decimals_return::MergeFrom(const decimals_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.decimals_return)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void decimals_return::CopyFrom(const decimals_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.decimals_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool decimals_return::IsInitialized() const {
  return true;
}

void decimals_return::InternalSwap(decimals_return* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata decimals_return::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[5]);
}

// ===================================================================

class total_supply_args::_Internal {
 public:
};

total_supply_args::total_supply_args(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.total_supply_args)
}
total_supply_args::total_supply_args(const total_supply_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.total_supply_args)
}

inline void total_supply_args::SharedCtor() {
}

total_supply_args::~total_supply_args() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.total_supply_args)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void total_supply_args::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void total_supply_args::ArenaDtor(void* object) {
  total_supply_args* _this = reinterpret_cast< total_supply_args* >(object);
  (void)_this;
}
void total_supply_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void total_supply_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void total_supply_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.total_supply_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* total_supply_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* total_supply_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.total_supply_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.total_supply_args)
  return target;
}

size_t total_supply_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.total_supply_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData total_supply_args::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    total_supply_args::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*total_supply_args::GetClassData() const { return &_class_data_; }

void total_supply_args::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<total_supply_args *>(to)->MergeFrom(
      static_cast<const total_supply_args &>(from));
}


void total_supply_args::MergeFrom(const total_supply_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.total_supply_args)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void total_supply_args::CopyFrom(const total_supply_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.total_supply_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool total_supply_args::IsInitialized() const {
  return true;
}

void total_supply_args::InternalSwap(total_supply_args* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata total_supply_args::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[6]);
}

// ===================================================================

class total_supply_return::_Internal {
 public:
};

total_supply_return::total_supply_return(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.total_supply_return)
}
total_supply_return::total_supply_return(const total_supply_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.total_supply_return)
}

inline void total_supply_return::SharedCtor() {
value_ = uint64_t{0u};
}

total_supply_return::~total_supply_return() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.total_supply_return)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void total_supply_return::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void total_supply_return::ArenaDtor(void* object) {
  total_supply_return* _this = reinterpret_cast< total_supply_return* >(object);
  (void)_this;
}
void total_supply_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void total_supply_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void total_supply_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.total_supply_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* total_supply_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* total_supply_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.total_supply_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.total_supply_return)
  return target;
}

size_t total_supply_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.total_supply_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData total_supply_return::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    total_supply_return::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*total_supply_return::GetClassData() const { return &_class_data_; }

void total_supply_return::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<total_supply_return *>(to)->MergeFrom(
      static_cast<const total_supply_return &>(from));
}


void total_supply_return::MergeFrom(const total_supply_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.total_supply_return)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void total_supply_return::CopyFrom(const total_supply_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.total_supply_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool total_supply_return::IsInitialized() const {
  return true;
}

void total_supply_return::InternalSwap(total_supply_return* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata total_supply_return::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[7]);
}

// ===================================================================

class balance_of_args::_Internal {
 public:
};

balance_of_args::balance_of_args(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.balance_of_args)
}
balance_of_args::balance_of_args(const balance_of_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.balance_of_args)
}

inline void balance_of_args::SharedCtor() {
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

balance_of_args::~balance_of_args() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.balance_of_args)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void balance_of_args::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void balance_of_args::ArenaDtor(void* object) {
  balance_of_args* _this = reinterpret_cast< balance_of_args* >(object);
  (void)_this;
}
void balance_of_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void balance_of_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void balance_of_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.balance_of_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* balance_of_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* balance_of_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.balance_of_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner = 1;
  if (!this->_internal_owner().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.balance_of_args)
  return target;
}

size_t balance_of_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.balance_of_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner = 1;
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData balance_of_args::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    balance_of_args::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*balance_of_args::GetClassData() const { return &_class_data_; }

void balance_of_args::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<balance_of_args *>(to)->MergeFrom(
      static_cast<const balance_of_args &>(from));
}


void balance_of_args::MergeFrom(const balance_of_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.balance_of_args)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void balance_of_args::CopyFrom(const balance_of_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.balance_of_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool balance_of_args::IsInitialized() const {
  return true;
}

void balance_of_args::InternalSwap(balance_of_args* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata balance_of_args::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[8]);
}

// ===================================================================

class balance_of_return::_Internal {
 public:
};

balance_of_return::balance_of_return(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.balance_of_return)
}
balance_of_return::balance_of_return(const balance_of_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.balance_of_return)
}

inline void balance_of_return::SharedCtor() {
value_ = uint64_t{0u};
}

balance_of_return::~balance_of_return() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.balance_of_return)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void balance_of_return::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void balance_of_return::ArenaDtor(void* object) {
  balance_of_return* _this = reinterpret_cast< balance_of_return* >(object);
  (void)_this;
}
void balance_of_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void balance_of_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void balance_of_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.balance_of_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* balance_of_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* balance_of_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.balance_of_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.balance_of_return)
  return target;
}

size_t balance_of_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.balance_of_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData balance_of_return::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    balance_of_return::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*balance_of_return::GetClassData() const { return &_class_data_; }

void balance_of_return::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<balance_of_return *>(to)->MergeFrom(
      static_cast<const balance_of_return &>(from));
}


void balance_of_return::MergeFrom(const balance_of_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.balance_of_return)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void balance_of_return::CopyFrom(const balance_of_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.balance_of_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool balance_of_return::IsInitialized() const {
  return true;
}

void balance_of_return::InternalSwap(balance_of_return* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata balance_of_return::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[9]);
}

// ===================================================================

class transfer_args::_Internal {
 public:
};

transfer_args::transfer_args(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.transfer_args)
}
transfer_args::transfer_args(const transfer_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.transfer_args)
}

inline void transfer_args::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = uint64_t{0u};
}

transfer_args::~transfer_args() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.transfer_args)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transfer_args::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transfer_args::ArenaDtor(void* object) {
  transfer_args* _this = reinterpret_cast< transfer_args* >(object);
  (void)_this;
}
void transfer_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transfer_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transfer_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.transfer_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transfer_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transfer_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.transfer_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (!this->_internal_from().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes to = 2;
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // uint64 value = 3 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.transfer_args)
  return target;
}

size_t transfer_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.transfer_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 2;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // uint64 value = 3 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transfer_args::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transfer_args::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transfer_args::GetClassData() const { return &_class_data_; }

void transfer_args::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transfer_args *>(to)->MergeFrom(
      static_cast<const transfer_args &>(from));
}


void transfer_args::MergeFrom(const transfer_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.transfer_args)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transfer_args::CopyFrom(const transfer_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.transfer_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_args::IsInitialized() const {
  return true;
}

void transfer_args::InternalSwap(transfer_args* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transfer_args::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[10]);
}

// ===================================================================

class transfer_return::_Internal {
 public:
};

transfer_return::transfer_return(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.transfer_return)
}
transfer_return::transfer_return(const transfer_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.transfer_return)
}

inline void transfer_return::SharedCtor() {
value_ = false;
}

transfer_return::~transfer_return() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.transfer_return)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void transfer_return::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void transfer_return::ArenaDtor(void* object) {
  transfer_return* _this = reinterpret_cast< transfer_return* >(object);
  (void)_this;
}
void transfer_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transfer_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void transfer_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.transfer_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transfer_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transfer_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.transfer_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.transfer_return)
  return target;
}

size_t transfer_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.transfer_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData transfer_return::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    transfer_return::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*transfer_return::GetClassData() const { return &_class_data_; }

void transfer_return::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<transfer_return *>(to)->MergeFrom(
      static_cast<const transfer_return &>(from));
}


void transfer_return::MergeFrom(const transfer_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.transfer_return)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void transfer_return::CopyFrom(const transfer_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.transfer_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transfer_return::IsInitialized() const {
  return true;
}

void transfer_return::InternalSwap(transfer_return* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata transfer_return::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[11]);
}

// ===================================================================

class mint_args::_Internal {
 public:
};

mint_args::mint_args(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.mint_args)
}
mint_args::mint_args(const mint_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.mint_args)
}

inline void mint_args::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = uint64_t{0u};
}

mint_args::~mint_args() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.mint_args)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mint_args::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void mint_args::ArenaDtor(void* object) {
  mint_args* _this = reinterpret_cast< mint_args* >(object);
  (void)_this;
}
void mint_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mint_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mint_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.mint_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mint_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 value = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mint_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.mint_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes to = 1;
  if (!this->_internal_to().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_to(), target);
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.mint_args)
  return target;
}

size_t mint_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.mint_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes to = 1;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // uint64 value = 2 [jstype = JS_STRING];
  if (this->_internal_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mint_args::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mint_args::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mint_args::GetClassData() const { return &_class_data_; }

void mint_args::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mint_args *>(to)->MergeFrom(
      static_cast<const mint_args &>(from));
}


void mint_args::MergeFrom(const mint_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.mint_args)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mint_args::CopyFrom(const mint_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.mint_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mint_args::IsInitialized() const {
  return true;
}

void mint_args::InternalSwap(mint_args* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mint_args::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[12]);
}

// ===================================================================

class mint_return::_Internal {
 public:
};

mint_return::mint_return(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.token.mint_return)
}
mint_return::mint_return(const mint_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.token.mint_return)
}

inline void mint_return::SharedCtor() {
value_ = false;
}

mint_return::~mint_return() {
  // @@protoc_insertion_point(destructor:koinos.contracts.token.mint_return)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void mint_return::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void mint_return::ArenaDtor(void* object) {
  mint_return* _this = reinterpret_cast< mint_return* >(object);
  (void)_this;
}
void mint_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void mint_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void mint_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.token.mint_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mint_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* mint_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.token.mint_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.token.mint_return)
  return target;
}

size_t mint_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.token.mint_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mint_return::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    mint_return::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mint_return::GetClassData() const { return &_class_data_; }

void mint_return::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<mint_return *>(to)->MergeFrom(
      static_cast<const mint_return &>(from));
}


void mint_return::MergeFrom(const mint_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.token.mint_return)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mint_return::CopyFrom(const mint_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.token.mint_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mint_return::IsInitialized() const {
  return true;
}

void mint_return::InternalSwap(mint_return* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mint_return::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_getter, &descriptor_table_koinos_2fcontracts_2ftoken_2ftoken_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2ftoken_2ftoken_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace token
}  // namespace contracts
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::name_args* Arena::CreateMaybeMessage< ::koinos::contracts::token::name_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::name_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::name_return* Arena::CreateMaybeMessage< ::koinos::contracts::token::name_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::name_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::symbol_args* Arena::CreateMaybeMessage< ::koinos::contracts::token::symbol_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::symbol_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::symbol_return* Arena::CreateMaybeMessage< ::koinos::contracts::token::symbol_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::symbol_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::decimals_args* Arena::CreateMaybeMessage< ::koinos::contracts::token::decimals_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::decimals_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::decimals_return* Arena::CreateMaybeMessage< ::koinos::contracts::token::decimals_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::decimals_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::total_supply_args* Arena::CreateMaybeMessage< ::koinos::contracts::token::total_supply_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::total_supply_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::total_supply_return* Arena::CreateMaybeMessage< ::koinos::contracts::token::total_supply_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::total_supply_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::balance_of_args* Arena::CreateMaybeMessage< ::koinos::contracts::token::balance_of_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::balance_of_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::balance_of_return* Arena::CreateMaybeMessage< ::koinos::contracts::token::balance_of_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::balance_of_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::transfer_args* Arena::CreateMaybeMessage< ::koinos::contracts::token::transfer_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::transfer_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::transfer_return* Arena::CreateMaybeMessage< ::koinos::contracts::token::transfer_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::transfer_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::mint_args* Arena::CreateMaybeMessage< ::koinos::contracts::token::mint_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::mint_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::token::mint_return* Arena::CreateMaybeMessage< ::koinos::contracts::token::mint_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::token::mint_return >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
