// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/chain/chain_rpc.proto

#include "koinos/rpc/chain/chain_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace rpc {
namespace chain {
constexpr submit_block_request::submit_block_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr){}
struct submit_block_requestDefaultTypeInternal {
  constexpr submit_block_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~submit_block_requestDefaultTypeInternal() {}
  union {
    submit_block_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT submit_block_requestDefaultTypeInternal _submit_block_request_default_instance_;
constexpr submit_block_response::submit_block_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : receipt_(nullptr){}
struct submit_block_responseDefaultTypeInternal {
  constexpr submit_block_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~submit_block_responseDefaultTypeInternal() {}
  union {
    submit_block_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT submit_block_responseDefaultTypeInternal _submit_block_response_default_instance_;
constexpr submit_transaction_request::submit_transaction_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(nullptr)
  , broadcast_(false){}
struct submit_transaction_requestDefaultTypeInternal {
  constexpr submit_transaction_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~submit_transaction_requestDefaultTypeInternal() {}
  union {
    submit_transaction_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT submit_transaction_requestDefaultTypeInternal _submit_transaction_request_default_instance_;
constexpr submit_transaction_response::submit_transaction_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : receipt_(nullptr){}
struct submit_transaction_responseDefaultTypeInternal {
  constexpr submit_transaction_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~submit_transaction_responseDefaultTypeInternal() {}
  union {
    submit_transaction_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT submit_transaction_responseDefaultTypeInternal _submit_transaction_response_default_instance_;
constexpr get_head_info_request::get_head_info_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_head_info_requestDefaultTypeInternal {
  constexpr get_head_info_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_head_info_requestDefaultTypeInternal() {}
  union {
    get_head_info_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_head_info_requestDefaultTypeInternal _get_head_info_request_default_instance_;
constexpr get_head_info_response::get_head_info_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : head_state_merkle_root_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , head_topology_(nullptr)
  , last_irreversible_block_(uint64_t{0u})
  , head_block_time_(uint64_t{0u}){}
struct get_head_info_responseDefaultTypeInternal {
  constexpr get_head_info_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_head_info_responseDefaultTypeInternal() {}
  union {
    get_head_info_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_head_info_responseDefaultTypeInternal _get_head_info_response_default_instance_;
constexpr get_chain_id_request::get_chain_id_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_chain_id_requestDefaultTypeInternal {
  constexpr get_chain_id_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_chain_id_requestDefaultTypeInternal() {}
  union {
    get_chain_id_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_chain_id_requestDefaultTypeInternal _get_chain_id_request_default_instance_;
constexpr get_chain_id_response::get_chain_id_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_chain_id_responseDefaultTypeInternal {
  constexpr get_chain_id_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_chain_id_responseDefaultTypeInternal() {}
  union {
    get_chain_id_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_chain_id_responseDefaultTypeInternal _get_chain_id_response_default_instance_;
constexpr get_fork_heads_request::get_fork_heads_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_fork_heads_requestDefaultTypeInternal {
  constexpr get_fork_heads_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_fork_heads_requestDefaultTypeInternal() {}
  union {
    get_fork_heads_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_fork_heads_requestDefaultTypeInternal _get_fork_heads_request_default_instance_;
constexpr get_fork_heads_response::get_fork_heads_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fork_heads_()
  , last_irreversible_block_(nullptr){}
struct get_fork_heads_responseDefaultTypeInternal {
  constexpr get_fork_heads_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_fork_heads_responseDefaultTypeInternal() {}
  union {
    get_fork_heads_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_fork_heads_responseDefaultTypeInternal _get_fork_heads_response_default_instance_;
constexpr read_contract_request::read_contract_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contract_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , args_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entry_point_(0u){}
struct read_contract_requestDefaultTypeInternal {
  constexpr read_contract_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~read_contract_requestDefaultTypeInternal() {}
  union {
    read_contract_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT read_contract_requestDefaultTypeInternal _read_contract_request_default_instance_;
constexpr read_contract_response::read_contract_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : logs_()
  , result_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct read_contract_responseDefaultTypeInternal {
  constexpr read_contract_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~read_contract_responseDefaultTypeInternal() {}
  union {
    read_contract_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT read_contract_responseDefaultTypeInternal _read_contract_response_default_instance_;
constexpr get_account_nonce_request::get_account_nonce_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_account_nonce_requestDefaultTypeInternal {
  constexpr get_account_nonce_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_account_nonce_requestDefaultTypeInternal() {}
  union {
    get_account_nonce_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_account_nonce_requestDefaultTypeInternal _get_account_nonce_request_default_instance_;
constexpr get_account_nonce_response::get_account_nonce_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nonce_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_account_nonce_responseDefaultTypeInternal {
  constexpr get_account_nonce_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_account_nonce_responseDefaultTypeInternal() {}
  union {
    get_account_nonce_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_account_nonce_responseDefaultTypeInternal _get_account_nonce_response_default_instance_;
constexpr get_account_rc_request::get_account_rc_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_account_rc_requestDefaultTypeInternal {
  constexpr get_account_rc_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_account_rc_requestDefaultTypeInternal() {}
  union {
    get_account_rc_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_account_rc_requestDefaultTypeInternal _get_account_rc_request_default_instance_;
constexpr get_account_rc_response::get_account_rc_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rc_(uint64_t{0u}){}
struct get_account_rc_responseDefaultTypeInternal {
  constexpr get_account_rc_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_account_rc_responseDefaultTypeInternal() {}
  union {
    get_account_rc_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_account_rc_responseDefaultTypeInternal _get_account_rc_response_default_instance_;
constexpr get_resource_limits_request::get_resource_limits_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct get_resource_limits_requestDefaultTypeInternal {
  constexpr get_resource_limits_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_resource_limits_requestDefaultTypeInternal() {}
  union {
    get_resource_limits_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_resource_limits_requestDefaultTypeInternal _get_resource_limits_request_default_instance_;
constexpr get_resource_limits_response::get_resource_limits_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resource_limit_data_(nullptr){}
struct get_resource_limits_responseDefaultTypeInternal {
  constexpr get_resource_limits_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_resource_limits_responseDefaultTypeInternal() {}
  union {
    get_resource_limits_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_resource_limits_responseDefaultTypeInternal _get_resource_limits_response_default_instance_;
constexpr invoke_system_call_request::invoke_system_call_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , caller_data_(nullptr)
  , _oneof_case_{}{}
struct invoke_system_call_requestDefaultTypeInternal {
  constexpr invoke_system_call_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~invoke_system_call_requestDefaultTypeInternal() {}
  union {
    invoke_system_call_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT invoke_system_call_requestDefaultTypeInternal _invoke_system_call_request_default_instance_;
constexpr invoke_system_call_response::invoke_system_call_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct invoke_system_call_responseDefaultTypeInternal {
  constexpr invoke_system_call_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~invoke_system_call_responseDefaultTypeInternal() {}
  union {
    invoke_system_call_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT invoke_system_call_responseDefaultTypeInternal _invoke_system_call_response_default_instance_;
constexpr chain_request::chain_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct chain_requestDefaultTypeInternal {
  constexpr chain_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~chain_requestDefaultTypeInternal() {}
  union {
    chain_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT chain_requestDefaultTypeInternal _chain_request_default_instance_;
constexpr chain_response::chain_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct chain_responseDefaultTypeInternal {
  constexpr chain_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~chain_responseDefaultTypeInternal() {}
  union {
    chain_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT chain_responseDefaultTypeInternal _chain_response_default_instance_;
}  // namespace chain
}  // namespace rpc
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[22];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2frpc_2fchain_2fchain_5frpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2frpc_2fchain_2fchain_5frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_block_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_block_request, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_block_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_block_response, receipt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_transaction_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_transaction_request, transaction_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_transaction_request, broadcast_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_transaction_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_transaction_response, receipt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_head_info_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_head_info_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_head_info_response, head_topology_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_head_info_response, last_irreversible_block_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_head_info_response, head_state_merkle_root_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_head_info_response, head_block_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_chain_id_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_chain_id_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_chain_id_response, chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_fork_heads_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_fork_heads_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_fork_heads_response, last_irreversible_block_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_fork_heads_response, fork_heads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_request, contract_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_request, entry_point_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_request, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_response, result_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_response, logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_account_nonce_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_account_nonce_request, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_account_nonce_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_account_nonce_response, nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_account_rc_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_account_rc_request, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_account_rc_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_account_rc_response, rc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_resource_limits_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_resource_limits_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_resource_limits_response, resource_limit_data_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::invoke_system_call_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::invoke_system_call_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::invoke_system_call_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::invoke_system_call_request, args_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::invoke_system_call_request, caller_data_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::invoke_system_call_request, system_call_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::invoke_system_call_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::invoke_system_call_response, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::chain_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::chain_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::chain_request, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::chain_response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::chain_response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::chain_response, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::rpc::chain::submit_block_request)},
  { 6, -1, sizeof(::koinos::rpc::chain::submit_block_response)},
  { 12, -1, sizeof(::koinos::rpc::chain::submit_transaction_request)},
  { 19, -1, sizeof(::koinos::rpc::chain::submit_transaction_response)},
  { 25, -1, sizeof(::koinos::rpc::chain::get_head_info_request)},
  { 30, -1, sizeof(::koinos::rpc::chain::get_head_info_response)},
  { 39, -1, sizeof(::koinos::rpc::chain::get_chain_id_request)},
  { 44, -1, sizeof(::koinos::rpc::chain::get_chain_id_response)},
  { 50, -1, sizeof(::koinos::rpc::chain::get_fork_heads_request)},
  { 55, -1, sizeof(::koinos::rpc::chain::get_fork_heads_response)},
  { 62, -1, sizeof(::koinos::rpc::chain::read_contract_request)},
  { 70, -1, sizeof(::koinos::rpc::chain::read_contract_response)},
  { 77, -1, sizeof(::koinos::rpc::chain::get_account_nonce_request)},
  { 83, -1, sizeof(::koinos::rpc::chain::get_account_nonce_response)},
  { 89, -1, sizeof(::koinos::rpc::chain::get_account_rc_request)},
  { 95, -1, sizeof(::koinos::rpc::chain::get_account_rc_response)},
  { 101, -1, sizeof(::koinos::rpc::chain::get_resource_limits_request)},
  { 106, -1, sizeof(::koinos::rpc::chain::get_resource_limits_response)},
  { 112, 122, sizeof(::koinos::rpc::chain::invoke_system_call_request)},
  { 126, -1, sizeof(::koinos::rpc::chain::invoke_system_call_response)},
  { 132, -1, sizeof(::koinos::rpc::chain::chain_request)},
  { 149, -1, sizeof(::koinos::rpc::chain::chain_response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_submit_block_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_submit_block_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_submit_transaction_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_submit_transaction_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_head_info_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_head_info_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_chain_id_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_chain_id_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_fork_heads_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_fork_heads_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_read_contract_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_read_contract_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_account_nonce_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_account_nonce_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_account_rc_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_account_rc_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_resource_limits_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_resource_limits_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_invoke_system_call_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_invoke_system_call_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_chain_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_chain_response_default_instance_),
};

const char descriptor_table_protodef_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n koinos/rpc/chain/chain_rpc.proto\022\020koin"
  "os.rpc.chain\032\023koinos/common.proto\032\024koino"
  "s/options.proto\032\030koinos/chain/chain.prot"
  "o\032\036koinos/protocol/protocol.proto\032\024koino"
  "s/rpc/rpc.proto\"=\n\024submit_block_request\022"
  "%\n\005block\030\001 \001(\0132\026.koinos.protocol.block\"H"
  "\n\025submit_block_response\022/\n\007receipt\030\001 \001(\013"
  "2\036.koinos.protocol.block_receipt\"b\n\032subm"
  "it_transaction_request\0221\n\013transaction\030\001 "
  "\001(\0132\034.koinos.protocol.transaction\022\021\n\tbro"
  "adcast\030\002 \001(\010\"T\n\033submit_transaction_respo"
  "nse\0225\n\007receipt\030\001 \001(\0132$.koinos.protocol.t"
  "ransaction_receipt\"\027\n\025get_head_info_requ"
  "est\"\251\001\n\026get_head_info_response\022-\n\rhead_t"
  "opology\030\001 \001(\0132\026.koinos.block_topology\022#\n"
  "\027last_irreversible_block\030\002 \001(\004B\0020\001\022\036\n\026he"
  "ad_state_merkle_root\030\003 \001(\014\022\033\n\017head_block"
  "_time\030\004 \001(\004B\0020\001\"\026\n\024get_chain_id_request\""
  ")\n\025get_chain_id_response\022\020\n\010chain_id\030\001 \001"
  "(\014\"\030\n\026get_fork_heads_request\"~\n\027get_fork"
  "_heads_response\0227\n\027last_irreversible_blo"
  "ck\030\001 \001(\0132\026.koinos.block_topology\022*\n\nfork"
  "_heads\030\002 \003(\0132\026.koinos.block_topology\"U\n\025"
  "read_contract_request\022\031\n\013contract_id\030\001 \001"
  "(\014B\004\200\265\030\005\022\023\n\013entry_point\030\002 \001(\r\022\014\n\004args\030\003 "
  "\001(\014\"6\n\026read_contract_response\022\016\n\006result\030"
  "\001 \001(\014\022\014\n\004logs\030\002 \003(\t\"2\n\031get_account_nonce"
  "_request\022\025\n\007account\030\001 \001(\014B\004\200\265\030\006\"+\n\032get_a"
  "ccount_nonce_response\022\r\n\005nonce\030\001 \001(\014\"/\n\026"
  "get_account_rc_request\022\025\n\007account\030\001 \001(\014B"
  "\004\200\265\030\006\")\n\027get_account_rc_response\022\016\n\002rc\030\001"
  " \001(\004B\0020\001\"\035\n\033get_resource_limits_request\""
  "^\n\034get_resource_limits_response\022>\n\023resou"
  "rce_limit_data\030\001 \001(\0132!.koinos.chain.reso"
  "urce_limit_data\"\234\001\n\032invoke_system_call_r"
  "equest\022\014\n\002id\030\001 \001(\003H\000\022\016\n\004name\030\002 \001(\tH\000\022\014\n\004"
  "args\030\003 \001(\014\0223\n\013caller_data\030\004 \001(\0132\031.koinos"
  ".chain.caller_dataH\001\210\001\001B\r\n\013system_callB\016"
  "\n\014_caller_data\",\n\033invoke_system_call_res"
  "ponse\022\r\n\005value\030\001 \001(\014\"\204\006\n\rchain_request\022,"
  "\n\010reserved\030\001 \001(\0132\030.koinos.rpc.reserved_r"
  "pcH\000\022>\n\014submit_block\030\002 \001(\0132&.koinos.rpc."
  "chain.submit_block_requestH\000\022J\n\022submit_t"
  "ransaction\030\003 \001(\0132,.koinos.rpc.chain.subm"
  "it_transaction_requestH\000\022@\n\rget_head_inf"
  "o\030\004 \001(\0132\'.koinos.rpc.chain.get_head_info"
  "_requestH\000\022>\n\014get_chain_id\030\005 \001(\0132&.koino"
  "s.rpc.chain.get_chain_id_requestH\000\022B\n\016ge"
  "t_fork_heads\030\006 \001(\0132(.koinos.rpc.chain.ge"
  "t_fork_heads_requestH\000\022@\n\rread_contract\030"
  "\007 \001(\0132\'.koinos.rpc.chain.read_contract_r"
  "equestH\000\022H\n\021get_account_nonce\030\010 \001(\0132+.ko"
  "inos.rpc.chain.get_account_nonce_request"
  "H\000\022B\n\016get_account_rc\030\t \001(\0132(.koinos.rpc."
  "chain.get_account_rc_requestH\000\022L\n\023get_re"
  "source_limits\030\n \001(\0132-.koinos.rpc.chain.g"
  "et_resource_limits_requestH\000\022J\n\022invoke_s"
  "ystem_call\030\013 \001(\0132,.koinos.rpc.chain.invo"
  "ke_system_call_requestH\000B\t\n\007request\"\273\006\n\016"
  "chain_response\022,\n\010reserved\030\001 \001(\0132\030.koino"
  "s.rpc.reserved_rpcH\000\022)\n\005error\030\002 \001(\0132\030.ko"
  "inos.rpc.error_statusH\000\022\?\n\014submit_block\030"
  "\003 \001(\0132\'.koinos.rpc.chain.submit_block_re"
  "sponseH\000\022K\n\022submit_transaction\030\004 \001(\0132-.k"
  "oinos.rpc.chain.submit_transaction_respo"
  "nseH\000\022A\n\rget_head_info\030\005 \001(\0132(.koinos.rp"
  "c.chain.get_head_info_responseH\000\022\?\n\014get_"
  "chain_id\030\006 \001(\0132\'.koinos.rpc.chain.get_ch"
  "ain_id_responseH\000\022C\n\016get_fork_heads\030\007 \001("
  "\0132).koinos.rpc.chain.get_fork_heads_resp"
  "onseH\000\022A\n\rread_contract\030\010 \001(\0132(.koinos.r"
  "pc.chain.read_contract_responseH\000\022I\n\021get"
  "_account_nonce\030\t \001(\0132,.koinos.rpc.chain."
  "get_account_nonce_responseH\000\022C\n\016get_acco"
  "unt_rc\030\n \001(\0132).koinos.rpc.chain.get_acco"
  "unt_rc_responseH\000\022M\n\023get_resource_limits"
  "\030\013 \001(\0132..koinos.rpc.chain.get_resource_l"
  "imits_responseH\000\022K\n\022invoke_system_call\030\014"
  " \001(\0132-.koinos.rpc.chain.invoke_system_ca"
  "ll_responseH\000B\n\n\010responseB8Z6github.com/"
  "koinos/koinos-proto-golang/koinos/rpc/ch"
  "ainb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_deps[5] = {
  &::descriptor_table_koinos_2fchain_2fchain_2eproto,
  &::descriptor_table_koinos_2fcommon_2eproto,
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto,
  &::descriptor_table_koinos_2frpc_2frpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto = {
  false, false, 3251, descriptor_table_protodef_koinos_2frpc_2fchain_2fchain_5frpc_2eproto, "koinos/rpc/chain/chain_rpc.proto", 
  &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once, descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_deps, 5, 22,
  schemas, file_default_instances, TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto::offsets,
  file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto, file_level_enum_descriptors_koinos_2frpc_2fchain_2fchain_5frpc_2eproto, file_level_service_descriptors_koinos_2frpc_2fchain_2fchain_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter() {
  return &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2frpc_2fchain_2fchain_5frpc_2eproto(&descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto);
namespace koinos {
namespace rpc {
namespace chain {

// ===================================================================

class submit_block_request::_Internal {
 public:
  static const ::koinos::protocol::block& block(const submit_block_request* msg);
};

const ::koinos::protocol::block&
submit_block_request::_Internal::block(const submit_block_request* msg) {
  return *msg->block_;
}
void submit_block_request::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
submit_block_request::submit_block_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.submit_block_request)
}
submit_block_request::submit_block_request(const submit_block_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::koinos::protocol::block(*from.block_);
  } else {
    block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.submit_block_request)
}

inline void submit_block_request::SharedCtor() {
block_ = nullptr;
}

submit_block_request::~submit_block_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.submit_block_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void submit_block_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void submit_block_request::ArenaDtor(void* object) {
  submit_block_request* _this = reinterpret_cast< submit_block_request* >(object);
  (void)_this;
}
void submit_block_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void submit_block_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void submit_block_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.submit_block_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* submit_block_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* submit_block_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.submit_block_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.block block = 1;
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.submit_block_request)
  return target;
}

size_t submit_block_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.submit_block_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.block block = 1;
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData submit_block_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    submit_block_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*submit_block_request::GetClassData() const { return &_class_data_; }

void submit_block_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<submit_block_request *>(to)->MergeFrom(
      static_cast<const submit_block_request &>(from));
}


void submit_block_request::MergeFrom(const submit_block_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.submit_block_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::koinos::protocol::block::MergeFrom(from._internal_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void submit_block_request::CopyFrom(const submit_block_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.submit_block_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool submit_block_request::IsInitialized() const {
  return true;
}

void submit_block_request::InternalSwap(submit_block_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(block_, other->block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata submit_block_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[0]);
}

// ===================================================================

class submit_block_response::_Internal {
 public:
  static const ::koinos::protocol::block_receipt& receipt(const submit_block_response* msg);
};

const ::koinos::protocol::block_receipt&
submit_block_response::_Internal::receipt(const submit_block_response* msg) {
  return *msg->receipt_;
}
void submit_block_response::clear_receipt() {
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
}
submit_block_response::submit_block_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.submit_block_response)
}
submit_block_response::submit_block_response(const submit_block_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_receipt()) {
    receipt_ = new ::koinos::protocol::block_receipt(*from.receipt_);
  } else {
    receipt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.submit_block_response)
}

inline void submit_block_response::SharedCtor() {
receipt_ = nullptr;
}

submit_block_response::~submit_block_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.submit_block_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void submit_block_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete receipt_;
}

void submit_block_response::ArenaDtor(void* object) {
  submit_block_response* _this = reinterpret_cast< submit_block_response* >(object);
  (void)_this;
}
void submit_block_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void submit_block_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void submit_block_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.submit_block_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* submit_block_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.block_receipt receipt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* submit_block_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.submit_block_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.block_receipt receipt = 1;
  if (this->_internal_has_receipt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::receipt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.submit_block_response)
  return target;
}

size_t submit_block_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.submit_block_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.block_receipt receipt = 1;
  if (this->_internal_has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData submit_block_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    submit_block_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*submit_block_response::GetClassData() const { return &_class_data_; }

void submit_block_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<submit_block_response *>(to)->MergeFrom(
      static_cast<const submit_block_response &>(from));
}


void submit_block_response::MergeFrom(const submit_block_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.submit_block_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_receipt()) {
    _internal_mutable_receipt()->::koinos::protocol::block_receipt::MergeFrom(from._internal_receipt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void submit_block_response::CopyFrom(const submit_block_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.submit_block_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool submit_block_response::IsInitialized() const {
  return true;
}

void submit_block_response::InternalSwap(submit_block_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(receipt_, other->receipt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata submit_block_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[1]);
}

// ===================================================================

class submit_transaction_request::_Internal {
 public:
  static const ::koinos::protocol::transaction& transaction(const submit_transaction_request* msg);
};

const ::koinos::protocol::transaction&
submit_transaction_request::_Internal::transaction(const submit_transaction_request* msg) {
  return *msg->transaction_;
}
void submit_transaction_request::clear_transaction() {
  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
submit_transaction_request::submit_transaction_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.submit_transaction_request)
}
submit_transaction_request::submit_transaction_request(const submit_transaction_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::koinos::protocol::transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  broadcast_ = from.broadcast_;
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.submit_transaction_request)
}

inline void submit_transaction_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&broadcast_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(broadcast_));
}

submit_transaction_request::~submit_transaction_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.submit_transaction_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void submit_transaction_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void submit_transaction_request::ArenaDtor(void* object) {
  submit_transaction_request* _this = reinterpret_cast< submit_transaction_request* >(object);
  (void)_this;
}
void submit_transaction_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void submit_transaction_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void submit_transaction_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.submit_transaction_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  broadcast_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* submit_transaction_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool broadcast = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* submit_transaction_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.submit_transaction_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // bool broadcast = 2;
  if (this->_internal_broadcast() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_broadcast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.submit_transaction_request)
  return target;
}

size_t submit_transaction_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.submit_transaction_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // bool broadcast = 2;
  if (this->_internal_broadcast() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData submit_transaction_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    submit_transaction_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*submit_transaction_request::GetClassData() const { return &_class_data_; }

void submit_transaction_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<submit_transaction_request *>(to)->MergeFrom(
      static_cast<const submit_transaction_request &>(from));
}


void submit_transaction_request::MergeFrom(const submit_transaction_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.submit_transaction_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::koinos::protocol::transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_broadcast() != 0) {
    _internal_set_broadcast(from._internal_broadcast());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void submit_transaction_request::CopyFrom(const submit_transaction_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.submit_transaction_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool submit_transaction_request::IsInitialized() const {
  return true;
}

void submit_transaction_request::InternalSwap(submit_transaction_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(submit_transaction_request, broadcast_)
      + sizeof(submit_transaction_request::broadcast_)
      - PROTOBUF_FIELD_OFFSET(submit_transaction_request, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata submit_transaction_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[2]);
}

// ===================================================================

class submit_transaction_response::_Internal {
 public:
  static const ::koinos::protocol::transaction_receipt& receipt(const submit_transaction_response* msg);
};

const ::koinos::protocol::transaction_receipt&
submit_transaction_response::_Internal::receipt(const submit_transaction_response* msg) {
  return *msg->receipt_;
}
void submit_transaction_response::clear_receipt() {
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
}
submit_transaction_response::submit_transaction_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.submit_transaction_response)
}
submit_transaction_response::submit_transaction_response(const submit_transaction_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_receipt()) {
    receipt_ = new ::koinos::protocol::transaction_receipt(*from.receipt_);
  } else {
    receipt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.submit_transaction_response)
}

inline void submit_transaction_response::SharedCtor() {
receipt_ = nullptr;
}

submit_transaction_response::~submit_transaction_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.submit_transaction_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void submit_transaction_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete receipt_;
}

void submit_transaction_response::ArenaDtor(void* object) {
  submit_transaction_response* _this = reinterpret_cast< submit_transaction_response* >(object);
  (void)_this;
}
void submit_transaction_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void submit_transaction_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void submit_transaction_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.submit_transaction_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* submit_transaction_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.transaction_receipt receipt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_receipt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* submit_transaction_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.submit_transaction_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction_receipt receipt = 1;
  if (this->_internal_has_receipt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::receipt(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.submit_transaction_response)
  return target;
}

size_t submit_transaction_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.submit_transaction_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction_receipt receipt = 1;
  if (this->_internal_has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData submit_transaction_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    submit_transaction_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*submit_transaction_response::GetClassData() const { return &_class_data_; }

void submit_transaction_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<submit_transaction_response *>(to)->MergeFrom(
      static_cast<const submit_transaction_response &>(from));
}


void submit_transaction_response::MergeFrom(const submit_transaction_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.submit_transaction_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_receipt()) {
    _internal_mutable_receipt()->::koinos::protocol::transaction_receipt::MergeFrom(from._internal_receipt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void submit_transaction_response::CopyFrom(const submit_transaction_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.submit_transaction_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool submit_transaction_response::IsInitialized() const {
  return true;
}

void submit_transaction_response::InternalSwap(submit_transaction_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(receipt_, other->receipt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata submit_transaction_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[3]);
}

// ===================================================================

class get_head_info_request::_Internal {
 public:
};

get_head_info_request::get_head_info_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_head_info_request)
}
get_head_info_request::get_head_info_request(const get_head_info_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_head_info_request)
}

inline void get_head_info_request::SharedCtor() {
}

get_head_info_request::~get_head_info_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_head_info_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_head_info_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_head_info_request::ArenaDtor(void* object) {
  get_head_info_request* _this = reinterpret_cast< get_head_info_request* >(object);
  (void)_this;
}
void get_head_info_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_head_info_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_head_info_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_head_info_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_head_info_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_head_info_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_head_info_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_head_info_request)
  return target;
}

size_t get_head_info_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_head_info_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_head_info_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_head_info_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_head_info_request::GetClassData() const { return &_class_data_; }

void get_head_info_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_head_info_request *>(to)->MergeFrom(
      static_cast<const get_head_info_request &>(from));
}


void get_head_info_request::MergeFrom(const get_head_info_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_head_info_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_head_info_request::CopyFrom(const get_head_info_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_head_info_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_head_info_request::IsInitialized() const {
  return true;
}

void get_head_info_request::InternalSwap(get_head_info_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_head_info_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[4]);
}

// ===================================================================

class get_head_info_response::_Internal {
 public:
  static const ::koinos::block_topology& head_topology(const get_head_info_response* msg);
};

const ::koinos::block_topology&
get_head_info_response::_Internal::head_topology(const get_head_info_response* msg) {
  return *msg->head_topology_;
}
void get_head_info_response::clear_head_topology() {
  if (GetArenaForAllocation() == nullptr && head_topology_ != nullptr) {
    delete head_topology_;
  }
  head_topology_ = nullptr;
}
get_head_info_response::get_head_info_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_head_info_response)
}
get_head_info_response::get_head_info_response(const get_head_info_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  head_state_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_head_state_merkle_root().empty()) {
    head_state_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_head_state_merkle_root(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head_topology()) {
    head_topology_ = new ::koinos::block_topology(*from.head_topology_);
  } else {
    head_topology_ = nullptr;
  }
  ::memcpy(&last_irreversible_block_, &from.last_irreversible_block_,
    static_cast<size_t>(reinterpret_cast<char*>(&head_block_time_) -
    reinterpret_cast<char*>(&last_irreversible_block_)) + sizeof(head_block_time_));
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_head_info_response)
}

inline void get_head_info_response::SharedCtor() {
head_state_merkle_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_topology_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&head_block_time_) -
    reinterpret_cast<char*>(&head_topology_)) + sizeof(head_block_time_));
}

get_head_info_response::~get_head_info_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_head_info_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_head_info_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  head_state_merkle_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete head_topology_;
}

void get_head_info_response::ArenaDtor(void* object) {
  get_head_info_response* _this = reinterpret_cast< get_head_info_response* >(object);
  (void)_this;
}
void get_head_info_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_head_info_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_head_info_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_head_info_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  head_state_merkle_root_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_topology_ != nullptr) {
    delete head_topology_;
  }
  head_topology_ = nullptr;
  ::memset(&last_irreversible_block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_block_time_) -
      reinterpret_cast<char*>(&last_irreversible_block_)) + sizeof(head_block_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_head_info_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.block_topology head_topology = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_topology(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_irreversible_block = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_irreversible_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes head_state_merkle_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_head_state_merkle_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 head_block_time = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          head_block_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_head_info_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_head_info_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.block_topology head_topology = 1;
  if (this->_internal_has_head_topology()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::head_topology(this), target, stream);
  }

  // uint64 last_irreversible_block = 2 [jstype = JS_STRING];
  if (this->_internal_last_irreversible_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_last_irreversible_block(), target);
  }

  // bytes head_state_merkle_root = 3;
  if (!this->_internal_head_state_merkle_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_head_state_merkle_root(), target);
  }

  // uint64 head_block_time = 4 [jstype = JS_STRING];
  if (this->_internal_head_block_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_head_block_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_head_info_response)
  return target;
}

size_t get_head_info_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_head_info_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes head_state_merkle_root = 3;
  if (!this->_internal_head_state_merkle_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_head_state_merkle_root());
  }

  // .koinos.block_topology head_topology = 1;
  if (this->_internal_has_head_topology()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_topology_);
  }

  // uint64 last_irreversible_block = 2 [jstype = JS_STRING];
  if (this->_internal_last_irreversible_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_irreversible_block());
  }

  // uint64 head_block_time = 4 [jstype = JS_STRING];
  if (this->_internal_head_block_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_head_block_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_head_info_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_head_info_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_head_info_response::GetClassData() const { return &_class_data_; }

void get_head_info_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_head_info_response *>(to)->MergeFrom(
      static_cast<const get_head_info_response &>(from));
}


void get_head_info_response::MergeFrom(const get_head_info_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_head_info_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_head_state_merkle_root().empty()) {
    _internal_set_head_state_merkle_root(from._internal_head_state_merkle_root());
  }
  if (from._internal_has_head_topology()) {
    _internal_mutable_head_topology()->::koinos::block_topology::MergeFrom(from._internal_head_topology());
  }
  if (from._internal_last_irreversible_block() != 0) {
    _internal_set_last_irreversible_block(from._internal_last_irreversible_block());
  }
  if (from._internal_head_block_time() != 0) {
    _internal_set_head_block_time(from._internal_head_block_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_head_info_response::CopyFrom(const get_head_info_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_head_info_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_head_info_response::IsInitialized() const {
  return true;
}

void get_head_info_response::InternalSwap(get_head_info_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &head_state_merkle_root_, GetArenaForAllocation(),
      &other->head_state_merkle_root_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(get_head_info_response, head_block_time_)
      + sizeof(get_head_info_response::head_block_time_)
      - PROTOBUF_FIELD_OFFSET(get_head_info_response, head_topology_)>(
          reinterpret_cast<char*>(&head_topology_),
          reinterpret_cast<char*>(&other->head_topology_));
}

::PROTOBUF_NAMESPACE_ID::Metadata get_head_info_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[5]);
}

// ===================================================================

class get_chain_id_request::_Internal {
 public:
};

get_chain_id_request::get_chain_id_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_chain_id_request)
}
get_chain_id_request::get_chain_id_request(const get_chain_id_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_chain_id_request)
}

inline void get_chain_id_request::SharedCtor() {
}

get_chain_id_request::~get_chain_id_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_chain_id_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_chain_id_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_chain_id_request::ArenaDtor(void* object) {
  get_chain_id_request* _this = reinterpret_cast< get_chain_id_request* >(object);
  (void)_this;
}
void get_chain_id_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_chain_id_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_chain_id_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_chain_id_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_chain_id_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_chain_id_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_chain_id_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_chain_id_request)
  return target;
}

size_t get_chain_id_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_chain_id_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_chain_id_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_chain_id_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_chain_id_request::GetClassData() const { return &_class_data_; }

void get_chain_id_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_chain_id_request *>(to)->MergeFrom(
      static_cast<const get_chain_id_request &>(from));
}


void get_chain_id_request::MergeFrom(const get_chain_id_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_chain_id_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_chain_id_request::CopyFrom(const get_chain_id_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_chain_id_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_chain_id_request::IsInitialized() const {
  return true;
}

void get_chain_id_request::InternalSwap(get_chain_id_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_chain_id_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[6]);
}

// ===================================================================

class get_chain_id_response::_Internal {
 public:
};

get_chain_id_response::get_chain_id_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_chain_id_response)
}
get_chain_id_response::get_chain_id_response(const get_chain_id_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_chain_id_response)
}

inline void get_chain_id_response::SharedCtor() {
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_chain_id_response::~get_chain_id_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_chain_id_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_chain_id_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_chain_id_response::ArenaDtor(void* object) {
  get_chain_id_response* _this = reinterpret_cast< get_chain_id_response* >(object);
  (void)_this;
}
void get_chain_id_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_chain_id_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_chain_id_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_chain_id_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_chain_id_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_chain_id_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_chain_id_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (!this->_internal_chain_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_chain_id_response)
  return target;
}

size_t get_chain_id_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_chain_id_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_chain_id_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_chain_id_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_chain_id_response::GetClassData() const { return &_class_data_; }

void get_chain_id_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_chain_id_response *>(to)->MergeFrom(
      static_cast<const get_chain_id_response &>(from));
}


void get_chain_id_response::MergeFrom(const get_chain_id_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_chain_id_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_chain_id_response::CopyFrom(const get_chain_id_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_chain_id_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_chain_id_response::IsInitialized() const {
  return true;
}

void get_chain_id_response::InternalSwap(get_chain_id_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, GetArenaForAllocation(),
      &other->chain_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_chain_id_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[7]);
}

// ===================================================================

class get_fork_heads_request::_Internal {
 public:
};

get_fork_heads_request::get_fork_heads_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_fork_heads_request)
}
get_fork_heads_request::get_fork_heads_request(const get_fork_heads_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_fork_heads_request)
}

inline void get_fork_heads_request::SharedCtor() {
}

get_fork_heads_request::~get_fork_heads_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_fork_heads_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_fork_heads_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_fork_heads_request::ArenaDtor(void* object) {
  get_fork_heads_request* _this = reinterpret_cast< get_fork_heads_request* >(object);
  (void)_this;
}
void get_fork_heads_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_fork_heads_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_fork_heads_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_fork_heads_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_fork_heads_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_fork_heads_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_fork_heads_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_fork_heads_request)
  return target;
}

size_t get_fork_heads_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_fork_heads_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_fork_heads_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_fork_heads_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_fork_heads_request::GetClassData() const { return &_class_data_; }

void get_fork_heads_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_fork_heads_request *>(to)->MergeFrom(
      static_cast<const get_fork_heads_request &>(from));
}


void get_fork_heads_request::MergeFrom(const get_fork_heads_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_fork_heads_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_fork_heads_request::CopyFrom(const get_fork_heads_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_fork_heads_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_fork_heads_request::IsInitialized() const {
  return true;
}

void get_fork_heads_request::InternalSwap(get_fork_heads_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_fork_heads_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[8]);
}

// ===================================================================

class get_fork_heads_response::_Internal {
 public:
  static const ::koinos::block_topology& last_irreversible_block(const get_fork_heads_response* msg);
};

const ::koinos::block_topology&
get_fork_heads_response::_Internal::last_irreversible_block(const get_fork_heads_response* msg) {
  return *msg->last_irreversible_block_;
}
void get_fork_heads_response::clear_last_irreversible_block() {
  if (GetArenaForAllocation() == nullptr && last_irreversible_block_ != nullptr) {
    delete last_irreversible_block_;
  }
  last_irreversible_block_ = nullptr;
}
void get_fork_heads_response::clear_fork_heads() {
  fork_heads_.Clear();
}
get_fork_heads_response::get_fork_heads_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fork_heads_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_fork_heads_response)
}
get_fork_heads_response::get_fork_heads_response(const get_fork_heads_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fork_heads_(from.fork_heads_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_irreversible_block()) {
    last_irreversible_block_ = new ::koinos::block_topology(*from.last_irreversible_block_);
  } else {
    last_irreversible_block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_fork_heads_response)
}

inline void get_fork_heads_response::SharedCtor() {
last_irreversible_block_ = nullptr;
}

get_fork_heads_response::~get_fork_heads_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_fork_heads_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_fork_heads_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete last_irreversible_block_;
}

void get_fork_heads_response::ArenaDtor(void* object) {
  get_fork_heads_response* _this = reinterpret_cast< get_fork_heads_response* >(object);
  (void)_this;
}
void get_fork_heads_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_fork_heads_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_fork_heads_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_fork_heads_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fork_heads_.Clear();
  if (GetArenaForAllocation() == nullptr && last_irreversible_block_ != nullptr) {
    delete last_irreversible_block_;
  }
  last_irreversible_block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_fork_heads_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.block_topology last_irreversible_block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_irreversible_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .koinos.block_topology fork_heads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fork_heads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_fork_heads_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_fork_heads_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.block_topology last_irreversible_block = 1;
  if (this->_internal_has_last_irreversible_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::last_irreversible_block(this), target, stream);
  }

  // repeated .koinos.block_topology fork_heads = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fork_heads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fork_heads(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_fork_heads_response)
  return target;
}

size_t get_fork_heads_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_fork_heads_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.block_topology fork_heads = 2;
  total_size += 1UL * this->_internal_fork_heads_size();
  for (const auto& msg : this->fork_heads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .koinos.block_topology last_irreversible_block = 1;
  if (this->_internal_has_last_irreversible_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_irreversible_block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_fork_heads_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_fork_heads_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_fork_heads_response::GetClassData() const { return &_class_data_; }

void get_fork_heads_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_fork_heads_response *>(to)->MergeFrom(
      static_cast<const get_fork_heads_response &>(from));
}


void get_fork_heads_response::MergeFrom(const get_fork_heads_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_fork_heads_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fork_heads_.MergeFrom(from.fork_heads_);
  if (from._internal_has_last_irreversible_block()) {
    _internal_mutable_last_irreversible_block()->::koinos::block_topology::MergeFrom(from._internal_last_irreversible_block());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_fork_heads_response::CopyFrom(const get_fork_heads_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_fork_heads_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_fork_heads_response::IsInitialized() const {
  return true;
}

void get_fork_heads_response::InternalSwap(get_fork_heads_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fork_heads_.InternalSwap(&other->fork_heads_);
  swap(last_irreversible_block_, other->last_irreversible_block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_fork_heads_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[9]);
}

// ===================================================================

class read_contract_request::_Internal {
 public:
};

read_contract_request::read_contract_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.read_contract_request)
}
read_contract_request::read_contract_request(const read_contract_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_id(), 
      GetArenaForAllocation());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArenaForAllocation());
  }
  entry_point_ = from.entry_point_;
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.read_contract_request)
}

inline void read_contract_request::SharedCtor() {
contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
entry_point_ = 0u;
}

read_contract_request::~read_contract_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.read_contract_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void read_contract_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void read_contract_request::ArenaDtor(void* object) {
  read_contract_request* _this = reinterpret_cast< read_contract_request* >(object);
  (void)_this;
}
void read_contract_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void read_contract_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void read_contract_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.read_contract_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty();
  args_.ClearToEmpty();
  entry_point_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* read_contract_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 entry_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entry_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* read_contract_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.read_contract_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // uint32 entry_point = 2;
  if (this->_internal_entry_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entry_point(), target);
  }

  // bytes args = 3;
  if (!this->_internal_args().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.read_contract_request)
  return target;
}

size_t read_contract_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.read_contract_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contract_id = 1 [(.koinos.btype) = CONTRACT_ID];
  if (!this->_internal_contract_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_id());
  }

  // bytes args = 3;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // uint32 entry_point = 2;
  if (this->_internal_entry_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entry_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData read_contract_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    read_contract_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*read_contract_request::GetClassData() const { return &_class_data_; }

void read_contract_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<read_contract_request *>(to)->MergeFrom(
      static_cast<const read_contract_request &>(from));
}


void read_contract_request::MergeFrom(const read_contract_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.read_contract_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract_id().empty()) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (!from._internal_args().empty()) {
    _internal_set_args(from._internal_args());
  }
  if (from._internal_entry_point() != 0) {
    _internal_set_entry_point(from._internal_entry_point());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void read_contract_request::CopyFrom(const read_contract_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.read_contract_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool read_contract_request::IsInitialized() const {
  return true;
}

void read_contract_request::InternalSwap(read_contract_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contract_id_, GetArenaForAllocation(),
      &other->contract_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &args_, GetArenaForAllocation(),
      &other->args_, other->GetArenaForAllocation()
  );
  swap(entry_point_, other->entry_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata read_contract_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[10]);
}

// ===================================================================

class read_contract_response::_Internal {
 public:
};

read_contract_response::read_contract_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  logs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.read_contract_response)
}
read_contract_response::read_contract_response(const read_contract_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.read_contract_response)
}

inline void read_contract_response::SharedCtor() {
result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

read_contract_response::~read_contract_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.read_contract_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void read_contract_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void read_contract_response::ArenaDtor(void* object) {
  read_contract_response* _this = reinterpret_cast< read_contract_response* >(object);
  (void)_this;
}
void read_contract_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void read_contract_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void read_contract_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.read_contract_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* read_contract_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_logs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.rpc.chain.read_contract_response.logs"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* read_contract_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.read_contract_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_result(), target);
  }

  // repeated string logs = 2;
  for (int i = 0, n = this->_internal_logs_size(); i < n; i++) {
    const auto& s = this->_internal_logs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.rpc.chain.read_contract_response.logs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.read_contract_response)
  return target;
}

size_t read_contract_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.read_contract_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string logs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(logs_.size());
  for (int i = 0, n = logs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      logs_.Get(i));
  }

  // bytes result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData read_contract_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    read_contract_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*read_contract_response::GetClassData() const { return &_class_data_; }

void read_contract_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<read_contract_response *>(to)->MergeFrom(
      static_cast<const read_contract_response &>(from));
}


void read_contract_response::MergeFrom(const read_contract_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.read_contract_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (!from._internal_result().empty()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void read_contract_response::CopyFrom(const read_contract_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.read_contract_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool read_contract_response::IsInitialized() const {
  return true;
}

void read_contract_response::InternalSwap(read_contract_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  logs_.InternalSwap(&other->logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &result_, GetArenaForAllocation(),
      &other->result_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata read_contract_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[11]);
}

// ===================================================================

class get_account_nonce_request::_Internal {
 public:
};

get_account_nonce_request::get_account_nonce_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_account_nonce_request)
}
get_account_nonce_request::get_account_nonce_request(const get_account_nonce_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_account_nonce_request)
}

inline void get_account_nonce_request::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_account_nonce_request::~get_account_nonce_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_account_nonce_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_account_nonce_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_account_nonce_request::ArenaDtor(void* object) {
  get_account_nonce_request* _this = reinterpret_cast< get_account_nonce_request* >(object);
  (void)_this;
}
void get_account_nonce_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_nonce_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_account_nonce_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_account_nonce_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_nonce_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_nonce_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_account_nonce_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_account_nonce_request)
  return target;
}

size_t get_account_nonce_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_account_nonce_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_account_nonce_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_account_nonce_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_account_nonce_request::GetClassData() const { return &_class_data_; }

void get_account_nonce_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_account_nonce_request *>(to)->MergeFrom(
      static_cast<const get_account_nonce_request &>(from));
}


void get_account_nonce_request::MergeFrom(const get_account_nonce_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_account_nonce_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_account_nonce_request::CopyFrom(const get_account_nonce_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_account_nonce_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_nonce_request::IsInitialized() const {
  return true;
}

void get_account_nonce_request::InternalSwap(get_account_nonce_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_nonce_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[12]);
}

// ===================================================================

class get_account_nonce_response::_Internal {
 public:
};

get_account_nonce_response::get_account_nonce_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_account_nonce_response)
}
get_account_nonce_response::get_account_nonce_response(const get_account_nonce_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nonce(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_account_nonce_response)
}

inline void get_account_nonce_response::SharedCtor() {
nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_account_nonce_response::~get_account_nonce_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_account_nonce_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_account_nonce_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_account_nonce_response::ArenaDtor(void* object) {
  get_account_nonce_response* _this = reinterpret_cast< get_account_nonce_response* >(object);
  (void)_this;
}
void get_account_nonce_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_nonce_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_account_nonce_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_account_nonce_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_nonce_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_nonce_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_account_nonce_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (!this->_internal_nonce().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_account_nonce_response)
  return target;
}

size_t get_account_nonce_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_account_nonce_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_account_nonce_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_account_nonce_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_account_nonce_response::GetClassData() const { return &_class_data_; }

void get_account_nonce_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_account_nonce_response *>(to)->MergeFrom(
      static_cast<const get_account_nonce_response &>(from));
}


void get_account_nonce_response::MergeFrom(const get_account_nonce_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_account_nonce_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nonce().empty()) {
    _internal_set_nonce(from._internal_nonce());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_account_nonce_response::CopyFrom(const get_account_nonce_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_account_nonce_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_nonce_response::IsInitialized() const {
  return true;
}

void get_account_nonce_response::InternalSwap(get_account_nonce_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nonce_, GetArenaForAllocation(),
      &other->nonce_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_nonce_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[13]);
}

// ===================================================================

class get_account_rc_request::_Internal {
 public:
};

get_account_rc_request::get_account_rc_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_account_rc_request)
}
get_account_rc_request::get_account_rc_request(const get_account_rc_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_account_rc_request)
}

inline void get_account_rc_request::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_account_rc_request::~get_account_rc_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_account_rc_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_account_rc_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_account_rc_request::ArenaDtor(void* object) {
  get_account_rc_request* _this = reinterpret_cast< get_account_rc_request* >(object);
  (void)_this;
}
void get_account_rc_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_rc_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_account_rc_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_account_rc_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_rc_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_rc_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_account_rc_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_account_rc_request)
  return target;
}

size_t get_account_rc_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_account_rc_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_account_rc_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_account_rc_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_account_rc_request::GetClassData() const { return &_class_data_; }

void get_account_rc_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_account_rc_request *>(to)->MergeFrom(
      static_cast<const get_account_rc_request &>(from));
}


void get_account_rc_request::MergeFrom(const get_account_rc_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_account_rc_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_account_rc_request::CopyFrom(const get_account_rc_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_account_rc_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_rc_request::IsInitialized() const {
  return true;
}

void get_account_rc_request::InternalSwap(get_account_rc_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_rc_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[14]);
}

// ===================================================================

class get_account_rc_response::_Internal {
 public:
};

get_account_rc_response::get_account_rc_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_account_rc_response)
}
get_account_rc_response::get_account_rc_response(const get_account_rc_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rc_ = from.rc_;
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_account_rc_response)
}

inline void get_account_rc_response::SharedCtor() {
rc_ = uint64_t{0u};
}

get_account_rc_response::~get_account_rc_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_account_rc_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_account_rc_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_account_rc_response::ArenaDtor(void* object) {
  get_account_rc_response* _this = reinterpret_cast< get_account_rc_response* >(object);
  (void)_this;
}
void get_account_rc_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_rc_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_account_rc_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_account_rc_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rc_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_rc_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 rc = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_rc_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_account_rc_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rc = 1 [jstype = JS_STRING];
  if (this->_internal_rc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_account_rc_response)
  return target;
}

size_t get_account_rc_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_account_rc_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 rc = 1 [jstype = JS_STRING];
  if (this->_internal_rc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_rc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_account_rc_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_account_rc_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_account_rc_response::GetClassData() const { return &_class_data_; }

void get_account_rc_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_account_rc_response *>(to)->MergeFrom(
      static_cast<const get_account_rc_response &>(from));
}


void get_account_rc_response::MergeFrom(const get_account_rc_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_account_rc_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rc() != 0) {
    _internal_set_rc(from._internal_rc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_account_rc_response::CopyFrom(const get_account_rc_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_account_rc_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_rc_response::IsInitialized() const {
  return true;
}

void get_account_rc_response::InternalSwap(get_account_rc_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(rc_, other->rc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_rc_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[15]);
}

// ===================================================================

class get_resource_limits_request::_Internal {
 public:
};

get_resource_limits_request::get_resource_limits_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_resource_limits_request)
}
get_resource_limits_request::get_resource_limits_request(const get_resource_limits_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_resource_limits_request)
}

inline void get_resource_limits_request::SharedCtor() {
}

get_resource_limits_request::~get_resource_limits_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_resource_limits_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_resource_limits_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_resource_limits_request::ArenaDtor(void* object) {
  get_resource_limits_request* _this = reinterpret_cast< get_resource_limits_request* >(object);
  (void)_this;
}
void get_resource_limits_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_resource_limits_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_resource_limits_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_resource_limits_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_resource_limits_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_resource_limits_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_resource_limits_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_resource_limits_request)
  return target;
}

size_t get_resource_limits_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_resource_limits_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_resource_limits_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_resource_limits_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_resource_limits_request::GetClassData() const { return &_class_data_; }

void get_resource_limits_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_resource_limits_request *>(to)->MergeFrom(
      static_cast<const get_resource_limits_request &>(from));
}


void get_resource_limits_request::MergeFrom(const get_resource_limits_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_resource_limits_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_resource_limits_request::CopyFrom(const get_resource_limits_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_resource_limits_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_resource_limits_request::IsInitialized() const {
  return true;
}

void get_resource_limits_request::InternalSwap(get_resource_limits_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_resource_limits_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[16]);
}

// ===================================================================

class get_resource_limits_response::_Internal {
 public:
  static const ::koinos::chain::resource_limit_data& resource_limit_data(const get_resource_limits_response* msg);
};

const ::koinos::chain::resource_limit_data&
get_resource_limits_response::_Internal::resource_limit_data(const get_resource_limits_response* msg) {
  return *msg->resource_limit_data_;
}
void get_resource_limits_response::clear_resource_limit_data() {
  if (GetArenaForAllocation() == nullptr && resource_limit_data_ != nullptr) {
    delete resource_limit_data_;
  }
  resource_limit_data_ = nullptr;
}
get_resource_limits_response::get_resource_limits_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_resource_limits_response)
}
get_resource_limits_response::get_resource_limits_response(const get_resource_limits_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resource_limit_data()) {
    resource_limit_data_ = new ::koinos::chain::resource_limit_data(*from.resource_limit_data_);
  } else {
    resource_limit_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_resource_limits_response)
}

inline void get_resource_limits_response::SharedCtor() {
resource_limit_data_ = nullptr;
}

get_resource_limits_response::~get_resource_limits_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_resource_limits_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_resource_limits_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete resource_limit_data_;
}

void get_resource_limits_response::ArenaDtor(void* object) {
  get_resource_limits_response* _this = reinterpret_cast< get_resource_limits_response* >(object);
  (void)_this;
}
void get_resource_limits_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_resource_limits_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_resource_limits_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_resource_limits_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && resource_limit_data_ != nullptr) {
    delete resource_limit_data_;
  }
  resource_limit_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_resource_limits_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.chain.resource_limit_data resource_limit_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_limit_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_resource_limits_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_resource_limits_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.chain.resource_limit_data resource_limit_data = 1;
  if (this->_internal_has_resource_limit_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resource_limit_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_resource_limits_response)
  return target;
}

size_t get_resource_limits_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_resource_limits_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.chain.resource_limit_data resource_limit_data = 1;
  if (this->_internal_has_resource_limit_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_limit_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_resource_limits_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_resource_limits_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_resource_limits_response::GetClassData() const { return &_class_data_; }

void get_resource_limits_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_resource_limits_response *>(to)->MergeFrom(
      static_cast<const get_resource_limits_response &>(from));
}


void get_resource_limits_response::MergeFrom(const get_resource_limits_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_resource_limits_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_resource_limit_data()) {
    _internal_mutable_resource_limit_data()->::koinos::chain::resource_limit_data::MergeFrom(from._internal_resource_limit_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_resource_limits_response::CopyFrom(const get_resource_limits_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_resource_limits_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_resource_limits_response::IsInitialized() const {
  return true;
}

void get_resource_limits_response::InternalSwap(get_resource_limits_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(resource_limit_data_, other->resource_limit_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_resource_limits_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[17]);
}

// ===================================================================

class invoke_system_call_request::_Internal {
 public:
  using HasBits = decltype(std::declval<invoke_system_call_request>()._has_bits_);
  static const ::koinos::chain::caller_data& caller_data(const invoke_system_call_request* msg);
  static void set_has_caller_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::koinos::chain::caller_data&
invoke_system_call_request::_Internal::caller_data(const invoke_system_call_request* msg) {
  return *msg->caller_data_;
}
void invoke_system_call_request::clear_caller_data() {
  if (caller_data_ != nullptr) caller_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
invoke_system_call_request::invoke_system_call_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.invoke_system_call_request)
}
invoke_system_call_request::invoke_system_call_request(const invoke_system_call_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_caller_data()) {
    caller_data_ = new ::koinos::chain::caller_data(*from.caller_data_);
  } else {
    caller_data_ = nullptr;
  }
  clear_has_system_call();
  switch (from.system_call_case()) {
    case kId: {
      _internal_set_id(from._internal_id());
      break;
    }
    case kName: {
      _internal_set_name(from._internal_name());
      break;
    }
    case SYSTEM_CALL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.invoke_system_call_request)
}

inline void invoke_system_call_request::SharedCtor() {
args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
caller_data_ = nullptr;
clear_has_system_call();
}

invoke_system_call_request::~invoke_system_call_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.invoke_system_call_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void invoke_system_call_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete caller_data_;
  if (has_system_call()) {
    clear_system_call();
  }
}

void invoke_system_call_request::ArenaDtor(void* object) {
  invoke_system_call_request* _this = reinterpret_cast< invoke_system_call_request* >(object);
  (void)_this;
}
void invoke_system_call_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void invoke_system_call_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void invoke_system_call_request::clear_system_call() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.chain.invoke_system_call_request)
  switch (system_call_case()) {
    case kId: {
      // No need to clear
      break;
    }
    case kName: {
      system_call_.name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case SYSTEM_CALL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SYSTEM_CALL_NOT_SET;
}


void invoke_system_call_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.invoke_system_call_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(caller_data_ != nullptr);
    caller_data_->Clear();
  }
  clear_system_call();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* invoke_system_call_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.rpc.chain.invoke_system_call_request.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .koinos.chain.caller_data caller_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_caller_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* invoke_system_call_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.invoke_system_call_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.rpc.chain.invoke_system_call_request.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes args = 3;
  if (!this->_internal_args().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  // optional .koinos.chain.caller_data caller_data = 4;
  if (_internal_has_caller_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::caller_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.invoke_system_call_request)
  return target;
}

size_t invoke_system_call_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.invoke_system_call_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes args = 3;
  if (!this->_internal_args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // optional .koinos.chain.caller_data caller_data = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *caller_data_);
  }

  switch (system_call_case()) {
    // int64 id = 1;
    case kId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_id());
      break;
    }
    // string name = 2;
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
      break;
    }
    case SYSTEM_CALL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData invoke_system_call_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    invoke_system_call_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*invoke_system_call_request::GetClassData() const { return &_class_data_; }

void invoke_system_call_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<invoke_system_call_request *>(to)->MergeFrom(
      static_cast<const invoke_system_call_request &>(from));
}


void invoke_system_call_request::MergeFrom(const invoke_system_call_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.invoke_system_call_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_args().empty()) {
    _internal_set_args(from._internal_args());
  }
  if (from._internal_has_caller_data()) {
    _internal_mutable_caller_data()->::koinos::chain::caller_data::MergeFrom(from._internal_caller_data());
  }
  switch (from.system_call_case()) {
    case kId: {
      _internal_set_id(from._internal_id());
      break;
    }
    case kName: {
      _internal_set_name(from._internal_name());
      break;
    }
    case SYSTEM_CALL_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void invoke_system_call_request::CopyFrom(const invoke_system_call_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.invoke_system_call_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool invoke_system_call_request::IsInitialized() const {
  return true;
}

void invoke_system_call_request::InternalSwap(invoke_system_call_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &args_, GetArenaForAllocation(),
      &other->args_, other->GetArenaForAllocation()
  );
  swap(caller_data_, other->caller_data_);
  swap(system_call_, other->system_call_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata invoke_system_call_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[18]);
}

// ===================================================================

class invoke_system_call_response::_Internal {
 public:
};

invoke_system_call_response::invoke_system_call_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.invoke_system_call_response)
}
invoke_system_call_response::invoke_system_call_response(const invoke_system_call_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.invoke_system_call_response)
}

inline void invoke_system_call_response::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

invoke_system_call_response::~invoke_system_call_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.invoke_system_call_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void invoke_system_call_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void invoke_system_call_response::ArenaDtor(void* object) {
  invoke_system_call_response* _this = reinterpret_cast< invoke_system_call_response* >(object);
  (void)_this;
}
void invoke_system_call_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void invoke_system_call_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void invoke_system_call_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.invoke_system_call_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* invoke_system_call_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* invoke_system_call_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.invoke_system_call_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.invoke_system_call_response)
  return target;
}

size_t invoke_system_call_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.invoke_system_call_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData invoke_system_call_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    invoke_system_call_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*invoke_system_call_response::GetClassData() const { return &_class_data_; }

void invoke_system_call_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<invoke_system_call_response *>(to)->MergeFrom(
      static_cast<const invoke_system_call_response &>(from));
}


void invoke_system_call_response::MergeFrom(const invoke_system_call_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.invoke_system_call_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void invoke_system_call_response::CopyFrom(const invoke_system_call_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.invoke_system_call_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool invoke_system_call_response::IsInitialized() const {
  return true;
}

void invoke_system_call_response::InternalSwap(invoke_system_call_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata invoke_system_call_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[19]);
}

// ===================================================================

class chain_request::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const chain_request* msg);
  static const ::koinos::rpc::chain::submit_block_request& submit_block(const chain_request* msg);
  static const ::koinos::rpc::chain::submit_transaction_request& submit_transaction(const chain_request* msg);
  static const ::koinos::rpc::chain::get_head_info_request& get_head_info(const chain_request* msg);
  static const ::koinos::rpc::chain::get_chain_id_request& get_chain_id(const chain_request* msg);
  static const ::koinos::rpc::chain::get_fork_heads_request& get_fork_heads(const chain_request* msg);
  static const ::koinos::rpc::chain::read_contract_request& read_contract(const chain_request* msg);
  static const ::koinos::rpc::chain::get_account_nonce_request& get_account_nonce(const chain_request* msg);
  static const ::koinos::rpc::chain::get_account_rc_request& get_account_rc(const chain_request* msg);
  static const ::koinos::rpc::chain::get_resource_limits_request& get_resource_limits(const chain_request* msg);
  static const ::koinos::rpc::chain::invoke_system_call_request& invoke_system_call(const chain_request* msg);
};

const ::koinos::rpc::reserved_rpc&
chain_request::_Internal::reserved(const chain_request* msg) {
  return *msg->request_.reserved_;
}
const ::koinos::rpc::chain::submit_block_request&
chain_request::_Internal::submit_block(const chain_request* msg) {
  return *msg->request_.submit_block_;
}
const ::koinos::rpc::chain::submit_transaction_request&
chain_request::_Internal::submit_transaction(const chain_request* msg) {
  return *msg->request_.submit_transaction_;
}
const ::koinos::rpc::chain::get_head_info_request&
chain_request::_Internal::get_head_info(const chain_request* msg) {
  return *msg->request_.get_head_info_;
}
const ::koinos::rpc::chain::get_chain_id_request&
chain_request::_Internal::get_chain_id(const chain_request* msg) {
  return *msg->request_.get_chain_id_;
}
const ::koinos::rpc::chain::get_fork_heads_request&
chain_request::_Internal::get_fork_heads(const chain_request* msg) {
  return *msg->request_.get_fork_heads_;
}
const ::koinos::rpc::chain::read_contract_request&
chain_request::_Internal::read_contract(const chain_request* msg) {
  return *msg->request_.read_contract_;
}
const ::koinos::rpc::chain::get_account_nonce_request&
chain_request::_Internal::get_account_nonce(const chain_request* msg) {
  return *msg->request_.get_account_nonce_;
}
const ::koinos::rpc::chain::get_account_rc_request&
chain_request::_Internal::get_account_rc(const chain_request* msg) {
  return *msg->request_.get_account_rc_;
}
const ::koinos::rpc::chain::get_resource_limits_request&
chain_request::_Internal::get_resource_limits(const chain_request* msg) {
  return *msg->request_.get_resource_limits_;
}
const ::koinos::rpc::chain::invoke_system_call_request&
chain_request::_Internal::invoke_system_call(const chain_request* msg) {
  return *msg->request_.invoke_system_call_;
}
void chain_request::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.reserved)
}
void chain_request::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.reserved_;
    }
    clear_has_request();
  }
}
void chain_request::set_allocated_submit_block(::koinos::rpc::chain::submit_block_request* submit_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (submit_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::submit_block_request>::GetOwningArena(submit_block);
    if (message_arena != submessage_arena) {
      submit_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submit_block, submessage_arena);
    }
    set_has_submit_block();
    request_.submit_block_ = submit_block;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.submit_block)
}
void chain_request::set_allocated_submit_transaction(::koinos::rpc::chain::submit_transaction_request* submit_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (submit_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::submit_transaction_request>::GetOwningArena(submit_transaction);
    if (message_arena != submessage_arena) {
      submit_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submit_transaction, submessage_arena);
    }
    set_has_submit_transaction();
    request_.submit_transaction_ = submit_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.submit_transaction)
}
void chain_request::set_allocated_get_head_info(::koinos::rpc::chain::get_head_info_request* get_head_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_head_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::get_head_info_request>::GetOwningArena(get_head_info);
    if (message_arena != submessage_arena) {
      get_head_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_head_info, submessage_arena);
    }
    set_has_get_head_info();
    request_.get_head_info_ = get_head_info;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.get_head_info)
}
void chain_request::set_allocated_get_chain_id(::koinos::rpc::chain::get_chain_id_request* get_chain_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_chain_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::get_chain_id_request>::GetOwningArena(get_chain_id);
    if (message_arena != submessage_arena) {
      get_chain_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_chain_id, submessage_arena);
    }
    set_has_get_chain_id();
    request_.get_chain_id_ = get_chain_id;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.get_chain_id)
}
void chain_request::set_allocated_get_fork_heads(::koinos::rpc::chain::get_fork_heads_request* get_fork_heads) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_fork_heads) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::get_fork_heads_request>::GetOwningArena(get_fork_heads);
    if (message_arena != submessage_arena) {
      get_fork_heads = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_fork_heads, submessage_arena);
    }
    set_has_get_fork_heads();
    request_.get_fork_heads_ = get_fork_heads;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.get_fork_heads)
}
void chain_request::set_allocated_read_contract(::koinos::rpc::chain::read_contract_request* read_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (read_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::read_contract_request>::GetOwningArena(read_contract);
    if (message_arena != submessage_arena) {
      read_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_contract, submessage_arena);
    }
    set_has_read_contract();
    request_.read_contract_ = read_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.read_contract)
}
void chain_request::set_allocated_get_account_nonce(::koinos::rpc::chain::get_account_nonce_request* get_account_nonce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_account_nonce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::get_account_nonce_request>::GetOwningArena(get_account_nonce);
    if (message_arena != submessage_arena) {
      get_account_nonce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_nonce, submessage_arena);
    }
    set_has_get_account_nonce();
    request_.get_account_nonce_ = get_account_nonce;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.get_account_nonce)
}
void chain_request::set_allocated_get_account_rc(::koinos::rpc::chain::get_account_rc_request* get_account_rc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_account_rc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::get_account_rc_request>::GetOwningArena(get_account_rc);
    if (message_arena != submessage_arena) {
      get_account_rc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_rc, submessage_arena);
    }
    set_has_get_account_rc();
    request_.get_account_rc_ = get_account_rc;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.get_account_rc)
}
void chain_request::set_allocated_get_resource_limits(::koinos::rpc::chain::get_resource_limits_request* get_resource_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_resource_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::get_resource_limits_request>::GetOwningArena(get_resource_limits);
    if (message_arena != submessage_arena) {
      get_resource_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_resource_limits, submessage_arena);
    }
    set_has_get_resource_limits();
    request_.get_resource_limits_ = get_resource_limits;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.get_resource_limits)
}
void chain_request::set_allocated_invoke_system_call(::koinos::rpc::chain::invoke_system_call_request* invoke_system_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (invoke_system_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::invoke_system_call_request>::GetOwningArena(invoke_system_call);
    if (message_arena != submessage_arena) {
      invoke_system_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoke_system_call, submessage_arena);
    }
    set_has_invoke_system_call();
    request_.invoke_system_call_ = invoke_system_call;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.invoke_system_call)
}
chain_request::chain_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.chain_request)
}
chain_request::chain_request(const chain_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kSubmitBlock: {
      _internal_mutable_submit_block()->::koinos::rpc::chain::submit_block_request::MergeFrom(from._internal_submit_block());
      break;
    }
    case kSubmitTransaction: {
      _internal_mutable_submit_transaction()->::koinos::rpc::chain::submit_transaction_request::MergeFrom(from._internal_submit_transaction());
      break;
    }
    case kGetHeadInfo: {
      _internal_mutable_get_head_info()->::koinos::rpc::chain::get_head_info_request::MergeFrom(from._internal_get_head_info());
      break;
    }
    case kGetChainId: {
      _internal_mutable_get_chain_id()->::koinos::rpc::chain::get_chain_id_request::MergeFrom(from._internal_get_chain_id());
      break;
    }
    case kGetForkHeads: {
      _internal_mutable_get_fork_heads()->::koinos::rpc::chain::get_fork_heads_request::MergeFrom(from._internal_get_fork_heads());
      break;
    }
    case kReadContract: {
      _internal_mutable_read_contract()->::koinos::rpc::chain::read_contract_request::MergeFrom(from._internal_read_contract());
      break;
    }
    case kGetAccountNonce: {
      _internal_mutable_get_account_nonce()->::koinos::rpc::chain::get_account_nonce_request::MergeFrom(from._internal_get_account_nonce());
      break;
    }
    case kGetAccountRc: {
      _internal_mutable_get_account_rc()->::koinos::rpc::chain::get_account_rc_request::MergeFrom(from._internal_get_account_rc());
      break;
    }
    case kGetResourceLimits: {
      _internal_mutable_get_resource_limits()->::koinos::rpc::chain::get_resource_limits_request::MergeFrom(from._internal_get_resource_limits());
      break;
    }
    case kInvokeSystemCall: {
      _internal_mutable_invoke_system_call()->::koinos::rpc::chain::invoke_system_call_request::MergeFrom(from._internal_invoke_system_call());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.chain_request)
}

inline void chain_request::SharedCtor() {
clear_has_request();
}

chain_request::~chain_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.chain_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void chain_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void chain_request::ArenaDtor(void* object) {
  chain_request* _this = reinterpret_cast< chain_request* >(object);
  (void)_this;
}
void chain_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void chain_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void chain_request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.chain.chain_request)
  switch (request_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.reserved_;
      }
      break;
    }
    case kSubmitBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.submit_block_;
      }
      break;
    }
    case kSubmitTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.submit_transaction_;
      }
      break;
    }
    case kGetHeadInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_head_info_;
      }
      break;
    }
    case kGetChainId: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_chain_id_;
      }
      break;
    }
    case kGetForkHeads: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_fork_heads_;
      }
      break;
    }
    case kReadContract: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.read_contract_;
      }
      break;
    }
    case kGetAccountNonce: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_account_nonce_;
      }
      break;
    }
    case kGetAccountRc: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_account_rc_;
      }
      break;
    }
    case kGetResourceLimits: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_resource_limits_;
      }
      break;
    }
    case kInvokeSystemCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.invoke_system_call_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void chain_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.chain_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* chain_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.submit_block_request submit_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_submit_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.submit_transaction_request submit_transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_submit_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_head_info_request get_head_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_head_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_chain_id_request get_chain_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_chain_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_fork_heads_request get_fork_heads = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_fork_heads(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.read_contract_request read_contract = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_account_nonce_request get_account_nonce = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_nonce(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_account_rc_request get_account_rc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_rc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_resource_limits_request get_resource_limits = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_resource_limits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.invoke_system_call_request invoke_system_call = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoke_system_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* chain_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.chain_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.chain.submit_block_request submit_block = 2;
  if (_internal_has_submit_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::submit_block(this), target, stream);
  }

  // .koinos.rpc.chain.submit_transaction_request submit_transaction = 3;
  if (_internal_has_submit_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::submit_transaction(this), target, stream);
  }

  // .koinos.rpc.chain.get_head_info_request get_head_info = 4;
  if (_internal_has_get_head_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::get_head_info(this), target, stream);
  }

  // .koinos.rpc.chain.get_chain_id_request get_chain_id = 5;
  if (_internal_has_get_chain_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::get_chain_id(this), target, stream);
  }

  // .koinos.rpc.chain.get_fork_heads_request get_fork_heads = 6;
  if (_internal_has_get_fork_heads()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::get_fork_heads(this), target, stream);
  }

  // .koinos.rpc.chain.read_contract_request read_contract = 7;
  if (_internal_has_read_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::read_contract(this), target, stream);
  }

  // .koinos.rpc.chain.get_account_nonce_request get_account_nonce = 8;
  if (_internal_has_get_account_nonce()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::get_account_nonce(this), target, stream);
  }

  // .koinos.rpc.chain.get_account_rc_request get_account_rc = 9;
  if (_internal_has_get_account_rc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::get_account_rc(this), target, stream);
  }

  // .koinos.rpc.chain.get_resource_limits_request get_resource_limits = 10;
  if (_internal_has_get_resource_limits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::get_resource_limits(this), target, stream);
  }

  // .koinos.rpc.chain.invoke_system_call_request invoke_system_call = 11;
  if (_internal_has_invoke_system_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::invoke_system_call(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.chain_request)
  return target;
}

size_t chain_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.chain_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.reserved_);
      break;
    }
    // .koinos.rpc.chain.submit_block_request submit_block = 2;
    case kSubmitBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.submit_block_);
      break;
    }
    // .koinos.rpc.chain.submit_transaction_request submit_transaction = 3;
    case kSubmitTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.submit_transaction_);
      break;
    }
    // .koinos.rpc.chain.get_head_info_request get_head_info = 4;
    case kGetHeadInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_head_info_);
      break;
    }
    // .koinos.rpc.chain.get_chain_id_request get_chain_id = 5;
    case kGetChainId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_chain_id_);
      break;
    }
    // .koinos.rpc.chain.get_fork_heads_request get_fork_heads = 6;
    case kGetForkHeads: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_fork_heads_);
      break;
    }
    // .koinos.rpc.chain.read_contract_request read_contract = 7;
    case kReadContract: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.read_contract_);
      break;
    }
    // .koinos.rpc.chain.get_account_nonce_request get_account_nonce = 8;
    case kGetAccountNonce: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_account_nonce_);
      break;
    }
    // .koinos.rpc.chain.get_account_rc_request get_account_rc = 9;
    case kGetAccountRc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_account_rc_);
      break;
    }
    // .koinos.rpc.chain.get_resource_limits_request get_resource_limits = 10;
    case kGetResourceLimits: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_resource_limits_);
      break;
    }
    // .koinos.rpc.chain.invoke_system_call_request invoke_system_call = 11;
    case kInvokeSystemCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.invoke_system_call_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData chain_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    chain_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*chain_request::GetClassData() const { return &_class_data_; }

void chain_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<chain_request *>(to)->MergeFrom(
      static_cast<const chain_request &>(from));
}


void chain_request::MergeFrom(const chain_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.chain_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kSubmitBlock: {
      _internal_mutable_submit_block()->::koinos::rpc::chain::submit_block_request::MergeFrom(from._internal_submit_block());
      break;
    }
    case kSubmitTransaction: {
      _internal_mutable_submit_transaction()->::koinos::rpc::chain::submit_transaction_request::MergeFrom(from._internal_submit_transaction());
      break;
    }
    case kGetHeadInfo: {
      _internal_mutable_get_head_info()->::koinos::rpc::chain::get_head_info_request::MergeFrom(from._internal_get_head_info());
      break;
    }
    case kGetChainId: {
      _internal_mutable_get_chain_id()->::koinos::rpc::chain::get_chain_id_request::MergeFrom(from._internal_get_chain_id());
      break;
    }
    case kGetForkHeads: {
      _internal_mutable_get_fork_heads()->::koinos::rpc::chain::get_fork_heads_request::MergeFrom(from._internal_get_fork_heads());
      break;
    }
    case kReadContract: {
      _internal_mutable_read_contract()->::koinos::rpc::chain::read_contract_request::MergeFrom(from._internal_read_contract());
      break;
    }
    case kGetAccountNonce: {
      _internal_mutable_get_account_nonce()->::koinos::rpc::chain::get_account_nonce_request::MergeFrom(from._internal_get_account_nonce());
      break;
    }
    case kGetAccountRc: {
      _internal_mutable_get_account_rc()->::koinos::rpc::chain::get_account_rc_request::MergeFrom(from._internal_get_account_rc());
      break;
    }
    case kGetResourceLimits: {
      _internal_mutable_get_resource_limits()->::koinos::rpc::chain::get_resource_limits_request::MergeFrom(from._internal_get_resource_limits());
      break;
    }
    case kInvokeSystemCall: {
      _internal_mutable_invoke_system_call()->::koinos::rpc::chain::invoke_system_call_request::MergeFrom(from._internal_invoke_system_call());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void chain_request::CopyFrom(const chain_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.chain_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chain_request::IsInitialized() const {
  return true;
}

void chain_request::InternalSwap(chain_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata chain_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[20]);
}

// ===================================================================

class chain_response::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const chain_response* msg);
  static const ::koinos::rpc::error_status& error(const chain_response* msg);
  static const ::koinos::rpc::chain::submit_block_response& submit_block(const chain_response* msg);
  static const ::koinos::rpc::chain::submit_transaction_response& submit_transaction(const chain_response* msg);
  static const ::koinos::rpc::chain::get_head_info_response& get_head_info(const chain_response* msg);
  static const ::koinos::rpc::chain::get_chain_id_response& get_chain_id(const chain_response* msg);
  static const ::koinos::rpc::chain::get_fork_heads_response& get_fork_heads(const chain_response* msg);
  static const ::koinos::rpc::chain::read_contract_response& read_contract(const chain_response* msg);
  static const ::koinos::rpc::chain::get_account_nonce_response& get_account_nonce(const chain_response* msg);
  static const ::koinos::rpc::chain::get_account_rc_response& get_account_rc(const chain_response* msg);
  static const ::koinos::rpc::chain::get_resource_limits_response& get_resource_limits(const chain_response* msg);
  static const ::koinos::rpc::chain::invoke_system_call_response& invoke_system_call(const chain_response* msg);
};

const ::koinos::rpc::reserved_rpc&
chain_response::_Internal::reserved(const chain_response* msg) {
  return *msg->response_.reserved_;
}
const ::koinos::rpc::error_status&
chain_response::_Internal::error(const chain_response* msg) {
  return *msg->response_.error_;
}
const ::koinos::rpc::chain::submit_block_response&
chain_response::_Internal::submit_block(const chain_response* msg) {
  return *msg->response_.submit_block_;
}
const ::koinos::rpc::chain::submit_transaction_response&
chain_response::_Internal::submit_transaction(const chain_response* msg) {
  return *msg->response_.submit_transaction_;
}
const ::koinos::rpc::chain::get_head_info_response&
chain_response::_Internal::get_head_info(const chain_response* msg) {
  return *msg->response_.get_head_info_;
}
const ::koinos::rpc::chain::get_chain_id_response&
chain_response::_Internal::get_chain_id(const chain_response* msg) {
  return *msg->response_.get_chain_id_;
}
const ::koinos::rpc::chain::get_fork_heads_response&
chain_response::_Internal::get_fork_heads(const chain_response* msg) {
  return *msg->response_.get_fork_heads_;
}
const ::koinos::rpc::chain::read_contract_response&
chain_response::_Internal::read_contract(const chain_response* msg) {
  return *msg->response_.read_contract_;
}
const ::koinos::rpc::chain::get_account_nonce_response&
chain_response::_Internal::get_account_nonce(const chain_response* msg) {
  return *msg->response_.get_account_nonce_;
}
const ::koinos::rpc::chain::get_account_rc_response&
chain_response::_Internal::get_account_rc(const chain_response* msg) {
  return *msg->response_.get_account_rc_;
}
const ::koinos::rpc::chain::get_resource_limits_response&
chain_response::_Internal::get_resource_limits(const chain_response* msg) {
  return *msg->response_.get_resource_limits_;
}
const ::koinos::rpc::chain::invoke_system_call_response&
chain_response::_Internal::invoke_system_call(const chain_response* msg) {
  return *msg->response_.invoke_system_call_;
}
void chain_response::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.reserved)
}
void chain_response::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.reserved_;
    }
    clear_has_response();
  }
}
void chain_response::set_allocated_error(::koinos::rpc::error_status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.error)
}
void chain_response::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
void chain_response::set_allocated_submit_block(::koinos::rpc::chain::submit_block_response* submit_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (submit_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::submit_block_response>::GetOwningArena(submit_block);
    if (message_arena != submessage_arena) {
      submit_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submit_block, submessage_arena);
    }
    set_has_submit_block();
    response_.submit_block_ = submit_block;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.submit_block)
}
void chain_response::set_allocated_submit_transaction(::koinos::rpc::chain::submit_transaction_response* submit_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (submit_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::submit_transaction_response>::GetOwningArena(submit_transaction);
    if (message_arena != submessage_arena) {
      submit_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submit_transaction, submessage_arena);
    }
    set_has_submit_transaction();
    response_.submit_transaction_ = submit_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.submit_transaction)
}
void chain_response::set_allocated_get_head_info(::koinos::rpc::chain::get_head_info_response* get_head_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_head_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::get_head_info_response>::GetOwningArena(get_head_info);
    if (message_arena != submessage_arena) {
      get_head_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_head_info, submessage_arena);
    }
    set_has_get_head_info();
    response_.get_head_info_ = get_head_info;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.get_head_info)
}
void chain_response::set_allocated_get_chain_id(::koinos::rpc::chain::get_chain_id_response* get_chain_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_chain_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::get_chain_id_response>::GetOwningArena(get_chain_id);
    if (message_arena != submessage_arena) {
      get_chain_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_chain_id, submessage_arena);
    }
    set_has_get_chain_id();
    response_.get_chain_id_ = get_chain_id;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.get_chain_id)
}
void chain_response::set_allocated_get_fork_heads(::koinos::rpc::chain::get_fork_heads_response* get_fork_heads) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_fork_heads) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::get_fork_heads_response>::GetOwningArena(get_fork_heads);
    if (message_arena != submessage_arena) {
      get_fork_heads = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_fork_heads, submessage_arena);
    }
    set_has_get_fork_heads();
    response_.get_fork_heads_ = get_fork_heads;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.get_fork_heads)
}
void chain_response::set_allocated_read_contract(::koinos::rpc::chain::read_contract_response* read_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (read_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::read_contract_response>::GetOwningArena(read_contract);
    if (message_arena != submessage_arena) {
      read_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_contract, submessage_arena);
    }
    set_has_read_contract();
    response_.read_contract_ = read_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.read_contract)
}
void chain_response::set_allocated_get_account_nonce(::koinos::rpc::chain::get_account_nonce_response* get_account_nonce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_account_nonce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::get_account_nonce_response>::GetOwningArena(get_account_nonce);
    if (message_arena != submessage_arena) {
      get_account_nonce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_nonce, submessage_arena);
    }
    set_has_get_account_nonce();
    response_.get_account_nonce_ = get_account_nonce;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.get_account_nonce)
}
void chain_response::set_allocated_get_account_rc(::koinos::rpc::chain::get_account_rc_response* get_account_rc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_account_rc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::get_account_rc_response>::GetOwningArena(get_account_rc);
    if (message_arena != submessage_arena) {
      get_account_rc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_rc, submessage_arena);
    }
    set_has_get_account_rc();
    response_.get_account_rc_ = get_account_rc;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.get_account_rc)
}
void chain_response::set_allocated_get_resource_limits(::koinos::rpc::chain::get_resource_limits_response* get_resource_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_resource_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::get_resource_limits_response>::GetOwningArena(get_resource_limits);
    if (message_arena != submessage_arena) {
      get_resource_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_resource_limits, submessage_arena);
    }
    set_has_get_resource_limits();
    response_.get_resource_limits_ = get_resource_limits;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.get_resource_limits)
}
void chain_response::set_allocated_invoke_system_call(::koinos::rpc::chain::invoke_system_call_response* invoke_system_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (invoke_system_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::chain::invoke_system_call_response>::GetOwningArena(invoke_system_call);
    if (message_arena != submessage_arena) {
      invoke_system_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoke_system_call, submessage_arena);
    }
    set_has_invoke_system_call();
    response_.invoke_system_call_ = invoke_system_call;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.invoke_system_call)
}
chain_response::chain_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.chain_response)
}
chain_response::chain_response(const chain_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_status::MergeFrom(from._internal_error());
      break;
    }
    case kSubmitBlock: {
      _internal_mutable_submit_block()->::koinos::rpc::chain::submit_block_response::MergeFrom(from._internal_submit_block());
      break;
    }
    case kSubmitTransaction: {
      _internal_mutable_submit_transaction()->::koinos::rpc::chain::submit_transaction_response::MergeFrom(from._internal_submit_transaction());
      break;
    }
    case kGetHeadInfo: {
      _internal_mutable_get_head_info()->::koinos::rpc::chain::get_head_info_response::MergeFrom(from._internal_get_head_info());
      break;
    }
    case kGetChainId: {
      _internal_mutable_get_chain_id()->::koinos::rpc::chain::get_chain_id_response::MergeFrom(from._internal_get_chain_id());
      break;
    }
    case kGetForkHeads: {
      _internal_mutable_get_fork_heads()->::koinos::rpc::chain::get_fork_heads_response::MergeFrom(from._internal_get_fork_heads());
      break;
    }
    case kReadContract: {
      _internal_mutable_read_contract()->::koinos::rpc::chain::read_contract_response::MergeFrom(from._internal_read_contract());
      break;
    }
    case kGetAccountNonce: {
      _internal_mutable_get_account_nonce()->::koinos::rpc::chain::get_account_nonce_response::MergeFrom(from._internal_get_account_nonce());
      break;
    }
    case kGetAccountRc: {
      _internal_mutable_get_account_rc()->::koinos::rpc::chain::get_account_rc_response::MergeFrom(from._internal_get_account_rc());
      break;
    }
    case kGetResourceLimits: {
      _internal_mutable_get_resource_limits()->::koinos::rpc::chain::get_resource_limits_response::MergeFrom(from._internal_get_resource_limits());
      break;
    }
    case kInvokeSystemCall: {
      _internal_mutable_invoke_system_call()->::koinos::rpc::chain::invoke_system_call_response::MergeFrom(from._internal_invoke_system_call());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.chain_response)
}

inline void chain_response::SharedCtor() {
clear_has_response();
}

chain_response::~chain_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.chain_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void chain_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void chain_response::ArenaDtor(void* object) {
  chain_response* _this = reinterpret_cast< chain_response* >(object);
  (void)_this;
}
void chain_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void chain_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void chain_response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.chain.chain_response)
  switch (response_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.reserved_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case kSubmitBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.submit_block_;
      }
      break;
    }
    case kSubmitTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.submit_transaction_;
      }
      break;
    }
    case kGetHeadInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_head_info_;
      }
      break;
    }
    case kGetChainId: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_chain_id_;
      }
      break;
    }
    case kGetForkHeads: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_fork_heads_;
      }
      break;
    }
    case kReadContract: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.read_contract_;
      }
      break;
    }
    case kGetAccountNonce: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_account_nonce_;
      }
      break;
    }
    case kGetAccountRc: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_account_rc_;
      }
      break;
    }
    case kGetResourceLimits: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_resource_limits_;
      }
      break;
    }
    case kInvokeSystemCall: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.invoke_system_call_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void chain_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.chain_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* chain_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.error_status error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.submit_block_response submit_block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_submit_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.submit_transaction_response submit_transaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_submit_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_head_info_response get_head_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_head_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_chain_id_response get_chain_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_chain_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_fork_heads_response get_fork_heads = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_fork_heads(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.read_contract_response read_contract = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_account_nonce_response get_account_nonce = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_nonce(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_account_rc_response get_account_rc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_rc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_resource_limits_response get_resource_limits = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_resource_limits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.invoke_system_call_response invoke_system_call = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoke_system_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* chain_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.chain_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.error_status error = 2;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // .koinos.rpc.chain.submit_block_response submit_block = 3;
  if (_internal_has_submit_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::submit_block(this), target, stream);
  }

  // .koinos.rpc.chain.submit_transaction_response submit_transaction = 4;
  if (_internal_has_submit_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::submit_transaction(this), target, stream);
  }

  // .koinos.rpc.chain.get_head_info_response get_head_info = 5;
  if (_internal_has_get_head_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::get_head_info(this), target, stream);
  }

  // .koinos.rpc.chain.get_chain_id_response get_chain_id = 6;
  if (_internal_has_get_chain_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::get_chain_id(this), target, stream);
  }

  // .koinos.rpc.chain.get_fork_heads_response get_fork_heads = 7;
  if (_internal_has_get_fork_heads()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::get_fork_heads(this), target, stream);
  }

  // .koinos.rpc.chain.read_contract_response read_contract = 8;
  if (_internal_has_read_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::read_contract(this), target, stream);
  }

  // .koinos.rpc.chain.get_account_nonce_response get_account_nonce = 9;
  if (_internal_has_get_account_nonce()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::get_account_nonce(this), target, stream);
  }

  // .koinos.rpc.chain.get_account_rc_response get_account_rc = 10;
  if (_internal_has_get_account_rc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::get_account_rc(this), target, stream);
  }

  // .koinos.rpc.chain.get_resource_limits_response get_resource_limits = 11;
  if (_internal_has_get_resource_limits()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::get_resource_limits(this), target, stream);
  }

  // .koinos.rpc.chain.invoke_system_call_response invoke_system_call = 12;
  if (_internal_has_invoke_system_call()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::invoke_system_call(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.chain_response)
  return target;
}

size_t chain_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.chain_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.reserved_);
      break;
    }
    // .koinos.rpc.error_status error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    // .koinos.rpc.chain.submit_block_response submit_block = 3;
    case kSubmitBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.submit_block_);
      break;
    }
    // .koinos.rpc.chain.submit_transaction_response submit_transaction = 4;
    case kSubmitTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.submit_transaction_);
      break;
    }
    // .koinos.rpc.chain.get_head_info_response get_head_info = 5;
    case kGetHeadInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_head_info_);
      break;
    }
    // .koinos.rpc.chain.get_chain_id_response get_chain_id = 6;
    case kGetChainId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_chain_id_);
      break;
    }
    // .koinos.rpc.chain.get_fork_heads_response get_fork_heads = 7;
    case kGetForkHeads: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_fork_heads_);
      break;
    }
    // .koinos.rpc.chain.read_contract_response read_contract = 8;
    case kReadContract: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.read_contract_);
      break;
    }
    // .koinos.rpc.chain.get_account_nonce_response get_account_nonce = 9;
    case kGetAccountNonce: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_account_nonce_);
      break;
    }
    // .koinos.rpc.chain.get_account_rc_response get_account_rc = 10;
    case kGetAccountRc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_account_rc_);
      break;
    }
    // .koinos.rpc.chain.get_resource_limits_response get_resource_limits = 11;
    case kGetResourceLimits: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_resource_limits_);
      break;
    }
    // .koinos.rpc.chain.invoke_system_call_response invoke_system_call = 12;
    case kInvokeSystemCall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.invoke_system_call_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData chain_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    chain_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*chain_response::GetClassData() const { return &_class_data_; }

void chain_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<chain_response *>(to)->MergeFrom(
      static_cast<const chain_response &>(from));
}


void chain_response::MergeFrom(const chain_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.chain_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_status::MergeFrom(from._internal_error());
      break;
    }
    case kSubmitBlock: {
      _internal_mutable_submit_block()->::koinos::rpc::chain::submit_block_response::MergeFrom(from._internal_submit_block());
      break;
    }
    case kSubmitTransaction: {
      _internal_mutable_submit_transaction()->::koinos::rpc::chain::submit_transaction_response::MergeFrom(from._internal_submit_transaction());
      break;
    }
    case kGetHeadInfo: {
      _internal_mutable_get_head_info()->::koinos::rpc::chain::get_head_info_response::MergeFrom(from._internal_get_head_info());
      break;
    }
    case kGetChainId: {
      _internal_mutable_get_chain_id()->::koinos::rpc::chain::get_chain_id_response::MergeFrom(from._internal_get_chain_id());
      break;
    }
    case kGetForkHeads: {
      _internal_mutable_get_fork_heads()->::koinos::rpc::chain::get_fork_heads_response::MergeFrom(from._internal_get_fork_heads());
      break;
    }
    case kReadContract: {
      _internal_mutable_read_contract()->::koinos::rpc::chain::read_contract_response::MergeFrom(from._internal_read_contract());
      break;
    }
    case kGetAccountNonce: {
      _internal_mutable_get_account_nonce()->::koinos::rpc::chain::get_account_nonce_response::MergeFrom(from._internal_get_account_nonce());
      break;
    }
    case kGetAccountRc: {
      _internal_mutable_get_account_rc()->::koinos::rpc::chain::get_account_rc_response::MergeFrom(from._internal_get_account_rc());
      break;
    }
    case kGetResourceLimits: {
      _internal_mutable_get_resource_limits()->::koinos::rpc::chain::get_resource_limits_response::MergeFrom(from._internal_get_resource_limits());
      break;
    }
    case kInvokeSystemCall: {
      _internal_mutable_invoke_system_call()->::koinos::rpc::chain::invoke_system_call_response::MergeFrom(from._internal_invoke_system_call());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void chain_response::CopyFrom(const chain_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.chain_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chain_response::IsInitialized() const {
  return true;
}

void chain_response::InternalSwap(chain_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata chain_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chain
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::submit_block_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::submit_block_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::submit_block_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::submit_block_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::submit_block_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::submit_block_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::submit_transaction_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::submit_transaction_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::submit_transaction_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::submit_transaction_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::submit_transaction_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::submit_transaction_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_head_info_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_head_info_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_head_info_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_head_info_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_head_info_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_head_info_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_chain_id_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_chain_id_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_chain_id_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_chain_id_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_chain_id_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_chain_id_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_fork_heads_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_fork_heads_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_fork_heads_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_fork_heads_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_fork_heads_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_fork_heads_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::read_contract_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::read_contract_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::read_contract_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::read_contract_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::read_contract_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::read_contract_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_account_nonce_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_account_nonce_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_account_nonce_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_account_nonce_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_account_nonce_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_account_nonce_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_account_rc_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_account_rc_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_account_rc_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_account_rc_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_account_rc_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_account_rc_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_resource_limits_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_resource_limits_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_resource_limits_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_resource_limits_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_resource_limits_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_resource_limits_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::invoke_system_call_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::invoke_system_call_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::invoke_system_call_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::invoke_system_call_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::invoke_system_call_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::invoke_system_call_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::chain_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::chain_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::chain_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::chain_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::chain_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::chain_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
