// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/standards/kcs5.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fstandards_2fkcs5_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fstandards_2fkcs5_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fstandards_2fkcs5_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fstandards_2fkcs5_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[57]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fstandards_2fkcs5_2eproto;
namespace koinos {
namespace standards {
namespace kcs5 {
class approve_arguments;
struct approve_argumentsDefaultTypeInternal;
extern approve_argumentsDefaultTypeInternal _approve_arguments_default_instance_;
class approve_result;
struct approve_resultDefaultTypeInternal;
extern approve_resultDefaultTypeInternal _approve_result_default_instance_;
class balance_of_arguments;
struct balance_of_argumentsDefaultTypeInternal;
extern balance_of_argumentsDefaultTypeInternal _balance_of_arguments_default_instance_;
class balance_of_result;
struct balance_of_resultDefaultTypeInternal;
extern balance_of_resultDefaultTypeInternal _balance_of_result_default_instance_;
class burn_arguments;
struct burn_argumentsDefaultTypeInternal;
extern burn_argumentsDefaultTypeInternal _burn_arguments_default_instance_;
class burn_event;
struct burn_eventDefaultTypeInternal;
extern burn_eventDefaultTypeInternal _burn_event_default_instance_;
class burn_result;
struct burn_resultDefaultTypeInternal;
extern burn_resultDefaultTypeInternal _burn_result_default_instance_;
class get_approved_arguments;
struct get_approved_argumentsDefaultTypeInternal;
extern get_approved_argumentsDefaultTypeInternal _get_approved_arguments_default_instance_;
class get_approved_result;
struct get_approved_resultDefaultTypeInternal;
extern get_approved_resultDefaultTypeInternal _get_approved_result_default_instance_;
class get_info_arguments;
struct get_info_argumentsDefaultTypeInternal;
extern get_info_argumentsDefaultTypeInternal _get_info_arguments_default_instance_;
class get_info_result;
struct get_info_resultDefaultTypeInternal;
extern get_info_resultDefaultTypeInternal _get_info_result_default_instance_;
class get_operator_approvals_arguments;
struct get_operator_approvals_argumentsDefaultTypeInternal;
extern get_operator_approvals_argumentsDefaultTypeInternal _get_operator_approvals_arguments_default_instance_;
class get_operator_approvals_result;
struct get_operator_approvals_resultDefaultTypeInternal;
extern get_operator_approvals_resultDefaultTypeInternal _get_operator_approvals_result_default_instance_;
class get_tokens_arguments;
struct get_tokens_argumentsDefaultTypeInternal;
extern get_tokens_argumentsDefaultTypeInternal _get_tokens_arguments_default_instance_;
class get_tokens_by_owner_arguments;
struct get_tokens_by_owner_argumentsDefaultTypeInternal;
extern get_tokens_by_owner_argumentsDefaultTypeInternal _get_tokens_by_owner_arguments_default_instance_;
class get_tokens_by_owner_result;
struct get_tokens_by_owner_resultDefaultTypeInternal;
extern get_tokens_by_owner_resultDefaultTypeInternal _get_tokens_by_owner_result_default_instance_;
class get_tokens_result;
struct get_tokens_resultDefaultTypeInternal;
extern get_tokens_resultDefaultTypeInternal _get_tokens_result_default_instance_;
class is_approved_for_all_arguments;
struct is_approved_for_all_argumentsDefaultTypeInternal;
extern is_approved_for_all_argumentsDefaultTypeInternal _is_approved_for_all_arguments_default_instance_;
class is_approved_for_all_result;
struct is_approved_for_all_resultDefaultTypeInternal;
extern is_approved_for_all_resultDefaultTypeInternal _is_approved_for_all_result_default_instance_;
class metadata_of_arguments;
struct metadata_of_argumentsDefaultTypeInternal;
extern metadata_of_argumentsDefaultTypeInternal _metadata_of_arguments_default_instance_;
class metadata_of_result;
struct metadata_of_resultDefaultTypeInternal;
extern metadata_of_resultDefaultTypeInternal _metadata_of_result_default_instance_;
class mint_arguments;
struct mint_argumentsDefaultTypeInternal;
extern mint_argumentsDefaultTypeInternal _mint_arguments_default_instance_;
class mint_event;
struct mint_eventDefaultTypeInternal;
extern mint_eventDefaultTypeInternal _mint_event_default_instance_;
class mint_result;
struct mint_resultDefaultTypeInternal;
extern mint_resultDefaultTypeInternal _mint_result_default_instance_;
class name_arguments;
struct name_argumentsDefaultTypeInternal;
extern name_argumentsDefaultTypeInternal _name_arguments_default_instance_;
class name_result;
struct name_resultDefaultTypeInternal;
extern name_resultDefaultTypeInternal _name_result_default_instance_;
class operator_approval_event;
struct operator_approval_eventDefaultTypeInternal;
extern operator_approval_eventDefaultTypeInternal _operator_approval_event_default_instance_;
class owner_arguments;
struct owner_argumentsDefaultTypeInternal;
extern owner_argumentsDefaultTypeInternal _owner_arguments_default_instance_;
class owner_event;
struct owner_eventDefaultTypeInternal;
extern owner_eventDefaultTypeInternal _owner_event_default_instance_;
class owner_of_arguments;
struct owner_of_argumentsDefaultTypeInternal;
extern owner_of_argumentsDefaultTypeInternal _owner_of_arguments_default_instance_;
class owner_of_result;
struct owner_of_resultDefaultTypeInternal;
extern owner_of_resultDefaultTypeInternal _owner_of_result_default_instance_;
class owner_result;
struct owner_resultDefaultTypeInternal;
extern owner_resultDefaultTypeInternal _owner_result_default_instance_;
class royalties_arguments;
struct royalties_argumentsDefaultTypeInternal;
extern royalties_argumentsDefaultTypeInternal _royalties_arguments_default_instance_;
class royalties_event;
struct royalties_eventDefaultTypeInternal;
extern royalties_eventDefaultTypeInternal _royalties_event_default_instance_;
class royalties_result;
struct royalties_resultDefaultTypeInternal;
extern royalties_resultDefaultTypeInternal _royalties_result_default_instance_;
class royalty;
struct royaltyDefaultTypeInternal;
extern royaltyDefaultTypeInternal _royalty_default_instance_;
class set_approval_for_all_arguments;
struct set_approval_for_all_argumentsDefaultTypeInternal;
extern set_approval_for_all_argumentsDefaultTypeInternal _set_approval_for_all_arguments_default_instance_;
class set_approval_for_all_result;
struct set_approval_for_all_resultDefaultTypeInternal;
extern set_approval_for_all_resultDefaultTypeInternal _set_approval_for_all_result_default_instance_;
class set_metadata_arguments;
struct set_metadata_argumentsDefaultTypeInternal;
extern set_metadata_argumentsDefaultTypeInternal _set_metadata_arguments_default_instance_;
class set_metadata_event;
struct set_metadata_eventDefaultTypeInternal;
extern set_metadata_eventDefaultTypeInternal _set_metadata_event_default_instance_;
class set_metadata_result;
struct set_metadata_resultDefaultTypeInternal;
extern set_metadata_resultDefaultTypeInternal _set_metadata_result_default_instance_;
class set_royalties_arguments;
struct set_royalties_argumentsDefaultTypeInternal;
extern set_royalties_argumentsDefaultTypeInternal _set_royalties_arguments_default_instance_;
class set_royalties_result;
struct set_royalties_resultDefaultTypeInternal;
extern set_royalties_resultDefaultTypeInternal _set_royalties_result_default_instance_;
class symbol_arguments;
struct symbol_argumentsDefaultTypeInternal;
extern symbol_argumentsDefaultTypeInternal _symbol_arguments_default_instance_;
class symbol_result;
struct symbol_resultDefaultTypeInternal;
extern symbol_resultDefaultTypeInternal _symbol_result_default_instance_;
class token_approval_event;
struct token_approval_eventDefaultTypeInternal;
extern token_approval_eventDefaultTypeInternal _token_approval_event_default_instance_;
class token_uri_arguments;
struct token_uri_argumentsDefaultTypeInternal;
extern token_uri_argumentsDefaultTypeInternal _token_uri_arguments_default_instance_;
class token_uri_result;
struct token_uri_resultDefaultTypeInternal;
extern token_uri_resultDefaultTypeInternal _token_uri_result_default_instance_;
class total_supply_arguments;
struct total_supply_argumentsDefaultTypeInternal;
extern total_supply_argumentsDefaultTypeInternal _total_supply_arguments_default_instance_;
class total_supply_result;
struct total_supply_resultDefaultTypeInternal;
extern total_supply_resultDefaultTypeInternal _total_supply_result_default_instance_;
class transfer_arguments;
struct transfer_argumentsDefaultTypeInternal;
extern transfer_argumentsDefaultTypeInternal _transfer_arguments_default_instance_;
class transfer_event;
struct transfer_eventDefaultTypeInternal;
extern transfer_eventDefaultTypeInternal _transfer_event_default_instance_;
class transfer_ownership_arguments;
struct transfer_ownership_argumentsDefaultTypeInternal;
extern transfer_ownership_argumentsDefaultTypeInternal _transfer_ownership_arguments_default_instance_;
class transfer_ownership_result;
struct transfer_ownership_resultDefaultTypeInternal;
extern transfer_ownership_resultDefaultTypeInternal _transfer_ownership_result_default_instance_;
class transfer_result;
struct transfer_resultDefaultTypeInternal;
extern transfer_resultDefaultTypeInternal _transfer_result_default_instance_;
class uri_arguments;
struct uri_argumentsDefaultTypeInternal;
extern uri_argumentsDefaultTypeInternal _uri_arguments_default_instance_;
class uri_result;
struct uri_resultDefaultTypeInternal;
extern uri_resultDefaultTypeInternal _uri_result_default_instance_;
}  // namespace kcs5
}  // namespace standards
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::standards::kcs5::approve_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::approve_arguments>(Arena*);
template<> ::koinos::standards::kcs5::approve_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::approve_result>(Arena*);
template<> ::koinos::standards::kcs5::balance_of_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::balance_of_arguments>(Arena*);
template<> ::koinos::standards::kcs5::balance_of_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::balance_of_result>(Arena*);
template<> ::koinos::standards::kcs5::burn_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::burn_arguments>(Arena*);
template<> ::koinos::standards::kcs5::burn_event* Arena::CreateMaybeMessage<::koinos::standards::kcs5::burn_event>(Arena*);
template<> ::koinos::standards::kcs5::burn_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::burn_result>(Arena*);
template<> ::koinos::standards::kcs5::get_approved_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::get_approved_arguments>(Arena*);
template<> ::koinos::standards::kcs5::get_approved_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::get_approved_result>(Arena*);
template<> ::koinos::standards::kcs5::get_info_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::get_info_arguments>(Arena*);
template<> ::koinos::standards::kcs5::get_info_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::get_info_result>(Arena*);
template<> ::koinos::standards::kcs5::get_operator_approvals_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::get_operator_approvals_arguments>(Arena*);
template<> ::koinos::standards::kcs5::get_operator_approvals_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::get_operator_approvals_result>(Arena*);
template<> ::koinos::standards::kcs5::get_tokens_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::get_tokens_arguments>(Arena*);
template<> ::koinos::standards::kcs5::get_tokens_by_owner_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::get_tokens_by_owner_arguments>(Arena*);
template<> ::koinos::standards::kcs5::get_tokens_by_owner_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::get_tokens_by_owner_result>(Arena*);
template<> ::koinos::standards::kcs5::get_tokens_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::get_tokens_result>(Arena*);
template<> ::koinos::standards::kcs5::is_approved_for_all_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::is_approved_for_all_arguments>(Arena*);
template<> ::koinos::standards::kcs5::is_approved_for_all_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::is_approved_for_all_result>(Arena*);
template<> ::koinos::standards::kcs5::metadata_of_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::metadata_of_arguments>(Arena*);
template<> ::koinos::standards::kcs5::metadata_of_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::metadata_of_result>(Arena*);
template<> ::koinos::standards::kcs5::mint_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::mint_arguments>(Arena*);
template<> ::koinos::standards::kcs5::mint_event* Arena::CreateMaybeMessage<::koinos::standards::kcs5::mint_event>(Arena*);
template<> ::koinos::standards::kcs5::mint_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::mint_result>(Arena*);
template<> ::koinos::standards::kcs5::name_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::name_arguments>(Arena*);
template<> ::koinos::standards::kcs5::name_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::name_result>(Arena*);
template<> ::koinos::standards::kcs5::operator_approval_event* Arena::CreateMaybeMessage<::koinos::standards::kcs5::operator_approval_event>(Arena*);
template<> ::koinos::standards::kcs5::owner_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::owner_arguments>(Arena*);
template<> ::koinos::standards::kcs5::owner_event* Arena::CreateMaybeMessage<::koinos::standards::kcs5::owner_event>(Arena*);
template<> ::koinos::standards::kcs5::owner_of_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::owner_of_arguments>(Arena*);
template<> ::koinos::standards::kcs5::owner_of_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::owner_of_result>(Arena*);
template<> ::koinos::standards::kcs5::owner_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::owner_result>(Arena*);
template<> ::koinos::standards::kcs5::royalties_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::royalties_arguments>(Arena*);
template<> ::koinos::standards::kcs5::royalties_event* Arena::CreateMaybeMessage<::koinos::standards::kcs5::royalties_event>(Arena*);
template<> ::koinos::standards::kcs5::royalties_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::royalties_result>(Arena*);
template<> ::koinos::standards::kcs5::royalty* Arena::CreateMaybeMessage<::koinos::standards::kcs5::royalty>(Arena*);
template<> ::koinos::standards::kcs5::set_approval_for_all_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::set_approval_for_all_arguments>(Arena*);
template<> ::koinos::standards::kcs5::set_approval_for_all_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::set_approval_for_all_result>(Arena*);
template<> ::koinos::standards::kcs5::set_metadata_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::set_metadata_arguments>(Arena*);
template<> ::koinos::standards::kcs5::set_metadata_event* Arena::CreateMaybeMessage<::koinos::standards::kcs5::set_metadata_event>(Arena*);
template<> ::koinos::standards::kcs5::set_metadata_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::set_metadata_result>(Arena*);
template<> ::koinos::standards::kcs5::set_royalties_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::set_royalties_arguments>(Arena*);
template<> ::koinos::standards::kcs5::set_royalties_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::set_royalties_result>(Arena*);
template<> ::koinos::standards::kcs5::symbol_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::symbol_arguments>(Arena*);
template<> ::koinos::standards::kcs5::symbol_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::symbol_result>(Arena*);
template<> ::koinos::standards::kcs5::token_approval_event* Arena::CreateMaybeMessage<::koinos::standards::kcs5::token_approval_event>(Arena*);
template<> ::koinos::standards::kcs5::token_uri_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::token_uri_arguments>(Arena*);
template<> ::koinos::standards::kcs5::token_uri_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::token_uri_result>(Arena*);
template<> ::koinos::standards::kcs5::total_supply_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::total_supply_arguments>(Arena*);
template<> ::koinos::standards::kcs5::total_supply_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::total_supply_result>(Arena*);
template<> ::koinos::standards::kcs5::transfer_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::transfer_arguments>(Arena*);
template<> ::koinos::standards::kcs5::transfer_event* Arena::CreateMaybeMessage<::koinos::standards::kcs5::transfer_event>(Arena*);
template<> ::koinos::standards::kcs5::transfer_ownership_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::transfer_ownership_arguments>(Arena*);
template<> ::koinos::standards::kcs5::transfer_ownership_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::transfer_ownership_result>(Arena*);
template<> ::koinos::standards::kcs5::transfer_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::transfer_result>(Arena*);
template<> ::koinos::standards::kcs5::uri_arguments* Arena::CreateMaybeMessage<::koinos::standards::kcs5::uri_arguments>(Arena*);
template<> ::koinos::standards::kcs5::uri_result* Arena::CreateMaybeMessage<::koinos::standards::kcs5::uri_result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace standards {
namespace kcs5 {

// ===================================================================

class name_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.name_arguments) */ {
 public:
  inline name_arguments() : name_arguments(nullptr) {}
  ~name_arguments() override;
  explicit constexpr name_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  name_arguments(const name_arguments& from);
  name_arguments(name_arguments&& from) noexcept
    : name_arguments() {
    *this = ::std::move(from);
  }

  inline name_arguments& operator=(const name_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline name_arguments& operator=(name_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const name_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const name_arguments* internal_default_instance() {
    return reinterpret_cast<const name_arguments*>(
               &_name_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(name_arguments& a, name_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(name_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(name_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline name_arguments* New() const final {
    return new name_arguments();
  }

  name_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<name_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const name_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const name_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(name_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.name_arguments";
  }
  protected:
  explicit name_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.name_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class name_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.name_result) */ {
 public:
  inline name_result() : name_result(nullptr) {}
  ~name_result() override;
  explicit constexpr name_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  name_result(const name_result& from);
  name_result(name_result&& from) noexcept
    : name_result() {
    *this = ::std::move(from);
  }

  inline name_result& operator=(const name_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline name_result& operator=(name_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const name_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const name_result* internal_default_instance() {
    return reinterpret_cast<const name_result*>(
               &_name_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(name_result& a, name_result& b) {
    a.Swap(&b);
  }
  inline void Swap(name_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(name_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline name_result* New() const final {
    return new name_result();
  }

  name_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<name_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const name_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const name_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(name_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.name_result";
  }
  protected:
  explicit name_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.name_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class symbol_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.symbol_arguments) */ {
 public:
  inline symbol_arguments() : symbol_arguments(nullptr) {}
  ~symbol_arguments() override;
  explicit constexpr symbol_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  symbol_arguments(const symbol_arguments& from);
  symbol_arguments(symbol_arguments&& from) noexcept
    : symbol_arguments() {
    *this = ::std::move(from);
  }

  inline symbol_arguments& operator=(const symbol_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline symbol_arguments& operator=(symbol_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const symbol_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const symbol_arguments* internal_default_instance() {
    return reinterpret_cast<const symbol_arguments*>(
               &_symbol_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(symbol_arguments& a, symbol_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(symbol_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(symbol_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline symbol_arguments* New() const final {
    return new symbol_arguments();
  }

  symbol_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<symbol_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const symbol_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const symbol_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(symbol_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.symbol_arguments";
  }
  protected:
  explicit symbol_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.symbol_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class symbol_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.symbol_result) */ {
 public:
  inline symbol_result() : symbol_result(nullptr) {}
  ~symbol_result() override;
  explicit constexpr symbol_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  symbol_result(const symbol_result& from);
  symbol_result(symbol_result&& from) noexcept
    : symbol_result() {
    *this = ::std::move(from);
  }

  inline symbol_result& operator=(const symbol_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline symbol_result& operator=(symbol_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const symbol_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const symbol_result* internal_default_instance() {
    return reinterpret_cast<const symbol_result*>(
               &_symbol_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(symbol_result& a, symbol_result& b) {
    a.Swap(&b);
  }
  inline void Swap(symbol_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(symbol_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline symbol_result* New() const final {
    return new symbol_result();
  }

  symbol_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<symbol_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const symbol_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const symbol_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(symbol_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.symbol_result";
  }
  protected:
  explicit symbol_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.symbol_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class uri_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.uri_arguments) */ {
 public:
  inline uri_arguments() : uri_arguments(nullptr) {}
  ~uri_arguments() override;
  explicit constexpr uri_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  uri_arguments(const uri_arguments& from);
  uri_arguments(uri_arguments&& from) noexcept
    : uri_arguments() {
    *this = ::std::move(from);
  }

  inline uri_arguments& operator=(const uri_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline uri_arguments& operator=(uri_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const uri_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const uri_arguments* internal_default_instance() {
    return reinterpret_cast<const uri_arguments*>(
               &_uri_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(uri_arguments& a, uri_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(uri_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(uri_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline uri_arguments* New() const final {
    return new uri_arguments();
  }

  uri_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<uri_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const uri_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const uri_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(uri_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.uri_arguments";
  }
  protected:
  explicit uri_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.uri_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class uri_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.uri_result) */ {
 public:
  inline uri_result() : uri_result(nullptr) {}
  ~uri_result() override;
  explicit constexpr uri_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  uri_result(const uri_result& from);
  uri_result(uri_result&& from) noexcept
    : uri_result() {
    *this = ::std::move(from);
  }

  inline uri_result& operator=(const uri_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline uri_result& operator=(uri_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const uri_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const uri_result* internal_default_instance() {
    return reinterpret_cast<const uri_result*>(
               &_uri_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(uri_result& a, uri_result& b) {
    a.Swap(&b);
  }
  inline void Swap(uri_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(uri_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline uri_result* New() const final {
    return new uri_result();
  }

  uri_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<uri_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const uri_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const uri_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(uri_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.uri_result";
  }
  protected:
  explicit uri_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.uri_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class token_uri_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.token_uri_arguments) */ {
 public:
  inline token_uri_arguments() : token_uri_arguments(nullptr) {}
  ~token_uri_arguments() override;
  explicit constexpr token_uri_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  token_uri_arguments(const token_uri_arguments& from);
  token_uri_arguments(token_uri_arguments&& from) noexcept
    : token_uri_arguments() {
    *this = ::std::move(from);
  }

  inline token_uri_arguments& operator=(const token_uri_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline token_uri_arguments& operator=(token_uri_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const token_uri_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const token_uri_arguments* internal_default_instance() {
    return reinterpret_cast<const token_uri_arguments*>(
               &_token_uri_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(token_uri_arguments& a, token_uri_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(token_uri_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(token_uri_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline token_uri_arguments* New() const final {
    return new token_uri_arguments();
  }

  token_uri_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<token_uri_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const token_uri_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const token_uri_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(token_uri_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.token_uri_arguments";
  }
  protected:
  explicit token_uri_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenIdFieldNumber = 1,
  };
  // bytes token_id = 1 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.token_uri_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class token_uri_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.token_uri_result) */ {
 public:
  inline token_uri_result() : token_uri_result(nullptr) {}
  ~token_uri_result() override;
  explicit constexpr token_uri_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  token_uri_result(const token_uri_result& from);
  token_uri_result(token_uri_result&& from) noexcept
    : token_uri_result() {
    *this = ::std::move(from);
  }

  inline token_uri_result& operator=(const token_uri_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline token_uri_result& operator=(token_uri_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const token_uri_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const token_uri_result* internal_default_instance() {
    return reinterpret_cast<const token_uri_result*>(
               &_token_uri_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(token_uri_result& a, token_uri_result& b) {
    a.Swap(&b);
  }
  inline void Swap(token_uri_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(token_uri_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline token_uri_result* New() const final {
    return new token_uri_result();
  }

  token_uri_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<token_uri_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const token_uri_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const token_uri_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(token_uri_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.token_uri_result";
  }
  protected:
  explicit token_uri_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.token_uri_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class get_info_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.get_info_arguments) */ {
 public:
  inline get_info_arguments() : get_info_arguments(nullptr) {}
  ~get_info_arguments() override;
  explicit constexpr get_info_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_info_arguments(const get_info_arguments& from);
  get_info_arguments(get_info_arguments&& from) noexcept
    : get_info_arguments() {
    *this = ::std::move(from);
  }

  inline get_info_arguments& operator=(const get_info_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_info_arguments& operator=(get_info_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_info_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_info_arguments* internal_default_instance() {
    return reinterpret_cast<const get_info_arguments*>(
               &_get_info_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(get_info_arguments& a, get_info_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(get_info_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_info_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_info_arguments* New() const final {
    return new get_info_arguments();
  }

  get_info_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_info_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_info_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_info_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_info_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.get_info_arguments";
  }
  protected:
  explicit get_info_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.get_info_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class get_info_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.get_info_result) */ {
 public:
  inline get_info_result() : get_info_result(nullptr) {}
  ~get_info_result() override;
  explicit constexpr get_info_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_info_result(const get_info_result& from);
  get_info_result(get_info_result&& from) noexcept
    : get_info_result() {
    *this = ::std::move(from);
  }

  inline get_info_result& operator=(const get_info_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_info_result& operator=(get_info_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_info_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_info_result* internal_default_instance() {
    return reinterpret_cast<const get_info_result*>(
               &_get_info_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(get_info_result& a, get_info_result& b) {
    a.Swap(&b);
  }
  inline void Swap(get_info_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_info_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_info_result* New() const final {
    return new get_info_result();
  }

  get_info_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_info_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_info_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_info_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_info_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.get_info_result";
  }
  protected:
  explicit get_info_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kUriFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_MUST_USE_RESULT std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 uri = 3;
  void clear_uri();
  ::PROTOBUF_NAMESPACE_ID::uint32 uri() const;
  void set_uri(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uri() const;
  void _internal_set_uri(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.get_info_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uri_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class owner_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.owner_arguments) */ {
 public:
  inline owner_arguments() : owner_arguments(nullptr) {}
  ~owner_arguments() override;
  explicit constexpr owner_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  owner_arguments(const owner_arguments& from);
  owner_arguments(owner_arguments&& from) noexcept
    : owner_arguments() {
    *this = ::std::move(from);
  }

  inline owner_arguments& operator=(const owner_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline owner_arguments& operator=(owner_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const owner_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const owner_arguments* internal_default_instance() {
    return reinterpret_cast<const owner_arguments*>(
               &_owner_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(owner_arguments& a, owner_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(owner_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(owner_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline owner_arguments* New() const final {
    return new owner_arguments();
  }

  owner_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<owner_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const owner_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const owner_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(owner_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.owner_arguments";
  }
  protected:
  explicit owner_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.owner_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class owner_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.owner_result) */ {
 public:
  inline owner_result() : owner_result(nullptr) {}
  ~owner_result() override;
  explicit constexpr owner_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  owner_result(const owner_result& from);
  owner_result(owner_result&& from) noexcept
    : owner_result() {
    *this = ::std::move(from);
  }

  inline owner_result& operator=(const owner_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline owner_result& operator=(owner_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const owner_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const owner_result* internal_default_instance() {
    return reinterpret_cast<const owner_result*>(
               &_owner_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(owner_result& a, owner_result& b) {
    a.Swap(&b);
  }
  inline void Swap(owner_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(owner_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline owner_result* New() const final {
    return new owner_result();
  }

  owner_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<owner_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const owner_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const owner_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(owner_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.owner_result";
  }
  protected:
  explicit owner_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.owner_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class total_supply_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.total_supply_arguments) */ {
 public:
  inline total_supply_arguments() : total_supply_arguments(nullptr) {}
  ~total_supply_arguments() override;
  explicit constexpr total_supply_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  total_supply_arguments(const total_supply_arguments& from);
  total_supply_arguments(total_supply_arguments&& from) noexcept
    : total_supply_arguments() {
    *this = ::std::move(from);
  }

  inline total_supply_arguments& operator=(const total_supply_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline total_supply_arguments& operator=(total_supply_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const total_supply_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const total_supply_arguments* internal_default_instance() {
    return reinterpret_cast<const total_supply_arguments*>(
               &_total_supply_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(total_supply_arguments& a, total_supply_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(total_supply_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(total_supply_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline total_supply_arguments* New() const final {
    return new total_supply_arguments();
  }

  total_supply_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<total_supply_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const total_supply_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const total_supply_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(total_supply_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.total_supply_arguments";
  }
  protected:
  explicit total_supply_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.total_supply_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class total_supply_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.total_supply_result) */ {
 public:
  inline total_supply_result() : total_supply_result(nullptr) {}
  ~total_supply_result() override;
  explicit constexpr total_supply_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  total_supply_result(const total_supply_result& from);
  total_supply_result(total_supply_result&& from) noexcept
    : total_supply_result() {
    *this = ::std::move(from);
  }

  inline total_supply_result& operator=(const total_supply_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline total_supply_result& operator=(total_supply_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const total_supply_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const total_supply_result* internal_default_instance() {
    return reinterpret_cast<const total_supply_result*>(
               &_total_supply_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(total_supply_result& a, total_supply_result& b) {
    a.Swap(&b);
  }
  inline void Swap(total_supply_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(total_supply_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline total_supply_result* New() const final {
    return new total_supply_result();
  }

  total_supply_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<total_supply_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const total_supply_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const total_supply_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(total_supply_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.total_supply_result";
  }
  protected:
  explicit total_supply_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1 [jstype = JS_STRING];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.total_supply_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class royalty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.royalty) */ {
 public:
  inline royalty() : royalty(nullptr) {}
  ~royalty() override;
  explicit constexpr royalty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  royalty(const royalty& from);
  royalty(royalty&& from) noexcept
    : royalty() {
    *this = ::std::move(from);
  }

  inline royalty& operator=(const royalty& from) {
    CopyFrom(from);
    return *this;
  }
  inline royalty& operator=(royalty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const royalty& default_instance() {
    return *internal_default_instance();
  }
  static inline const royalty* internal_default_instance() {
    return reinterpret_cast<const royalty*>(
               &_royalty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(royalty& a, royalty& b) {
    a.Swap(&b);
  }
  inline void Swap(royalty* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(royalty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline royalty* New() const final {
    return new royalty();
  }

  royalty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<royalty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const royalty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const royalty& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(royalty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.royalty";
  }
  protected:
  explicit royalty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kPercentageFieldNumber = 1,
  };
  // bytes address = 2 [(.koinos.btype) = ADDRESS];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint64 percentage = 1 [jstype = JS_STRING];
  void clear_percentage();
  ::PROTOBUF_NAMESPACE_ID::uint64 percentage() const;
  void set_percentage(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_percentage() const;
  void _internal_set_percentage(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.royalty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 percentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class royalties_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.royalties_arguments) */ {
 public:
  inline royalties_arguments() : royalties_arguments(nullptr) {}
  ~royalties_arguments() override;
  explicit constexpr royalties_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  royalties_arguments(const royalties_arguments& from);
  royalties_arguments(royalties_arguments&& from) noexcept
    : royalties_arguments() {
    *this = ::std::move(from);
  }

  inline royalties_arguments& operator=(const royalties_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline royalties_arguments& operator=(royalties_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const royalties_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const royalties_arguments* internal_default_instance() {
    return reinterpret_cast<const royalties_arguments*>(
               &_royalties_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(royalties_arguments& a, royalties_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(royalties_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(royalties_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline royalties_arguments* New() const final {
    return new royalties_arguments();
  }

  royalties_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<royalties_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const royalties_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const royalties_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(royalties_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.royalties_arguments";
  }
  protected:
  explicit royalties_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.royalties_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class royalties_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.royalties_result) */ {
 public:
  inline royalties_result() : royalties_result(nullptr) {}
  ~royalties_result() override;
  explicit constexpr royalties_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  royalties_result(const royalties_result& from);
  royalties_result(royalties_result&& from) noexcept
    : royalties_result() {
    *this = ::std::move(from);
  }

  inline royalties_result& operator=(const royalties_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline royalties_result& operator=(royalties_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const royalties_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const royalties_result* internal_default_instance() {
    return reinterpret_cast<const royalties_result*>(
               &_royalties_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(royalties_result& a, royalties_result& b) {
    a.Swap(&b);
  }
  inline void Swap(royalties_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(royalties_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline royalties_result* New() const final {
    return new royalties_result();
  }

  royalties_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<royalties_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const royalties_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const royalties_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(royalties_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.royalties_result";
  }
  protected:
  explicit royalties_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .koinos.standards.kcs5.royalty value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::koinos::standards::kcs5::royalty* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty >*
      mutable_value();
  private:
  const ::koinos::standards::kcs5::royalty& _internal_value(int index) const;
  ::koinos::standards::kcs5::royalty* _internal_add_value();
  public:
  const ::koinos::standards::kcs5::royalty& value(int index) const;
  ::koinos::standards::kcs5::royalty* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty >&
      value() const;

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.royalties_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class balance_of_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.balance_of_arguments) */ {
 public:
  inline balance_of_arguments() : balance_of_arguments(nullptr) {}
  ~balance_of_arguments() override;
  explicit constexpr balance_of_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  balance_of_arguments(const balance_of_arguments& from);
  balance_of_arguments(balance_of_arguments&& from) noexcept
    : balance_of_arguments() {
    *this = ::std::move(from);
  }

  inline balance_of_arguments& operator=(const balance_of_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline balance_of_arguments& operator=(balance_of_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const balance_of_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const balance_of_arguments* internal_default_instance() {
    return reinterpret_cast<const balance_of_arguments*>(
               &_balance_of_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(balance_of_arguments& a, balance_of_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(balance_of_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(balance_of_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline balance_of_arguments* New() const final {
    return new balance_of_arguments();
  }

  balance_of_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<balance_of_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const balance_of_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const balance_of_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(balance_of_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.balance_of_arguments";
  }
  protected:
  explicit balance_of_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
  };
  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.balance_of_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class balance_of_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.balance_of_result) */ {
 public:
  inline balance_of_result() : balance_of_result(nullptr) {}
  ~balance_of_result() override;
  explicit constexpr balance_of_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  balance_of_result(const balance_of_result& from);
  balance_of_result(balance_of_result&& from) noexcept
    : balance_of_result() {
    *this = ::std::move(from);
  }

  inline balance_of_result& operator=(const balance_of_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline balance_of_result& operator=(balance_of_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const balance_of_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const balance_of_result* internal_default_instance() {
    return reinterpret_cast<const balance_of_result*>(
               &_balance_of_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(balance_of_result& a, balance_of_result& b) {
    a.Swap(&b);
  }
  inline void Swap(balance_of_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(balance_of_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline balance_of_result* New() const final {
    return new balance_of_result();
  }

  balance_of_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<balance_of_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const balance_of_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const balance_of_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(balance_of_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.balance_of_result";
  }
  protected:
  explicit balance_of_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1 [jstype = JS_STRING];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.balance_of_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class owner_of_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.owner_of_arguments) */ {
 public:
  inline owner_of_arguments() : owner_of_arguments(nullptr) {}
  ~owner_of_arguments() override;
  explicit constexpr owner_of_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  owner_of_arguments(const owner_of_arguments& from);
  owner_of_arguments(owner_of_arguments&& from) noexcept
    : owner_of_arguments() {
    *this = ::std::move(from);
  }

  inline owner_of_arguments& operator=(const owner_of_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline owner_of_arguments& operator=(owner_of_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const owner_of_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const owner_of_arguments* internal_default_instance() {
    return reinterpret_cast<const owner_of_arguments*>(
               &_owner_of_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(owner_of_arguments& a, owner_of_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(owner_of_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(owner_of_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline owner_of_arguments* New() const final {
    return new owner_of_arguments();
  }

  owner_of_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<owner_of_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const owner_of_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const owner_of_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(owner_of_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.owner_of_arguments";
  }
  protected:
  explicit owner_of_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenIdFieldNumber = 1,
  };
  // bytes token_id = 1 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.owner_of_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class owner_of_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.owner_of_result) */ {
 public:
  inline owner_of_result() : owner_of_result(nullptr) {}
  ~owner_of_result() override;
  explicit constexpr owner_of_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  owner_of_result(const owner_of_result& from);
  owner_of_result(owner_of_result&& from) noexcept
    : owner_of_result() {
    *this = ::std::move(from);
  }

  inline owner_of_result& operator=(const owner_of_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline owner_of_result& operator=(owner_of_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const owner_of_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const owner_of_result* internal_default_instance() {
    return reinterpret_cast<const owner_of_result*>(
               &_owner_of_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(owner_of_result& a, owner_of_result& b) {
    a.Swap(&b);
  }
  inline void Swap(owner_of_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(owner_of_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline owner_of_result* New() const final {
    return new owner_of_result();
  }

  owner_of_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<owner_of_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const owner_of_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const owner_of_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(owner_of_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.owner_of_result";
  }
  protected:
  explicit owner_of_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.owner_of_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class metadata_of_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.metadata_of_arguments) */ {
 public:
  inline metadata_of_arguments() : metadata_of_arguments(nullptr) {}
  ~metadata_of_arguments() override;
  explicit constexpr metadata_of_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  metadata_of_arguments(const metadata_of_arguments& from);
  metadata_of_arguments(metadata_of_arguments&& from) noexcept
    : metadata_of_arguments() {
    *this = ::std::move(from);
  }

  inline metadata_of_arguments& operator=(const metadata_of_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline metadata_of_arguments& operator=(metadata_of_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const metadata_of_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const metadata_of_arguments* internal_default_instance() {
    return reinterpret_cast<const metadata_of_arguments*>(
               &_metadata_of_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(metadata_of_arguments& a, metadata_of_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(metadata_of_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(metadata_of_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline metadata_of_arguments* New() const final {
    return new metadata_of_arguments();
  }

  metadata_of_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<metadata_of_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const metadata_of_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const metadata_of_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(metadata_of_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.metadata_of_arguments";
  }
  protected:
  explicit metadata_of_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenIdFieldNumber = 1,
  };
  // bytes token_id = 1 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.metadata_of_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class metadata_of_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.metadata_of_result) */ {
 public:
  inline metadata_of_result() : metadata_of_result(nullptr) {}
  ~metadata_of_result() override;
  explicit constexpr metadata_of_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  metadata_of_result(const metadata_of_result& from);
  metadata_of_result(metadata_of_result&& from) noexcept
    : metadata_of_result() {
    *this = ::std::move(from);
  }

  inline metadata_of_result& operator=(const metadata_of_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline metadata_of_result& operator=(metadata_of_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const metadata_of_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const metadata_of_result* internal_default_instance() {
    return reinterpret_cast<const metadata_of_result*>(
               &_metadata_of_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(metadata_of_result& a, metadata_of_result& b) {
    a.Swap(&b);
  }
  inline void Swap(metadata_of_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(metadata_of_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline metadata_of_result* New() const final {
    return new metadata_of_result();
  }

  metadata_of_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<metadata_of_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const metadata_of_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const metadata_of_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(metadata_of_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.metadata_of_result";
  }
  protected:
  explicit metadata_of_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.metadata_of_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class get_tokens_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.get_tokens_arguments) */ {
 public:
  inline get_tokens_arguments() : get_tokens_arguments(nullptr) {}
  ~get_tokens_arguments() override;
  explicit constexpr get_tokens_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_tokens_arguments(const get_tokens_arguments& from);
  get_tokens_arguments(get_tokens_arguments&& from) noexcept
    : get_tokens_arguments() {
    *this = ::std::move(from);
  }

  inline get_tokens_arguments& operator=(const get_tokens_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_tokens_arguments& operator=(get_tokens_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_tokens_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_tokens_arguments* internal_default_instance() {
    return reinterpret_cast<const get_tokens_arguments*>(
               &_get_tokens_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(get_tokens_arguments& a, get_tokens_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(get_tokens_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_tokens_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_tokens_arguments* New() const final {
    return new get_tokens_arguments();
  }

  get_tokens_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_tokens_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_tokens_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_tokens_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_tokens_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.get_tokens_arguments";
  }
  protected:
  explicit get_tokens_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kLimitFieldNumber = 2,
    kDescendingFieldNumber = 3,
  };
  // bytes start = 1 [(.koinos.btype) = HEX];
  void clear_start();
  const std::string& start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start();
  PROTOBUF_MUST_USE_RESULT std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // int32 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool descending = 3;
  void clear_descending();
  bool descending() const;
  void set_descending(bool value);
  private:
  bool _internal_descending() const;
  void _internal_set_descending(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.get_tokens_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  bool descending_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class get_tokens_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.get_tokens_result) */ {
 public:
  inline get_tokens_result() : get_tokens_result(nullptr) {}
  ~get_tokens_result() override;
  explicit constexpr get_tokens_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_tokens_result(const get_tokens_result& from);
  get_tokens_result(get_tokens_result&& from) noexcept
    : get_tokens_result() {
    *this = ::std::move(from);
  }

  inline get_tokens_result& operator=(const get_tokens_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_tokens_result& operator=(get_tokens_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_tokens_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_tokens_result* internal_default_instance() {
    return reinterpret_cast<const get_tokens_result*>(
               &_get_tokens_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(get_tokens_result& a, get_tokens_result& b) {
    a.Swap(&b);
  }
  inline void Swap(get_tokens_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_tokens_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_tokens_result* New() const final {
    return new get_tokens_result();
  }

  get_tokens_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_tokens_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_tokens_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_tokens_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_tokens_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.get_tokens_result";
  }
  protected:
  explicit get_tokens_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated bytes values = 1 [(.koinos.btype) = HEX];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.get_tokens_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class get_tokens_by_owner_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.get_tokens_by_owner_arguments) */ {
 public:
  inline get_tokens_by_owner_arguments() : get_tokens_by_owner_arguments(nullptr) {}
  ~get_tokens_by_owner_arguments() override;
  explicit constexpr get_tokens_by_owner_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_tokens_by_owner_arguments(const get_tokens_by_owner_arguments& from);
  get_tokens_by_owner_arguments(get_tokens_by_owner_arguments&& from) noexcept
    : get_tokens_by_owner_arguments() {
    *this = ::std::move(from);
  }

  inline get_tokens_by_owner_arguments& operator=(const get_tokens_by_owner_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_tokens_by_owner_arguments& operator=(get_tokens_by_owner_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_tokens_by_owner_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_tokens_by_owner_arguments* internal_default_instance() {
    return reinterpret_cast<const get_tokens_by_owner_arguments*>(
               &_get_tokens_by_owner_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(get_tokens_by_owner_arguments& a, get_tokens_by_owner_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(get_tokens_by_owner_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_tokens_by_owner_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_tokens_by_owner_arguments* New() const final {
    return new get_tokens_by_owner_arguments();
  }

  get_tokens_by_owner_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_tokens_by_owner_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_tokens_by_owner_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_tokens_by_owner_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_tokens_by_owner_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.get_tokens_by_owner_arguments";
  }
  protected:
  explicit get_tokens_by_owner_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kStartFieldNumber = 2,
    kLimitFieldNumber = 3,
    kDescendingFieldNumber = 4,
  };
  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // bytes start = 2 [(.koinos.btype) = HEX];
  void clear_start();
  const std::string& start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start();
  PROTOBUF_MUST_USE_RESULT std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // int32 limit = 3;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool descending = 4;
  void clear_descending();
  bool descending() const;
  void set_descending(bool value);
  private:
  bool _internal_descending() const;
  void _internal_set_descending(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.get_tokens_by_owner_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  bool descending_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class get_tokens_by_owner_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.get_tokens_by_owner_result) */ {
 public:
  inline get_tokens_by_owner_result() : get_tokens_by_owner_result(nullptr) {}
  ~get_tokens_by_owner_result() override;
  explicit constexpr get_tokens_by_owner_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_tokens_by_owner_result(const get_tokens_by_owner_result& from);
  get_tokens_by_owner_result(get_tokens_by_owner_result&& from) noexcept
    : get_tokens_by_owner_result() {
    *this = ::std::move(from);
  }

  inline get_tokens_by_owner_result& operator=(const get_tokens_by_owner_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_tokens_by_owner_result& operator=(get_tokens_by_owner_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_tokens_by_owner_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_tokens_by_owner_result* internal_default_instance() {
    return reinterpret_cast<const get_tokens_by_owner_result*>(
               &_get_tokens_by_owner_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(get_tokens_by_owner_result& a, get_tokens_by_owner_result& b) {
    a.Swap(&b);
  }
  inline void Swap(get_tokens_by_owner_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_tokens_by_owner_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_tokens_by_owner_result* New() const final {
    return new get_tokens_by_owner_result();
  }

  get_tokens_by_owner_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_tokens_by_owner_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_tokens_by_owner_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_tokens_by_owner_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_tokens_by_owner_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.get_tokens_by_owner_result";
  }
  protected:
  explicit get_tokens_by_owner_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated bytes values = 1 [(.koinos.btype) = HEX];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.get_tokens_by_owner_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class get_approved_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.get_approved_arguments) */ {
 public:
  inline get_approved_arguments() : get_approved_arguments(nullptr) {}
  ~get_approved_arguments() override;
  explicit constexpr get_approved_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_approved_arguments(const get_approved_arguments& from);
  get_approved_arguments(get_approved_arguments&& from) noexcept
    : get_approved_arguments() {
    *this = ::std::move(from);
  }

  inline get_approved_arguments& operator=(const get_approved_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_approved_arguments& operator=(get_approved_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_approved_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_approved_arguments* internal_default_instance() {
    return reinterpret_cast<const get_approved_arguments*>(
               &_get_approved_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(get_approved_arguments& a, get_approved_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(get_approved_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_approved_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_approved_arguments* New() const final {
    return new get_approved_arguments();
  }

  get_approved_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_approved_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_approved_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_approved_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_approved_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.get_approved_arguments";
  }
  protected:
  explicit get_approved_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenIdFieldNumber = 1,
  };
  // bytes token_id = 1 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.get_approved_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class get_approved_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.get_approved_result) */ {
 public:
  inline get_approved_result() : get_approved_result(nullptr) {}
  ~get_approved_result() override;
  explicit constexpr get_approved_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_approved_result(const get_approved_result& from);
  get_approved_result(get_approved_result&& from) noexcept
    : get_approved_result() {
    *this = ::std::move(from);
  }

  inline get_approved_result& operator=(const get_approved_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_approved_result& operator=(get_approved_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_approved_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_approved_result* internal_default_instance() {
    return reinterpret_cast<const get_approved_result*>(
               &_get_approved_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(get_approved_result& a, get_approved_result& b) {
    a.Swap(&b);
  }
  inline void Swap(get_approved_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_approved_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_approved_result* New() const final {
    return new get_approved_result();
  }

  get_approved_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_approved_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_approved_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_approved_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_approved_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.get_approved_result";
  }
  protected:
  explicit get_approved_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1 [(.koinos.btype) = ADDRESS];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.get_approved_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class is_approved_for_all_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.is_approved_for_all_arguments) */ {
 public:
  inline is_approved_for_all_arguments() : is_approved_for_all_arguments(nullptr) {}
  ~is_approved_for_all_arguments() override;
  explicit constexpr is_approved_for_all_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  is_approved_for_all_arguments(const is_approved_for_all_arguments& from);
  is_approved_for_all_arguments(is_approved_for_all_arguments&& from) noexcept
    : is_approved_for_all_arguments() {
    *this = ::std::move(from);
  }

  inline is_approved_for_all_arguments& operator=(const is_approved_for_all_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline is_approved_for_all_arguments& operator=(is_approved_for_all_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const is_approved_for_all_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const is_approved_for_all_arguments* internal_default_instance() {
    return reinterpret_cast<const is_approved_for_all_arguments*>(
               &_is_approved_for_all_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(is_approved_for_all_arguments& a, is_approved_for_all_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(is_approved_for_all_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(is_approved_for_all_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline is_approved_for_all_arguments* New() const final {
    return new is_approved_for_all_arguments();
  }

  is_approved_for_all_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<is_approved_for_all_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const is_approved_for_all_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const is_approved_for_all_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(is_approved_for_all_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.is_approved_for_all_arguments";
  }
  protected:
  explicit is_approved_for_all_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kOperatorFieldNumber = 2,
  };
  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // bytes operator = 2 [(.koinos.btype) = ADDRESS];
  void clear_operator_();
  const std::string& operator_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operator_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operator_();
  PROTOBUF_MUST_USE_RESULT std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);
  private:
  const std::string& _internal_operator_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_(const std::string& value);
  std::string* _internal_mutable_operator_();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.is_approved_for_all_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class is_approved_for_all_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.is_approved_for_all_result) */ {
 public:
  inline is_approved_for_all_result() : is_approved_for_all_result(nullptr) {}
  ~is_approved_for_all_result() override;
  explicit constexpr is_approved_for_all_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  is_approved_for_all_result(const is_approved_for_all_result& from);
  is_approved_for_all_result(is_approved_for_all_result&& from) noexcept
    : is_approved_for_all_result() {
    *this = ::std::move(from);
  }

  inline is_approved_for_all_result& operator=(const is_approved_for_all_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline is_approved_for_all_result& operator=(is_approved_for_all_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const is_approved_for_all_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const is_approved_for_all_result* internal_default_instance() {
    return reinterpret_cast<const is_approved_for_all_result*>(
               &_is_approved_for_all_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(is_approved_for_all_result& a, is_approved_for_all_result& b) {
    a.Swap(&b);
  }
  inline void Swap(is_approved_for_all_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(is_approved_for_all_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline is_approved_for_all_result* New() const final {
    return new is_approved_for_all_result();
  }

  is_approved_for_all_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<is_approved_for_all_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const is_approved_for_all_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const is_approved_for_all_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(is_approved_for_all_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.is_approved_for_all_result";
  }
  protected:
  explicit is_approved_for_all_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.is_approved_for_all_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class get_operator_approvals_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.get_operator_approvals_arguments) */ {
 public:
  inline get_operator_approvals_arguments() : get_operator_approvals_arguments(nullptr) {}
  ~get_operator_approvals_arguments() override;
  explicit constexpr get_operator_approvals_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_operator_approvals_arguments(const get_operator_approvals_arguments& from);
  get_operator_approvals_arguments(get_operator_approvals_arguments&& from) noexcept
    : get_operator_approvals_arguments() {
    *this = ::std::move(from);
  }

  inline get_operator_approvals_arguments& operator=(const get_operator_approvals_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_operator_approvals_arguments& operator=(get_operator_approvals_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_operator_approvals_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_operator_approvals_arguments* internal_default_instance() {
    return reinterpret_cast<const get_operator_approvals_arguments*>(
               &_get_operator_approvals_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(get_operator_approvals_arguments& a, get_operator_approvals_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(get_operator_approvals_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_operator_approvals_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_operator_approvals_arguments* New() const final {
    return new get_operator_approvals_arguments();
  }

  get_operator_approvals_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_operator_approvals_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_operator_approvals_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_operator_approvals_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_operator_approvals_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.get_operator_approvals_arguments";
  }
  protected:
  explicit get_operator_approvals_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kStartFieldNumber = 2,
    kLimitFieldNumber = 3,
    kDescendingFieldNumber = 4,
  };
  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // bytes start = 2 [(.koinos.btype) = ADDRESS];
  void clear_start();
  const std::string& start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start();
  PROTOBUF_MUST_USE_RESULT std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // int32 limit = 3;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool descending = 4;
  void clear_descending();
  bool descending() const;
  void set_descending(bool value);
  private:
  bool _internal_descending() const;
  void _internal_set_descending(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.get_operator_approvals_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  bool descending_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class get_operator_approvals_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.get_operator_approvals_result) */ {
 public:
  inline get_operator_approvals_result() : get_operator_approvals_result(nullptr) {}
  ~get_operator_approvals_result() override;
  explicit constexpr get_operator_approvals_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  get_operator_approvals_result(const get_operator_approvals_result& from);
  get_operator_approvals_result(get_operator_approvals_result&& from) noexcept
    : get_operator_approvals_result() {
    *this = ::std::move(from);
  }

  inline get_operator_approvals_result& operator=(const get_operator_approvals_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_operator_approvals_result& operator=(get_operator_approvals_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const get_operator_approvals_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const get_operator_approvals_result* internal_default_instance() {
    return reinterpret_cast<const get_operator_approvals_result*>(
               &_get_operator_approvals_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(get_operator_approvals_result& a, get_operator_approvals_result& b) {
    a.Swap(&b);
  }
  inline void Swap(get_operator_approvals_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_operator_approvals_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_operator_approvals_result* New() const final {
    return new get_operator_approvals_result();
  }

  get_operator_approvals_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_operator_approvals_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const get_operator_approvals_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const get_operator_approvals_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_operator_approvals_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.get_operator_approvals_result";
  }
  protected:
  explicit get_operator_approvals_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperatorsFieldNumber = 2,
    kOwnerFieldNumber = 1,
  };
  // repeated bytes operators = 2 [(.koinos.btype) = ADDRESS];
  int operators_size() const;
  private:
  int _internal_operators_size() const;
  public:
  void clear_operators();
  const std::string& operators(int index) const;
  std::string* mutable_operators(int index);
  void set_operators(int index, const std::string& value);
  void set_operators(int index, std::string&& value);
  void set_operators(int index, const char* value);
  void set_operators(int index, const void* value, size_t size);
  std::string* add_operators();
  void add_operators(const std::string& value);
  void add_operators(std::string&& value);
  void add_operators(const char* value);
  void add_operators(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& operators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_operators();
  private:
  const std::string& _internal_operators(int index) const;
  std::string* _internal_add_operators();
  public:

  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.get_operator_approvals_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> operators_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class transfer_ownership_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.transfer_ownership_arguments) */ {
 public:
  inline transfer_ownership_arguments() : transfer_ownership_arguments(nullptr) {}
  ~transfer_ownership_arguments() override;
  explicit constexpr transfer_ownership_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transfer_ownership_arguments(const transfer_ownership_arguments& from);
  transfer_ownership_arguments(transfer_ownership_arguments&& from) noexcept
    : transfer_ownership_arguments() {
    *this = ::std::move(from);
  }

  inline transfer_ownership_arguments& operator=(const transfer_ownership_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline transfer_ownership_arguments& operator=(transfer_ownership_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transfer_ownership_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const transfer_ownership_arguments* internal_default_instance() {
    return reinterpret_cast<const transfer_ownership_arguments*>(
               &_transfer_ownership_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(transfer_ownership_arguments& a, transfer_ownership_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(transfer_ownership_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transfer_ownership_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transfer_ownership_arguments* New() const final {
    return new transfer_ownership_arguments();
  }

  transfer_ownership_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transfer_ownership_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transfer_ownership_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transfer_ownership_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transfer_ownership_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.transfer_ownership_arguments";
  }
  protected:
  explicit transfer_ownership_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
  };
  // bytes to = 1 [(.koinos.btype) = ADDRESS];
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.transfer_ownership_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class transfer_ownership_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.transfer_ownership_result) */ {
 public:
  inline transfer_ownership_result() : transfer_ownership_result(nullptr) {}
  ~transfer_ownership_result() override;
  explicit constexpr transfer_ownership_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transfer_ownership_result(const transfer_ownership_result& from);
  transfer_ownership_result(transfer_ownership_result&& from) noexcept
    : transfer_ownership_result() {
    *this = ::std::move(from);
  }

  inline transfer_ownership_result& operator=(const transfer_ownership_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline transfer_ownership_result& operator=(transfer_ownership_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transfer_ownership_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const transfer_ownership_result* internal_default_instance() {
    return reinterpret_cast<const transfer_ownership_result*>(
               &_transfer_ownership_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(transfer_ownership_result& a, transfer_ownership_result& b) {
    a.Swap(&b);
  }
  inline void Swap(transfer_ownership_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transfer_ownership_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transfer_ownership_result* New() const final {
    return new transfer_ownership_result();
  }

  transfer_ownership_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transfer_ownership_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transfer_ownership_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transfer_ownership_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transfer_ownership_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.transfer_ownership_result";
  }
  protected:
  explicit transfer_ownership_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.transfer_ownership_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class owner_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.owner_event) */ {
 public:
  inline owner_event() : owner_event(nullptr) {}
  ~owner_event() override;
  explicit constexpr owner_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  owner_event(const owner_event& from);
  owner_event(owner_event&& from) noexcept
    : owner_event() {
    *this = ::std::move(from);
  }

  inline owner_event& operator=(const owner_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline owner_event& operator=(owner_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const owner_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const owner_event* internal_default_instance() {
    return reinterpret_cast<const owner_event*>(
               &_owner_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(owner_event& a, owner_event& b) {
    a.Swap(&b);
  }
  inline void Swap(owner_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(owner_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline owner_event* New() const final {
    return new owner_event();
  }

  owner_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<owner_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const owner_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const owner_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(owner_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.owner_event";
  }
  protected:
  explicit owner_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_MUST_USE_RESULT std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.owner_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class set_royalties_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.set_royalties_arguments) */ {
 public:
  inline set_royalties_arguments() : set_royalties_arguments(nullptr) {}
  ~set_royalties_arguments() override;
  explicit constexpr set_royalties_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set_royalties_arguments(const set_royalties_arguments& from);
  set_royalties_arguments(set_royalties_arguments&& from) noexcept
    : set_royalties_arguments() {
    *this = ::std::move(from);
  }

  inline set_royalties_arguments& operator=(const set_royalties_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_royalties_arguments& operator=(set_royalties_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set_royalties_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const set_royalties_arguments* internal_default_instance() {
    return reinterpret_cast<const set_royalties_arguments*>(
               &_set_royalties_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(set_royalties_arguments& a, set_royalties_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(set_royalties_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_royalties_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_royalties_arguments* New() const final {
    return new set_royalties_arguments();
  }

  set_royalties_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_royalties_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set_royalties_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const set_royalties_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_royalties_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.set_royalties_arguments";
  }
  protected:
  explicit set_royalties_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .koinos.standards.kcs5.royalty value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::koinos::standards::kcs5::royalty* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty >*
      mutable_value();
  private:
  const ::koinos::standards::kcs5::royalty& _internal_value(int index) const;
  ::koinos::standards::kcs5::royalty* _internal_add_value();
  public:
  const ::koinos::standards::kcs5::royalty& value(int index) const;
  ::koinos::standards::kcs5::royalty* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty >&
      value() const;

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.set_royalties_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class set_royalties_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.set_royalties_result) */ {
 public:
  inline set_royalties_result() : set_royalties_result(nullptr) {}
  ~set_royalties_result() override;
  explicit constexpr set_royalties_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set_royalties_result(const set_royalties_result& from);
  set_royalties_result(set_royalties_result&& from) noexcept
    : set_royalties_result() {
    *this = ::std::move(from);
  }

  inline set_royalties_result& operator=(const set_royalties_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_royalties_result& operator=(set_royalties_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set_royalties_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const set_royalties_result* internal_default_instance() {
    return reinterpret_cast<const set_royalties_result*>(
               &_set_royalties_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(set_royalties_result& a, set_royalties_result& b) {
    a.Swap(&b);
  }
  inline void Swap(set_royalties_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_royalties_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_royalties_result* New() const final {
    return new set_royalties_result();
  }

  set_royalties_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_royalties_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set_royalties_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const set_royalties_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_royalties_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.set_royalties_result";
  }
  protected:
  explicit set_royalties_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.set_royalties_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class royalties_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.royalties_event) */ {
 public:
  inline royalties_event() : royalties_event(nullptr) {}
  ~royalties_event() override;
  explicit constexpr royalties_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  royalties_event(const royalties_event& from);
  royalties_event(royalties_event&& from) noexcept
    : royalties_event() {
    *this = ::std::move(from);
  }

  inline royalties_event& operator=(const royalties_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline royalties_event& operator=(royalties_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const royalties_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const royalties_event* internal_default_instance() {
    return reinterpret_cast<const royalties_event*>(
               &_royalties_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(royalties_event& a, royalties_event& b) {
    a.Swap(&b);
  }
  inline void Swap(royalties_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(royalties_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline royalties_event* New() const final {
    return new royalties_event();
  }

  royalties_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<royalties_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const royalties_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const royalties_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(royalties_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.royalties_event";
  }
  protected:
  explicit royalties_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .koinos.standards.kcs5.royalty value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::koinos::standards::kcs5::royalty* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty >*
      mutable_value();
  private:
  const ::koinos::standards::kcs5::royalty& _internal_value(int index) const;
  ::koinos::standards::kcs5::royalty* _internal_add_value();
  public:
  const ::koinos::standards::kcs5::royalty& value(int index) const;
  ::koinos::standards::kcs5::royalty* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty >&
      value() const;

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.royalties_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class set_metadata_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.set_metadata_arguments) */ {
 public:
  inline set_metadata_arguments() : set_metadata_arguments(nullptr) {}
  ~set_metadata_arguments() override;
  explicit constexpr set_metadata_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set_metadata_arguments(const set_metadata_arguments& from);
  set_metadata_arguments(set_metadata_arguments&& from) noexcept
    : set_metadata_arguments() {
    *this = ::std::move(from);
  }

  inline set_metadata_arguments& operator=(const set_metadata_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_metadata_arguments& operator=(set_metadata_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set_metadata_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const set_metadata_arguments* internal_default_instance() {
    return reinterpret_cast<const set_metadata_arguments*>(
               &_set_metadata_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(set_metadata_arguments& a, set_metadata_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(set_metadata_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_metadata_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_metadata_arguments* New() const final {
    return new set_metadata_arguments();
  }

  set_metadata_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_metadata_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set_metadata_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const set_metadata_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_metadata_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.set_metadata_arguments";
  }
  protected:
  explicit set_metadata_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenIdFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // bytes token_id = 1 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // string metadata = 2;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_MUST_USE_RESULT std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.set_metadata_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class set_metadata_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.set_metadata_result) */ {
 public:
  inline set_metadata_result() : set_metadata_result(nullptr) {}
  ~set_metadata_result() override;
  explicit constexpr set_metadata_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set_metadata_result(const set_metadata_result& from);
  set_metadata_result(set_metadata_result&& from) noexcept
    : set_metadata_result() {
    *this = ::std::move(from);
  }

  inline set_metadata_result& operator=(const set_metadata_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_metadata_result& operator=(set_metadata_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set_metadata_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const set_metadata_result* internal_default_instance() {
    return reinterpret_cast<const set_metadata_result*>(
               &_set_metadata_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(set_metadata_result& a, set_metadata_result& b) {
    a.Swap(&b);
  }
  inline void Swap(set_metadata_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_metadata_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_metadata_result* New() const final {
    return new set_metadata_result();
  }

  set_metadata_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_metadata_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set_metadata_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const set_metadata_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_metadata_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.set_metadata_result";
  }
  protected:
  explicit set_metadata_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.set_metadata_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class set_metadata_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.set_metadata_event) */ {
 public:
  inline set_metadata_event() : set_metadata_event(nullptr) {}
  ~set_metadata_event() override;
  explicit constexpr set_metadata_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set_metadata_event(const set_metadata_event& from);
  set_metadata_event(set_metadata_event&& from) noexcept
    : set_metadata_event() {
    *this = ::std::move(from);
  }

  inline set_metadata_event& operator=(const set_metadata_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_metadata_event& operator=(set_metadata_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set_metadata_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const set_metadata_event* internal_default_instance() {
    return reinterpret_cast<const set_metadata_event*>(
               &_set_metadata_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(set_metadata_event& a, set_metadata_event& b) {
    a.Swap(&b);
  }
  inline void Swap(set_metadata_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_metadata_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_metadata_event* New() const final {
    return new set_metadata_event();
  }

  set_metadata_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_metadata_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set_metadata_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const set_metadata_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_metadata_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.set_metadata_event";
  }
  protected:
  explicit set_metadata_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenIdFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // bytes token_id = 1 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // string metadata = 2;
  void clear_metadata();
  const std::string& metadata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_metadata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_metadata();
  PROTOBUF_MUST_USE_RESULT std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.set_metadata_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class approve_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.approve_arguments) */ {
 public:
  inline approve_arguments() : approve_arguments(nullptr) {}
  ~approve_arguments() override;
  explicit constexpr approve_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  approve_arguments(const approve_arguments& from);
  approve_arguments(approve_arguments&& from) noexcept
    : approve_arguments() {
    *this = ::std::move(from);
  }

  inline approve_arguments& operator=(const approve_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline approve_arguments& operator=(approve_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const approve_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const approve_arguments* internal_default_instance() {
    return reinterpret_cast<const approve_arguments*>(
               &_approve_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(approve_arguments& a, approve_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(approve_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(approve_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline approve_arguments* New() const final {
    return new approve_arguments();
  }

  approve_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<approve_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const approve_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const approve_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(approve_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.approve_arguments";
  }
  protected:
  explicit approve_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kOperatorFieldNumber = 2,
    kTokenIdFieldNumber = 3,
    kMemoFieldNumber = 4,
    kApproveFieldNumber = 5,
  };
  // bytes owner = 1 [deprecated = true, (.koinos.btype) = ADDRESS];
  PROTOBUF_DEPRECATED void clear_owner();
  PROTOBUF_DEPRECATED const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_owner(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED std::string* release_owner();
  PROTOBUF_DEPRECATED void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // bytes operator = 2 [(.koinos.btype) = ADDRESS];
  void clear_operator_();
  const std::string& operator_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operator_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operator_();
  PROTOBUF_MUST_USE_RESULT std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);
  private:
  const std::string& _internal_operator_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_(const std::string& value);
  std::string* _internal_mutable_operator_();
  public:

  // bytes token_id = 3 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // optional string memo = 4;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_MUST_USE_RESULT std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // optional bool approve = 5;
  bool has_approve() const;
  private:
  bool _internal_has_approve() const;
  public:
  void clear_approve();
  bool approve() const;
  void set_approve(bool value);
  private:
  bool _internal_approve() const;
  void _internal_set_approve(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.approve_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  bool approve_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class approve_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.approve_result) */ {
 public:
  inline approve_result() : approve_result(nullptr) {}
  ~approve_result() override;
  explicit constexpr approve_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  approve_result(const approve_result& from);
  approve_result(approve_result&& from) noexcept
    : approve_result() {
    *this = ::std::move(from);
  }

  inline approve_result& operator=(const approve_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline approve_result& operator=(approve_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const approve_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const approve_result* internal_default_instance() {
    return reinterpret_cast<const approve_result*>(
               &_approve_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(approve_result& a, approve_result& b) {
    a.Swap(&b);
  }
  inline void Swap(approve_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(approve_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline approve_result* New() const final {
    return new approve_result();
  }

  approve_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<approve_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const approve_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const approve_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(approve_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.approve_result";
  }
  protected:
  explicit approve_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.approve_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class token_approval_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.token_approval_event) */ {
 public:
  inline token_approval_event() : token_approval_event(nullptr) {}
  ~token_approval_event() override;
  explicit constexpr token_approval_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  token_approval_event(const token_approval_event& from);
  token_approval_event(token_approval_event&& from) noexcept
    : token_approval_event() {
    *this = ::std::move(from);
  }

  inline token_approval_event& operator=(const token_approval_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline token_approval_event& operator=(token_approval_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const token_approval_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const token_approval_event* internal_default_instance() {
    return reinterpret_cast<const token_approval_event*>(
               &_token_approval_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(token_approval_event& a, token_approval_event& b) {
    a.Swap(&b);
  }
  inline void Swap(token_approval_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(token_approval_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline token_approval_event* New() const final {
    return new token_approval_event();
  }

  token_approval_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<token_approval_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const token_approval_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const token_approval_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(token_approval_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.token_approval_event";
  }
  protected:
  explicit token_approval_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kOperatorFieldNumber = 2,
    kTokenIdFieldNumber = 3,
    kMemoFieldNumber = 4,
    kApproveFieldNumber = 5,
  };
  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // bytes operator = 2 [(.koinos.btype) = ADDRESS];
  void clear_operator_();
  const std::string& operator_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operator_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operator_();
  PROTOBUF_MUST_USE_RESULT std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);
  private:
  const std::string& _internal_operator_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_(const std::string& value);
  std::string* _internal_mutable_operator_();
  public:

  // bytes token_id = 3 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // optional string memo = 4;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_MUST_USE_RESULT std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // optional bool approve = 5;
  bool has_approve() const;
  private:
  bool _internal_has_approve() const;
  public:
  void clear_approve();
  bool approve() const;
  void set_approve(bool value);
  private:
  bool _internal_approve() const;
  void _internal_set_approve(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.token_approval_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  bool approve_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class set_approval_for_all_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.set_approval_for_all_arguments) */ {
 public:
  inline set_approval_for_all_arguments() : set_approval_for_all_arguments(nullptr) {}
  ~set_approval_for_all_arguments() override;
  explicit constexpr set_approval_for_all_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set_approval_for_all_arguments(const set_approval_for_all_arguments& from);
  set_approval_for_all_arguments(set_approval_for_all_arguments&& from) noexcept
    : set_approval_for_all_arguments() {
    *this = ::std::move(from);
  }

  inline set_approval_for_all_arguments& operator=(const set_approval_for_all_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_approval_for_all_arguments& operator=(set_approval_for_all_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set_approval_for_all_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const set_approval_for_all_arguments* internal_default_instance() {
    return reinterpret_cast<const set_approval_for_all_arguments*>(
               &_set_approval_for_all_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(set_approval_for_all_arguments& a, set_approval_for_all_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(set_approval_for_all_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_approval_for_all_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_approval_for_all_arguments* New() const final {
    return new set_approval_for_all_arguments();
  }

  set_approval_for_all_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_approval_for_all_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set_approval_for_all_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const set_approval_for_all_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_approval_for_all_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.set_approval_for_all_arguments";
  }
  protected:
  explicit set_approval_for_all_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kOperatorFieldNumber = 2,
    kMemoFieldNumber = 4,
    kApprovedFieldNumber = 3,
  };
  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // bytes operator = 2 [(.koinos.btype) = ADDRESS];
  void clear_operator_();
  const std::string& operator_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operator_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operator_();
  PROTOBUF_MUST_USE_RESULT std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);
  private:
  const std::string& _internal_operator_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_(const std::string& value);
  std::string* _internal_mutable_operator_();
  public:

  // optional string memo = 4;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_MUST_USE_RESULT std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bool approved = 3;
  void clear_approved();
  bool approved() const;
  void set_approved(bool value);
  private:
  bool _internal_approved() const;
  void _internal_set_approved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.set_approval_for_all_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  bool approved_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class set_approval_for_all_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.set_approval_for_all_result) */ {
 public:
  inline set_approval_for_all_result() : set_approval_for_all_result(nullptr) {}
  ~set_approval_for_all_result() override;
  explicit constexpr set_approval_for_all_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set_approval_for_all_result(const set_approval_for_all_result& from);
  set_approval_for_all_result(set_approval_for_all_result&& from) noexcept
    : set_approval_for_all_result() {
    *this = ::std::move(from);
  }

  inline set_approval_for_all_result& operator=(const set_approval_for_all_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_approval_for_all_result& operator=(set_approval_for_all_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set_approval_for_all_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const set_approval_for_all_result* internal_default_instance() {
    return reinterpret_cast<const set_approval_for_all_result*>(
               &_set_approval_for_all_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(set_approval_for_all_result& a, set_approval_for_all_result& b) {
    a.Swap(&b);
  }
  inline void Swap(set_approval_for_all_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_approval_for_all_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_approval_for_all_result* New() const final {
    return new set_approval_for_all_result();
  }

  set_approval_for_all_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_approval_for_all_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set_approval_for_all_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const set_approval_for_all_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_approval_for_all_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.set_approval_for_all_result";
  }
  protected:
  explicit set_approval_for_all_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.set_approval_for_all_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class operator_approval_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.operator_approval_event) */ {
 public:
  inline operator_approval_event() : operator_approval_event(nullptr) {}
  ~operator_approval_event() override;
  explicit constexpr operator_approval_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  operator_approval_event(const operator_approval_event& from);
  operator_approval_event(operator_approval_event&& from) noexcept
    : operator_approval_event() {
    *this = ::std::move(from);
  }

  inline operator_approval_event& operator=(const operator_approval_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline operator_approval_event& operator=(operator_approval_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const operator_approval_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const operator_approval_event* internal_default_instance() {
    return reinterpret_cast<const operator_approval_event*>(
               &_operator_approval_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(operator_approval_event& a, operator_approval_event& b) {
    a.Swap(&b);
  }
  inline void Swap(operator_approval_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(operator_approval_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline operator_approval_event* New() const final {
    return new operator_approval_event();
  }

  operator_approval_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<operator_approval_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const operator_approval_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const operator_approval_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(operator_approval_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.operator_approval_event";
  }
  protected:
  explicit operator_approval_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kOperatorFieldNumber = 2,
    kMemoFieldNumber = 4,
    kApprovedFieldNumber = 3,
  };
  // bytes owner = 1 [(.koinos.btype) = ADDRESS];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // bytes operator = 2 [(.koinos.btype) = ADDRESS];
  void clear_operator_();
  const std::string& operator_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_operator_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_operator_();
  PROTOBUF_MUST_USE_RESULT std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);
  private:
  const std::string& _internal_operator_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_(const std::string& value);
  std::string* _internal_mutable_operator_();
  public:

  // optional string memo = 4;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_MUST_USE_RESULT std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bool approved = 3;
  void clear_approved();
  bool approved() const;
  void set_approved(bool value);
  private:
  bool _internal_approved() const;
  void _internal_set_approved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.operator_approval_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  bool approved_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class mint_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.mint_arguments) */ {
 public:
  inline mint_arguments() : mint_arguments(nullptr) {}
  ~mint_arguments() override;
  explicit constexpr mint_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mint_arguments(const mint_arguments& from);
  mint_arguments(mint_arguments&& from) noexcept
    : mint_arguments() {
    *this = ::std::move(from);
  }

  inline mint_arguments& operator=(const mint_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline mint_arguments& operator=(mint_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mint_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const mint_arguments* internal_default_instance() {
    return reinterpret_cast<const mint_arguments*>(
               &_mint_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(mint_arguments& a, mint_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(mint_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mint_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mint_arguments* New() const final {
    return new mint_arguments();
  }

  mint_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mint_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mint_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const mint_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mint_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.mint_arguments";
  }
  protected:
  explicit mint_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kTokenIdFieldNumber = 2,
    kMemoFieldNumber = 3,
  };
  // bytes to = 1 [(.koinos.btype) = ADDRESS];
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes token_id = 2 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // optional string memo = 3;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_MUST_USE_RESULT std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.mint_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class mint_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.mint_result) */ {
 public:
  inline mint_result() : mint_result(nullptr) {}
  ~mint_result() override;
  explicit constexpr mint_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mint_result(const mint_result& from);
  mint_result(mint_result&& from) noexcept
    : mint_result() {
    *this = ::std::move(from);
  }

  inline mint_result& operator=(const mint_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline mint_result& operator=(mint_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mint_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const mint_result* internal_default_instance() {
    return reinterpret_cast<const mint_result*>(
               &_mint_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(mint_result& a, mint_result& b) {
    a.Swap(&b);
  }
  inline void Swap(mint_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mint_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mint_result* New() const final {
    return new mint_result();
  }

  mint_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mint_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mint_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const mint_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mint_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.mint_result";
  }
  protected:
  explicit mint_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.mint_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class mint_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.mint_event) */ {
 public:
  inline mint_event() : mint_event(nullptr) {}
  ~mint_event() override;
  explicit constexpr mint_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mint_event(const mint_event& from);
  mint_event(mint_event&& from) noexcept
    : mint_event() {
    *this = ::std::move(from);
  }

  inline mint_event& operator=(const mint_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline mint_event& operator=(mint_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mint_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const mint_event* internal_default_instance() {
    return reinterpret_cast<const mint_event*>(
               &_mint_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(mint_event& a, mint_event& b) {
    a.Swap(&b);
  }
  inline void Swap(mint_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mint_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mint_event* New() const final {
    return new mint_event();
  }

  mint_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mint_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mint_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const mint_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mint_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.mint_event";
  }
  protected:
  explicit mint_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kTokenIdFieldNumber = 2,
    kMemoFieldNumber = 3,
  };
  // bytes to = 1 [(.koinos.btype) = ADDRESS];
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes token_id = 2 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // optional string memo = 3;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_MUST_USE_RESULT std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.mint_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class transfer_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.transfer_arguments) */ {
 public:
  inline transfer_arguments() : transfer_arguments(nullptr) {}
  ~transfer_arguments() override;
  explicit constexpr transfer_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transfer_arguments(const transfer_arguments& from);
  transfer_arguments(transfer_arguments&& from) noexcept
    : transfer_arguments() {
    *this = ::std::move(from);
  }

  inline transfer_arguments& operator=(const transfer_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline transfer_arguments& operator=(transfer_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transfer_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const transfer_arguments* internal_default_instance() {
    return reinterpret_cast<const transfer_arguments*>(
               &_transfer_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(transfer_arguments& a, transfer_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(transfer_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transfer_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transfer_arguments* New() const final {
    return new transfer_arguments();
  }

  transfer_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transfer_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transfer_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transfer_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transfer_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.transfer_arguments";
  }
  protected:
  explicit transfer_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kTokenIdFieldNumber = 3,
    kMemoFieldNumber = 4,
  };
  // bytes from = 1 [deprecated = true, (.koinos.btype) = ADDRESS];
  PROTOBUF_DEPRECATED void clear_from();
  PROTOBUF_DEPRECATED const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_from(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_from();
  PROTOBUF_MUST_USE_RESULT PROTOBUF_DEPRECATED std::string* release_from();
  PROTOBUF_DEPRECATED void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes token_id = 3 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // optional string memo = 4;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_MUST_USE_RESULT std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.transfer_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class transfer_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.transfer_result) */ {
 public:
  inline transfer_result() : transfer_result(nullptr) {}
  ~transfer_result() override;
  explicit constexpr transfer_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transfer_result(const transfer_result& from);
  transfer_result(transfer_result&& from) noexcept
    : transfer_result() {
    *this = ::std::move(from);
  }

  inline transfer_result& operator=(const transfer_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline transfer_result& operator=(transfer_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transfer_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const transfer_result* internal_default_instance() {
    return reinterpret_cast<const transfer_result*>(
               &_transfer_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(transfer_result& a, transfer_result& b) {
    a.Swap(&b);
  }
  inline void Swap(transfer_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transfer_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transfer_result* New() const final {
    return new transfer_result();
  }

  transfer_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transfer_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transfer_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transfer_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transfer_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.transfer_result";
  }
  protected:
  explicit transfer_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.transfer_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class transfer_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.transfer_event) */ {
 public:
  inline transfer_event() : transfer_event(nullptr) {}
  ~transfer_event() override;
  explicit constexpr transfer_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  transfer_event(const transfer_event& from);
  transfer_event(transfer_event&& from) noexcept
    : transfer_event() {
    *this = ::std::move(from);
  }

  inline transfer_event& operator=(const transfer_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline transfer_event& operator=(transfer_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const transfer_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const transfer_event* internal_default_instance() {
    return reinterpret_cast<const transfer_event*>(
               &_transfer_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(transfer_event& a, transfer_event& b) {
    a.Swap(&b);
  }
  inline void Swap(transfer_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transfer_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transfer_event* New() const final {
    return new transfer_event();
  }

  transfer_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transfer_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const transfer_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const transfer_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transfer_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.transfer_event";
  }
  protected:
  explicit transfer_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kTokenIdFieldNumber = 3,
    kMemoFieldNumber = 4,
  };
  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_MUST_USE_RESULT std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 2 [(.koinos.btype) = ADDRESS];
  void clear_to();
  const std::string& to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // bytes token_id = 3 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // optional string memo = 4;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_MUST_USE_RESULT std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.transfer_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class burn_arguments final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.burn_arguments) */ {
 public:
  inline burn_arguments() : burn_arguments(nullptr) {}
  ~burn_arguments() override;
  explicit constexpr burn_arguments(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  burn_arguments(const burn_arguments& from);
  burn_arguments(burn_arguments&& from) noexcept
    : burn_arguments() {
    *this = ::std::move(from);
  }

  inline burn_arguments& operator=(const burn_arguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline burn_arguments& operator=(burn_arguments&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const burn_arguments& default_instance() {
    return *internal_default_instance();
  }
  static inline const burn_arguments* internal_default_instance() {
    return reinterpret_cast<const burn_arguments*>(
               &_burn_arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(burn_arguments& a, burn_arguments& b) {
    a.Swap(&b);
  }
  inline void Swap(burn_arguments* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(burn_arguments* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline burn_arguments* New() const final {
    return new burn_arguments();
  }

  burn_arguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<burn_arguments>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const burn_arguments& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const burn_arguments& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(burn_arguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.burn_arguments";
  }
  protected:
  explicit burn_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenIdFieldNumber = 1,
    kMemoFieldNumber = 2,
  };
  // bytes token_id = 1 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // optional string memo = 2;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_MUST_USE_RESULT std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.burn_arguments)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class burn_result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.burn_result) */ {
 public:
  inline burn_result() : burn_result(nullptr) {}
  ~burn_result() override;
  explicit constexpr burn_result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  burn_result(const burn_result& from);
  burn_result(burn_result&& from) noexcept
    : burn_result() {
    *this = ::std::move(from);
  }

  inline burn_result& operator=(const burn_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline burn_result& operator=(burn_result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const burn_result& default_instance() {
    return *internal_default_instance();
  }
  static inline const burn_result* internal_default_instance() {
    return reinterpret_cast<const burn_result*>(
               &_burn_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(burn_result& a, burn_result& b) {
    a.Swap(&b);
  }
  inline void Swap(burn_result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(burn_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline burn_result* New() const final {
    return new burn_result();
  }

  burn_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<burn_result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const burn_result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const burn_result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(burn_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.burn_result";
  }
  protected:
  explicit burn_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.burn_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// -------------------------------------------------------------------

class burn_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.standards.kcs5.burn_event) */ {
 public:
  inline burn_event() : burn_event(nullptr) {}
  ~burn_event() override;
  explicit constexpr burn_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  burn_event(const burn_event& from);
  burn_event(burn_event&& from) noexcept
    : burn_event() {
    *this = ::std::move(from);
  }

  inline burn_event& operator=(const burn_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline burn_event& operator=(burn_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const burn_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const burn_event* internal_default_instance() {
    return reinterpret_cast<const burn_event*>(
               &_burn_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(burn_event& a, burn_event& b) {
    a.Swap(&b);
  }
  inline void Swap(burn_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(burn_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline burn_event* New() const final {
    return new burn_event();
  }

  burn_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<burn_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const burn_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const burn_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(burn_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.standards.kcs5.burn_event";
  }
  protected:
  explicit burn_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kTokenIdFieldNumber = 2,
    kMemoFieldNumber = 3,
  };
  // bytes from = 1 [(.koinos.btype) = ADDRESS];
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_MUST_USE_RESULT std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes token_id = 2 [(.koinos.btype) = HEX];
  void clear_token_id();
  const std::string& token_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_id();
  void set_allocated_token_id(std::string* token_id);
  private:
  const std::string& _internal_token_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_id(const std::string& value);
  std::string* _internal_mutable_token_id();
  public:

  // optional string memo = 3;
  bool has_memo() const;
  private:
  bool _internal_has_memo() const;
  public:
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_MUST_USE_RESULT std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // @@protoc_insertion_point(class_scope:koinos.standards.kcs5.burn_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  friend struct ::TableStruct_koinos_2fstandards_2fkcs5_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// name_arguments

// -------------------------------------------------------------------

// name_result

// string value = 1;
inline void name_result::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& name_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.name_result.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void name_result::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.name_result.value)
}
inline std::string* name_result::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.name_result.value)
  return _s;
}
inline const std::string& name_result::_internal_value() const {
  return value_.Get();
}
inline void name_result::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* name_result::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* name_result::release_value() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.name_result.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void name_result::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.name_result.value)
}

// -------------------------------------------------------------------

// symbol_arguments

// -------------------------------------------------------------------

// symbol_result

// string value = 1;
inline void symbol_result::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& symbol_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.symbol_result.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void symbol_result::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.symbol_result.value)
}
inline std::string* symbol_result::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.symbol_result.value)
  return _s;
}
inline const std::string& symbol_result::_internal_value() const {
  return value_.Get();
}
inline void symbol_result::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* symbol_result::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* symbol_result::release_value() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.symbol_result.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void symbol_result::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.symbol_result.value)
}

// -------------------------------------------------------------------

// uri_arguments

// -------------------------------------------------------------------

// uri_result

// string value = 1;
inline void uri_result::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& uri_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.uri_result.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void uri_result::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.uri_result.value)
}
inline std::string* uri_result::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.uri_result.value)
  return _s;
}
inline const std::string& uri_result::_internal_value() const {
  return value_.Get();
}
inline void uri_result::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* uri_result::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* uri_result::release_value() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.uri_result.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void uri_result::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.uri_result.value)
}

// -------------------------------------------------------------------

// token_uri_arguments

// bytes token_id = 1 [(.koinos.btype) = HEX];
inline void token_uri_arguments::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& token_uri_arguments::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.token_uri_arguments.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void token_uri_arguments::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.token_uri_arguments.token_id)
}
inline std::string* token_uri_arguments::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.token_uri_arguments.token_id)
  return _s;
}
inline const std::string& token_uri_arguments::_internal_token_id() const {
  return token_id_.Get();
}
inline void token_uri_arguments::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* token_uri_arguments::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* token_uri_arguments::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.token_uri_arguments.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void token_uri_arguments::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.token_uri_arguments.token_id)
}

// -------------------------------------------------------------------

// token_uri_result

// string value = 1;
inline void token_uri_result::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& token_uri_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.token_uri_result.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void token_uri_result::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.token_uri_result.value)
}
inline std::string* token_uri_result::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.token_uri_result.value)
  return _s;
}
inline const std::string& token_uri_result::_internal_value() const {
  return value_.Get();
}
inline void token_uri_result::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* token_uri_result::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* token_uri_result::release_value() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.token_uri_result.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void token_uri_result::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.token_uri_result.value)
}

// -------------------------------------------------------------------

// get_info_arguments

// -------------------------------------------------------------------

// get_info_result

// string name = 1;
inline void get_info_result::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& get_info_result::name() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_info_result.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_info_result::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_info_result.name)
}
inline std::string* get_info_result::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_info_result.name)
  return _s;
}
inline const std::string& get_info_result::_internal_name() const {
  return name_.Get();
}
inline void get_info_result::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_info_result::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_info_result::release_name() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.get_info_result.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_info_result::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.get_info_result.name)
}

// string symbol = 2;
inline void get_info_result::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& get_info_result::symbol() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_info_result.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_info_result::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_info_result.symbol)
}
inline std::string* get_info_result::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_info_result.symbol)
  return _s;
}
inline const std::string& get_info_result::_internal_symbol() const {
  return symbol_.Get();
}
inline void get_info_result::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_info_result::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_info_result::release_symbol() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.get_info_result.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_info_result::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.get_info_result.symbol)
}

// uint32 uri = 3;
inline void get_info_result::clear_uri() {
  uri_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 get_info_result::_internal_uri() const {
  return uri_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 get_info_result::uri() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_info_result.uri)
  return _internal_uri();
}
inline void get_info_result::_internal_set_uri(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uri_ = value;
}
inline void get_info_result::set_uri(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_info_result.uri)
}

// string description = 4;
inline void get_info_result::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& get_info_result::description() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_info_result.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_info_result::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_info_result.description)
}
inline std::string* get_info_result::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_info_result.description)
  return _s;
}
inline const std::string& get_info_result::_internal_description() const {
  return description_.Get();
}
inline void get_info_result::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_info_result::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_info_result::release_description() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.get_info_result.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_info_result::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.get_info_result.description)
}

// -------------------------------------------------------------------

// owner_arguments

// -------------------------------------------------------------------

// owner_result

// bytes value = 1 [(.koinos.btype) = ADDRESS];
inline void owner_result::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& owner_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.owner_result.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void owner_result::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.owner_result.value)
}
inline std::string* owner_result::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.owner_result.value)
  return _s;
}
inline const std::string& owner_result::_internal_value() const {
  return value_.Get();
}
inline void owner_result::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* owner_result::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* owner_result::release_value() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.owner_result.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void owner_result::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.owner_result.value)
}

// -------------------------------------------------------------------

// total_supply_arguments

// -------------------------------------------------------------------

// total_supply_result

// uint64 value = 1 [jstype = JS_STRING];
inline void total_supply_result::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 total_supply_result::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 total_supply_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.total_supply_result.value)
  return _internal_value();
}
inline void total_supply_result::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void total_supply_result::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.total_supply_result.value)
}

// -------------------------------------------------------------------

// royalty

// uint64 percentage = 1 [jstype = JS_STRING];
inline void royalty::clear_percentage() {
  percentage_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 royalty::_internal_percentage() const {
  return percentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 royalty::percentage() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.royalty.percentage)
  return _internal_percentage();
}
inline void royalty::_internal_set_percentage(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  percentage_ = value;
}
inline void royalty::set_percentage(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.royalty.percentage)
}

// bytes address = 2 [(.koinos.btype) = ADDRESS];
inline void royalty::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& royalty::address() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.royalty.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void royalty::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.royalty.address)
}
inline std::string* royalty::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.royalty.address)
  return _s;
}
inline const std::string& royalty::_internal_address() const {
  return address_.Get();
}
inline void royalty::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* royalty::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* royalty::release_address() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.royalty.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void royalty::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.royalty.address)
}

// -------------------------------------------------------------------

// royalties_arguments

// -------------------------------------------------------------------

// royalties_result

// repeated .koinos.standards.kcs5.royalty value = 1;
inline int royalties_result::_internal_value_size() const {
  return value_.size();
}
inline int royalties_result::value_size() const {
  return _internal_value_size();
}
inline void royalties_result::clear_value() {
  value_.Clear();
}
inline ::koinos::standards::kcs5::royalty* royalties_result::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.royalties_result.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty >*
royalties_result::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:koinos.standards.kcs5.royalties_result.value)
  return &value_;
}
inline const ::koinos::standards::kcs5::royalty& royalties_result::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::koinos::standards::kcs5::royalty& royalties_result::value(int index) const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.royalties_result.value)
  return _internal_value(index);
}
inline ::koinos::standards::kcs5::royalty* royalties_result::_internal_add_value() {
  return value_.Add();
}
inline ::koinos::standards::kcs5::royalty* royalties_result::add_value() {
  ::koinos::standards::kcs5::royalty* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:koinos.standards.kcs5.royalties_result.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty >&
royalties_result::value() const {
  // @@protoc_insertion_point(field_list:koinos.standards.kcs5.royalties_result.value)
  return value_;
}

// -------------------------------------------------------------------

// balance_of_arguments

// bytes owner = 1 [(.koinos.btype) = ADDRESS];
inline void balance_of_arguments::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& balance_of_arguments::owner() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.balance_of_arguments.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void balance_of_arguments::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.balance_of_arguments.owner)
}
inline std::string* balance_of_arguments::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.balance_of_arguments.owner)
  return _s;
}
inline const std::string& balance_of_arguments::_internal_owner() const {
  return owner_.Get();
}
inline void balance_of_arguments::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* balance_of_arguments::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* balance_of_arguments::release_owner() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.balance_of_arguments.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void balance_of_arguments::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.balance_of_arguments.owner)
}

// -------------------------------------------------------------------

// balance_of_result

// uint64 value = 1 [jstype = JS_STRING];
inline void balance_of_result::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 balance_of_result::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 balance_of_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.balance_of_result.value)
  return _internal_value();
}
inline void balance_of_result::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void balance_of_result::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.balance_of_result.value)
}

// -------------------------------------------------------------------

// owner_of_arguments

// bytes token_id = 1 [(.koinos.btype) = HEX];
inline void owner_of_arguments::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& owner_of_arguments::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.owner_of_arguments.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void owner_of_arguments::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.owner_of_arguments.token_id)
}
inline std::string* owner_of_arguments::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.owner_of_arguments.token_id)
  return _s;
}
inline const std::string& owner_of_arguments::_internal_token_id() const {
  return token_id_.Get();
}
inline void owner_of_arguments::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* owner_of_arguments::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* owner_of_arguments::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.owner_of_arguments.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void owner_of_arguments::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.owner_of_arguments.token_id)
}

// -------------------------------------------------------------------

// owner_of_result

// bytes value = 1 [(.koinos.btype) = ADDRESS];
inline void owner_of_result::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& owner_of_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.owner_of_result.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void owner_of_result::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.owner_of_result.value)
}
inline std::string* owner_of_result::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.owner_of_result.value)
  return _s;
}
inline const std::string& owner_of_result::_internal_value() const {
  return value_.Get();
}
inline void owner_of_result::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* owner_of_result::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* owner_of_result::release_value() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.owner_of_result.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void owner_of_result::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.owner_of_result.value)
}

// -------------------------------------------------------------------

// metadata_of_arguments

// bytes token_id = 1 [(.koinos.btype) = HEX];
inline void metadata_of_arguments::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& metadata_of_arguments::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.metadata_of_arguments.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void metadata_of_arguments::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.metadata_of_arguments.token_id)
}
inline std::string* metadata_of_arguments::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.metadata_of_arguments.token_id)
  return _s;
}
inline const std::string& metadata_of_arguments::_internal_token_id() const {
  return token_id_.Get();
}
inline void metadata_of_arguments::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* metadata_of_arguments::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* metadata_of_arguments::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.metadata_of_arguments.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void metadata_of_arguments::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.metadata_of_arguments.token_id)
}

// -------------------------------------------------------------------

// metadata_of_result

// string value = 1;
inline void metadata_of_result::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& metadata_of_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.metadata_of_result.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void metadata_of_result::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.metadata_of_result.value)
}
inline std::string* metadata_of_result::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.metadata_of_result.value)
  return _s;
}
inline const std::string& metadata_of_result::_internal_value() const {
  return value_.Get();
}
inline void metadata_of_result::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* metadata_of_result::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* metadata_of_result::release_value() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.metadata_of_result.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void metadata_of_result::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.metadata_of_result.value)
}

// -------------------------------------------------------------------

// get_tokens_arguments

// bytes start = 1 [(.koinos.btype) = HEX];
inline void get_tokens_arguments::clear_start() {
  start_.ClearToEmpty();
}
inline const std::string& get_tokens_arguments::start() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_tokens_arguments.start)
  return _internal_start();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_tokens_arguments::set_start(ArgT0&& arg0, ArgT... args) {
 
 start_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_tokens_arguments.start)
}
inline std::string* get_tokens_arguments::mutable_start() {
  std::string* _s = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_tokens_arguments.start)
  return _s;
}
inline const std::string& get_tokens_arguments::_internal_start() const {
  return start_.Get();
}
inline void get_tokens_arguments::_internal_set_start(const std::string& value) {
  
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_tokens_arguments::_internal_mutable_start() {
  
  return start_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_tokens_arguments::release_start() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.get_tokens_arguments.start)
  return start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_tokens_arguments::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.get_tokens_arguments.start)
}

// int32 limit = 2;
inline void get_tokens_arguments::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_tokens_arguments::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_tokens_arguments::limit() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_tokens_arguments.limit)
  return _internal_limit();
}
inline void get_tokens_arguments::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void get_tokens_arguments::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_tokens_arguments.limit)
}

// bool descending = 3;
inline void get_tokens_arguments::clear_descending() {
  descending_ = false;
}
inline bool get_tokens_arguments::_internal_descending() const {
  return descending_;
}
inline bool get_tokens_arguments::descending() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_tokens_arguments.descending)
  return _internal_descending();
}
inline void get_tokens_arguments::_internal_set_descending(bool value) {
  
  descending_ = value;
}
inline void get_tokens_arguments::set_descending(bool value) {
  _internal_set_descending(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_tokens_arguments.descending)
}

// -------------------------------------------------------------------

// get_tokens_result

// repeated bytes values = 1 [(.koinos.btype) = HEX];
inline int get_tokens_result::_internal_values_size() const {
  return values_.size();
}
inline int get_tokens_result::values_size() const {
  return _internal_values_size();
}
inline void get_tokens_result::clear_values() {
  values_.Clear();
}
inline std::string* get_tokens_result::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:koinos.standards.kcs5.get_tokens_result.values)
  return _s;
}
inline const std::string& get_tokens_result::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& get_tokens_result::values(int index) const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_tokens_result.values)
  return _internal_values(index);
}
inline std::string* get_tokens_result::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_tokens_result.values)
  return values_.Mutable(index);
}
inline void get_tokens_result::set_values(int index, const std::string& value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_tokens_result.values)
}
inline void get_tokens_result::set_values(int index, std::string&& value) {
  values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_tokens_result.values)
}
inline void get_tokens_result::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:koinos.standards.kcs5.get_tokens_result.values)
}
inline void get_tokens_result::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:koinos.standards.kcs5.get_tokens_result.values)
}
inline std::string* get_tokens_result::_internal_add_values() {
  return values_.Add();
}
inline void get_tokens_result::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:koinos.standards.kcs5.get_tokens_result.values)
}
inline void get_tokens_result::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:koinos.standards.kcs5.get_tokens_result.values)
}
inline void get_tokens_result::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:koinos.standards.kcs5.get_tokens_result.values)
}
inline void get_tokens_result::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:koinos.standards.kcs5.get_tokens_result.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
get_tokens_result::values() const {
  // @@protoc_insertion_point(field_list:koinos.standards.kcs5.get_tokens_result.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
get_tokens_result::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:koinos.standards.kcs5.get_tokens_result.values)
  return &values_;
}

// -------------------------------------------------------------------

// get_tokens_by_owner_arguments

// bytes owner = 1 [(.koinos.btype) = ADDRESS];
inline void get_tokens_by_owner_arguments::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& get_tokens_by_owner_arguments::owner() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_tokens_by_owner_arguments.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_tokens_by_owner_arguments::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_tokens_by_owner_arguments.owner)
}
inline std::string* get_tokens_by_owner_arguments::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_tokens_by_owner_arguments.owner)
  return _s;
}
inline const std::string& get_tokens_by_owner_arguments::_internal_owner() const {
  return owner_.Get();
}
inline void get_tokens_by_owner_arguments::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_tokens_by_owner_arguments::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_tokens_by_owner_arguments::release_owner() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.get_tokens_by_owner_arguments.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_tokens_by_owner_arguments::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.get_tokens_by_owner_arguments.owner)
}

// bytes start = 2 [(.koinos.btype) = HEX];
inline void get_tokens_by_owner_arguments::clear_start() {
  start_.ClearToEmpty();
}
inline const std::string& get_tokens_by_owner_arguments::start() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_tokens_by_owner_arguments.start)
  return _internal_start();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_tokens_by_owner_arguments::set_start(ArgT0&& arg0, ArgT... args) {
 
 start_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_tokens_by_owner_arguments.start)
}
inline std::string* get_tokens_by_owner_arguments::mutable_start() {
  std::string* _s = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_tokens_by_owner_arguments.start)
  return _s;
}
inline const std::string& get_tokens_by_owner_arguments::_internal_start() const {
  return start_.Get();
}
inline void get_tokens_by_owner_arguments::_internal_set_start(const std::string& value) {
  
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_tokens_by_owner_arguments::_internal_mutable_start() {
  
  return start_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_tokens_by_owner_arguments::release_start() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.get_tokens_by_owner_arguments.start)
  return start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_tokens_by_owner_arguments::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.get_tokens_by_owner_arguments.start)
}

// int32 limit = 3;
inline void get_tokens_by_owner_arguments::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_tokens_by_owner_arguments::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_tokens_by_owner_arguments::limit() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_tokens_by_owner_arguments.limit)
  return _internal_limit();
}
inline void get_tokens_by_owner_arguments::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void get_tokens_by_owner_arguments::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_tokens_by_owner_arguments.limit)
}

// bool descending = 4;
inline void get_tokens_by_owner_arguments::clear_descending() {
  descending_ = false;
}
inline bool get_tokens_by_owner_arguments::_internal_descending() const {
  return descending_;
}
inline bool get_tokens_by_owner_arguments::descending() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_tokens_by_owner_arguments.descending)
  return _internal_descending();
}
inline void get_tokens_by_owner_arguments::_internal_set_descending(bool value) {
  
  descending_ = value;
}
inline void get_tokens_by_owner_arguments::set_descending(bool value) {
  _internal_set_descending(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_tokens_by_owner_arguments.descending)
}

// -------------------------------------------------------------------

// get_tokens_by_owner_result

// repeated bytes values = 1 [(.koinos.btype) = HEX];
inline int get_tokens_by_owner_result::_internal_values_size() const {
  return values_.size();
}
inline int get_tokens_by_owner_result::values_size() const {
  return _internal_values_size();
}
inline void get_tokens_by_owner_result::clear_values() {
  values_.Clear();
}
inline std::string* get_tokens_by_owner_result::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:koinos.standards.kcs5.get_tokens_by_owner_result.values)
  return _s;
}
inline const std::string& get_tokens_by_owner_result::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& get_tokens_by_owner_result::values(int index) const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_tokens_by_owner_result.values)
  return _internal_values(index);
}
inline std::string* get_tokens_by_owner_result::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_tokens_by_owner_result.values)
  return values_.Mutable(index);
}
inline void get_tokens_by_owner_result::set_values(int index, const std::string& value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_tokens_by_owner_result.values)
}
inline void get_tokens_by_owner_result::set_values(int index, std::string&& value) {
  values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_tokens_by_owner_result.values)
}
inline void get_tokens_by_owner_result::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:koinos.standards.kcs5.get_tokens_by_owner_result.values)
}
inline void get_tokens_by_owner_result::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:koinos.standards.kcs5.get_tokens_by_owner_result.values)
}
inline std::string* get_tokens_by_owner_result::_internal_add_values() {
  return values_.Add();
}
inline void get_tokens_by_owner_result::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:koinos.standards.kcs5.get_tokens_by_owner_result.values)
}
inline void get_tokens_by_owner_result::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:koinos.standards.kcs5.get_tokens_by_owner_result.values)
}
inline void get_tokens_by_owner_result::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:koinos.standards.kcs5.get_tokens_by_owner_result.values)
}
inline void get_tokens_by_owner_result::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:koinos.standards.kcs5.get_tokens_by_owner_result.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
get_tokens_by_owner_result::values() const {
  // @@protoc_insertion_point(field_list:koinos.standards.kcs5.get_tokens_by_owner_result.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
get_tokens_by_owner_result::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:koinos.standards.kcs5.get_tokens_by_owner_result.values)
  return &values_;
}

// -------------------------------------------------------------------

// get_approved_arguments

// bytes token_id = 1 [(.koinos.btype) = HEX];
inline void get_approved_arguments::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& get_approved_arguments::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_approved_arguments.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_approved_arguments::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_approved_arguments.token_id)
}
inline std::string* get_approved_arguments::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_approved_arguments.token_id)
  return _s;
}
inline const std::string& get_approved_arguments::_internal_token_id() const {
  return token_id_.Get();
}
inline void get_approved_arguments::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_approved_arguments::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_approved_arguments::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.get_approved_arguments.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_approved_arguments::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.get_approved_arguments.token_id)
}

// -------------------------------------------------------------------

// get_approved_result

// bytes value = 1 [(.koinos.btype) = ADDRESS];
inline void get_approved_result::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& get_approved_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_approved_result.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_approved_result::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_approved_result.value)
}
inline std::string* get_approved_result::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_approved_result.value)
  return _s;
}
inline const std::string& get_approved_result::_internal_value() const {
  return value_.Get();
}
inline void get_approved_result::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_approved_result::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_approved_result::release_value() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.get_approved_result.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_approved_result::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.get_approved_result.value)
}

// -------------------------------------------------------------------

// is_approved_for_all_arguments

// bytes owner = 1 [(.koinos.btype) = ADDRESS];
inline void is_approved_for_all_arguments::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& is_approved_for_all_arguments::owner() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.is_approved_for_all_arguments.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void is_approved_for_all_arguments::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.is_approved_for_all_arguments.owner)
}
inline std::string* is_approved_for_all_arguments::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.is_approved_for_all_arguments.owner)
  return _s;
}
inline const std::string& is_approved_for_all_arguments::_internal_owner() const {
  return owner_.Get();
}
inline void is_approved_for_all_arguments::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* is_approved_for_all_arguments::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* is_approved_for_all_arguments::release_owner() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.is_approved_for_all_arguments.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void is_approved_for_all_arguments::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.is_approved_for_all_arguments.owner)
}

// bytes operator = 2 [(.koinos.btype) = ADDRESS];
inline void is_approved_for_all_arguments::clear_operator_() {
  operator__.ClearToEmpty();
}
inline const std::string& is_approved_for_all_arguments::operator_() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.is_approved_for_all_arguments.operator)
  return _internal_operator_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void is_approved_for_all_arguments::set_operator_(ArgT0&& arg0, ArgT... args) {
 
 operator__.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.is_approved_for_all_arguments.operator)
}
inline std::string* is_approved_for_all_arguments::mutable_operator_() {
  std::string* _s = _internal_mutable_operator_();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.is_approved_for_all_arguments.operator)
  return _s;
}
inline const std::string& is_approved_for_all_arguments::_internal_operator_() const {
  return operator__.Get();
}
inline void is_approved_for_all_arguments::_internal_set_operator_(const std::string& value) {
  
  operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* is_approved_for_all_arguments::_internal_mutable_operator_() {
  
  return operator__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* is_approved_for_all_arguments::release_operator_() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.is_approved_for_all_arguments.operator)
  return operator__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void is_approved_for_all_arguments::set_allocated_operator_(std::string* operator_) {
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.is_approved_for_all_arguments.operator)
}

// -------------------------------------------------------------------

// is_approved_for_all_result

// bool value = 1;
inline void is_approved_for_all_result::clear_value() {
  value_ = false;
}
inline bool is_approved_for_all_result::_internal_value() const {
  return value_;
}
inline bool is_approved_for_all_result::value() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.is_approved_for_all_result.value)
  return _internal_value();
}
inline void is_approved_for_all_result::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void is_approved_for_all_result::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.is_approved_for_all_result.value)
}

// -------------------------------------------------------------------

// get_operator_approvals_arguments

// bytes owner = 1 [(.koinos.btype) = ADDRESS];
inline void get_operator_approvals_arguments::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& get_operator_approvals_arguments::owner() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_operator_approvals_arguments.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_operator_approvals_arguments::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_operator_approvals_arguments.owner)
}
inline std::string* get_operator_approvals_arguments::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_operator_approvals_arguments.owner)
  return _s;
}
inline const std::string& get_operator_approvals_arguments::_internal_owner() const {
  return owner_.Get();
}
inline void get_operator_approvals_arguments::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_operator_approvals_arguments::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_operator_approvals_arguments::release_owner() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.get_operator_approvals_arguments.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_operator_approvals_arguments::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.get_operator_approvals_arguments.owner)
}

// bytes start = 2 [(.koinos.btype) = ADDRESS];
inline void get_operator_approvals_arguments::clear_start() {
  start_.ClearToEmpty();
}
inline const std::string& get_operator_approvals_arguments::start() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_operator_approvals_arguments.start)
  return _internal_start();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_operator_approvals_arguments::set_start(ArgT0&& arg0, ArgT... args) {
 
 start_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_operator_approvals_arguments.start)
}
inline std::string* get_operator_approvals_arguments::mutable_start() {
  std::string* _s = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_operator_approvals_arguments.start)
  return _s;
}
inline const std::string& get_operator_approvals_arguments::_internal_start() const {
  return start_.Get();
}
inline void get_operator_approvals_arguments::_internal_set_start(const std::string& value) {
  
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_operator_approvals_arguments::_internal_mutable_start() {
  
  return start_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_operator_approvals_arguments::release_start() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.get_operator_approvals_arguments.start)
  return start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_operator_approvals_arguments::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.get_operator_approvals_arguments.start)
}

// int32 limit = 3;
inline void get_operator_approvals_arguments::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_operator_approvals_arguments::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_operator_approvals_arguments::limit() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_operator_approvals_arguments.limit)
  return _internal_limit();
}
inline void get_operator_approvals_arguments::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void get_operator_approvals_arguments::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_operator_approvals_arguments.limit)
}

// bool descending = 4;
inline void get_operator_approvals_arguments::clear_descending() {
  descending_ = false;
}
inline bool get_operator_approvals_arguments::_internal_descending() const {
  return descending_;
}
inline bool get_operator_approvals_arguments::descending() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_operator_approvals_arguments.descending)
  return _internal_descending();
}
inline void get_operator_approvals_arguments::_internal_set_descending(bool value) {
  
  descending_ = value;
}
inline void get_operator_approvals_arguments::set_descending(bool value) {
  _internal_set_descending(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_operator_approvals_arguments.descending)
}

// -------------------------------------------------------------------

// get_operator_approvals_result

// bytes owner = 1 [(.koinos.btype) = ADDRESS];
inline void get_operator_approvals_result::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& get_operator_approvals_result::owner() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_operator_approvals_result.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void get_operator_approvals_result::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_operator_approvals_result.owner)
}
inline std::string* get_operator_approvals_result::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_operator_approvals_result.owner)
  return _s;
}
inline const std::string& get_operator_approvals_result::_internal_owner() const {
  return owner_.Get();
}
inline void get_operator_approvals_result::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* get_operator_approvals_result::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* get_operator_approvals_result::release_owner() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.get_operator_approvals_result.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void get_operator_approvals_result::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.get_operator_approvals_result.owner)
}

// repeated bytes operators = 2 [(.koinos.btype) = ADDRESS];
inline int get_operator_approvals_result::_internal_operators_size() const {
  return operators_.size();
}
inline int get_operator_approvals_result::operators_size() const {
  return _internal_operators_size();
}
inline void get_operator_approvals_result::clear_operators() {
  operators_.Clear();
}
inline std::string* get_operator_approvals_result::add_operators() {
  std::string* _s = _internal_add_operators();
  // @@protoc_insertion_point(field_add_mutable:koinos.standards.kcs5.get_operator_approvals_result.operators)
  return _s;
}
inline const std::string& get_operator_approvals_result::_internal_operators(int index) const {
  return operators_.Get(index);
}
inline const std::string& get_operator_approvals_result::operators(int index) const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.get_operator_approvals_result.operators)
  return _internal_operators(index);
}
inline std::string* get_operator_approvals_result::mutable_operators(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.get_operator_approvals_result.operators)
  return operators_.Mutable(index);
}
inline void get_operator_approvals_result::set_operators(int index, const std::string& value) {
  operators_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_operator_approvals_result.operators)
}
inline void get_operator_approvals_result::set_operators(int index, std::string&& value) {
  operators_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.get_operator_approvals_result.operators)
}
inline void get_operator_approvals_result::set_operators(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  operators_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:koinos.standards.kcs5.get_operator_approvals_result.operators)
}
inline void get_operator_approvals_result::set_operators(int index, const void* value, size_t size) {
  operators_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:koinos.standards.kcs5.get_operator_approvals_result.operators)
}
inline std::string* get_operator_approvals_result::_internal_add_operators() {
  return operators_.Add();
}
inline void get_operator_approvals_result::add_operators(const std::string& value) {
  operators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:koinos.standards.kcs5.get_operator_approvals_result.operators)
}
inline void get_operator_approvals_result::add_operators(std::string&& value) {
  operators_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:koinos.standards.kcs5.get_operator_approvals_result.operators)
}
inline void get_operator_approvals_result::add_operators(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  operators_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:koinos.standards.kcs5.get_operator_approvals_result.operators)
}
inline void get_operator_approvals_result::add_operators(const void* value, size_t size) {
  operators_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:koinos.standards.kcs5.get_operator_approvals_result.operators)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
get_operator_approvals_result::operators() const {
  // @@protoc_insertion_point(field_list:koinos.standards.kcs5.get_operator_approvals_result.operators)
  return operators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
get_operator_approvals_result::mutable_operators() {
  // @@protoc_insertion_point(field_mutable_list:koinos.standards.kcs5.get_operator_approvals_result.operators)
  return &operators_;
}

// -------------------------------------------------------------------

// transfer_ownership_arguments

// bytes to = 1 [(.koinos.btype) = ADDRESS];
inline void transfer_ownership_arguments::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& transfer_ownership_arguments::to() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.transfer_ownership_arguments.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transfer_ownership_arguments::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.transfer_ownership_arguments.to)
}
inline std::string* transfer_ownership_arguments::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.transfer_ownership_arguments.to)
  return _s;
}
inline const std::string& transfer_ownership_arguments::_internal_to() const {
  return to_.Get();
}
inline void transfer_ownership_arguments::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transfer_ownership_arguments::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transfer_ownership_arguments::release_to() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.transfer_ownership_arguments.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transfer_ownership_arguments::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.transfer_ownership_arguments.to)
}

// -------------------------------------------------------------------

// transfer_ownership_result

// -------------------------------------------------------------------

// owner_event

// bytes from = 1 [(.koinos.btype) = ADDRESS];
inline void owner_event::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& owner_event::from() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.owner_event.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void owner_event::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.owner_event.from)
}
inline std::string* owner_event::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.owner_event.from)
  return _s;
}
inline const std::string& owner_event::_internal_from() const {
  return from_.Get();
}
inline void owner_event::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* owner_event::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* owner_event::release_from() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.owner_event.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void owner_event::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.owner_event.from)
}

// bytes to = 2 [(.koinos.btype) = ADDRESS];
inline void owner_event::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& owner_event::to() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.owner_event.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void owner_event::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.owner_event.to)
}
inline std::string* owner_event::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.owner_event.to)
  return _s;
}
inline const std::string& owner_event::_internal_to() const {
  return to_.Get();
}
inline void owner_event::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* owner_event::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* owner_event::release_to() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.owner_event.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void owner_event::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.owner_event.to)
}

// -------------------------------------------------------------------

// set_royalties_arguments

// repeated .koinos.standards.kcs5.royalty value = 1;
inline int set_royalties_arguments::_internal_value_size() const {
  return value_.size();
}
inline int set_royalties_arguments::value_size() const {
  return _internal_value_size();
}
inline void set_royalties_arguments::clear_value() {
  value_.Clear();
}
inline ::koinos::standards::kcs5::royalty* set_royalties_arguments::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.set_royalties_arguments.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty >*
set_royalties_arguments::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:koinos.standards.kcs5.set_royalties_arguments.value)
  return &value_;
}
inline const ::koinos::standards::kcs5::royalty& set_royalties_arguments::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::koinos::standards::kcs5::royalty& set_royalties_arguments::value(int index) const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.set_royalties_arguments.value)
  return _internal_value(index);
}
inline ::koinos::standards::kcs5::royalty* set_royalties_arguments::_internal_add_value() {
  return value_.Add();
}
inline ::koinos::standards::kcs5::royalty* set_royalties_arguments::add_value() {
  ::koinos::standards::kcs5::royalty* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:koinos.standards.kcs5.set_royalties_arguments.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty >&
set_royalties_arguments::value() const {
  // @@protoc_insertion_point(field_list:koinos.standards.kcs5.set_royalties_arguments.value)
  return value_;
}

// -------------------------------------------------------------------

// set_royalties_result

// -------------------------------------------------------------------

// royalties_event

// repeated .koinos.standards.kcs5.royalty value = 1;
inline int royalties_event::_internal_value_size() const {
  return value_.size();
}
inline int royalties_event::value_size() const {
  return _internal_value_size();
}
inline void royalties_event::clear_value() {
  value_.Clear();
}
inline ::koinos::standards::kcs5::royalty* royalties_event::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.royalties_event.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty >*
royalties_event::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:koinos.standards.kcs5.royalties_event.value)
  return &value_;
}
inline const ::koinos::standards::kcs5::royalty& royalties_event::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::koinos::standards::kcs5::royalty& royalties_event::value(int index) const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.royalties_event.value)
  return _internal_value(index);
}
inline ::koinos::standards::kcs5::royalty* royalties_event::_internal_add_value() {
  return value_.Add();
}
inline ::koinos::standards::kcs5::royalty* royalties_event::add_value() {
  ::koinos::standards::kcs5::royalty* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:koinos.standards.kcs5.royalties_event.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::standards::kcs5::royalty >&
royalties_event::value() const {
  // @@protoc_insertion_point(field_list:koinos.standards.kcs5.royalties_event.value)
  return value_;
}

// -------------------------------------------------------------------

// set_metadata_arguments

// bytes token_id = 1 [(.koinos.btype) = HEX];
inline void set_metadata_arguments::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& set_metadata_arguments::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.set_metadata_arguments.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set_metadata_arguments::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.set_metadata_arguments.token_id)
}
inline std::string* set_metadata_arguments::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.set_metadata_arguments.token_id)
  return _s;
}
inline const std::string& set_metadata_arguments::_internal_token_id() const {
  return token_id_.Get();
}
inline void set_metadata_arguments::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* set_metadata_arguments::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* set_metadata_arguments::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.set_metadata_arguments.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void set_metadata_arguments::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.set_metadata_arguments.token_id)
}

// string metadata = 2;
inline void set_metadata_arguments::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& set_metadata_arguments::metadata() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.set_metadata_arguments.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set_metadata_arguments::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.set_metadata_arguments.metadata)
}
inline std::string* set_metadata_arguments::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.set_metadata_arguments.metadata)
  return _s;
}
inline const std::string& set_metadata_arguments::_internal_metadata() const {
  return metadata_.Get();
}
inline void set_metadata_arguments::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* set_metadata_arguments::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* set_metadata_arguments::release_metadata() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.set_metadata_arguments.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void set_metadata_arguments::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.set_metadata_arguments.metadata)
}

// -------------------------------------------------------------------

// set_metadata_result

// -------------------------------------------------------------------

// set_metadata_event

// bytes token_id = 1 [(.koinos.btype) = HEX];
inline void set_metadata_event::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& set_metadata_event::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.set_metadata_event.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set_metadata_event::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.set_metadata_event.token_id)
}
inline std::string* set_metadata_event::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.set_metadata_event.token_id)
  return _s;
}
inline const std::string& set_metadata_event::_internal_token_id() const {
  return token_id_.Get();
}
inline void set_metadata_event::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* set_metadata_event::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* set_metadata_event::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.set_metadata_event.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void set_metadata_event::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.set_metadata_event.token_id)
}

// string metadata = 2;
inline void set_metadata_event::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& set_metadata_event::metadata() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.set_metadata_event.metadata)
  return _internal_metadata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set_metadata_event::set_metadata(ArgT0&& arg0, ArgT... args) {
 
 metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.set_metadata_event.metadata)
}
inline std::string* set_metadata_event::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.set_metadata_event.metadata)
  return _s;
}
inline const std::string& set_metadata_event::_internal_metadata() const {
  return metadata_.Get();
}
inline void set_metadata_event::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* set_metadata_event::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* set_metadata_event::release_metadata() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.set_metadata_event.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void set_metadata_event::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.set_metadata_event.metadata)
}

// -------------------------------------------------------------------

// approve_arguments

// bytes owner = 1 [deprecated = true, (.koinos.btype) = ADDRESS];
inline void approve_arguments::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& approve_arguments::owner() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.approve_arguments.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void approve_arguments::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.approve_arguments.owner)
}
inline std::string* approve_arguments::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.approve_arguments.owner)
  return _s;
}
inline const std::string& approve_arguments::_internal_owner() const {
  return owner_.Get();
}
inline void approve_arguments::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* approve_arguments::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* approve_arguments::release_owner() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.approve_arguments.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void approve_arguments::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.approve_arguments.owner)
}

// bytes operator = 2 [(.koinos.btype) = ADDRESS];
inline void approve_arguments::clear_operator_() {
  operator__.ClearToEmpty();
}
inline const std::string& approve_arguments::operator_() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.approve_arguments.operator)
  return _internal_operator_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void approve_arguments::set_operator_(ArgT0&& arg0, ArgT... args) {
 
 operator__.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.approve_arguments.operator)
}
inline std::string* approve_arguments::mutable_operator_() {
  std::string* _s = _internal_mutable_operator_();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.approve_arguments.operator)
  return _s;
}
inline const std::string& approve_arguments::_internal_operator_() const {
  return operator__.Get();
}
inline void approve_arguments::_internal_set_operator_(const std::string& value) {
  
  operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* approve_arguments::_internal_mutable_operator_() {
  
  return operator__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* approve_arguments::release_operator_() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.approve_arguments.operator)
  return operator__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void approve_arguments::set_allocated_operator_(std::string* operator_) {
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.approve_arguments.operator)
}

// bytes token_id = 3 [(.koinos.btype) = HEX];
inline void approve_arguments::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& approve_arguments::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.approve_arguments.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void approve_arguments::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.approve_arguments.token_id)
}
inline std::string* approve_arguments::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.approve_arguments.token_id)
  return _s;
}
inline const std::string& approve_arguments::_internal_token_id() const {
  return token_id_.Get();
}
inline void approve_arguments::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* approve_arguments::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* approve_arguments::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.approve_arguments.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void approve_arguments::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.approve_arguments.token_id)
}

// optional string memo = 4;
inline bool approve_arguments::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool approve_arguments::has_memo() const {
  return _internal_has_memo();
}
inline void approve_arguments::clear_memo() {
  memo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& approve_arguments::memo() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.approve_arguments.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void approve_arguments::set_memo(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.approve_arguments.memo)
}
inline std::string* approve_arguments::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.approve_arguments.memo)
  return _s;
}
inline const std::string& approve_arguments::_internal_memo() const {
  return memo_.Get();
}
inline void approve_arguments::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* approve_arguments::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000001u;
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* approve_arguments::release_memo() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.approve_arguments.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void approve_arguments::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.approve_arguments.memo)
}

// optional bool approve = 5;
inline bool approve_arguments::_internal_has_approve() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool approve_arguments::has_approve() const {
  return _internal_has_approve();
}
inline void approve_arguments::clear_approve() {
  approve_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool approve_arguments::_internal_approve() const {
  return approve_;
}
inline bool approve_arguments::approve() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.approve_arguments.approve)
  return _internal_approve();
}
inline void approve_arguments::_internal_set_approve(bool value) {
  _has_bits_[0] |= 0x00000002u;
  approve_ = value;
}
inline void approve_arguments::set_approve(bool value) {
  _internal_set_approve(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.approve_arguments.approve)
}

// -------------------------------------------------------------------

// approve_result

// -------------------------------------------------------------------

// token_approval_event

// bytes owner = 1 [(.koinos.btype) = ADDRESS];
inline void token_approval_event::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& token_approval_event::owner() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.token_approval_event.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void token_approval_event::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.token_approval_event.owner)
}
inline std::string* token_approval_event::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.token_approval_event.owner)
  return _s;
}
inline const std::string& token_approval_event::_internal_owner() const {
  return owner_.Get();
}
inline void token_approval_event::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* token_approval_event::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* token_approval_event::release_owner() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.token_approval_event.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void token_approval_event::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.token_approval_event.owner)
}

// bytes operator = 2 [(.koinos.btype) = ADDRESS];
inline void token_approval_event::clear_operator_() {
  operator__.ClearToEmpty();
}
inline const std::string& token_approval_event::operator_() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.token_approval_event.operator)
  return _internal_operator_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void token_approval_event::set_operator_(ArgT0&& arg0, ArgT... args) {
 
 operator__.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.token_approval_event.operator)
}
inline std::string* token_approval_event::mutable_operator_() {
  std::string* _s = _internal_mutable_operator_();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.token_approval_event.operator)
  return _s;
}
inline const std::string& token_approval_event::_internal_operator_() const {
  return operator__.Get();
}
inline void token_approval_event::_internal_set_operator_(const std::string& value) {
  
  operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* token_approval_event::_internal_mutable_operator_() {
  
  return operator__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* token_approval_event::release_operator_() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.token_approval_event.operator)
  return operator__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void token_approval_event::set_allocated_operator_(std::string* operator_) {
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.token_approval_event.operator)
}

// bytes token_id = 3 [(.koinos.btype) = HEX];
inline void token_approval_event::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& token_approval_event::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.token_approval_event.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void token_approval_event::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.token_approval_event.token_id)
}
inline std::string* token_approval_event::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.token_approval_event.token_id)
  return _s;
}
inline const std::string& token_approval_event::_internal_token_id() const {
  return token_id_.Get();
}
inline void token_approval_event::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* token_approval_event::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* token_approval_event::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.token_approval_event.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void token_approval_event::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.token_approval_event.token_id)
}

// optional string memo = 4;
inline bool token_approval_event::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool token_approval_event::has_memo() const {
  return _internal_has_memo();
}
inline void token_approval_event::clear_memo() {
  memo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& token_approval_event::memo() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.token_approval_event.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void token_approval_event::set_memo(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.token_approval_event.memo)
}
inline std::string* token_approval_event::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.token_approval_event.memo)
  return _s;
}
inline const std::string& token_approval_event::_internal_memo() const {
  return memo_.Get();
}
inline void token_approval_event::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* token_approval_event::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000001u;
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* token_approval_event::release_memo() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.token_approval_event.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void token_approval_event::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.token_approval_event.memo)
}

// optional bool approve = 5;
inline bool token_approval_event::_internal_has_approve() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool token_approval_event::has_approve() const {
  return _internal_has_approve();
}
inline void token_approval_event::clear_approve() {
  approve_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool token_approval_event::_internal_approve() const {
  return approve_;
}
inline bool token_approval_event::approve() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.token_approval_event.approve)
  return _internal_approve();
}
inline void token_approval_event::_internal_set_approve(bool value) {
  _has_bits_[0] |= 0x00000002u;
  approve_ = value;
}
inline void token_approval_event::set_approve(bool value) {
  _internal_set_approve(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.token_approval_event.approve)
}

// -------------------------------------------------------------------

// set_approval_for_all_arguments

// bytes owner = 1 [(.koinos.btype) = ADDRESS];
inline void set_approval_for_all_arguments::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& set_approval_for_all_arguments::owner() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.set_approval_for_all_arguments.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set_approval_for_all_arguments::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.set_approval_for_all_arguments.owner)
}
inline std::string* set_approval_for_all_arguments::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.set_approval_for_all_arguments.owner)
  return _s;
}
inline const std::string& set_approval_for_all_arguments::_internal_owner() const {
  return owner_.Get();
}
inline void set_approval_for_all_arguments::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* set_approval_for_all_arguments::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* set_approval_for_all_arguments::release_owner() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.set_approval_for_all_arguments.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void set_approval_for_all_arguments::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.set_approval_for_all_arguments.owner)
}

// bytes operator = 2 [(.koinos.btype) = ADDRESS];
inline void set_approval_for_all_arguments::clear_operator_() {
  operator__.ClearToEmpty();
}
inline const std::string& set_approval_for_all_arguments::operator_() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.set_approval_for_all_arguments.operator)
  return _internal_operator_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set_approval_for_all_arguments::set_operator_(ArgT0&& arg0, ArgT... args) {
 
 operator__.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.set_approval_for_all_arguments.operator)
}
inline std::string* set_approval_for_all_arguments::mutable_operator_() {
  std::string* _s = _internal_mutable_operator_();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.set_approval_for_all_arguments.operator)
  return _s;
}
inline const std::string& set_approval_for_all_arguments::_internal_operator_() const {
  return operator__.Get();
}
inline void set_approval_for_all_arguments::_internal_set_operator_(const std::string& value) {
  
  operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* set_approval_for_all_arguments::_internal_mutable_operator_() {
  
  return operator__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* set_approval_for_all_arguments::release_operator_() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.set_approval_for_all_arguments.operator)
  return operator__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void set_approval_for_all_arguments::set_allocated_operator_(std::string* operator_) {
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.set_approval_for_all_arguments.operator)
}

// bool approved = 3;
inline void set_approval_for_all_arguments::clear_approved() {
  approved_ = false;
}
inline bool set_approval_for_all_arguments::_internal_approved() const {
  return approved_;
}
inline bool set_approval_for_all_arguments::approved() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.set_approval_for_all_arguments.approved)
  return _internal_approved();
}
inline void set_approval_for_all_arguments::_internal_set_approved(bool value) {
  
  approved_ = value;
}
inline void set_approval_for_all_arguments::set_approved(bool value) {
  _internal_set_approved(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.set_approval_for_all_arguments.approved)
}

// optional string memo = 4;
inline bool set_approval_for_all_arguments::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool set_approval_for_all_arguments::has_memo() const {
  return _internal_has_memo();
}
inline void set_approval_for_all_arguments::clear_memo() {
  memo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& set_approval_for_all_arguments::memo() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.set_approval_for_all_arguments.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set_approval_for_all_arguments::set_memo(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.set_approval_for_all_arguments.memo)
}
inline std::string* set_approval_for_all_arguments::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.set_approval_for_all_arguments.memo)
  return _s;
}
inline const std::string& set_approval_for_all_arguments::_internal_memo() const {
  return memo_.Get();
}
inline void set_approval_for_all_arguments::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* set_approval_for_all_arguments::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000001u;
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* set_approval_for_all_arguments::release_memo() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.set_approval_for_all_arguments.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void set_approval_for_all_arguments::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.set_approval_for_all_arguments.memo)
}

// -------------------------------------------------------------------

// set_approval_for_all_result

// -------------------------------------------------------------------

// operator_approval_event

// bytes owner = 1 [(.koinos.btype) = ADDRESS];
inline void operator_approval_event::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& operator_approval_event::owner() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.operator_approval_event.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void operator_approval_event::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.operator_approval_event.owner)
}
inline std::string* operator_approval_event::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.operator_approval_event.owner)
  return _s;
}
inline const std::string& operator_approval_event::_internal_owner() const {
  return owner_.Get();
}
inline void operator_approval_event::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* operator_approval_event::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* operator_approval_event::release_owner() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.operator_approval_event.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void operator_approval_event::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.operator_approval_event.owner)
}

// bytes operator = 2 [(.koinos.btype) = ADDRESS];
inline void operator_approval_event::clear_operator_() {
  operator__.ClearToEmpty();
}
inline const std::string& operator_approval_event::operator_() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.operator_approval_event.operator)
  return _internal_operator_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void operator_approval_event::set_operator_(ArgT0&& arg0, ArgT... args) {
 
 operator__.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.operator_approval_event.operator)
}
inline std::string* operator_approval_event::mutable_operator_() {
  std::string* _s = _internal_mutable_operator_();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.operator_approval_event.operator)
  return _s;
}
inline const std::string& operator_approval_event::_internal_operator_() const {
  return operator__.Get();
}
inline void operator_approval_event::_internal_set_operator_(const std::string& value) {
  
  operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* operator_approval_event::_internal_mutable_operator_() {
  
  return operator__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* operator_approval_event::release_operator_() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.operator_approval_event.operator)
  return operator__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void operator_approval_event::set_allocated_operator_(std::string* operator_) {
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.operator_approval_event.operator)
}

// bool approved = 3;
inline void operator_approval_event::clear_approved() {
  approved_ = false;
}
inline bool operator_approval_event::_internal_approved() const {
  return approved_;
}
inline bool operator_approval_event::approved() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.operator_approval_event.approved)
  return _internal_approved();
}
inline void operator_approval_event::_internal_set_approved(bool value) {
  
  approved_ = value;
}
inline void operator_approval_event::set_approved(bool value) {
  _internal_set_approved(value);
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.operator_approval_event.approved)
}

// optional string memo = 4;
inline bool operator_approval_event::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool operator_approval_event::has_memo() const {
  return _internal_has_memo();
}
inline void operator_approval_event::clear_memo() {
  memo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& operator_approval_event::memo() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.operator_approval_event.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void operator_approval_event::set_memo(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.operator_approval_event.memo)
}
inline std::string* operator_approval_event::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.operator_approval_event.memo)
  return _s;
}
inline const std::string& operator_approval_event::_internal_memo() const {
  return memo_.Get();
}
inline void operator_approval_event::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* operator_approval_event::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000001u;
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* operator_approval_event::release_memo() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.operator_approval_event.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void operator_approval_event::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.operator_approval_event.memo)
}

// -------------------------------------------------------------------

// mint_arguments

// bytes to = 1 [(.koinos.btype) = ADDRESS];
inline void mint_arguments::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& mint_arguments::to() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.mint_arguments.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mint_arguments::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.mint_arguments.to)
}
inline std::string* mint_arguments::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.mint_arguments.to)
  return _s;
}
inline const std::string& mint_arguments::_internal_to() const {
  return to_.Get();
}
inline void mint_arguments::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* mint_arguments::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* mint_arguments::release_to() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.mint_arguments.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void mint_arguments::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.mint_arguments.to)
}

// bytes token_id = 2 [(.koinos.btype) = HEX];
inline void mint_arguments::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& mint_arguments::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.mint_arguments.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mint_arguments::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.mint_arguments.token_id)
}
inline std::string* mint_arguments::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.mint_arguments.token_id)
  return _s;
}
inline const std::string& mint_arguments::_internal_token_id() const {
  return token_id_.Get();
}
inline void mint_arguments::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* mint_arguments::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* mint_arguments::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.mint_arguments.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void mint_arguments::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.mint_arguments.token_id)
}

// optional string memo = 3;
inline bool mint_arguments::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool mint_arguments::has_memo() const {
  return _internal_has_memo();
}
inline void mint_arguments::clear_memo() {
  memo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& mint_arguments::memo() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.mint_arguments.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mint_arguments::set_memo(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.mint_arguments.memo)
}
inline std::string* mint_arguments::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.mint_arguments.memo)
  return _s;
}
inline const std::string& mint_arguments::_internal_memo() const {
  return memo_.Get();
}
inline void mint_arguments::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* mint_arguments::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000001u;
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* mint_arguments::release_memo() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.mint_arguments.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void mint_arguments::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.mint_arguments.memo)
}

// -------------------------------------------------------------------

// mint_result

// -------------------------------------------------------------------

// mint_event

// bytes to = 1 [(.koinos.btype) = ADDRESS];
inline void mint_event::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& mint_event::to() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.mint_event.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mint_event::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.mint_event.to)
}
inline std::string* mint_event::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.mint_event.to)
  return _s;
}
inline const std::string& mint_event::_internal_to() const {
  return to_.Get();
}
inline void mint_event::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* mint_event::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* mint_event::release_to() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.mint_event.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void mint_event::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.mint_event.to)
}

// bytes token_id = 2 [(.koinos.btype) = HEX];
inline void mint_event::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& mint_event::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.mint_event.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mint_event::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.mint_event.token_id)
}
inline std::string* mint_event::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.mint_event.token_id)
  return _s;
}
inline const std::string& mint_event::_internal_token_id() const {
  return token_id_.Get();
}
inline void mint_event::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* mint_event::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* mint_event::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.mint_event.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void mint_event::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.mint_event.token_id)
}

// optional string memo = 3;
inline bool mint_event::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool mint_event::has_memo() const {
  return _internal_has_memo();
}
inline void mint_event::clear_memo() {
  memo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& mint_event::memo() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.mint_event.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mint_event::set_memo(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.mint_event.memo)
}
inline std::string* mint_event::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.mint_event.memo)
  return _s;
}
inline const std::string& mint_event::_internal_memo() const {
  return memo_.Get();
}
inline void mint_event::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* mint_event::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000001u;
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* mint_event::release_memo() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.mint_event.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void mint_event::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.mint_event.memo)
}

// -------------------------------------------------------------------

// transfer_arguments

// bytes from = 1 [deprecated = true, (.koinos.btype) = ADDRESS];
inline void transfer_arguments::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& transfer_arguments::from() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.transfer_arguments.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transfer_arguments::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.transfer_arguments.from)
}
inline std::string* transfer_arguments::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.transfer_arguments.from)
  return _s;
}
inline const std::string& transfer_arguments::_internal_from() const {
  return from_.Get();
}
inline void transfer_arguments::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transfer_arguments::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transfer_arguments::release_from() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.transfer_arguments.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transfer_arguments::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.transfer_arguments.from)
}

// bytes to = 2 [(.koinos.btype) = ADDRESS];
inline void transfer_arguments::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& transfer_arguments::to() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.transfer_arguments.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transfer_arguments::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.transfer_arguments.to)
}
inline std::string* transfer_arguments::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.transfer_arguments.to)
  return _s;
}
inline const std::string& transfer_arguments::_internal_to() const {
  return to_.Get();
}
inline void transfer_arguments::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transfer_arguments::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transfer_arguments::release_to() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.transfer_arguments.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transfer_arguments::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.transfer_arguments.to)
}

// bytes token_id = 3 [(.koinos.btype) = HEX];
inline void transfer_arguments::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& transfer_arguments::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.transfer_arguments.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transfer_arguments::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.transfer_arguments.token_id)
}
inline std::string* transfer_arguments::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.transfer_arguments.token_id)
  return _s;
}
inline const std::string& transfer_arguments::_internal_token_id() const {
  return token_id_.Get();
}
inline void transfer_arguments::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transfer_arguments::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transfer_arguments::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.transfer_arguments.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transfer_arguments::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.transfer_arguments.token_id)
}

// optional string memo = 4;
inline bool transfer_arguments::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool transfer_arguments::has_memo() const {
  return _internal_has_memo();
}
inline void transfer_arguments::clear_memo() {
  memo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& transfer_arguments::memo() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.transfer_arguments.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transfer_arguments::set_memo(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.transfer_arguments.memo)
}
inline std::string* transfer_arguments::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.transfer_arguments.memo)
  return _s;
}
inline const std::string& transfer_arguments::_internal_memo() const {
  return memo_.Get();
}
inline void transfer_arguments::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transfer_arguments::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000001u;
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transfer_arguments::release_memo() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.transfer_arguments.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transfer_arguments::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.transfer_arguments.memo)
}

// -------------------------------------------------------------------

// transfer_result

// -------------------------------------------------------------------

// transfer_event

// bytes from = 1 [(.koinos.btype) = ADDRESS];
inline void transfer_event::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& transfer_event::from() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.transfer_event.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transfer_event::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.transfer_event.from)
}
inline std::string* transfer_event::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.transfer_event.from)
  return _s;
}
inline const std::string& transfer_event::_internal_from() const {
  return from_.Get();
}
inline void transfer_event::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transfer_event::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transfer_event::release_from() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.transfer_event.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transfer_event::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.transfer_event.from)
}

// bytes to = 2 [(.koinos.btype) = ADDRESS];
inline void transfer_event::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& transfer_event::to() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.transfer_event.to)
  return _internal_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transfer_event::set_to(ArgT0&& arg0, ArgT... args) {
 
 to_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.transfer_event.to)
}
inline std::string* transfer_event::mutable_to() {
  std::string* _s = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.transfer_event.to)
  return _s;
}
inline const std::string& transfer_event::_internal_to() const {
  return to_.Get();
}
inline void transfer_event::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transfer_event::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transfer_event::release_to() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.transfer_event.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transfer_event::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.transfer_event.to)
}

// bytes token_id = 3 [(.koinos.btype) = HEX];
inline void transfer_event::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& transfer_event::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.transfer_event.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transfer_event::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.transfer_event.token_id)
}
inline std::string* transfer_event::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.transfer_event.token_id)
  return _s;
}
inline const std::string& transfer_event::_internal_token_id() const {
  return token_id_.Get();
}
inline void transfer_event::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transfer_event::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transfer_event::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.transfer_event.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transfer_event::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.transfer_event.token_id)
}

// optional string memo = 4;
inline bool transfer_event::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool transfer_event::has_memo() const {
  return _internal_has_memo();
}
inline void transfer_event::clear_memo() {
  memo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& transfer_event::memo() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.transfer_event.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void transfer_event::set_memo(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.transfer_event.memo)
}
inline std::string* transfer_event::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.transfer_event.memo)
  return _s;
}
inline const std::string& transfer_event::_internal_memo() const {
  return memo_.Get();
}
inline void transfer_event::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* transfer_event::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000001u;
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* transfer_event::release_memo() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.transfer_event.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void transfer_event::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.transfer_event.memo)
}

// -------------------------------------------------------------------

// burn_arguments

// bytes token_id = 1 [(.koinos.btype) = HEX];
inline void burn_arguments::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& burn_arguments::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.burn_arguments.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void burn_arguments::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.burn_arguments.token_id)
}
inline std::string* burn_arguments::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.burn_arguments.token_id)
  return _s;
}
inline const std::string& burn_arguments::_internal_token_id() const {
  return token_id_.Get();
}
inline void burn_arguments::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* burn_arguments::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* burn_arguments::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.burn_arguments.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void burn_arguments::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.burn_arguments.token_id)
}

// optional string memo = 2;
inline bool burn_arguments::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool burn_arguments::has_memo() const {
  return _internal_has_memo();
}
inline void burn_arguments::clear_memo() {
  memo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& burn_arguments::memo() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.burn_arguments.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void burn_arguments::set_memo(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.burn_arguments.memo)
}
inline std::string* burn_arguments::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.burn_arguments.memo)
  return _s;
}
inline const std::string& burn_arguments::_internal_memo() const {
  return memo_.Get();
}
inline void burn_arguments::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* burn_arguments::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000001u;
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* burn_arguments::release_memo() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.burn_arguments.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void burn_arguments::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.burn_arguments.memo)
}

// -------------------------------------------------------------------

// burn_result

// -------------------------------------------------------------------

// burn_event

// bytes from = 1 [(.koinos.btype) = ADDRESS];
inline void burn_event::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& burn_event::from() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.burn_event.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void burn_event::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.burn_event.from)
}
inline std::string* burn_event::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.burn_event.from)
  return _s;
}
inline const std::string& burn_event::_internal_from() const {
  return from_.Get();
}
inline void burn_event::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* burn_event::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* burn_event::release_from() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.burn_event.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void burn_event::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.burn_event.from)
}

// bytes token_id = 2 [(.koinos.btype) = HEX];
inline void burn_event::clear_token_id() {
  token_id_.ClearToEmpty();
}
inline const std::string& burn_event::token_id() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.burn_event.token_id)
  return _internal_token_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void burn_event::set_token_id(ArgT0&& arg0, ArgT... args) {
 
 token_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.burn_event.token_id)
}
inline std::string* burn_event::mutable_token_id() {
  std::string* _s = _internal_mutable_token_id();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.burn_event.token_id)
  return _s;
}
inline const std::string& burn_event::_internal_token_id() const {
  return token_id_.Get();
}
inline void burn_event::_internal_set_token_id(const std::string& value) {
  
  token_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* burn_event::_internal_mutable_token_id() {
  
  return token_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* burn_event::release_token_id() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.burn_event.token_id)
  return token_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void burn_event::set_allocated_token_id(std::string* token_id) {
  if (token_id != nullptr) {
    
  } else {
    
  }
  token_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.burn_event.token_id)
}

// optional string memo = 3;
inline bool burn_event::_internal_has_memo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool burn_event::has_memo() const {
  return _internal_has_memo();
}
inline void burn_event::clear_memo() {
  memo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& burn_event::memo() const {
  // @@protoc_insertion_point(field_get:koinos.standards.kcs5.burn_event.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void burn_event::set_memo(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.standards.kcs5.burn_event.memo)
}
inline std::string* burn_event::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:koinos.standards.kcs5.burn_event.memo)
  return _s;
}
inline const std::string& burn_event::_internal_memo() const {
  return memo_.Get();
}
inline void burn_event::_internal_set_memo(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* burn_event::_internal_mutable_memo() {
  _has_bits_[0] |= 0x00000001u;
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* burn_event::release_memo() {
  // @@protoc_insertion_point(field_release:koinos.standards.kcs5.burn_event.memo)
  if (!_internal_has_memo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void burn_event::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.standards.kcs5.burn_event.memo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kcs5
}  // namespace standards
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fstandards_2fkcs5_2eproto
