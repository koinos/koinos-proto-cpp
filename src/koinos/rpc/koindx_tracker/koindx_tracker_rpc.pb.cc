// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/koindx_tracker/koindx_tracker_rpc.proto

#include "koinos/rpc/koindx_tracker/koindx_tracker_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace rpc {
namespace koindx_tracker {
constexpr pool_pair::pool_pair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pool_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_a_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_b_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct pool_pairDefaultTypeInternal {
  constexpr pool_pairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pool_pairDefaultTypeInternal() {}
  union {
    pool_pair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pool_pairDefaultTypeInternal _pool_pair_default_instance_;
constexpr get_pools_request::get_pools_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : limit_(uint64_t{0u})
  , _oneof_case_{}{}
struct get_pools_requestDefaultTypeInternal {
  constexpr get_pools_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_pools_requestDefaultTypeInternal() {}
  union {
    get_pools_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_pools_requestDefaultTypeInternal _get_pools_request_default_instance_;
constexpr get_pools_response::get_pools_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct get_pools_responseDefaultTypeInternal {
  constexpr get_pools_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_pools_responseDefaultTypeInternal() {}
  union {
    get_pools_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_pools_responseDefaultTypeInternal _get_pools_response_default_instance_;
constexpr account_liquidity::account_liquidity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , balance_(uint64_t{0u})
  , coin_ms_hi_(uint64_t{0u})
  , coin_ms_lo_(uint64_t{0u}){}
struct account_liquidityDefaultTypeInternal {
  constexpr account_liquidityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~account_liquidityDefaultTypeInternal() {}
  union {
    account_liquidity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT account_liquidityDefaultTypeInternal _account_liquidity_default_instance_;
constexpr get_liquidity_request::get_liquidity_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pool_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , limit_(uint64_t{0u})
  , start_ms_(uint64_t{0u})
  , end_ms_(uint64_t{0u}){}
struct get_liquidity_requestDefaultTypeInternal {
  constexpr get_liquidity_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_liquidity_requestDefaultTypeInternal() {}
  union {
    get_liquidity_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_liquidity_requestDefaultTypeInternal _get_liquidity_request_default_instance_;
constexpr get_liquidity_response::get_liquidity_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct get_liquidity_responseDefaultTypeInternal {
  constexpr get_liquidity_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_liquidity_responseDefaultTypeInternal() {}
  union {
    get_liquidity_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_liquidity_responseDefaultTypeInternal _get_liquidity_response_default_instance_;
constexpr pool_tvl::pool_tvl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pool_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tvl_(uint64_t{0u}){}
struct pool_tvlDefaultTypeInternal {
  constexpr pool_tvlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pool_tvlDefaultTypeInternal() {}
  union {
    pool_tvl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pool_tvlDefaultTypeInternal _pool_tvl_default_instance_;
constexpr get_tvl_request::get_tvl_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : limit_(uint64_t{0u})
  , ms_(uint64_t{0u})
  , _oneof_case_{}{}
struct get_tvl_requestDefaultTypeInternal {
  constexpr get_tvl_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_tvl_requestDefaultTypeInternal() {}
  union {
    get_tvl_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_tvl_requestDefaultTypeInternal _get_tvl_request_default_instance_;
constexpr get_tvl_response::get_tvl_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct get_tvl_responseDefaultTypeInternal {
  constexpr get_tvl_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_tvl_responseDefaultTypeInternal() {}
  union {
    get_tvl_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_tvl_responseDefaultTypeInternal _get_tvl_response_default_instance_;
constexpr koindx_tracker_request::koindx_tracker_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct koindx_tracker_requestDefaultTypeInternal {
  constexpr koindx_tracker_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~koindx_tracker_requestDefaultTypeInternal() {}
  union {
    koindx_tracker_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT koindx_tracker_requestDefaultTypeInternal _koindx_tracker_request_default_instance_;
constexpr koindx_tracker_response::koindx_tracker_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct koindx_tracker_responseDefaultTypeInternal {
  constexpr koindx_tracker_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~koindx_tracker_responseDefaultTypeInternal() {}
  union {
    koindx_tracker_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT koindx_tracker_responseDefaultTypeInternal _koindx_tracker_response_default_instance_;
}  // namespace koindx_tracker
}  // namespace rpc
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::pool_pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::pool_pair, pool_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::pool_pair, token_a_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::pool_pair, token_b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_pools_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_pools_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_pools_request, limit_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_pools_request, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_pools_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_pools_response, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::account_liquidity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::account_liquidity, address_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::account_liquidity, balance_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::account_liquidity, coin_ms_hi_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::account_liquidity, coin_ms_lo_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_liquidity_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_liquidity_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_liquidity_request, pool_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_liquidity_request, start_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_liquidity_request, limit_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_liquidity_request, start_ms_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_liquidity_request, end_ms_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_liquidity_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_liquidity_response, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::pool_tvl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::pool_tvl, pool_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::pool_tvl, tvl_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_tvl_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_tvl_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_tvl_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_tvl_request, limit_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_tvl_request, ms_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_tvl_request, target_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_tvl_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::get_tvl_response, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::koindx_tracker_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::koindx_tracker_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::koindx_tracker_request, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::koindx_tracker_response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::koindx_tracker_response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::koindx_tracker::koindx_tracker_response, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::rpc::koindx_tracker::pool_pair)},
  { 8, -1, sizeof(::koinos::rpc::koindx_tracker::get_pools_request)},
  { 17, -1, sizeof(::koinos::rpc::koindx_tracker::get_pools_response)},
  { 23, -1, sizeof(::koinos::rpc::koindx_tracker::account_liquidity)},
  { 32, 42, sizeof(::koinos::rpc::koindx_tracker::get_liquidity_request)},
  { 47, -1, sizeof(::koinos::rpc::koindx_tracker::get_liquidity_response)},
  { 53, -1, sizeof(::koinos::rpc::koindx_tracker::pool_tvl)},
  { 60, 70, sizeof(::koinos::rpc::koindx_tracker::get_tvl_request)},
  { 74, -1, sizeof(::koinos::rpc::koindx_tracker::get_tvl_response)},
  { 80, -1, sizeof(::koinos::rpc::koindx_tracker::koindx_tracker_request)},
  { 90, -1, sizeof(::koinos::rpc::koindx_tracker::koindx_tracker_response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::koindx_tracker::_pool_pair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::koindx_tracker::_get_pools_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::koindx_tracker::_get_pools_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::koindx_tracker::_account_liquidity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::koindx_tracker::_get_liquidity_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::koindx_tracker::_get_liquidity_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::koindx_tracker::_pool_tvl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::koindx_tracker::_get_tvl_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::koindx_tracker::_get_tvl_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::koindx_tracker::_koindx_tracker_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::koindx_tracker::_koindx_tracker_response_default_instance_),
};

const char descriptor_table_protodef_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2koinos/rpc/koindx_tracker/koindx_track"
  "er_rpc.proto\022\031koinos.rpc.koindx_tracker\032"
  "*koinos/koindx_tracker/koindx_tracker.pr"
  "oto\032\024koinos/options.proto\032\024koinos/rpc/rp"
  "c.proto\"A\n\tpool_pair\022\022\n\004pool\030\001 \001(\014B\004\200\265\030\006"
  "\022\017\n\007token_a\030\002 \001(\t\022\017\n\007token_b\030\003 \001(\t\"]\n\021ge"
  "t_pools_request\022\025\n\005start\030\001 \001(\014B\004\200\265\030\006H\000\022\024"
  "\n\004pool\030\002 \001(\014B\004\200\265\030\006H\000\022\021\n\005limit\030\003 \001(\004B\0020\001B"
  "\010\n\006target\"J\n\022get_pools_response\0224\n\006value"
  "s\030\001 \003(\0132$.koinos.rpc.koindx_tracker.pool"
  "_pair\"o\n\021account_liquidity\022\025\n\007address\030\001 "
  "\001(\014B\004\200\265\030\006\022\023\n\007balance\030\002 \001(\004B\0020\001\022\026\n\ncoin_m"
  "s_hi\030\003 \001(\004B\0020\001\022\026\n\ncoin_ms_lo\030\004 \001(\004B\0020\001\"\237"
  "\001\n\025get_liquidity_request\022\022\n\004pool\030\001 \001(\014B\004"
  "\200\265\030\006\022\023\n\005start\030\002 \001(\014B\004\200\265\030\006\022\021\n\005limit\030\003 \001(\004"
  "B\0020\001\022\031\n\010start_ms\030\004 \001(\004B\0020\001H\000\210\001\001\022\027\n\006end_m"
  "s\030\005 \001(\004B\0020\001H\001\210\001\001B\013\n\t_start_msB\t\n\007_end_ms"
  "\"V\n\026get_liquidity_response\022<\n\006values\030\001 \003"
  "(\0132,.koinos.rpc.koindx_tracker.account_l"
  "iquidity\"/\n\010pool_tvl\022\022\n\004pool\030\001 \001(\014B\004\200\265\030\006"
  "\022\017\n\003tvl\030\002 \001(\004B\0020\001\"w\n\017get_tvl_request\022\025\n\005"
  "start\030\001 \001(\014B\004\200\265\030\006H\000\022\024\n\004pool\030\002 \001(\014B\004\200\265\030\006H"
  "\000\022\021\n\005limit\030\003 \001(\004B\0020\001\022\023\n\002ms\030\004 \001(\004B\0020\001H\001\210\001"
  "\001B\010\n\006targetB\005\n\003_ms\"G\n\020get_tvl_response\0223"
  "\n\006values\030\001 \003(\0132#.koinos.rpc.koindx_track"
  "er.pool_tvl\"\236\002\n\026koindx_tracker_request\022,"
  "\n\010reserved\030\001 \001(\0132\030.koinos.rpc.reserved_r"
  "pcH\000\022A\n\tget_pools\030\002 \001(\0132,.koinos.rpc.koi"
  "ndx_tracker.get_pools_requestH\000\022I\n\rget_l"
  "iquidity\030\003 \001(\01320.koinos.rpc.koindx_track"
  "er.get_liquidity_requestH\000\022=\n\007get_tvl\030\004 "
  "\001(\0132*.koinos.rpc.koindx_tracker.get_tvl_"
  "requestH\000B\t\n\007request\"\316\002\n\027koindx_tracker_"
  "response\022,\n\010reserved\030\001 \001(\0132\030.koinos.rpc."
  "reserved_rpcH\000\022)\n\005error\030\002 \001(\0132\030.koinos.r"
  "pc.error_statusH\000\022B\n\tget_pools\030\003 \001(\0132-.k"
  "oinos.rpc.koindx_tracker.get_pools_respo"
  "nseH\000\022J\n\rget_liquidity\030\004 \001(\01321.koinos.rp"
  "c.koindx_tracker.get_liquidity_responseH"
  "\000\022>\n\007get_tvl\030\005 \001(\0132+.koinos.rpc.koindx_t"
  "racker.get_tvl_responseH\000B\n\n\010responseBDZ"
  "Bgithub.com/koinos/koinos-proto-golang/v"
  "2/koinos/rpc/koindx_trackerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_deps[3] = {
  &::descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto,
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2frpc_2frpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto = {
  false, false, 1715, descriptor_table_protodef_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto, "koinos/rpc/koindx_tracker/koindx_tracker_rpc.proto", 
  &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_once, descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_deps, 3, 11,
  schemas, file_default_instances, TableStruct_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto::offsets,
  file_level_metadata_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto, file_level_enum_descriptors_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto, file_level_service_descriptors_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_getter() {
  return &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto(&descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto);
namespace koinos {
namespace rpc {
namespace koindx_tracker {

// ===================================================================

class pool_pair::_Internal {
 public:
};

pool_pair::pool_pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.koindx_tracker.pool_pair)
}
pool_pair::pool_pair(const pool_pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pool().empty()) {
    pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pool(), 
      GetArenaForAllocation());
  }
  token_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_a().empty()) {
    token_a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_a(), 
      GetArenaForAllocation());
  }
  token_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token_b().empty()) {
    token_b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_b(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.koindx_tracker.pool_pair)
}

inline void pool_pair::SharedCtor() {
pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_a_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
token_b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

pool_pair::~pool_pair() {
  // @@protoc_insertion_point(destructor:koinos.rpc.koindx_tracker.pool_pair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void pool_pair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pool_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_a_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void pool_pair::ArenaDtor(void* object) {
  pool_pair* _this = reinterpret_cast< pool_pair* >(object);
  (void)_this;
}
void pool_pair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pool_pair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pool_pair::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.koindx_tracker.pool_pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pool_.ClearToEmpty();
  token_a_.ClearToEmpty();
  token_b_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pool_pair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pool = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pool();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token_a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_token_a();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.rpc.koindx_tracker.pool_pair.token_a"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token_b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token_b();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.rpc.koindx_tracker.pool_pair.token_b"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pool_pair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.koindx_tracker.pool_pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pool = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_pool().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pool(), target);
  }

  // string token_a = 2;
  if (!this->_internal_token_a().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_a().data(), static_cast<int>(this->_internal_token_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.rpc.koindx_tracker.pool_pair.token_a");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_a(), target);
  }

  // string token_b = 3;
  if (!this->_internal_token_b().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_b().data(), static_cast<int>(this->_internal_token_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.rpc.koindx_tracker.pool_pair.token_b");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.koindx_tracker.pool_pair)
  return target;
}

size_t pool_pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.koindx_tracker.pool_pair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pool = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_pool().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pool());
  }

  // string token_a = 2;
  if (!this->_internal_token_a().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_a());
  }

  // string token_b = 3;
  if (!this->_internal_token_b().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_b());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pool_pair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    pool_pair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pool_pair::GetClassData() const { return &_class_data_; }

void pool_pair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<pool_pair *>(to)->MergeFrom(
      static_cast<const pool_pair &>(from));
}


void pool_pair::MergeFrom(const pool_pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.koindx_tracker.pool_pair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pool().empty()) {
    _internal_set_pool(from._internal_pool());
  }
  if (!from._internal_token_a().empty()) {
    _internal_set_token_a(from._internal_token_a());
  }
  if (!from._internal_token_b().empty()) {
    _internal_set_token_b(from._internal_token_b());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pool_pair::CopyFrom(const pool_pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.koindx_tracker.pool_pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pool_pair::IsInitialized() const {
  return true;
}

void pool_pair::InternalSwap(pool_pair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pool_, GetArenaForAllocation(),
      &other->pool_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_a_, GetArenaForAllocation(),
      &other->token_a_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_b_, GetArenaForAllocation(),
      &other->token_b_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata pool_pair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto[0]);
}

// ===================================================================

class get_pools_request::_Internal {
 public:
};

get_pools_request::get_pools_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.koindx_tracker.get_pools_request)
}
get_pools_request::get_pools_request(const get_pools_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  limit_ = from.limit_;
  clear_has_target();
  switch (from.target_case()) {
    case kStart: {
      _internal_set_start(from._internal_start());
      break;
    }
    case kPool: {
      _internal_set_pool(from._internal_pool());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.koindx_tracker.get_pools_request)
}

inline void get_pools_request::SharedCtor() {
limit_ = uint64_t{0u};
clear_has_target();
}

get_pools_request::~get_pools_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.koindx_tracker.get_pools_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_pools_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_target()) {
    clear_target();
  }
}

void get_pools_request::ArenaDtor(void* object) {
  get_pools_request* _this = reinterpret_cast< get_pools_request* >(object);
  (void)_this;
}
void get_pools_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_pools_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_pools_request::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.koindx_tracker.get_pools_request)
  switch (target_case()) {
    case kStart: {
      target_.start_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kPool: {
      target_.pool_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void get_pools_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.koindx_tracker.get_pools_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = uint64_t{0u};
  clear_target();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_pools_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes start = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pool = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pool();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 limit = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_pools_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.koindx_tracker.get_pools_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start = 1 [(.koinos.btype) = ADDRESS];
  if (_internal_has_start()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_start(), target);
  }

  // bytes pool = 2 [(.koinos.btype) = ADDRESS];
  if (_internal_has_pool()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pool(), target);
  }

  // uint64 limit = 3 [jstype = JS_STRING];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.koindx_tracker.get_pools_request)
  return target;
}

size_t get_pools_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.koindx_tracker.get_pools_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 limit = 3 [jstype = JS_STRING];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_limit());
  }

  switch (target_case()) {
    // bytes start = 1 [(.koinos.btype) = ADDRESS];
    case kStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_start());
      break;
    }
    // bytes pool = 2 [(.koinos.btype) = ADDRESS];
    case kPool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pool());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_pools_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_pools_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_pools_request::GetClassData() const { return &_class_data_; }

void get_pools_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_pools_request *>(to)->MergeFrom(
      static_cast<const get_pools_request &>(from));
}


void get_pools_request::MergeFrom(const get_pools_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.koindx_tracker.get_pools_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  switch (from.target_case()) {
    case kStart: {
      _internal_set_start(from._internal_start());
      break;
    }
    case kPool: {
      _internal_set_pool(from._internal_pool());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_pools_request::CopyFrom(const get_pools_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.koindx_tracker.get_pools_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_pools_request::IsInitialized() const {
  return true;
}

void get_pools_request::InternalSwap(get_pools_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(limit_, other->limit_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_pools_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto[1]);
}

// ===================================================================

class get_pools_response::_Internal {
 public:
};

get_pools_response::get_pools_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.koindx_tracker.get_pools_response)
}
get_pools_response::get_pools_response(const get_pools_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.koindx_tracker.get_pools_response)
}

inline void get_pools_response::SharedCtor() {
}

get_pools_response::~get_pools_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.koindx_tracker.get_pools_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_pools_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_pools_response::ArenaDtor(void* object) {
  get_pools_response* _this = reinterpret_cast< get_pools_response* >(object);
  (void)_this;
}
void get_pools_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_pools_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_pools_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.koindx_tracker.get_pools_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_pools_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .koinos.rpc.koindx_tracker.pool_pair values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_pools_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.koindx_tracker.get_pools_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .koinos.rpc.koindx_tracker.pool_pair values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.koindx_tracker.get_pools_response)
  return target;
}

size_t get_pools_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.koindx_tracker.get_pools_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.rpc.koindx_tracker.pool_pair values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_pools_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_pools_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_pools_response::GetClassData() const { return &_class_data_; }

void get_pools_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_pools_response *>(to)->MergeFrom(
      static_cast<const get_pools_response &>(from));
}


void get_pools_response::MergeFrom(const get_pools_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.koindx_tracker.get_pools_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_pools_response::CopyFrom(const get_pools_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.koindx_tracker.get_pools_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_pools_response::IsInitialized() const {
  return true;
}

void get_pools_response::InternalSwap(get_pools_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_pools_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto[2]);
}

// ===================================================================

class account_liquidity::_Internal {
 public:
};

account_liquidity::account_liquidity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.koindx_tracker.account_liquidity)
}
account_liquidity::account_liquidity(const account_liquidity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&coin_ms_lo_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(coin_ms_lo_));
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.koindx_tracker.account_liquidity)
}

inline void account_liquidity::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&balance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coin_ms_lo_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(coin_ms_lo_));
}

account_liquidity::~account_liquidity() {
  // @@protoc_insertion_point(destructor:koinos.rpc.koindx_tracker.account_liquidity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void account_liquidity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void account_liquidity::ArenaDtor(void* object) {
  account_liquidity* _this = reinterpret_cast< account_liquidity* >(object);
  (void)_this;
}
void account_liquidity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void account_liquidity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void account_liquidity::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.koindx_tracker.account_liquidity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_ms_lo_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(coin_ms_lo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* account_liquidity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes address = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 balance = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin_ms_hi = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coin_ms_hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin_ms_lo = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          coin_ms_lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* account_liquidity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.koindx_tracker.account_liquidity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_address().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 balance = 2 [jstype = JS_STRING];
  if (this->_internal_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_balance(), target);
  }

  // uint64 coin_ms_hi = 3 [jstype = JS_STRING];
  if (this->_internal_coin_ms_hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_coin_ms_hi(), target);
  }

  // uint64 coin_ms_lo = 4 [jstype = JS_STRING];
  if (this->_internal_coin_ms_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_coin_ms_lo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.koindx_tracker.account_liquidity)
  return target;
}

size_t account_liquidity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.koindx_tracker.account_liquidity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // uint64 balance = 2 [jstype = JS_STRING];
  if (this->_internal_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_balance());
  }

  // uint64 coin_ms_hi = 3 [jstype = JS_STRING];
  if (this->_internal_coin_ms_hi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin_ms_hi());
  }

  // uint64 coin_ms_lo = 4 [jstype = JS_STRING];
  if (this->_internal_coin_ms_lo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin_ms_lo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData account_liquidity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    account_liquidity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*account_liquidity::GetClassData() const { return &_class_data_; }

void account_liquidity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<account_liquidity *>(to)->MergeFrom(
      static_cast<const account_liquidity &>(from));
}


void account_liquidity::MergeFrom(const account_liquidity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.koindx_tracker.account_liquidity)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  if (from._internal_coin_ms_hi() != 0) {
    _internal_set_coin_ms_hi(from._internal_coin_ms_hi());
  }
  if (from._internal_coin_ms_lo() != 0) {
    _internal_set_coin_ms_lo(from._internal_coin_ms_lo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void account_liquidity::CopyFrom(const account_liquidity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.koindx_tracker.account_liquidity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_liquidity::IsInitialized() const {
  return true;
}

void account_liquidity::InternalSwap(account_liquidity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(account_liquidity, coin_ms_lo_)
      + sizeof(account_liquidity::coin_ms_lo_)
      - PROTOBUF_FIELD_OFFSET(account_liquidity, balance_)>(
          reinterpret_cast<char*>(&balance_),
          reinterpret_cast<char*>(&other->balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata account_liquidity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto[3]);
}

// ===================================================================

class get_liquidity_request::_Internal {
 public:
  using HasBits = decltype(std::declval<get_liquidity_request>()._has_bits_);
  static void set_has_start_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

get_liquidity_request::get_liquidity_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.koindx_tracker.get_liquidity_request)
}
get_liquidity_request::get_liquidity_request(const get_liquidity_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pool().empty()) {
    pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pool(), 
      GetArenaForAllocation());
  }
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start().empty()) {
    start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start(), 
      GetArenaForAllocation());
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_ms_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(end_ms_));
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.koindx_tracker.get_liquidity_request)
}

inline void get_liquidity_request::SharedCtor() {
pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_ms_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(end_ms_));
}

get_liquidity_request::~get_liquidity_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.koindx_tracker.get_liquidity_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_liquidity_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pool_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_liquidity_request::ArenaDtor(void* object) {
  get_liquidity_request* _this = reinterpret_cast< get_liquidity_request* >(object);
  (void)_this;
}
void get_liquidity_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_liquidity_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_liquidity_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.koindx_tracker.get_liquidity_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pool_.ClearToEmpty();
  start_.ClearToEmpty();
  limit_ = uint64_t{0u};
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&start_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_ms_) -
        reinterpret_cast<char*>(&start_ms_)) + sizeof(end_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_liquidity_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pool = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pool();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes start = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_start();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 limit = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 start_ms = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_start_ms(&has_bits);
          start_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 end_ms = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_end_ms(&has_bits);
          end_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_liquidity_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.koindx_tracker.get_liquidity_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pool = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_pool().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pool(), target);
  }

  // bytes start = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_start().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_start(), target);
  }

  // uint64 limit = 3 [jstype = JS_STRING];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_limit(), target);
  }

  // optional uint64 start_ms = 4 [jstype = JS_STRING];
  if (_internal_has_start_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_start_ms(), target);
  }

  // optional uint64 end_ms = 5 [jstype = JS_STRING];
  if (_internal_has_end_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_end_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.koindx_tracker.get_liquidity_request)
  return target;
}

size_t get_liquidity_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.koindx_tracker.get_liquidity_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pool = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_pool().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pool());
  }

  // bytes start = 2 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_start().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start());
  }

  // uint64 limit = 3 [jstype = JS_STRING];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_limit());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 start_ms = 4 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_start_ms());
    }

    // optional uint64 end_ms = 5 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_end_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_liquidity_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_liquidity_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_liquidity_request::GetClassData() const { return &_class_data_; }

void get_liquidity_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_liquidity_request *>(to)->MergeFrom(
      static_cast<const get_liquidity_request &>(from));
}


void get_liquidity_request::MergeFrom(const get_liquidity_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.koindx_tracker.get_liquidity_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pool().empty()) {
    _internal_set_pool(from._internal_pool());
  }
  if (!from._internal_start().empty()) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_ms_ = from.start_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_ms_ = from.end_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_liquidity_request::CopyFrom(const get_liquidity_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.koindx_tracker.get_liquidity_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_liquidity_request::IsInitialized() const {
  return true;
}

void get_liquidity_request::InternalSwap(get_liquidity_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pool_, GetArenaForAllocation(),
      &other->pool_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_, GetArenaForAllocation(),
      &other->start_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(get_liquidity_request, end_ms_)
      + sizeof(get_liquidity_request::end_ms_)
      - PROTOBUF_FIELD_OFFSET(get_liquidity_request, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata get_liquidity_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto[4]);
}

// ===================================================================

class get_liquidity_response::_Internal {
 public:
};

get_liquidity_response::get_liquidity_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.koindx_tracker.get_liquidity_response)
}
get_liquidity_response::get_liquidity_response(const get_liquidity_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.koindx_tracker.get_liquidity_response)
}

inline void get_liquidity_response::SharedCtor() {
}

get_liquidity_response::~get_liquidity_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.koindx_tracker.get_liquidity_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_liquidity_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_liquidity_response::ArenaDtor(void* object) {
  get_liquidity_response* _this = reinterpret_cast< get_liquidity_response* >(object);
  (void)_this;
}
void get_liquidity_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_liquidity_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_liquidity_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.koindx_tracker.get_liquidity_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_liquidity_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .koinos.rpc.koindx_tracker.account_liquidity values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_liquidity_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.koindx_tracker.get_liquidity_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .koinos.rpc.koindx_tracker.account_liquidity values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.koindx_tracker.get_liquidity_response)
  return target;
}

size_t get_liquidity_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.koindx_tracker.get_liquidity_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.rpc.koindx_tracker.account_liquidity values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_liquidity_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_liquidity_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_liquidity_response::GetClassData() const { return &_class_data_; }

void get_liquidity_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_liquidity_response *>(to)->MergeFrom(
      static_cast<const get_liquidity_response &>(from));
}


void get_liquidity_response::MergeFrom(const get_liquidity_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.koindx_tracker.get_liquidity_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_liquidity_response::CopyFrom(const get_liquidity_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.koindx_tracker.get_liquidity_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_liquidity_response::IsInitialized() const {
  return true;
}

void get_liquidity_response::InternalSwap(get_liquidity_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_liquidity_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto[5]);
}

// ===================================================================

class pool_tvl::_Internal {
 public:
};

pool_tvl::pool_tvl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.koindx_tracker.pool_tvl)
}
pool_tvl::pool_tvl(const pool_tvl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pool().empty()) {
    pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pool(), 
      GetArenaForAllocation());
  }
  tvl_ = from.tvl_;
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.koindx_tracker.pool_tvl)
}

inline void pool_tvl::SharedCtor() {
pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tvl_ = uint64_t{0u};
}

pool_tvl::~pool_tvl() {
  // @@protoc_insertion_point(destructor:koinos.rpc.koindx_tracker.pool_tvl)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void pool_tvl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pool_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void pool_tvl::ArenaDtor(void* object) {
  pool_tvl* _this = reinterpret_cast< pool_tvl* >(object);
  (void)_this;
}
void pool_tvl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pool_tvl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pool_tvl::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.koindx_tracker.pool_tvl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pool_.ClearToEmpty();
  tvl_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pool_tvl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pool = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pool();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tvl = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pool_tvl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.koindx_tracker.pool_tvl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pool = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_pool().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pool(), target);
  }

  // uint64 tvl = 2 [jstype = JS_STRING];
  if (this->_internal_tvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tvl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.koindx_tracker.pool_tvl)
  return target;
}

size_t pool_tvl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.koindx_tracker.pool_tvl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pool = 1 [(.koinos.btype) = ADDRESS];
  if (!this->_internal_pool().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pool());
  }

  // uint64 tvl = 2 [jstype = JS_STRING];
  if (this->_internal_tvl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tvl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pool_tvl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    pool_tvl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pool_tvl::GetClassData() const { return &_class_data_; }

void pool_tvl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<pool_tvl *>(to)->MergeFrom(
      static_cast<const pool_tvl &>(from));
}


void pool_tvl::MergeFrom(const pool_tvl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.koindx_tracker.pool_tvl)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pool().empty()) {
    _internal_set_pool(from._internal_pool());
  }
  if (from._internal_tvl() != 0) {
    _internal_set_tvl(from._internal_tvl());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pool_tvl::CopyFrom(const pool_tvl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.koindx_tracker.pool_tvl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pool_tvl::IsInitialized() const {
  return true;
}

void pool_tvl::InternalSwap(pool_tvl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pool_, GetArenaForAllocation(),
      &other->pool_, other->GetArenaForAllocation()
  );
  swap(tvl_, other->tvl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pool_tvl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto[6]);
}

// ===================================================================

class get_tvl_request::_Internal {
 public:
  using HasBits = decltype(std::declval<get_tvl_request>()._has_bits_);
  static void set_has_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

get_tvl_request::get_tvl_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.koindx_tracker.get_tvl_request)
}
get_tvl_request::get_tvl_request(const get_tvl_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&ms_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(ms_));
  clear_has_target();
  switch (from.target_case()) {
    case kStart: {
      _internal_set_start(from._internal_start());
      break;
    }
    case kPool: {
      _internal_set_pool(from._internal_pool());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.koindx_tracker.get_tvl_request)
}

inline void get_tvl_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ms_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(ms_));
clear_has_target();
}

get_tvl_request::~get_tvl_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.koindx_tracker.get_tvl_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_tvl_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_target()) {
    clear_target();
  }
}

void get_tvl_request::ArenaDtor(void* object) {
  get_tvl_request* _this = reinterpret_cast< get_tvl_request* >(object);
  (void)_this;
}
void get_tvl_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_tvl_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_tvl_request::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.koindx_tracker.get_tvl_request)
  switch (target_case()) {
    case kStart: {
      target_.start_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kPool: {
      target_.pool_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void get_tvl_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.koindx_tracker.get_tvl_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = uint64_t{0u};
  ms_ = uint64_t{0u};
  clear_target();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_tvl_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes start = 1 [(.koinos.btype) = ADDRESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pool = 2 [(.koinos.btype) = ADDRESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pool();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 limit = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ms = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ms(&has_bits);
          ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_tvl_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.koindx_tracker.get_tvl_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start = 1 [(.koinos.btype) = ADDRESS];
  if (_internal_has_start()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_start(), target);
  }

  // bytes pool = 2 [(.koinos.btype) = ADDRESS];
  if (_internal_has_pool()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pool(), target);
  }

  // uint64 limit = 3 [jstype = JS_STRING];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_limit(), target);
  }

  // optional uint64 ms = 4 [jstype = JS_STRING];
  if (_internal_has_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.koindx_tracker.get_tvl_request)
  return target;
}

size_t get_tvl_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.koindx_tracker.get_tvl_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 limit = 3 [jstype = JS_STRING];
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_limit());
  }

  // optional uint64 ms = 4 [jstype = JS_STRING];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ms());
  }

  switch (target_case()) {
    // bytes start = 1 [(.koinos.btype) = ADDRESS];
    case kStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_start());
      break;
    }
    // bytes pool = 2 [(.koinos.btype) = ADDRESS];
    case kPool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_pool());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_tvl_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_tvl_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_tvl_request::GetClassData() const { return &_class_data_; }

void get_tvl_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_tvl_request *>(to)->MergeFrom(
      static_cast<const get_tvl_request &>(from));
}


void get_tvl_request::MergeFrom(const get_tvl_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.koindx_tracker.get_tvl_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from._internal_has_ms()) {
    _internal_set_ms(from._internal_ms());
  }
  switch (from.target_case()) {
    case kStart: {
      _internal_set_start(from._internal_start());
      break;
    }
    case kPool: {
      _internal_set_pool(from._internal_pool());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_tvl_request::CopyFrom(const get_tvl_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.koindx_tracker.get_tvl_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_tvl_request::IsInitialized() const {
  return true;
}

void get_tvl_request::InternalSwap(get_tvl_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(get_tvl_request, ms_)
      + sizeof(get_tvl_request::ms_)
      - PROTOBUF_FIELD_OFFSET(get_tvl_request, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_tvl_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto[7]);
}

// ===================================================================

class get_tvl_response::_Internal {
 public:
};

get_tvl_response::get_tvl_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.koindx_tracker.get_tvl_response)
}
get_tvl_response::get_tvl_response(const get_tvl_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.koindx_tracker.get_tvl_response)
}

inline void get_tvl_response::SharedCtor() {
}

get_tvl_response::~get_tvl_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.koindx_tracker.get_tvl_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_tvl_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_tvl_response::ArenaDtor(void* object) {
  get_tvl_response* _this = reinterpret_cast< get_tvl_response* >(object);
  (void)_this;
}
void get_tvl_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_tvl_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_tvl_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.koindx_tracker.get_tvl_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_tvl_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .koinos.rpc.koindx_tracker.pool_tvl values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_tvl_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.koindx_tracker.get_tvl_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .koinos.rpc.koindx_tracker.pool_tvl values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.koindx_tracker.get_tvl_response)
  return target;
}

size_t get_tvl_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.koindx_tracker.get_tvl_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.rpc.koindx_tracker.pool_tvl values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_tvl_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_tvl_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_tvl_response::GetClassData() const { return &_class_data_; }

void get_tvl_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_tvl_response *>(to)->MergeFrom(
      static_cast<const get_tvl_response &>(from));
}


void get_tvl_response::MergeFrom(const get_tvl_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.koindx_tracker.get_tvl_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_tvl_response::CopyFrom(const get_tvl_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.koindx_tracker.get_tvl_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_tvl_response::IsInitialized() const {
  return true;
}

void get_tvl_response::InternalSwap(get_tvl_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_tvl_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto[8]);
}

// ===================================================================

class koindx_tracker_request::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const koindx_tracker_request* msg);
  static const ::koinos::rpc::koindx_tracker::get_pools_request& get_pools(const koindx_tracker_request* msg);
  static const ::koinos::rpc::koindx_tracker::get_liquidity_request& get_liquidity(const koindx_tracker_request* msg);
  static const ::koinos::rpc::koindx_tracker::get_tvl_request& get_tvl(const koindx_tracker_request* msg);
};

const ::koinos::rpc::reserved_rpc&
koindx_tracker_request::_Internal::reserved(const koindx_tracker_request* msg) {
  return *msg->request_.reserved_;
}
const ::koinos::rpc::koindx_tracker::get_pools_request&
koindx_tracker_request::_Internal::get_pools(const koindx_tracker_request* msg) {
  return *msg->request_.get_pools_;
}
const ::koinos::rpc::koindx_tracker::get_liquidity_request&
koindx_tracker_request::_Internal::get_liquidity(const koindx_tracker_request* msg) {
  return *msg->request_.get_liquidity_;
}
const ::koinos::rpc::koindx_tracker::get_tvl_request&
koindx_tracker_request::_Internal::get_tvl(const koindx_tracker_request* msg) {
  return *msg->request_.get_tvl_;
}
void koindx_tracker_request::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_request.reserved)
}
void koindx_tracker_request::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.reserved_;
    }
    clear_has_request();
  }
}
void koindx_tracker_request::set_allocated_get_pools(::koinos::rpc::koindx_tracker::get_pools_request* get_pools) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_pools) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::koindx_tracker::get_pools_request>::GetOwningArena(get_pools);
    if (message_arena != submessage_arena) {
      get_pools = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_pools, submessage_arena);
    }
    set_has_get_pools();
    request_.get_pools_ = get_pools;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_request.get_pools)
}
void koindx_tracker_request::set_allocated_get_liquidity(::koinos::rpc::koindx_tracker::get_liquidity_request* get_liquidity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_liquidity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::koindx_tracker::get_liquidity_request>::GetOwningArena(get_liquidity);
    if (message_arena != submessage_arena) {
      get_liquidity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_liquidity, submessage_arena);
    }
    set_has_get_liquidity();
    request_.get_liquidity_ = get_liquidity;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_request.get_liquidity)
}
void koindx_tracker_request::set_allocated_get_tvl(::koinos::rpc::koindx_tracker::get_tvl_request* get_tvl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_tvl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::koindx_tracker::get_tvl_request>::GetOwningArena(get_tvl);
    if (message_arena != submessage_arena) {
      get_tvl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_tvl, submessage_arena);
    }
    set_has_get_tvl();
    request_.get_tvl_ = get_tvl;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_request.get_tvl)
}
koindx_tracker_request::koindx_tracker_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.koindx_tracker.koindx_tracker_request)
}
koindx_tracker_request::koindx_tracker_request(const koindx_tracker_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kGetPools: {
      _internal_mutable_get_pools()->::koinos::rpc::koindx_tracker::get_pools_request::MergeFrom(from._internal_get_pools());
      break;
    }
    case kGetLiquidity: {
      _internal_mutable_get_liquidity()->::koinos::rpc::koindx_tracker::get_liquidity_request::MergeFrom(from._internal_get_liquidity());
      break;
    }
    case kGetTvl: {
      _internal_mutable_get_tvl()->::koinos::rpc::koindx_tracker::get_tvl_request::MergeFrom(from._internal_get_tvl());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.koindx_tracker.koindx_tracker_request)
}

inline void koindx_tracker_request::SharedCtor() {
clear_has_request();
}

koindx_tracker_request::~koindx_tracker_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.koindx_tracker.koindx_tracker_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void koindx_tracker_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void koindx_tracker_request::ArenaDtor(void* object) {
  koindx_tracker_request* _this = reinterpret_cast< koindx_tracker_request* >(object);
  (void)_this;
}
void koindx_tracker_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void koindx_tracker_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void koindx_tracker_request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.koindx_tracker.koindx_tracker_request)
  switch (request_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.reserved_;
      }
      break;
    }
    case kGetPools: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_pools_;
      }
      break;
    }
    case kGetLiquidity: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_liquidity_;
      }
      break;
    }
    case kGetTvl: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.get_tvl_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void koindx_tracker_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.koindx_tracker.koindx_tracker_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* koindx_tracker_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.koindx_tracker.get_pools_request get_pools = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_pools(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.koindx_tracker.get_liquidity_request get_liquidity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_liquidity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.koindx_tracker.get_tvl_request get_tvl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_tvl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* koindx_tracker_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.koindx_tracker.koindx_tracker_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.koindx_tracker.get_pools_request get_pools = 2;
  if (_internal_has_get_pools()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::get_pools(this), target, stream);
  }

  // .koinos.rpc.koindx_tracker.get_liquidity_request get_liquidity = 3;
  if (_internal_has_get_liquidity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get_liquidity(this), target, stream);
  }

  // .koinos.rpc.koindx_tracker.get_tvl_request get_tvl = 4;
  if (_internal_has_get_tvl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::get_tvl(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.koindx_tracker.koindx_tracker_request)
  return target;
}

size_t koindx_tracker_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.koindx_tracker.koindx_tracker_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.reserved_);
      break;
    }
    // .koinos.rpc.koindx_tracker.get_pools_request get_pools = 2;
    case kGetPools: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_pools_);
      break;
    }
    // .koinos.rpc.koindx_tracker.get_liquidity_request get_liquidity = 3;
    case kGetLiquidity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_liquidity_);
      break;
    }
    // .koinos.rpc.koindx_tracker.get_tvl_request get_tvl = 4;
    case kGetTvl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_tvl_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData koindx_tracker_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    koindx_tracker_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*koindx_tracker_request::GetClassData() const { return &_class_data_; }

void koindx_tracker_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<koindx_tracker_request *>(to)->MergeFrom(
      static_cast<const koindx_tracker_request &>(from));
}


void koindx_tracker_request::MergeFrom(const koindx_tracker_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.koindx_tracker.koindx_tracker_request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kGetPools: {
      _internal_mutable_get_pools()->::koinos::rpc::koindx_tracker::get_pools_request::MergeFrom(from._internal_get_pools());
      break;
    }
    case kGetLiquidity: {
      _internal_mutable_get_liquidity()->::koinos::rpc::koindx_tracker::get_liquidity_request::MergeFrom(from._internal_get_liquidity());
      break;
    }
    case kGetTvl: {
      _internal_mutable_get_tvl()->::koinos::rpc::koindx_tracker::get_tvl_request::MergeFrom(from._internal_get_tvl());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void koindx_tracker_request::CopyFrom(const koindx_tracker_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.koindx_tracker.koindx_tracker_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool koindx_tracker_request::IsInitialized() const {
  return true;
}

void koindx_tracker_request::InternalSwap(koindx_tracker_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata koindx_tracker_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto[9]);
}

// ===================================================================

class koindx_tracker_response::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const koindx_tracker_response* msg);
  static const ::koinos::rpc::error_status& error(const koindx_tracker_response* msg);
  static const ::koinos::rpc::koindx_tracker::get_pools_response& get_pools(const koindx_tracker_response* msg);
  static const ::koinos::rpc::koindx_tracker::get_liquidity_response& get_liquidity(const koindx_tracker_response* msg);
  static const ::koinos::rpc::koindx_tracker::get_tvl_response& get_tvl(const koindx_tracker_response* msg);
};

const ::koinos::rpc::reserved_rpc&
koindx_tracker_response::_Internal::reserved(const koindx_tracker_response* msg) {
  return *msg->response_.reserved_;
}
const ::koinos::rpc::error_status&
koindx_tracker_response::_Internal::error(const koindx_tracker_response* msg) {
  return *msg->response_.error_;
}
const ::koinos::rpc::koindx_tracker::get_pools_response&
koindx_tracker_response::_Internal::get_pools(const koindx_tracker_response* msg) {
  return *msg->response_.get_pools_;
}
const ::koinos::rpc::koindx_tracker::get_liquidity_response&
koindx_tracker_response::_Internal::get_liquidity(const koindx_tracker_response* msg) {
  return *msg->response_.get_liquidity_;
}
const ::koinos::rpc::koindx_tracker::get_tvl_response&
koindx_tracker_response::_Internal::get_tvl(const koindx_tracker_response* msg) {
  return *msg->response_.get_tvl_;
}
void koindx_tracker_response::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved));
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_response.reserved)
}
void koindx_tracker_response::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.reserved_;
    }
    clear_has_response();
  }
}
void koindx_tracker_response::set_allocated_error(::koinos::rpc::error_status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_response.error)
}
void koindx_tracker_response::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
void koindx_tracker_response::set_allocated_get_pools(::koinos::rpc::koindx_tracker::get_pools_response* get_pools) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_pools) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::koindx_tracker::get_pools_response>::GetOwningArena(get_pools);
    if (message_arena != submessage_arena) {
      get_pools = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_pools, submessage_arena);
    }
    set_has_get_pools();
    response_.get_pools_ = get_pools;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_response.get_pools)
}
void koindx_tracker_response::set_allocated_get_liquidity(::koinos::rpc::koindx_tracker::get_liquidity_response* get_liquidity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_liquidity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::koindx_tracker::get_liquidity_response>::GetOwningArena(get_liquidity);
    if (message_arena != submessage_arena) {
      get_liquidity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_liquidity, submessage_arena);
    }
    set_has_get_liquidity();
    response_.get_liquidity_ = get_liquidity;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_response.get_liquidity)
}
void koindx_tracker_response::set_allocated_get_tvl(::koinos::rpc::koindx_tracker::get_tvl_response* get_tvl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_tvl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::koinos::rpc::koindx_tracker::get_tvl_response>::GetOwningArena(get_tvl);
    if (message_arena != submessage_arena) {
      get_tvl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_tvl, submessage_arena);
    }
    set_has_get_tvl();
    response_.get_tvl_ = get_tvl;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.koindx_tracker.koindx_tracker_response.get_tvl)
}
koindx_tracker_response::koindx_tracker_response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.koindx_tracker.koindx_tracker_response)
}
koindx_tracker_response::koindx_tracker_response(const koindx_tracker_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_status::MergeFrom(from._internal_error());
      break;
    }
    case kGetPools: {
      _internal_mutable_get_pools()->::koinos::rpc::koindx_tracker::get_pools_response::MergeFrom(from._internal_get_pools());
      break;
    }
    case kGetLiquidity: {
      _internal_mutable_get_liquidity()->::koinos::rpc::koindx_tracker::get_liquidity_response::MergeFrom(from._internal_get_liquidity());
      break;
    }
    case kGetTvl: {
      _internal_mutable_get_tvl()->::koinos::rpc::koindx_tracker::get_tvl_response::MergeFrom(from._internal_get_tvl());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.koindx_tracker.koindx_tracker_response)
}

inline void koindx_tracker_response::SharedCtor() {
clear_has_response();
}

koindx_tracker_response::~koindx_tracker_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.koindx_tracker.koindx_tracker_response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void koindx_tracker_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void koindx_tracker_response::ArenaDtor(void* object) {
  koindx_tracker_response* _this = reinterpret_cast< koindx_tracker_response* >(object);
  (void)_this;
}
void koindx_tracker_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void koindx_tracker_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void koindx_tracker_response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.koindx_tracker.koindx_tracker_response)
  switch (response_case()) {
    case kReserved: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.reserved_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case kGetPools: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_pools_;
      }
      break;
    }
    case kGetLiquidity: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_liquidity_;
      }
      break;
    }
    case kGetTvl: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.get_tvl_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void koindx_tracker_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.koindx_tracker.koindx_tracker_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* koindx_tracker_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.error_status error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.koindx_tracker.get_pools_response get_pools = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_pools(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.koindx_tracker.get_liquidity_response get_liquidity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_liquidity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.koindx_tracker.get_tvl_response get_tvl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_tvl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* koindx_tracker_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.koindx_tracker.koindx_tracker_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.error_status error = 2;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // .koinos.rpc.koindx_tracker.get_pools_response get_pools = 3;
  if (_internal_has_get_pools()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get_pools(this), target, stream);
  }

  // .koinos.rpc.koindx_tracker.get_liquidity_response get_liquidity = 4;
  if (_internal_has_get_liquidity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::get_liquidity(this), target, stream);
  }

  // .koinos.rpc.koindx_tracker.get_tvl_response get_tvl = 5;
  if (_internal_has_get_tvl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::get_tvl(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.koindx_tracker.koindx_tracker_response)
  return target;
}

size_t koindx_tracker_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.koindx_tracker.koindx_tracker_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.reserved_);
      break;
    }
    // .koinos.rpc.error_status error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    // .koinos.rpc.koindx_tracker.get_pools_response get_pools = 3;
    case kGetPools: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_pools_);
      break;
    }
    // .koinos.rpc.koindx_tracker.get_liquidity_response get_liquidity = 4;
    case kGetLiquidity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_liquidity_);
      break;
    }
    // .koinos.rpc.koindx_tracker.get_tvl_response get_tvl = 5;
    case kGetTvl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_tvl_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData koindx_tracker_response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    koindx_tracker_response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*koindx_tracker_response::GetClassData() const { return &_class_data_; }

void koindx_tracker_response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<koindx_tracker_response *>(to)->MergeFrom(
      static_cast<const koindx_tracker_response &>(from));
}


void koindx_tracker_response::MergeFrom(const koindx_tracker_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.koindx_tracker.koindx_tracker_response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_status::MergeFrom(from._internal_error());
      break;
    }
    case kGetPools: {
      _internal_mutable_get_pools()->::koinos::rpc::koindx_tracker::get_pools_response::MergeFrom(from._internal_get_pools());
      break;
    }
    case kGetLiquidity: {
      _internal_mutable_get_liquidity()->::koinos::rpc::koindx_tracker::get_liquidity_response::MergeFrom(from._internal_get_liquidity());
      break;
    }
    case kGetTvl: {
      _internal_mutable_get_tvl()->::koinos::rpc::koindx_tracker::get_tvl_response::MergeFrom(from._internal_get_tvl());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void koindx_tracker_response::CopyFrom(const koindx_tracker_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.koindx_tracker.koindx_tracker_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool koindx_tracker_response::IsInitialized() const {
  return true;
}

void koindx_tracker_response::InternalSwap(koindx_tracker_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata koindx_tracker_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_getter, &descriptor_table_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto_once,
      file_level_metadata_koinos_2frpc_2fkoindx_5ftracker_2fkoindx_5ftracker_5frpc_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace koindx_tracker
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::rpc::koindx_tracker::pool_pair* Arena::CreateMaybeMessage< ::koinos::rpc::koindx_tracker::pool_pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::koindx_tracker::pool_pair >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::koindx_tracker::get_pools_request* Arena::CreateMaybeMessage< ::koinos::rpc::koindx_tracker::get_pools_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::koindx_tracker::get_pools_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::koindx_tracker::get_pools_response* Arena::CreateMaybeMessage< ::koinos::rpc::koindx_tracker::get_pools_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::koindx_tracker::get_pools_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::koindx_tracker::account_liquidity* Arena::CreateMaybeMessage< ::koinos::rpc::koindx_tracker::account_liquidity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::koindx_tracker::account_liquidity >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::koindx_tracker::get_liquidity_request* Arena::CreateMaybeMessage< ::koinos::rpc::koindx_tracker::get_liquidity_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::koindx_tracker::get_liquidity_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::koindx_tracker::get_liquidity_response* Arena::CreateMaybeMessage< ::koinos::rpc::koindx_tracker::get_liquidity_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::koindx_tracker::get_liquidity_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::koindx_tracker::pool_tvl* Arena::CreateMaybeMessage< ::koinos::rpc::koindx_tracker::pool_tvl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::koindx_tracker::pool_tvl >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::koindx_tracker::get_tvl_request* Arena::CreateMaybeMessage< ::koinos::rpc::koindx_tracker::get_tvl_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::koindx_tracker::get_tvl_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::koindx_tracker::get_tvl_response* Arena::CreateMaybeMessage< ::koinos::rpc::koindx_tracker::get_tvl_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::koindx_tracker::get_tvl_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::koindx_tracker::koindx_tracker_request* Arena::CreateMaybeMessage< ::koinos::rpc::koindx_tracker::koindx_tracker_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::koindx_tracker::koindx_tracker_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::koindx_tracker::koindx_tracker_response* Arena::CreateMaybeMessage< ::koinos::rpc::koindx_tracker::koindx_tracker_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::koindx_tracker::koindx_tracker_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
