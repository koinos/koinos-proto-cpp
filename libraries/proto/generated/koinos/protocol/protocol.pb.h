// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/protocol/protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fprotocol_2fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fprotocol_2fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fprotocol_2fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fprotocol_2fprotocol_2eproto;
namespace koinos {
namespace protocol {
class active_block_data;
class active_block_dataDefaultTypeInternal;
extern active_block_dataDefaultTypeInternal _active_block_data_default_instance_;
class active_transaction_data;
class active_transaction_dataDefaultTypeInternal;
extern active_transaction_dataDefaultTypeInternal _active_transaction_data_default_instance_;
class block;
class blockDefaultTypeInternal;
extern blockDefaultTypeInternal _block_default_instance_;
class block_active_data;
class block_active_dataDefaultTypeInternal;
extern block_active_dataDefaultTypeInternal _block_active_data_default_instance_;
class block_header;
class block_headerDefaultTypeInternal;
extern block_headerDefaultTypeInternal _block_header_default_instance_;
class block_passive_data;
class block_passive_dataDefaultTypeInternal;
extern block_passive_dataDefaultTypeInternal _block_passive_data_default_instance_;
class block_receipt;
class block_receiptDefaultTypeInternal;
extern block_receiptDefaultTypeInternal _block_receipt_default_instance_;
class call_contract_operation;
class call_contract_operationDefaultTypeInternal;
extern call_contract_operationDefaultTypeInternal _call_contract_operation_default_instance_;
class contract_call_bundle;
class contract_call_bundleDefaultTypeInternal;
extern contract_call_bundleDefaultTypeInternal _contract_call_bundle_default_instance_;
class operation;
class operationDefaultTypeInternal;
extern operationDefaultTypeInternal _operation_default_instance_;
class passive_block_data;
class passive_block_dataDefaultTypeInternal;
extern passive_block_dataDefaultTypeInternal _passive_block_data_default_instance_;
class passive_transaction_data;
class passive_transaction_dataDefaultTypeInternal;
extern passive_transaction_dataDefaultTypeInternal _passive_transaction_data_default_instance_;
class set_system_call_operation;
class set_system_call_operationDefaultTypeInternal;
extern set_system_call_operationDefaultTypeInternal _set_system_call_operation_default_instance_;
class system_call_target;
class system_call_targetDefaultTypeInternal;
extern system_call_targetDefaultTypeInternal _system_call_target_default_instance_;
class transaction;
class transactionDefaultTypeInternal;
extern transactionDefaultTypeInternal _transaction_default_instance_;
class transaction_active_data;
class transaction_active_dataDefaultTypeInternal;
extern transaction_active_dataDefaultTypeInternal _transaction_active_data_default_instance_;
class transaction_passive_data;
class transaction_passive_dataDefaultTypeInternal;
extern transaction_passive_dataDefaultTypeInternal _transaction_passive_data_default_instance_;
class upload_contract_operation;
class upload_contract_operationDefaultTypeInternal;
extern upload_contract_operationDefaultTypeInternal _upload_contract_operation_default_instance_;
}  // namespace protocol
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::protocol::active_block_data* Arena::CreateMaybeMessage<::koinos::protocol::active_block_data>(Arena*);
template<> ::koinos::protocol::active_transaction_data* Arena::CreateMaybeMessage<::koinos::protocol::active_transaction_data>(Arena*);
template<> ::koinos::protocol::block* Arena::CreateMaybeMessage<::koinos::protocol::block>(Arena*);
template<> ::koinos::protocol::block_active_data* Arena::CreateMaybeMessage<::koinos::protocol::block_active_data>(Arena*);
template<> ::koinos::protocol::block_header* Arena::CreateMaybeMessage<::koinos::protocol::block_header>(Arena*);
template<> ::koinos::protocol::block_passive_data* Arena::CreateMaybeMessage<::koinos::protocol::block_passive_data>(Arena*);
template<> ::koinos::protocol::block_receipt* Arena::CreateMaybeMessage<::koinos::protocol::block_receipt>(Arena*);
template<> ::koinos::protocol::call_contract_operation* Arena::CreateMaybeMessage<::koinos::protocol::call_contract_operation>(Arena*);
template<> ::koinos::protocol::contract_call_bundle* Arena::CreateMaybeMessage<::koinos::protocol::contract_call_bundle>(Arena*);
template<> ::koinos::protocol::operation* Arena::CreateMaybeMessage<::koinos::protocol::operation>(Arena*);
template<> ::koinos::protocol::passive_block_data* Arena::CreateMaybeMessage<::koinos::protocol::passive_block_data>(Arena*);
template<> ::koinos::protocol::passive_transaction_data* Arena::CreateMaybeMessage<::koinos::protocol::passive_transaction_data>(Arena*);
template<> ::koinos::protocol::set_system_call_operation* Arena::CreateMaybeMessage<::koinos::protocol::set_system_call_operation>(Arena*);
template<> ::koinos::protocol::system_call_target* Arena::CreateMaybeMessage<::koinos::protocol::system_call_target>(Arena*);
template<> ::koinos::protocol::transaction* Arena::CreateMaybeMessage<::koinos::protocol::transaction>(Arena*);
template<> ::koinos::protocol::transaction_active_data* Arena::CreateMaybeMessage<::koinos::protocol::transaction_active_data>(Arena*);
template<> ::koinos::protocol::transaction_passive_data* Arena::CreateMaybeMessage<::koinos::protocol::transaction_passive_data>(Arena*);
template<> ::koinos::protocol::upload_contract_operation* Arena::CreateMaybeMessage<::koinos::protocol::upload_contract_operation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace protocol {

// ===================================================================

class contract_call_bundle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.contract_call_bundle) */ {
 public:
  inline contract_call_bundle() : contract_call_bundle(nullptr) {}
  virtual ~contract_call_bundle();

  contract_call_bundle(const contract_call_bundle& from);
  contract_call_bundle(contract_call_bundle&& from) noexcept
    : contract_call_bundle() {
    *this = ::std::move(from);
  }

  inline contract_call_bundle& operator=(const contract_call_bundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline contract_call_bundle& operator=(contract_call_bundle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const contract_call_bundle& default_instance();

  static inline const contract_call_bundle* internal_default_instance() {
    return reinterpret_cast<const contract_call_bundle*>(
               &_contract_call_bundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(contract_call_bundle& a, contract_call_bundle& b) {
    a.Swap(&b);
  }
  inline void Swap(contract_call_bundle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(contract_call_bundle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline contract_call_bundle* New() const final {
    return CreateMaybeMessage<contract_call_bundle>(nullptr);
  }

  contract_call_bundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<contract_call_bundle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const contract_call_bundle& from);
  void MergeFrom(const contract_call_bundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(contract_call_bundle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.contract_call_bundle";
  }
  protected:
  explicit contract_call_bundle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kEntryPointFieldNumber = 2,
  };
  // bytes contract_id = 1;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const void* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // uint32 entry_point = 2;
  void clear_entry_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point() const;
  void set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entry_point() const;
  void _internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.contract_call_bundle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class system_call_target PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.system_call_target) */ {
 public:
  inline system_call_target() : system_call_target(nullptr) {}
  virtual ~system_call_target();

  system_call_target(const system_call_target& from);
  system_call_target(system_call_target&& from) noexcept
    : system_call_target() {
    *this = ::std::move(from);
  }

  inline system_call_target& operator=(const system_call_target& from) {
    CopyFrom(from);
    return *this;
  }
  inline system_call_target& operator=(system_call_target&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const system_call_target& default_instance();

  enum TargetCase {
    kThunkId = 1,
    kSystemCallBundle = 2,
    TARGET_NOT_SET = 0,
  };

  static inline const system_call_target* internal_default_instance() {
    return reinterpret_cast<const system_call_target*>(
               &_system_call_target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(system_call_target& a, system_call_target& b) {
    a.Swap(&b);
  }
  inline void Swap(system_call_target* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(system_call_target* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline system_call_target* New() const final {
    return CreateMaybeMessage<system_call_target>(nullptr);
  }

  system_call_target* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<system_call_target>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const system_call_target& from);
  void MergeFrom(const system_call_target& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(system_call_target* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.system_call_target";
  }
  protected:
  explicit system_call_target(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThunkIdFieldNumber = 1,
    kSystemCallBundleFieldNumber = 2,
  };
  // uint32 thunk_id = 1;
  private:
  bool _internal_has_thunk_id() const;
  public:
  void clear_thunk_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 thunk_id() const;
  void set_thunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thunk_id() const;
  void _internal_set_thunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .koinos.protocol.contract_call_bundle system_call_bundle = 2;
  bool has_system_call_bundle() const;
  private:
  bool _internal_has_system_call_bundle() const;
  public:
  void clear_system_call_bundle();
  const ::koinos::protocol::contract_call_bundle& system_call_bundle() const;
  ::koinos::protocol::contract_call_bundle* release_system_call_bundle();
  ::koinos::protocol::contract_call_bundle* mutable_system_call_bundle();
  void set_allocated_system_call_bundle(::koinos::protocol::contract_call_bundle* system_call_bundle);
  private:
  const ::koinos::protocol::contract_call_bundle& _internal_system_call_bundle() const;
  ::koinos::protocol::contract_call_bundle* _internal_mutable_system_call_bundle();
  public:
  void unsafe_arena_set_allocated_system_call_bundle(
      ::koinos::protocol::contract_call_bundle* system_call_bundle);
  ::koinos::protocol::contract_call_bundle* unsafe_arena_release_system_call_bundle();

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:koinos.protocol.system_call_target)
 private:
  class _Internal;
  void set_has_thunk_id();
  void set_has_system_call_bundle();

  inline bool has_target() const;
  inline void clear_has_target();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TargetUnion {
    TargetUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 thunk_id_;
    ::koinos::protocol::contract_call_bundle* system_call_bundle_;
  } target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class upload_contract_operation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.upload_contract_operation) */ {
 public:
  inline upload_contract_operation() : upload_contract_operation(nullptr) {}
  virtual ~upload_contract_operation();

  upload_contract_operation(const upload_contract_operation& from);
  upload_contract_operation(upload_contract_operation&& from) noexcept
    : upload_contract_operation() {
    *this = ::std::move(from);
  }

  inline upload_contract_operation& operator=(const upload_contract_operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline upload_contract_operation& operator=(upload_contract_operation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const upload_contract_operation& default_instance();

  static inline const upload_contract_operation* internal_default_instance() {
    return reinterpret_cast<const upload_contract_operation*>(
               &_upload_contract_operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(upload_contract_operation& a, upload_contract_operation& b) {
    a.Swap(&b);
  }
  inline void Swap(upload_contract_operation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(upload_contract_operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline upload_contract_operation* New() const final {
    return CreateMaybeMessage<upload_contract_operation>(nullptr);
  }

  upload_contract_operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<upload_contract_operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const upload_contract_operation& from);
  void MergeFrom(const upload_contract_operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(upload_contract_operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.upload_contract_operation";
  }
  protected:
  explicit upload_contract_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kBytecodeFieldNumber = 2,
  };
  // bytes contract_id = 1;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const void* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // bytes bytecode = 2;
  void clear_bytecode();
  const std::string& bytecode() const;
  void set_bytecode(const std::string& value);
  void set_bytecode(std::string&& value);
  void set_bytecode(const char* value);
  void set_bytecode(const void* value, size_t size);
  std::string* mutable_bytecode();
  std::string* release_bytecode();
  void set_allocated_bytecode(std::string* bytecode);
  private:
  const std::string& _internal_bytecode() const;
  void _internal_set_bytecode(const std::string& value);
  std::string* _internal_mutable_bytecode();
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.upload_contract_operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytecode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class call_contract_operation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.call_contract_operation) */ {
 public:
  inline call_contract_operation() : call_contract_operation(nullptr) {}
  virtual ~call_contract_operation();

  call_contract_operation(const call_contract_operation& from);
  call_contract_operation(call_contract_operation&& from) noexcept
    : call_contract_operation() {
    *this = ::std::move(from);
  }

  inline call_contract_operation& operator=(const call_contract_operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline call_contract_operation& operator=(call_contract_operation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const call_contract_operation& default_instance();

  static inline const call_contract_operation* internal_default_instance() {
    return reinterpret_cast<const call_contract_operation*>(
               &_call_contract_operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(call_contract_operation& a, call_contract_operation& b) {
    a.Swap(&b);
  }
  inline void Swap(call_contract_operation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(call_contract_operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline call_contract_operation* New() const final {
    return CreateMaybeMessage<call_contract_operation>(nullptr);
  }

  call_contract_operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<call_contract_operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const call_contract_operation& from);
  void MergeFrom(const call_contract_operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(call_contract_operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.call_contract_operation";
  }
  protected:
  explicit call_contract_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kArgsFieldNumber = 3,
    kEntryPointFieldNumber = 2,
  };
  // bytes contract_id = 1;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const void* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // bytes args = 3;
  void clear_args();
  const std::string& args() const;
  void set_args(const std::string& value);
  void set_args(std::string&& value);
  void set_args(const char* value);
  void set_args(const void* value, size_t size);
  std::string* mutable_args();
  std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // uint32 entry_point = 2;
  void clear_entry_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point() const;
  void set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entry_point() const;
  void _internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.call_contract_operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class set_system_call_operation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.set_system_call_operation) */ {
 public:
  inline set_system_call_operation() : set_system_call_operation(nullptr) {}
  virtual ~set_system_call_operation();

  set_system_call_operation(const set_system_call_operation& from);
  set_system_call_operation(set_system_call_operation&& from) noexcept
    : set_system_call_operation() {
    *this = ::std::move(from);
  }

  inline set_system_call_operation& operator=(const set_system_call_operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_system_call_operation& operator=(set_system_call_operation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const set_system_call_operation& default_instance();

  static inline const set_system_call_operation* internal_default_instance() {
    return reinterpret_cast<const set_system_call_operation*>(
               &_set_system_call_operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(set_system_call_operation& a, set_system_call_operation& b) {
    a.Swap(&b);
  }
  inline void Swap(set_system_call_operation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_system_call_operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_system_call_operation* New() const final {
    return CreateMaybeMessage<set_system_call_operation>(nullptr);
  }

  set_system_call_operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_system_call_operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const set_system_call_operation& from);
  void MergeFrom(const set_system_call_operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_system_call_operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.set_system_call_operation";
  }
  protected:
  explicit set_system_call_operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 2,
    kCallIdFieldNumber = 1,
  };
  // .koinos.protocol.system_call_target target = 2;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::koinos::protocol::system_call_target& target() const;
  ::koinos::protocol::system_call_target* release_target();
  ::koinos::protocol::system_call_target* mutable_target();
  void set_allocated_target(::koinos::protocol::system_call_target* target);
  private:
  const ::koinos::protocol::system_call_target& _internal_target() const;
  ::koinos::protocol::system_call_target* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::koinos::protocol::system_call_target* target);
  ::koinos::protocol::system_call_target* unsafe_arena_release_target();

  // uint32 call_id = 1;
  void clear_call_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 call_id() const;
  void set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_call_id() const;
  void _internal_set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.set_system_call_operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::system_call_target* target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 call_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class operation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.operation) */ {
 public:
  inline operation() : operation(nullptr) {}
  virtual ~operation();

  operation(const operation& from);
  operation(operation&& from) noexcept
    : operation() {
    *this = ::std::move(from);
  }

  inline operation& operator=(const operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline operation& operator=(operation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const operation& default_instance();

  enum OpCase {
    kUploadContract = 1,
    kCallContract = 2,
    kSetSystemCall = 3,
    OP_NOT_SET = 0,
  };

  static inline const operation* internal_default_instance() {
    return reinterpret_cast<const operation*>(
               &_operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(operation& a, operation& b) {
    a.Swap(&b);
  }
  inline void Swap(operation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline operation* New() const final {
    return CreateMaybeMessage<operation>(nullptr);
  }

  operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const operation& from);
  void MergeFrom(const operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.operation";
  }
  protected:
  explicit operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadContractFieldNumber = 1,
    kCallContractFieldNumber = 2,
    kSetSystemCallFieldNumber = 3,
  };
  // .koinos.protocol.upload_contract_operation upload_contract = 1;
  bool has_upload_contract() const;
  private:
  bool _internal_has_upload_contract() const;
  public:
  void clear_upload_contract();
  const ::koinos::protocol::upload_contract_operation& upload_contract() const;
  ::koinos::protocol::upload_contract_operation* release_upload_contract();
  ::koinos::protocol::upload_contract_operation* mutable_upload_contract();
  void set_allocated_upload_contract(::koinos::protocol::upload_contract_operation* upload_contract);
  private:
  const ::koinos::protocol::upload_contract_operation& _internal_upload_contract() const;
  ::koinos::protocol::upload_contract_operation* _internal_mutable_upload_contract();
  public:
  void unsafe_arena_set_allocated_upload_contract(
      ::koinos::protocol::upload_contract_operation* upload_contract);
  ::koinos::protocol::upload_contract_operation* unsafe_arena_release_upload_contract();

  // .koinos.protocol.call_contract_operation call_contract = 2;
  bool has_call_contract() const;
  private:
  bool _internal_has_call_contract() const;
  public:
  void clear_call_contract();
  const ::koinos::protocol::call_contract_operation& call_contract() const;
  ::koinos::protocol::call_contract_operation* release_call_contract();
  ::koinos::protocol::call_contract_operation* mutable_call_contract();
  void set_allocated_call_contract(::koinos::protocol::call_contract_operation* call_contract);
  private:
  const ::koinos::protocol::call_contract_operation& _internal_call_contract() const;
  ::koinos::protocol::call_contract_operation* _internal_mutable_call_contract();
  public:
  void unsafe_arena_set_allocated_call_contract(
      ::koinos::protocol::call_contract_operation* call_contract);
  ::koinos::protocol::call_contract_operation* unsafe_arena_release_call_contract();

  // .koinos.protocol.set_system_call_operation set_system_call = 3;
  bool has_set_system_call() const;
  private:
  bool _internal_has_set_system_call() const;
  public:
  void clear_set_system_call();
  const ::koinos::protocol::set_system_call_operation& set_system_call() const;
  ::koinos::protocol::set_system_call_operation* release_set_system_call();
  ::koinos::protocol::set_system_call_operation* mutable_set_system_call();
  void set_allocated_set_system_call(::koinos::protocol::set_system_call_operation* set_system_call);
  private:
  const ::koinos::protocol::set_system_call_operation& _internal_set_system_call() const;
  ::koinos::protocol::set_system_call_operation* _internal_mutable_set_system_call();
  public:
  void unsafe_arena_set_allocated_set_system_call(
      ::koinos::protocol::set_system_call_operation* set_system_call);
  ::koinos::protocol::set_system_call_operation* unsafe_arena_release_set_system_call();

  void clear_op();
  OpCase op_case() const;
  // @@protoc_insertion_point(class_scope:koinos.protocol.operation)
 private:
  class _Internal;
  void set_has_upload_contract();
  void set_has_call_contract();
  void set_has_set_system_call();

  inline bool has_op() const;
  inline void clear_has_op();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OpUnion {
    OpUnion() {}
    ::koinos::protocol::upload_contract_operation* upload_contract_;
    ::koinos::protocol::call_contract_operation* call_contract_;
    ::koinos::protocol::set_system_call_operation* set_system_call_;
  } op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class active_transaction_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.active_transaction_data) */ {
 public:
  inline active_transaction_data() : active_transaction_data(nullptr) {}
  virtual ~active_transaction_data();

  active_transaction_data(const active_transaction_data& from);
  active_transaction_data(active_transaction_data&& from) noexcept
    : active_transaction_data() {
    *this = ::std::move(from);
  }

  inline active_transaction_data& operator=(const active_transaction_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline active_transaction_data& operator=(active_transaction_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const active_transaction_data& default_instance();

  static inline const active_transaction_data* internal_default_instance() {
    return reinterpret_cast<const active_transaction_data*>(
               &_active_transaction_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(active_transaction_data& a, active_transaction_data& b) {
    a.Swap(&b);
  }
  inline void Swap(active_transaction_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(active_transaction_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline active_transaction_data* New() const final {
    return CreateMaybeMessage<active_transaction_data>(nullptr);
  }

  active_transaction_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<active_transaction_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const active_transaction_data& from);
  void MergeFrom(const active_transaction_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(active_transaction_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.active_transaction_data";
  }
  protected:
  explicit active_transaction_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 3,
    kResourceLimitFieldNumber = 1,
    kNonceFieldNumber = 2,
  };
  // repeated .koinos.protocol.operation operations = 3;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::koinos::protocol::operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::operation >*
      mutable_operations();
  private:
  const ::koinos::protocol::operation& _internal_operations(int index) const;
  ::koinos::protocol::operation* _internal_add_operations();
  public:
  const ::koinos::protocol::operation& operations(int index) const;
  ::koinos::protocol::operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::operation >&
      operations() const;

  // uint64 resource_limit = 1;
  void clear_resource_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 resource_limit() const;
  void set_resource_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_resource_limit() const;
  void _internal_set_resource_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 nonce = 2;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.active_transaction_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::operation > operations_;
  ::PROTOBUF_NAMESPACE_ID::uint64 resource_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class passive_transaction_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.passive_transaction_data) */ {
 public:
  inline passive_transaction_data() : passive_transaction_data(nullptr) {}
  virtual ~passive_transaction_data();

  passive_transaction_data(const passive_transaction_data& from);
  passive_transaction_data(passive_transaction_data&& from) noexcept
    : passive_transaction_data() {
    *this = ::std::move(from);
  }

  inline passive_transaction_data& operator=(const passive_transaction_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline passive_transaction_data& operator=(passive_transaction_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const passive_transaction_data& default_instance();

  static inline const passive_transaction_data* internal_default_instance() {
    return reinterpret_cast<const passive_transaction_data*>(
               &_passive_transaction_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(passive_transaction_data& a, passive_transaction_data& b) {
    a.Swap(&b);
  }
  inline void Swap(passive_transaction_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(passive_transaction_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline passive_transaction_data* New() const final {
    return CreateMaybeMessage<passive_transaction_data>(nullptr);
  }

  passive_transaction_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<passive_transaction_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const passive_transaction_data& from);
  void MergeFrom(const passive_transaction_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(passive_transaction_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.passive_transaction_data";
  }
  protected:
  explicit passive_transaction_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.protocol.passive_transaction_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class transaction_active_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.transaction_active_data) */ {
 public:
  inline transaction_active_data() : transaction_active_data(nullptr) {}
  virtual ~transaction_active_data();

  transaction_active_data(const transaction_active_data& from);
  transaction_active_data(transaction_active_data&& from) noexcept
    : transaction_active_data() {
    *this = ::std::move(from);
  }

  inline transaction_active_data& operator=(const transaction_active_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_active_data& operator=(transaction_active_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const transaction_active_data& default_instance();

  enum DataCase {
    kNative = 1,
    kBlob = 2,
    DATA_NOT_SET = 0,
  };

  static inline const transaction_active_data* internal_default_instance() {
    return reinterpret_cast<const transaction_active_data*>(
               &_transaction_active_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(transaction_active_data& a, transaction_active_data& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_active_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_active_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transaction_active_data* New() const final {
    return CreateMaybeMessage<transaction_active_data>(nullptr);
  }

  transaction_active_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transaction_active_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const transaction_active_data& from);
  void MergeFrom(const transaction_active_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_active_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.transaction_active_data";
  }
  protected:
  explicit transaction_active_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNativeFieldNumber = 1,
    kBlobFieldNumber = 2,
  };
  // .koinos.protocol.active_transaction_data native = 1;
  bool has_native() const;
  private:
  bool _internal_has_native() const;
  public:
  void clear_native();
  const ::koinos::protocol::active_transaction_data& native() const;
  ::koinos::protocol::active_transaction_data* release_native();
  ::koinos::protocol::active_transaction_data* mutable_native();
  void set_allocated_native(::koinos::protocol::active_transaction_data* native);
  private:
  const ::koinos::protocol::active_transaction_data& _internal_native() const;
  ::koinos::protocol::active_transaction_data* _internal_mutable_native();
  public:
  void unsafe_arena_set_allocated_native(
      ::koinos::protocol::active_transaction_data* native);
  ::koinos::protocol::active_transaction_data* unsafe_arena_release_native();

  // bytes blob = 2;
  private:
  bool _internal_has_blob() const;
  public:
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:koinos.protocol.transaction_active_data)
 private:
  class _Internal;
  void set_has_native();
  void set_has_blob();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    DataUnion() {}
    ::koinos::protocol::active_transaction_data* native_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class transaction_passive_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.transaction_passive_data) */ {
 public:
  inline transaction_passive_data() : transaction_passive_data(nullptr) {}
  virtual ~transaction_passive_data();

  transaction_passive_data(const transaction_passive_data& from);
  transaction_passive_data(transaction_passive_data&& from) noexcept
    : transaction_passive_data() {
    *this = ::std::move(from);
  }

  inline transaction_passive_data& operator=(const transaction_passive_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction_passive_data& operator=(transaction_passive_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const transaction_passive_data& default_instance();

  enum DataCase {
    kNative = 1,
    kBlob = 2,
    DATA_NOT_SET = 0,
  };

  static inline const transaction_passive_data* internal_default_instance() {
    return reinterpret_cast<const transaction_passive_data*>(
               &_transaction_passive_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(transaction_passive_data& a, transaction_passive_data& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction_passive_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction_passive_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transaction_passive_data* New() const final {
    return CreateMaybeMessage<transaction_passive_data>(nullptr);
  }

  transaction_passive_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transaction_passive_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const transaction_passive_data& from);
  void MergeFrom(const transaction_passive_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction_passive_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.transaction_passive_data";
  }
  protected:
  explicit transaction_passive_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNativeFieldNumber = 1,
    kBlobFieldNumber = 2,
  };
  // .koinos.protocol.passive_transaction_data native = 1;
  bool has_native() const;
  private:
  bool _internal_has_native() const;
  public:
  void clear_native();
  const ::koinos::protocol::passive_transaction_data& native() const;
  ::koinos::protocol::passive_transaction_data* release_native();
  ::koinos::protocol::passive_transaction_data* mutable_native();
  void set_allocated_native(::koinos::protocol::passive_transaction_data* native);
  private:
  const ::koinos::protocol::passive_transaction_data& _internal_native() const;
  ::koinos::protocol::passive_transaction_data* _internal_mutable_native();
  public:
  void unsafe_arena_set_allocated_native(
      ::koinos::protocol::passive_transaction_data* native);
  ::koinos::protocol::passive_transaction_data* unsafe_arena_release_native();

  // bytes blob = 2;
  private:
  bool _internal_has_blob() const;
  public:
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:koinos.protocol.transaction_passive_data)
 private:
  class _Internal;
  void set_has_native();
  void set_has_blob();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    DataUnion() {}
    ::koinos::protocol::passive_transaction_data* native_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.transaction) */ {
 public:
  inline transaction() : transaction(nullptr) {}
  virtual ~transaction();

  transaction(const transaction& from);
  transaction(transaction&& from) noexcept
    : transaction() {
    *this = ::std::move(from);
  }

  inline transaction& operator=(const transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline transaction& operator=(transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const transaction& default_instance();

  static inline const transaction* internal_default_instance() {
    return reinterpret_cast<const transaction*>(
               &_transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(transaction& a, transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transaction* New() const final {
    return CreateMaybeMessage<transaction>(nullptr);
  }

  transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const transaction& from);
  void MergeFrom(const transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.transaction";
  }
  protected:
  explicit transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSignatureDataFieldNumber = 4,
    kActiveFieldNumber = 2,
    kPassiveFieldNumber = 3,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes signature_data = 4;
  void clear_signature_data();
  const std::string& signature_data() const;
  void set_signature_data(const std::string& value);
  void set_signature_data(std::string&& value);
  void set_signature_data(const char* value);
  void set_signature_data(const void* value, size_t size);
  std::string* mutable_signature_data();
  std::string* release_signature_data();
  void set_allocated_signature_data(std::string* signature_data);
  private:
  const std::string& _internal_signature_data() const;
  void _internal_set_signature_data(const std::string& value);
  std::string* _internal_mutable_signature_data();
  public:

  // .koinos.protocol.transaction_active_data active = 2;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  const ::koinos::protocol::transaction_active_data& active() const;
  ::koinos::protocol::transaction_active_data* release_active();
  ::koinos::protocol::transaction_active_data* mutable_active();
  void set_allocated_active(::koinos::protocol::transaction_active_data* active);
  private:
  const ::koinos::protocol::transaction_active_data& _internal_active() const;
  ::koinos::protocol::transaction_active_data* _internal_mutable_active();
  public:
  void unsafe_arena_set_allocated_active(
      ::koinos::protocol::transaction_active_data* active);
  ::koinos::protocol::transaction_active_data* unsafe_arena_release_active();

  // .koinos.protocol.transaction_passive_data passive = 3;
  bool has_passive() const;
  private:
  bool _internal_has_passive() const;
  public:
  void clear_passive();
  const ::koinos::protocol::transaction_passive_data& passive() const;
  ::koinos::protocol::transaction_passive_data* release_passive();
  ::koinos::protocol::transaction_passive_data* mutable_passive();
  void set_allocated_passive(::koinos::protocol::transaction_passive_data* passive);
  private:
  const ::koinos::protocol::transaction_passive_data& _internal_passive() const;
  ::koinos::protocol::transaction_passive_data* _internal_mutable_passive();
  public:
  void unsafe_arena_set_allocated_passive(
      ::koinos::protocol::transaction_passive_data* passive);
  ::koinos::protocol::transaction_passive_data* unsafe_arena_release_passive();

  // @@protoc_insertion_point(class_scope:koinos.protocol.transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_data_;
  ::koinos::protocol::transaction_active_data* active_;
  ::koinos::protocol::transaction_passive_data* passive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class active_block_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.active_block_data) */ {
 public:
  inline active_block_data() : active_block_data(nullptr) {}
  virtual ~active_block_data();

  active_block_data(const active_block_data& from);
  active_block_data(active_block_data&& from) noexcept
    : active_block_data() {
    *this = ::std::move(from);
  }

  inline active_block_data& operator=(const active_block_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline active_block_data& operator=(active_block_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const active_block_data& default_instance();

  static inline const active_block_data* internal_default_instance() {
    return reinterpret_cast<const active_block_data*>(
               &_active_block_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(active_block_data& a, active_block_data& b) {
    a.Swap(&b);
  }
  inline void Swap(active_block_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(active_block_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline active_block_data* New() const final {
    return CreateMaybeMessage<active_block_data>(nullptr);
  }

  active_block_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<active_block_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const active_block_data& from);
  void MergeFrom(const active_block_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(active_block_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.active_block_data";
  }
  protected:
  explicit active_block_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionMerkleRootFieldNumber = 1,
    kPassiveDataMerkleRootFieldNumber = 2,
    kSignerFieldNumber = 3,
  };
  // bytes transaction_merkle_root = 1;
  void clear_transaction_merkle_root();
  const std::string& transaction_merkle_root() const;
  void set_transaction_merkle_root(const std::string& value);
  void set_transaction_merkle_root(std::string&& value);
  void set_transaction_merkle_root(const char* value);
  void set_transaction_merkle_root(const void* value, size_t size);
  std::string* mutable_transaction_merkle_root();
  std::string* release_transaction_merkle_root();
  void set_allocated_transaction_merkle_root(std::string* transaction_merkle_root);
  private:
  const std::string& _internal_transaction_merkle_root() const;
  void _internal_set_transaction_merkle_root(const std::string& value);
  std::string* _internal_mutable_transaction_merkle_root();
  public:

  // bytes passive_data_merkle_root = 2;
  void clear_passive_data_merkle_root();
  const std::string& passive_data_merkle_root() const;
  void set_passive_data_merkle_root(const std::string& value);
  void set_passive_data_merkle_root(std::string&& value);
  void set_passive_data_merkle_root(const char* value);
  void set_passive_data_merkle_root(const void* value, size_t size);
  std::string* mutable_passive_data_merkle_root();
  std::string* release_passive_data_merkle_root();
  void set_allocated_passive_data_merkle_root(std::string* passive_data_merkle_root);
  private:
  const std::string& _internal_passive_data_merkle_root() const;
  void _internal_set_passive_data_merkle_root(const std::string& value);
  std::string* _internal_mutable_passive_data_merkle_root();
  public:

  // bytes signer = 3;
  void clear_signer();
  const std::string& signer() const;
  void set_signer(const std::string& value);
  void set_signer(std::string&& value);
  void set_signer(const char* value);
  void set_signer(const void* value, size_t size);
  std::string* mutable_signer();
  std::string* release_signer();
  void set_allocated_signer(std::string* signer);
  private:
  const std::string& _internal_signer() const;
  void _internal_set_signer(const std::string& value);
  std::string* _internal_mutable_signer();
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.active_block_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_merkle_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passive_data_merkle_root_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class passive_block_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.passive_block_data) */ {
 public:
  inline passive_block_data() : passive_block_data(nullptr) {}
  virtual ~passive_block_data();

  passive_block_data(const passive_block_data& from);
  passive_block_data(passive_block_data&& from) noexcept
    : passive_block_data() {
    *this = ::std::move(from);
  }

  inline passive_block_data& operator=(const passive_block_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline passive_block_data& operator=(passive_block_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const passive_block_data& default_instance();

  static inline const passive_block_data* internal_default_instance() {
    return reinterpret_cast<const passive_block_data*>(
               &_passive_block_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(passive_block_data& a, passive_block_data& b) {
    a.Swap(&b);
  }
  inline void Swap(passive_block_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(passive_block_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline passive_block_data* New() const final {
    return CreateMaybeMessage<passive_block_data>(nullptr);
  }

  passive_block_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<passive_block_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const passive_block_data& from);
  void MergeFrom(const passive_block_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(passive_block_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.passive_block_data";
  }
  protected:
  explicit passive_block_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.protocol.passive_block_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class block_header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.block_header) */ {
 public:
  inline block_header() : block_header(nullptr) {}
  virtual ~block_header();

  block_header(const block_header& from);
  block_header(block_header&& from) noexcept
    : block_header() {
    *this = ::std::move(from);
  }

  inline block_header& operator=(const block_header& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_header& operator=(block_header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const block_header& default_instance();

  static inline const block_header* internal_default_instance() {
    return reinterpret_cast<const block_header*>(
               &_block_header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(block_header& a, block_header& b) {
    a.Swap(&b);
  }
  inline void Swap(block_header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_header* New() const final {
    return CreateMaybeMessage<block_header>(nullptr);
  }

  block_header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const block_header& from);
  void MergeFrom(const block_header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.block_header";
  }
  protected:
  explicit block_header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousFieldNumber = 1,
    kHeightFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // bytes previous = 1;
  void clear_previous();
  const std::string& previous() const;
  void set_previous(const std::string& value);
  void set_previous(std::string&& value);
  void set_previous(const char* value);
  void set_previous(const void* value, size_t size);
  std::string* mutable_previous();
  std::string* release_previous();
  void set_allocated_previous(std::string* previous);
  private:
  const std::string& _internal_previous() const;
  void _internal_set_previous(const std::string& value);
  std::string* _internal_mutable_previous();
  public:

  // uint64 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.block_header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class block_active_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.block_active_data) */ {
 public:
  inline block_active_data() : block_active_data(nullptr) {}
  virtual ~block_active_data();

  block_active_data(const block_active_data& from);
  block_active_data(block_active_data&& from) noexcept
    : block_active_data() {
    *this = ::std::move(from);
  }

  inline block_active_data& operator=(const block_active_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_active_data& operator=(block_active_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const block_active_data& default_instance();

  enum DataCase {
    kNative = 1,
    kBlob = 2,
    DATA_NOT_SET = 0,
  };

  static inline const block_active_data* internal_default_instance() {
    return reinterpret_cast<const block_active_data*>(
               &_block_active_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(block_active_data& a, block_active_data& b) {
    a.Swap(&b);
  }
  inline void Swap(block_active_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_active_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_active_data* New() const final {
    return CreateMaybeMessage<block_active_data>(nullptr);
  }

  block_active_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_active_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const block_active_data& from);
  void MergeFrom(const block_active_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_active_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.block_active_data";
  }
  protected:
  explicit block_active_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNativeFieldNumber = 1,
    kBlobFieldNumber = 2,
  };
  // .koinos.protocol.active_block_data native = 1;
  bool has_native() const;
  private:
  bool _internal_has_native() const;
  public:
  void clear_native();
  const ::koinos::protocol::active_block_data& native() const;
  ::koinos::protocol::active_block_data* release_native();
  ::koinos::protocol::active_block_data* mutable_native();
  void set_allocated_native(::koinos::protocol::active_block_data* native);
  private:
  const ::koinos::protocol::active_block_data& _internal_native() const;
  ::koinos::protocol::active_block_data* _internal_mutable_native();
  public:
  void unsafe_arena_set_allocated_native(
      ::koinos::protocol::active_block_data* native);
  ::koinos::protocol::active_block_data* unsafe_arena_release_native();

  // bytes blob = 2;
  private:
  bool _internal_has_blob() const;
  public:
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:koinos.protocol.block_active_data)
 private:
  class _Internal;
  void set_has_native();
  void set_has_blob();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    DataUnion() {}
    ::koinos::protocol::active_block_data* native_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class block_passive_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.block_passive_data) */ {
 public:
  inline block_passive_data() : block_passive_data(nullptr) {}
  virtual ~block_passive_data();

  block_passive_data(const block_passive_data& from);
  block_passive_data(block_passive_data&& from) noexcept
    : block_passive_data() {
    *this = ::std::move(from);
  }

  inline block_passive_data& operator=(const block_passive_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_passive_data& operator=(block_passive_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const block_passive_data& default_instance();

  enum DataCase {
    kNative = 1,
    kBlob = 2,
    DATA_NOT_SET = 0,
  };

  static inline const block_passive_data* internal_default_instance() {
    return reinterpret_cast<const block_passive_data*>(
               &_block_passive_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(block_passive_data& a, block_passive_data& b) {
    a.Swap(&b);
  }
  inline void Swap(block_passive_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_passive_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_passive_data* New() const final {
    return CreateMaybeMessage<block_passive_data>(nullptr);
  }

  block_passive_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_passive_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const block_passive_data& from);
  void MergeFrom(const block_passive_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_passive_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.block_passive_data";
  }
  protected:
  explicit block_passive_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNativeFieldNumber = 1,
    kBlobFieldNumber = 2,
  };
  // .koinos.protocol.passive_block_data native = 1;
  bool has_native() const;
  private:
  bool _internal_has_native() const;
  public:
  void clear_native();
  const ::koinos::protocol::passive_block_data& native() const;
  ::koinos::protocol::passive_block_data* release_native();
  ::koinos::protocol::passive_block_data* mutable_native();
  void set_allocated_native(::koinos::protocol::passive_block_data* native);
  private:
  const ::koinos::protocol::passive_block_data& _internal_native() const;
  ::koinos::protocol::passive_block_data* _internal_mutable_native();
  public:
  void unsafe_arena_set_allocated_native(
      ::koinos::protocol::passive_block_data* native);
  ::koinos::protocol::passive_block_data* unsafe_arena_release_native();

  // bytes blob = 2;
  private:
  bool _internal_has_blob() const;
  public:
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const void* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:koinos.protocol.block_passive_data)
 private:
  class _Internal;
  void set_has_native();
  void set_has_blob();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    DataUnion() {}
    ::koinos::protocol::passive_block_data* native_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class block PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.block) */ {
 public:
  inline block() : block(nullptr) {}
  virtual ~block();

  block(const block& from);
  block(block&& from) noexcept
    : block() {
    *this = ::std::move(from);
  }

  inline block& operator=(const block& from) {
    CopyFrom(from);
    return *this;
  }
  inline block& operator=(block&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const block& default_instance();

  static inline const block* internal_default_instance() {
    return reinterpret_cast<const block*>(
               &_block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(block& a, block& b) {
    a.Swap(&b);
  }
  inline void Swap(block* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block* New() const final {
    return CreateMaybeMessage<block>(nullptr);
  }

  block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const block& from);
  void MergeFrom(const block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.block";
  }
  protected:
  explicit block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 6,
    kIdFieldNumber = 1,
    kSignatureDataFieldNumber = 5,
    kHeaderFieldNumber = 2,
    kActiveFieldNumber = 3,
    kPassiveFieldNumber = 4,
  };
  // repeated .koinos.protocol.transaction transactions = 6;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::koinos::protocol::transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction >*
      mutable_transactions();
  private:
  const ::koinos::protocol::transaction& _internal_transactions(int index) const;
  ::koinos::protocol::transaction* _internal_add_transactions();
  public:
  const ::koinos::protocol::transaction& transactions(int index) const;
  ::koinos::protocol::transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction >&
      transactions() const;

  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes signature_data = 5;
  void clear_signature_data();
  const std::string& signature_data() const;
  void set_signature_data(const std::string& value);
  void set_signature_data(std::string&& value);
  void set_signature_data(const char* value);
  void set_signature_data(const void* value, size_t size);
  std::string* mutable_signature_data();
  std::string* release_signature_data();
  void set_allocated_signature_data(std::string* signature_data);
  private:
  const std::string& _internal_signature_data() const;
  void _internal_set_signature_data(const std::string& value);
  std::string* _internal_mutable_signature_data();
  public:

  // .koinos.protocol.block_header header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::koinos::protocol::block_header& header() const;
  ::koinos::protocol::block_header* release_header();
  ::koinos::protocol::block_header* mutable_header();
  void set_allocated_header(::koinos::protocol::block_header* header);
  private:
  const ::koinos::protocol::block_header& _internal_header() const;
  ::koinos::protocol::block_header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::koinos::protocol::block_header* header);
  ::koinos::protocol::block_header* unsafe_arena_release_header();

  // .koinos.protocol.block_active_data active = 3;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  const ::koinos::protocol::block_active_data& active() const;
  ::koinos::protocol::block_active_data* release_active();
  ::koinos::protocol::block_active_data* mutable_active();
  void set_allocated_active(::koinos::protocol::block_active_data* active);
  private:
  const ::koinos::protocol::block_active_data& _internal_active() const;
  ::koinos::protocol::block_active_data* _internal_mutable_active();
  public:
  void unsafe_arena_set_allocated_active(
      ::koinos::protocol::block_active_data* active);
  ::koinos::protocol::block_active_data* unsafe_arena_release_active();

  // .koinos.protocol.block_passive_data passive = 4;
  bool has_passive() const;
  private:
  bool _internal_has_passive() const;
  public:
  void clear_passive();
  const ::koinos::protocol::block_passive_data& passive() const;
  ::koinos::protocol::block_passive_data* release_passive();
  ::koinos::protocol::block_passive_data* mutable_passive();
  void set_allocated_passive(::koinos::protocol::block_passive_data* passive);
  private:
  const ::koinos::protocol::block_passive_data& _internal_passive() const;
  ::koinos::protocol::block_passive_data* _internal_mutable_passive();
  public:
  void unsafe_arena_set_allocated_passive(
      ::koinos::protocol::block_passive_data* passive);
  ::koinos::protocol::block_passive_data* unsafe_arena_release_passive();

  // @@protoc_insertion_point(class_scope:koinos.protocol.block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction > transactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_data_;
  ::koinos::protocol::block_header* header_;
  ::koinos::protocol::block_active_data* active_;
  ::koinos::protocol::block_passive_data* passive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class block_receipt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.block_receipt) */ {
 public:
  inline block_receipt() : block_receipt(nullptr) {}
  virtual ~block_receipt();

  block_receipt(const block_receipt& from);
  block_receipt(block_receipt&& from) noexcept
    : block_receipt() {
    *this = ::std::move(from);
  }

  inline block_receipt& operator=(const block_receipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline block_receipt& operator=(block_receipt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const block_receipt& default_instance();

  static inline const block_receipt* internal_default_instance() {
    return reinterpret_cast<const block_receipt*>(
               &_block_receipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(block_receipt& a, block_receipt& b) {
    a.Swap(&b);
  }
  inline void Swap(block_receipt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(block_receipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline block_receipt* New() const final {
    return CreateMaybeMessage<block_receipt>(nullptr);
  }

  block_receipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<block_receipt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const block_receipt& from);
  void MergeFrom(const block_receipt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(block_receipt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.block_receipt";
  }
  protected:
  explicit block_receipt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto);
    return ::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.protocol.block_receipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// contract_call_bundle

// bytes contract_id = 1;
inline void contract_call_bundle::clear_contract_id() {
  contract_id_.ClearToEmpty();
}
inline const std::string& contract_call_bundle::contract_id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.contract_call_bundle.contract_id)
  return _internal_contract_id();
}
inline void contract_call_bundle::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.contract_call_bundle.contract_id)
}
inline std::string* contract_call_bundle::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.contract_call_bundle.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& contract_call_bundle::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void contract_call_bundle::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void contract_call_bundle::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.contract_call_bundle.contract_id)
}
inline void contract_call_bundle::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.contract_call_bundle.contract_id)
}
inline void contract_call_bundle::set_contract_id(const void* value,
    size_t size) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.contract_call_bundle.contract_id)
}
inline std::string* contract_call_bundle::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* contract_call_bundle::release_contract_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.contract_call_bundle.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void contract_call_bundle::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.contract_call_bundle.contract_id)
}

// uint32 entry_point = 2;
inline void contract_call_bundle::clear_entry_point() {
  entry_point_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 contract_call_bundle::_internal_entry_point() const {
  return entry_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 contract_call_bundle::entry_point() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.contract_call_bundle.entry_point)
  return _internal_entry_point();
}
inline void contract_call_bundle::_internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entry_point_ = value;
}
inline void contract_call_bundle::set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entry_point(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.contract_call_bundle.entry_point)
}

// -------------------------------------------------------------------

// system_call_target

// uint32 thunk_id = 1;
inline bool system_call_target::_internal_has_thunk_id() const {
  return target_case() == kThunkId;
}
inline void system_call_target::set_has_thunk_id() {
  _oneof_case_[0] = kThunkId;
}
inline void system_call_target::clear_thunk_id() {
  if (_internal_has_thunk_id()) {
    target_.thunk_id_ = 0u;
    clear_has_target();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 system_call_target::_internal_thunk_id() const {
  if (_internal_has_thunk_id()) {
    return target_.thunk_id_;
  }
  return 0u;
}
inline void system_call_target::_internal_set_thunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_thunk_id()) {
    clear_target();
    set_has_thunk_id();
  }
  target_.thunk_id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 system_call_target::thunk_id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.system_call_target.thunk_id)
  return _internal_thunk_id();
}
inline void system_call_target::set_thunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thunk_id(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.system_call_target.thunk_id)
}

// .koinos.protocol.contract_call_bundle system_call_bundle = 2;
inline bool system_call_target::_internal_has_system_call_bundle() const {
  return target_case() == kSystemCallBundle;
}
inline bool system_call_target::has_system_call_bundle() const {
  return _internal_has_system_call_bundle();
}
inline void system_call_target::set_has_system_call_bundle() {
  _oneof_case_[0] = kSystemCallBundle;
}
inline void system_call_target::clear_system_call_bundle() {
  if (_internal_has_system_call_bundle()) {
    if (GetArena() == nullptr) {
      delete target_.system_call_bundle_;
    }
    clear_has_target();
  }
}
inline ::koinos::protocol::contract_call_bundle* system_call_target::release_system_call_bundle() {
  // @@protoc_insertion_point(field_release:koinos.protocol.system_call_target.system_call_bundle)
  if (_internal_has_system_call_bundle()) {
    clear_has_target();
      ::koinos::protocol::contract_call_bundle* temp = target_.system_call_bundle_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.system_call_bundle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::contract_call_bundle& system_call_target::_internal_system_call_bundle() const {
  return _internal_has_system_call_bundle()
      ? *target_.system_call_bundle_
      : reinterpret_cast< ::koinos::protocol::contract_call_bundle&>(::koinos::protocol::_contract_call_bundle_default_instance_);
}
inline const ::koinos::protocol::contract_call_bundle& system_call_target::system_call_bundle() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.system_call_target.system_call_bundle)
  return _internal_system_call_bundle();
}
inline ::koinos::protocol::contract_call_bundle* system_call_target::unsafe_arena_release_system_call_bundle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.system_call_target.system_call_bundle)
  if (_internal_has_system_call_bundle()) {
    clear_has_target();
    ::koinos::protocol::contract_call_bundle* temp = target_.system_call_bundle_;
    target_.system_call_bundle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void system_call_target::unsafe_arena_set_allocated_system_call_bundle(::koinos::protocol::contract_call_bundle* system_call_bundle) {
  clear_target();
  if (system_call_bundle) {
    set_has_system_call_bundle();
    target_.system_call_bundle_ = system_call_bundle;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.system_call_target.system_call_bundle)
}
inline ::koinos::protocol::contract_call_bundle* system_call_target::_internal_mutable_system_call_bundle() {
  if (!_internal_has_system_call_bundle()) {
    clear_target();
    set_has_system_call_bundle();
    target_.system_call_bundle_ = CreateMaybeMessage< ::koinos::protocol::contract_call_bundle >(GetArena());
  }
  return target_.system_call_bundle_;
}
inline ::koinos::protocol::contract_call_bundle* system_call_target::mutable_system_call_bundle() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.system_call_target.system_call_bundle)
  return _internal_mutable_system_call_bundle();
}

inline bool system_call_target::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void system_call_target::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline system_call_target::TargetCase system_call_target::target_case() const {
  return system_call_target::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// upload_contract_operation

// bytes contract_id = 1;
inline void upload_contract_operation::clear_contract_id() {
  contract_id_.ClearToEmpty();
}
inline const std::string& upload_contract_operation::contract_id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.upload_contract_operation.contract_id)
  return _internal_contract_id();
}
inline void upload_contract_operation::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.upload_contract_operation.contract_id)
}
inline std::string* upload_contract_operation::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.upload_contract_operation.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& upload_contract_operation::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void upload_contract_operation::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void upload_contract_operation::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.upload_contract_operation.contract_id)
}
inline void upload_contract_operation::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.upload_contract_operation.contract_id)
}
inline void upload_contract_operation::set_contract_id(const void* value,
    size_t size) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.upload_contract_operation.contract_id)
}
inline std::string* upload_contract_operation::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* upload_contract_operation::release_contract_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.upload_contract_operation.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void upload_contract_operation::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.upload_contract_operation.contract_id)
}

// bytes bytecode = 2;
inline void upload_contract_operation::clear_bytecode() {
  bytecode_.ClearToEmpty();
}
inline const std::string& upload_contract_operation::bytecode() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.upload_contract_operation.bytecode)
  return _internal_bytecode();
}
inline void upload_contract_operation::set_bytecode(const std::string& value) {
  _internal_set_bytecode(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.upload_contract_operation.bytecode)
}
inline std::string* upload_contract_operation::mutable_bytecode() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.upload_contract_operation.bytecode)
  return _internal_mutable_bytecode();
}
inline const std::string& upload_contract_operation::_internal_bytecode() const {
  return bytecode_.Get();
}
inline void upload_contract_operation::_internal_set_bytecode(const std::string& value) {
  
  bytecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void upload_contract_operation::set_bytecode(std::string&& value) {
  
  bytecode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.upload_contract_operation.bytecode)
}
inline void upload_contract_operation::set_bytecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bytecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.upload_contract_operation.bytecode)
}
inline void upload_contract_operation::set_bytecode(const void* value,
    size_t size) {
  
  bytecode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.upload_contract_operation.bytecode)
}
inline std::string* upload_contract_operation::_internal_mutable_bytecode() {
  
  return bytecode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* upload_contract_operation::release_bytecode() {
  // @@protoc_insertion_point(field_release:koinos.protocol.upload_contract_operation.bytecode)
  return bytecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void upload_contract_operation::set_allocated_bytecode(std::string* bytecode) {
  if (bytecode != nullptr) {
    
  } else {
    
  }
  bytecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.upload_contract_operation.bytecode)
}

// -------------------------------------------------------------------

// call_contract_operation

// bytes contract_id = 1;
inline void call_contract_operation::clear_contract_id() {
  contract_id_.ClearToEmpty();
}
inline const std::string& call_contract_operation::contract_id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.call_contract_operation.contract_id)
  return _internal_contract_id();
}
inline void call_contract_operation::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.call_contract_operation.contract_id)
}
inline std::string* call_contract_operation::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.call_contract_operation.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& call_contract_operation::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void call_contract_operation::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void call_contract_operation::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.call_contract_operation.contract_id)
}
inline void call_contract_operation::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.call_contract_operation.contract_id)
}
inline void call_contract_operation::set_contract_id(const void* value,
    size_t size) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.call_contract_operation.contract_id)
}
inline std::string* call_contract_operation::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* call_contract_operation::release_contract_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.call_contract_operation.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void call_contract_operation::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.call_contract_operation.contract_id)
}

// uint32 entry_point = 2;
inline void call_contract_operation::clear_entry_point() {
  entry_point_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 call_contract_operation::_internal_entry_point() const {
  return entry_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 call_contract_operation::entry_point() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.call_contract_operation.entry_point)
  return _internal_entry_point();
}
inline void call_contract_operation::_internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entry_point_ = value;
}
inline void call_contract_operation::set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entry_point(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.call_contract_operation.entry_point)
}

// bytes args = 3;
inline void call_contract_operation::clear_args() {
  args_.ClearToEmpty();
}
inline const std::string& call_contract_operation::args() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.call_contract_operation.args)
  return _internal_args();
}
inline void call_contract_operation::set_args(const std::string& value) {
  _internal_set_args(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.call_contract_operation.args)
}
inline std::string* call_contract_operation::mutable_args() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.call_contract_operation.args)
  return _internal_mutable_args();
}
inline const std::string& call_contract_operation::_internal_args() const {
  return args_.Get();
}
inline void call_contract_operation::_internal_set_args(const std::string& value) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void call_contract_operation::set_args(std::string&& value) {
  
  args_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.call_contract_operation.args)
}
inline void call_contract_operation::set_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.call_contract_operation.args)
}
inline void call_contract_operation::set_args(const void* value,
    size_t size) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.call_contract_operation.args)
}
inline std::string* call_contract_operation::_internal_mutable_args() {
  
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* call_contract_operation::release_args() {
  // @@protoc_insertion_point(field_release:koinos.protocol.call_contract_operation.args)
  return args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void call_contract_operation::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.call_contract_operation.args)
}

// -------------------------------------------------------------------

// set_system_call_operation

// uint32 call_id = 1;
inline void set_system_call_operation::clear_call_id() {
  call_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 set_system_call_operation::_internal_call_id() const {
  return call_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 set_system_call_operation::call_id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.set_system_call_operation.call_id)
  return _internal_call_id();
}
inline void set_system_call_operation::_internal_set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  call_id_ = value;
}
inline void set_system_call_operation::set_call_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_call_id(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.set_system_call_operation.call_id)
}

// .koinos.protocol.system_call_target target = 2;
inline bool set_system_call_operation::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool set_system_call_operation::has_target() const {
  return _internal_has_target();
}
inline void set_system_call_operation::clear_target() {
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::koinos::protocol::system_call_target& set_system_call_operation::_internal_target() const {
  const ::koinos::protocol::system_call_target* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::system_call_target&>(
      ::koinos::protocol::_system_call_target_default_instance_);
}
inline const ::koinos::protocol::system_call_target& set_system_call_operation::target() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.set_system_call_operation.target)
  return _internal_target();
}
inline void set_system_call_operation::unsafe_arena_set_allocated_target(
    ::koinos::protocol::system_call_target* target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.set_system_call_operation.target)
}
inline ::koinos::protocol::system_call_target* set_system_call_operation::release_target() {
  
  ::koinos::protocol::system_call_target* temp = target_;
  target_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::system_call_target* set_system_call_operation::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:koinos.protocol.set_system_call_operation.target)
  
  ::koinos::protocol::system_call_target* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::koinos::protocol::system_call_target* set_system_call_operation::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::system_call_target>(GetArena());
    target_ = p;
  }
  return target_;
}
inline ::koinos::protocol::system_call_target* set_system_call_operation::mutable_target() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.set_system_call_operation.target)
  return _internal_mutable_target();
}
inline void set_system_call_operation::set_allocated_target(::koinos::protocol::system_call_target* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.set_system_call_operation.target)
}

// -------------------------------------------------------------------

// operation

// .koinos.protocol.upload_contract_operation upload_contract = 1;
inline bool operation::_internal_has_upload_contract() const {
  return op_case() == kUploadContract;
}
inline bool operation::has_upload_contract() const {
  return _internal_has_upload_contract();
}
inline void operation::set_has_upload_contract() {
  _oneof_case_[0] = kUploadContract;
}
inline void operation::clear_upload_contract() {
  if (_internal_has_upload_contract()) {
    if (GetArena() == nullptr) {
      delete op_.upload_contract_;
    }
    clear_has_op();
  }
}
inline ::koinos::protocol::upload_contract_operation* operation::release_upload_contract() {
  // @@protoc_insertion_point(field_release:koinos.protocol.operation.upload_contract)
  if (_internal_has_upload_contract()) {
    clear_has_op();
      ::koinos::protocol::upload_contract_operation* temp = op_.upload_contract_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.upload_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::upload_contract_operation& operation::_internal_upload_contract() const {
  return _internal_has_upload_contract()
      ? *op_.upload_contract_
      : reinterpret_cast< ::koinos::protocol::upload_contract_operation&>(::koinos::protocol::_upload_contract_operation_default_instance_);
}
inline const ::koinos::protocol::upload_contract_operation& operation::upload_contract() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.operation.upload_contract)
  return _internal_upload_contract();
}
inline ::koinos::protocol::upload_contract_operation* operation::unsafe_arena_release_upload_contract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.operation.upload_contract)
  if (_internal_has_upload_contract()) {
    clear_has_op();
    ::koinos::protocol::upload_contract_operation* temp = op_.upload_contract_;
    op_.upload_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void operation::unsafe_arena_set_allocated_upload_contract(::koinos::protocol::upload_contract_operation* upload_contract) {
  clear_op();
  if (upload_contract) {
    set_has_upload_contract();
    op_.upload_contract_ = upload_contract;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.operation.upload_contract)
}
inline ::koinos::protocol::upload_contract_operation* operation::_internal_mutable_upload_contract() {
  if (!_internal_has_upload_contract()) {
    clear_op();
    set_has_upload_contract();
    op_.upload_contract_ = CreateMaybeMessage< ::koinos::protocol::upload_contract_operation >(GetArena());
  }
  return op_.upload_contract_;
}
inline ::koinos::protocol::upload_contract_operation* operation::mutable_upload_contract() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.operation.upload_contract)
  return _internal_mutable_upload_contract();
}

// .koinos.protocol.call_contract_operation call_contract = 2;
inline bool operation::_internal_has_call_contract() const {
  return op_case() == kCallContract;
}
inline bool operation::has_call_contract() const {
  return _internal_has_call_contract();
}
inline void operation::set_has_call_contract() {
  _oneof_case_[0] = kCallContract;
}
inline void operation::clear_call_contract() {
  if (_internal_has_call_contract()) {
    if (GetArena() == nullptr) {
      delete op_.call_contract_;
    }
    clear_has_op();
  }
}
inline ::koinos::protocol::call_contract_operation* operation::release_call_contract() {
  // @@protoc_insertion_point(field_release:koinos.protocol.operation.call_contract)
  if (_internal_has_call_contract()) {
    clear_has_op();
      ::koinos::protocol::call_contract_operation* temp = op_.call_contract_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.call_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::call_contract_operation& operation::_internal_call_contract() const {
  return _internal_has_call_contract()
      ? *op_.call_contract_
      : reinterpret_cast< ::koinos::protocol::call_contract_operation&>(::koinos::protocol::_call_contract_operation_default_instance_);
}
inline const ::koinos::protocol::call_contract_operation& operation::call_contract() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.operation.call_contract)
  return _internal_call_contract();
}
inline ::koinos::protocol::call_contract_operation* operation::unsafe_arena_release_call_contract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.operation.call_contract)
  if (_internal_has_call_contract()) {
    clear_has_op();
    ::koinos::protocol::call_contract_operation* temp = op_.call_contract_;
    op_.call_contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void operation::unsafe_arena_set_allocated_call_contract(::koinos::protocol::call_contract_operation* call_contract) {
  clear_op();
  if (call_contract) {
    set_has_call_contract();
    op_.call_contract_ = call_contract;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.operation.call_contract)
}
inline ::koinos::protocol::call_contract_operation* operation::_internal_mutable_call_contract() {
  if (!_internal_has_call_contract()) {
    clear_op();
    set_has_call_contract();
    op_.call_contract_ = CreateMaybeMessage< ::koinos::protocol::call_contract_operation >(GetArena());
  }
  return op_.call_contract_;
}
inline ::koinos::protocol::call_contract_operation* operation::mutable_call_contract() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.operation.call_contract)
  return _internal_mutable_call_contract();
}

// .koinos.protocol.set_system_call_operation set_system_call = 3;
inline bool operation::_internal_has_set_system_call() const {
  return op_case() == kSetSystemCall;
}
inline bool operation::has_set_system_call() const {
  return _internal_has_set_system_call();
}
inline void operation::set_has_set_system_call() {
  _oneof_case_[0] = kSetSystemCall;
}
inline void operation::clear_set_system_call() {
  if (_internal_has_set_system_call()) {
    if (GetArena() == nullptr) {
      delete op_.set_system_call_;
    }
    clear_has_op();
  }
}
inline ::koinos::protocol::set_system_call_operation* operation::release_set_system_call() {
  // @@protoc_insertion_point(field_release:koinos.protocol.operation.set_system_call)
  if (_internal_has_set_system_call()) {
    clear_has_op();
      ::koinos::protocol::set_system_call_operation* temp = op_.set_system_call_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.set_system_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::set_system_call_operation& operation::_internal_set_system_call() const {
  return _internal_has_set_system_call()
      ? *op_.set_system_call_
      : reinterpret_cast< ::koinos::protocol::set_system_call_operation&>(::koinos::protocol::_set_system_call_operation_default_instance_);
}
inline const ::koinos::protocol::set_system_call_operation& operation::set_system_call() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.operation.set_system_call)
  return _internal_set_system_call();
}
inline ::koinos::protocol::set_system_call_operation* operation::unsafe_arena_release_set_system_call() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.operation.set_system_call)
  if (_internal_has_set_system_call()) {
    clear_has_op();
    ::koinos::protocol::set_system_call_operation* temp = op_.set_system_call_;
    op_.set_system_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void operation::unsafe_arena_set_allocated_set_system_call(::koinos::protocol::set_system_call_operation* set_system_call) {
  clear_op();
  if (set_system_call) {
    set_has_set_system_call();
    op_.set_system_call_ = set_system_call;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.operation.set_system_call)
}
inline ::koinos::protocol::set_system_call_operation* operation::_internal_mutable_set_system_call() {
  if (!_internal_has_set_system_call()) {
    clear_op();
    set_has_set_system_call();
    op_.set_system_call_ = CreateMaybeMessage< ::koinos::protocol::set_system_call_operation >(GetArena());
  }
  return op_.set_system_call_;
}
inline ::koinos::protocol::set_system_call_operation* operation::mutable_set_system_call() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.operation.set_system_call)
  return _internal_mutable_set_system_call();
}

inline bool operation::has_op() const {
  return op_case() != OP_NOT_SET;
}
inline void operation::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
inline operation::OpCase operation::op_case() const {
  return operation::OpCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// active_transaction_data

// uint64 resource_limit = 1;
inline void active_transaction_data::clear_resource_limit() {
  resource_limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 active_transaction_data::_internal_resource_limit() const {
  return resource_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 active_transaction_data::resource_limit() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.active_transaction_data.resource_limit)
  return _internal_resource_limit();
}
inline void active_transaction_data::_internal_set_resource_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  resource_limit_ = value;
}
inline void active_transaction_data::set_resource_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_resource_limit(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.active_transaction_data.resource_limit)
}

// uint64 nonce = 2;
inline void active_transaction_data::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 active_transaction_data::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 active_transaction_data::nonce() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.active_transaction_data.nonce)
  return _internal_nonce();
}
inline void active_transaction_data::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void active_transaction_data::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.active_transaction_data.nonce)
}

// repeated .koinos.protocol.operation operations = 3;
inline int active_transaction_data::_internal_operations_size() const {
  return operations_.size();
}
inline int active_transaction_data::operations_size() const {
  return _internal_operations_size();
}
inline void active_transaction_data::clear_operations() {
  operations_.Clear();
}
inline ::koinos::protocol::operation* active_transaction_data::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.active_transaction_data.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::operation >*
active_transaction_data::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.active_transaction_data.operations)
  return &operations_;
}
inline const ::koinos::protocol::operation& active_transaction_data::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::koinos::protocol::operation& active_transaction_data::operations(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.active_transaction_data.operations)
  return _internal_operations(index);
}
inline ::koinos::protocol::operation* active_transaction_data::_internal_add_operations() {
  return operations_.Add();
}
inline ::koinos::protocol::operation* active_transaction_data::add_operations() {
  // @@protoc_insertion_point(field_add:koinos.protocol.active_transaction_data.operations)
  return _internal_add_operations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::operation >&
active_transaction_data::operations() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.active_transaction_data.operations)
  return operations_;
}

// -------------------------------------------------------------------

// passive_transaction_data

// -------------------------------------------------------------------

// transaction_active_data

// .koinos.protocol.active_transaction_data native = 1;
inline bool transaction_active_data::_internal_has_native() const {
  return data_case() == kNative;
}
inline bool transaction_active_data::has_native() const {
  return _internal_has_native();
}
inline void transaction_active_data::set_has_native() {
  _oneof_case_[0] = kNative;
}
inline void transaction_active_data::clear_native() {
  if (_internal_has_native()) {
    if (GetArena() == nullptr) {
      delete data_.native_;
    }
    clear_has_data();
  }
}
inline ::koinos::protocol::active_transaction_data* transaction_active_data::release_native() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction_active_data.native)
  if (_internal_has_native()) {
    clear_has_data();
      ::koinos::protocol::active_transaction_data* temp = data_.native_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.native_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::active_transaction_data& transaction_active_data::_internal_native() const {
  return _internal_has_native()
      ? *data_.native_
      : reinterpret_cast< ::koinos::protocol::active_transaction_data&>(::koinos::protocol::_active_transaction_data_default_instance_);
}
inline const ::koinos::protocol::active_transaction_data& transaction_active_data::native() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_active_data.native)
  return _internal_native();
}
inline ::koinos::protocol::active_transaction_data* transaction_active_data::unsafe_arena_release_native() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.transaction_active_data.native)
  if (_internal_has_native()) {
    clear_has_data();
    ::koinos::protocol::active_transaction_data* temp = data_.native_;
    data_.native_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void transaction_active_data::unsafe_arena_set_allocated_native(::koinos::protocol::active_transaction_data* native) {
  clear_data();
  if (native) {
    set_has_native();
    data_.native_ = native;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.transaction_active_data.native)
}
inline ::koinos::protocol::active_transaction_data* transaction_active_data::_internal_mutable_native() {
  if (!_internal_has_native()) {
    clear_data();
    set_has_native();
    data_.native_ = CreateMaybeMessage< ::koinos::protocol::active_transaction_data >(GetArena());
  }
  return data_.native_;
}
inline ::koinos::protocol::active_transaction_data* transaction_active_data::mutable_native() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_active_data.native)
  return _internal_mutable_native();
}

// bytes blob = 2;
inline bool transaction_active_data::_internal_has_blob() const {
  return data_case() == kBlob;
}
inline void transaction_active_data::set_has_blob() {
  _oneof_case_[0] = kBlob;
}
inline void transaction_active_data::clear_blob() {
  if (_internal_has_blob()) {
    data_.blob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& transaction_active_data::blob() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_active_data.blob)
  return _internal_blob();
}
inline void transaction_active_data::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_active_data.blob)
}
inline std::string* transaction_active_data::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_active_data.blob)
  return _internal_mutable_blob();
}
inline const std::string& transaction_active_data::_internal_blob() const {
  if (_internal_has_blob()) {
    return data_.blob_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void transaction_active_data::_internal_set_blob(const std::string& value) {
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void transaction_active_data::set_blob(std::string&& value) {
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_active_data.blob)
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.transaction_active_data.blob)
}
inline void transaction_active_data::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.transaction_active_data.blob)
}
inline void transaction_active_data::set_blob(const void* value,
                             size_t size) {
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.transaction_active_data.blob)
}
inline std::string* transaction_active_data::_internal_mutable_blob() {
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.blob_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* transaction_active_data::release_blob() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction_active_data.blob)
  if (_internal_has_blob()) {
    clear_has_data();
    return data_.blob_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void transaction_active_data::set_allocated_blob(std::string* blob) {
  if (has_data()) {
    clear_data();
  }
  if (blob != nullptr) {
    set_has_blob();
    data_.blob_.UnsafeSetDefault(blob);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(blob);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction_active_data.blob)
}

inline bool transaction_active_data::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void transaction_active_data::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline transaction_active_data::DataCase transaction_active_data::data_case() const {
  return transaction_active_data::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// transaction_passive_data

// .koinos.protocol.passive_transaction_data native = 1;
inline bool transaction_passive_data::_internal_has_native() const {
  return data_case() == kNative;
}
inline bool transaction_passive_data::has_native() const {
  return _internal_has_native();
}
inline void transaction_passive_data::set_has_native() {
  _oneof_case_[0] = kNative;
}
inline void transaction_passive_data::clear_native() {
  if (_internal_has_native()) {
    if (GetArena() == nullptr) {
      delete data_.native_;
    }
    clear_has_data();
  }
}
inline ::koinos::protocol::passive_transaction_data* transaction_passive_data::release_native() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction_passive_data.native)
  if (_internal_has_native()) {
    clear_has_data();
      ::koinos::protocol::passive_transaction_data* temp = data_.native_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.native_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::passive_transaction_data& transaction_passive_data::_internal_native() const {
  return _internal_has_native()
      ? *data_.native_
      : reinterpret_cast< ::koinos::protocol::passive_transaction_data&>(::koinos::protocol::_passive_transaction_data_default_instance_);
}
inline const ::koinos::protocol::passive_transaction_data& transaction_passive_data::native() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_passive_data.native)
  return _internal_native();
}
inline ::koinos::protocol::passive_transaction_data* transaction_passive_data::unsafe_arena_release_native() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.transaction_passive_data.native)
  if (_internal_has_native()) {
    clear_has_data();
    ::koinos::protocol::passive_transaction_data* temp = data_.native_;
    data_.native_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void transaction_passive_data::unsafe_arena_set_allocated_native(::koinos::protocol::passive_transaction_data* native) {
  clear_data();
  if (native) {
    set_has_native();
    data_.native_ = native;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.transaction_passive_data.native)
}
inline ::koinos::protocol::passive_transaction_data* transaction_passive_data::_internal_mutable_native() {
  if (!_internal_has_native()) {
    clear_data();
    set_has_native();
    data_.native_ = CreateMaybeMessage< ::koinos::protocol::passive_transaction_data >(GetArena());
  }
  return data_.native_;
}
inline ::koinos::protocol::passive_transaction_data* transaction_passive_data::mutable_native() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_passive_data.native)
  return _internal_mutable_native();
}

// bytes blob = 2;
inline bool transaction_passive_data::_internal_has_blob() const {
  return data_case() == kBlob;
}
inline void transaction_passive_data::set_has_blob() {
  _oneof_case_[0] = kBlob;
}
inline void transaction_passive_data::clear_blob() {
  if (_internal_has_blob()) {
    data_.blob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& transaction_passive_data::blob() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction_passive_data.blob)
  return _internal_blob();
}
inline void transaction_passive_data::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_passive_data.blob)
}
inline std::string* transaction_passive_data::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction_passive_data.blob)
  return _internal_mutable_blob();
}
inline const std::string& transaction_passive_data::_internal_blob() const {
  if (_internal_has_blob()) {
    return data_.blob_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void transaction_passive_data::_internal_set_blob(const std::string& value) {
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void transaction_passive_data::set_blob(std::string&& value) {
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction_passive_data.blob)
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.transaction_passive_data.blob)
}
inline void transaction_passive_data::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.transaction_passive_data.blob)
}
inline void transaction_passive_data::set_blob(const void* value,
                             size_t size) {
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.transaction_passive_data.blob)
}
inline std::string* transaction_passive_data::_internal_mutable_blob() {
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.blob_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* transaction_passive_data::release_blob() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction_passive_data.blob)
  if (_internal_has_blob()) {
    clear_has_data();
    return data_.blob_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void transaction_passive_data::set_allocated_blob(std::string* blob) {
  if (has_data()) {
    clear_data();
  }
  if (blob != nullptr) {
    set_has_blob();
    data_.blob_.UnsafeSetDefault(blob);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(blob);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction_passive_data.blob)
}

inline bool transaction_passive_data::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void transaction_passive_data::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline transaction_passive_data::DataCase transaction_passive_data::data_case() const {
  return transaction_passive_data::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// transaction

// bytes id = 1;
inline void transaction::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& transaction::id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction.id)
  return _internal_id();
}
inline void transaction::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction.id)
}
inline std::string* transaction::mutable_id() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction.id)
  return _internal_mutable_id();
}
inline const std::string& transaction::_internal_id() const {
  return id_.Get();
}
inline void transaction::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void transaction::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.transaction.id)
}
inline void transaction::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.transaction.id)
}
inline void transaction::set_id(const void* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.transaction.id)
}
inline std::string* transaction::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* transaction::release_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void transaction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction.id)
}

// .koinos.protocol.transaction_active_data active = 2;
inline bool transaction::_internal_has_active() const {
  return this != internal_default_instance() && active_ != nullptr;
}
inline bool transaction::has_active() const {
  return _internal_has_active();
}
inline void transaction::clear_active() {
  if (GetArena() == nullptr && active_ != nullptr) {
    delete active_;
  }
  active_ = nullptr;
}
inline const ::koinos::protocol::transaction_active_data& transaction::_internal_active() const {
  const ::koinos::protocol::transaction_active_data* p = active_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::transaction_active_data&>(
      ::koinos::protocol::_transaction_active_data_default_instance_);
}
inline const ::koinos::protocol::transaction_active_data& transaction::active() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction.active)
  return _internal_active();
}
inline void transaction::unsafe_arena_set_allocated_active(
    ::koinos::protocol::transaction_active_data* active) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(active_);
  }
  active_ = active;
  if (active) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.transaction.active)
}
inline ::koinos::protocol::transaction_active_data* transaction::release_active() {
  
  ::koinos::protocol::transaction_active_data* temp = active_;
  active_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::transaction_active_data* transaction::unsafe_arena_release_active() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction.active)
  
  ::koinos::protocol::transaction_active_data* temp = active_;
  active_ = nullptr;
  return temp;
}
inline ::koinos::protocol::transaction_active_data* transaction::_internal_mutable_active() {
  
  if (active_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::transaction_active_data>(GetArena());
    active_ = p;
  }
  return active_;
}
inline ::koinos::protocol::transaction_active_data* transaction::mutable_active() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction.active)
  return _internal_mutable_active();
}
inline void transaction::set_allocated_active(::koinos::protocol::transaction_active_data* active) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete active_;
  }
  if (active) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(active);
    if (message_arena != submessage_arena) {
      active = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, active, submessage_arena);
    }
    
  } else {
    
  }
  active_ = active;
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction.active)
}

// .koinos.protocol.transaction_passive_data passive = 3;
inline bool transaction::_internal_has_passive() const {
  return this != internal_default_instance() && passive_ != nullptr;
}
inline bool transaction::has_passive() const {
  return _internal_has_passive();
}
inline void transaction::clear_passive() {
  if (GetArena() == nullptr && passive_ != nullptr) {
    delete passive_;
  }
  passive_ = nullptr;
}
inline const ::koinos::protocol::transaction_passive_data& transaction::_internal_passive() const {
  const ::koinos::protocol::transaction_passive_data* p = passive_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::transaction_passive_data&>(
      ::koinos::protocol::_transaction_passive_data_default_instance_);
}
inline const ::koinos::protocol::transaction_passive_data& transaction::passive() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction.passive)
  return _internal_passive();
}
inline void transaction::unsafe_arena_set_allocated_passive(
    ::koinos::protocol::transaction_passive_data* passive) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passive_);
  }
  passive_ = passive;
  if (passive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.transaction.passive)
}
inline ::koinos::protocol::transaction_passive_data* transaction::release_passive() {
  
  ::koinos::protocol::transaction_passive_data* temp = passive_;
  passive_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::transaction_passive_data* transaction::unsafe_arena_release_passive() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction.passive)
  
  ::koinos::protocol::transaction_passive_data* temp = passive_;
  passive_ = nullptr;
  return temp;
}
inline ::koinos::protocol::transaction_passive_data* transaction::_internal_mutable_passive() {
  
  if (passive_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::transaction_passive_data>(GetArena());
    passive_ = p;
  }
  return passive_;
}
inline ::koinos::protocol::transaction_passive_data* transaction::mutable_passive() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction.passive)
  return _internal_mutable_passive();
}
inline void transaction::set_allocated_passive(::koinos::protocol::transaction_passive_data* passive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete passive_;
  }
  if (passive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(passive);
    if (message_arena != submessage_arena) {
      passive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passive, submessage_arena);
    }
    
  } else {
    
  }
  passive_ = passive;
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction.passive)
}

// bytes signature_data = 4;
inline void transaction::clear_signature_data() {
  signature_data_.ClearToEmpty();
}
inline const std::string& transaction::signature_data() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.transaction.signature_data)
  return _internal_signature_data();
}
inline void transaction::set_signature_data(const std::string& value) {
  _internal_set_signature_data(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.transaction.signature_data)
}
inline std::string* transaction::mutable_signature_data() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.transaction.signature_data)
  return _internal_mutable_signature_data();
}
inline const std::string& transaction::_internal_signature_data() const {
  return signature_data_.Get();
}
inline void transaction::_internal_set_signature_data(const std::string& value) {
  
  signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void transaction::set_signature_data(std::string&& value) {
  
  signature_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.transaction.signature_data)
}
inline void transaction::set_signature_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.transaction.signature_data)
}
inline void transaction::set_signature_data(const void* value,
    size_t size) {
  
  signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.transaction.signature_data)
}
inline std::string* transaction::_internal_mutable_signature_data() {
  
  return signature_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* transaction::release_signature_data() {
  // @@protoc_insertion_point(field_release:koinos.protocol.transaction.signature_data)
  return signature_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void transaction::set_allocated_signature_data(std::string* signature_data) {
  if (signature_data != nullptr) {
    
  } else {
    
  }
  signature_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.transaction.signature_data)
}

// -------------------------------------------------------------------

// active_block_data

// bytes transaction_merkle_root = 1;
inline void active_block_data::clear_transaction_merkle_root() {
  transaction_merkle_root_.ClearToEmpty();
}
inline const std::string& active_block_data::transaction_merkle_root() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.active_block_data.transaction_merkle_root)
  return _internal_transaction_merkle_root();
}
inline void active_block_data::set_transaction_merkle_root(const std::string& value) {
  _internal_set_transaction_merkle_root(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.active_block_data.transaction_merkle_root)
}
inline std::string* active_block_data::mutable_transaction_merkle_root() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.active_block_data.transaction_merkle_root)
  return _internal_mutable_transaction_merkle_root();
}
inline const std::string& active_block_data::_internal_transaction_merkle_root() const {
  return transaction_merkle_root_.Get();
}
inline void active_block_data::_internal_set_transaction_merkle_root(const std::string& value) {
  
  transaction_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void active_block_data::set_transaction_merkle_root(std::string&& value) {
  
  transaction_merkle_root_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.active_block_data.transaction_merkle_root)
}
inline void active_block_data::set_transaction_merkle_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.active_block_data.transaction_merkle_root)
}
inline void active_block_data::set_transaction_merkle_root(const void* value,
    size_t size) {
  
  transaction_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.active_block_data.transaction_merkle_root)
}
inline std::string* active_block_data::_internal_mutable_transaction_merkle_root() {
  
  return transaction_merkle_root_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* active_block_data::release_transaction_merkle_root() {
  // @@protoc_insertion_point(field_release:koinos.protocol.active_block_data.transaction_merkle_root)
  return transaction_merkle_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void active_block_data::set_allocated_transaction_merkle_root(std::string* transaction_merkle_root) {
  if (transaction_merkle_root != nullptr) {
    
  } else {
    
  }
  transaction_merkle_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_merkle_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.active_block_data.transaction_merkle_root)
}

// bytes passive_data_merkle_root = 2;
inline void active_block_data::clear_passive_data_merkle_root() {
  passive_data_merkle_root_.ClearToEmpty();
}
inline const std::string& active_block_data::passive_data_merkle_root() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.active_block_data.passive_data_merkle_root)
  return _internal_passive_data_merkle_root();
}
inline void active_block_data::set_passive_data_merkle_root(const std::string& value) {
  _internal_set_passive_data_merkle_root(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.active_block_data.passive_data_merkle_root)
}
inline std::string* active_block_data::mutable_passive_data_merkle_root() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.active_block_data.passive_data_merkle_root)
  return _internal_mutable_passive_data_merkle_root();
}
inline const std::string& active_block_data::_internal_passive_data_merkle_root() const {
  return passive_data_merkle_root_.Get();
}
inline void active_block_data::_internal_set_passive_data_merkle_root(const std::string& value) {
  
  passive_data_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void active_block_data::set_passive_data_merkle_root(std::string&& value) {
  
  passive_data_merkle_root_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.active_block_data.passive_data_merkle_root)
}
inline void active_block_data::set_passive_data_merkle_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passive_data_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.active_block_data.passive_data_merkle_root)
}
inline void active_block_data::set_passive_data_merkle_root(const void* value,
    size_t size) {
  
  passive_data_merkle_root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.active_block_data.passive_data_merkle_root)
}
inline std::string* active_block_data::_internal_mutable_passive_data_merkle_root() {
  
  return passive_data_merkle_root_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* active_block_data::release_passive_data_merkle_root() {
  // @@protoc_insertion_point(field_release:koinos.protocol.active_block_data.passive_data_merkle_root)
  return passive_data_merkle_root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void active_block_data::set_allocated_passive_data_merkle_root(std::string* passive_data_merkle_root) {
  if (passive_data_merkle_root != nullptr) {
    
  } else {
    
  }
  passive_data_merkle_root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passive_data_merkle_root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.active_block_data.passive_data_merkle_root)
}

// bytes signer = 3;
inline void active_block_data::clear_signer() {
  signer_.ClearToEmpty();
}
inline const std::string& active_block_data::signer() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.active_block_data.signer)
  return _internal_signer();
}
inline void active_block_data::set_signer(const std::string& value) {
  _internal_set_signer(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.active_block_data.signer)
}
inline std::string* active_block_data::mutable_signer() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.active_block_data.signer)
  return _internal_mutable_signer();
}
inline const std::string& active_block_data::_internal_signer() const {
  return signer_.Get();
}
inline void active_block_data::_internal_set_signer(const std::string& value) {
  
  signer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void active_block_data::set_signer(std::string&& value) {
  
  signer_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.active_block_data.signer)
}
inline void active_block_data::set_signer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.active_block_data.signer)
}
inline void active_block_data::set_signer(const void* value,
    size_t size) {
  
  signer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.active_block_data.signer)
}
inline std::string* active_block_data::_internal_mutable_signer() {
  
  return signer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* active_block_data::release_signer() {
  // @@protoc_insertion_point(field_release:koinos.protocol.active_block_data.signer)
  return signer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void active_block_data::set_allocated_signer(std::string* signer) {
  if (signer != nullptr) {
    
  } else {
    
  }
  signer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.active_block_data.signer)
}

// -------------------------------------------------------------------

// passive_block_data

// -------------------------------------------------------------------

// block_header

// bytes previous = 1;
inline void block_header::clear_previous() {
  previous_.ClearToEmpty();
}
inline const std::string& block_header::previous() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_header.previous)
  return _internal_previous();
}
inline void block_header::set_previous(const std::string& value) {
  _internal_set_previous(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_header.previous)
}
inline std::string* block_header::mutable_previous() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_header.previous)
  return _internal_mutable_previous();
}
inline const std::string& block_header::_internal_previous() const {
  return previous_.Get();
}
inline void block_header::_internal_set_previous(const std::string& value) {
  
  previous_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void block_header::set_previous(std::string&& value) {
  
  previous_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.block_header.previous)
}
inline void block_header::set_previous(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previous_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.block_header.previous)
}
inline void block_header::set_previous(const void* value,
    size_t size) {
  
  previous_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.block_header.previous)
}
inline std::string* block_header::_internal_mutable_previous() {
  
  return previous_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* block_header::release_previous() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block_header.previous)
  return previous_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void block_header::set_allocated_previous(std::string* previous) {
  if (previous != nullptr) {
    
  } else {
    
  }
  previous_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previous,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block_header.previous)
}

// uint64 height = 2;
inline void block_header::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_header::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_header::height() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_header.height)
  return _internal_height();
}
inline void block_header::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void block_header::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_header.height)
}

// uint64 timestamp = 3;
inline void block_header::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_header::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 block_header::timestamp() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_header.timestamp)
  return _internal_timestamp();
}
inline void block_header::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void block_header::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_header.timestamp)
}

// -------------------------------------------------------------------

// block_active_data

// .koinos.protocol.active_block_data native = 1;
inline bool block_active_data::_internal_has_native() const {
  return data_case() == kNative;
}
inline bool block_active_data::has_native() const {
  return _internal_has_native();
}
inline void block_active_data::set_has_native() {
  _oneof_case_[0] = kNative;
}
inline void block_active_data::clear_native() {
  if (_internal_has_native()) {
    if (GetArena() == nullptr) {
      delete data_.native_;
    }
    clear_has_data();
  }
}
inline ::koinos::protocol::active_block_data* block_active_data::release_native() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block_active_data.native)
  if (_internal_has_native()) {
    clear_has_data();
      ::koinos::protocol::active_block_data* temp = data_.native_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.native_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::active_block_data& block_active_data::_internal_native() const {
  return _internal_has_native()
      ? *data_.native_
      : reinterpret_cast< ::koinos::protocol::active_block_data&>(::koinos::protocol::_active_block_data_default_instance_);
}
inline const ::koinos::protocol::active_block_data& block_active_data::native() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_active_data.native)
  return _internal_native();
}
inline ::koinos::protocol::active_block_data* block_active_data::unsafe_arena_release_native() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.block_active_data.native)
  if (_internal_has_native()) {
    clear_has_data();
    ::koinos::protocol::active_block_data* temp = data_.native_;
    data_.native_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void block_active_data::unsafe_arena_set_allocated_native(::koinos::protocol::active_block_data* native) {
  clear_data();
  if (native) {
    set_has_native();
    data_.native_ = native;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.block_active_data.native)
}
inline ::koinos::protocol::active_block_data* block_active_data::_internal_mutable_native() {
  if (!_internal_has_native()) {
    clear_data();
    set_has_native();
    data_.native_ = CreateMaybeMessage< ::koinos::protocol::active_block_data >(GetArena());
  }
  return data_.native_;
}
inline ::koinos::protocol::active_block_data* block_active_data::mutable_native() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_active_data.native)
  return _internal_mutable_native();
}

// bytes blob = 2;
inline bool block_active_data::_internal_has_blob() const {
  return data_case() == kBlob;
}
inline void block_active_data::set_has_blob() {
  _oneof_case_[0] = kBlob;
}
inline void block_active_data::clear_blob() {
  if (_internal_has_blob()) {
    data_.blob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& block_active_data::blob() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_active_data.blob)
  return _internal_blob();
}
inline void block_active_data::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_active_data.blob)
}
inline std::string* block_active_data::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_active_data.blob)
  return _internal_mutable_blob();
}
inline const std::string& block_active_data::_internal_blob() const {
  if (_internal_has_blob()) {
    return data_.blob_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void block_active_data::_internal_set_blob(const std::string& value) {
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void block_active_data::set_blob(std::string&& value) {
  // @@protoc_insertion_point(field_set:koinos.protocol.block_active_data.blob)
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.block_active_data.blob)
}
inline void block_active_data::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.block_active_data.blob)
}
inline void block_active_data::set_blob(const void* value,
                             size_t size) {
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.block_active_data.blob)
}
inline std::string* block_active_data::_internal_mutable_blob() {
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.blob_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* block_active_data::release_blob() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block_active_data.blob)
  if (_internal_has_blob()) {
    clear_has_data();
    return data_.blob_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void block_active_data::set_allocated_blob(std::string* blob) {
  if (has_data()) {
    clear_data();
  }
  if (blob != nullptr) {
    set_has_blob();
    data_.blob_.UnsafeSetDefault(blob);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(blob);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block_active_data.blob)
}

inline bool block_active_data::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void block_active_data::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline block_active_data::DataCase block_active_data::data_case() const {
  return block_active_data::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// block_passive_data

// .koinos.protocol.passive_block_data native = 1;
inline bool block_passive_data::_internal_has_native() const {
  return data_case() == kNative;
}
inline bool block_passive_data::has_native() const {
  return _internal_has_native();
}
inline void block_passive_data::set_has_native() {
  _oneof_case_[0] = kNative;
}
inline void block_passive_data::clear_native() {
  if (_internal_has_native()) {
    if (GetArena() == nullptr) {
      delete data_.native_;
    }
    clear_has_data();
  }
}
inline ::koinos::protocol::passive_block_data* block_passive_data::release_native() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block_passive_data.native)
  if (_internal_has_native()) {
    clear_has_data();
      ::koinos::protocol::passive_block_data* temp = data_.native_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.native_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::passive_block_data& block_passive_data::_internal_native() const {
  return _internal_has_native()
      ? *data_.native_
      : reinterpret_cast< ::koinos::protocol::passive_block_data&>(::koinos::protocol::_passive_block_data_default_instance_);
}
inline const ::koinos::protocol::passive_block_data& block_passive_data::native() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_passive_data.native)
  return _internal_native();
}
inline ::koinos::protocol::passive_block_data* block_passive_data::unsafe_arena_release_native() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.block_passive_data.native)
  if (_internal_has_native()) {
    clear_has_data();
    ::koinos::protocol::passive_block_data* temp = data_.native_;
    data_.native_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void block_passive_data::unsafe_arena_set_allocated_native(::koinos::protocol::passive_block_data* native) {
  clear_data();
  if (native) {
    set_has_native();
    data_.native_ = native;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.block_passive_data.native)
}
inline ::koinos::protocol::passive_block_data* block_passive_data::_internal_mutable_native() {
  if (!_internal_has_native()) {
    clear_data();
    set_has_native();
    data_.native_ = CreateMaybeMessage< ::koinos::protocol::passive_block_data >(GetArena());
  }
  return data_.native_;
}
inline ::koinos::protocol::passive_block_data* block_passive_data::mutable_native() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_passive_data.native)
  return _internal_mutable_native();
}

// bytes blob = 2;
inline bool block_passive_data::_internal_has_blob() const {
  return data_case() == kBlob;
}
inline void block_passive_data::set_has_blob() {
  _oneof_case_[0] = kBlob;
}
inline void block_passive_data::clear_blob() {
  if (_internal_has_blob()) {
    data_.blob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_data();
  }
}
inline const std::string& block_passive_data::blob() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block_passive_data.blob)
  return _internal_blob();
}
inline void block_passive_data::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block_passive_data.blob)
}
inline std::string* block_passive_data::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block_passive_data.blob)
  return _internal_mutable_blob();
}
inline const std::string& block_passive_data::_internal_blob() const {
  if (_internal_has_blob()) {
    return data_.blob_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void block_passive_data::_internal_set_blob(const std::string& value) {
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void block_passive_data::set_blob(std::string&& value) {
  // @@protoc_insertion_point(field_set:koinos.protocol.block_passive_data.blob)
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.block_passive_data.blob)
}
inline void block_passive_data::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.block_passive_data.blob)
}
inline void block_passive_data::set_blob(const void* value,
                             size_t size) {
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.blob_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.block_passive_data.blob)
}
inline std::string* block_passive_data::_internal_mutable_blob() {
  if (!_internal_has_blob()) {
    clear_data();
    set_has_blob();
    data_.blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.blob_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* block_passive_data::release_blob() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block_passive_data.blob)
  if (_internal_has_blob()) {
    clear_has_data();
    return data_.blob_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void block_passive_data::set_allocated_blob(std::string* blob) {
  if (has_data()) {
    clear_data();
  }
  if (blob != nullptr) {
    set_has_blob();
    data_.blob_.UnsafeSetDefault(blob);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(blob);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block_passive_data.blob)
}

inline bool block_passive_data::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void block_passive_data::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline block_passive_data::DataCase block_passive_data::data_case() const {
  return block_passive_data::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// block

// bytes id = 1;
inline void block::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& block::id() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block.id)
  return _internal_id();
}
inline void block::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block.id)
}
inline std::string* block::mutable_id() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block.id)
  return _internal_mutable_id();
}
inline const std::string& block::_internal_id() const {
  return id_.Get();
}
inline void block::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void block::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.block.id)
}
inline void block::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.block.id)
}
inline void block::set_id(const void* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.block.id)
}
inline std::string* block::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* block::release_id() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void block::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block.id)
}

// .koinos.protocol.block_header header = 2;
inline bool block::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool block::has_header() const {
  return _internal_has_header();
}
inline void block::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::koinos::protocol::block_header& block::_internal_header() const {
  const ::koinos::protocol::block_header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block_header&>(
      ::koinos::protocol::_block_header_default_instance_);
}
inline const ::koinos::protocol::block_header& block::header() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block.header)
  return _internal_header();
}
inline void block::unsafe_arena_set_allocated_header(
    ::koinos::protocol::block_header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.block.header)
}
inline ::koinos::protocol::block_header* block::release_header() {
  
  ::koinos::protocol::block_header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::block_header* block::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block.header)
  
  ::koinos::protocol::block_header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block_header* block::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block_header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::koinos::protocol::block_header* block::mutable_header() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block.header)
  return _internal_mutable_header();
}
inline void block::set_allocated_header(::koinos::protocol::block_header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block.header)
}

// .koinos.protocol.block_active_data active = 3;
inline bool block::_internal_has_active() const {
  return this != internal_default_instance() && active_ != nullptr;
}
inline bool block::has_active() const {
  return _internal_has_active();
}
inline void block::clear_active() {
  if (GetArena() == nullptr && active_ != nullptr) {
    delete active_;
  }
  active_ = nullptr;
}
inline const ::koinos::protocol::block_active_data& block::_internal_active() const {
  const ::koinos::protocol::block_active_data* p = active_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block_active_data&>(
      ::koinos::protocol::_block_active_data_default_instance_);
}
inline const ::koinos::protocol::block_active_data& block::active() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block.active)
  return _internal_active();
}
inline void block::unsafe_arena_set_allocated_active(
    ::koinos::protocol::block_active_data* active) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(active_);
  }
  active_ = active;
  if (active) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.block.active)
}
inline ::koinos::protocol::block_active_data* block::release_active() {
  
  ::koinos::protocol::block_active_data* temp = active_;
  active_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::block_active_data* block::unsafe_arena_release_active() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block.active)
  
  ::koinos::protocol::block_active_data* temp = active_;
  active_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block_active_data* block::_internal_mutable_active() {
  
  if (active_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block_active_data>(GetArena());
    active_ = p;
  }
  return active_;
}
inline ::koinos::protocol::block_active_data* block::mutable_active() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block.active)
  return _internal_mutable_active();
}
inline void block::set_allocated_active(::koinos::protocol::block_active_data* active) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete active_;
  }
  if (active) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(active);
    if (message_arena != submessage_arena) {
      active = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, active, submessage_arena);
    }
    
  } else {
    
  }
  active_ = active;
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block.active)
}

// .koinos.protocol.block_passive_data passive = 4;
inline bool block::_internal_has_passive() const {
  return this != internal_default_instance() && passive_ != nullptr;
}
inline bool block::has_passive() const {
  return _internal_has_passive();
}
inline void block::clear_passive() {
  if (GetArena() == nullptr && passive_ != nullptr) {
    delete passive_;
  }
  passive_ = nullptr;
}
inline const ::koinos::protocol::block_passive_data& block::_internal_passive() const {
  const ::koinos::protocol::block_passive_data* p = passive_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block_passive_data&>(
      ::koinos::protocol::_block_passive_data_default_instance_);
}
inline const ::koinos::protocol::block_passive_data& block::passive() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block.passive)
  return _internal_passive();
}
inline void block::unsafe_arena_set_allocated_passive(
    ::koinos::protocol::block_passive_data* passive) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passive_);
  }
  passive_ = passive;
  if (passive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.block.passive)
}
inline ::koinos::protocol::block_passive_data* block::release_passive() {
  
  ::koinos::protocol::block_passive_data* temp = passive_;
  passive_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::block_passive_data* block::unsafe_arena_release_passive() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block.passive)
  
  ::koinos::protocol::block_passive_data* temp = passive_;
  passive_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block_passive_data* block::_internal_mutable_passive() {
  
  if (passive_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block_passive_data>(GetArena());
    passive_ = p;
  }
  return passive_;
}
inline ::koinos::protocol::block_passive_data* block::mutable_passive() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block.passive)
  return _internal_mutable_passive();
}
inline void block::set_allocated_passive(::koinos::protocol::block_passive_data* passive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete passive_;
  }
  if (passive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(passive);
    if (message_arena != submessage_arena) {
      passive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passive, submessage_arena);
    }
    
  } else {
    
  }
  passive_ = passive;
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block.passive)
}

// bytes signature_data = 5;
inline void block::clear_signature_data() {
  signature_data_.ClearToEmpty();
}
inline const std::string& block::signature_data() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block.signature_data)
  return _internal_signature_data();
}
inline void block::set_signature_data(const std::string& value) {
  _internal_set_signature_data(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.block.signature_data)
}
inline std::string* block::mutable_signature_data() {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block.signature_data)
  return _internal_mutable_signature_data();
}
inline const std::string& block::_internal_signature_data() const {
  return signature_data_.Get();
}
inline void block::_internal_set_signature_data(const std::string& value) {
  
  signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void block::set_signature_data(std::string&& value) {
  
  signature_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.protocol.block.signature_data)
}
inline void block::set_signature_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.protocol.block.signature_data)
}
inline void block::set_signature_data(const void* value,
    size_t size) {
  
  signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.protocol.block.signature_data)
}
inline std::string* block::_internal_mutable_signature_data() {
  
  return signature_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* block::release_signature_data() {
  // @@protoc_insertion_point(field_release:koinos.protocol.block.signature_data)
  return signature_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void block::set_allocated_signature_data(std::string* signature_data) {
  if (signature_data != nullptr) {
    
  } else {
    
  }
  signature_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.block.signature_data)
}

// repeated .koinos.protocol.transaction transactions = 6;
inline int block::_internal_transactions_size() const {
  return transactions_.size();
}
inline int block::transactions_size() const {
  return _internal_transactions_size();
}
inline void block::clear_transactions() {
  transactions_.Clear();
}
inline ::koinos::protocol::transaction* block::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.block.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction >*
block::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.block.transactions)
  return &transactions_;
}
inline const ::koinos::protocol::transaction& block::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::koinos::protocol::transaction& block::transactions(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.block.transactions)
  return _internal_transactions(index);
}
inline ::koinos::protocol::transaction* block::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::koinos::protocol::transaction* block::add_transactions() {
  // @@protoc_insertion_point(field_add:koinos.protocol.block.transactions)
  return _internal_add_transactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::transaction >&
block::transactions() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.block.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// block_receipt

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fprotocol_2fprotocol_2eproto
