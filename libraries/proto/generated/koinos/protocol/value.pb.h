// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/protocol/value.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fprotocol_2fvalue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fprotocol_2fvalue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fvalue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fprotocol_2fvalue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fprotocol_2fvalue_2eproto;
namespace koinos {
namespace protocol {
class bool_value;
struct bool_valueDefaultTypeInternal;
extern bool_valueDefaultTypeInternal _bool_value_default_instance_;
class bytes_value;
struct bytes_valueDefaultTypeInternal;
extern bytes_valueDefaultTypeInternal _bytes_value_default_instance_;
class double_value;
struct double_valueDefaultTypeInternal;
extern double_valueDefaultTypeInternal _double_value_default_instance_;
class enum_value;
struct enum_valueDefaultTypeInternal;
extern enum_valueDefaultTypeInternal _enum_value_default_instance_;
class fixed32_value;
struct fixed32_valueDefaultTypeInternal;
extern fixed32_valueDefaultTypeInternal _fixed32_value_default_instance_;
class fixed64_value;
struct fixed64_valueDefaultTypeInternal;
extern fixed64_valueDefaultTypeInternal _fixed64_value_default_instance_;
class float_value;
struct float_valueDefaultTypeInternal;
extern float_valueDefaultTypeInternal _float_value_default_instance_;
class int32_value;
struct int32_valueDefaultTypeInternal;
extern int32_valueDefaultTypeInternal _int32_value_default_instance_;
class int64_value;
struct int64_valueDefaultTypeInternal;
extern int64_valueDefaultTypeInternal _int64_value_default_instance_;
class list_value;
struct list_valueDefaultTypeInternal;
extern list_valueDefaultTypeInternal _list_value_default_instance_;
class sfixed32_value;
struct sfixed32_valueDefaultTypeInternal;
extern sfixed32_valueDefaultTypeInternal _sfixed32_value_default_instance_;
class sfixed64_value;
struct sfixed64_valueDefaultTypeInternal;
extern sfixed64_valueDefaultTypeInternal _sfixed64_value_default_instance_;
class sint32_value;
struct sint32_valueDefaultTypeInternal;
extern sint32_valueDefaultTypeInternal _sint32_value_default_instance_;
class sint64_value;
struct sint64_valueDefaultTypeInternal;
extern sint64_valueDefaultTypeInternal _sint64_value_default_instance_;
class string_value;
struct string_valueDefaultTypeInternal;
extern string_valueDefaultTypeInternal _string_value_default_instance_;
class uint32_value;
struct uint32_valueDefaultTypeInternal;
extern uint32_valueDefaultTypeInternal _uint32_value_default_instance_;
class uint64_value;
struct uint64_valueDefaultTypeInternal;
extern uint64_valueDefaultTypeInternal _uint64_value_default_instance_;
class value;
struct valueDefaultTypeInternal;
extern valueDefaultTypeInternal _value_default_instance_;
}  // namespace protocol
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::protocol::bool_value* Arena::CreateMaybeMessage<::koinos::protocol::bool_value>(Arena*);
template<> ::koinos::protocol::bytes_value* Arena::CreateMaybeMessage<::koinos::protocol::bytes_value>(Arena*);
template<> ::koinos::protocol::double_value* Arena::CreateMaybeMessage<::koinos::protocol::double_value>(Arena*);
template<> ::koinos::protocol::enum_value* Arena::CreateMaybeMessage<::koinos::protocol::enum_value>(Arena*);
template<> ::koinos::protocol::fixed32_value* Arena::CreateMaybeMessage<::koinos::protocol::fixed32_value>(Arena*);
template<> ::koinos::protocol::fixed64_value* Arena::CreateMaybeMessage<::koinos::protocol::fixed64_value>(Arena*);
template<> ::koinos::protocol::float_value* Arena::CreateMaybeMessage<::koinos::protocol::float_value>(Arena*);
template<> ::koinos::protocol::int32_value* Arena::CreateMaybeMessage<::koinos::protocol::int32_value>(Arena*);
template<> ::koinos::protocol::int64_value* Arena::CreateMaybeMessage<::koinos::protocol::int64_value>(Arena*);
template<> ::koinos::protocol::list_value* Arena::CreateMaybeMessage<::koinos::protocol::list_value>(Arena*);
template<> ::koinos::protocol::sfixed32_value* Arena::CreateMaybeMessage<::koinos::protocol::sfixed32_value>(Arena*);
template<> ::koinos::protocol::sfixed64_value* Arena::CreateMaybeMessage<::koinos::protocol::sfixed64_value>(Arena*);
template<> ::koinos::protocol::sint32_value* Arena::CreateMaybeMessage<::koinos::protocol::sint32_value>(Arena*);
template<> ::koinos::protocol::sint64_value* Arena::CreateMaybeMessage<::koinos::protocol::sint64_value>(Arena*);
template<> ::koinos::protocol::string_value* Arena::CreateMaybeMessage<::koinos::protocol::string_value>(Arena*);
template<> ::koinos::protocol::uint32_value* Arena::CreateMaybeMessage<::koinos::protocol::uint32_value>(Arena*);
template<> ::koinos::protocol::uint64_value* Arena::CreateMaybeMessage<::koinos::protocol::uint64_value>(Arena*);
template<> ::koinos::protocol::value* Arena::CreateMaybeMessage<::koinos::protocol::value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace protocol {

// ===================================================================

class double_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.double_value) */ {
 public:
  inline double_value() : double_value(nullptr) {}
  ~double_value() override;
  explicit constexpr double_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  double_value(const double_value& from);
  double_value(double_value&& from) noexcept
    : double_value() {
    *this = ::std::move(from);
  }

  inline double_value& operator=(const double_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline double_value& operator=(double_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const double_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const double_value* internal_default_instance() {
    return reinterpret_cast<const double_value*>(
               &_double_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(double_value& a, double_value& b) {
    a.Swap(&b);
  }
  inline void Swap(double_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(double_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline double_value* New() const final {
    return new double_value();
  }

  double_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<double_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const double_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const double_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(double_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.double_value";
  }
  protected:
  explicit double_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.double_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class float_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.float_value) */ {
 public:
  inline float_value() : float_value(nullptr) {}
  ~float_value() override;
  explicit constexpr float_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  float_value(const float_value& from);
  float_value(float_value&& from) noexcept
    : float_value() {
    *this = ::std::move(from);
  }

  inline float_value& operator=(const float_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline float_value& operator=(float_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const float_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const float_value* internal_default_instance() {
    return reinterpret_cast<const float_value*>(
               &_float_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(float_value& a, float_value& b) {
    a.Swap(&b);
  }
  inline void Swap(float_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(float_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline float_value* New() const final {
    return new float_value();
  }

  float_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<float_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const float_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const float_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(float_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.float_value";
  }
  protected:
  explicit float_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // float value = 1;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.float_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class int32_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.int32_value) */ {
 public:
  inline int32_value() : int32_value(nullptr) {}
  ~int32_value() override;
  explicit constexpr int32_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  int32_value(const int32_value& from);
  int32_value(int32_value&& from) noexcept
    : int32_value() {
    *this = ::std::move(from);
  }

  inline int32_value& operator=(const int32_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline int32_value& operator=(int32_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const int32_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const int32_value* internal_default_instance() {
    return reinterpret_cast<const int32_value*>(
               &_int32_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(int32_value& a, int32_value& b) {
    a.Swap(&b);
  }
  inline void Swap(int32_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(int32_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline int32_value* New() const final {
    return new int32_value();
  }

  int32_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<int32_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const int32_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const int32_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(int32_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.int32_value";
  }
  protected:
  explicit int32_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.int32_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class int64_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.int64_value) */ {
 public:
  inline int64_value() : int64_value(nullptr) {}
  ~int64_value() override;
  explicit constexpr int64_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  int64_value(const int64_value& from);
  int64_value(int64_value&& from) noexcept
    : int64_value() {
    *this = ::std::move(from);
  }

  inline int64_value& operator=(const int64_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline int64_value& operator=(int64_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const int64_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const int64_value* internal_default_instance() {
    return reinterpret_cast<const int64_value*>(
               &_int64_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(int64_value& a, int64_value& b) {
    a.Swap(&b);
  }
  inline void Swap(int64_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(int64_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline int64_value* New() const final {
    return new int64_value();
  }

  int64_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<int64_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const int64_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const int64_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(int64_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.int64_value";
  }
  protected:
  explicit int64_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.int64_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class uint32_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.uint32_value) */ {
 public:
  inline uint32_value() : uint32_value(nullptr) {}
  ~uint32_value() override;
  explicit constexpr uint32_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  uint32_value(const uint32_value& from);
  uint32_value(uint32_value&& from) noexcept
    : uint32_value() {
    *this = ::std::move(from);
  }

  inline uint32_value& operator=(const uint32_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline uint32_value& operator=(uint32_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const uint32_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const uint32_value* internal_default_instance() {
    return reinterpret_cast<const uint32_value*>(
               &_uint32_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(uint32_value& a, uint32_value& b) {
    a.Swap(&b);
  }
  inline void Swap(uint32_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(uint32_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline uint32_value* New() const final {
    return new uint32_value();
  }

  uint32_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<uint32_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const uint32_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const uint32_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(uint32_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.uint32_value";
  }
  protected:
  explicit uint32_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.uint32_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class uint64_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.uint64_value) */ {
 public:
  inline uint64_value() : uint64_value(nullptr) {}
  ~uint64_value() override;
  explicit constexpr uint64_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  uint64_value(const uint64_value& from);
  uint64_value(uint64_value&& from) noexcept
    : uint64_value() {
    *this = ::std::move(from);
  }

  inline uint64_value& operator=(const uint64_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline uint64_value& operator=(uint64_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const uint64_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const uint64_value* internal_default_instance() {
    return reinterpret_cast<const uint64_value*>(
               &_uint64_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(uint64_value& a, uint64_value& b) {
    a.Swap(&b);
  }
  inline void Swap(uint64_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(uint64_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline uint64_value* New() const final {
    return new uint64_value();
  }

  uint64_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<uint64_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const uint64_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const uint64_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(uint64_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.uint64_value";
  }
  protected:
  explicit uint64_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.uint64_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class sint32_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.sint32_value) */ {
 public:
  inline sint32_value() : sint32_value(nullptr) {}
  ~sint32_value() override;
  explicit constexpr sint32_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sint32_value(const sint32_value& from);
  sint32_value(sint32_value&& from) noexcept
    : sint32_value() {
    *this = ::std::move(from);
  }

  inline sint32_value& operator=(const sint32_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline sint32_value& operator=(sint32_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sint32_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const sint32_value* internal_default_instance() {
    return reinterpret_cast<const sint32_value*>(
               &_sint32_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(sint32_value& a, sint32_value& b) {
    a.Swap(&b);
  }
  inline void Swap(sint32_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sint32_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sint32_value* New() const final {
    return new sint32_value();
  }

  sint32_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sint32_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sint32_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const sint32_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sint32_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.sint32_value";
  }
  protected:
  explicit sint32_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // sint32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.sint32_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class sint64_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.sint64_value) */ {
 public:
  inline sint64_value() : sint64_value(nullptr) {}
  ~sint64_value() override;
  explicit constexpr sint64_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sint64_value(const sint64_value& from);
  sint64_value(sint64_value&& from) noexcept
    : sint64_value() {
    *this = ::std::move(from);
  }

  inline sint64_value& operator=(const sint64_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline sint64_value& operator=(sint64_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sint64_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const sint64_value* internal_default_instance() {
    return reinterpret_cast<const sint64_value*>(
               &_sint64_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(sint64_value& a, sint64_value& b) {
    a.Swap(&b);
  }
  inline void Swap(sint64_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sint64_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sint64_value* New() const final {
    return new sint64_value();
  }

  sint64_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sint64_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sint64_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const sint64_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sint64_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.sint64_value";
  }
  protected:
  explicit sint64_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // sint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.sint64_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class fixed32_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.fixed32_value) */ {
 public:
  inline fixed32_value() : fixed32_value(nullptr) {}
  ~fixed32_value() override;
  explicit constexpr fixed32_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  fixed32_value(const fixed32_value& from);
  fixed32_value(fixed32_value&& from) noexcept
    : fixed32_value() {
    *this = ::std::move(from);
  }

  inline fixed32_value& operator=(const fixed32_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline fixed32_value& operator=(fixed32_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const fixed32_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const fixed32_value* internal_default_instance() {
    return reinterpret_cast<const fixed32_value*>(
               &_fixed32_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(fixed32_value& a, fixed32_value& b) {
    a.Swap(&b);
  }
  inline void Swap(fixed32_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fixed32_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fixed32_value* New() const final {
    return new fixed32_value();
  }

  fixed32_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fixed32_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const fixed32_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const fixed32_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fixed32_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.fixed32_value";
  }
  protected:
  explicit fixed32_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // fixed32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.fixed32_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class fixed64_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.fixed64_value) */ {
 public:
  inline fixed64_value() : fixed64_value(nullptr) {}
  ~fixed64_value() override;
  explicit constexpr fixed64_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  fixed64_value(const fixed64_value& from);
  fixed64_value(fixed64_value&& from) noexcept
    : fixed64_value() {
    *this = ::std::move(from);
  }

  inline fixed64_value& operator=(const fixed64_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline fixed64_value& operator=(fixed64_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const fixed64_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const fixed64_value* internal_default_instance() {
    return reinterpret_cast<const fixed64_value*>(
               &_fixed64_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(fixed64_value& a, fixed64_value& b) {
    a.Swap(&b);
  }
  inline void Swap(fixed64_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fixed64_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fixed64_value* New() const final {
    return new fixed64_value();
  }

  fixed64_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fixed64_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const fixed64_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const fixed64_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fixed64_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.fixed64_value";
  }
  protected:
  explicit fixed64_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // fixed64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.fixed64_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class sfixed32_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.sfixed32_value) */ {
 public:
  inline sfixed32_value() : sfixed32_value(nullptr) {}
  ~sfixed32_value() override;
  explicit constexpr sfixed32_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sfixed32_value(const sfixed32_value& from);
  sfixed32_value(sfixed32_value&& from) noexcept
    : sfixed32_value() {
    *this = ::std::move(from);
  }

  inline sfixed32_value& operator=(const sfixed32_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline sfixed32_value& operator=(sfixed32_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sfixed32_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const sfixed32_value* internal_default_instance() {
    return reinterpret_cast<const sfixed32_value*>(
               &_sfixed32_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(sfixed32_value& a, sfixed32_value& b) {
    a.Swap(&b);
  }
  inline void Swap(sfixed32_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sfixed32_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sfixed32_value* New() const final {
    return new sfixed32_value();
  }

  sfixed32_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sfixed32_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sfixed32_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const sfixed32_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sfixed32_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.sfixed32_value";
  }
  protected:
  explicit sfixed32_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // sfixed32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.sfixed32_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class sfixed64_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.sfixed64_value) */ {
 public:
  inline sfixed64_value() : sfixed64_value(nullptr) {}
  ~sfixed64_value() override;
  explicit constexpr sfixed64_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sfixed64_value(const sfixed64_value& from);
  sfixed64_value(sfixed64_value&& from) noexcept
    : sfixed64_value() {
    *this = ::std::move(from);
  }

  inline sfixed64_value& operator=(const sfixed64_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline sfixed64_value& operator=(sfixed64_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sfixed64_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const sfixed64_value* internal_default_instance() {
    return reinterpret_cast<const sfixed64_value*>(
               &_sfixed64_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(sfixed64_value& a, sfixed64_value& b) {
    a.Swap(&b);
  }
  inline void Swap(sfixed64_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sfixed64_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sfixed64_value* New() const final {
    return new sfixed64_value();
  }

  sfixed64_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sfixed64_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sfixed64_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const sfixed64_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sfixed64_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.sfixed64_value";
  }
  protected:
  explicit sfixed64_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // sfixed64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.sfixed64_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class bool_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.bool_value) */ {
 public:
  inline bool_value() : bool_value(nullptr) {}
  ~bool_value() override;
  explicit constexpr bool_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  bool_value(const bool_value& from);
  bool_value(bool_value&& from) noexcept
    : bool_value() {
    *this = ::std::move(from);
  }

  inline bool_value& operator=(const bool_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline bool_value& operator=(bool_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const bool_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const bool_value* internal_default_instance() {
    return reinterpret_cast<const bool_value*>(
               &_bool_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(bool_value& a, bool_value& b) {
    a.Swap(&b);
  }
  inline void Swap(bool_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bool_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bool_value* New() const final {
    return new bool_value();
  }

  bool_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bool_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const bool_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const bool_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bool_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.bool_value";
  }
  protected:
  explicit bool_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.bool_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class string_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.string_value) */ {
 public:
  inline string_value() : string_value(nullptr) {}
  ~string_value() override;
  explicit constexpr string_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  string_value(const string_value& from);
  string_value(string_value&& from) noexcept
    : string_value() {
    *this = ::std::move(from);
  }

  inline string_value& operator=(const string_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline string_value& operator=(string_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const string_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const string_value* internal_default_instance() {
    return reinterpret_cast<const string_value*>(
               &_string_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(string_value& a, string_value& b) {
    a.Swap(&b);
  }
  inline void Swap(string_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(string_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline string_value* New() const final {
    return new string_value();
  }

  string_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<string_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const string_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const string_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(string_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.string_value";
  }
  protected:
  explicit string_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.string_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class bytes_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.bytes_value) */ {
 public:
  inline bytes_value() : bytes_value(nullptr) {}
  ~bytes_value() override;
  explicit constexpr bytes_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  bytes_value(const bytes_value& from);
  bytes_value(bytes_value&& from) noexcept
    : bytes_value() {
    *this = ::std::move(from);
  }

  inline bytes_value& operator=(const bytes_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline bytes_value& operator=(bytes_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const bytes_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const bytes_value* internal_default_instance() {
    return reinterpret_cast<const bytes_value*>(
               &_bytes_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(bytes_value& a, bytes_value& b) {
    a.Swap(&b);
  }
  inline void Swap(bytes_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bytes_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bytes_value* New() const final {
    return new bytes_value();
  }

  bytes_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bytes_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const bytes_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const bytes_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bytes_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.bytes_value";
  }
  protected:
  explicit bytes_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.bytes_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class enum_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.enum_value) */ {
 public:
  inline enum_value() : enum_value(nullptr) {}
  ~enum_value() override;
  explicit constexpr enum_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  enum_value(const enum_value& from);
  enum_value(enum_value&& from) noexcept
    : enum_value() {
    *this = ::std::move(from);
  }

  inline enum_value& operator=(const enum_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline enum_value& operator=(enum_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const enum_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const enum_value* internal_default_instance() {
    return reinterpret_cast<const enum_value*>(
               &_enum_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(enum_value& a, enum_value& b) {
    a.Swap(&b);
  }
  inline void Swap(enum_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(enum_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline enum_value* New() const final {
    return new enum_value();
  }

  enum_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<enum_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const enum_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const enum_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(enum_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.enum_value";
  }
  protected:
  explicit enum_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNumberFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 number = 2;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.protocol.enum_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.value) */ {
 public:
  inline value() : value(nullptr) {}
  ~value() override;
  explicit constexpr value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  value(const value& from);
  value(value&& from) noexcept
    : value() {
    *this = ::std::move(from);
  }

  inline value& operator=(const value& from) {
    CopyFrom(from);
    return *this;
  }
  inline value& operator=(value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const value& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kAnyValue = 1,
    kDoubleValue = 2,
    kFloatValue = 3,
    kInt32Value = 4,
    kInt64Value = 5,
    kUint32Value = 6,
    kUint64Value = 7,
    kSint32Value = 8,
    kSint64Value = 9,
    kFixed32Value = 10,
    kFixed64Value = 11,
    kSfixed32Value = 12,
    kSfixed64Value = 13,
    kBoolValue = 14,
    kStringValue = 15,
    kBytesValue = 16,
    KIND_NOT_SET = 0,
  };

  static inline const value* internal_default_instance() {
    return reinterpret_cast<const value*>(
               &_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(value& a, value& b) {
    a.Swap(&b);
  }
  inline void Swap(value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline value* New() const final {
    return new value();
  }

  value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.value";
  }
  protected:
  explicit value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyValueFieldNumber = 1,
    kDoubleValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kInt32ValueFieldNumber = 4,
    kInt64ValueFieldNumber = 5,
    kUint32ValueFieldNumber = 6,
    kUint64ValueFieldNumber = 7,
    kSint32ValueFieldNumber = 8,
    kSint64ValueFieldNumber = 9,
    kFixed32ValueFieldNumber = 10,
    kFixed64ValueFieldNumber = 11,
    kSfixed32ValueFieldNumber = 12,
    kSfixed64ValueFieldNumber = 13,
    kBoolValueFieldNumber = 14,
    kStringValueFieldNumber = 15,
    kBytesValueFieldNumber = 16,
  };
  // .google.protobuf.Any any_value = 1;
  bool has_any_value() const;
  private:
  bool _internal_has_any_value() const;
  public:
  void clear_any_value();
  const PROTOBUF_NAMESPACE_ID::Any& any_value() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_any_value();
  PROTOBUF_NAMESPACE_ID::Any* mutable_any_value();
  void set_allocated_any_value(PROTOBUF_NAMESPACE_ID::Any* any_value);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_any_value() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_any_value();
  public:
  void unsafe_arena_set_allocated_any_value(
      PROTOBUF_NAMESPACE_ID::Any* any_value);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_any_value();

  // double double_value = 2;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // float float_value = 3;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // int32 int32_value = 4;
  bool has_int32_value() const;
  private:
  bool _internal_has_int32_value() const;
  public:
  void clear_int32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int32_value() const;
  void set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_value() const;
  void _internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 int64_value = 5;
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value() const;
  void set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_value() const;
  void _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 uint32_value = 6;
  bool has_uint32_value() const;
  private:
  bool _internal_has_uint32_value() const;
  public:
  void clear_uint32_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value() const;
  void set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_value() const;
  void _internal_set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 uint64_value = 7;
  bool has_uint64_value() const;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value() const;
  void set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_value() const;
  void _internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 sint32_value = 8;
  bool has_sint32_value() const;
  private:
  bool _internal_has_sint32_value() const;
  public:
  void clear_sint32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 sint32_value() const;
  void set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sint32_value() const;
  void _internal_set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint64 sint64_value = 9;
  bool has_sint64_value() const;
  private:
  bool _internal_has_sint64_value() const;
  public:
  void clear_sint64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_value() const;
  void set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64_value() const;
  void _internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // fixed32 fixed32_value = 10;
  bool has_fixed32_value() const;
  private:
  bool _internal_has_fixed32_value() const;
  public:
  void clear_fixed32_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_value() const;
  void set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed32_value() const;
  void _internal_set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed64 fixed64_value = 11;
  bool has_fixed64_value() const;
  private:
  bool _internal_has_fixed64_value() const;
  public:
  void clear_fixed64_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_value() const;
  void set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fixed64_value() const;
  void _internal_set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sfixed32 sfixed32_value = 12;
  bool has_sfixed32_value() const;
  private:
  bool _internal_has_sfixed32_value() const;
  public:
  void clear_sfixed32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_value() const;
  void set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sfixed32_value() const;
  void _internal_set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sfixed64 sfixed64_value = 13;
  bool has_sfixed64_value() const;
  private:
  bool _internal_has_sfixed64_value() const;
  public:
  void clear_sfixed64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_value() const;
  void set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sfixed64_value() const;
  void _internal_set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bool_value = 14;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // string string_value = 15;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bytes bytes_value = 16;
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:koinos.protocol.value)
 private:
  class _Internal;
  void set_has_any_value();
  void set_has_double_value();
  void set_has_float_value();
  void set_has_int32_value();
  void set_has_int64_value();
  void set_has_uint32_value();
  void set_has_uint64_value();
  void set_has_sint32_value();
  void set_has_sint64_value();
  void set_has_fixed32_value();
  void set_has_fixed64_value();
  void set_has_sfixed32_value();
  void set_has_sfixed64_value();
  void set_has_bool_value();
  void set_has_string_value();
  void set_has_bytes_value();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    constexpr KindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    PROTOBUF_NAMESPACE_ID::Any* any_value_;
    double double_value_;
    float float_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 int32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 sint32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 sint64_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_value_;
    bool bool_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class list_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.protocol.list_value) */ {
 public:
  inline list_value() : list_value(nullptr) {}
  ~list_value() override;
  explicit constexpr list_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  list_value(const list_value& from);
  list_value(list_value&& from) noexcept
    : list_value() {
    *this = ::std::move(from);
  }

  inline list_value& operator=(const list_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline list_value& operator=(list_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const list_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const list_value* internal_default_instance() {
    return reinterpret_cast<const list_value*>(
               &_list_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(list_value& a, list_value& b) {
    a.Swap(&b);
  }
  inline void Swap(list_value* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(list_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline list_value* New() const final {
    return new list_value();
  }

  list_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<list_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const list_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const list_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(list_value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.protocol.list_value";
  }
  protected:
  explicit list_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .koinos.protocol.value value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::koinos::protocol::value* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::value >*
      mutable_value();
  private:
  const ::koinos::protocol::value& _internal_value(int index) const;
  ::koinos::protocol::value* _internal_add_value();
  public:
  const ::koinos::protocol::value& value(int index) const;
  ::koinos::protocol::value* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::value >&
      value() const;

  // @@protoc_insertion_point(class_scope:koinos.protocol.list_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::value > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fprotocol_2fvalue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// double_value

// double value = 1;
inline void double_value::clear_value() {
  value_ = 0;
}
inline double double_value::_internal_value() const {
  return value_;
}
inline double double_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.double_value.value)
  return _internal_value();
}
inline void double_value::_internal_set_value(double value) {
  
  value_ = value;
}
inline void double_value::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.double_value.value)
}

// -------------------------------------------------------------------

// float_value

// float value = 1;
inline void float_value::clear_value() {
  value_ = 0;
}
inline float float_value::_internal_value() const {
  return value_;
}
inline float float_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.float_value.value)
  return _internal_value();
}
inline void float_value::_internal_set_value(float value) {
  
  value_ = value;
}
inline void float_value::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.float_value.value)
}

// -------------------------------------------------------------------

// int32_value

// int32 value = 1;
inline void int32_value::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 int32_value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 int32_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.int32_value.value)
  return _internal_value();
}
inline void int32_value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void int32_value::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.int32_value.value)
}

// -------------------------------------------------------------------

// int64_value

// int64 value = 1;
inline void int64_value::clear_value() {
  value_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 int64_value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 int64_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.int64_value.value)
  return _internal_value();
}
inline void int64_value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void int64_value::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.int64_value.value)
}

// -------------------------------------------------------------------

// uint32_value

// uint32 value = 1;
inline void uint32_value::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.uint32_value.value)
  return _internal_value();
}
inline void uint32_value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void uint32_value::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.uint32_value.value)
}

// -------------------------------------------------------------------

// uint64_value

// uint64 value = 1;
inline void uint64_value::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.uint64_value.value)
  return _internal_value();
}
inline void uint64_value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void uint64_value::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.uint64_value.value)
}

// -------------------------------------------------------------------

// sint32_value

// sint32 value = 1;
inline void sint32_value::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sint32_value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sint32_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.sint32_value.value)
  return _internal_value();
}
inline void sint32_value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void sint32_value::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.sint32_value.value)
}

// -------------------------------------------------------------------

// sint64_value

// sint64 value = 1;
inline void sint64_value::clear_value() {
  value_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sint64_value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sint64_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.sint64_value.value)
  return _internal_value();
}
inline void sint64_value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void sint64_value::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.sint64_value.value)
}

// -------------------------------------------------------------------

// fixed32_value

// fixed32 value = 1;
inline void fixed32_value::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.fixed32_value.value)
  return _internal_value();
}
inline void fixed32_value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void fixed32_value::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.fixed32_value.value)
}

// -------------------------------------------------------------------

// fixed64_value

// fixed64 value = 1;
inline void fixed64_value::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.fixed64_value.value)
  return _internal_value();
}
inline void fixed64_value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void fixed64_value::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.fixed64_value.value)
}

// -------------------------------------------------------------------

// sfixed32_value

// sfixed32 value = 1;
inline void sfixed32_value::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.sfixed32_value.value)
  return _internal_value();
}
inline void sfixed32_value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void sfixed32_value::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.sfixed32_value.value)
}

// -------------------------------------------------------------------

// sfixed64_value

// sfixed64 value = 1;
inline void sfixed64_value::clear_value() {
  value_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_value::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.sfixed64_value.value)
  return _internal_value();
}
inline void sfixed64_value::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void sfixed64_value::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.sfixed64_value.value)
}

// -------------------------------------------------------------------

// bool_value

// bool value = 1;
inline void bool_value::clear_value() {
  value_ = false;
}
inline bool bool_value::_internal_value() const {
  return value_;
}
inline bool bool_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.bool_value.value)
  return _internal_value();
}
inline void bool_value::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void bool_value::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.bool_value.value)
}

// -------------------------------------------------------------------

// string_value

// string value = 1;
inline void string_value::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& string_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.string_value.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void string_value::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.string_value.value)
}
inline std::string* string_value::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.string_value.value)
  return _s;
}
inline const std::string& string_value::_internal_value() const {
  return value_.Get();
}
inline void string_value::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* string_value::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* string_value::release_value() {
  // @@protoc_insertion_point(field_release:koinos.protocol.string_value.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void string_value::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.string_value.value)
}

// -------------------------------------------------------------------

// bytes_value

// bytes value = 1;
inline void bytes_value::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& bytes_value::value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.bytes_value.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void bytes_value::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.bytes_value.value)
}
inline std::string* bytes_value::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.bytes_value.value)
  return _s;
}
inline const std::string& bytes_value::_internal_value() const {
  return value_.Get();
}
inline void bytes_value::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* bytes_value::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* bytes_value::release_value() {
  // @@protoc_insertion_point(field_release:koinos.protocol.bytes_value.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void bytes_value::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.bytes_value.value)
}

// -------------------------------------------------------------------

// enum_value

// string name = 1;
inline void enum_value::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& enum_value::name() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.enum_value.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void enum_value::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.enum_value.name)
}
inline std::string* enum_value::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.enum_value.name)
  return _s;
}
inline const std::string& enum_value::_internal_name() const {
  return name_.Get();
}
inline void enum_value::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* enum_value::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* enum_value::release_name() {
  // @@protoc_insertion_point(field_release:koinos.protocol.enum_value.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void enum_value::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.enum_value.name)
}

// int32 number = 2;
inline void enum_value::clear_number() {
  number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 enum_value::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 enum_value::number() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.enum_value.number)
  return _internal_number();
}
inline void enum_value::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_ = value;
}
inline void enum_value::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.enum_value.number)
}

// -------------------------------------------------------------------

// value

// .google.protobuf.Any any_value = 1;
inline bool value::_internal_has_any_value() const {
  return kind_case() == kAnyValue;
}
inline bool value::has_any_value() const {
  return _internal_has_any_value();
}
inline void value::set_has_any_value() {
  _oneof_case_[0] = kAnyValue;
}
inline PROTOBUF_NAMESPACE_ID::Any* value::release_any_value() {
  // @@protoc_insertion_point(field_release:koinos.protocol.value.any_value)
  if (_internal_has_any_value()) {
    clear_has_kind();
      PROTOBUF_NAMESPACE_ID::Any* temp = kind_.any_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.any_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Any& value::_internal_any_value() const {
  return _internal_has_any_value()
      ? *kind_.any_value_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Any&>(PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& value::any_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.any_value)
  return _internal_any_value();
}
inline PROTOBUF_NAMESPACE_ID::Any* value::unsafe_arena_release_any_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.protocol.value.any_value)
  if (_internal_has_any_value()) {
    clear_has_kind();
    PROTOBUF_NAMESPACE_ID::Any* temp = kind_.any_value_;
    kind_.any_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void value::unsafe_arena_set_allocated_any_value(PROTOBUF_NAMESPACE_ID::Any* any_value) {
  clear_kind();
  if (any_value) {
    set_has_any_value();
    kind_.any_value_ = any_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.protocol.value.any_value)
}
inline PROTOBUF_NAMESPACE_ID::Any* value::_internal_mutable_any_value() {
  if (!_internal_has_any_value()) {
    clear_kind();
    set_has_any_value();
    kind_.any_value_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Any >(GetArenaForAllocation());
  }
  return kind_.any_value_;
}
inline PROTOBUF_NAMESPACE_ID::Any* value::mutable_any_value() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_any_value();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.value.any_value)
  return _msg;
}

// double double_value = 2;
inline bool value::_internal_has_double_value() const {
  return kind_case() == kDoubleValue;
}
inline bool value::has_double_value() const {
  return _internal_has_double_value();
}
inline void value::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void value::clear_double_value() {
  if (_internal_has_double_value()) {
    kind_.double_value_ = 0;
    clear_has_kind();
  }
}
inline double value::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return kind_.double_value_;
  }
  return 0;
}
inline void value::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_kind();
    set_has_double_value();
  }
  kind_.double_value_ = value;
}
inline double value::double_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.double_value)
  return _internal_double_value();
}
inline void value::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.value.double_value)
}

// float float_value = 3;
inline bool value::_internal_has_float_value() const {
  return kind_case() == kFloatValue;
}
inline bool value::has_float_value() const {
  return _internal_has_float_value();
}
inline void value::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void value::clear_float_value() {
  if (_internal_has_float_value()) {
    kind_.float_value_ = 0;
    clear_has_kind();
  }
}
inline float value::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return kind_.float_value_;
  }
  return 0;
}
inline void value::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_kind();
    set_has_float_value();
  }
  kind_.float_value_ = value;
}
inline float value::float_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.float_value)
  return _internal_float_value();
}
inline void value::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.value.float_value)
}

// int32 int32_value = 4;
inline bool value::_internal_has_int32_value() const {
  return kind_case() == kInt32Value;
}
inline bool value::has_int32_value() const {
  return _internal_has_int32_value();
}
inline void value::set_has_int32_value() {
  _oneof_case_[0] = kInt32Value;
}
inline void value::clear_int32_value() {
  if (_internal_has_int32_value()) {
    kind_.int32_value_ = 0;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 value::_internal_int32_value() const {
  if (_internal_has_int32_value()) {
    return kind_.int32_value_;
  }
  return 0;
}
inline void value::_internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int32_value()) {
    clear_kind();
    set_has_int32_value();
  }
  kind_.int32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 value::int32_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.int32_value)
  return _internal_int32_value();
}
inline void value::set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int32_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.value.int32_value)
}

// int64 int64_value = 5;
inline bool value::_internal_has_int64_value() const {
  return kind_case() == kInt64Value;
}
inline bool value::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void value::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void value::clear_int64_value() {
  if (_internal_has_int64_value()) {
    kind_.int64_value_ = int64_t{0};
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 value::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return kind_.int64_value_;
  }
  return int64_t{0};
}
inline void value::_internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int64_value()) {
    clear_kind();
    set_has_int64_value();
  }
  kind_.int64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 value::int64_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.int64_value)
  return _internal_int64_value();
}
inline void value::set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.value.int64_value)
}

// uint32 uint32_value = 6;
inline bool value::_internal_has_uint32_value() const {
  return kind_case() == kUint32Value;
}
inline bool value::has_uint32_value() const {
  return _internal_has_uint32_value();
}
inline void value::set_has_uint32_value() {
  _oneof_case_[0] = kUint32Value;
}
inline void value::clear_uint32_value() {
  if (_internal_has_uint32_value()) {
    kind_.uint32_value_ = 0u;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 value::_internal_uint32_value() const {
  if (_internal_has_uint32_value()) {
    return kind_.uint32_value_;
  }
  return 0u;
}
inline void value::_internal_set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_uint32_value()) {
    clear_kind();
    set_has_uint32_value();
  }
  kind_.uint32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 value::uint32_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.uint32_value)
  return _internal_uint32_value();
}
inline void value::set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.value.uint32_value)
}

// uint64 uint64_value = 7;
inline bool value::_internal_has_uint64_value() const {
  return kind_case() == kUint64Value;
}
inline bool value::has_uint64_value() const {
  return _internal_has_uint64_value();
}
inline void value::set_has_uint64_value() {
  _oneof_case_[0] = kUint64Value;
}
inline void value::clear_uint64_value() {
  if (_internal_has_uint64_value()) {
    kind_.uint64_value_ = uint64_t{0u};
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 value::_internal_uint64_value() const {
  if (_internal_has_uint64_value()) {
    return kind_.uint64_value_;
  }
  return uint64_t{0u};
}
inline void value::_internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_uint64_value()) {
    clear_kind();
    set_has_uint64_value();
  }
  kind_.uint64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 value::uint64_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.uint64_value)
  return _internal_uint64_value();
}
inline void value::set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.value.uint64_value)
}

// sint32 sint32_value = 8;
inline bool value::_internal_has_sint32_value() const {
  return kind_case() == kSint32Value;
}
inline bool value::has_sint32_value() const {
  return _internal_has_sint32_value();
}
inline void value::set_has_sint32_value() {
  _oneof_case_[0] = kSint32Value;
}
inline void value::clear_sint32_value() {
  if (_internal_has_sint32_value()) {
    kind_.sint32_value_ = 0;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 value::_internal_sint32_value() const {
  if (_internal_has_sint32_value()) {
    return kind_.sint32_value_;
  }
  return 0;
}
inline void value::_internal_set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_sint32_value()) {
    clear_kind();
    set_has_sint32_value();
  }
  kind_.sint32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 value::sint32_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.sint32_value)
  return _internal_sint32_value();
}
inline void value::set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sint32_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.value.sint32_value)
}

// sint64 sint64_value = 9;
inline bool value::_internal_has_sint64_value() const {
  return kind_case() == kSint64Value;
}
inline bool value::has_sint64_value() const {
  return _internal_has_sint64_value();
}
inline void value::set_has_sint64_value() {
  _oneof_case_[0] = kSint64Value;
}
inline void value::clear_sint64_value() {
  if (_internal_has_sint64_value()) {
    kind_.sint64_value_ = int64_t{0};
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 value::_internal_sint64_value() const {
  if (_internal_has_sint64_value()) {
    return kind_.sint64_value_;
  }
  return int64_t{0};
}
inline void value::_internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sint64_value()) {
    clear_kind();
    set_has_sint64_value();
  }
  kind_.sint64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 value::sint64_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.sint64_value)
  return _internal_sint64_value();
}
inline void value::set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.value.sint64_value)
}

// fixed32 fixed32_value = 10;
inline bool value::_internal_has_fixed32_value() const {
  return kind_case() == kFixed32Value;
}
inline bool value::has_fixed32_value() const {
  return _internal_has_fixed32_value();
}
inline void value::set_has_fixed32_value() {
  _oneof_case_[0] = kFixed32Value;
}
inline void value::clear_fixed32_value() {
  if (_internal_has_fixed32_value()) {
    kind_.fixed32_value_ = 0u;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 value::_internal_fixed32_value() const {
  if (_internal_has_fixed32_value()) {
    return kind_.fixed32_value_;
  }
  return 0u;
}
inline void value::_internal_set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_fixed32_value()) {
    clear_kind();
    set_has_fixed32_value();
  }
  kind_.fixed32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 value::fixed32_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.fixed32_value)
  return _internal_fixed32_value();
}
inline void value::set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixed32_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.value.fixed32_value)
}

// fixed64 fixed64_value = 11;
inline bool value::_internal_has_fixed64_value() const {
  return kind_case() == kFixed64Value;
}
inline bool value::has_fixed64_value() const {
  return _internal_has_fixed64_value();
}
inline void value::set_has_fixed64_value() {
  _oneof_case_[0] = kFixed64Value;
}
inline void value::clear_fixed64_value() {
  if (_internal_has_fixed64_value()) {
    kind_.fixed64_value_ = uint64_t{0u};
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 value::_internal_fixed64_value() const {
  if (_internal_has_fixed64_value()) {
    return kind_.fixed64_value_;
  }
  return uint64_t{0u};
}
inline void value::_internal_set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_fixed64_value()) {
    clear_kind();
    set_has_fixed64_value();
  }
  kind_.fixed64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 value::fixed64_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.fixed64_value)
  return _internal_fixed64_value();
}
inline void value::set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fixed64_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.value.fixed64_value)
}

// sfixed32 sfixed32_value = 12;
inline bool value::_internal_has_sfixed32_value() const {
  return kind_case() == kSfixed32Value;
}
inline bool value::has_sfixed32_value() const {
  return _internal_has_sfixed32_value();
}
inline void value::set_has_sfixed32_value() {
  _oneof_case_[0] = kSfixed32Value;
}
inline void value::clear_sfixed32_value() {
  if (_internal_has_sfixed32_value()) {
    kind_.sfixed32_value_ = 0;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 value::_internal_sfixed32_value() const {
  if (_internal_has_sfixed32_value()) {
    return kind_.sfixed32_value_;
  }
  return 0;
}
inline void value::_internal_set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_sfixed32_value()) {
    clear_kind();
    set_has_sfixed32_value();
  }
  kind_.sfixed32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 value::sfixed32_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.sfixed32_value)
  return _internal_sfixed32_value();
}
inline void value::set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sfixed32_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.value.sfixed32_value)
}

// sfixed64 sfixed64_value = 13;
inline bool value::_internal_has_sfixed64_value() const {
  return kind_case() == kSfixed64Value;
}
inline bool value::has_sfixed64_value() const {
  return _internal_has_sfixed64_value();
}
inline void value::set_has_sfixed64_value() {
  _oneof_case_[0] = kSfixed64Value;
}
inline void value::clear_sfixed64_value() {
  if (_internal_has_sfixed64_value()) {
    kind_.sfixed64_value_ = int64_t{0};
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 value::_internal_sfixed64_value() const {
  if (_internal_has_sfixed64_value()) {
    return kind_.sfixed64_value_;
  }
  return int64_t{0};
}
inline void value::_internal_set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sfixed64_value()) {
    clear_kind();
    set_has_sfixed64_value();
  }
  kind_.sfixed64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 value::sfixed64_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.sfixed64_value)
  return _internal_sfixed64_value();
}
inline void value::set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sfixed64_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.value.sfixed64_value)
}

// bool bool_value = 14;
inline bool value::_internal_has_bool_value() const {
  return kind_case() == kBoolValue;
}
inline bool value::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void value::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void value::clear_bool_value() {
  if (_internal_has_bool_value()) {
    kind_.bool_value_ = false;
    clear_has_kind();
  }
}
inline bool value::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return kind_.bool_value_;
  }
  return false;
}
inline void value::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_kind();
    set_has_bool_value();
  }
  kind_.bool_value_ = value;
}
inline bool value::bool_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.bool_value)
  return _internal_bool_value();
}
inline void value::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:koinos.protocol.value.bool_value)
}

// string string_value = 15;
inline bool value::_internal_has_string_value() const {
  return kind_case() == kStringValue;
}
inline bool value::has_string_value() const {
  return _internal_has_string_value();
}
inline void value::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void value::clear_string_value() {
  if (_internal_has_string_value()) {
    kind_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_kind();
  }
}
inline const std::string& value::string_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void value::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.value.string_value)
}
inline std::string* value::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.value.string_value)
  return _s;
}
inline const std::string& value::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return kind_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void value::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* value::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return kind_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* value::release_string_value() {
  // @@protoc_insertion_point(field_release:koinos.protocol.value.string_value)
  if (_internal_has_string_value()) {
    clear_has_kind();
    return kind_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void value::set_allocated_string_value(std::string* string_value) {
  if (has_kind()) {
    clear_kind();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.value.string_value)
}

// bytes bytes_value = 16;
inline bool value::_internal_has_bytes_value() const {
  return kind_case() == kBytesValue;
}
inline bool value::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void value::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void value::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    kind_.bytes_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_kind();
  }
}
inline const std::string& value::bytes_value() const {
  // @@protoc_insertion_point(field_get:koinos.protocol.value.bytes_value)
  return _internal_bytes_value();
}
template <typename ArgT0, typename... ArgT>
inline void value::set_bytes_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_value()) {
    clear_kind();
    set_has_bytes_value();
    kind_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.bytes_value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.protocol.value.bytes_value)
}
inline std::string* value::mutable_bytes_value() {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:koinos.protocol.value.bytes_value)
  return _s;
}
inline const std::string& value::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return kind_.bytes_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void value::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_kind();
    set_has_bytes_value();
    kind_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.bytes_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* value::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_kind();
    set_has_bytes_value();
    kind_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return kind_.bytes_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* value::release_bytes_value() {
  // @@protoc_insertion_point(field_release:koinos.protocol.value.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_kind();
    return kind_.bytes_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void value::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_kind()) {
    clear_kind();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    kind_.bytes_value_.UnsafeSetDefault(bytes_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(bytes_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.protocol.value.bytes_value)
}

inline bool value::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void value::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline value::KindCase value::kind_case() const {
  return value::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// list_value

// repeated .koinos.protocol.value value = 1;
inline int list_value::_internal_value_size() const {
  return value_.size();
}
inline int list_value::value_size() const {
  return _internal_value_size();
}
inline void list_value::clear_value() {
  value_.Clear();
}
inline ::koinos::protocol::value* list_value::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.protocol.list_value.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::value >*
list_value::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:koinos.protocol.list_value.value)
  return &value_;
}
inline const ::koinos::protocol::value& list_value::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::koinos::protocol::value& list_value::value(int index) const {
  // @@protoc_insertion_point(field_get:koinos.protocol.list_value.value)
  return _internal_value(index);
}
inline ::koinos::protocol::value* list_value::_internal_add_value() {
  return value_.Add();
}
inline ::koinos::protocol::value* list_value::add_value() {
  ::koinos::protocol::value* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:koinos.protocol.list_value.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::koinos::protocol::value >&
list_value::value() const {
  // @@protoc_insertion_point(field_list:koinos.protocol.list_value.value)
  return value_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fprotocol_2fvalue_2eproto
