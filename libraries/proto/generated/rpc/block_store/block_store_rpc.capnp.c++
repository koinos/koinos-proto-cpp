// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: block_store_rpc.capnp

#include "block_store_rpc.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<21> b_87da3244a36c507f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    127,  80, 108, 163,  68,  50, 218, 135,
     38,   0,   0,   0,   1,   0,   0,   0,
    195,   5, 145, 172, 250,  41, 197, 192,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47,  98, 108, 111,  99,
    107,  95, 115, 116, 111, 114, 101,  47,
     98, 108, 111,  99, 107,  95, 115, 116,
    111, 114, 101,  95, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  66, 108,
    111,  99, 107,  83, 116, 111, 114, 101,
     82, 101, 115, 101, 114, 118, 101, 100,
     82, 101, 113, 117, 101, 115, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_87da3244a36c507f = b_87da3244a36c507f.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_87da3244a36c507f = {
  0x87da3244a36c507f, b_87da3244a36c507f.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_87da3244a36c507f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_e354f5c9bb74797c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    124, 121, 116, 187, 201, 245,  84, 227,
     38,   0,   0,   0,   1,   0,   0,   0,
    195,   5, 145, 172, 250,  41, 197, 192,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47,  98, 108, 111,  99,
    107,  95, 115, 116, 111, 114, 101,  47,
     98, 108, 111,  99, 107,  95, 115, 116,
    111, 114, 101,  95, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  66, 108,
    111,  99, 107,  83, 116, 111, 114, 101,
     82, 101, 115, 101, 114, 118, 101, 100,
     82, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e354f5c9bb74797c = b_e354f5c9bb74797c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e354f5c9bb74797c = {
  0xe354f5c9bb74797c, b_e354f5c9bb74797c.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e354f5c9bb74797c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<74> b_91195b6a31dc7fec = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    236, 127, 220,  49, 106,  91,  25, 145,
     38,   0,   0,   0,   1,   0,   1,   0,
    195,   5, 145, 172, 250,  41, 197, 192,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47,  98, 108, 111,  99,
    107,  95, 115, 116, 111, 114, 101,  47,
     98, 108, 111,  99, 107,  95, 115, 116,
    111, 114, 101,  95, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  71, 101,
    116,  66, 108, 111,  99, 107, 115,  66,
    121,  73,  68,  82, 101, 113, 117, 101,
    115, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
     98, 108, 111,  99, 107,  73,  68,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 116, 117, 114, 110,  66, 108,
    111,  99, 107,  66, 108, 111,  98,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 116, 117, 114, 110,  82, 101,
     99, 101, 105, 112, 116,  66, 108, 111,
     98,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_91195b6a31dc7fec = b_91195b6a31dc7fec.words;
#if !CAPNP_LITE
static const uint16_t m_91195b6a31dc7fec[] = {0, 1, 2};
static const uint16_t i_91195b6a31dc7fec[] = {0, 1, 2};
const ::capnp::_::RawSchema s_91195b6a31dc7fec = {
  0x91195b6a31dc7fec, b_91195b6a31dc7fec.words, 74, nullptr, m_91195b6a31dc7fec,
  0, 3, i_91195b6a31dc7fec, nullptr, nullptr, { &s_91195b6a31dc7fec, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_d956b2e681b967dc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    220, 103, 185, 129, 230, 178,  86, 217,
     38,   0,   0,   0,   1,   0,   0,   0,
    195,   5, 145, 172, 250,  41, 197, 192,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47,  98, 108, 111,  99,
    107,  95, 115, 116, 111, 114, 101,  47,
     98, 108, 111,  99, 107,  95, 115, 116,
    111, 114, 101,  95, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  71, 101,
    116,  66, 108, 111,  99, 107, 115,  66,
    121,  73,  68,  82, 101, 115, 112, 111,
    110, 115, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
     98, 108, 111,  99, 107,  73, 116, 101,
    109, 115,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    242,  41, 111,  73, 125, 171,  36, 128,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d956b2e681b967dc = b_d956b2e681b967dc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d956b2e681b967dc[] = {
  &s_8024ab7d496f29f2,
};
static const uint16_t m_d956b2e681b967dc[] = {0};
static const uint16_t i_d956b2e681b967dc[] = {0};
const ::capnp::_::RawSchema s_d956b2e681b967dc = {
  0xd956b2e681b967dc, b_d956b2e681b967dc.words, 42, d_d956b2e681b967dc, m_d956b2e681b967dc,
  1, 1, i_d956b2e681b967dc, nullptr, nullptr, { &s_d956b2e681b967dc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<111> b_acd894b20e9e9dae = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    174, 157, 158,  14, 178, 148, 216, 172,
     38,   0,   0,   0,   1,   0,   2,   0,
    195,   5, 145, 172, 250,  41, 197, 192,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47,  98, 108, 111,  99,
    107,  95, 115, 116, 111, 114, 101,  47,
     98, 108, 111,  99, 107,  95, 115, 116,
    111, 114, 101,  95, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  71, 101,
    116,  66, 108, 111,  99, 107, 115,  66,
    121,  72, 101, 105, 103, 104, 116,  82,
    101, 113, 117, 101, 115, 116,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  98,   0,   0,   0,
    129,   0,   0,   0,  31,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   0,   0,   0,   3,   0,   1,   0,
    180,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    188,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,  64,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    184,   0,   0,   0,   3,   0,   1,   0,
    196,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,  65,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    192,   0,   0,   0,   3,   0,   1,   0,
    204,   0,   0,   0,   2,   0,   1,   0,
    104, 101,  97, 100,  66, 108, 111,  99,
    107,  73,  68,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    181, 199, 229,  10,  47, 226,  97, 240,
      4,   0,   0,   0,   2,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 110,  99, 101, 115, 116, 111, 114,
     83, 116,  97, 114, 116,  72, 101, 105,
    103, 104, 116,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 117, 109,  66, 108, 111,  99, 107,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 116, 117, 114, 110,  66, 108,
    111,  99, 107,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 116, 117, 114, 110,  82, 101,
     99, 101, 105, 112, 116,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_acd894b20e9e9dae = b_acd894b20e9e9dae.words;
#if !CAPNP_LITE
static const uint16_t m_acd894b20e9e9dae[] = {1, 0, 2, 3, 4};
static const uint16_t i_acd894b20e9e9dae[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_acd894b20e9e9dae = {
  0xacd894b20e9e9dae, b_acd894b20e9e9dae.words, 111, nullptr, m_acd894b20e9e9dae,
  0, 5, i_acd894b20e9e9dae, nullptr, nullptr, { &s_acd894b20e9e9dae, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_974976c0e4871874 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    116,  24, 135, 228, 192, 118,  73, 151,
     38,   0,   0,   0,   1,   0,   0,   0,
    195,   5, 145, 172, 250,  41, 197, 192,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47,  98, 108, 111,  99,
    107,  95, 115, 116, 111, 114, 101,  47,
     98, 108, 111,  99, 107,  95, 115, 116,
    111, 114, 101,  95, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  71, 101,
    116,  66, 108, 111,  99, 107, 115,  66,
    121,  72, 101, 105, 103, 104, 116,  82,
    101, 115, 112, 111, 110, 115, 101,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
     98, 108, 111,  99, 107,  73, 116, 101,
    109, 115,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    242,  41, 111,  73, 125, 171,  36, 128,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_974976c0e4871874 = b_974976c0e4871874.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_974976c0e4871874[] = {
  &s_8024ab7d496f29f2,
};
static const uint16_t m_974976c0e4871874[] = {0};
static const uint16_t i_974976c0e4871874[] = {0};
const ::capnp::_::RawSchema s_974976c0e4871874 = {
  0x974976c0e4871874, b_974976c0e4871874.words, 42, d_974976c0e4871874, m_974976c0e4871874,
  1, 1, i_974976c0e4871874, nullptr, nullptr, { &s_974976c0e4871874, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_b92294c30ccbf9c6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    198, 249, 203,  12, 195, 148,  34, 185,
     38,   0,   0,   0,   1,   0,   0,   0,
    195,   5, 145, 172, 250,  41, 197, 192,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47,  98, 108, 111,  99,
    107,  95, 115, 116, 111, 114, 101,  47,
     98, 108, 111,  99, 107,  95, 115, 116,
    111, 114, 101,  95, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  65, 100,
    100,  66, 108, 111,  99, 107,  82, 101,
    113, 117, 101, 115, 116,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     98, 108, 111,  99, 107,  84, 111,  65,
    100, 100,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    242,  41, 111,  73, 125, 171,  36, 128,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b92294c30ccbf9c6 = b_b92294c30ccbf9c6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b92294c30ccbf9c6[] = {
  &s_8024ab7d496f29f2,
};
static const uint16_t m_b92294c30ccbf9c6[] = {0};
static const uint16_t i_b92294c30ccbf9c6[] = {0};
const ::capnp::_::RawSchema s_b92294c30ccbf9c6 = {
  0xb92294c30ccbf9c6, b_b92294c30ccbf9c6.words, 37, d_b92294c30ccbf9c6, m_b92294c30ccbf9c6,
  1, 1, i_b92294c30ccbf9c6, nullptr, nullptr, { &s_b92294c30ccbf9c6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_e3748c65f22dba2c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     44, 186,  45, 242, 101, 140, 116, 227,
     38,   0,   0,   0,   1,   0,   0,   0,
    195,   5, 145, 172, 250,  41, 197, 192,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47,  98, 108, 111,  99,
    107,  95, 115, 116, 111, 114, 101,  47,
     98, 108, 111,  99, 107,  95, 115, 116,
    111, 114, 101,  95, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  65, 100,
    100,  66, 108, 111,  99, 107,  82, 101,
    115, 112, 111, 110, 115, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e3748c65f22dba2c = b_e3748c65f22dba2c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e3748c65f22dba2c = {
  0xe3748c65f22dba2c, b_e3748c65f22dba2c.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e3748c65f22dba2c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_8c7e896efbf33dd7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    215,  61, 243, 251, 110, 137, 126, 140,
     38,   0,   0,   0,   1,   0,   0,   0,
    195,   5, 145, 172, 250,  41, 197, 192,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47,  98, 108, 111,  99,
    107,  95, 115, 116, 111, 114, 101,  47,
     98, 108, 111,  99, 107,  95, 115, 116,
    111, 114, 101,  95, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  71, 101,
    116,  72, 105, 103, 104, 101, 115, 116,
     66, 108, 111,  99, 107,  82, 101, 113,
    117, 101, 115, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_8c7e896efbf33dd7 = b_8c7e896efbf33dd7.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8c7e896efbf33dd7 = {
  0x8c7e896efbf33dd7, b_8c7e896efbf33dd7.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8c7e896efbf33dd7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_b36e5c1fb370347d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    125,  52, 112, 179,  31,  92, 110, 179,
     38,   0,   0,   0,   1,   0,   0,   0,
    195,   5, 145, 172, 250,  41, 197, 192,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47,  98, 108, 111,  99,
    107,  95, 115, 116, 111, 114, 101,  47,
     98, 108, 111,  99, 107,  95, 115, 116,
    111, 114, 101,  95, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  71, 101,
    116,  72, 105, 103, 104, 101, 115, 116,
     66, 108, 111,  99, 107,  82, 101, 115,
    112, 111, 110, 115, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 112, 111, 108, 111, 103, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    112,  44, 118, 133,  33, 239, 199, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b36e5c1fb370347d = b_b36e5c1fb370347d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b36e5c1fb370347d[] = {
  &s_ffc7ef2185762c70,
};
static const uint16_t m_b36e5c1fb370347d[] = {0};
static const uint16_t i_b36e5c1fb370347d[] = {0};
const ::capnp::_::RawSchema s_b36e5c1fb370347d = {
  0xb36e5c1fb370347d, b_b36e5c1fb370347d.words, 38, d_b36e5c1fb370347d, m_b36e5c1fb370347d,
  1, 1, i_b36e5c1fb370347d, nullptr, nullptr, { &s_b36e5c1fb370347d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<54> b_e80c1d8ad928139e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    158,  19,  40, 217, 138,  29,  12, 232,
     38,   0,   0,   0,   1,   0,   0,   0,
    195,   5, 145, 172, 250,  41, 197, 192,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47,  98, 108, 111,  99,
    107,  95, 115, 116, 111, 114, 101,  47,
     98, 108, 111,  99, 107,  95, 115, 116,
    111, 114, 101,  95, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  66, 108,
    111,  99, 107,  83, 116, 111, 114, 101,
     69, 114, 114, 111, 114,  82, 101, 115,
    112, 111, 110, 115, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    101, 114, 114, 111, 114,  84, 101, 120,
    116,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,  68,  97, 116,
     97,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e80c1d8ad928139e = b_e80c1d8ad928139e.words;
#if !CAPNP_LITE
static const uint16_t m_e80c1d8ad928139e[] = {1, 0};
static const uint16_t i_e80c1d8ad928139e[] = {0, 1};
const ::capnp::_::RawSchema s_e80c1d8ad928139e = {
  0xe80c1d8ad928139e, b_e80c1d8ad928139e.words, 54, nullptr, m_e80c1d8ad928139e,
  0, 2, i_e80c1d8ad928139e, nullptr, nullptr, { &s_e80c1d8ad928139e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<103> b_f2bb9a8c50dad870 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    112, 216, 218,  80, 140, 154, 187, 242,
     38,   0,   0,   0,   1,   0,   1,   0,
    195,   5, 145, 172, 250,  41, 197, 192,
      1,   0,   7,   0,   0,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47,  98, 108, 111,  99,
    107,  95, 115, 116, 111, 114, 101,  47,
     98, 108, 111,  99, 107,  95, 115, 116,
    111, 114, 101,  95, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  66, 108,
    111,  99, 107,  83, 116, 111, 114, 101,
     82, 101, 113, 117, 101, 115, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   0,   0,   0,   3,   0,   1,   0,
    160,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      4,   0, 251, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   0,   0,   0,   3,   0,   1,   0,
    176,   0,   0,   0,   2,   0,   1,   0,
     98, 108, 111,  99, 107,  83, 116, 111,
    114, 101,  82, 101, 115, 101, 114, 118,
    101, 100,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    127,  80, 108, 163,  68,  50, 218, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 116,  66, 108, 111,  99, 107,
    115,  66, 121,  73,  68,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    236, 127, 220,  49, 106,  91,  25, 145,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 116,  66, 108, 111,  99, 107,
    115,  66, 121,  72, 101, 105, 103, 104,
    116,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    174, 157, 158,  14, 178, 148, 216, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 100, 100,  66, 108, 111,  99, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198, 249, 203,  12, 195, 148,  34, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 116,  72, 105, 103, 104, 101,
    115, 116,  66, 108, 111,  99, 107,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    215,  61, 243, 251, 110, 137, 126, 140,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f2bb9a8c50dad870 = b_f2bb9a8c50dad870.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f2bb9a8c50dad870[] = {
  &s_87da3244a36c507f,
  &s_8c7e896efbf33dd7,
  &s_91195b6a31dc7fec,
  &s_acd894b20e9e9dae,
  &s_b92294c30ccbf9c6,
};
static const uint16_t m_f2bb9a8c50dad870[] = {3, 0, 2, 1, 4};
static const uint16_t i_f2bb9a8c50dad870[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_f2bb9a8c50dad870 = {
  0xf2bb9a8c50dad870, b_f2bb9a8c50dad870.words, 103, d_f2bb9a8c50dad870, m_f2bb9a8c50dad870,
  5, 5, i_f2bb9a8c50dad870, nullptr, nullptr, { &s_f2bb9a8c50dad870, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<120> b_dc75dd2b3bb315d0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    208,  21, 179,  59,  43, 221, 117, 220,
     38,   0,   0,   0,   1,   0,   1,   0,
    195,   5, 145, 172, 250,  41, 197, 192,
      1,   0,   7,   0,   0,   0,   6,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  87,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 112,  99,  47,  98, 108, 111,  99,
    107,  95, 115, 116, 111, 114, 101,  47,
     98, 108, 111,  99, 107,  95, 115, 116,
    111, 114, 101,  95, 114, 112,  99,  46,
     99,  97, 112, 110, 112,  58,  66, 108,
    111,  99, 107,  83, 116, 111, 114, 101,
     82, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     24,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    156,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   0,   0,   0,   3,   0,   1,   0,
    176,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   0,   0,   0,   3,   0,   1,   0,
    184,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    184,   0,   0,   0,   3,   0,   1,   0,
    196,   0,   0,   0,   2,   0,   1,   0,
      4,   0, 251, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    192,   0,   0,   0,   3,   0,   1,   0,
    204,   0,   0,   0,   2,   0,   1,   0,
      5,   0, 250, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    200,   0,   0,   0,   3,   0,   1,   0,
    212,   0,   0,   0,   2,   0,   1,   0,
     98, 108, 111,  99, 107,  83, 116, 111,
    114, 101,  82, 101, 115, 101, 114, 118,
    101, 100,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    124, 121, 116, 187, 201, 245,  84, 227,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,  82, 101, 115,
    112, 111, 110, 115, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    158,  19,  40, 217, 138,  29,  12, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 116,  66, 108, 111,  99, 107,
    115,  66, 121,  73,  68,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    220, 103, 185, 129, 230, 178,  86, 217,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 116,  66, 108, 111,  99, 107,
    115,  66, 121,  72, 101, 105, 103, 104,
    116,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    116,  24, 135, 228, 192, 118,  73, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 100, 100,  66, 108, 111,  99, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     44, 186,  45, 242, 101, 140, 116, 227,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 101, 116,  72, 105, 103, 104, 101,
    115, 116,  66, 108, 111,  99, 107,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    125,  52, 112, 179,  31,  92, 110, 179,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dc75dd2b3bb315d0 = b_dc75dd2b3bb315d0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dc75dd2b3bb315d0[] = {
  &s_974976c0e4871874,
  &s_b36e5c1fb370347d,
  &s_d956b2e681b967dc,
  &s_e354f5c9bb74797c,
  &s_e3748c65f22dba2c,
  &s_e80c1d8ad928139e,
};
static const uint16_t m_dc75dd2b3bb315d0[] = {4, 0, 1, 3, 2, 5};
static const uint16_t i_dc75dd2b3bb315d0[] = {0, 1, 2, 3, 4, 5};
const ::capnp::_::RawSchema s_dc75dd2b3bb315d0 = {
  0xdc75dd2b3bb315d0, b_dc75dd2b3bb315d0.words, 120, d_dc75dd2b3bb315d0, m_dc75dd2b3bb315d0,
  6, 6, i_dc75dd2b3bb315d0, nullptr, nullptr, { &s_dc75dd2b3bb315d0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace koinos {
namespace rpc {
namespace block_store {

// BlockStoreReservedRequest
constexpr uint16_t BlockStoreReservedRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockStoreReservedRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind BlockStoreReservedRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockStoreReservedRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// BlockStoreReservedResponse
constexpr uint16_t BlockStoreReservedResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockStoreReservedResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind BlockStoreReservedResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockStoreReservedResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GetBlocksByIDRequest
constexpr uint16_t GetBlocksByIDRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t GetBlocksByIDRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GetBlocksByIDRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GetBlocksByIDRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GetBlocksByIDResponse
constexpr uint16_t GetBlocksByIDResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t GetBlocksByIDResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GetBlocksByIDResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GetBlocksByIDResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GetBlocksByHeightRequest
constexpr uint16_t GetBlocksByHeightRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t GetBlocksByHeightRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GetBlocksByHeightRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GetBlocksByHeightRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GetBlocksByHeightResponse
constexpr uint16_t GetBlocksByHeightResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t GetBlocksByHeightResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GetBlocksByHeightResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GetBlocksByHeightResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AddBlockRequest
constexpr uint16_t AddBlockRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t AddBlockRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AddBlockRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AddBlockRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AddBlockResponse
constexpr uint16_t AddBlockResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t AddBlockResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AddBlockResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AddBlockResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GetHighestBlockRequest
constexpr uint16_t GetHighestBlockRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t GetHighestBlockRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GetHighestBlockRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GetHighestBlockRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GetHighestBlockResponse
constexpr uint16_t GetHighestBlockResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t GetHighestBlockResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GetHighestBlockResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GetHighestBlockResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// BlockStoreErrorResponse
constexpr uint16_t BlockStoreErrorResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockStoreErrorResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind BlockStoreErrorResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockStoreErrorResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// BlockStoreRequest
constexpr uint16_t BlockStoreRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockStoreRequest::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind BlockStoreRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockStoreRequest::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// BlockStoreResponse
constexpr uint16_t BlockStoreResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t BlockStoreResponse::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind BlockStoreResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BlockStoreResponse::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

