// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/contracts/governance/governance.proto

#include "koinos/contracts/governance/governance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace koinos {
namespace contracts {
namespace governance {
constexpr proposal_record::proposal_record(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proposal_(nullptr)
  , vote_start_height_(uint64_t{0u})
  , vote_tally_(uint64_t{0u})
  , vote_threshold_(uint64_t{0u})
  , shall_authorize_(false)
  , updates_governance_(false)
  , status_(0)
{}
struct proposal_recordDefaultTypeInternal {
  constexpr proposal_recordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~proposal_recordDefaultTypeInternal() {}
  union {
    proposal_record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT proposal_recordDefaultTypeInternal _proposal_record_default_instance_;
constexpr submit_proposal_arguments::submit_proposal_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proposal_(nullptr)
  , fee_(uint64_t{0u}){}
struct submit_proposal_argumentsDefaultTypeInternal {
  constexpr submit_proposal_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~submit_proposal_argumentsDefaultTypeInternal() {}
  union {
    submit_proposal_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT submit_proposal_argumentsDefaultTypeInternal _submit_proposal_arguments_default_instance_;
constexpr submit_proposal_result::submit_proposal_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(false){}
struct submit_proposal_resultDefaultTypeInternal {
  constexpr submit_proposal_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~submit_proposal_resultDefaultTypeInternal() {}
  union {
    submit_proposal_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT submit_proposal_resultDefaultTypeInternal _submit_proposal_result_default_instance_;
constexpr get_proposal_by_id_arguments::get_proposal_by_id_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proposal_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct get_proposal_by_id_argumentsDefaultTypeInternal {
  constexpr get_proposal_by_id_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_proposal_by_id_argumentsDefaultTypeInternal() {}
  union {
    get_proposal_by_id_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_proposal_by_id_argumentsDefaultTypeInternal _get_proposal_by_id_arguments_default_instance_;
constexpr get_proposal_by_id_result::get_proposal_by_id_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(nullptr){}
struct get_proposal_by_id_resultDefaultTypeInternal {
  constexpr get_proposal_by_id_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_proposal_by_id_resultDefaultTypeInternal() {}
  union {
    get_proposal_by_id_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_proposal_by_id_resultDefaultTypeInternal _get_proposal_by_id_result_default_instance_;
constexpr get_proposals_by_status_arguments::get_proposals_by_status_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_proposal_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , limit_(uint64_t{0u})
  , status_(0)
{}
struct get_proposals_by_status_argumentsDefaultTypeInternal {
  constexpr get_proposals_by_status_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_proposals_by_status_argumentsDefaultTypeInternal() {}
  union {
    get_proposals_by_status_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_proposals_by_status_argumentsDefaultTypeInternal _get_proposals_by_status_arguments_default_instance_;
constexpr get_proposals_by_status_result::get_proposals_by_status_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct get_proposals_by_status_resultDefaultTypeInternal {
  constexpr get_proposals_by_status_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_proposals_by_status_resultDefaultTypeInternal() {}
  union {
    get_proposals_by_status_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_proposals_by_status_resultDefaultTypeInternal _get_proposals_by_status_result_default_instance_;
constexpr get_proposals_arguments::get_proposals_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_proposal_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , limit_(uint64_t{0u}){}
struct get_proposals_argumentsDefaultTypeInternal {
  constexpr get_proposals_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_proposals_argumentsDefaultTypeInternal() {}
  union {
    get_proposals_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_proposals_argumentsDefaultTypeInternal _get_proposals_arguments_default_instance_;
constexpr get_proposals_result::get_proposals_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct get_proposals_resultDefaultTypeInternal {
  constexpr get_proposals_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~get_proposals_resultDefaultTypeInternal() {}
  union {
    get_proposals_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT get_proposals_resultDefaultTypeInternal _get_proposals_result_default_instance_;
constexpr proposal_submission_event::proposal_submission_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proposal_(nullptr){}
struct proposal_submission_eventDefaultTypeInternal {
  constexpr proposal_submission_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~proposal_submission_eventDefaultTypeInternal() {}
  union {
    proposal_submission_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT proposal_submission_eventDefaultTypeInternal _proposal_submission_event_default_instance_;
constexpr proposal_status_event::proposal_status_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0)
{}
struct proposal_status_eventDefaultTypeInternal {
  constexpr proposal_status_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~proposal_status_eventDefaultTypeInternal() {}
  union {
    proposal_status_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT proposal_status_eventDefaultTypeInternal _proposal_status_event_default_instance_;
constexpr proposal_vote_event::proposal_vote_event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_tally_(uint64_t{0u})
  , vote_threshold_(uint64_t{0u}){}
struct proposal_vote_eventDefaultTypeInternal {
  constexpr proposal_vote_eventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~proposal_vote_eventDefaultTypeInternal() {}
  union {
    proposal_vote_event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT proposal_vote_eventDefaultTypeInternal _proposal_vote_event_default_instance_;
constexpr block_callback_arguments::block_callback_arguments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct block_callback_argumentsDefaultTypeInternal {
  constexpr block_callback_argumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_callback_argumentsDefaultTypeInternal() {}
  union {
    block_callback_arguments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_callback_argumentsDefaultTypeInternal _block_callback_arguments_default_instance_;
constexpr block_callback_result::block_callback_result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct block_callback_resultDefaultTypeInternal {
  constexpr block_callback_resultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~block_callback_resultDefaultTypeInternal() {}
  union {
    block_callback_result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT block_callback_resultDefaultTypeInternal _block_callback_result_default_instance_;
}  // namespace governance
}  // namespace contracts
}  // namespace koinos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_record, proposal_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_record, vote_start_height_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_record, vote_tally_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_record, vote_threshold_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_record, shall_authorize_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_record, updates_governance_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_record, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::submit_proposal_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::submit_proposal_arguments, proposal_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::submit_proposal_arguments, fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::submit_proposal_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::submit_proposal_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposal_by_id_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposal_by_id_arguments, proposal_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposal_by_id_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposal_by_id_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposals_by_status_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposals_by_status_arguments, start_proposal_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposals_by_status_arguments, limit_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposals_by_status_arguments, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposals_by_status_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposals_by_status_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposals_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposals_arguments, start_proposal_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposals_arguments, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposals_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::get_proposals_result, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_submission_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_submission_event, proposal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_status_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_status_event, id_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_status_event, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_vote_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_vote_event, id_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_vote_event, vote_tally_),
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::proposal_vote_event, vote_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::block_callback_arguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::contracts::governance::block_callback_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::contracts::governance::proposal_record)},
  { 12, -1, sizeof(::koinos::contracts::governance::submit_proposal_arguments)},
  { 19, -1, sizeof(::koinos::contracts::governance::submit_proposal_result)},
  { 25, -1, sizeof(::koinos::contracts::governance::get_proposal_by_id_arguments)},
  { 31, -1, sizeof(::koinos::contracts::governance::get_proposal_by_id_result)},
  { 37, -1, sizeof(::koinos::contracts::governance::get_proposals_by_status_arguments)},
  { 45, -1, sizeof(::koinos::contracts::governance::get_proposals_by_status_result)},
  { 51, -1, sizeof(::koinos::contracts::governance::get_proposals_arguments)},
  { 58, -1, sizeof(::koinos::contracts::governance::get_proposals_result)},
  { 64, -1, sizeof(::koinos::contracts::governance::proposal_submission_event)},
  { 70, -1, sizeof(::koinos::contracts::governance::proposal_status_event)},
  { 77, -1, sizeof(::koinos::contracts::governance::proposal_vote_event)},
  { 85, -1, sizeof(::koinos::contracts::governance::block_callback_arguments)},
  { 90, -1, sizeof(::koinos::contracts::governance::block_callback_result)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_proposal_record_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_submit_proposal_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_submit_proposal_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_get_proposal_by_id_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_get_proposal_by_id_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_get_proposals_by_status_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_get_proposals_by_status_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_get_proposals_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_get_proposals_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_proposal_submission_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_proposal_status_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_proposal_vote_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_block_callback_arguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::contracts::governance::_block_callback_result_default_instance_),
};

const char descriptor_table_protodef_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,koinos/contracts/governance/governance"
  ".proto\022\033koinos.contracts.governance\032\024koi"
  "nos/options.proto\032\036koinos/protocol/proto"
  "col.proto\"\373\001\n\017proposal_record\022.\n\010proposa"
  "l\030\001 \001(\0132\034.koinos.protocol.transaction\022\031\n"
  "\021vote_start_height\030\002 \001(\004\022\022\n\nvote_tally\030\003"
  " \001(\004\022\026\n\016vote_threshold\030\004 \001(\004\022\027\n\017shall_au"
  "thorize\030\005 \001(\010\022\032\n\022updates_governance\030\006 \001("
  "\010\022<\n\006status\030\007 \001(\0162,.koinos.contracts.gov"
  "ernance.proposal_status\"X\n\031submit_propos"
  "al_arguments\022.\n\010proposal\030\001 \001(\0132\034.koinos."
  "protocol.transaction\022\013\n\003fee\030\002 \001(\004\"\'\n\026sub"
  "mit_proposal_result\022\r\n\005value\030\001 \001(\010\"9\n\034ge"
  "t_proposal_by_id_arguments\022\031\n\013proposal_i"
  "d\030\001 \001(\014B\004\200\265\030\004\"X\n\031get_proposal_by_id_resu"
  "lt\022;\n\005value\030\001 \001(\0132,.koinos.contracts.gov"
  "ernance.proposal_record\"\216\001\n!get_proposal"
  "s_by_status_arguments\022\034\n\016start_proposal\030"
  "\001 \001(\014B\004\200\265\030\004\022\r\n\005limit\030\002 \001(\004\022<\n\006status\030\003 \001"
  "(\0162,.koinos.contracts.governance.proposa"
  "l_status\"]\n\036get_proposals_by_status_resu"
  "lt\022;\n\005value\030\001 \003(\0132,.koinos.contracts.gov"
  "ernance.proposal_record\"F\n\027get_proposals"
  "_arguments\022\034\n\016start_proposal\030\001 \001(\014B\004\200\265\030\004"
  "\022\r\n\005limit\030\002 \001(\004\"S\n\024get_proposals_result\022"
  ";\n\005value\030\001 \003(\0132,.koinos.contracts.govern"
  "ance.proposal_record\"[\n\031proposal_submiss"
  "ion_event\022>\n\010proposal\030\001 \001(\0132,.koinos.con"
  "tracts.governance.proposal_record\"g\n\025pro"
  "posal_status_event\022\020\n\002id\030\001 \001(\014B\004\200\265\030\004\022<\n\006"
  "status\030\002 \001(\0162,.koinos.contracts.governan"
  "ce.proposal_status\"S\n\023proposal_vote_even"
  "t\022\020\n\002id\030\001 \001(\014B\004\200\265\030\004\022\022\n\nvote_tally\030\002 \001(\004\022"
  "\026\n\016vote_threshold\030\003 \001(\004\"\032\n\030block_callbac"
  "k_arguments\"\027\n\025block_callback_result*R\n\017"
  "proposal_status\022\013\n\007pending\020\000\022\n\n\006active\020\001"
  "\022\014\n\010approved\020\002\022\013\n\007expired\020\003\022\013\n\007applied\020\004"
  "BCZAgithub.com/koinos/koinos-proto-golan"
  "g/koinos/contracts/governanceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_deps[2] = {
  &::descriptor_table_koinos_2foptions_2eproto,
  &::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto = {
  false, false, 1557, descriptor_table_protodef_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto, "koinos/contracts/governance/governance.proto", 
  &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once, descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_deps, 2, 14,
  schemas, file_default_instances, TableStruct_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto::offsets,
  file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto, file_level_enum_descriptors_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto, file_level_service_descriptors_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter() {
  return &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto(&descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto);
namespace koinos {
namespace contracts {
namespace governance {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* proposal_status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto);
  return file_level_enum_descriptors_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[0];
}
bool proposal_status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class proposal_record::_Internal {
 public:
  static const ::koinos::protocol::transaction& proposal(const proposal_record* msg);
};

const ::koinos::protocol::transaction&
proposal_record::_Internal::proposal(const proposal_record* msg) {
  return *msg->proposal_;
}
void proposal_record::clear_proposal() {
  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
}
proposal_record::proposal_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.proposal_record)
}
proposal_record::proposal_record(const proposal_record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_proposal()) {
    proposal_ = new ::koinos::protocol::transaction(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  ::memcpy(&vote_start_height_, &from.vote_start_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&vote_start_height_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.proposal_record)
}

inline void proposal_record::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&proposal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&proposal_)) + sizeof(status_));
}

proposal_record::~proposal_record() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.proposal_record)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void proposal_record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete proposal_;
}

void proposal_record::ArenaDtor(void* object) {
  proposal_record* _this = reinterpret_cast< proposal_record* >(object);
  (void)_this;
}
void proposal_record::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void proposal_record::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void proposal_record::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.proposal_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
  ::memset(&vote_start_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&vote_start_height_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* proposal_record::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.transaction proposal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 vote_start_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vote_start_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 vote_tally = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vote_tally_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 vote_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vote_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shall_authorize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          shall_authorize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool updates_governance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          updates_governance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.contracts.governance.proposal_status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::koinos::contracts::governance::proposal_status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* proposal_record::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.proposal_record)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction proposal = 1;
  if (this->_internal_has_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::proposal(this), target, stream);
  }

  // uint64 vote_start_height = 2;
  if (this->_internal_vote_start_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_vote_start_height(), target);
  }

  // uint64 vote_tally = 3;
  if (this->_internal_vote_tally() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_vote_tally(), target);
  }

  // uint64 vote_threshold = 4;
  if (this->_internal_vote_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_vote_threshold(), target);
  }

  // bool shall_authorize = 5;
  if (this->_internal_shall_authorize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_shall_authorize(), target);
  }

  // bool updates_governance = 6;
  if (this->_internal_updates_governance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_updates_governance(), target);
  }

  // .koinos.contracts.governance.proposal_status status = 7;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.proposal_record)
  return target;
}

size_t proposal_record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.proposal_record)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction proposal = 1;
  if (this->_internal_has_proposal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  // uint64 vote_start_height = 2;
  if (this->_internal_vote_start_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_vote_start_height());
  }

  // uint64 vote_tally = 3;
  if (this->_internal_vote_tally() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_vote_tally());
  }

  // uint64 vote_threshold = 4;
  if (this->_internal_vote_threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_vote_threshold());
  }

  // bool shall_authorize = 5;
  if (this->_internal_shall_authorize() != 0) {
    total_size += 1 + 1;
  }

  // bool updates_governance = 6;
  if (this->_internal_updates_governance() != 0) {
    total_size += 1 + 1;
  }

  // .koinos.contracts.governance.proposal_status status = 7;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData proposal_record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    proposal_record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*proposal_record::GetClassData() const { return &_class_data_; }

void proposal_record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<proposal_record *>(to)->MergeFrom(
      static_cast<const proposal_record &>(from));
}


void proposal_record::MergeFrom(const proposal_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.proposal_record)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_proposal()) {
    _internal_mutable_proposal()->::koinos::protocol::transaction::MergeFrom(from._internal_proposal());
  }
  if (from._internal_vote_start_height() != 0) {
    _internal_set_vote_start_height(from._internal_vote_start_height());
  }
  if (from._internal_vote_tally() != 0) {
    _internal_set_vote_tally(from._internal_vote_tally());
  }
  if (from._internal_vote_threshold() != 0) {
    _internal_set_vote_threshold(from._internal_vote_threshold());
  }
  if (from._internal_shall_authorize() != 0) {
    _internal_set_shall_authorize(from._internal_shall_authorize());
  }
  if (from._internal_updates_governance() != 0) {
    _internal_set_updates_governance(from._internal_updates_governance());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void proposal_record::CopyFrom(const proposal_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.proposal_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proposal_record::IsInitialized() const {
  return true;
}

void proposal_record::InternalSwap(proposal_record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(proposal_record, status_)
      + sizeof(proposal_record::status_)
      - PROTOBUF_FIELD_OFFSET(proposal_record, proposal_)>(
          reinterpret_cast<char*>(&proposal_),
          reinterpret_cast<char*>(&other->proposal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata proposal_record::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[0]);
}

// ===================================================================

class submit_proposal_arguments::_Internal {
 public:
  static const ::koinos::protocol::transaction& proposal(const submit_proposal_arguments* msg);
};

const ::koinos::protocol::transaction&
submit_proposal_arguments::_Internal::proposal(const submit_proposal_arguments* msg) {
  return *msg->proposal_;
}
void submit_proposal_arguments::clear_proposal() {
  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
}
submit_proposal_arguments::submit_proposal_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.submit_proposal_arguments)
}
submit_proposal_arguments::submit_proposal_arguments(const submit_proposal_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_proposal()) {
    proposal_ = new ::koinos::protocol::transaction(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  fee_ = from.fee_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.submit_proposal_arguments)
}

inline void submit_proposal_arguments::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&proposal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fee_) -
    reinterpret_cast<char*>(&proposal_)) + sizeof(fee_));
}

submit_proposal_arguments::~submit_proposal_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.submit_proposal_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void submit_proposal_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete proposal_;
}

void submit_proposal_arguments::ArenaDtor(void* object) {
  submit_proposal_arguments* _this = reinterpret_cast< submit_proposal_arguments* >(object);
  (void)_this;
}
void submit_proposal_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void submit_proposal_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void submit_proposal_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.submit_proposal_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
  fee_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* submit_proposal_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.protocol.transaction proposal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* submit_proposal_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.submit_proposal_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction proposal = 1;
  if (this->_internal_has_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::proposal(this), target, stream);
  }

  // uint64 fee = 2;
  if (this->_internal_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.submit_proposal_arguments)
  return target;
}

size_t submit_proposal_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.submit_proposal_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction proposal = 1;
  if (this->_internal_has_proposal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  // uint64 fee = 2;
  if (this->_internal_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fee());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData submit_proposal_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    submit_proposal_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*submit_proposal_arguments::GetClassData() const { return &_class_data_; }

void submit_proposal_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<submit_proposal_arguments *>(to)->MergeFrom(
      static_cast<const submit_proposal_arguments &>(from));
}


void submit_proposal_arguments::MergeFrom(const submit_proposal_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.submit_proposal_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_proposal()) {
    _internal_mutable_proposal()->::koinos::protocol::transaction::MergeFrom(from._internal_proposal());
  }
  if (from._internal_fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void submit_proposal_arguments::CopyFrom(const submit_proposal_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.submit_proposal_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool submit_proposal_arguments::IsInitialized() const {
  return true;
}

void submit_proposal_arguments::InternalSwap(submit_proposal_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(submit_proposal_arguments, fee_)
      + sizeof(submit_proposal_arguments::fee_)
      - PROTOBUF_FIELD_OFFSET(submit_proposal_arguments, proposal_)>(
          reinterpret_cast<char*>(&proposal_),
          reinterpret_cast<char*>(&other->proposal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata submit_proposal_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[1]);
}

// ===================================================================

class submit_proposal_result::_Internal {
 public:
};

submit_proposal_result::submit_proposal_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.submit_proposal_result)
}
submit_proposal_result::submit_proposal_result(const submit_proposal_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.submit_proposal_result)
}

inline void submit_proposal_result::SharedCtor() {
value_ = false;
}

submit_proposal_result::~submit_proposal_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.submit_proposal_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void submit_proposal_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void submit_proposal_result::ArenaDtor(void* object) {
  submit_proposal_result* _this = reinterpret_cast< submit_proposal_result* >(object);
  (void)_this;
}
void submit_proposal_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void submit_proposal_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void submit_proposal_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.submit_proposal_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* submit_proposal_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* submit_proposal_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.submit_proposal_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.submit_proposal_result)
  return target;
}

size_t submit_proposal_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.submit_proposal_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData submit_proposal_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    submit_proposal_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*submit_proposal_result::GetClassData() const { return &_class_data_; }

void submit_proposal_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<submit_proposal_result *>(to)->MergeFrom(
      static_cast<const submit_proposal_result &>(from));
}


void submit_proposal_result::MergeFrom(const submit_proposal_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.submit_proposal_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void submit_proposal_result::CopyFrom(const submit_proposal_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.submit_proposal_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool submit_proposal_result::IsInitialized() const {
  return true;
}

void submit_proposal_result::InternalSwap(submit_proposal_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata submit_proposal_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[2]);
}

// ===================================================================

class get_proposal_by_id_arguments::_Internal {
 public:
};

get_proposal_by_id_arguments::get_proposal_by_id_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.get_proposal_by_id_arguments)
}
get_proposal_by_id_arguments::get_proposal_by_id_arguments(const get_proposal_by_id_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposal_id().empty()) {
    proposal_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.get_proposal_by_id_arguments)
}

inline void get_proposal_by_id_arguments::SharedCtor() {
proposal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_proposal_by_id_arguments::~get_proposal_by_id_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.get_proposal_by_id_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_proposal_by_id_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  proposal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_proposal_by_id_arguments::ArenaDtor(void* object) {
  get_proposal_by_id_arguments* _this = reinterpret_cast< get_proposal_by_id_arguments* >(object);
  (void)_this;
}
void get_proposal_by_id_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_proposal_by_id_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_proposal_by_id_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.get_proposal_by_id_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposal_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_proposal_by_id_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes proposal_id = 1 [(.koinos.btype) = TRANSACTION_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_proposal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_proposal_by_id_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.get_proposal_by_id_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes proposal_id = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_proposal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.get_proposal_by_id_arguments)
  return target;
}

size_t get_proposal_by_id_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.get_proposal_by_id_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes proposal_id = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_proposal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proposal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_proposal_by_id_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_proposal_by_id_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_proposal_by_id_arguments::GetClassData() const { return &_class_data_; }

void get_proposal_by_id_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_proposal_by_id_arguments *>(to)->MergeFrom(
      static_cast<const get_proposal_by_id_arguments &>(from));
}


void get_proposal_by_id_arguments::MergeFrom(const get_proposal_by_id_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.get_proposal_by_id_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proposal_id().empty()) {
    _internal_set_proposal_id(from._internal_proposal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_proposal_by_id_arguments::CopyFrom(const get_proposal_by_id_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.get_proposal_by_id_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_proposal_by_id_arguments::IsInitialized() const {
  return true;
}

void get_proposal_by_id_arguments::InternalSwap(get_proposal_by_id_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proposal_id_, GetArenaForAllocation(),
      &other->proposal_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata get_proposal_by_id_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[3]);
}

// ===================================================================

class get_proposal_by_id_result::_Internal {
 public:
  static const ::koinos::contracts::governance::proposal_record& value(const get_proposal_by_id_result* msg);
};

const ::koinos::contracts::governance::proposal_record&
get_proposal_by_id_result::_Internal::value(const get_proposal_by_id_result* msg) {
  return *msg->value_;
}
get_proposal_by_id_result::get_proposal_by_id_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.get_proposal_by_id_result)
}
get_proposal_by_id_result::get_proposal_by_id_result(const get_proposal_by_id_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::koinos::contracts::governance::proposal_record(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.get_proposal_by_id_result)
}

inline void get_proposal_by_id_result::SharedCtor() {
value_ = nullptr;
}

get_proposal_by_id_result::~get_proposal_by_id_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.get_proposal_by_id_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_proposal_by_id_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void get_proposal_by_id_result::ArenaDtor(void* object) {
  get_proposal_by_id_result* _this = reinterpret_cast< get_proposal_by_id_result* >(object);
  (void)_this;
}
void get_proposal_by_id_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_proposal_by_id_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_proposal_by_id_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.get_proposal_by_id_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_proposal_by_id_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.contracts.governance.proposal_record value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_proposal_by_id_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.get_proposal_by_id_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.contracts.governance.proposal_record value = 1;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.get_proposal_by_id_result)
  return target;
}

size_t get_proposal_by_id_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.get_proposal_by_id_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.contracts.governance.proposal_record value = 1;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_proposal_by_id_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_proposal_by_id_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_proposal_by_id_result::GetClassData() const { return &_class_data_; }

void get_proposal_by_id_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_proposal_by_id_result *>(to)->MergeFrom(
      static_cast<const get_proposal_by_id_result &>(from));
}


void get_proposal_by_id_result::MergeFrom(const get_proposal_by_id_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.get_proposal_by_id_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_mutable_value()->::koinos::contracts::governance::proposal_record::MergeFrom(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_proposal_by_id_result::CopyFrom(const get_proposal_by_id_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.get_proposal_by_id_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_proposal_by_id_result::IsInitialized() const {
  return true;
}

void get_proposal_by_id_result::InternalSwap(get_proposal_by_id_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_proposal_by_id_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[4]);
}

// ===================================================================

class get_proposals_by_status_arguments::_Internal {
 public:
};

get_proposals_by_status_arguments::get_proposals_by_status_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.get_proposals_by_status_arguments)
}
get_proposals_by_status_arguments::get_proposals_by_status_arguments(const get_proposals_by_status_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_proposal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_proposal().empty()) {
    start_proposal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_proposal(), 
      GetArenaForAllocation());
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.get_proposals_by_status_arguments)
}

inline void get_proposals_by_status_arguments::SharedCtor() {
start_proposal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&limit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(status_));
}

get_proposals_by_status_arguments::~get_proposals_by_status_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.get_proposals_by_status_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_proposals_by_status_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  start_proposal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_proposals_by_status_arguments::ArenaDtor(void* object) {
  get_proposals_by_status_arguments* _this = reinterpret_cast< get_proposals_by_status_arguments* >(object);
  (void)_this;
}
void get_proposals_by_status_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_proposals_by_status_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_proposals_by_status_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.get_proposals_by_status_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_proposal_.ClearToEmpty();
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_proposals_by_status_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes start_proposal = 1 [(.koinos.btype) = TRANSACTION_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start_proposal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.contracts.governance.proposal_status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::koinos::contracts::governance::proposal_status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_proposals_by_status_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.get_proposals_by_status_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start_proposal = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_start_proposal().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_start_proposal(), target);
  }

  // uint64 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_limit(), target);
  }

  // .koinos.contracts.governance.proposal_status status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.get_proposals_by_status_arguments)
  return target;
}

size_t get_proposals_by_status_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.get_proposals_by_status_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_proposal = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_start_proposal().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start_proposal());
  }

  // uint64 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_limit());
  }

  // .koinos.contracts.governance.proposal_status status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_proposals_by_status_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_proposals_by_status_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_proposals_by_status_arguments::GetClassData() const { return &_class_data_; }

void get_proposals_by_status_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_proposals_by_status_arguments *>(to)->MergeFrom(
      static_cast<const get_proposals_by_status_arguments &>(from));
}


void get_proposals_by_status_arguments::MergeFrom(const get_proposals_by_status_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.get_proposals_by_status_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_start_proposal().empty()) {
    _internal_set_start_proposal(from._internal_start_proposal());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_proposals_by_status_arguments::CopyFrom(const get_proposals_by_status_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.get_proposals_by_status_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_proposals_by_status_arguments::IsInitialized() const {
  return true;
}

void get_proposals_by_status_arguments::InternalSwap(get_proposals_by_status_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_proposal_, GetArenaForAllocation(),
      &other->start_proposal_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(get_proposals_by_status_arguments, status_)
      + sizeof(get_proposals_by_status_arguments::status_)
      - PROTOBUF_FIELD_OFFSET(get_proposals_by_status_arguments, limit_)>(
          reinterpret_cast<char*>(&limit_),
          reinterpret_cast<char*>(&other->limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata get_proposals_by_status_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[5]);
}

// ===================================================================

class get_proposals_by_status_result::_Internal {
 public:
};

get_proposals_by_status_result::get_proposals_by_status_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.get_proposals_by_status_result)
}
get_proposals_by_status_result::get_proposals_by_status_result(const get_proposals_by_status_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.get_proposals_by_status_result)
}

inline void get_proposals_by_status_result::SharedCtor() {
}

get_proposals_by_status_result::~get_proposals_by_status_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.get_proposals_by_status_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_proposals_by_status_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_proposals_by_status_result::ArenaDtor(void* object) {
  get_proposals_by_status_result* _this = reinterpret_cast< get_proposals_by_status_result* >(object);
  (void)_this;
}
void get_proposals_by_status_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_proposals_by_status_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_proposals_by_status_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.get_proposals_by_status_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_proposals_by_status_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .koinos.contracts.governance.proposal_record value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_proposals_by_status_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.get_proposals_by_status_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .koinos.contracts.governance.proposal_record value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.get_proposals_by_status_result)
  return target;
}

size_t get_proposals_by_status_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.get_proposals_by_status_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.contracts.governance.proposal_record value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_proposals_by_status_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_proposals_by_status_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_proposals_by_status_result::GetClassData() const { return &_class_data_; }

void get_proposals_by_status_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_proposals_by_status_result *>(to)->MergeFrom(
      static_cast<const get_proposals_by_status_result &>(from));
}


void get_proposals_by_status_result::MergeFrom(const get_proposals_by_status_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.get_proposals_by_status_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_proposals_by_status_result::CopyFrom(const get_proposals_by_status_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.get_proposals_by_status_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_proposals_by_status_result::IsInitialized() const {
  return true;
}

void get_proposals_by_status_result::InternalSwap(get_proposals_by_status_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_proposals_by_status_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[6]);
}

// ===================================================================

class get_proposals_arguments::_Internal {
 public:
};

get_proposals_arguments::get_proposals_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.get_proposals_arguments)
}
get_proposals_arguments::get_proposals_arguments(const get_proposals_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_proposal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_proposal().empty()) {
    start_proposal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start_proposal(), 
      GetArenaForAllocation());
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.get_proposals_arguments)
}

inline void get_proposals_arguments::SharedCtor() {
start_proposal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
limit_ = uint64_t{0u};
}

get_proposals_arguments::~get_proposals_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.get_proposals_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_proposals_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  start_proposal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_proposals_arguments::ArenaDtor(void* object) {
  get_proposals_arguments* _this = reinterpret_cast< get_proposals_arguments* >(object);
  (void)_this;
}
void get_proposals_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_proposals_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_proposals_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.get_proposals_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_proposal_.ClearToEmpty();
  limit_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_proposals_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes start_proposal = 1 [(.koinos.btype) = TRANSACTION_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start_proposal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_proposals_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.get_proposals_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes start_proposal = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_start_proposal().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_start_proposal(), target);
  }

  // uint64 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.get_proposals_arguments)
  return target;
}

size_t get_proposals_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.get_proposals_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_proposal = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_start_proposal().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_start_proposal());
  }

  // uint64 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_proposals_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_proposals_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_proposals_arguments::GetClassData() const { return &_class_data_; }

void get_proposals_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_proposals_arguments *>(to)->MergeFrom(
      static_cast<const get_proposals_arguments &>(from));
}


void get_proposals_arguments::MergeFrom(const get_proposals_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.get_proposals_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_start_proposal().empty()) {
    _internal_set_start_proposal(from._internal_start_proposal());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_proposals_arguments::CopyFrom(const get_proposals_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.get_proposals_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_proposals_arguments::IsInitialized() const {
  return true;
}

void get_proposals_arguments::InternalSwap(get_proposals_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_proposal_, GetArenaForAllocation(),
      &other->start_proposal_, other->GetArenaForAllocation()
  );
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_proposals_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[7]);
}

// ===================================================================

class get_proposals_result::_Internal {
 public:
};

get_proposals_result::get_proposals_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.get_proposals_result)
}
get_proposals_result::get_proposals_result(const get_proposals_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.get_proposals_result)
}

inline void get_proposals_result::SharedCtor() {
}

get_proposals_result::~get_proposals_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.get_proposals_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void get_proposals_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void get_proposals_result::ArenaDtor(void* object) {
  get_proposals_result* _this = reinterpret_cast< get_proposals_result* >(object);
  (void)_this;
}
void get_proposals_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_proposals_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void get_proposals_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.get_proposals_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_proposals_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .koinos.contracts.governance.proposal_record value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_proposals_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.get_proposals_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .koinos.contracts.governance.proposal_record value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.get_proposals_result)
  return target;
}

size_t get_proposals_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.get_proposals_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.contracts.governance.proposal_record value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData get_proposals_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    get_proposals_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*get_proposals_result::GetClassData() const { return &_class_data_; }

void get_proposals_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<get_proposals_result *>(to)->MergeFrom(
      static_cast<const get_proposals_result &>(from));
}


void get_proposals_result::MergeFrom(const get_proposals_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.get_proposals_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void get_proposals_result::CopyFrom(const get_proposals_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.get_proposals_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_proposals_result::IsInitialized() const {
  return true;
}

void get_proposals_result::InternalSwap(get_proposals_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_proposals_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[8]);
}

// ===================================================================

class proposal_submission_event::_Internal {
 public:
  static const ::koinos::contracts::governance::proposal_record& proposal(const proposal_submission_event* msg);
};

const ::koinos::contracts::governance::proposal_record&
proposal_submission_event::_Internal::proposal(const proposal_submission_event* msg) {
  return *msg->proposal_;
}
proposal_submission_event::proposal_submission_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.proposal_submission_event)
}
proposal_submission_event::proposal_submission_event(const proposal_submission_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_proposal()) {
    proposal_ = new ::koinos::contracts::governance::proposal_record(*from.proposal_);
  } else {
    proposal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.proposal_submission_event)
}

inline void proposal_submission_event::SharedCtor() {
proposal_ = nullptr;
}

proposal_submission_event::~proposal_submission_event() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.proposal_submission_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void proposal_submission_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete proposal_;
}

void proposal_submission_event::ArenaDtor(void* object) {
  proposal_submission_event* _this = reinterpret_cast< proposal_submission_event* >(object);
  (void)_this;
}
void proposal_submission_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void proposal_submission_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void proposal_submission_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.proposal_submission_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* proposal_submission_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .koinos.contracts.governance.proposal_record proposal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* proposal_submission_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.proposal_submission_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.contracts.governance.proposal_record proposal = 1;
  if (this->_internal_has_proposal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::proposal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.proposal_submission_event)
  return target;
}

size_t proposal_submission_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.proposal_submission_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.contracts.governance.proposal_record proposal = 1;
  if (this->_internal_has_proposal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proposal_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData proposal_submission_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    proposal_submission_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*proposal_submission_event::GetClassData() const { return &_class_data_; }

void proposal_submission_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<proposal_submission_event *>(to)->MergeFrom(
      static_cast<const proposal_submission_event &>(from));
}


void proposal_submission_event::MergeFrom(const proposal_submission_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.proposal_submission_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_proposal()) {
    _internal_mutable_proposal()->::koinos::contracts::governance::proposal_record::MergeFrom(from._internal_proposal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void proposal_submission_event::CopyFrom(const proposal_submission_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.proposal_submission_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proposal_submission_event::IsInitialized() const {
  return true;
}

void proposal_submission_event::InternalSwap(proposal_submission_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(proposal_, other->proposal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata proposal_submission_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[9]);
}

// ===================================================================

class proposal_status_event::_Internal {
 public:
};

proposal_status_event::proposal_status_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.proposal_status_event)
}
proposal_status_event::proposal_status_event(const proposal_status_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.proposal_status_event)
}

inline void proposal_status_event::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_ = 0;
}

proposal_status_event::~proposal_status_event() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.proposal_status_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void proposal_status_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void proposal_status_event::ArenaDtor(void* object) {
  proposal_status_event* _this = reinterpret_cast< proposal_status_event* >(object);
  (void)_this;
}
void proposal_status_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void proposal_status_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void proposal_status_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.proposal_status_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* proposal_status_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.contracts.governance.proposal_status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::koinos::contracts::governance::proposal_status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* proposal_status_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.proposal_status_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .koinos.contracts.governance.proposal_status status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.proposal_status_event)
  return target;
}

size_t proposal_status_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.proposal_status_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // .koinos.contracts.governance.proposal_status status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData proposal_status_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    proposal_status_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*proposal_status_event::GetClassData() const { return &_class_data_; }

void proposal_status_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<proposal_status_event *>(to)->MergeFrom(
      static_cast<const proposal_status_event &>(from));
}


void proposal_status_event::MergeFrom(const proposal_status_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.proposal_status_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void proposal_status_event::CopyFrom(const proposal_status_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.proposal_status_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proposal_status_event::IsInitialized() const {
  return true;
}

void proposal_status_event::InternalSwap(proposal_status_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata proposal_status_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[10]);
}

// ===================================================================

class proposal_vote_event::_Internal {
 public:
};

proposal_vote_event::proposal_vote_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.proposal_vote_event)
}
proposal_vote_event::proposal_vote_event(const proposal_vote_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&vote_tally_, &from.vote_tally_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_threshold_) -
    reinterpret_cast<char*>(&vote_tally_)) + sizeof(vote_threshold_));
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.proposal_vote_event)
}

inline void proposal_vote_event::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vote_tally_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vote_threshold_) -
    reinterpret_cast<char*>(&vote_tally_)) + sizeof(vote_threshold_));
}

proposal_vote_event::~proposal_vote_event() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.proposal_vote_event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void proposal_vote_event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void proposal_vote_event::ArenaDtor(void* object) {
  proposal_vote_event* _this = reinterpret_cast< proposal_vote_event* >(object);
  (void)_this;
}
void proposal_vote_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void proposal_vote_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void proposal_vote_event::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.proposal_vote_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  ::memset(&vote_tally_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vote_threshold_) -
      reinterpret_cast<char*>(&vote_tally_)) + sizeof(vote_threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* proposal_vote_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 vote_tally = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vote_tally_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 vote_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vote_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* proposal_vote_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.proposal_vote_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint64 vote_tally = 2;
  if (this->_internal_vote_tally() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_vote_tally(), target);
  }

  // uint64 vote_threshold = 3;
  if (this->_internal_vote_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_vote_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.proposal_vote_event)
  return target;
}

size_t proposal_vote_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.proposal_vote_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1 [(.koinos.btype) = TRANSACTION_ID];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // uint64 vote_tally = 2;
  if (this->_internal_vote_tally() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_vote_tally());
  }

  // uint64 vote_threshold = 3;
  if (this->_internal_vote_threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_vote_threshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData proposal_vote_event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    proposal_vote_event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*proposal_vote_event::GetClassData() const { return &_class_data_; }

void proposal_vote_event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<proposal_vote_event *>(to)->MergeFrom(
      static_cast<const proposal_vote_event &>(from));
}


void proposal_vote_event::MergeFrom(const proposal_vote_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.proposal_vote_event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_vote_tally() != 0) {
    _internal_set_vote_tally(from._internal_vote_tally());
  }
  if (from._internal_vote_threshold() != 0) {
    _internal_set_vote_threshold(from._internal_vote_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void proposal_vote_event::CopyFrom(const proposal_vote_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.proposal_vote_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool proposal_vote_event::IsInitialized() const {
  return true;
}

void proposal_vote_event::InternalSwap(proposal_vote_event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(proposal_vote_event, vote_threshold_)
      + sizeof(proposal_vote_event::vote_threshold_)
      - PROTOBUF_FIELD_OFFSET(proposal_vote_event, vote_tally_)>(
          reinterpret_cast<char*>(&vote_tally_),
          reinterpret_cast<char*>(&other->vote_tally_));
}

::PROTOBUF_NAMESPACE_ID::Metadata proposal_vote_event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[11]);
}

// ===================================================================

class block_callback_arguments::_Internal {
 public:
};

block_callback_arguments::block_callback_arguments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.block_callback_arguments)
}
block_callback_arguments::block_callback_arguments(const block_callback_arguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.block_callback_arguments)
}

inline void block_callback_arguments::SharedCtor() {
}

block_callback_arguments::~block_callback_arguments() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.block_callback_arguments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_callback_arguments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void block_callback_arguments::ArenaDtor(void* object) {
  block_callback_arguments* _this = reinterpret_cast< block_callback_arguments* >(object);
  (void)_this;
}
void block_callback_arguments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_callback_arguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_callback_arguments::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.block_callback_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_callback_arguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_callback_arguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.block_callback_arguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.block_callback_arguments)
  return target;
}

size_t block_callback_arguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.block_callback_arguments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_callback_arguments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_callback_arguments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_callback_arguments::GetClassData() const { return &_class_data_; }

void block_callback_arguments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block_callback_arguments *>(to)->MergeFrom(
      static_cast<const block_callback_arguments &>(from));
}


void block_callback_arguments::MergeFrom(const block_callback_arguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.block_callback_arguments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_callback_arguments::CopyFrom(const block_callback_arguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.block_callback_arguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_callback_arguments::IsInitialized() const {
  return true;
}

void block_callback_arguments::InternalSwap(block_callback_arguments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata block_callback_arguments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[12]);
}

// ===================================================================

class block_callback_result::_Internal {
 public:
};

block_callback_result::block_callback_result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:koinos.contracts.governance.block_callback_result)
}
block_callback_result::block_callback_result(const block_callback_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.contracts.governance.block_callback_result)
}

inline void block_callback_result::SharedCtor() {
}

block_callback_result::~block_callback_result() {
  // @@protoc_insertion_point(destructor:koinos.contracts.governance.block_callback_result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void block_callback_result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void block_callback_result::ArenaDtor(void* object) {
  block_callback_result* _this = reinterpret_cast< block_callback_result* >(object);
  (void)_this;
}
void block_callback_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void block_callback_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void block_callback_result::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.contracts.governance.block_callback_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* block_callback_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* block_callback_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.contracts.governance.block_callback_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.contracts.governance.block_callback_result)
  return target;
}

size_t block_callback_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.contracts.governance.block_callback_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData block_callback_result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    block_callback_result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*block_callback_result::GetClassData() const { return &_class_data_; }

void block_callback_result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<block_callback_result *>(to)->MergeFrom(
      static_cast<const block_callback_result &>(from));
}


void block_callback_result::MergeFrom(const block_callback_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.contracts.governance.block_callback_result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void block_callback_result::CopyFrom(const block_callback_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.contracts.governance.block_callback_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool block_callback_result::IsInitialized() const {
  return true;
}

void block_callback_result::InternalSwap(block_callback_result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata block_callback_result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_getter, &descriptor_table_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto_once,
      file_level_metadata_koinos_2fcontracts_2fgovernance_2fgovernance_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace governance
}  // namespace contracts
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::proposal_record* Arena::CreateMaybeMessage< ::koinos::contracts::governance::proposal_record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::proposal_record >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::submit_proposal_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::governance::submit_proposal_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::submit_proposal_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::submit_proposal_result* Arena::CreateMaybeMessage< ::koinos::contracts::governance::submit_proposal_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::submit_proposal_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::get_proposal_by_id_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::governance::get_proposal_by_id_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::get_proposal_by_id_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::get_proposal_by_id_result* Arena::CreateMaybeMessage< ::koinos::contracts::governance::get_proposal_by_id_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::get_proposal_by_id_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::get_proposals_by_status_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::governance::get_proposals_by_status_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::get_proposals_by_status_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::get_proposals_by_status_result* Arena::CreateMaybeMessage< ::koinos::contracts::governance::get_proposals_by_status_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::get_proposals_by_status_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::get_proposals_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::governance::get_proposals_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::get_proposals_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::get_proposals_result* Arena::CreateMaybeMessage< ::koinos::contracts::governance::get_proposals_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::get_proposals_result >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::proposal_submission_event* Arena::CreateMaybeMessage< ::koinos::contracts::governance::proposal_submission_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::proposal_submission_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::proposal_status_event* Arena::CreateMaybeMessage< ::koinos::contracts::governance::proposal_status_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::proposal_status_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::proposal_vote_event* Arena::CreateMaybeMessage< ::koinos::contracts::governance::proposal_vote_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::proposal_vote_event >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::block_callback_arguments* Arena::CreateMaybeMessage< ::koinos::contracts::governance::block_callback_arguments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::block_callback_arguments >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::contracts::governance::block_callback_result* Arena::CreateMaybeMessage< ::koinos::contracts::governance::block_callback_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::contracts::governance::block_callback_result >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
