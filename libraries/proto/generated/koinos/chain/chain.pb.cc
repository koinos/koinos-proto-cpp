// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/chain/chain.proto

#include "koinos/chain/chain.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_block_topology_koinos_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fchain_2fchain_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_head_info_koinos_2fchain_2fchain_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_active_block_data_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_block_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_call_contract_operation_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_set_system_call_operation_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_upload_contract_operation_koinos_2fprotocol_2fprotocol_2eproto;
namespace koinos {
namespace chain {
class head_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<head_info> _instance;
} _head_info_default_instance_;
class prints_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<prints_args> _instance;
} _prints_args_default_instance_;
class prints_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<prints_return> _instance;
} _prints_return_default_instance_;
class verify_block_signature_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<verify_block_signature_args> _instance;
} _verify_block_signature_args_default_instance_;
class verify_block_signature_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<verify_block_signature_return> _instance;
} _verify_block_signature_return_default_instance_;
class verify_merkle_root_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<verify_merkle_root_args> _instance;
} _verify_merkle_root_args_default_instance_;
class verify_merkle_root_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<verify_merkle_root_return> _instance;
} _verify_merkle_root_return_default_instance_;
class apply_block_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<apply_block_args> _instance;
} _apply_block_args_default_instance_;
class apply_block_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<apply_block_return> _instance;
} _apply_block_return_default_instance_;
class apply_transaction_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<apply_transaction_args> _instance;
} _apply_transaction_args_default_instance_;
class apply_transaction_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<apply_transaction_return> _instance;
} _apply_transaction_return_default_instance_;
class apply_upload_contract_operation_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<apply_upload_contract_operation_args> _instance;
} _apply_upload_contract_operation_args_default_instance_;
class apply_upload_contract_operation_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<apply_upload_contract_operation_return> _instance;
} _apply_upload_contract_operation_return_default_instance_;
class apply_call_contract_operation_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<apply_call_contract_operation_args> _instance;
} _apply_call_contract_operation_args_default_instance_;
class apply_call_contract_operation_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<apply_call_contract_operation_return> _instance;
} _apply_call_contract_operation_return_default_instance_;
class apply_set_system_call_operation_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<apply_set_system_call_operation_args> _instance;
} _apply_set_system_call_operation_args_default_instance_;
class db_put_object_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_put_object_args> _instance;
} _db_put_object_args_default_instance_;
class db_put_object_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_put_object_return> _instance;
} _db_put_object_return_default_instance_;
class db_get_object_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_get_object_args> _instance;
} _db_get_object_args_default_instance_;
class db_get_object_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_get_object_return> _instance;
} _db_get_object_return_default_instance_;
class db_get_next_object_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_get_next_object_args> _instance;
} _db_get_next_object_args_default_instance_;
class db_get_next_object_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_get_next_object_return> _instance;
} _db_get_next_object_return_default_instance_;
class db_get_prev_object_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_get_prev_object_args> _instance;
} _db_get_prev_object_args_default_instance_;
class db_get_prev_object_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<db_get_prev_object_return> _instance;
} _db_get_prev_object_return_default_instance_;
class call_contract_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<call_contract_args> _instance;
} _call_contract_args_default_instance_;
class call_contract_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<call_contract_return> _instance;
} _call_contract_return_default_instance_;
class get_entry_point_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_entry_point_args> _instance;
} _get_entry_point_args_default_instance_;
class get_entry_point_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_entry_point_return> _instance;
} _get_entry_point_return_default_instance_;
class get_contract_args_size_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_contract_args_size_args> _instance;
} _get_contract_args_size_args_default_instance_;
class get_contract_args_size_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_contract_args_size_return> _instance;
} _get_contract_args_size_return_default_instance_;
class get_contract_args_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_contract_args_args> _instance;
} _get_contract_args_args_default_instance_;
class get_contract_args_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_contract_args_return> _instance;
} _get_contract_args_return_default_instance_;
class set_contract_return_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<set_contract_return_args> _instance;
} _set_contract_return_args_default_instance_;
class set_contract_return_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<set_contract_return_return> _instance;
} _set_contract_return_return_default_instance_;
class exit_contract_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<exit_contract_args> _instance;
} _exit_contract_args_default_instance_;
class exit_contract_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<exit_contract_return> _instance;
} _exit_contract_return_default_instance_;
class get_head_info_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_head_info_args> _instance;
} _get_head_info_args_default_instance_;
class get_head_info_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_head_info_return> _instance;
} _get_head_info_return_default_instance_;
class hash_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<hash_args> _instance;
} _hash_args_default_instance_;
class hash_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<hash_return> _instance;
} _hash_return_default_instance_;
class recover_public_key_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<recover_public_key_args> _instance;
} _recover_public_key_args_default_instance_;
class recover_public_key_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<recover_public_key_return> _instance;
} _recover_public_key_return_default_instance_;
class get_transaction_payer_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_transaction_payer_args> _instance;
} _get_transaction_payer_args_default_instance_;
class get_transaction_payer_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_transaction_payer_return> _instance;
} _get_transaction_payer_return_default_instance_;
class get_max_account_resources_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_max_account_resources_args> _instance;
} _get_max_account_resources_args_default_instance_;
class get_max_account_resources_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_max_account_resources_return> _instance;
} _get_max_account_resources_return_default_instance_;
class get_transaction_resource_limit_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_transaction_resource_limit_args> _instance;
} _get_transaction_resource_limit_args_default_instance_;
class get_transaction_resource_limit_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_transaction_resource_limit_return> _instance;
} _get_transaction_resource_limit_return_default_instance_;
class get_last_irreversible_block_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_last_irreversible_block_args> _instance;
} _get_last_irreversible_block_args_default_instance_;
class get_last_irreversible_block_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_last_irreversible_block_return> _instance;
} _get_last_irreversible_block_return_default_instance_;
class get_caller_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_caller_args> _instance;
} _get_caller_args_default_instance_;
class get_caller_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_caller_return> _instance;
} _get_caller_return_default_instance_;
class require_authority_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<require_authority_args> _instance;
} _require_authority_args_default_instance_;
class require_authority_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<require_authority_return> _instance;
} _require_authority_return_default_instance_;
class get_transaction_signature_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_transaction_signature_args> _instance;
} _get_transaction_signature_args_default_instance_;
class get_transaction_signature_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_transaction_signature_return> _instance;
} _get_transaction_signature_return_default_instance_;
class get_contract_id_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_contract_id_args> _instance;
} _get_contract_id_args_default_instance_;
class get_contract_id_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_contract_id_return> _instance;
} _get_contract_id_return_default_instance_;
class get_account_nonce_argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_account_nonce_args> _instance;
} _get_account_nonce_args_default_instance_;
class get_account_nonce_returnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_account_nonce_return> _instance;
} _get_account_nonce_return_default_instance_;
}  // namespace chain
}  // namespace koinos
static void InitDefaultsscc_info_apply_block_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_apply_block_args_default_instance_;
    new (ptr) ::koinos::chain::apply_block_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_apply_block_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_apply_block_args_koinos_2fchain_2fchain_2eproto}, {
      &scc_info_block_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_apply_block_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_apply_block_return_default_instance_;
    new (ptr) ::koinos::chain::apply_block_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_apply_block_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_apply_block_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_apply_call_contract_operation_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_apply_call_contract_operation_args_default_instance_;
    new (ptr) ::koinos::chain::apply_call_contract_operation_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_apply_call_contract_operation_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_apply_call_contract_operation_args_koinos_2fchain_2fchain_2eproto}, {
      &scc_info_call_contract_operation_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_apply_call_contract_operation_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_apply_call_contract_operation_return_default_instance_;
    new (ptr) ::koinos::chain::apply_call_contract_operation_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_apply_call_contract_operation_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_apply_call_contract_operation_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_apply_set_system_call_operation_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_apply_set_system_call_operation_args_default_instance_;
    new (ptr) ::koinos::chain::apply_set_system_call_operation_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_apply_set_system_call_operation_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_apply_set_system_call_operation_args_koinos_2fchain_2fchain_2eproto}, {
      &scc_info_set_system_call_operation_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_apply_transaction_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_apply_transaction_args_default_instance_;
    new (ptr) ::koinos::chain::apply_transaction_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_apply_transaction_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_apply_transaction_args_koinos_2fchain_2fchain_2eproto}, {
      &scc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_apply_transaction_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_apply_transaction_return_default_instance_;
    new (ptr) ::koinos::chain::apply_transaction_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_apply_transaction_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_apply_transaction_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_apply_upload_contract_operation_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_apply_upload_contract_operation_args_default_instance_;
    new (ptr) ::koinos::chain::apply_upload_contract_operation_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_apply_upload_contract_operation_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_apply_upload_contract_operation_args_koinos_2fchain_2fchain_2eproto}, {
      &scc_info_upload_contract_operation_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_apply_upload_contract_operation_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_apply_upload_contract_operation_return_default_instance_;
    new (ptr) ::koinos::chain::apply_upload_contract_operation_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_apply_upload_contract_operation_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_apply_upload_contract_operation_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_call_contract_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_call_contract_args_default_instance_;
    new (ptr) ::koinos::chain::call_contract_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_call_contract_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_call_contract_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_call_contract_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_call_contract_return_default_instance_;
    new (ptr) ::koinos::chain::call_contract_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_call_contract_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_call_contract_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_db_get_next_object_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_db_get_next_object_args_default_instance_;
    new (ptr) ::koinos::chain::db_get_next_object_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_get_next_object_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_get_next_object_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_db_get_next_object_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_db_get_next_object_return_default_instance_;
    new (ptr) ::koinos::chain::db_get_next_object_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_get_next_object_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_get_next_object_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_db_get_object_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_db_get_object_args_default_instance_;
    new (ptr) ::koinos::chain::db_get_object_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_get_object_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_get_object_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_db_get_object_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_db_get_object_return_default_instance_;
    new (ptr) ::koinos::chain::db_get_object_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_get_object_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_get_object_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_db_get_prev_object_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_db_get_prev_object_args_default_instance_;
    new (ptr) ::koinos::chain::db_get_prev_object_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_get_prev_object_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_get_prev_object_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_db_get_prev_object_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_db_get_prev_object_return_default_instance_;
    new (ptr) ::koinos::chain::db_get_prev_object_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_get_prev_object_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_get_prev_object_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_db_put_object_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_db_put_object_args_default_instance_;
    new (ptr) ::koinos::chain::db_put_object_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_put_object_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_put_object_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_db_put_object_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_db_put_object_return_default_instance_;
    new (ptr) ::koinos::chain::db_put_object_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_db_put_object_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_db_put_object_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_exit_contract_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_exit_contract_args_default_instance_;
    new (ptr) ::koinos::chain::exit_contract_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_exit_contract_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_exit_contract_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_exit_contract_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_exit_contract_return_default_instance_;
    new (ptr) ::koinos::chain::exit_contract_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_exit_contract_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_exit_contract_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_account_nonce_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_account_nonce_args_default_instance_;
    new (ptr) ::koinos::chain::get_account_nonce_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_account_nonce_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_account_nonce_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_account_nonce_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_account_nonce_return_default_instance_;
    new (ptr) ::koinos::chain::get_account_nonce_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_account_nonce_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_account_nonce_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_caller_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_caller_args_default_instance_;
    new (ptr) ::koinos::chain::get_caller_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_caller_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_caller_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_caller_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_caller_return_default_instance_;
    new (ptr) ::koinos::chain::get_caller_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_caller_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_caller_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_contract_args_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_contract_args_args_default_instance_;
    new (ptr) ::koinos::chain::get_contract_args_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_contract_args_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_contract_args_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_contract_args_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_contract_args_return_default_instance_;
    new (ptr) ::koinos::chain::get_contract_args_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_contract_args_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_contract_args_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_contract_args_size_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_contract_args_size_args_default_instance_;
    new (ptr) ::koinos::chain::get_contract_args_size_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_contract_args_size_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_contract_args_size_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_contract_args_size_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_contract_args_size_return_default_instance_;
    new (ptr) ::koinos::chain::get_contract_args_size_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_contract_args_size_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_contract_args_size_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_contract_id_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_contract_id_args_default_instance_;
    new (ptr) ::koinos::chain::get_contract_id_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_contract_id_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_contract_id_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_contract_id_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_contract_id_return_default_instance_;
    new (ptr) ::koinos::chain::get_contract_id_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_contract_id_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_contract_id_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_entry_point_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_entry_point_args_default_instance_;
    new (ptr) ::koinos::chain::get_entry_point_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_entry_point_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_entry_point_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_entry_point_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_entry_point_return_default_instance_;
    new (ptr) ::koinos::chain::get_entry_point_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_entry_point_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_entry_point_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_head_info_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_head_info_args_default_instance_;
    new (ptr) ::koinos::chain::get_head_info_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_head_info_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_head_info_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_head_info_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_head_info_return_default_instance_;
    new (ptr) ::koinos::chain::get_head_info_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_get_head_info_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_get_head_info_return_koinos_2fchain_2fchain_2eproto}, {
      &scc_info_head_info_koinos_2fchain_2fchain_2eproto.base,}};

static void InitDefaultsscc_info_get_last_irreversible_block_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_last_irreversible_block_args_default_instance_;
    new (ptr) ::koinos::chain::get_last_irreversible_block_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_last_irreversible_block_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_last_irreversible_block_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_last_irreversible_block_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_last_irreversible_block_return_default_instance_;
    new (ptr) ::koinos::chain::get_last_irreversible_block_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_get_last_irreversible_block_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_get_last_irreversible_block_return_koinos_2fchain_2fchain_2eproto}, {
      &scc_info_block_topology_koinos_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_get_max_account_resources_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_max_account_resources_args_default_instance_;
    new (ptr) ::koinos::chain::get_max_account_resources_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_max_account_resources_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_max_account_resources_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_max_account_resources_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_max_account_resources_return_default_instance_;
    new (ptr) ::koinos::chain::get_max_account_resources_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_max_account_resources_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_max_account_resources_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_transaction_payer_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_transaction_payer_args_default_instance_;
    new (ptr) ::koinos::chain::get_transaction_payer_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_get_transaction_payer_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_get_transaction_payer_args_koinos_2fchain_2fchain_2eproto}, {
      &scc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_get_transaction_payer_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_transaction_payer_return_default_instance_;
    new (ptr) ::koinos::chain::get_transaction_payer_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_transaction_payer_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_transaction_payer_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_transaction_resource_limit_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_transaction_resource_limit_args_default_instance_;
    new (ptr) ::koinos::chain::get_transaction_resource_limit_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_get_transaction_resource_limit_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_get_transaction_resource_limit_args_koinos_2fchain_2fchain_2eproto}, {
      &scc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_get_transaction_resource_limit_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_transaction_resource_limit_return_default_instance_;
    new (ptr) ::koinos::chain::get_transaction_resource_limit_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_transaction_resource_limit_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_transaction_resource_limit_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_transaction_signature_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_transaction_signature_args_default_instance_;
    new (ptr) ::koinos::chain::get_transaction_signature_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_transaction_signature_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_transaction_signature_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_get_transaction_signature_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_get_transaction_signature_return_default_instance_;
    new (ptr) ::koinos::chain::get_transaction_signature_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_transaction_signature_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_transaction_signature_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_hash_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_hash_args_default_instance_;
    new (ptr) ::koinos::chain::hash_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_hash_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_hash_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_hash_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_hash_return_default_instance_;
    new (ptr) ::koinos::chain::hash_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_hash_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_hash_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_head_info_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_head_info_default_instance_;
    new (ptr) ::koinos::chain::head_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_head_info_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_head_info_koinos_2fchain_2fchain_2eproto}, {
      &scc_info_block_topology_koinos_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_prints_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_prints_args_default_instance_;
    new (ptr) ::koinos::chain::prints_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_prints_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_prints_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_prints_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_prints_return_default_instance_;
    new (ptr) ::koinos::chain::prints_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_prints_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_prints_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_recover_public_key_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_recover_public_key_args_default_instance_;
    new (ptr) ::koinos::chain::recover_public_key_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_recover_public_key_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_recover_public_key_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_recover_public_key_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_recover_public_key_return_default_instance_;
    new (ptr) ::koinos::chain::recover_public_key_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_recover_public_key_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_recover_public_key_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_require_authority_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_require_authority_args_default_instance_;
    new (ptr) ::koinos::chain::require_authority_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_require_authority_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_require_authority_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_require_authority_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_require_authority_return_default_instance_;
    new (ptr) ::koinos::chain::require_authority_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_require_authority_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_require_authority_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_set_contract_return_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_set_contract_return_args_default_instance_;
    new (ptr) ::koinos::chain::set_contract_return_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_set_contract_return_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_set_contract_return_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_set_contract_return_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_set_contract_return_return_default_instance_;
    new (ptr) ::koinos::chain::set_contract_return_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_set_contract_return_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_set_contract_return_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_verify_block_signature_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_verify_block_signature_args_default_instance_;
    new (ptr) ::koinos::chain::verify_block_signature_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_verify_block_signature_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_verify_block_signature_args_koinos_2fchain_2fchain_2eproto}, {
      &scc_info_active_block_data_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_verify_block_signature_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_verify_block_signature_return_default_instance_;
    new (ptr) ::koinos::chain::verify_block_signature_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_verify_block_signature_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_verify_block_signature_return_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_verify_merkle_root_args_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_verify_merkle_root_args_default_instance_;
    new (ptr) ::koinos::chain::verify_merkle_root_args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_verify_merkle_root_args_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_verify_merkle_root_args_koinos_2fchain_2fchain_2eproto}, {}};

static void InitDefaultsscc_info_verify_merkle_root_return_koinos_2fchain_2fchain_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::chain::_verify_merkle_root_return_default_instance_;
    new (ptr) ::koinos::chain::verify_merkle_root_return();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_verify_merkle_root_return_koinos_2fchain_2fchain_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_verify_merkle_root_return_koinos_2fchain_2fchain_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2fchain_2fchain_2eproto[60];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_koinos_2fchain_2fchain_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2fchain_2fchain_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2fchain_2fchain_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::head_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::head_info, head_topology_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::head_info, head_block_time_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::head_info, last_irreversible_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::prints_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::prints_args, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::prints_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_block_signature_args, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_block_signature_args, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_block_signature_args, digest_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_block_signature_args, signature_data_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_block_signature_args, active_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_block_signature_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_block_signature_return, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_merkle_root_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_merkle_root_args, root_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_merkle_root_args, hashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_merkle_root_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::verify_merkle_root_return, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_block_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_block_args, block_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_block_args, check_passive_data_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_block_args, check_block_signature_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_block_args, check_transaction_signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_block_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_transaction_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_transaction_args, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_transaction_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_upload_contract_operation_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_upload_contract_operation_args, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_upload_contract_operation_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_call_contract_operation_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_call_contract_operation_args, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_call_contract_operation_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_set_system_call_operation_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::apply_set_system_call_operation_args, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_put_object_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_put_object_args, space_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_put_object_args, key_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_put_object_args, obj_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_put_object_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_put_object_return, result_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_object_args, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_object_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_object_args, space_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_object_args, key_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_object_args, object_size_hint_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_object_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_object_return, result_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_next_object_args, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_next_object_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_next_object_args, space_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_next_object_args, key_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_next_object_args, object_size_hint_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_next_object_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_next_object_return, result_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_prev_object_args, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_prev_object_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_prev_object_args, space_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_prev_object_args, key_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_prev_object_args, object_size_hint_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_prev_object_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::db_get_prev_object_return, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::call_contract_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::call_contract_args, contract_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::call_contract_args, entry_point_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::call_contract_args, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::call_contract_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::call_contract_return, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_entry_point_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_entry_point_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_entry_point_return, entry_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_args_size_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_args_size_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_args_size_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_args_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_args_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_args_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::set_contract_return_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::set_contract_return_args, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::set_contract_return_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::exit_contract_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::exit_contract_args, exit_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::exit_contract_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_head_info_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_head_info_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_head_info_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::hash_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::hash_args, code_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::hash_args, obj_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::hash_args, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::hash_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::hash_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::recover_public_key_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::recover_public_key_args, signature_data_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::recover_public_key_args, digest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::recover_public_key_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::recover_public_key_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_payer_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_payer_args, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_payer_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_payer_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_max_account_resources_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_max_account_resources_args, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_max_account_resources_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_max_account_resources_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_resource_limit_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_resource_limit_args, transction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_resource_limit_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_resource_limit_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_last_irreversible_block_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_last_irreversible_block_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_last_irreversible_block_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_caller_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_caller_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_caller_return, caller_),
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_caller_return, caller_privilege_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::require_authority_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::require_authority_args, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::require_authority_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_signature_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_signature_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_transaction_signature_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_id_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_id_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_contract_id_return, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_account_nonce_args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_account_nonce_args, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_account_nonce_return, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::chain::get_account_nonce_return, nonce_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::chain::head_info)},
  { 8, -1, sizeof(::koinos::chain::prints_args)},
  { 14, -1, sizeof(::koinos::chain::prints_return)},
  { 19, -1, sizeof(::koinos::chain::verify_block_signature_args)},
  { 29, -1, sizeof(::koinos::chain::verify_block_signature_return)},
  { 35, -1, sizeof(::koinos::chain::verify_merkle_root_args)},
  { 42, -1, sizeof(::koinos::chain::verify_merkle_root_return)},
  { 48, -1, sizeof(::koinos::chain::apply_block_args)},
  { 57, -1, sizeof(::koinos::chain::apply_block_return)},
  { 62, -1, sizeof(::koinos::chain::apply_transaction_args)},
  { 68, -1, sizeof(::koinos::chain::apply_transaction_return)},
  { 73, -1, sizeof(::koinos::chain::apply_upload_contract_operation_args)},
  { 79, -1, sizeof(::koinos::chain::apply_upload_contract_operation_return)},
  { 84, -1, sizeof(::koinos::chain::apply_call_contract_operation_args)},
  { 90, -1, sizeof(::koinos::chain::apply_call_contract_operation_return)},
  { 95, -1, sizeof(::koinos::chain::apply_set_system_call_operation_args)},
  { 101, -1, sizeof(::koinos::chain::db_put_object_args)},
  { 109, -1, sizeof(::koinos::chain::db_put_object_return)},
  { 115, 123, sizeof(::koinos::chain::db_get_object_args)},
  { 126, -1, sizeof(::koinos::chain::db_get_object_return)},
  { 132, 140, sizeof(::koinos::chain::db_get_next_object_args)},
  { 143, -1, sizeof(::koinos::chain::db_get_next_object_return)},
  { 149, 157, sizeof(::koinos::chain::db_get_prev_object_args)},
  { 160, -1, sizeof(::koinos::chain::db_get_prev_object_return)},
  { 166, -1, sizeof(::koinos::chain::call_contract_args)},
  { 174, -1, sizeof(::koinos::chain::call_contract_return)},
  { 180, -1, sizeof(::koinos::chain::get_entry_point_args)},
  { 185, -1, sizeof(::koinos::chain::get_entry_point_return)},
  { 191, -1, sizeof(::koinos::chain::get_contract_args_size_args)},
  { 196, -1, sizeof(::koinos::chain::get_contract_args_size_return)},
  { 202, -1, sizeof(::koinos::chain::get_contract_args_args)},
  { 207, -1, sizeof(::koinos::chain::get_contract_args_return)},
  { 213, -1, sizeof(::koinos::chain::set_contract_return_args)},
  { 219, -1, sizeof(::koinos::chain::set_contract_return_return)},
  { 224, -1, sizeof(::koinos::chain::exit_contract_args)},
  { 230, -1, sizeof(::koinos::chain::exit_contract_return)},
  { 235, -1, sizeof(::koinos::chain::get_head_info_args)},
  { 240, -1, sizeof(::koinos::chain::get_head_info_return)},
  { 246, -1, sizeof(::koinos::chain::hash_args)},
  { 254, -1, sizeof(::koinos::chain::hash_return)},
  { 260, -1, sizeof(::koinos::chain::recover_public_key_args)},
  { 267, -1, sizeof(::koinos::chain::recover_public_key_return)},
  { 273, -1, sizeof(::koinos::chain::get_transaction_payer_args)},
  { 279, -1, sizeof(::koinos::chain::get_transaction_payer_return)},
  { 285, -1, sizeof(::koinos::chain::get_max_account_resources_args)},
  { 291, -1, sizeof(::koinos::chain::get_max_account_resources_return)},
  { 297, -1, sizeof(::koinos::chain::get_transaction_resource_limit_args)},
  { 303, -1, sizeof(::koinos::chain::get_transaction_resource_limit_return)},
  { 309, -1, sizeof(::koinos::chain::get_last_irreversible_block_args)},
  { 314, -1, sizeof(::koinos::chain::get_last_irreversible_block_return)},
  { 320, -1, sizeof(::koinos::chain::get_caller_args)},
  { 325, -1, sizeof(::koinos::chain::get_caller_return)},
  { 332, -1, sizeof(::koinos::chain::require_authority_args)},
  { 338, -1, sizeof(::koinos::chain::require_authority_return)},
  { 343, -1, sizeof(::koinos::chain::get_transaction_signature_args)},
  { 348, -1, sizeof(::koinos::chain::get_transaction_signature_return)},
  { 354, -1, sizeof(::koinos::chain::get_contract_id_args)},
  { 359, -1, sizeof(::koinos::chain::get_contract_id_return)},
  { 365, -1, sizeof(::koinos::chain::get_account_nonce_args)},
  { 371, -1, sizeof(::koinos::chain::get_account_nonce_return)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_head_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_prints_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_prints_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_verify_block_signature_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_verify_block_signature_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_verify_merkle_root_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_verify_merkle_root_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_block_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_block_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_transaction_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_transaction_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_upload_contract_operation_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_upload_contract_operation_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_call_contract_operation_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_call_contract_operation_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_apply_set_system_call_operation_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_db_put_object_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_db_put_object_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_db_get_object_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_db_get_object_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_db_get_next_object_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_db_get_next_object_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_db_get_prev_object_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_db_get_prev_object_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_call_contract_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_call_contract_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_entry_point_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_entry_point_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_contract_args_size_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_contract_args_size_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_contract_args_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_contract_args_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_set_contract_return_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_set_contract_return_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_exit_contract_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_exit_contract_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_head_info_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_head_info_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_hash_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_hash_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_recover_public_key_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_recover_public_key_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_transaction_payer_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_transaction_payer_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_max_account_resources_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_max_account_resources_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_transaction_resource_limit_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_transaction_resource_limit_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_last_irreversible_block_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_last_irreversible_block_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_caller_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_caller_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_require_authority_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_require_authority_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_transaction_signature_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_transaction_signature_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_contract_id_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_contract_id_return_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_account_nonce_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::chain::_get_account_nonce_return_default_instance_),
};

const char descriptor_table_protodef_koinos_2fchain_2fchain_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030koinos/chain/chain.proto\022\014koinos.chain"
  "\032\023koinos/common.proto\032\036koinos/protocol/p"
  "rotocol.proto\"t\n\thead_info\022-\n\rhead_topol"
  "ogy\030\001 \001(\0132\026.koinos.block_topology\022\027\n\017hea"
  "d_block_time\030\002 \001(\004\022\037\n\027last_irreversible_"
  "block\030\003 \001(\004\"\036\n\013prints_args\022\017\n\007message\030\001 "
  "\001(\t\"\017\n\rprints_return\"\250\001\n\033verify_block_si"
  "gnature_args\022\016\n\006digest\030\001 \001(\014\022;\n\ractive_n"
  "ative\030\002 \001(\0132\".koinos.protocol.active_blo"
  "ck_dataH\000\022\025\n\013active_blob\030\003 \001(\014H\000\022\026\n\016sign"
  "ature_data\030\004 \001(\014B\r\n\013active_data\"/\n\035verif"
  "y_block_signature_return\022\016\n\006result\030\001 \001(\010"
  "\"7\n\027verify_merkle_root_args\022\014\n\004root\030\001 \001("
  "\014\022\016\n\006hashes\030\002 \003(\014\"+\n\031verify_merkle_root_"
  "return\022\016\n\006result\030\001 \001(\010\"\231\001\n\020apply_block_a"
  "rgs\022%\n\005block\030\001 \001(\0132\026.koinos.protocol.blo"
  "ck\022\032\n\022check_passive_data\030\002 \001(\010\022\035\n\025check_"
  "block_signature\030\003 \001(\010\022#\n\033check_transacti"
  "on_signature\030\004 \001(\010\"\024\n\022apply_block_return"
  "\"K\n\026apply_transaction_args\0221\n\013transactio"
  "n\030\001 \001(\0132\034.koinos.protocol.transaction\"\032\n"
  "\030apply_transaction_return\"^\n$apply_uploa"
  "d_contract_operation_args\0226\n\002op\030\001 \001(\0132*."
  "koinos.protocol.upload_contract_operatio"
  "n\"(\n&apply_upload_contract_operation_ret"
  "urn\"Z\n\"apply_call_contract_operation_arg"
  "s\0224\n\002op\030\001 \001(\0132(.koinos.protocol.call_con"
  "tract_operation\"&\n$apply_call_contract_o"
  "peration_return\"^\n$apply_set_system_call"
  "_operation_args\0226\n\002op\030\001 \001(\0132*.koinos.pro"
  "tocol.set_system_call_operation\"=\n\022db_pu"
  "t_object_args\022\r\n\005space\030\001 \001(\014\022\013\n\003key\030\002 \001("
  "\014\022\013\n\003obj\030\003 \001(\014\"&\n\024db_put_object_return\022\016"
  "\n\006result\030\001 \001(\010\"d\n\022db_get_object_args\022\r\n\005"
  "space\030\001 \001(\014\022\013\n\003key\030\002 \001(\014\022\035\n\020object_size_"
  "hint\030\003 \001(\rH\000\210\001\001B\023\n\021_object_size_hint\"&\n\024"
  "db_get_object_return\022\016\n\006result\030\003 \001(\014\"i\n\027"
  "db_get_next_object_args\022\r\n\005space\030\001 \001(\014\022\013"
  "\n\003key\030\002 \001(\014\022\035\n\020object_size_hint\030\003 \001(\rH\000\210"
  "\001\001B\023\n\021_object_size_hint\"+\n\031db_get_next_o"
  "bject_return\022\016\n\006result\030\003 \001(\014\"i\n\027db_get_p"
  "rev_object_args\022\r\n\005space\030\001 \001(\014\022\013\n\003key\030\002 "
  "\001(\014\022\035\n\020object_size_hint\030\003 \001(\rH\000\210\001\001B\023\n\021_o"
  "bject_size_hint\"+\n\031db_get_prev_object_re"
  "turn\022\016\n\006result\030\003 \001(\014\"L\n\022call_contract_ar"
  "gs\022\023\n\013contract_id\030\001 \001(\014\022\023\n\013entry_point\030\002"
  " \001(\r\022\014\n\004args\030\003 \001(\014\"&\n\024call_contract_retu"
  "rn\022\016\n\006result\030\001 \001(\014\"\026\n\024get_entry_point_ar"
  "gs\"-\n\026get_entry_point_return\022\023\n\013entry_po"
  "int\030\001 \001(\r\"\035\n\033get_contract_args_size_args"
  "\".\n\035get_contract_args_size_return\022\r\n\005val"
  "ue\030\001 \001(\r\"\030\n\026get_contract_args_args\")\n\030ge"
  "t_contract_args_return\022\r\n\005value\030\001 \001(\014\")\n"
  "\030set_contract_return_args\022\r\n\005value\030\001 \001(\014"
  "\"\034\n\032set_contract_return_return\"\'\n\022exit_c"
  "ontract_args\022\021\n\texit_code\030\001 \001(\r\"\026\n\024exit_"
  "contract_return\"\024\n\022get_head_info_args\">\n"
  "\024get_head_info_return\022&\n\005value\030\001 \001(\0132\027.k"
  "oinos.chain.head_info\"4\n\thash_args\022\014\n\004co"
  "de\030\001 \001(\004\022\013\n\003obj\030\002 \001(\014\022\014\n\004size\030\003 \001(\004\"\034\n\013h"
  "ash_return\022\r\n\005value\030\001 \001(\014\"A\n\027recover_pub"
  "lic_key_args\022\026\n\016signature_data\030\001 \001(\014\022\016\n\006"
  "digest\030\002 \001(\014\"*\n\031recover_public_key_retur"
  "n\022\r\n\005value\030\001 \001(\014\"O\n\032get_transaction_paye"
  "r_args\0221\n\013transaction\030\001 \001(\0132\034.koinos.pro"
  "tocol.transaction\"-\n\034get_transaction_pay"
  "er_return\022\r\n\005value\030\001 \001(\014\"1\n\036get_max_acco"
  "unt_resources_args\022\017\n\007account\030\001 \001(\014\"1\n g"
  "et_max_account_resources_return\022\r\n\005value"
  "\030\001 \001(\004\"W\n#get_transaction_resource_limit"
  "_args\0220\n\ntransction\030\001 \001(\0132\034.koinos.proto"
  "col.transaction\"6\n%get_transaction_resou"
  "rce_limit_return\022\r\n\005value\030\001 \001(\004\"\"\n get_l"
  "ast_irreversible_block_args\"K\n\"get_last_"
  "irreversible_block_return\022%\n\005value\030\001 \001(\013"
  "2\026.koinos.block_topology\"\021\n\017get_caller_a"
  "rgs\"V\n\021get_caller_return\022\016\n\006caller\030\001 \001(\014"
  "\0221\n\020caller_privilege\030\002 \001(\0162\027.koinos.chai"
  "n.privilege\")\n\026require_authority_args\022\017\n"
  "\007account\030\001 \001(\014\"\032\n\030require_authority_retu"
  "rn\" \n\036get_transaction_signature_args\"1\n "
  "get_transaction_signature_return\022\r\n\005valu"
  "e\030\001 \001(\014\"\026\n\024get_contract_id_args\"\'\n\026get_c"
  "ontract_id_return\022\r\n\005value\030\001 \001(\014\")\n\026get_"
  "account_nonce_args\022\017\n\007account\030\001 \001(\014\")\n\030g"
  "et_account_nonce_return\022\r\n\005nonce\030\001 \001(\004*+"
  "\n\tprivilege\022\017\n\013kernel_mode\020\000\022\r\n\tuser_mod"
  "e\020\001B4Z2github.com/koinos/koinos-proto-go"
  "lang/koinos/chainb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2fchain_2fchain_2eproto_deps[2] = {
  &::descriptor_table_koinos_2fcommon_2eproto,
  &::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_koinos_2fchain_2fchain_2eproto_sccs[60] = {
  &scc_info_apply_block_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_apply_block_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_apply_call_contract_operation_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_apply_call_contract_operation_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_apply_set_system_call_operation_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_apply_transaction_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_apply_transaction_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_apply_upload_contract_operation_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_apply_upload_contract_operation_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_call_contract_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_call_contract_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_db_get_next_object_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_db_get_next_object_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_db_get_object_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_db_get_object_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_db_get_prev_object_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_db_get_prev_object_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_db_put_object_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_db_put_object_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_exit_contract_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_exit_contract_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_account_nonce_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_account_nonce_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_caller_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_caller_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_contract_args_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_contract_args_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_contract_args_size_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_contract_args_size_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_contract_id_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_contract_id_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_entry_point_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_entry_point_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_head_info_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_head_info_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_last_irreversible_block_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_last_irreversible_block_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_max_account_resources_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_max_account_resources_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_transaction_payer_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_transaction_payer_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_transaction_resource_limit_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_transaction_resource_limit_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_transaction_signature_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_get_transaction_signature_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_hash_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_hash_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_head_info_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_prints_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_prints_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_recover_public_key_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_recover_public_key_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_require_authority_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_require_authority_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_set_contract_return_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_set_contract_return_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_verify_block_signature_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_verify_block_signature_return_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_verify_merkle_root_args_koinos_2fchain_2fchain_2eproto.base,
  &scc_info_verify_merkle_root_return_koinos_2fchain_2fchain_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2fchain_2fchain_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fchain_2fchain_2eproto = {
  false, false, descriptor_table_protodef_koinos_2fchain_2fchain_2eproto, "koinos/chain/chain.proto", 3545,
  &descriptor_table_koinos_2fchain_2fchain_2eproto_once, descriptor_table_koinos_2fchain_2fchain_2eproto_sccs, descriptor_table_koinos_2fchain_2fchain_2eproto_deps, 60, 2,
  schemas, file_default_instances, TableStruct_koinos_2fchain_2fchain_2eproto::offsets,
  file_level_metadata_koinos_2fchain_2fchain_2eproto, 60, file_level_enum_descriptors_koinos_2fchain_2fchain_2eproto, file_level_service_descriptors_koinos_2fchain_2fchain_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_koinos_2fchain_2fchain_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_koinos_2fchain_2fchain_2eproto)), true);
namespace koinos {
namespace chain {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* privilege_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_koinos_2fchain_2fchain_2eproto);
  return file_level_enum_descriptors_koinos_2fchain_2fchain_2eproto[0];
}
bool privilege_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class head_info::_Internal {
 public:
  static const ::koinos::block_topology& head_topology(const head_info* msg);
};

const ::koinos::block_topology&
head_info::_Internal::head_topology(const head_info* msg) {
  return *msg->head_topology_;
}
void head_info::clear_head_topology() {
  if (GetArena() == nullptr && head_topology_ != nullptr) {
    delete head_topology_;
  }
  head_topology_ = nullptr;
}
head_info::head_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.head_info)
}
head_info::head_info(const head_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head_topology()) {
    head_topology_ = new ::koinos::block_topology(*from.head_topology_);
  } else {
    head_topology_ = nullptr;
  }
  ::memcpy(&head_block_time_, &from.head_block_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_irreversible_block_) -
    reinterpret_cast<char*>(&head_block_time_)) + sizeof(last_irreversible_block_));
  // @@protoc_insertion_point(copy_constructor:koinos.chain.head_info)
}

void head_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_head_info_koinos_2fchain_2fchain_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&head_topology_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&last_irreversible_block_) -
      reinterpret_cast<char*>(&head_topology_)) + sizeof(last_irreversible_block_));
}

head_info::~head_info() {
  // @@protoc_insertion_point(destructor:koinos.chain.head_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void head_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete head_topology_;
}

void head_info::ArenaDtor(void* object) {
  head_info* _this = reinterpret_cast< head_info* >(object);
  (void)_this;
}
void head_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void head_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const head_info& head_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_head_info_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void head_info::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.head_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && head_topology_ != nullptr) {
    delete head_topology_;
  }
  head_topology_ = nullptr;
  ::memset(&head_block_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_irreversible_block_) -
      reinterpret_cast<char*>(&head_block_time_)) + sizeof(last_irreversible_block_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* head_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.block_topology head_topology = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_topology(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 head_block_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          head_block_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_irreversible_block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_irreversible_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* head_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.head_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.block_topology head_topology = 1;
  if (this->has_head_topology()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::head_topology(this), target, stream);
  }

  // uint64 head_block_time = 2;
  if (this->head_block_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_head_block_time(), target);
  }

  // uint64 last_irreversible_block = 3;
  if (this->last_irreversible_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_irreversible_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.head_info)
  return target;
}

size_t head_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.head_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.block_topology head_topology = 1;
  if (this->has_head_topology()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_topology_);
  }

  // uint64 head_block_time = 2;
  if (this->head_block_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_head_block_time());
  }

  // uint64 last_irreversible_block = 3;
  if (this->last_irreversible_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_irreversible_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void head_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.head_info)
  GOOGLE_DCHECK_NE(&from, this);
  const head_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<head_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.head_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.head_info)
    MergeFrom(*source);
  }
}

void head_info::MergeFrom(const head_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.head_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head_topology()) {
    _internal_mutable_head_topology()->::koinos::block_topology::MergeFrom(from._internal_head_topology());
  }
  if (from.head_block_time() != 0) {
    _internal_set_head_block_time(from._internal_head_block_time());
  }
  if (from.last_irreversible_block() != 0) {
    _internal_set_last_irreversible_block(from._internal_last_irreversible_block());
  }
}

void head_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.head_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void head_info::CopyFrom(const head_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.head_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool head_info::IsInitialized() const {
  return true;
}

void head_info::InternalSwap(head_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(head_info, last_irreversible_block_)
      + sizeof(head_info::last_irreversible_block_)
      - PROTOBUF_FIELD_OFFSET(head_info, head_topology_)>(
          reinterpret_cast<char*>(&head_topology_),
          reinterpret_cast<char*>(&other->head_topology_));
}

::PROTOBUF_NAMESPACE_ID::Metadata head_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class prints_args::_Internal {
 public:
};

prints_args::prints_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.prints_args)
}
prints_args::prints_args(const prints_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.prints_args)
}

void prints_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_prints_args_koinos_2fchain_2fchain_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

prints_args::~prints_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.prints_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void prints_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void prints_args::ArenaDtor(void* object) {
  prints_args* _this = reinterpret_cast< prints_args* >(object);
  (void)_this;
}
void prints_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void prints_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const prints_args& prints_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_prints_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void prints_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.prints_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* prints_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.chain.prints_args.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* prints_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.prints_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.chain.prints_args.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.prints_args)
  return target;
}

size_t prints_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.prints_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void prints_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.prints_args)
  GOOGLE_DCHECK_NE(&from, this);
  const prints_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<prints_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.prints_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.prints_args)
    MergeFrom(*source);
  }
}

void prints_args::MergeFrom(const prints_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.prints_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void prints_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.prints_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void prints_args::CopyFrom(const prints_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.prints_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool prints_args::IsInitialized() const {
  return true;
}

void prints_args::InternalSwap(prints_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata prints_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class prints_return::_Internal {
 public:
};

prints_return::prints_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.prints_return)
}
prints_return::prints_return(const prints_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.prints_return)
}

void prints_return::SharedCtor() {
}

prints_return::~prints_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.prints_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void prints_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void prints_return::ArenaDtor(void* object) {
  prints_return* _this = reinterpret_cast< prints_return* >(object);
  (void)_this;
}
void prints_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void prints_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const prints_return& prints_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_prints_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void prints_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.prints_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* prints_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* prints_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.prints_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.prints_return)
  return target;
}

size_t prints_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.prints_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void prints_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.prints_return)
  GOOGLE_DCHECK_NE(&from, this);
  const prints_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<prints_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.prints_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.prints_return)
    MergeFrom(*source);
  }
}

void prints_return::MergeFrom(const prints_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.prints_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void prints_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.prints_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void prints_return::CopyFrom(const prints_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.prints_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool prints_return::IsInitialized() const {
  return true;
}

void prints_return::InternalSwap(prints_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata prints_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class verify_block_signature_args::_Internal {
 public:
  static const ::koinos::protocol::active_block_data& active_native(const verify_block_signature_args* msg);
};

const ::koinos::protocol::active_block_data&
verify_block_signature_args::_Internal::active_native(const verify_block_signature_args* msg) {
  return *msg->active_data_.active_native_;
}
void verify_block_signature_args::set_allocated_active_native(::koinos::protocol::active_block_data* active_native) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_active_data();
  if (active_native) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(active_native)->GetArena();
    if (message_arena != submessage_arena) {
      active_native = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, active_native, submessage_arena);
    }
    set_has_active_native();
    active_data_.active_native_ = active_native;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.verify_block_signature_args.active_native)
}
void verify_block_signature_args::clear_active_native() {
  if (_internal_has_active_native()) {
    if (GetArena() == nullptr) {
      delete active_data_.active_native_;
    }
    clear_has_active_data();
  }
}
verify_block_signature_args::verify_block_signature_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.verify_block_signature_args)
}
verify_block_signature_args::verify_block_signature_args(const verify_block_signature_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_digest().empty()) {
    digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digest(), 
      GetArena());
  }
  signature_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature_data().empty()) {
    signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature_data(), 
      GetArena());
  }
  clear_has_active_data();
  switch (from.active_data_case()) {
    case kActiveNative: {
      _internal_mutable_active_native()->::koinos::protocol::active_block_data::MergeFrom(from._internal_active_native());
      break;
    }
    case kActiveBlob: {
      _internal_set_active_blob(from._internal_active_blob());
      break;
    }
    case ACTIVE_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.verify_block_signature_args)
}

void verify_block_signature_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_verify_block_signature_args_koinos_2fchain_2fchain_2eproto.base);
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_active_data();
}

verify_block_signature_args::~verify_block_signature_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.verify_block_signature_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void verify_block_signature_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_active_data()) {
    clear_active_data();
  }
}

void verify_block_signature_args::ArenaDtor(void* object) {
  verify_block_signature_args* _this = reinterpret_cast< verify_block_signature_args* >(object);
  (void)_this;
}
void verify_block_signature_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void verify_block_signature_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const verify_block_signature_args& verify_block_signature_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_verify_block_signature_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void verify_block_signature_args::clear_active_data() {
// @@protoc_insertion_point(one_of_clear_start:koinos.chain.verify_block_signature_args)
  switch (active_data_case()) {
    case kActiveNative: {
      if (GetArena() == nullptr) {
        delete active_data_.active_native_;
      }
      break;
    }
    case kActiveBlob: {
      active_data_.active_blob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case ACTIVE_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTIVE_DATA_NOT_SET;
}


void verify_block_signature_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.verify_block_signature_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  digest_.ClearToEmpty();
  signature_data_.ClearToEmpty();
  clear_active_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* verify_block_signature_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes digest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.protocol.active_block_data active_native = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_native(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes active_blob = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_active_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_signature_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* verify_block_signature_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.verify_block_signature_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes digest = 1;
  if (this->digest().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_digest(), target);
  }

  // .koinos.protocol.active_block_data active_native = 2;
  if (_internal_has_active_native()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::active_native(this), target, stream);
  }

  // bytes active_blob = 3;
  if (_internal_has_active_blob()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_active_blob(), target);
  }

  // bytes signature_data = 4;
  if (this->signature_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_signature_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.verify_block_signature_args)
  return target;
}

size_t verify_block_signature_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.verify_block_signature_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes digest = 1;
  if (this->digest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }

  // bytes signature_data = 4;
  if (this->signature_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature_data());
  }

  switch (active_data_case()) {
    // .koinos.protocol.active_block_data active_native = 2;
    case kActiveNative: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *active_data_.active_native_);
      break;
    }
    // bytes active_blob = 3;
    case kActiveBlob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_active_blob());
      break;
    }
    case ACTIVE_DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void verify_block_signature_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.verify_block_signature_args)
  GOOGLE_DCHECK_NE(&from, this);
  const verify_block_signature_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<verify_block_signature_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.verify_block_signature_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.verify_block_signature_args)
    MergeFrom(*source);
  }
}

void verify_block_signature_args::MergeFrom(const verify_block_signature_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.verify_block_signature_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.digest().size() > 0) {
    _internal_set_digest(from._internal_digest());
  }
  if (from.signature_data().size() > 0) {
    _internal_set_signature_data(from._internal_signature_data());
  }
  switch (from.active_data_case()) {
    case kActiveNative: {
      _internal_mutable_active_native()->::koinos::protocol::active_block_data::MergeFrom(from._internal_active_native());
      break;
    }
    case kActiveBlob: {
      _internal_set_active_blob(from._internal_active_blob());
      break;
    }
    case ACTIVE_DATA_NOT_SET: {
      break;
    }
  }
}

void verify_block_signature_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.verify_block_signature_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_block_signature_args::CopyFrom(const verify_block_signature_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.verify_block_signature_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_block_signature_args::IsInitialized() const {
  return true;
}

void verify_block_signature_args::InternalSwap(verify_block_signature_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  digest_.Swap(&other->digest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_data_.Swap(&other->signature_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(active_data_, other->active_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata verify_block_signature_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class verify_block_signature_return::_Internal {
 public:
};

verify_block_signature_return::verify_block_signature_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.verify_block_signature_return)
}
verify_block_signature_return::verify_block_signature_return(const verify_block_signature_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.verify_block_signature_return)
}

void verify_block_signature_return::SharedCtor() {
  result_ = false;
}

verify_block_signature_return::~verify_block_signature_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.verify_block_signature_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void verify_block_signature_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void verify_block_signature_return::ArenaDtor(void* object) {
  verify_block_signature_return* _this = reinterpret_cast< verify_block_signature_return* >(object);
  (void)_this;
}
void verify_block_signature_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void verify_block_signature_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const verify_block_signature_return& verify_block_signature_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_verify_block_signature_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void verify_block_signature_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.verify_block_signature_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* verify_block_signature_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* verify_block_signature_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.verify_block_signature_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.verify_block_signature_return)
  return target;
}

size_t verify_block_signature_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.verify_block_signature_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void verify_block_signature_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.verify_block_signature_return)
  GOOGLE_DCHECK_NE(&from, this);
  const verify_block_signature_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<verify_block_signature_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.verify_block_signature_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.verify_block_signature_return)
    MergeFrom(*source);
  }
}

void verify_block_signature_return::MergeFrom(const verify_block_signature_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.verify_block_signature_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void verify_block_signature_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.verify_block_signature_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_block_signature_return::CopyFrom(const verify_block_signature_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.verify_block_signature_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_block_signature_return::IsInitialized() const {
  return true;
}

void verify_block_signature_return::InternalSwap(verify_block_signature_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata verify_block_signature_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class verify_merkle_root_args::_Internal {
 public:
};

verify_merkle_root_args::verify_merkle_root_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hashes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.verify_merkle_root_args)
}
verify_merkle_root_args::verify_merkle_root_args(const verify_merkle_root_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hashes_(from.hashes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_root().empty()) {
    root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_root(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.verify_merkle_root_args)
}

void verify_merkle_root_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_verify_merkle_root_args_koinos_2fchain_2fchain_2eproto.base);
  root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

verify_merkle_root_args::~verify_merkle_root_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.verify_merkle_root_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void verify_merkle_root_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void verify_merkle_root_args::ArenaDtor(void* object) {
  verify_merkle_root_args* _this = reinterpret_cast< verify_merkle_root_args* >(object);
  (void)_this;
}
void verify_merkle_root_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void verify_merkle_root_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const verify_merkle_root_args& verify_merkle_root_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_verify_merkle_root_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void verify_merkle_root_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.verify_merkle_root_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashes_.Clear();
  root_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* verify_merkle_root_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes hashes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hashes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* verify_merkle_root_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.verify_merkle_root_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes root = 1;
  if (this->root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_root(), target);
  }

  // repeated bytes hashes = 2;
  for (int i = 0, n = this->_internal_hashes_size(); i < n; i++) {
    const auto& s = this->_internal_hashes(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.verify_merkle_root_args)
  return target;
}

size_t verify_merkle_root_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.verify_merkle_root_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes hashes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hashes_.size());
  for (int i = 0, n = hashes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      hashes_.Get(i));
  }

  // bytes root = 1;
  if (this->root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_root());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void verify_merkle_root_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.verify_merkle_root_args)
  GOOGLE_DCHECK_NE(&from, this);
  const verify_merkle_root_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<verify_merkle_root_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.verify_merkle_root_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.verify_merkle_root_args)
    MergeFrom(*source);
  }
}

void verify_merkle_root_args::MergeFrom(const verify_merkle_root_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.verify_merkle_root_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashes_.MergeFrom(from.hashes_);
  if (from.root().size() > 0) {
    _internal_set_root(from._internal_root());
  }
}

void verify_merkle_root_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.verify_merkle_root_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_merkle_root_args::CopyFrom(const verify_merkle_root_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.verify_merkle_root_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_merkle_root_args::IsInitialized() const {
  return true;
}

void verify_merkle_root_args::InternalSwap(verify_merkle_root_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hashes_.InternalSwap(&other->hashes_);
  root_.Swap(&other->root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata verify_merkle_root_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class verify_merkle_root_return::_Internal {
 public:
};

verify_merkle_root_return::verify_merkle_root_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.verify_merkle_root_return)
}
verify_merkle_root_return::verify_merkle_root_return(const verify_merkle_root_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.verify_merkle_root_return)
}

void verify_merkle_root_return::SharedCtor() {
  result_ = false;
}

verify_merkle_root_return::~verify_merkle_root_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.verify_merkle_root_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void verify_merkle_root_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void verify_merkle_root_return::ArenaDtor(void* object) {
  verify_merkle_root_return* _this = reinterpret_cast< verify_merkle_root_return* >(object);
  (void)_this;
}
void verify_merkle_root_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void verify_merkle_root_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const verify_merkle_root_return& verify_merkle_root_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_verify_merkle_root_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void verify_merkle_root_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.verify_merkle_root_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* verify_merkle_root_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* verify_merkle_root_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.verify_merkle_root_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.verify_merkle_root_return)
  return target;
}

size_t verify_merkle_root_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.verify_merkle_root_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void verify_merkle_root_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.verify_merkle_root_return)
  GOOGLE_DCHECK_NE(&from, this);
  const verify_merkle_root_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<verify_merkle_root_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.verify_merkle_root_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.verify_merkle_root_return)
    MergeFrom(*source);
  }
}

void verify_merkle_root_return::MergeFrom(const verify_merkle_root_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.verify_merkle_root_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void verify_merkle_root_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.verify_merkle_root_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_merkle_root_return::CopyFrom(const verify_merkle_root_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.verify_merkle_root_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_merkle_root_return::IsInitialized() const {
  return true;
}

void verify_merkle_root_return::InternalSwap(verify_merkle_root_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata verify_merkle_root_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class apply_block_args::_Internal {
 public:
  static const ::koinos::protocol::block& block(const apply_block_args* msg);
};

const ::koinos::protocol::block&
apply_block_args::_Internal::block(const apply_block_args* msg) {
  return *msg->block_;
}
void apply_block_args::clear_block() {
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
apply_block_args::apply_block_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_block_args)
}
apply_block_args::apply_block_args(const apply_block_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::koinos::protocol::block(*from.block_);
  } else {
    block_ = nullptr;
  }
  ::memcpy(&check_passive_data_, &from.check_passive_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&check_transaction_signature_) -
    reinterpret_cast<char*>(&check_passive_data_)) + sizeof(check_transaction_signature_));
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_block_args)
}

void apply_block_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_apply_block_args_koinos_2fchain_2fchain_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&check_transaction_signature_) -
      reinterpret_cast<char*>(&block_)) + sizeof(check_transaction_signature_));
}

apply_block_args::~apply_block_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_block_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void apply_block_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void apply_block_args::ArenaDtor(void* object) {
  apply_block_args* _this = reinterpret_cast< apply_block_args* >(object);
  (void)_this;
}
void apply_block_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_block_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const apply_block_args& apply_block_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_apply_block_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void apply_block_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_block_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  ::memset(&check_passive_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&check_transaction_signature_) -
      reinterpret_cast<char*>(&check_passive_data_)) + sizeof(check_transaction_signature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_block_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool check_passive_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          check_passive_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool check_block_signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          check_block_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool check_transaction_signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          check_transaction_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_block_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_block_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.block block = 1;
  if (this->has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  // bool check_passive_data = 2;
  if (this->check_passive_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_check_passive_data(), target);
  }

  // bool check_block_signature = 3;
  if (this->check_block_signature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_check_block_signature(), target);
  }

  // bool check_transaction_signature = 4;
  if (this->check_transaction_signature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_check_transaction_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_block_args)
  return target;
}

size_t apply_block_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_block_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.block block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // bool check_passive_data = 2;
  if (this->check_passive_data() != 0) {
    total_size += 1 + 1;
  }

  // bool check_block_signature = 3;
  if (this->check_block_signature() != 0) {
    total_size += 1 + 1;
  }

  // bool check_transaction_signature = 4;
  if (this->check_transaction_signature() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void apply_block_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.apply_block_args)
  GOOGLE_DCHECK_NE(&from, this);
  const apply_block_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<apply_block_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.apply_block_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.apply_block_args)
    MergeFrom(*source);
  }
}

void apply_block_args::MergeFrom(const apply_block_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_block_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    _internal_mutable_block()->::koinos::protocol::block::MergeFrom(from._internal_block());
  }
  if (from.check_passive_data() != 0) {
    _internal_set_check_passive_data(from._internal_check_passive_data());
  }
  if (from.check_block_signature() != 0) {
    _internal_set_check_block_signature(from._internal_check_block_signature());
  }
  if (from.check_transaction_signature() != 0) {
    _internal_set_check_transaction_signature(from._internal_check_transaction_signature());
  }
}

void apply_block_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.apply_block_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_block_args::CopyFrom(const apply_block_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_block_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_block_args::IsInitialized() const {
  return true;
}

void apply_block_args::InternalSwap(apply_block_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(apply_block_args, check_transaction_signature_)
      + sizeof(apply_block_args::check_transaction_signature_)
      - PROTOBUF_FIELD_OFFSET(apply_block_args, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_block_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class apply_block_return::_Internal {
 public:
};

apply_block_return::apply_block_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_block_return)
}
apply_block_return::apply_block_return(const apply_block_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_block_return)
}

void apply_block_return::SharedCtor() {
}

apply_block_return::~apply_block_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_block_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void apply_block_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void apply_block_return::ArenaDtor(void* object) {
  apply_block_return* _this = reinterpret_cast< apply_block_return* >(object);
  (void)_this;
}
void apply_block_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_block_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const apply_block_return& apply_block_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_apply_block_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void apply_block_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_block_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_block_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_block_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_block_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_block_return)
  return target;
}

size_t apply_block_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_block_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void apply_block_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.apply_block_return)
  GOOGLE_DCHECK_NE(&from, this);
  const apply_block_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<apply_block_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.apply_block_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.apply_block_return)
    MergeFrom(*source);
  }
}

void apply_block_return::MergeFrom(const apply_block_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_block_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void apply_block_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.apply_block_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_block_return::CopyFrom(const apply_block_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_block_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_block_return::IsInitialized() const {
  return true;
}

void apply_block_return::InternalSwap(apply_block_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_block_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class apply_transaction_args::_Internal {
 public:
  static const ::koinos::protocol::transaction& transaction(const apply_transaction_args* msg);
};

const ::koinos::protocol::transaction&
apply_transaction_args::_Internal::transaction(const apply_transaction_args* msg) {
  return *msg->transaction_;
}
void apply_transaction_args::clear_transaction() {
  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
apply_transaction_args::apply_transaction_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_transaction_args)
}
apply_transaction_args::apply_transaction_args(const apply_transaction_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::koinos::protocol::transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_transaction_args)
}

void apply_transaction_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_apply_transaction_args_koinos_2fchain_2fchain_2eproto.base);
  transaction_ = nullptr;
}

apply_transaction_args::~apply_transaction_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_transaction_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void apply_transaction_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void apply_transaction_args::ArenaDtor(void* object) {
  apply_transaction_args* _this = reinterpret_cast< apply_transaction_args* >(object);
  (void)_this;
}
void apply_transaction_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_transaction_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const apply_transaction_args& apply_transaction_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_apply_transaction_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void apply_transaction_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_transaction_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_transaction_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_transaction_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_transaction_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_transaction_args)
  return target;
}

size_t apply_transaction_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_transaction_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void apply_transaction_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.apply_transaction_args)
  GOOGLE_DCHECK_NE(&from, this);
  const apply_transaction_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<apply_transaction_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.apply_transaction_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.apply_transaction_args)
    MergeFrom(*source);
  }
}

void apply_transaction_args::MergeFrom(const apply_transaction_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_transaction_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transaction()) {
    _internal_mutable_transaction()->::koinos::protocol::transaction::MergeFrom(from._internal_transaction());
  }
}

void apply_transaction_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.apply_transaction_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_transaction_args::CopyFrom(const apply_transaction_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_transaction_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_transaction_args::IsInitialized() const {
  return true;
}

void apply_transaction_args::InternalSwap(apply_transaction_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_transaction_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class apply_transaction_return::_Internal {
 public:
};

apply_transaction_return::apply_transaction_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_transaction_return)
}
apply_transaction_return::apply_transaction_return(const apply_transaction_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_transaction_return)
}

void apply_transaction_return::SharedCtor() {
}

apply_transaction_return::~apply_transaction_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_transaction_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void apply_transaction_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void apply_transaction_return::ArenaDtor(void* object) {
  apply_transaction_return* _this = reinterpret_cast< apply_transaction_return* >(object);
  (void)_this;
}
void apply_transaction_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_transaction_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const apply_transaction_return& apply_transaction_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_apply_transaction_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void apply_transaction_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_transaction_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_transaction_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_transaction_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_transaction_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_transaction_return)
  return target;
}

size_t apply_transaction_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_transaction_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void apply_transaction_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.apply_transaction_return)
  GOOGLE_DCHECK_NE(&from, this);
  const apply_transaction_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<apply_transaction_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.apply_transaction_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.apply_transaction_return)
    MergeFrom(*source);
  }
}

void apply_transaction_return::MergeFrom(const apply_transaction_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_transaction_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void apply_transaction_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.apply_transaction_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_transaction_return::CopyFrom(const apply_transaction_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_transaction_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_transaction_return::IsInitialized() const {
  return true;
}

void apply_transaction_return::InternalSwap(apply_transaction_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_transaction_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class apply_upload_contract_operation_args::_Internal {
 public:
  static const ::koinos::protocol::upload_contract_operation& op(const apply_upload_contract_operation_args* msg);
};

const ::koinos::protocol::upload_contract_operation&
apply_upload_contract_operation_args::_Internal::op(const apply_upload_contract_operation_args* msg) {
  return *msg->op_;
}
void apply_upload_contract_operation_args::clear_op() {
  if (GetArena() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
}
apply_upload_contract_operation_args::apply_upload_contract_operation_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_upload_contract_operation_args)
}
apply_upload_contract_operation_args::apply_upload_contract_operation_args(const apply_upload_contract_operation_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_op()) {
    op_ = new ::koinos::protocol::upload_contract_operation(*from.op_);
  } else {
    op_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_upload_contract_operation_args)
}

void apply_upload_contract_operation_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_apply_upload_contract_operation_args_koinos_2fchain_2fchain_2eproto.base);
  op_ = nullptr;
}

apply_upload_contract_operation_args::~apply_upload_contract_operation_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_upload_contract_operation_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void apply_upload_contract_operation_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete op_;
}

void apply_upload_contract_operation_args::ArenaDtor(void* object) {
  apply_upload_contract_operation_args* _this = reinterpret_cast< apply_upload_contract_operation_args* >(object);
  (void)_this;
}
void apply_upload_contract_operation_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_upload_contract_operation_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const apply_upload_contract_operation_args& apply_upload_contract_operation_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_apply_upload_contract_operation_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void apply_upload_contract_operation_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_upload_contract_operation_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_upload_contract_operation_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.upload_contract_operation op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_upload_contract_operation_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_upload_contract_operation_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.upload_contract_operation op = 1;
  if (this->has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::op(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_upload_contract_operation_args)
  return target;
}

size_t apply_upload_contract_operation_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_upload_contract_operation_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.upload_contract_operation op = 1;
  if (this->has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void apply_upload_contract_operation_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.apply_upload_contract_operation_args)
  GOOGLE_DCHECK_NE(&from, this);
  const apply_upload_contract_operation_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<apply_upload_contract_operation_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.apply_upload_contract_operation_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.apply_upload_contract_operation_args)
    MergeFrom(*source);
  }
}

void apply_upload_contract_operation_args::MergeFrom(const apply_upload_contract_operation_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_upload_contract_operation_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_op()) {
    _internal_mutable_op()->::koinos::protocol::upload_contract_operation::MergeFrom(from._internal_op());
  }
}

void apply_upload_contract_operation_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.apply_upload_contract_operation_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_upload_contract_operation_args::CopyFrom(const apply_upload_contract_operation_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_upload_contract_operation_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_upload_contract_operation_args::IsInitialized() const {
  return true;
}

void apply_upload_contract_operation_args::InternalSwap(apply_upload_contract_operation_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_upload_contract_operation_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class apply_upload_contract_operation_return::_Internal {
 public:
};

apply_upload_contract_operation_return::apply_upload_contract_operation_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_upload_contract_operation_return)
}
apply_upload_contract_operation_return::apply_upload_contract_operation_return(const apply_upload_contract_operation_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_upload_contract_operation_return)
}

void apply_upload_contract_operation_return::SharedCtor() {
}

apply_upload_contract_operation_return::~apply_upload_contract_operation_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_upload_contract_operation_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void apply_upload_contract_operation_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void apply_upload_contract_operation_return::ArenaDtor(void* object) {
  apply_upload_contract_operation_return* _this = reinterpret_cast< apply_upload_contract_operation_return* >(object);
  (void)_this;
}
void apply_upload_contract_operation_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_upload_contract_operation_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const apply_upload_contract_operation_return& apply_upload_contract_operation_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_apply_upload_contract_operation_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void apply_upload_contract_operation_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_upload_contract_operation_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_upload_contract_operation_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_upload_contract_operation_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_upload_contract_operation_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_upload_contract_operation_return)
  return target;
}

size_t apply_upload_contract_operation_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_upload_contract_operation_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void apply_upload_contract_operation_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.apply_upload_contract_operation_return)
  GOOGLE_DCHECK_NE(&from, this);
  const apply_upload_contract_operation_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<apply_upload_contract_operation_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.apply_upload_contract_operation_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.apply_upload_contract_operation_return)
    MergeFrom(*source);
  }
}

void apply_upload_contract_operation_return::MergeFrom(const apply_upload_contract_operation_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_upload_contract_operation_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void apply_upload_contract_operation_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.apply_upload_contract_operation_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_upload_contract_operation_return::CopyFrom(const apply_upload_contract_operation_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_upload_contract_operation_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_upload_contract_operation_return::IsInitialized() const {
  return true;
}

void apply_upload_contract_operation_return::InternalSwap(apply_upload_contract_operation_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_upload_contract_operation_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class apply_call_contract_operation_args::_Internal {
 public:
  static const ::koinos::protocol::call_contract_operation& op(const apply_call_contract_operation_args* msg);
};

const ::koinos::protocol::call_contract_operation&
apply_call_contract_operation_args::_Internal::op(const apply_call_contract_operation_args* msg) {
  return *msg->op_;
}
void apply_call_contract_operation_args::clear_op() {
  if (GetArena() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
}
apply_call_contract_operation_args::apply_call_contract_operation_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_call_contract_operation_args)
}
apply_call_contract_operation_args::apply_call_contract_operation_args(const apply_call_contract_operation_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_op()) {
    op_ = new ::koinos::protocol::call_contract_operation(*from.op_);
  } else {
    op_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_call_contract_operation_args)
}

void apply_call_contract_operation_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_apply_call_contract_operation_args_koinos_2fchain_2fchain_2eproto.base);
  op_ = nullptr;
}

apply_call_contract_operation_args::~apply_call_contract_operation_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_call_contract_operation_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void apply_call_contract_operation_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete op_;
}

void apply_call_contract_operation_args::ArenaDtor(void* object) {
  apply_call_contract_operation_args* _this = reinterpret_cast< apply_call_contract_operation_args* >(object);
  (void)_this;
}
void apply_call_contract_operation_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_call_contract_operation_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const apply_call_contract_operation_args& apply_call_contract_operation_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_apply_call_contract_operation_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void apply_call_contract_operation_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_call_contract_operation_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_call_contract_operation_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.call_contract_operation op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_call_contract_operation_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_call_contract_operation_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.call_contract_operation op = 1;
  if (this->has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::op(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_call_contract_operation_args)
  return target;
}

size_t apply_call_contract_operation_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_call_contract_operation_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.call_contract_operation op = 1;
  if (this->has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void apply_call_contract_operation_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.apply_call_contract_operation_args)
  GOOGLE_DCHECK_NE(&from, this);
  const apply_call_contract_operation_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<apply_call_contract_operation_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.apply_call_contract_operation_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.apply_call_contract_operation_args)
    MergeFrom(*source);
  }
}

void apply_call_contract_operation_args::MergeFrom(const apply_call_contract_operation_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_call_contract_operation_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_op()) {
    _internal_mutable_op()->::koinos::protocol::call_contract_operation::MergeFrom(from._internal_op());
  }
}

void apply_call_contract_operation_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.apply_call_contract_operation_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_call_contract_operation_args::CopyFrom(const apply_call_contract_operation_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_call_contract_operation_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_call_contract_operation_args::IsInitialized() const {
  return true;
}

void apply_call_contract_operation_args::InternalSwap(apply_call_contract_operation_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_call_contract_operation_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class apply_call_contract_operation_return::_Internal {
 public:
};

apply_call_contract_operation_return::apply_call_contract_operation_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_call_contract_operation_return)
}
apply_call_contract_operation_return::apply_call_contract_operation_return(const apply_call_contract_operation_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_call_contract_operation_return)
}

void apply_call_contract_operation_return::SharedCtor() {
}

apply_call_contract_operation_return::~apply_call_contract_operation_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_call_contract_operation_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void apply_call_contract_operation_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void apply_call_contract_operation_return::ArenaDtor(void* object) {
  apply_call_contract_operation_return* _this = reinterpret_cast< apply_call_contract_operation_return* >(object);
  (void)_this;
}
void apply_call_contract_operation_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_call_contract_operation_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const apply_call_contract_operation_return& apply_call_contract_operation_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_apply_call_contract_operation_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void apply_call_contract_operation_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_call_contract_operation_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_call_contract_operation_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_call_contract_operation_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_call_contract_operation_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_call_contract_operation_return)
  return target;
}

size_t apply_call_contract_operation_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_call_contract_operation_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void apply_call_contract_operation_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.apply_call_contract_operation_return)
  GOOGLE_DCHECK_NE(&from, this);
  const apply_call_contract_operation_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<apply_call_contract_operation_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.apply_call_contract_operation_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.apply_call_contract_operation_return)
    MergeFrom(*source);
  }
}

void apply_call_contract_operation_return::MergeFrom(const apply_call_contract_operation_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_call_contract_operation_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void apply_call_contract_operation_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.apply_call_contract_operation_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_call_contract_operation_return::CopyFrom(const apply_call_contract_operation_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_call_contract_operation_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_call_contract_operation_return::IsInitialized() const {
  return true;
}

void apply_call_contract_operation_return::InternalSwap(apply_call_contract_operation_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_call_contract_operation_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class apply_set_system_call_operation_args::_Internal {
 public:
  static const ::koinos::protocol::set_system_call_operation& op(const apply_set_system_call_operation_args* msg);
};

const ::koinos::protocol::set_system_call_operation&
apply_set_system_call_operation_args::_Internal::op(const apply_set_system_call_operation_args* msg) {
  return *msg->op_;
}
void apply_set_system_call_operation_args::clear_op() {
  if (GetArena() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
}
apply_set_system_call_operation_args::apply_set_system_call_operation_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.apply_set_system_call_operation_args)
}
apply_set_system_call_operation_args::apply_set_system_call_operation_args(const apply_set_system_call_operation_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_op()) {
    op_ = new ::koinos::protocol::set_system_call_operation(*from.op_);
  } else {
    op_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.apply_set_system_call_operation_args)
}

void apply_set_system_call_operation_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_apply_set_system_call_operation_args_koinos_2fchain_2fchain_2eproto.base);
  op_ = nullptr;
}

apply_set_system_call_operation_args::~apply_set_system_call_operation_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.apply_set_system_call_operation_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void apply_set_system_call_operation_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete op_;
}

void apply_set_system_call_operation_args::ArenaDtor(void* object) {
  apply_set_system_call_operation_args* _this = reinterpret_cast< apply_set_system_call_operation_args* >(object);
  (void)_this;
}
void apply_set_system_call_operation_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apply_set_system_call_operation_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const apply_set_system_call_operation_args& apply_set_system_call_operation_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_apply_set_system_call_operation_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void apply_set_system_call_operation_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.apply_set_system_call_operation_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apply_set_system_call_operation_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.set_system_call_operation op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* apply_set_system_call_operation_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.apply_set_system_call_operation_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.set_system_call_operation op = 1;
  if (this->has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::op(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.apply_set_system_call_operation_args)
  return target;
}

size_t apply_set_system_call_operation_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.apply_set_system_call_operation_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.set_system_call_operation op = 1;
  if (this->has_op()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void apply_set_system_call_operation_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.apply_set_system_call_operation_args)
  GOOGLE_DCHECK_NE(&from, this);
  const apply_set_system_call_operation_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<apply_set_system_call_operation_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.apply_set_system_call_operation_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.apply_set_system_call_operation_args)
    MergeFrom(*source);
  }
}

void apply_set_system_call_operation_args::MergeFrom(const apply_set_system_call_operation_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.apply_set_system_call_operation_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_op()) {
    _internal_mutable_op()->::koinos::protocol::set_system_call_operation::MergeFrom(from._internal_op());
  }
}

void apply_set_system_call_operation_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.apply_set_system_call_operation_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void apply_set_system_call_operation_args::CopyFrom(const apply_set_system_call_operation_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.apply_set_system_call_operation_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apply_set_system_call_operation_args::IsInitialized() const {
  return true;
}

void apply_set_system_call_operation_args::InternalSwap(apply_set_system_call_operation_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apply_set_system_call_operation_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class db_put_object_args::_Internal {
 public:
};

db_put_object_args::db_put_object_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.db_put_object_args)
}
db_put_object_args::db_put_object_args(const db_put_object_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_space().empty()) {
    space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_space(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  obj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_obj().empty()) {
    obj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_obj(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.db_put_object_args)
}

void db_put_object_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_put_object_args_koinos_2fchain_2fchain_2eproto.base);
  space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

db_put_object_args::~db_put_object_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.db_put_object_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_put_object_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  space_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obj_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_put_object_args::ArenaDtor(void* object) {
  db_put_object_args* _this = reinterpret_cast< db_put_object_args* >(object);
  (void)_this;
}
void db_put_object_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_put_object_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_put_object_args& db_put_object_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_put_object_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void db_put_object_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.db_put_object_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  space_.ClearToEmpty();
  key_.ClearToEmpty();
  obj_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_put_object_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_space();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes obj = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_obj();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_put_object_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.db_put_object_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes space = 1;
  if (this->space().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_space(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bytes obj = 3;
  if (this->obj().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_obj(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.db_put_object_args)
  return target;
}

size_t db_put_object_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.db_put_object_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes space = 1;
  if (this->space().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_space());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes obj = 3;
  if (this->obj().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_obj());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_put_object_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.db_put_object_args)
  GOOGLE_DCHECK_NE(&from, this);
  const db_put_object_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_put_object_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.db_put_object_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.db_put_object_args)
    MergeFrom(*source);
  }
}

void db_put_object_args::MergeFrom(const db_put_object_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.db_put_object_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.space().size() > 0) {
    _internal_set_space(from._internal_space());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.obj().size() > 0) {
    _internal_set_obj(from._internal_obj());
  }
}

void db_put_object_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.db_put_object_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_put_object_args::CopyFrom(const db_put_object_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.db_put_object_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_put_object_args::IsInitialized() const {
  return true;
}

void db_put_object_args::InternalSwap(db_put_object_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  space_.Swap(&other->space_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  obj_.Swap(&other->obj_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata db_put_object_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class db_put_object_return::_Internal {
 public:
};

db_put_object_return::db_put_object_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.db_put_object_return)
}
db_put_object_return::db_put_object_return(const db_put_object_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.db_put_object_return)
}

void db_put_object_return::SharedCtor() {
  result_ = false;
}

db_put_object_return::~db_put_object_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.db_put_object_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_put_object_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void db_put_object_return::ArenaDtor(void* object) {
  db_put_object_return* _this = reinterpret_cast< db_put_object_return* >(object);
  (void)_this;
}
void db_put_object_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_put_object_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_put_object_return& db_put_object_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_put_object_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void db_put_object_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.db_put_object_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_put_object_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_put_object_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.db_put_object_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.db_put_object_return)
  return target;
}

size_t db_put_object_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.db_put_object_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_put_object_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.db_put_object_return)
  GOOGLE_DCHECK_NE(&from, this);
  const db_put_object_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_put_object_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.db_put_object_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.db_put_object_return)
    MergeFrom(*source);
  }
}

void db_put_object_return::MergeFrom(const db_put_object_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.db_put_object_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void db_put_object_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.db_put_object_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_put_object_return::CopyFrom(const db_put_object_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.db_put_object_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_put_object_return::IsInitialized() const {
  return true;
}

void db_put_object_return::InternalSwap(db_put_object_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_put_object_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class db_get_object_args::_Internal {
 public:
  using HasBits = decltype(std::declval<db_get_object_args>()._has_bits_);
  static void set_has_object_size_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_get_object_args::db_get_object_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.db_get_object_args)
}
db_get_object_args::db_get_object_args(const db_get_object_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_space().empty()) {
    space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_space(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  object_size_hint_ = from.object_size_hint_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.db_get_object_args)
}

void db_get_object_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_get_object_args_koinos_2fchain_2fchain_2eproto.base);
  space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_size_hint_ = 0u;
}

db_get_object_args::~db_get_object_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.db_get_object_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_get_object_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  space_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_get_object_args::ArenaDtor(void* object) {
  db_get_object_args* _this = reinterpret_cast< db_get_object_args* >(object);
  (void)_this;
}
void db_get_object_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_get_object_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_get_object_args& db_get_object_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_get_object_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void db_get_object_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.db_get_object_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  space_.ClearToEmpty();
  key_.ClearToEmpty();
  object_size_hint_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_get_object_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_space();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 object_size_hint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_object_size_hint(&has_bits);
          object_size_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_get_object_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.db_get_object_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes space = 1;
  if (this->space().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_space(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // uint32 object_size_hint = 3;
  if (_internal_has_object_size_hint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_object_size_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.db_get_object_args)
  return target;
}

size_t db_get_object_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.db_get_object_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes space = 1;
  if (this->space().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_space());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint32 object_size_hint = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_object_size_hint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_get_object_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.db_get_object_args)
  GOOGLE_DCHECK_NE(&from, this);
  const db_get_object_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_get_object_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.db_get_object_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.db_get_object_args)
    MergeFrom(*source);
  }
}

void db_get_object_args::MergeFrom(const db_get_object_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.db_get_object_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.space().size() > 0) {
    _internal_set_space(from._internal_space());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_object_size_hint()) {
    _internal_set_object_size_hint(from._internal_object_size_hint());
  }
}

void db_get_object_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.db_get_object_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_object_args::CopyFrom(const db_get_object_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.db_get_object_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_object_args::IsInitialized() const {
  return true;
}

void db_get_object_args::InternalSwap(db_get_object_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  space_.Swap(&other->space_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(object_size_hint_, other->object_size_hint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_get_object_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class db_get_object_return::_Internal {
 public:
};

db_get_object_return::db_get_object_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.db_get_object_return)
}
db_get_object_return::db_get_object_return(const db_get_object_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.db_get_object_return)
}

void db_get_object_return::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_get_object_return_koinos_2fchain_2fchain_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

db_get_object_return::~db_get_object_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.db_get_object_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_get_object_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_get_object_return::ArenaDtor(void* object) {
  db_get_object_return* _this = reinterpret_cast< db_get_object_return* >(object);
  (void)_this;
}
void db_get_object_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_get_object_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_get_object_return& db_get_object_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_get_object_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void db_get_object_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.db_get_object_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_get_object_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_get_object_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.db_get_object_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result = 3;
  if (this->result().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.db_get_object_return)
  return target;
}

size_t db_get_object_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.db_get_object_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 3;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_get_object_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.db_get_object_return)
  GOOGLE_DCHECK_NE(&from, this);
  const db_get_object_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_get_object_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.db_get_object_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.db_get_object_return)
    MergeFrom(*source);
  }
}

void db_get_object_return::MergeFrom(const db_get_object_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.db_get_object_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {
    _internal_set_result(from._internal_result());
  }
}

void db_get_object_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.db_get_object_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_object_return::CopyFrom(const db_get_object_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.db_get_object_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_object_return::IsInitialized() const {
  return true;
}

void db_get_object_return::InternalSwap(db_get_object_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata db_get_object_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class db_get_next_object_args::_Internal {
 public:
  using HasBits = decltype(std::declval<db_get_next_object_args>()._has_bits_);
  static void set_has_object_size_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_get_next_object_args::db_get_next_object_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.db_get_next_object_args)
}
db_get_next_object_args::db_get_next_object_args(const db_get_next_object_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_space().empty()) {
    space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_space(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  object_size_hint_ = from.object_size_hint_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.db_get_next_object_args)
}

void db_get_next_object_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_get_next_object_args_koinos_2fchain_2fchain_2eproto.base);
  space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_size_hint_ = 0u;
}

db_get_next_object_args::~db_get_next_object_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.db_get_next_object_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_get_next_object_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  space_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_get_next_object_args::ArenaDtor(void* object) {
  db_get_next_object_args* _this = reinterpret_cast< db_get_next_object_args* >(object);
  (void)_this;
}
void db_get_next_object_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_get_next_object_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_get_next_object_args& db_get_next_object_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_get_next_object_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void db_get_next_object_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.db_get_next_object_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  space_.ClearToEmpty();
  key_.ClearToEmpty();
  object_size_hint_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_get_next_object_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_space();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 object_size_hint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_object_size_hint(&has_bits);
          object_size_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_get_next_object_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.db_get_next_object_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes space = 1;
  if (this->space().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_space(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // uint32 object_size_hint = 3;
  if (_internal_has_object_size_hint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_object_size_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.db_get_next_object_args)
  return target;
}

size_t db_get_next_object_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.db_get_next_object_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes space = 1;
  if (this->space().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_space());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint32 object_size_hint = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_object_size_hint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_get_next_object_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.db_get_next_object_args)
  GOOGLE_DCHECK_NE(&from, this);
  const db_get_next_object_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_get_next_object_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.db_get_next_object_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.db_get_next_object_args)
    MergeFrom(*source);
  }
}

void db_get_next_object_args::MergeFrom(const db_get_next_object_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.db_get_next_object_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.space().size() > 0) {
    _internal_set_space(from._internal_space());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_object_size_hint()) {
    _internal_set_object_size_hint(from._internal_object_size_hint());
  }
}

void db_get_next_object_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.db_get_next_object_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_next_object_args::CopyFrom(const db_get_next_object_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.db_get_next_object_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_next_object_args::IsInitialized() const {
  return true;
}

void db_get_next_object_args::InternalSwap(db_get_next_object_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  space_.Swap(&other->space_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(object_size_hint_, other->object_size_hint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_get_next_object_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class db_get_next_object_return::_Internal {
 public:
};

db_get_next_object_return::db_get_next_object_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.db_get_next_object_return)
}
db_get_next_object_return::db_get_next_object_return(const db_get_next_object_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.db_get_next_object_return)
}

void db_get_next_object_return::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_get_next_object_return_koinos_2fchain_2fchain_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

db_get_next_object_return::~db_get_next_object_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.db_get_next_object_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_get_next_object_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_get_next_object_return::ArenaDtor(void* object) {
  db_get_next_object_return* _this = reinterpret_cast< db_get_next_object_return* >(object);
  (void)_this;
}
void db_get_next_object_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_get_next_object_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_get_next_object_return& db_get_next_object_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_get_next_object_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void db_get_next_object_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.db_get_next_object_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_get_next_object_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_get_next_object_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.db_get_next_object_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result = 3;
  if (this->result().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.db_get_next_object_return)
  return target;
}

size_t db_get_next_object_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.db_get_next_object_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 3;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_get_next_object_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.db_get_next_object_return)
  GOOGLE_DCHECK_NE(&from, this);
  const db_get_next_object_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_get_next_object_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.db_get_next_object_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.db_get_next_object_return)
    MergeFrom(*source);
  }
}

void db_get_next_object_return::MergeFrom(const db_get_next_object_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.db_get_next_object_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {
    _internal_set_result(from._internal_result());
  }
}

void db_get_next_object_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.db_get_next_object_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_next_object_return::CopyFrom(const db_get_next_object_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.db_get_next_object_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_next_object_return::IsInitialized() const {
  return true;
}

void db_get_next_object_return::InternalSwap(db_get_next_object_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata db_get_next_object_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class db_get_prev_object_args::_Internal {
 public:
  using HasBits = decltype(std::declval<db_get_prev_object_args>()._has_bits_);
  static void set_has_object_size_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

db_get_prev_object_args::db_get_prev_object_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.db_get_prev_object_args)
}
db_get_prev_object_args::db_get_prev_object_args(const db_get_prev_object_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_space().empty()) {
    space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_space(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  object_size_hint_ = from.object_size_hint_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.db_get_prev_object_args)
}

void db_get_prev_object_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_get_prev_object_args_koinos_2fchain_2fchain_2eproto.base);
  space_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  object_size_hint_ = 0u;
}

db_get_prev_object_args::~db_get_prev_object_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.db_get_prev_object_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_get_prev_object_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  space_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_get_prev_object_args::ArenaDtor(void* object) {
  db_get_prev_object_args* _this = reinterpret_cast< db_get_prev_object_args* >(object);
  (void)_this;
}
void db_get_prev_object_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_get_prev_object_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_get_prev_object_args& db_get_prev_object_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_get_prev_object_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void db_get_prev_object_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.db_get_prev_object_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  space_.ClearToEmpty();
  key_.ClearToEmpty();
  object_size_hint_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_get_prev_object_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_space();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 object_size_hint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_object_size_hint(&has_bits);
          object_size_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_get_prev_object_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.db_get_prev_object_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes space = 1;
  if (this->space().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_space(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  // uint32 object_size_hint = 3;
  if (_internal_has_object_size_hint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_object_size_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.db_get_prev_object_args)
  return target;
}

size_t db_get_prev_object_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.db_get_prev_object_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes space = 1;
  if (this->space().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_space());
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // uint32 object_size_hint = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_object_size_hint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_get_prev_object_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.db_get_prev_object_args)
  GOOGLE_DCHECK_NE(&from, this);
  const db_get_prev_object_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_get_prev_object_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.db_get_prev_object_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.db_get_prev_object_args)
    MergeFrom(*source);
  }
}

void db_get_prev_object_args::MergeFrom(const db_get_prev_object_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.db_get_prev_object_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.space().size() > 0) {
    _internal_set_space(from._internal_space());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_has_object_size_hint()) {
    _internal_set_object_size_hint(from._internal_object_size_hint());
  }
}

void db_get_prev_object_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.db_get_prev_object_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_prev_object_args::CopyFrom(const db_get_prev_object_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.db_get_prev_object_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_prev_object_args::IsInitialized() const {
  return true;
}

void db_get_prev_object_args::InternalSwap(db_get_prev_object_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  space_.Swap(&other->space_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(object_size_hint_, other->object_size_hint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata db_get_prev_object_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class db_get_prev_object_return::_Internal {
 public:
};

db_get_prev_object_return::db_get_prev_object_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.db_get_prev_object_return)
}
db_get_prev_object_return::db_get_prev_object_return(const db_get_prev_object_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.db_get_prev_object_return)
}

void db_get_prev_object_return::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_db_get_prev_object_return_koinos_2fchain_2fchain_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

db_get_prev_object_return::~db_get_prev_object_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.db_get_prev_object_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void db_get_prev_object_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void db_get_prev_object_return::ArenaDtor(void* object) {
  db_get_prev_object_return* _this = reinterpret_cast< db_get_prev_object_return* >(object);
  (void)_this;
}
void db_get_prev_object_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void db_get_prev_object_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_get_prev_object_return& db_get_prev_object_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_db_get_prev_object_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void db_get_prev_object_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.db_get_prev_object_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* db_get_prev_object_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* db_get_prev_object_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.db_get_prev_object_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result = 3;
  if (this->result().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.db_get_prev_object_return)
  return target;
}

size_t db_get_prev_object_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.db_get_prev_object_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 3;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_get_prev_object_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.db_get_prev_object_return)
  GOOGLE_DCHECK_NE(&from, this);
  const db_get_prev_object_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<db_get_prev_object_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.db_get_prev_object_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.db_get_prev_object_return)
    MergeFrom(*source);
  }
}

void db_get_prev_object_return::MergeFrom(const db_get_prev_object_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.db_get_prev_object_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {
    _internal_set_result(from._internal_result());
  }
}

void db_get_prev_object_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.db_get_prev_object_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_prev_object_return::CopyFrom(const db_get_prev_object_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.db_get_prev_object_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_prev_object_return::IsInitialized() const {
  return true;
}

void db_get_prev_object_return::InternalSwap(db_get_prev_object_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata db_get_prev_object_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class call_contract_args::_Internal {
 public:
};

call_contract_args::call_contract_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.call_contract_args)
}
call_contract_args::call_contract_args(const call_contract_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_id(), 
      GetArena());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArena());
  }
  entry_point_ = from.entry_point_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.call_contract_args)
}

void call_contract_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_call_contract_args_koinos_2fchain_2fchain_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_point_ = 0u;
}

call_contract_args::~call_contract_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.call_contract_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void call_contract_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void call_contract_args::ArenaDtor(void* object) {
  call_contract_args* _this = reinterpret_cast< call_contract_args* >(object);
  (void)_this;
}
void call_contract_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void call_contract_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const call_contract_args& call_contract_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_call_contract_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void call_contract_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.call_contract_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty();
  args_.ClearToEmpty();
  entry_point_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* call_contract_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 entry_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entry_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* call_contract_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.call_contract_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contract_id = 1;
  if (this->contract_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // uint32 entry_point = 2;
  if (this->entry_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entry_point(), target);
  }

  // bytes args = 3;
  if (this->args().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.call_contract_args)
  return target;
}

size_t call_contract_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.call_contract_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contract_id = 1;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_id());
  }

  // bytes args = 3;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // uint32 entry_point = 2;
  if (this->entry_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entry_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void call_contract_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.call_contract_args)
  GOOGLE_DCHECK_NE(&from, this);
  const call_contract_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<call_contract_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.call_contract_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.call_contract_args)
    MergeFrom(*source);
  }
}

void call_contract_args::MergeFrom(const call_contract_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.call_contract_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.args().size() > 0) {
    _internal_set_args(from._internal_args());
  }
  if (from.entry_point() != 0) {
    _internal_set_entry_point(from._internal_entry_point());
  }
}

void call_contract_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.call_contract_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void call_contract_args::CopyFrom(const call_contract_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.call_contract_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool call_contract_args::IsInitialized() const {
  return true;
}

void call_contract_args::InternalSwap(call_contract_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(entry_point_, other->entry_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata call_contract_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class call_contract_return::_Internal {
 public:
};

call_contract_return::call_contract_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.call_contract_return)
}
call_contract_return::call_contract_return(const call_contract_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.call_contract_return)
}

void call_contract_return::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_call_contract_return_koinos_2fchain_2fchain_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

call_contract_return::~call_contract_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.call_contract_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void call_contract_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void call_contract_return::ArenaDtor(void* object) {
  call_contract_return* _this = reinterpret_cast< call_contract_return* >(object);
  (void)_this;
}
void call_contract_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void call_contract_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const call_contract_return& call_contract_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_call_contract_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void call_contract_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.call_contract_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* call_contract_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* call_contract_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.call_contract_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result = 1;
  if (this->result().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.call_contract_return)
  return target;
}

size_t call_contract_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.call_contract_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 1;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void call_contract_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.call_contract_return)
  GOOGLE_DCHECK_NE(&from, this);
  const call_contract_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<call_contract_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.call_contract_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.call_contract_return)
    MergeFrom(*source);
  }
}

void call_contract_return::MergeFrom(const call_contract_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.call_contract_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {
    _internal_set_result(from._internal_result());
  }
}

void call_contract_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.call_contract_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void call_contract_return::CopyFrom(const call_contract_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.call_contract_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool call_contract_return::IsInitialized() const {
  return true;
}

void call_contract_return::InternalSwap(call_contract_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata call_contract_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_entry_point_args::_Internal {
 public:
};

get_entry_point_args::get_entry_point_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_entry_point_args)
}
get_entry_point_args::get_entry_point_args(const get_entry_point_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_entry_point_args)
}

void get_entry_point_args::SharedCtor() {
}

get_entry_point_args::~get_entry_point_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_entry_point_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_entry_point_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_entry_point_args::ArenaDtor(void* object) {
  get_entry_point_args* _this = reinterpret_cast< get_entry_point_args* >(object);
  (void)_this;
}
void get_entry_point_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_entry_point_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_entry_point_args& get_entry_point_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_entry_point_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_entry_point_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_entry_point_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_entry_point_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_entry_point_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_entry_point_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_entry_point_args)
  return target;
}

size_t get_entry_point_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_entry_point_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_entry_point_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_entry_point_args)
  GOOGLE_DCHECK_NE(&from, this);
  const get_entry_point_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_entry_point_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_entry_point_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_entry_point_args)
    MergeFrom(*source);
  }
}

void get_entry_point_args::MergeFrom(const get_entry_point_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_entry_point_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void get_entry_point_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_entry_point_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_entry_point_args::CopyFrom(const get_entry_point_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_entry_point_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_entry_point_args::IsInitialized() const {
  return true;
}

void get_entry_point_args::InternalSwap(get_entry_point_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_entry_point_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_entry_point_return::_Internal {
 public:
};

get_entry_point_return::get_entry_point_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_entry_point_return)
}
get_entry_point_return::get_entry_point_return(const get_entry_point_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entry_point_ = from.entry_point_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_entry_point_return)
}

void get_entry_point_return::SharedCtor() {
  entry_point_ = 0u;
}

get_entry_point_return::~get_entry_point_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_entry_point_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_entry_point_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_entry_point_return::ArenaDtor(void* object) {
  get_entry_point_return* _this = reinterpret_cast< get_entry_point_return* >(object);
  (void)_this;
}
void get_entry_point_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_entry_point_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_entry_point_return& get_entry_point_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_entry_point_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_entry_point_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_entry_point_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_point_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_entry_point_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 entry_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          entry_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_entry_point_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_entry_point_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entry_point = 1;
  if (this->entry_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entry_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_entry_point_return)
  return target;
}

size_t get_entry_point_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_entry_point_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 entry_point = 1;
  if (this->entry_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entry_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_entry_point_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_entry_point_return)
  GOOGLE_DCHECK_NE(&from, this);
  const get_entry_point_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_entry_point_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_entry_point_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_entry_point_return)
    MergeFrom(*source);
  }
}

void get_entry_point_return::MergeFrom(const get_entry_point_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_entry_point_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entry_point() != 0) {
    _internal_set_entry_point(from._internal_entry_point());
  }
}

void get_entry_point_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_entry_point_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_entry_point_return::CopyFrom(const get_entry_point_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_entry_point_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_entry_point_return::IsInitialized() const {
  return true;
}

void get_entry_point_return::InternalSwap(get_entry_point_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(entry_point_, other->entry_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_entry_point_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_contract_args_size_args::_Internal {
 public:
};

get_contract_args_size_args::get_contract_args_size_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_contract_args_size_args)
}
get_contract_args_size_args::get_contract_args_size_args(const get_contract_args_size_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_contract_args_size_args)
}

void get_contract_args_size_args::SharedCtor() {
}

get_contract_args_size_args::~get_contract_args_size_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_contract_args_size_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_contract_args_size_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_contract_args_size_args::ArenaDtor(void* object) {
  get_contract_args_size_args* _this = reinterpret_cast< get_contract_args_size_args* >(object);
  (void)_this;
}
void get_contract_args_size_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_args_size_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_contract_args_size_args& get_contract_args_size_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_contract_args_size_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_contract_args_size_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_contract_args_size_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_args_size_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_args_size_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_contract_args_size_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_contract_args_size_args)
  return target;
}

size_t get_contract_args_size_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_contract_args_size_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_contract_args_size_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_contract_args_size_args)
  GOOGLE_DCHECK_NE(&from, this);
  const get_contract_args_size_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_contract_args_size_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_contract_args_size_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_contract_args_size_args)
    MergeFrom(*source);
  }
}

void get_contract_args_size_args::MergeFrom(const get_contract_args_size_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_contract_args_size_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void get_contract_args_size_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_contract_args_size_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_contract_args_size_args::CopyFrom(const get_contract_args_size_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_contract_args_size_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_args_size_args::IsInitialized() const {
  return true;
}

void get_contract_args_size_args::InternalSwap(get_contract_args_size_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_args_size_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_contract_args_size_return::_Internal {
 public:
};

get_contract_args_size_return::get_contract_args_size_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_contract_args_size_return)
}
get_contract_args_size_return::get_contract_args_size_return(const get_contract_args_size_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_contract_args_size_return)
}

void get_contract_args_size_return::SharedCtor() {
  value_ = 0u;
}

get_contract_args_size_return::~get_contract_args_size_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_contract_args_size_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_contract_args_size_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_contract_args_size_return::ArenaDtor(void* object) {
  get_contract_args_size_return* _this = reinterpret_cast< get_contract_args_size_return* >(object);
  (void)_this;
}
void get_contract_args_size_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_args_size_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_contract_args_size_return& get_contract_args_size_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_contract_args_size_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_contract_args_size_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_contract_args_size_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_args_size_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_args_size_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_contract_args_size_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_contract_args_size_return)
  return target;
}

size_t get_contract_args_size_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_contract_args_size_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_contract_args_size_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_contract_args_size_return)
  GOOGLE_DCHECK_NE(&from, this);
  const get_contract_args_size_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_contract_args_size_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_contract_args_size_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_contract_args_size_return)
    MergeFrom(*source);
  }
}

void get_contract_args_size_return::MergeFrom(const get_contract_args_size_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_contract_args_size_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void get_contract_args_size_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_contract_args_size_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_contract_args_size_return::CopyFrom(const get_contract_args_size_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_contract_args_size_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_args_size_return::IsInitialized() const {
  return true;
}

void get_contract_args_size_return::InternalSwap(get_contract_args_size_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_args_size_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_contract_args_args::_Internal {
 public:
};

get_contract_args_args::get_contract_args_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_contract_args_args)
}
get_contract_args_args::get_contract_args_args(const get_contract_args_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_contract_args_args)
}

void get_contract_args_args::SharedCtor() {
}

get_contract_args_args::~get_contract_args_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_contract_args_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_contract_args_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_contract_args_args::ArenaDtor(void* object) {
  get_contract_args_args* _this = reinterpret_cast< get_contract_args_args* >(object);
  (void)_this;
}
void get_contract_args_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_args_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_contract_args_args& get_contract_args_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_contract_args_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_contract_args_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_contract_args_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_args_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_args_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_contract_args_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_contract_args_args)
  return target;
}

size_t get_contract_args_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_contract_args_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_contract_args_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_contract_args_args)
  GOOGLE_DCHECK_NE(&from, this);
  const get_contract_args_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_contract_args_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_contract_args_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_contract_args_args)
    MergeFrom(*source);
  }
}

void get_contract_args_args::MergeFrom(const get_contract_args_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_contract_args_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void get_contract_args_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_contract_args_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_contract_args_args::CopyFrom(const get_contract_args_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_contract_args_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_args_args::IsInitialized() const {
  return true;
}

void get_contract_args_args::InternalSwap(get_contract_args_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_args_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_contract_args_return::_Internal {
 public:
};

get_contract_args_return::get_contract_args_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_contract_args_return)
}
get_contract_args_return::get_contract_args_return(const get_contract_args_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_contract_args_return)
}

void get_contract_args_return::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_contract_args_return_koinos_2fchain_2fchain_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_contract_args_return::~get_contract_args_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_contract_args_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_contract_args_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_contract_args_return::ArenaDtor(void* object) {
  get_contract_args_return* _this = reinterpret_cast< get_contract_args_return* >(object);
  (void)_this;
}
void get_contract_args_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_args_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_contract_args_return& get_contract_args_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_contract_args_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_contract_args_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_contract_args_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_args_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_args_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_contract_args_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_contract_args_return)
  return target;
}

size_t get_contract_args_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_contract_args_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_contract_args_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_contract_args_return)
  GOOGLE_DCHECK_NE(&from, this);
  const get_contract_args_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_contract_args_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_contract_args_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_contract_args_return)
    MergeFrom(*source);
  }
}

void get_contract_args_return::MergeFrom(const get_contract_args_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_contract_args_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void get_contract_args_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_contract_args_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_contract_args_return::CopyFrom(const get_contract_args_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_contract_args_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_args_return::IsInitialized() const {
  return true;
}

void get_contract_args_return::InternalSwap(get_contract_args_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_args_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class set_contract_return_args::_Internal {
 public:
};

set_contract_return_args::set_contract_return_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.set_contract_return_args)
}
set_contract_return_args::set_contract_return_args(const set_contract_return_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.set_contract_return_args)
}

void set_contract_return_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_set_contract_return_args_koinos_2fchain_2fchain_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

set_contract_return_args::~set_contract_return_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.set_contract_return_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void set_contract_return_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void set_contract_return_args::ArenaDtor(void* object) {
  set_contract_return_args* _this = reinterpret_cast< set_contract_return_args* >(object);
  (void)_this;
}
void set_contract_return_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_contract_return_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const set_contract_return_args& set_contract_return_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_set_contract_return_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void set_contract_return_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.set_contract_return_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_contract_return_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_contract_return_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.set_contract_return_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.set_contract_return_args)
  return target;
}

size_t set_contract_return_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.set_contract_return_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void set_contract_return_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.set_contract_return_args)
  GOOGLE_DCHECK_NE(&from, this);
  const set_contract_return_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<set_contract_return_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.set_contract_return_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.set_contract_return_args)
    MergeFrom(*source);
  }
}

void set_contract_return_args::MergeFrom(const set_contract_return_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.set_contract_return_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void set_contract_return_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.set_contract_return_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_contract_return_args::CopyFrom(const set_contract_return_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.set_contract_return_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_contract_return_args::IsInitialized() const {
  return true;
}

void set_contract_return_args::InternalSwap(set_contract_return_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata set_contract_return_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class set_contract_return_return::_Internal {
 public:
};

set_contract_return_return::set_contract_return_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.set_contract_return_return)
}
set_contract_return_return::set_contract_return_return(const set_contract_return_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.set_contract_return_return)
}

void set_contract_return_return::SharedCtor() {
}

set_contract_return_return::~set_contract_return_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.set_contract_return_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void set_contract_return_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void set_contract_return_return::ArenaDtor(void* object) {
  set_contract_return_return* _this = reinterpret_cast< set_contract_return_return* >(object);
  (void)_this;
}
void set_contract_return_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void set_contract_return_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const set_contract_return_return& set_contract_return_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_set_contract_return_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void set_contract_return_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.set_contract_return_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* set_contract_return_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* set_contract_return_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.set_contract_return_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.set_contract_return_return)
  return target;
}

size_t set_contract_return_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.set_contract_return_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void set_contract_return_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.set_contract_return_return)
  GOOGLE_DCHECK_NE(&from, this);
  const set_contract_return_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<set_contract_return_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.set_contract_return_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.set_contract_return_return)
    MergeFrom(*source);
  }
}

void set_contract_return_return::MergeFrom(const set_contract_return_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.set_contract_return_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void set_contract_return_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.set_contract_return_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void set_contract_return_return::CopyFrom(const set_contract_return_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.set_contract_return_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool set_contract_return_return::IsInitialized() const {
  return true;
}

void set_contract_return_return::InternalSwap(set_contract_return_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata set_contract_return_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class exit_contract_args::_Internal {
 public:
};

exit_contract_args::exit_contract_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.exit_contract_args)
}
exit_contract_args::exit_contract_args(const exit_contract_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exit_code_ = from.exit_code_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.exit_contract_args)
}

void exit_contract_args::SharedCtor() {
  exit_code_ = 0u;
}

exit_contract_args::~exit_contract_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.exit_contract_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void exit_contract_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void exit_contract_args::ArenaDtor(void* object) {
  exit_contract_args* _this = reinterpret_cast< exit_contract_args* >(object);
  (void)_this;
}
void exit_contract_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void exit_contract_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const exit_contract_args& exit_contract_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_exit_contract_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void exit_contract_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.exit_contract_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exit_code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* exit_contract_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 exit_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exit_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* exit_contract_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.exit_contract_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 exit_code = 1;
  if (this->exit_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_exit_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.exit_contract_args)
  return target;
}

size_t exit_contract_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.exit_contract_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 exit_code = 1;
  if (this->exit_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exit_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void exit_contract_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.exit_contract_args)
  GOOGLE_DCHECK_NE(&from, this);
  const exit_contract_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<exit_contract_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.exit_contract_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.exit_contract_args)
    MergeFrom(*source);
  }
}

void exit_contract_args::MergeFrom(const exit_contract_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.exit_contract_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exit_code() != 0) {
    _internal_set_exit_code(from._internal_exit_code());
  }
}

void exit_contract_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.exit_contract_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_contract_args::CopyFrom(const exit_contract_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.exit_contract_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_contract_args::IsInitialized() const {
  return true;
}

void exit_contract_args::InternalSwap(exit_contract_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(exit_code_, other->exit_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata exit_contract_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class exit_contract_return::_Internal {
 public:
};

exit_contract_return::exit_contract_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.exit_contract_return)
}
exit_contract_return::exit_contract_return(const exit_contract_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.exit_contract_return)
}

void exit_contract_return::SharedCtor() {
}

exit_contract_return::~exit_contract_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.exit_contract_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void exit_contract_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void exit_contract_return::ArenaDtor(void* object) {
  exit_contract_return* _this = reinterpret_cast< exit_contract_return* >(object);
  (void)_this;
}
void exit_contract_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void exit_contract_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const exit_contract_return& exit_contract_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_exit_contract_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void exit_contract_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.exit_contract_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* exit_contract_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* exit_contract_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.exit_contract_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.exit_contract_return)
  return target;
}

size_t exit_contract_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.exit_contract_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void exit_contract_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.exit_contract_return)
  GOOGLE_DCHECK_NE(&from, this);
  const exit_contract_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<exit_contract_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.exit_contract_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.exit_contract_return)
    MergeFrom(*source);
  }
}

void exit_contract_return::MergeFrom(const exit_contract_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.exit_contract_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void exit_contract_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.exit_contract_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_contract_return::CopyFrom(const exit_contract_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.exit_contract_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_contract_return::IsInitialized() const {
  return true;
}

void exit_contract_return::InternalSwap(exit_contract_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata exit_contract_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_head_info_args::_Internal {
 public:
};

get_head_info_args::get_head_info_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_head_info_args)
}
get_head_info_args::get_head_info_args(const get_head_info_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_head_info_args)
}

void get_head_info_args::SharedCtor() {
}

get_head_info_args::~get_head_info_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_head_info_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_head_info_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_head_info_args::ArenaDtor(void* object) {
  get_head_info_args* _this = reinterpret_cast< get_head_info_args* >(object);
  (void)_this;
}
void get_head_info_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_head_info_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_head_info_args& get_head_info_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_head_info_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_head_info_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_head_info_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_head_info_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_head_info_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_head_info_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_head_info_args)
  return target;
}

size_t get_head_info_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_head_info_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_head_info_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_head_info_args)
  GOOGLE_DCHECK_NE(&from, this);
  const get_head_info_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_head_info_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_head_info_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_head_info_args)
    MergeFrom(*source);
  }
}

void get_head_info_args::MergeFrom(const get_head_info_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_head_info_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void get_head_info_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_head_info_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_head_info_args::CopyFrom(const get_head_info_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_head_info_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_head_info_args::IsInitialized() const {
  return true;
}

void get_head_info_args::InternalSwap(get_head_info_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_head_info_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_head_info_return::_Internal {
 public:
  static const ::koinos::chain::head_info& value(const get_head_info_return* msg);
};

const ::koinos::chain::head_info&
get_head_info_return::_Internal::value(const get_head_info_return* msg) {
  return *msg->value_;
}
get_head_info_return::get_head_info_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_head_info_return)
}
get_head_info_return::get_head_info_return(const get_head_info_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::koinos::chain::head_info(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_head_info_return)
}

void get_head_info_return::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_head_info_return_koinos_2fchain_2fchain_2eproto.base);
  value_ = nullptr;
}

get_head_info_return::~get_head_info_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_head_info_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_head_info_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void get_head_info_return::ArenaDtor(void* object) {
  get_head_info_return* _this = reinterpret_cast< get_head_info_return* >(object);
  (void)_this;
}
void get_head_info_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_head_info_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_head_info_return& get_head_info_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_head_info_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_head_info_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_head_info_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_head_info_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.chain.head_info value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_head_info_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_head_info_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.chain.head_info value = 1;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_head_info_return)
  return target;
}

size_t get_head_info_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_head_info_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.chain.head_info value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_head_info_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_head_info_return)
  GOOGLE_DCHECK_NE(&from, this);
  const get_head_info_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_head_info_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_head_info_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_head_info_return)
    MergeFrom(*source);
  }
}

void get_head_info_return::MergeFrom(const get_head_info_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_head_info_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::koinos::chain::head_info::MergeFrom(from._internal_value());
  }
}

void get_head_info_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_head_info_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_head_info_return::CopyFrom(const get_head_info_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_head_info_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_head_info_return::IsInitialized() const {
  return true;
}

void get_head_info_return::InternalSwap(get_head_info_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_head_info_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class hash_args::_Internal {
 public:
};

hash_args::hash_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.hash_args)
}
hash_args::hash_args(const hash_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  obj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_obj().empty()) {
    obj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_obj(), 
      GetArena());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&code_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:koinos.chain.hash_args)
}

void hash_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_hash_args_koinos_2fchain_2fchain_2eproto.base);
  obj_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&code_)) + sizeof(size_));
}

hash_args::~hash_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.hash_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void hash_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  obj_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void hash_args::ArenaDtor(void* object) {
  hash_args* _this = reinterpret_cast< hash_args* >(object);
  (void)_this;
}
void hash_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hash_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const hash_args& hash_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_hash_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void hash_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.hash_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obj_.ClearToEmpty();
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&code_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hash_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes obj = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_obj();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hash_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.hash_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_code(), target);
  }

  // bytes obj = 2;
  if (this->obj().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_obj(), target);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.hash_args)
  return target;
}

size_t hash_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.hash_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes obj = 2;
  if (this->obj().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_obj());
  }

  // uint64 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_code());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hash_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.hash_args)
  GOOGLE_DCHECK_NE(&from, this);
  const hash_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<hash_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.hash_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.hash_args)
    MergeFrom(*source);
  }
}

void hash_args::MergeFrom(const hash_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.hash_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj().size() > 0) {
    _internal_set_obj(from._internal_obj());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void hash_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.hash_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hash_args::CopyFrom(const hash_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.hash_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hash_args::IsInitialized() const {
  return true;
}

void hash_args::InternalSwap(hash_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  obj_.Swap(&other->obj_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(hash_args, size_)
      + sizeof(hash_args::size_)
      - PROTOBUF_FIELD_OFFSET(hash_args, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata hash_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class hash_return::_Internal {
 public:
};

hash_return::hash_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.hash_return)
}
hash_return::hash_return(const hash_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.hash_return)
}

void hash_return::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_hash_return_koinos_2fchain_2fchain_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

hash_return::~hash_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.hash_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void hash_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void hash_return::ArenaDtor(void* object) {
  hash_return* _this = reinterpret_cast< hash_return* >(object);
  (void)_this;
}
void hash_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hash_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const hash_return& hash_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_hash_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void hash_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.hash_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hash_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hash_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.hash_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.hash_return)
  return target;
}

size_t hash_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.hash_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hash_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.hash_return)
  GOOGLE_DCHECK_NE(&from, this);
  const hash_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<hash_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.hash_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.hash_return)
    MergeFrom(*source);
  }
}

void hash_return::MergeFrom(const hash_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.hash_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void hash_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.hash_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hash_return::CopyFrom(const hash_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.hash_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hash_return::IsInitialized() const {
  return true;
}

void hash_return::InternalSwap(hash_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata hash_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class recover_public_key_args::_Internal {
 public:
};

recover_public_key_args::recover_public_key_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.recover_public_key_args)
}
recover_public_key_args::recover_public_key_args(const recover_public_key_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature_data().empty()) {
    signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature_data(), 
      GetArena());
  }
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_digest().empty()) {
    digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_digest(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.recover_public_key_args)
}

void recover_public_key_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_recover_public_key_args_koinos_2fchain_2fchain_2eproto.base);
  signature_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

recover_public_key_args::~recover_public_key_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.recover_public_key_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void recover_public_key_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  signature_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void recover_public_key_args::ArenaDtor(void* object) {
  recover_public_key_args* _this = reinterpret_cast< recover_public_key_args* >(object);
  (void)_this;
}
void recover_public_key_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recover_public_key_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const recover_public_key_args& recover_public_key_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_recover_public_key_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void recover_public_key_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.recover_public_key_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_data_.ClearToEmpty();
  digest_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recover_public_key_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes signature_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signature_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes digest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_digest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* recover_public_key_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.recover_public_key_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature_data = 1;
  if (this->signature_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature_data(), target);
  }

  // bytes digest = 2;
  if (this->digest().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_digest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.recover_public_key_args)
  return target;
}

size_t recover_public_key_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.recover_public_key_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature_data = 1;
  if (this->signature_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature_data());
  }

  // bytes digest = 2;
  if (this->digest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void recover_public_key_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.recover_public_key_args)
  GOOGLE_DCHECK_NE(&from, this);
  const recover_public_key_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<recover_public_key_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.recover_public_key_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.recover_public_key_args)
    MergeFrom(*source);
  }
}

void recover_public_key_args::MergeFrom(const recover_public_key_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.recover_public_key_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature_data().size() > 0) {
    _internal_set_signature_data(from._internal_signature_data());
  }
  if (from.digest().size() > 0) {
    _internal_set_digest(from._internal_digest());
  }
}

void recover_public_key_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.recover_public_key_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recover_public_key_args::CopyFrom(const recover_public_key_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.recover_public_key_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recover_public_key_args::IsInitialized() const {
  return true;
}

void recover_public_key_args::InternalSwap(recover_public_key_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signature_data_.Swap(&other->signature_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  digest_.Swap(&other->digest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata recover_public_key_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class recover_public_key_return::_Internal {
 public:
};

recover_public_key_return::recover_public_key_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.recover_public_key_return)
}
recover_public_key_return::recover_public_key_return(const recover_public_key_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.recover_public_key_return)
}

void recover_public_key_return::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_recover_public_key_return_koinos_2fchain_2fchain_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

recover_public_key_return::~recover_public_key_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.recover_public_key_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void recover_public_key_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void recover_public_key_return::ArenaDtor(void* object) {
  recover_public_key_return* _this = reinterpret_cast< recover_public_key_return* >(object);
  (void)_this;
}
void recover_public_key_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recover_public_key_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const recover_public_key_return& recover_public_key_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_recover_public_key_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void recover_public_key_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.recover_public_key_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recover_public_key_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* recover_public_key_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.recover_public_key_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.recover_public_key_return)
  return target;
}

size_t recover_public_key_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.recover_public_key_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void recover_public_key_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.recover_public_key_return)
  GOOGLE_DCHECK_NE(&from, this);
  const recover_public_key_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<recover_public_key_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.recover_public_key_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.recover_public_key_return)
    MergeFrom(*source);
  }
}

void recover_public_key_return::MergeFrom(const recover_public_key_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.recover_public_key_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void recover_public_key_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.recover_public_key_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void recover_public_key_return::CopyFrom(const recover_public_key_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.recover_public_key_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recover_public_key_return::IsInitialized() const {
  return true;
}

void recover_public_key_return::InternalSwap(recover_public_key_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata recover_public_key_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_transaction_payer_args::_Internal {
 public:
  static const ::koinos::protocol::transaction& transaction(const get_transaction_payer_args* msg);
};

const ::koinos::protocol::transaction&
get_transaction_payer_args::_Internal::transaction(const get_transaction_payer_args* msg) {
  return *msg->transaction_;
}
void get_transaction_payer_args::clear_transaction() {
  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
get_transaction_payer_args::get_transaction_payer_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_transaction_payer_args)
}
get_transaction_payer_args::get_transaction_payer_args(const get_transaction_payer_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::koinos::protocol::transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_transaction_payer_args)
}

void get_transaction_payer_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_transaction_payer_args_koinos_2fchain_2fchain_2eproto.base);
  transaction_ = nullptr;
}

get_transaction_payer_args::~get_transaction_payer_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_transaction_payer_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_transaction_payer_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void get_transaction_payer_args::ArenaDtor(void* object) {
  get_transaction_payer_args* _this = reinterpret_cast< get_transaction_payer_args* >(object);
  (void)_this;
}
void get_transaction_payer_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transaction_payer_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_transaction_payer_args& get_transaction_payer_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_transaction_payer_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_transaction_payer_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_transaction_payer_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transaction_payer_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transaction_payer_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_transaction_payer_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_transaction_payer_args)
  return target;
}

size_t get_transaction_payer_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_transaction_payer_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_transaction_payer_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_transaction_payer_args)
  GOOGLE_DCHECK_NE(&from, this);
  const get_transaction_payer_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_transaction_payer_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_transaction_payer_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_transaction_payer_args)
    MergeFrom(*source);
  }
}

void get_transaction_payer_args::MergeFrom(const get_transaction_payer_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_transaction_payer_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transaction()) {
    _internal_mutable_transaction()->::koinos::protocol::transaction::MergeFrom(from._internal_transaction());
  }
}

void get_transaction_payer_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_transaction_payer_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_transaction_payer_args::CopyFrom(const get_transaction_payer_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_transaction_payer_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transaction_payer_args::IsInitialized() const {
  return true;
}

void get_transaction_payer_args::InternalSwap(get_transaction_payer_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transaction_payer_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_transaction_payer_return::_Internal {
 public:
};

get_transaction_payer_return::get_transaction_payer_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_transaction_payer_return)
}
get_transaction_payer_return::get_transaction_payer_return(const get_transaction_payer_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_transaction_payer_return)
}

void get_transaction_payer_return::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_transaction_payer_return_koinos_2fchain_2fchain_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_transaction_payer_return::~get_transaction_payer_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_transaction_payer_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_transaction_payer_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_transaction_payer_return::ArenaDtor(void* object) {
  get_transaction_payer_return* _this = reinterpret_cast< get_transaction_payer_return* >(object);
  (void)_this;
}
void get_transaction_payer_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transaction_payer_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_transaction_payer_return& get_transaction_payer_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_transaction_payer_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_transaction_payer_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_transaction_payer_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transaction_payer_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transaction_payer_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_transaction_payer_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_transaction_payer_return)
  return target;
}

size_t get_transaction_payer_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_transaction_payer_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_transaction_payer_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_transaction_payer_return)
  GOOGLE_DCHECK_NE(&from, this);
  const get_transaction_payer_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_transaction_payer_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_transaction_payer_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_transaction_payer_return)
    MergeFrom(*source);
  }
}

void get_transaction_payer_return::MergeFrom(const get_transaction_payer_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_transaction_payer_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void get_transaction_payer_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_transaction_payer_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_transaction_payer_return::CopyFrom(const get_transaction_payer_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_transaction_payer_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transaction_payer_return::IsInitialized() const {
  return true;
}

void get_transaction_payer_return::InternalSwap(get_transaction_payer_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transaction_payer_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_max_account_resources_args::_Internal {
 public:
};

get_max_account_resources_args::get_max_account_resources_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_max_account_resources_args)
}
get_max_account_resources_args::get_max_account_resources_args(const get_max_account_resources_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_max_account_resources_args)
}

void get_max_account_resources_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_max_account_resources_args_koinos_2fchain_2fchain_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_max_account_resources_args::~get_max_account_resources_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_max_account_resources_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_max_account_resources_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_max_account_resources_args::ArenaDtor(void* object) {
  get_max_account_resources_args* _this = reinterpret_cast< get_max_account_resources_args* >(object);
  (void)_this;
}
void get_max_account_resources_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_max_account_resources_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_max_account_resources_args& get_max_account_resources_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_max_account_resources_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_max_account_resources_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_max_account_resources_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_max_account_resources_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_max_account_resources_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_max_account_resources_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_max_account_resources_args)
  return target;
}

size_t get_max_account_resources_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_max_account_resources_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_max_account_resources_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_max_account_resources_args)
  GOOGLE_DCHECK_NE(&from, this);
  const get_max_account_resources_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_max_account_resources_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_max_account_resources_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_max_account_resources_args)
    MergeFrom(*source);
  }
}

void get_max_account_resources_args::MergeFrom(const get_max_account_resources_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_max_account_resources_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {
    _internal_set_account(from._internal_account());
  }
}

void get_max_account_resources_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_max_account_resources_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_max_account_resources_args::CopyFrom(const get_max_account_resources_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_max_account_resources_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_max_account_resources_args::IsInitialized() const {
  return true;
}

void get_max_account_resources_args::InternalSwap(get_max_account_resources_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata get_max_account_resources_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_max_account_resources_return::_Internal {
 public:
};

get_max_account_resources_return::get_max_account_resources_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_max_account_resources_return)
}
get_max_account_resources_return::get_max_account_resources_return(const get_max_account_resources_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_max_account_resources_return)
}

void get_max_account_resources_return::SharedCtor() {
  value_ = PROTOBUF_ULONGLONG(0);
}

get_max_account_resources_return::~get_max_account_resources_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_max_account_resources_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_max_account_resources_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_max_account_resources_return::ArenaDtor(void* object) {
  get_max_account_resources_return* _this = reinterpret_cast< get_max_account_resources_return* >(object);
  (void)_this;
}
void get_max_account_resources_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_max_account_resources_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_max_account_resources_return& get_max_account_resources_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_max_account_resources_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_max_account_resources_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_max_account_resources_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_max_account_resources_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_max_account_resources_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_max_account_resources_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_max_account_resources_return)
  return target;
}

size_t get_max_account_resources_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_max_account_resources_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_max_account_resources_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_max_account_resources_return)
  GOOGLE_DCHECK_NE(&from, this);
  const get_max_account_resources_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_max_account_resources_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_max_account_resources_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_max_account_resources_return)
    MergeFrom(*source);
  }
}

void get_max_account_resources_return::MergeFrom(const get_max_account_resources_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_max_account_resources_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void get_max_account_resources_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_max_account_resources_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_max_account_resources_return::CopyFrom(const get_max_account_resources_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_max_account_resources_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_max_account_resources_return::IsInitialized() const {
  return true;
}

void get_max_account_resources_return::InternalSwap(get_max_account_resources_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_max_account_resources_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_transaction_resource_limit_args::_Internal {
 public:
  static const ::koinos::protocol::transaction& transction(const get_transaction_resource_limit_args* msg);
};

const ::koinos::protocol::transaction&
get_transaction_resource_limit_args::_Internal::transction(const get_transaction_resource_limit_args* msg) {
  return *msg->transction_;
}
void get_transaction_resource_limit_args::clear_transction() {
  if (GetArena() == nullptr && transction_ != nullptr) {
    delete transction_;
  }
  transction_ = nullptr;
}
get_transaction_resource_limit_args::get_transaction_resource_limit_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_transaction_resource_limit_args)
}
get_transaction_resource_limit_args::get_transaction_resource_limit_args(const get_transaction_resource_limit_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transction()) {
    transction_ = new ::koinos::protocol::transaction(*from.transction_);
  } else {
    transction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_transaction_resource_limit_args)
}

void get_transaction_resource_limit_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_transaction_resource_limit_args_koinos_2fchain_2fchain_2eproto.base);
  transction_ = nullptr;
}

get_transaction_resource_limit_args::~get_transaction_resource_limit_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_transaction_resource_limit_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_transaction_resource_limit_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transction_;
}

void get_transaction_resource_limit_args::ArenaDtor(void* object) {
  get_transaction_resource_limit_args* _this = reinterpret_cast< get_transaction_resource_limit_args* >(object);
  (void)_this;
}
void get_transaction_resource_limit_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transaction_resource_limit_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_transaction_resource_limit_args& get_transaction_resource_limit_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_transaction_resource_limit_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_transaction_resource_limit_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_transaction_resource_limit_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transction_ != nullptr) {
    delete transction_;
  }
  transction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transaction_resource_limit_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transaction_resource_limit_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_transaction_resource_limit_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transction = 1;
  if (this->has_transction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_transaction_resource_limit_args)
  return target;
}

size_t get_transaction_resource_limit_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_transaction_resource_limit_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction transction = 1;
  if (this->has_transction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transction_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_transaction_resource_limit_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_transaction_resource_limit_args)
  GOOGLE_DCHECK_NE(&from, this);
  const get_transaction_resource_limit_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_transaction_resource_limit_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_transaction_resource_limit_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_transaction_resource_limit_args)
    MergeFrom(*source);
  }
}

void get_transaction_resource_limit_args::MergeFrom(const get_transaction_resource_limit_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_transaction_resource_limit_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transction()) {
    _internal_mutable_transction()->::koinos::protocol::transaction::MergeFrom(from._internal_transction());
  }
}

void get_transaction_resource_limit_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_transaction_resource_limit_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_transaction_resource_limit_args::CopyFrom(const get_transaction_resource_limit_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_transaction_resource_limit_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transaction_resource_limit_args::IsInitialized() const {
  return true;
}

void get_transaction_resource_limit_args::InternalSwap(get_transaction_resource_limit_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(transction_, other->transction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transaction_resource_limit_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_transaction_resource_limit_return::_Internal {
 public:
};

get_transaction_resource_limit_return::get_transaction_resource_limit_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_transaction_resource_limit_return)
}
get_transaction_resource_limit_return::get_transaction_resource_limit_return(const get_transaction_resource_limit_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_transaction_resource_limit_return)
}

void get_transaction_resource_limit_return::SharedCtor() {
  value_ = PROTOBUF_ULONGLONG(0);
}

get_transaction_resource_limit_return::~get_transaction_resource_limit_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_transaction_resource_limit_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_transaction_resource_limit_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_transaction_resource_limit_return::ArenaDtor(void* object) {
  get_transaction_resource_limit_return* _this = reinterpret_cast< get_transaction_resource_limit_return* >(object);
  (void)_this;
}
void get_transaction_resource_limit_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transaction_resource_limit_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_transaction_resource_limit_return& get_transaction_resource_limit_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_transaction_resource_limit_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_transaction_resource_limit_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_transaction_resource_limit_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transaction_resource_limit_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transaction_resource_limit_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_transaction_resource_limit_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_transaction_resource_limit_return)
  return target;
}

size_t get_transaction_resource_limit_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_transaction_resource_limit_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_transaction_resource_limit_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_transaction_resource_limit_return)
  GOOGLE_DCHECK_NE(&from, this);
  const get_transaction_resource_limit_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_transaction_resource_limit_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_transaction_resource_limit_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_transaction_resource_limit_return)
    MergeFrom(*source);
  }
}

void get_transaction_resource_limit_return::MergeFrom(const get_transaction_resource_limit_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_transaction_resource_limit_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void get_transaction_resource_limit_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_transaction_resource_limit_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_transaction_resource_limit_return::CopyFrom(const get_transaction_resource_limit_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_transaction_resource_limit_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transaction_resource_limit_return::IsInitialized() const {
  return true;
}

void get_transaction_resource_limit_return::InternalSwap(get_transaction_resource_limit_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transaction_resource_limit_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_last_irreversible_block_args::_Internal {
 public:
};

get_last_irreversible_block_args::get_last_irreversible_block_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_last_irreversible_block_args)
}
get_last_irreversible_block_args::get_last_irreversible_block_args(const get_last_irreversible_block_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_last_irreversible_block_args)
}

void get_last_irreversible_block_args::SharedCtor() {
}

get_last_irreversible_block_args::~get_last_irreversible_block_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_last_irreversible_block_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_last_irreversible_block_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_last_irreversible_block_args::ArenaDtor(void* object) {
  get_last_irreversible_block_args* _this = reinterpret_cast< get_last_irreversible_block_args* >(object);
  (void)_this;
}
void get_last_irreversible_block_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_last_irreversible_block_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_last_irreversible_block_args& get_last_irreversible_block_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_last_irreversible_block_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_last_irreversible_block_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_last_irreversible_block_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_last_irreversible_block_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_last_irreversible_block_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_last_irreversible_block_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_last_irreversible_block_args)
  return target;
}

size_t get_last_irreversible_block_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_last_irreversible_block_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_last_irreversible_block_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_last_irreversible_block_args)
  GOOGLE_DCHECK_NE(&from, this);
  const get_last_irreversible_block_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_last_irreversible_block_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_last_irreversible_block_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_last_irreversible_block_args)
    MergeFrom(*source);
  }
}

void get_last_irreversible_block_args::MergeFrom(const get_last_irreversible_block_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_last_irreversible_block_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void get_last_irreversible_block_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_last_irreversible_block_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_last_irreversible_block_args::CopyFrom(const get_last_irreversible_block_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_last_irreversible_block_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_last_irreversible_block_args::IsInitialized() const {
  return true;
}

void get_last_irreversible_block_args::InternalSwap(get_last_irreversible_block_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_last_irreversible_block_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_last_irreversible_block_return::_Internal {
 public:
  static const ::koinos::block_topology& value(const get_last_irreversible_block_return* msg);
};

const ::koinos::block_topology&
get_last_irreversible_block_return::_Internal::value(const get_last_irreversible_block_return* msg) {
  return *msg->value_;
}
void get_last_irreversible_block_return::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
get_last_irreversible_block_return::get_last_irreversible_block_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_last_irreversible_block_return)
}
get_last_irreversible_block_return::get_last_irreversible_block_return(const get_last_irreversible_block_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::koinos::block_topology(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_last_irreversible_block_return)
}

void get_last_irreversible_block_return::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_last_irreversible_block_return_koinos_2fchain_2fchain_2eproto.base);
  value_ = nullptr;
}

get_last_irreversible_block_return::~get_last_irreversible_block_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_last_irreversible_block_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_last_irreversible_block_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_;
}

void get_last_irreversible_block_return::ArenaDtor(void* object) {
  get_last_irreversible_block_return* _this = reinterpret_cast< get_last_irreversible_block_return* >(object);
  (void)_this;
}
void get_last_irreversible_block_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_last_irreversible_block_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_last_irreversible_block_return& get_last_irreversible_block_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_last_irreversible_block_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_last_irreversible_block_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_last_irreversible_block_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_last_irreversible_block_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.block_topology value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_last_irreversible_block_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_last_irreversible_block_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.block_topology value = 1;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_last_irreversible_block_return)
  return target;
}

size_t get_last_irreversible_block_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_last_irreversible_block_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.block_topology value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_last_irreversible_block_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_last_irreversible_block_return)
  GOOGLE_DCHECK_NE(&from, this);
  const get_last_irreversible_block_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_last_irreversible_block_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_last_irreversible_block_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_last_irreversible_block_return)
    MergeFrom(*source);
  }
}

void get_last_irreversible_block_return::MergeFrom(const get_last_irreversible_block_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_last_irreversible_block_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::koinos::block_topology::MergeFrom(from._internal_value());
  }
}

void get_last_irreversible_block_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_last_irreversible_block_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_last_irreversible_block_return::CopyFrom(const get_last_irreversible_block_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_last_irreversible_block_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_last_irreversible_block_return::IsInitialized() const {
  return true;
}

void get_last_irreversible_block_return::InternalSwap(get_last_irreversible_block_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_last_irreversible_block_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_caller_args::_Internal {
 public:
};

get_caller_args::get_caller_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_caller_args)
}
get_caller_args::get_caller_args(const get_caller_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_caller_args)
}

void get_caller_args::SharedCtor() {
}

get_caller_args::~get_caller_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_caller_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_caller_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_caller_args::ArenaDtor(void* object) {
  get_caller_args* _this = reinterpret_cast< get_caller_args* >(object);
  (void)_this;
}
void get_caller_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_caller_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_caller_args& get_caller_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_caller_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_caller_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_caller_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_caller_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_caller_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_caller_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_caller_args)
  return target;
}

size_t get_caller_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_caller_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_caller_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_caller_args)
  GOOGLE_DCHECK_NE(&from, this);
  const get_caller_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_caller_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_caller_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_caller_args)
    MergeFrom(*source);
  }
}

void get_caller_args::MergeFrom(const get_caller_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_caller_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void get_caller_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_caller_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_caller_args::CopyFrom(const get_caller_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_caller_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_caller_args::IsInitialized() const {
  return true;
}

void get_caller_args::InternalSwap(get_caller_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_caller_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_caller_return::_Internal {
 public:
};

get_caller_return::get_caller_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_caller_return)
}
get_caller_return::get_caller_return(const get_caller_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_caller().empty()) {
    caller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_caller(), 
      GetArena());
  }
  caller_privilege_ = from.caller_privilege_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_caller_return)
}

void get_caller_return::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_caller_return_koinos_2fchain_2fchain_2eproto.base);
  caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_privilege_ = 0;
}

get_caller_return::~get_caller_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_caller_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_caller_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  caller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_caller_return::ArenaDtor(void* object) {
  get_caller_return* _this = reinterpret_cast< get_caller_return* >(object);
  (void)_this;
}
void get_caller_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_caller_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_caller_return& get_caller_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_caller_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_caller_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_caller_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  caller_.ClearToEmpty();
  caller_privilege_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_caller_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes caller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_caller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.chain.privilege caller_privilege = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_caller_privilege(static_cast<::koinos::chain::privilege>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_caller_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_caller_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes caller = 1;
  if (this->caller().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_caller(), target);
  }

  // .koinos.chain.privilege caller_privilege = 2;
  if (this->caller_privilege() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_caller_privilege(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_caller_return)
  return target;
}

size_t get_caller_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_caller_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes caller = 1;
  if (this->caller().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_caller());
  }

  // .koinos.chain.privilege caller_privilege = 2;
  if (this->caller_privilege() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_caller_privilege());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_caller_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_caller_return)
  GOOGLE_DCHECK_NE(&from, this);
  const get_caller_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_caller_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_caller_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_caller_return)
    MergeFrom(*source);
  }
}

void get_caller_return::MergeFrom(const get_caller_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_caller_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.caller().size() > 0) {
    _internal_set_caller(from._internal_caller());
  }
  if (from.caller_privilege() != 0) {
    _internal_set_caller_privilege(from._internal_caller_privilege());
  }
}

void get_caller_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_caller_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_caller_return::CopyFrom(const get_caller_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_caller_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_caller_return::IsInitialized() const {
  return true;
}

void get_caller_return::InternalSwap(get_caller_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  caller_.Swap(&other->caller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(caller_privilege_, other->caller_privilege_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_caller_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class require_authority_args::_Internal {
 public:
};

require_authority_args::require_authority_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.require_authority_args)
}
require_authority_args::require_authority_args(const require_authority_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.require_authority_args)
}

void require_authority_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_require_authority_args_koinos_2fchain_2fchain_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

require_authority_args::~require_authority_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.require_authority_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void require_authority_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void require_authority_args::ArenaDtor(void* object) {
  require_authority_args* _this = reinterpret_cast< require_authority_args* >(object);
  (void)_this;
}
void require_authority_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void require_authority_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const require_authority_args& require_authority_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_require_authority_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void require_authority_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.require_authority_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* require_authority_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* require_authority_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.require_authority_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.require_authority_args)
  return target;
}

size_t require_authority_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.require_authority_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void require_authority_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.require_authority_args)
  GOOGLE_DCHECK_NE(&from, this);
  const require_authority_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<require_authority_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.require_authority_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.require_authority_args)
    MergeFrom(*source);
  }
}

void require_authority_args::MergeFrom(const require_authority_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.require_authority_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {
    _internal_set_account(from._internal_account());
  }
}

void require_authority_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.require_authority_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void require_authority_args::CopyFrom(const require_authority_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.require_authority_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool require_authority_args::IsInitialized() const {
  return true;
}

void require_authority_args::InternalSwap(require_authority_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata require_authority_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class require_authority_return::_Internal {
 public:
};

require_authority_return::require_authority_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.require_authority_return)
}
require_authority_return::require_authority_return(const require_authority_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.require_authority_return)
}

void require_authority_return::SharedCtor() {
}

require_authority_return::~require_authority_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.require_authority_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void require_authority_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void require_authority_return::ArenaDtor(void* object) {
  require_authority_return* _this = reinterpret_cast< require_authority_return* >(object);
  (void)_this;
}
void require_authority_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void require_authority_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const require_authority_return& require_authority_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_require_authority_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void require_authority_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.require_authority_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* require_authority_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* require_authority_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.require_authority_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.require_authority_return)
  return target;
}

size_t require_authority_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.require_authority_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void require_authority_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.require_authority_return)
  GOOGLE_DCHECK_NE(&from, this);
  const require_authority_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<require_authority_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.require_authority_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.require_authority_return)
    MergeFrom(*source);
  }
}

void require_authority_return::MergeFrom(const require_authority_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.require_authority_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void require_authority_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.require_authority_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void require_authority_return::CopyFrom(const require_authority_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.require_authority_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool require_authority_return::IsInitialized() const {
  return true;
}

void require_authority_return::InternalSwap(require_authority_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata require_authority_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_transaction_signature_args::_Internal {
 public:
};

get_transaction_signature_args::get_transaction_signature_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_transaction_signature_args)
}
get_transaction_signature_args::get_transaction_signature_args(const get_transaction_signature_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_transaction_signature_args)
}

void get_transaction_signature_args::SharedCtor() {
}

get_transaction_signature_args::~get_transaction_signature_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_transaction_signature_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_transaction_signature_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_transaction_signature_args::ArenaDtor(void* object) {
  get_transaction_signature_args* _this = reinterpret_cast< get_transaction_signature_args* >(object);
  (void)_this;
}
void get_transaction_signature_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transaction_signature_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_transaction_signature_args& get_transaction_signature_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_transaction_signature_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_transaction_signature_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_transaction_signature_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transaction_signature_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transaction_signature_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_transaction_signature_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_transaction_signature_args)
  return target;
}

size_t get_transaction_signature_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_transaction_signature_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_transaction_signature_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_transaction_signature_args)
  GOOGLE_DCHECK_NE(&from, this);
  const get_transaction_signature_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_transaction_signature_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_transaction_signature_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_transaction_signature_args)
    MergeFrom(*source);
  }
}

void get_transaction_signature_args::MergeFrom(const get_transaction_signature_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_transaction_signature_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void get_transaction_signature_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_transaction_signature_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_transaction_signature_args::CopyFrom(const get_transaction_signature_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_transaction_signature_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transaction_signature_args::IsInitialized() const {
  return true;
}

void get_transaction_signature_args::InternalSwap(get_transaction_signature_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transaction_signature_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_transaction_signature_return::_Internal {
 public:
};

get_transaction_signature_return::get_transaction_signature_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_transaction_signature_return)
}
get_transaction_signature_return::get_transaction_signature_return(const get_transaction_signature_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_transaction_signature_return)
}

void get_transaction_signature_return::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_transaction_signature_return_koinos_2fchain_2fchain_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_transaction_signature_return::~get_transaction_signature_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_transaction_signature_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_transaction_signature_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_transaction_signature_return::ArenaDtor(void* object) {
  get_transaction_signature_return* _this = reinterpret_cast< get_transaction_signature_return* >(object);
  (void)_this;
}
void get_transaction_signature_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_transaction_signature_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_transaction_signature_return& get_transaction_signature_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_transaction_signature_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_transaction_signature_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_transaction_signature_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_transaction_signature_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_transaction_signature_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_transaction_signature_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_transaction_signature_return)
  return target;
}

size_t get_transaction_signature_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_transaction_signature_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_transaction_signature_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_transaction_signature_return)
  GOOGLE_DCHECK_NE(&from, this);
  const get_transaction_signature_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_transaction_signature_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_transaction_signature_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_transaction_signature_return)
    MergeFrom(*source);
  }
}

void get_transaction_signature_return::MergeFrom(const get_transaction_signature_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_transaction_signature_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void get_transaction_signature_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_transaction_signature_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_transaction_signature_return::CopyFrom(const get_transaction_signature_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_transaction_signature_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_transaction_signature_return::IsInitialized() const {
  return true;
}

void get_transaction_signature_return::InternalSwap(get_transaction_signature_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata get_transaction_signature_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_contract_id_args::_Internal {
 public:
};

get_contract_id_args::get_contract_id_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_contract_id_args)
}
get_contract_id_args::get_contract_id_args(const get_contract_id_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_contract_id_args)
}

void get_contract_id_args::SharedCtor() {
}

get_contract_id_args::~get_contract_id_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_contract_id_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_contract_id_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_contract_id_args::ArenaDtor(void* object) {
  get_contract_id_args* _this = reinterpret_cast< get_contract_id_args* >(object);
  (void)_this;
}
void get_contract_id_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_id_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_contract_id_args& get_contract_id_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_contract_id_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_contract_id_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_contract_id_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_id_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_id_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_contract_id_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_contract_id_args)
  return target;
}

size_t get_contract_id_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_contract_id_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_contract_id_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_contract_id_args)
  GOOGLE_DCHECK_NE(&from, this);
  const get_contract_id_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_contract_id_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_contract_id_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_contract_id_args)
    MergeFrom(*source);
  }
}

void get_contract_id_args::MergeFrom(const get_contract_id_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_contract_id_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void get_contract_id_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_contract_id_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_contract_id_args::CopyFrom(const get_contract_id_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_contract_id_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_id_args::IsInitialized() const {
  return true;
}

void get_contract_id_args::InternalSwap(get_contract_id_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_id_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_contract_id_return::_Internal {
 public:
};

get_contract_id_return::get_contract_id_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_contract_id_return)
}
get_contract_id_return::get_contract_id_return(const get_contract_id_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_contract_id_return)
}

void get_contract_id_return::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_contract_id_return_koinos_2fchain_2fchain_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_contract_id_return::~get_contract_id_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_contract_id_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_contract_id_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_contract_id_return::ArenaDtor(void* object) {
  get_contract_id_return* _this = reinterpret_cast< get_contract_id_return* >(object);
  (void)_this;
}
void get_contract_id_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_contract_id_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_contract_id_return& get_contract_id_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_contract_id_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_contract_id_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_contract_id_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_contract_id_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_contract_id_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_contract_id_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_contract_id_return)
  return target;
}

size_t get_contract_id_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_contract_id_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_contract_id_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_contract_id_return)
  GOOGLE_DCHECK_NE(&from, this);
  const get_contract_id_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_contract_id_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_contract_id_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_contract_id_return)
    MergeFrom(*source);
  }
}

void get_contract_id_return::MergeFrom(const get_contract_id_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_contract_id_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void get_contract_id_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_contract_id_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_contract_id_return::CopyFrom(const get_contract_id_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_contract_id_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_contract_id_return::IsInitialized() const {
  return true;
}

void get_contract_id_return::InternalSwap(get_contract_id_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata get_contract_id_return::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_account_nonce_args::_Internal {
 public:
};

get_account_nonce_args::get_account_nonce_args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_account_nonce_args)
}
get_account_nonce_args::get_account_nonce_args(const get_account_nonce_args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_account_nonce_args)
}

void get_account_nonce_args::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_account_nonce_args_koinos_2fchain_2fchain_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_account_nonce_args::~get_account_nonce_args() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_account_nonce_args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_account_nonce_args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_account_nonce_args::ArenaDtor(void* object) {
  get_account_nonce_args* _this = reinterpret_cast< get_account_nonce_args* >(object);
  (void)_this;
}
void get_account_nonce_args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_nonce_args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_account_nonce_args& get_account_nonce_args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_account_nonce_args_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_account_nonce_args::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_account_nonce_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_nonce_args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_nonce_args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_account_nonce_args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_account_nonce_args)
  return target;
}

size_t get_account_nonce_args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_account_nonce_args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_account_nonce_args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_account_nonce_args)
  GOOGLE_DCHECK_NE(&from, this);
  const get_account_nonce_args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_account_nonce_args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_account_nonce_args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_account_nonce_args)
    MergeFrom(*source);
  }
}

void get_account_nonce_args::MergeFrom(const get_account_nonce_args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_account_nonce_args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {
    _internal_set_account(from._internal_account());
  }
}

void get_account_nonce_args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_account_nonce_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_account_nonce_args::CopyFrom(const get_account_nonce_args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_account_nonce_args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_nonce_args::IsInitialized() const {
  return true;
}

void get_account_nonce_args::InternalSwap(get_account_nonce_args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_nonce_args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_account_nonce_return::_Internal {
 public:
};

get_account_nonce_return::get_account_nonce_return(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.chain.get_account_nonce_return)
}
get_account_nonce_return::get_account_nonce_return(const get_account_nonce_return& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:koinos.chain.get_account_nonce_return)
}

void get_account_nonce_return::SharedCtor() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}

get_account_nonce_return::~get_account_nonce_return() {
  // @@protoc_insertion_point(destructor:koinos.chain.get_account_nonce_return)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_account_nonce_return::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_account_nonce_return::ArenaDtor(void* object) {
  get_account_nonce_return* _this = reinterpret_cast< get_account_nonce_return* >(object);
  (void)_this;
}
void get_account_nonce_return::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_nonce_return::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_account_nonce_return& get_account_nonce_return::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_account_nonce_return_koinos_2fchain_2fchain_2eproto.base);
  return *internal_default_instance();
}


void get_account_nonce_return::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.chain.get_account_nonce_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_nonce_return::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_nonce_return::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.chain.get_account_nonce_return)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.chain.get_account_nonce_return)
  return target;
}

size_t get_account_nonce_return::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.chain.get_account_nonce_return)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_account_nonce_return::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.chain.get_account_nonce_return)
  GOOGLE_DCHECK_NE(&from, this);
  const get_account_nonce_return* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_account_nonce_return>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.chain.get_account_nonce_return)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.chain.get_account_nonce_return)
    MergeFrom(*source);
  }
}

void get_account_nonce_return::MergeFrom(const get_account_nonce_return& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.chain.get_account_nonce_return)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
}

void get_account_nonce_return::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.chain.get_account_nonce_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_account_nonce_return::CopyFrom(const get_account_nonce_return& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.chain.get_account_nonce_return)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_nonce_return::IsInitialized() const {
  return true;
}

void get_account_nonce_return::InternalSwap(get_account_nonce_return* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(nonce_, other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_nonce_return::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chain
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::chain::head_info* Arena::CreateMaybeMessage< ::koinos::chain::head_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::head_info >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::prints_args* Arena::CreateMaybeMessage< ::koinos::chain::prints_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::prints_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::prints_return* Arena::CreateMaybeMessage< ::koinos::chain::prints_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::prints_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::verify_block_signature_args* Arena::CreateMaybeMessage< ::koinos::chain::verify_block_signature_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::verify_block_signature_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::verify_block_signature_return* Arena::CreateMaybeMessage< ::koinos::chain::verify_block_signature_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::verify_block_signature_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::verify_merkle_root_args* Arena::CreateMaybeMessage< ::koinos::chain::verify_merkle_root_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::verify_merkle_root_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::verify_merkle_root_return* Arena::CreateMaybeMessage< ::koinos::chain::verify_merkle_root_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::verify_merkle_root_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_block_args* Arena::CreateMaybeMessage< ::koinos::chain::apply_block_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_block_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_block_return* Arena::CreateMaybeMessage< ::koinos::chain::apply_block_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_block_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_transaction_args* Arena::CreateMaybeMessage< ::koinos::chain::apply_transaction_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_transaction_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_transaction_return* Arena::CreateMaybeMessage< ::koinos::chain::apply_transaction_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_transaction_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_upload_contract_operation_args* Arena::CreateMaybeMessage< ::koinos::chain::apply_upload_contract_operation_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_upload_contract_operation_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_upload_contract_operation_return* Arena::CreateMaybeMessage< ::koinos::chain::apply_upload_contract_operation_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_upload_contract_operation_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_call_contract_operation_args* Arena::CreateMaybeMessage< ::koinos::chain::apply_call_contract_operation_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_call_contract_operation_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_call_contract_operation_return* Arena::CreateMaybeMessage< ::koinos::chain::apply_call_contract_operation_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_call_contract_operation_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::apply_set_system_call_operation_args* Arena::CreateMaybeMessage< ::koinos::chain::apply_set_system_call_operation_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::apply_set_system_call_operation_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::db_put_object_args* Arena::CreateMaybeMessage< ::koinos::chain::db_put_object_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::db_put_object_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::db_put_object_return* Arena::CreateMaybeMessage< ::koinos::chain::db_put_object_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::db_put_object_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::db_get_object_args* Arena::CreateMaybeMessage< ::koinos::chain::db_get_object_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::db_get_object_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::db_get_object_return* Arena::CreateMaybeMessage< ::koinos::chain::db_get_object_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::db_get_object_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::db_get_next_object_args* Arena::CreateMaybeMessage< ::koinos::chain::db_get_next_object_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::db_get_next_object_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::db_get_next_object_return* Arena::CreateMaybeMessage< ::koinos::chain::db_get_next_object_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::db_get_next_object_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::db_get_prev_object_args* Arena::CreateMaybeMessage< ::koinos::chain::db_get_prev_object_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::db_get_prev_object_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::db_get_prev_object_return* Arena::CreateMaybeMessage< ::koinos::chain::db_get_prev_object_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::db_get_prev_object_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::call_contract_args* Arena::CreateMaybeMessage< ::koinos::chain::call_contract_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::call_contract_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::call_contract_return* Arena::CreateMaybeMessage< ::koinos::chain::call_contract_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::call_contract_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_entry_point_args* Arena::CreateMaybeMessage< ::koinos::chain::get_entry_point_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_entry_point_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_entry_point_return* Arena::CreateMaybeMessage< ::koinos::chain::get_entry_point_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_entry_point_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_contract_args_size_args* Arena::CreateMaybeMessage< ::koinos::chain::get_contract_args_size_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_contract_args_size_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_contract_args_size_return* Arena::CreateMaybeMessage< ::koinos::chain::get_contract_args_size_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_contract_args_size_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_contract_args_args* Arena::CreateMaybeMessage< ::koinos::chain::get_contract_args_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_contract_args_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_contract_args_return* Arena::CreateMaybeMessage< ::koinos::chain::get_contract_args_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_contract_args_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::set_contract_return_args* Arena::CreateMaybeMessage< ::koinos::chain::set_contract_return_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::set_contract_return_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::set_contract_return_return* Arena::CreateMaybeMessage< ::koinos::chain::set_contract_return_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::set_contract_return_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::exit_contract_args* Arena::CreateMaybeMessage< ::koinos::chain::exit_contract_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::exit_contract_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::exit_contract_return* Arena::CreateMaybeMessage< ::koinos::chain::exit_contract_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::exit_contract_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_head_info_args* Arena::CreateMaybeMessage< ::koinos::chain::get_head_info_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_head_info_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_head_info_return* Arena::CreateMaybeMessage< ::koinos::chain::get_head_info_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_head_info_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::hash_args* Arena::CreateMaybeMessage< ::koinos::chain::hash_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::hash_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::hash_return* Arena::CreateMaybeMessage< ::koinos::chain::hash_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::hash_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::recover_public_key_args* Arena::CreateMaybeMessage< ::koinos::chain::recover_public_key_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::recover_public_key_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::recover_public_key_return* Arena::CreateMaybeMessage< ::koinos::chain::recover_public_key_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::recover_public_key_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_transaction_payer_args* Arena::CreateMaybeMessage< ::koinos::chain::get_transaction_payer_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_transaction_payer_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_transaction_payer_return* Arena::CreateMaybeMessage< ::koinos::chain::get_transaction_payer_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_transaction_payer_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_max_account_resources_args* Arena::CreateMaybeMessage< ::koinos::chain::get_max_account_resources_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_max_account_resources_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_max_account_resources_return* Arena::CreateMaybeMessage< ::koinos::chain::get_max_account_resources_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_max_account_resources_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_transaction_resource_limit_args* Arena::CreateMaybeMessage< ::koinos::chain::get_transaction_resource_limit_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_transaction_resource_limit_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_transaction_resource_limit_return* Arena::CreateMaybeMessage< ::koinos::chain::get_transaction_resource_limit_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_transaction_resource_limit_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_last_irreversible_block_args* Arena::CreateMaybeMessage< ::koinos::chain::get_last_irreversible_block_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_last_irreversible_block_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_last_irreversible_block_return* Arena::CreateMaybeMessage< ::koinos::chain::get_last_irreversible_block_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_last_irreversible_block_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_caller_args* Arena::CreateMaybeMessage< ::koinos::chain::get_caller_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_caller_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_caller_return* Arena::CreateMaybeMessage< ::koinos::chain::get_caller_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_caller_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::require_authority_args* Arena::CreateMaybeMessage< ::koinos::chain::require_authority_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::require_authority_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::require_authority_return* Arena::CreateMaybeMessage< ::koinos::chain::require_authority_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::require_authority_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_transaction_signature_args* Arena::CreateMaybeMessage< ::koinos::chain::get_transaction_signature_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_transaction_signature_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_transaction_signature_return* Arena::CreateMaybeMessage< ::koinos::chain::get_transaction_signature_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_transaction_signature_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_contract_id_args* Arena::CreateMaybeMessage< ::koinos::chain::get_contract_id_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_contract_id_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_contract_id_return* Arena::CreateMaybeMessage< ::koinos::chain::get_contract_id_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_contract_id_return >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_account_nonce_args* Arena::CreateMaybeMessage< ::koinos::chain::get_account_nonce_args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_account_nonce_args >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::chain::get_account_nonce_return* Arena::CreateMaybeMessage< ::koinos::chain::get_account_nonce_return >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::chain::get_account_nonce_return >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
