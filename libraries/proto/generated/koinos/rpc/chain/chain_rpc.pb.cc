// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/rpc/chain/chain_rpc.proto

#include "koinos/rpc/chain/chain_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_block_topology_koinos_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_block_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2fprotocol_2fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_account_nonce_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_account_nonce_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_chain_id_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_chain_id_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_fork_heads_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_get_fork_heads_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_head_info_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_get_head_info_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_read_contract_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_read_contract_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_submit_block_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_submit_block_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_submit_transaction_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2fchain_2fchain_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_submit_transaction_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_error_response_koinos_2frpc_2frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_koinos_2frpc_2frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_reserved_rpc_koinos_2frpc_2frpc_2eproto;
namespace koinos {
namespace rpc {
namespace chain {
class submit_block_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<submit_block_request> _instance;
} _submit_block_request_default_instance_;
class submit_block_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<submit_block_response> _instance;
} _submit_block_response_default_instance_;
class submit_transaction_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<submit_transaction_request> _instance;
} _submit_transaction_request_default_instance_;
class submit_transaction_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<submit_transaction_response> _instance;
} _submit_transaction_response_default_instance_;
class get_head_info_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_head_info_request> _instance;
} _get_head_info_request_default_instance_;
class get_head_info_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_head_info_response> _instance;
} _get_head_info_response_default_instance_;
class get_chain_id_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_chain_id_request> _instance;
} _get_chain_id_request_default_instance_;
class get_chain_id_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_chain_id_response> _instance;
} _get_chain_id_response_default_instance_;
class get_fork_heads_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_fork_heads_request> _instance;
} _get_fork_heads_request_default_instance_;
class get_fork_heads_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_fork_heads_response> _instance;
} _get_fork_heads_response_default_instance_;
class read_contract_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<read_contract_request> _instance;
} _read_contract_request_default_instance_;
class read_contract_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<read_contract_response> _instance;
} _read_contract_response_default_instance_;
class get_account_nonce_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_account_nonce_request> _instance;
} _get_account_nonce_request_default_instance_;
class get_account_nonce_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_account_nonce_response> _instance;
} _get_account_nonce_response_default_instance_;
class chain_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<chain_request> _instance;
} _chain_request_default_instance_;
class chain_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<chain_response> _instance;
} _chain_response_default_instance_;
}  // namespace chain
}  // namespace rpc
}  // namespace koinos
static void InitDefaultsscc_info_chain_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_chain_request_default_instance_;
    new (ptr) ::koinos::rpc::chain::chain_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_chain_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_chain_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {
      &scc_info_reserved_rpc_koinos_2frpc_2frpc_2eproto.base,
      &scc_info_submit_block_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
      &scc_info_submit_transaction_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
      &scc_info_get_head_info_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
      &scc_info_get_chain_id_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
      &scc_info_get_fork_heads_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
      &scc_info_read_contract_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
      &scc_info_get_account_nonce_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,}};

static void InitDefaultsscc_info_chain_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_chain_response_default_instance_;
    new (ptr) ::koinos::rpc::chain::chain_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_chain_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_chain_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {
      &scc_info_reserved_rpc_koinos_2frpc_2frpc_2eproto.base,
      &scc_info_error_response_koinos_2frpc_2frpc_2eproto.base,
      &scc_info_submit_block_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
      &scc_info_submit_transaction_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
      &scc_info_get_head_info_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
      &scc_info_get_chain_id_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
      &scc_info_get_fork_heads_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
      &scc_info_read_contract_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
      &scc_info_get_account_nonce_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,}};

static void InitDefaultsscc_info_get_account_nonce_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_get_account_nonce_request_default_instance_;
    new (ptr) ::koinos::rpc::chain::get_account_nonce_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_account_nonce_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_account_nonce_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_get_account_nonce_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_get_account_nonce_response_default_instance_;
    new (ptr) ::koinos::rpc::chain::get_account_nonce_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_account_nonce_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_account_nonce_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_get_chain_id_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_get_chain_id_request_default_instance_;
    new (ptr) ::koinos::rpc::chain::get_chain_id_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_chain_id_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_chain_id_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_get_chain_id_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_get_chain_id_response_default_instance_;
    new (ptr) ::koinos::rpc::chain::get_chain_id_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_chain_id_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_chain_id_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_get_fork_heads_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_get_fork_heads_request_default_instance_;
    new (ptr) ::koinos::rpc::chain::get_fork_heads_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_fork_heads_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_fork_heads_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_get_fork_heads_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_get_fork_heads_response_default_instance_;
    new (ptr) ::koinos::rpc::chain::get_fork_heads_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_get_fork_heads_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_get_fork_heads_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {
      &scc_info_block_topology_koinos_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_get_head_info_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_get_head_info_request_default_instance_;
    new (ptr) ::koinos::rpc::chain::get_head_info_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_head_info_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_head_info_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_get_head_info_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_get_head_info_response_default_instance_;
    new (ptr) ::koinos::rpc::chain::get_head_info_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_get_head_info_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_get_head_info_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {
      &scc_info_block_topology_koinos_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_read_contract_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_read_contract_request_default_instance_;
    new (ptr) ::koinos::rpc::chain::read_contract_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_read_contract_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_read_contract_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_read_contract_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_read_contract_response_default_instance_;
    new (ptr) ::koinos::rpc::chain::read_contract_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_read_contract_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_read_contract_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_submit_block_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_submit_block_request_default_instance_;
    new (ptr) ::koinos::rpc::chain::submit_block_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_submit_block_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_submit_block_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {
      &scc_info_block_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_submit_block_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_submit_block_response_default_instance_;
    new (ptr) ::koinos::rpc::chain::submit_block_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_submit_block_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_submit_block_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_submit_transaction_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_submit_transaction_request_default_instance_;
    new (ptr) ::koinos::rpc::chain::submit_transaction_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_submit_transaction_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_submit_transaction_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {
      &scc_info_transaction_koinos_2fprotocol_2fprotocol_2eproto.base,}};

static void InitDefaultsscc_info_submit_transaction_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::koinos::rpc::chain::_submit_transaction_response_default_instance_;
    new (ptr) ::koinos::rpc::chain::submit_transaction_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_submit_transaction_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_submit_transaction_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_koinos_2frpc_2fchain_2fchain_5frpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_koinos_2frpc_2fchain_2fchain_5frpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_block_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_block_request, block_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_block_request, verify_passive_data_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_block_request, verify_block_signature_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_block_request, verify_transaction_signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_block_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_transaction_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_transaction_request, transaction_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_transaction_request, verify_passive_data_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_transaction_request, verify_transaction_signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::submit_transaction_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_head_info_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_head_info_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_head_info_response, head_topology_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_head_info_response, last_irreversible_block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_chain_id_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_chain_id_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_chain_id_response, chain_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_fork_heads_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_fork_heads_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_fork_heads_response, last_irreversible_block_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_fork_heads_response, fork_heads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_request, contract_id_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_request, entry_point_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_request, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_response, result_),
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::read_contract_response, logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_account_nonce_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_account_nonce_request, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_account_nonce_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::get_account_nonce_response, nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::chain_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::chain_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::chain_request, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::chain_response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::chain_response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::koinos::rpc::chain::chain_response, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::koinos::rpc::chain::submit_block_request)},
  { 9, -1, sizeof(::koinos::rpc::chain::submit_block_response)},
  { 14, -1, sizeof(::koinos::rpc::chain::submit_transaction_request)},
  { 22, -1, sizeof(::koinos::rpc::chain::submit_transaction_response)},
  { 27, -1, sizeof(::koinos::rpc::chain::get_head_info_request)},
  { 32, -1, sizeof(::koinos::rpc::chain::get_head_info_response)},
  { 39, -1, sizeof(::koinos::rpc::chain::get_chain_id_request)},
  { 44, -1, sizeof(::koinos::rpc::chain::get_chain_id_response)},
  { 50, -1, sizeof(::koinos::rpc::chain::get_fork_heads_request)},
  { 55, -1, sizeof(::koinos::rpc::chain::get_fork_heads_response)},
  { 62, -1, sizeof(::koinos::rpc::chain::read_contract_request)},
  { 70, -1, sizeof(::koinos::rpc::chain::read_contract_response)},
  { 77, -1, sizeof(::koinos::rpc::chain::get_account_nonce_request)},
  { 83, -1, sizeof(::koinos::rpc::chain::get_account_nonce_response)},
  { 89, -1, sizeof(::koinos::rpc::chain::chain_request)},
  { 103, -1, sizeof(::koinos::rpc::chain::chain_response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_submit_block_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_submit_block_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_submit_transaction_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_submit_transaction_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_head_info_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_head_info_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_chain_id_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_chain_id_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_fork_heads_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_fork_heads_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_read_contract_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_read_contract_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_account_nonce_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_get_account_nonce_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_chain_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::koinos::rpc::chain::_chain_response_default_instance_),
};

const char descriptor_table_protodef_koinos_2frpc_2fchain_2fchain_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n koinos/rpc/chain/chain_rpc.proto\022\020koin"
  "os.rpc.chain\032\023koinos/common.proto\032\036koino"
  "s/protocol/protocol.proto\032\024koinos/rpc/rp"
  "c.proto\"\240\001\n\024submit_block_request\022%\n\005bloc"
  "k\030\001 \001(\0132\026.koinos.protocol.block\022\033\n\023verif"
  "y_passive_data\030\002 \001(\010\022\036\n\026verify_block_sig"
  "nature\030\003 \001(\010\022$\n\034verify_transaction_signa"
  "ture\030\004 \001(\010\"\027\n\025submit_block_response\"\222\001\n\032"
  "submit_transaction_request\0221\n\013transactio"
  "n\030\001 \001(\0132\034.koinos.protocol.transaction\022\033\n"
  "\023verify_passive_data\030\002 \001(\010\022$\n\034verify_tra"
  "nsaction_signature\030\003 \001(\010\"\035\n\033submit_trans"
  "action_response\"\027\n\025get_head_info_request"
  "\"h\n\026get_head_info_response\022-\n\rhead_topol"
  "ogy\030\001 \001(\0132\026.koinos.block_topology\022\037\n\027las"
  "t_irreversible_block\030\002 \001(\004\"\026\n\024get_chain_"
  "id_request\")\n\025get_chain_id_response\022\020\n\010c"
  "hain_id\030\001 \001(\014\"\030\n\026get_fork_heads_request\""
  "~\n\027get_fork_heads_response\0227\n\027last_irrev"
  "ersible_block\030\001 \001(\0132\026.koinos.block_topol"
  "ogy\022*\n\nfork_heads\030\002 \003(\0132\026.koinos.block_t"
  "opology\"O\n\025read_contract_request\022\023\n\013cont"
  "ract_id\030\001 \001(\014\022\023\n\013entry_point\030\002 \001(\r\022\014\n\004ar"
  "gs\030\003 \001(\014\"6\n\026read_contract_response\022\016\n\006re"
  "sult\030\001 \001(\014\022\014\n\004logs\030\002 \001(\t\",\n\031get_account_"
  "nonce_request\022\017\n\007account\030\001 \001(\014\"+\n\032get_ac"
  "count_nonce_response\022\r\n\005nonce\030\001 \001(\004\"\246\004\n\r"
  "chain_request\022,\n\010reserved\030\001 \001(\0132\030.koinos"
  ".rpc.reserved_rpcH\000\022>\n\014submit_block\030\002 \001("
  "\0132&.koinos.rpc.chain.submit_block_reques"
  "tH\000\022J\n\022submit_transaction\030\003 \001(\0132,.koinos"
  ".rpc.chain.submit_transaction_requestH\000\022"
  "@\n\rget_head_info\030\004 \001(\0132\'.koinos.rpc.chai"
  "n.get_head_info_requestH\000\022>\n\014get_chain_i"
  "d\030\005 \001(\0132&.koinos.rpc.chain.get_chain_id_"
  "requestH\000\022B\n\016get_fork_heads\030\006 \001(\0132(.koin"
  "os.rpc.chain.get_fork_heads_requestH\000\022@\n"
  "\rread_contract\030\007 \001(\0132\'.koinos.rpc.chain."
  "read_contract_requestH\000\022H\n\021get_account_n"
  "once\030\010 \001(\0132+.koinos.rpc.chain.get_accoun"
  "t_nonce_requestH\000B\t\n\007request\"\334\004\n\016chain_r"
  "esponse\022,\n\010reserved\030\001 \001(\0132\030.koinos.rpc.r"
  "eserved_rpcH\000\022+\n\005error\030\002 \001(\0132\032.koinos.rp"
  "c.error_responseH\000\022\?\n\014submit_block\030\003 \001(\013"
  "2\'.koinos.rpc.chain.submit_block_respons"
  "eH\000\022K\n\022submit_transaction\030\004 \001(\0132-.koinos"
  ".rpc.chain.submit_transaction_responseH\000"
  "\022A\n\rget_head_info\030\005 \001(\0132(.koinos.rpc.cha"
  "in.get_head_info_responseH\000\022\?\n\014get_chain"
  "_id\030\006 \001(\0132\'.koinos.rpc.chain.get_chain_i"
  "d_responseH\000\022C\n\016get_fork_heads\030\007 \001(\0132).k"
  "oinos.rpc.chain.get_fork_heads_responseH"
  "\000\022A\n\rread_contract\030\010 \001(\0132(.koinos.rpc.ch"
  "ain.read_contract_responseH\000\022I\n\021get_acco"
  "unt_nonce\030\t \001(\0132,.koinos.rpc.chain.get_a"
  "ccount_nonce_responseH\000B\n\n\010responseB8Z6g"
  "ithub.com/koinos/koinos-proto-golang/koi"
  "nos/rpc/chainb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_deps[3] = {
  &::descriptor_table_koinos_2fcommon_2eproto,
  &::descriptor_table_koinos_2fprotocol_2fprotocol_2eproto,
  &::descriptor_table_koinos_2frpc_2frpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_sccs[16] = {
  &scc_info_chain_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_chain_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_get_account_nonce_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_get_account_nonce_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_get_chain_id_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_get_chain_id_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_get_fork_heads_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_get_fork_heads_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_get_head_info_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_get_head_info_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_read_contract_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_read_contract_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_submit_block_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_submit_block_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_submit_transaction_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
  &scc_info_submit_transaction_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto = {
  false, false, descriptor_table_protodef_koinos_2frpc_2fchain_2fchain_5frpc_2eproto, "koinos/rpc/chain/chain_rpc.proto", 2301,
  &descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_once, descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_sccs, descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto_deps, 16, 3,
  schemas, file_default_instances, TableStruct_koinos_2frpc_2fchain_2fchain_5frpc_2eproto::offsets,
  file_level_metadata_koinos_2frpc_2fchain_2fchain_5frpc_2eproto, 16, file_level_enum_descriptors_koinos_2frpc_2fchain_2fchain_5frpc_2eproto, file_level_service_descriptors_koinos_2frpc_2fchain_2fchain_5frpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_koinos_2frpc_2fchain_2fchain_5frpc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_koinos_2frpc_2fchain_2fchain_5frpc_2eproto)), true);
namespace koinos {
namespace rpc {
namespace chain {

// ===================================================================

class submit_block_request::_Internal {
 public:
  static const ::koinos::protocol::block& block(const submit_block_request* msg);
};

const ::koinos::protocol::block&
submit_block_request::_Internal::block(const submit_block_request* msg) {
  return *msg->block_;
}
void submit_block_request::clear_block() {
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
submit_block_request::submit_block_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.submit_block_request)
}
submit_block_request::submit_block_request(const submit_block_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::koinos::protocol::block(*from.block_);
  } else {
    block_ = nullptr;
  }
  ::memcpy(&verify_passive_data_, &from.verify_passive_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&verify_transaction_signature_) -
    reinterpret_cast<char*>(&verify_passive_data_)) + sizeof(verify_transaction_signature_));
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.submit_block_request)
}

void submit_block_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_submit_block_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&verify_transaction_signature_) -
      reinterpret_cast<char*>(&block_)) + sizeof(verify_transaction_signature_));
}

submit_block_request::~submit_block_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.submit_block_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void submit_block_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void submit_block_request::ArenaDtor(void* object) {
  submit_block_request* _this = reinterpret_cast< submit_block_request* >(object);
  (void)_this;
}
void submit_block_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void submit_block_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const submit_block_request& submit_block_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_submit_block_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void submit_block_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.submit_block_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  ::memset(&verify_passive_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verify_transaction_signature_) -
      reinterpret_cast<char*>(&verify_passive_data_)) + sizeof(verify_transaction_signature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* submit_block_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.block block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verify_passive_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          verify_passive_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verify_block_signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          verify_block_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verify_transaction_signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          verify_transaction_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* submit_block_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.submit_block_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.block block = 1;
  if (this->has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  // bool verify_passive_data = 2;
  if (this->verify_passive_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_verify_passive_data(), target);
  }

  // bool verify_block_signature = 3;
  if (this->verify_block_signature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_verify_block_signature(), target);
  }

  // bool verify_transaction_signature = 4;
  if (this->verify_transaction_signature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_verify_transaction_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.submit_block_request)
  return target;
}

size_t submit_block_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.submit_block_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.block block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // bool verify_passive_data = 2;
  if (this->verify_passive_data() != 0) {
    total_size += 1 + 1;
  }

  // bool verify_block_signature = 3;
  if (this->verify_block_signature() != 0) {
    total_size += 1 + 1;
  }

  // bool verify_transaction_signature = 4;
  if (this->verify_transaction_signature() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void submit_block_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.submit_block_request)
  GOOGLE_DCHECK_NE(&from, this);
  const submit_block_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<submit_block_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.submit_block_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.submit_block_request)
    MergeFrom(*source);
  }
}

void submit_block_request::MergeFrom(const submit_block_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.submit_block_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_block()) {
    _internal_mutable_block()->::koinos::protocol::block::MergeFrom(from._internal_block());
  }
  if (from.verify_passive_data() != 0) {
    _internal_set_verify_passive_data(from._internal_verify_passive_data());
  }
  if (from.verify_block_signature() != 0) {
    _internal_set_verify_block_signature(from._internal_verify_block_signature());
  }
  if (from.verify_transaction_signature() != 0) {
    _internal_set_verify_transaction_signature(from._internal_verify_transaction_signature());
  }
}

void submit_block_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.submit_block_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void submit_block_request::CopyFrom(const submit_block_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.submit_block_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool submit_block_request::IsInitialized() const {
  return true;
}

void submit_block_request::InternalSwap(submit_block_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(submit_block_request, verify_transaction_signature_)
      + sizeof(submit_block_request::verify_transaction_signature_)
      - PROTOBUF_FIELD_OFFSET(submit_block_request, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata submit_block_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class submit_block_response::_Internal {
 public:
};

submit_block_response::submit_block_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.submit_block_response)
}
submit_block_response::submit_block_response(const submit_block_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.submit_block_response)
}

void submit_block_response::SharedCtor() {
}

submit_block_response::~submit_block_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.submit_block_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void submit_block_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void submit_block_response::ArenaDtor(void* object) {
  submit_block_response* _this = reinterpret_cast< submit_block_response* >(object);
  (void)_this;
}
void submit_block_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void submit_block_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const submit_block_response& submit_block_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_submit_block_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void submit_block_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.submit_block_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* submit_block_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* submit_block_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.submit_block_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.submit_block_response)
  return target;
}

size_t submit_block_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.submit_block_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void submit_block_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.submit_block_response)
  GOOGLE_DCHECK_NE(&from, this);
  const submit_block_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<submit_block_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.submit_block_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.submit_block_response)
    MergeFrom(*source);
  }
}

void submit_block_response::MergeFrom(const submit_block_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.submit_block_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void submit_block_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.submit_block_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void submit_block_response::CopyFrom(const submit_block_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.submit_block_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool submit_block_response::IsInitialized() const {
  return true;
}

void submit_block_response::InternalSwap(submit_block_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata submit_block_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class submit_transaction_request::_Internal {
 public:
  static const ::koinos::protocol::transaction& transaction(const submit_transaction_request* msg);
};

const ::koinos::protocol::transaction&
submit_transaction_request::_Internal::transaction(const submit_transaction_request* msg) {
  return *msg->transaction_;
}
void submit_transaction_request::clear_transaction() {
  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
submit_transaction_request::submit_transaction_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.submit_transaction_request)
}
submit_transaction_request::submit_transaction_request(const submit_transaction_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::koinos::protocol::transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  ::memcpy(&verify_passive_data_, &from.verify_passive_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&verify_transaction_signature_) -
    reinterpret_cast<char*>(&verify_passive_data_)) + sizeof(verify_transaction_signature_));
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.submit_transaction_request)
}

void submit_transaction_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_submit_transaction_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&verify_transaction_signature_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(verify_transaction_signature_));
}

submit_transaction_request::~submit_transaction_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.submit_transaction_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void submit_transaction_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void submit_transaction_request::ArenaDtor(void* object) {
  submit_transaction_request* _this = reinterpret_cast< submit_transaction_request* >(object);
  (void)_this;
}
void submit_transaction_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void submit_transaction_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const submit_transaction_request& submit_transaction_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_submit_transaction_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void submit_transaction_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.submit_transaction_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  ::memset(&verify_passive_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verify_transaction_signature_) -
      reinterpret_cast<char*>(&verify_passive_data_)) + sizeof(verify_transaction_signature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* submit_transaction_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.protocol.transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verify_passive_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          verify_passive_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verify_transaction_signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          verify_transaction_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* submit_transaction_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.submit_transaction_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transaction(this), target, stream);
  }

  // bool verify_passive_data = 2;
  if (this->verify_passive_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_verify_passive_data(), target);
  }

  // bool verify_transaction_signature = 3;
  if (this->verify_transaction_signature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_verify_transaction_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.submit_transaction_request)
  return target;
}

size_t submit_transaction_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.submit_transaction_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.protocol.transaction transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // bool verify_passive_data = 2;
  if (this->verify_passive_data() != 0) {
    total_size += 1 + 1;
  }

  // bool verify_transaction_signature = 3;
  if (this->verify_transaction_signature() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void submit_transaction_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.submit_transaction_request)
  GOOGLE_DCHECK_NE(&from, this);
  const submit_transaction_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<submit_transaction_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.submit_transaction_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.submit_transaction_request)
    MergeFrom(*source);
  }
}

void submit_transaction_request::MergeFrom(const submit_transaction_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.submit_transaction_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transaction()) {
    _internal_mutable_transaction()->::koinos::protocol::transaction::MergeFrom(from._internal_transaction());
  }
  if (from.verify_passive_data() != 0) {
    _internal_set_verify_passive_data(from._internal_verify_passive_data());
  }
  if (from.verify_transaction_signature() != 0) {
    _internal_set_verify_transaction_signature(from._internal_verify_transaction_signature());
  }
}

void submit_transaction_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.submit_transaction_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void submit_transaction_request::CopyFrom(const submit_transaction_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.submit_transaction_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool submit_transaction_request::IsInitialized() const {
  return true;
}

void submit_transaction_request::InternalSwap(submit_transaction_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(submit_transaction_request, verify_transaction_signature_)
      + sizeof(submit_transaction_request::verify_transaction_signature_)
      - PROTOBUF_FIELD_OFFSET(submit_transaction_request, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata submit_transaction_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class submit_transaction_response::_Internal {
 public:
};

submit_transaction_response::submit_transaction_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.submit_transaction_response)
}
submit_transaction_response::submit_transaction_response(const submit_transaction_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.submit_transaction_response)
}

void submit_transaction_response::SharedCtor() {
}

submit_transaction_response::~submit_transaction_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.submit_transaction_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void submit_transaction_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void submit_transaction_response::ArenaDtor(void* object) {
  submit_transaction_response* _this = reinterpret_cast< submit_transaction_response* >(object);
  (void)_this;
}
void submit_transaction_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void submit_transaction_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const submit_transaction_response& submit_transaction_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_submit_transaction_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void submit_transaction_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.submit_transaction_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* submit_transaction_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* submit_transaction_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.submit_transaction_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.submit_transaction_response)
  return target;
}

size_t submit_transaction_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.submit_transaction_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void submit_transaction_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.submit_transaction_response)
  GOOGLE_DCHECK_NE(&from, this);
  const submit_transaction_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<submit_transaction_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.submit_transaction_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.submit_transaction_response)
    MergeFrom(*source);
  }
}

void submit_transaction_response::MergeFrom(const submit_transaction_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.submit_transaction_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void submit_transaction_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.submit_transaction_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void submit_transaction_response::CopyFrom(const submit_transaction_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.submit_transaction_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool submit_transaction_response::IsInitialized() const {
  return true;
}

void submit_transaction_response::InternalSwap(submit_transaction_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata submit_transaction_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_head_info_request::_Internal {
 public:
};

get_head_info_request::get_head_info_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_head_info_request)
}
get_head_info_request::get_head_info_request(const get_head_info_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_head_info_request)
}

void get_head_info_request::SharedCtor() {
}

get_head_info_request::~get_head_info_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_head_info_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_head_info_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_head_info_request::ArenaDtor(void* object) {
  get_head_info_request* _this = reinterpret_cast< get_head_info_request* >(object);
  (void)_this;
}
void get_head_info_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_head_info_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_head_info_request& get_head_info_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_head_info_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void get_head_info_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_head_info_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_head_info_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_head_info_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_head_info_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_head_info_request)
  return target;
}

size_t get_head_info_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_head_info_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_head_info_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.get_head_info_request)
  GOOGLE_DCHECK_NE(&from, this);
  const get_head_info_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_head_info_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.get_head_info_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.get_head_info_request)
    MergeFrom(*source);
  }
}

void get_head_info_request::MergeFrom(const get_head_info_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_head_info_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void get_head_info_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.get_head_info_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_head_info_request::CopyFrom(const get_head_info_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_head_info_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_head_info_request::IsInitialized() const {
  return true;
}

void get_head_info_request::InternalSwap(get_head_info_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_head_info_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_head_info_response::_Internal {
 public:
  static const ::koinos::block_topology& head_topology(const get_head_info_response* msg);
};

const ::koinos::block_topology&
get_head_info_response::_Internal::head_topology(const get_head_info_response* msg) {
  return *msg->head_topology_;
}
void get_head_info_response::clear_head_topology() {
  if (GetArena() == nullptr && head_topology_ != nullptr) {
    delete head_topology_;
  }
  head_topology_ = nullptr;
}
get_head_info_response::get_head_info_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_head_info_response)
}
get_head_info_response::get_head_info_response(const get_head_info_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head_topology()) {
    head_topology_ = new ::koinos::block_topology(*from.head_topology_);
  } else {
    head_topology_ = nullptr;
  }
  last_irreversible_block_ = from.last_irreversible_block_;
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_head_info_response)
}

void get_head_info_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_head_info_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&head_topology_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&last_irreversible_block_) -
      reinterpret_cast<char*>(&head_topology_)) + sizeof(last_irreversible_block_));
}

get_head_info_response::~get_head_info_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_head_info_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_head_info_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete head_topology_;
}

void get_head_info_response::ArenaDtor(void* object) {
  get_head_info_response* _this = reinterpret_cast< get_head_info_response* >(object);
  (void)_this;
}
void get_head_info_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_head_info_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_head_info_response& get_head_info_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_head_info_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void get_head_info_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_head_info_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && head_topology_ != nullptr) {
    delete head_topology_;
  }
  head_topology_ = nullptr;
  last_irreversible_block_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_head_info_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.block_topology head_topology = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head_topology(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_irreversible_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_irreversible_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_head_info_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_head_info_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.block_topology head_topology = 1;
  if (this->has_head_topology()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::head_topology(this), target, stream);
  }

  // uint64 last_irreversible_block = 2;
  if (this->last_irreversible_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_last_irreversible_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_head_info_response)
  return target;
}

size_t get_head_info_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_head_info_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .koinos.block_topology head_topology = 1;
  if (this->has_head_topology()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_topology_);
  }

  // uint64 last_irreversible_block = 2;
  if (this->last_irreversible_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_irreversible_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_head_info_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.get_head_info_response)
  GOOGLE_DCHECK_NE(&from, this);
  const get_head_info_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_head_info_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.get_head_info_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.get_head_info_response)
    MergeFrom(*source);
  }
}

void get_head_info_response::MergeFrom(const get_head_info_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_head_info_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_head_topology()) {
    _internal_mutable_head_topology()->::koinos::block_topology::MergeFrom(from._internal_head_topology());
  }
  if (from.last_irreversible_block() != 0) {
    _internal_set_last_irreversible_block(from._internal_last_irreversible_block());
  }
}

void get_head_info_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.get_head_info_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_head_info_response::CopyFrom(const get_head_info_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_head_info_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_head_info_response::IsInitialized() const {
  return true;
}

void get_head_info_response::InternalSwap(get_head_info_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(get_head_info_response, last_irreversible_block_)
      + sizeof(get_head_info_response::last_irreversible_block_)
      - PROTOBUF_FIELD_OFFSET(get_head_info_response, head_topology_)>(
          reinterpret_cast<char*>(&head_topology_),
          reinterpret_cast<char*>(&other->head_topology_));
}

::PROTOBUF_NAMESPACE_ID::Metadata get_head_info_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_chain_id_request::_Internal {
 public:
};

get_chain_id_request::get_chain_id_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_chain_id_request)
}
get_chain_id_request::get_chain_id_request(const get_chain_id_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_chain_id_request)
}

void get_chain_id_request::SharedCtor() {
}

get_chain_id_request::~get_chain_id_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_chain_id_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_chain_id_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_chain_id_request::ArenaDtor(void* object) {
  get_chain_id_request* _this = reinterpret_cast< get_chain_id_request* >(object);
  (void)_this;
}
void get_chain_id_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_chain_id_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_chain_id_request& get_chain_id_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_chain_id_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void get_chain_id_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_chain_id_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_chain_id_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_chain_id_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_chain_id_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_chain_id_request)
  return target;
}

size_t get_chain_id_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_chain_id_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_chain_id_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.get_chain_id_request)
  GOOGLE_DCHECK_NE(&from, this);
  const get_chain_id_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_chain_id_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.get_chain_id_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.get_chain_id_request)
    MergeFrom(*source);
  }
}

void get_chain_id_request::MergeFrom(const get_chain_id_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_chain_id_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void get_chain_id_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.get_chain_id_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_chain_id_request::CopyFrom(const get_chain_id_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_chain_id_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_chain_id_request::IsInitialized() const {
  return true;
}

void get_chain_id_request::InternalSwap(get_chain_id_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_chain_id_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_chain_id_response::_Internal {
 public:
};

get_chain_id_response::get_chain_id_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_chain_id_response)
}
get_chain_id_response::get_chain_id_response(const get_chain_id_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_chain_id_response)
}

void get_chain_id_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_chain_id_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_chain_id_response::~get_chain_id_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_chain_id_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_chain_id_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_chain_id_response::ArenaDtor(void* object) {
  get_chain_id_response* _this = reinterpret_cast< get_chain_id_response* >(object);
  (void)_this;
}
void get_chain_id_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_chain_id_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_chain_id_response& get_chain_id_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_chain_id_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void get_chain_id_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_chain_id_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_chain_id_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes chain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_chain_id_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_chain_id_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (this->chain_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_chain_id_response)
  return target;
}

size_t get_chain_id_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_chain_id_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chain_id = 1;
  if (this->chain_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_chain_id_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.get_chain_id_response)
  GOOGLE_DCHECK_NE(&from, this);
  const get_chain_id_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_chain_id_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.get_chain_id_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.get_chain_id_response)
    MergeFrom(*source);
  }
}

void get_chain_id_response::MergeFrom(const get_chain_id_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_chain_id_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chain_id().size() > 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
}

void get_chain_id_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.get_chain_id_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_chain_id_response::CopyFrom(const get_chain_id_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_chain_id_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_chain_id_response::IsInitialized() const {
  return true;
}

void get_chain_id_response::InternalSwap(get_chain_id_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chain_id_.Swap(&other->chain_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata get_chain_id_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_fork_heads_request::_Internal {
 public:
};

get_fork_heads_request::get_fork_heads_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_fork_heads_request)
}
get_fork_heads_request::get_fork_heads_request(const get_fork_heads_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_fork_heads_request)
}

void get_fork_heads_request::SharedCtor() {
}

get_fork_heads_request::~get_fork_heads_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_fork_heads_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_fork_heads_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_fork_heads_request::ArenaDtor(void* object) {
  get_fork_heads_request* _this = reinterpret_cast< get_fork_heads_request* >(object);
  (void)_this;
}
void get_fork_heads_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_fork_heads_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_fork_heads_request& get_fork_heads_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_fork_heads_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void get_fork_heads_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_fork_heads_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_fork_heads_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_fork_heads_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_fork_heads_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_fork_heads_request)
  return target;
}

size_t get_fork_heads_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_fork_heads_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_fork_heads_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.get_fork_heads_request)
  GOOGLE_DCHECK_NE(&from, this);
  const get_fork_heads_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_fork_heads_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.get_fork_heads_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.get_fork_heads_request)
    MergeFrom(*source);
  }
}

void get_fork_heads_request::MergeFrom(const get_fork_heads_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_fork_heads_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void get_fork_heads_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.get_fork_heads_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_fork_heads_request::CopyFrom(const get_fork_heads_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_fork_heads_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_fork_heads_request::IsInitialized() const {
  return true;
}

void get_fork_heads_request::InternalSwap(get_fork_heads_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_fork_heads_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_fork_heads_response::_Internal {
 public:
  static const ::koinos::block_topology& last_irreversible_block(const get_fork_heads_response* msg);
};

const ::koinos::block_topology&
get_fork_heads_response::_Internal::last_irreversible_block(const get_fork_heads_response* msg) {
  return *msg->last_irreversible_block_;
}
void get_fork_heads_response::clear_last_irreversible_block() {
  if (GetArena() == nullptr && last_irreversible_block_ != nullptr) {
    delete last_irreversible_block_;
  }
  last_irreversible_block_ = nullptr;
}
void get_fork_heads_response::clear_fork_heads() {
  fork_heads_.Clear();
}
get_fork_heads_response::get_fork_heads_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fork_heads_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_fork_heads_response)
}
get_fork_heads_response::get_fork_heads_response(const get_fork_heads_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fork_heads_(from.fork_heads_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_irreversible_block()) {
    last_irreversible_block_ = new ::koinos::block_topology(*from.last_irreversible_block_);
  } else {
    last_irreversible_block_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_fork_heads_response)
}

void get_fork_heads_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_fork_heads_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  last_irreversible_block_ = nullptr;
}

get_fork_heads_response::~get_fork_heads_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_fork_heads_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_fork_heads_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete last_irreversible_block_;
}

void get_fork_heads_response::ArenaDtor(void* object) {
  get_fork_heads_response* _this = reinterpret_cast< get_fork_heads_response* >(object);
  (void)_this;
}
void get_fork_heads_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_fork_heads_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_fork_heads_response& get_fork_heads_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_fork_heads_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void get_fork_heads_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_fork_heads_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fork_heads_.Clear();
  if (GetArena() == nullptr && last_irreversible_block_ != nullptr) {
    delete last_irreversible_block_;
  }
  last_irreversible_block_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_fork_heads_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.block_topology last_irreversible_block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_irreversible_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .koinos.block_topology fork_heads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fork_heads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_fork_heads_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_fork_heads_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.block_topology last_irreversible_block = 1;
  if (this->has_last_irreversible_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::last_irreversible_block(this), target, stream);
  }

  // repeated .koinos.block_topology fork_heads = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fork_heads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fork_heads(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_fork_heads_response)
  return target;
}

size_t get_fork_heads_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_fork_heads_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .koinos.block_topology fork_heads = 2;
  total_size += 1UL * this->_internal_fork_heads_size();
  for (const auto& msg : this->fork_heads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .koinos.block_topology last_irreversible_block = 1;
  if (this->has_last_irreversible_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_irreversible_block_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_fork_heads_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.get_fork_heads_response)
  GOOGLE_DCHECK_NE(&from, this);
  const get_fork_heads_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_fork_heads_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.get_fork_heads_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.get_fork_heads_response)
    MergeFrom(*source);
  }
}

void get_fork_heads_response::MergeFrom(const get_fork_heads_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_fork_heads_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fork_heads_.MergeFrom(from.fork_heads_);
  if (from.has_last_irreversible_block()) {
    _internal_mutable_last_irreversible_block()->::koinos::block_topology::MergeFrom(from._internal_last_irreversible_block());
  }
}

void get_fork_heads_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.get_fork_heads_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_fork_heads_response::CopyFrom(const get_fork_heads_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_fork_heads_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_fork_heads_response::IsInitialized() const {
  return true;
}

void get_fork_heads_response::InternalSwap(get_fork_heads_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fork_heads_.InternalSwap(&other->fork_heads_);
  swap(last_irreversible_block_, other->last_irreversible_block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_fork_heads_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class read_contract_request::_Internal {
 public:
};

read_contract_request::read_contract_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.read_contract_request)
}
read_contract_request::read_contract_request(const read_contract_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contract_id().empty()) {
    contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contract_id(), 
      GetArena());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArena());
  }
  entry_point_ = from.entry_point_;
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.read_contract_request)
}

void read_contract_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_read_contract_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  contract_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entry_point_ = 0u;
}

read_contract_request::~read_contract_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.read_contract_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void read_contract_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contract_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void read_contract_request::ArenaDtor(void* object) {
  read_contract_request* _this = reinterpret_cast< read_contract_request* >(object);
  (void)_this;
}
void read_contract_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void read_contract_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const read_contract_request& read_contract_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_read_contract_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void read_contract_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.read_contract_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_id_.ClearToEmpty();
  args_.ClearToEmpty();
  entry_point_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* read_contract_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 entry_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entry_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* read_contract_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.read_contract_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contract_id = 1;
  if (this->contract_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contract_id(), target);
  }

  // uint32 entry_point = 2;
  if (this->entry_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entry_point(), target);
  }

  // bytes args = 3;
  if (this->args().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.read_contract_request)
  return target;
}

size_t read_contract_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.read_contract_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contract_id = 1;
  if (this->contract_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contract_id());
  }

  // bytes args = 3;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // uint32 entry_point = 2;
  if (this->entry_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entry_point());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void read_contract_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.read_contract_request)
  GOOGLE_DCHECK_NE(&from, this);
  const read_contract_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<read_contract_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.read_contract_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.read_contract_request)
    MergeFrom(*source);
  }
}

void read_contract_request::MergeFrom(const read_contract_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.read_contract_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contract_id().size() > 0) {
    _internal_set_contract_id(from._internal_contract_id());
  }
  if (from.args().size() > 0) {
    _internal_set_args(from._internal_args());
  }
  if (from.entry_point() != 0) {
    _internal_set_entry_point(from._internal_entry_point());
  }
}

void read_contract_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.read_contract_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void read_contract_request::CopyFrom(const read_contract_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.read_contract_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool read_contract_request::IsInitialized() const {
  return true;
}

void read_contract_request::InternalSwap(read_contract_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contract_id_.Swap(&other->contract_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(entry_point_, other->entry_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata read_contract_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class read_contract_response::_Internal {
 public:
};

read_contract_response::read_contract_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.read_contract_response)
}
read_contract_response::read_contract_response(const read_contract_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_result(), 
      GetArena());
  }
  logs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logs().empty()) {
    logs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logs(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.read_contract_response)
}

void read_contract_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_read_contract_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

read_contract_response::~read_contract_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.read_contract_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void read_contract_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void read_contract_response::ArenaDtor(void* object) {
  read_contract_response* _this = reinterpret_cast< read_contract_response* >(object);
  (void)_this;
}
void read_contract_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void read_contract_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const read_contract_response& read_contract_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_read_contract_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void read_contract_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.read_contract_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmpty();
  logs_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* read_contract_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_logs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "koinos.rpc.chain.read_contract_response.logs"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* read_contract_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.read_contract_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes result = 1;
  if (this->result().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_result(), target);
  }

  // string logs = 2;
  if (this->logs().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logs().data(), static_cast<int>(this->_internal_logs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "koinos.rpc.chain.read_contract_response.logs");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_logs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.read_contract_response)
  return target;
}

size_t read_contract_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.read_contract_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes result = 1;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  // string logs = 2;
  if (this->logs().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void read_contract_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.read_contract_response)
  GOOGLE_DCHECK_NE(&from, this);
  const read_contract_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<read_contract_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.read_contract_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.read_contract_response)
    MergeFrom(*source);
  }
}

void read_contract_response::MergeFrom(const read_contract_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.read_contract_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.logs().size() > 0) {
    _internal_set_logs(from._internal_logs());
  }
}

void read_contract_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.read_contract_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void read_contract_response::CopyFrom(const read_contract_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.read_contract_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool read_contract_response::IsInitialized() const {
  return true;
}

void read_contract_response::InternalSwap(read_contract_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logs_.Swap(&other->logs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata read_contract_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_account_nonce_request::_Internal {
 public:
};

get_account_nonce_request::get_account_nonce_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_account_nonce_request)
}
get_account_nonce_request::get_account_nonce_request(const get_account_nonce_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_account_nonce_request)
}

void get_account_nonce_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_account_nonce_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

get_account_nonce_request::~get_account_nonce_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_account_nonce_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_account_nonce_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_account_nonce_request::ArenaDtor(void* object) {
  get_account_nonce_request* _this = reinterpret_cast< get_account_nonce_request* >(object);
  (void)_this;
}
void get_account_nonce_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_nonce_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_account_nonce_request& get_account_nonce_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_account_nonce_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void get_account_nonce_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_account_nonce_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_nonce_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_nonce_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_account_nonce_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_account_nonce_request)
  return target;
}

size_t get_account_nonce_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_account_nonce_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_account_nonce_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.get_account_nonce_request)
  GOOGLE_DCHECK_NE(&from, this);
  const get_account_nonce_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_account_nonce_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.get_account_nonce_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.get_account_nonce_request)
    MergeFrom(*source);
  }
}

void get_account_nonce_request::MergeFrom(const get_account_nonce_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_account_nonce_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {
    _internal_set_account(from._internal_account());
  }
}

void get_account_nonce_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.get_account_nonce_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_account_nonce_request::CopyFrom(const get_account_nonce_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_account_nonce_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_nonce_request::IsInitialized() const {
  return true;
}

void get_account_nonce_request::InternalSwap(get_account_nonce_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_nonce_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_account_nonce_response::_Internal {
 public:
};

get_account_nonce_response::get_account_nonce_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.get_account_nonce_response)
}
get_account_nonce_response::get_account_nonce_response(const get_account_nonce_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.get_account_nonce_response)
}

void get_account_nonce_response::SharedCtor() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}

get_account_nonce_response::~get_account_nonce_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.get_account_nonce_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_account_nonce_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void get_account_nonce_response::ArenaDtor(void* object) {
  get_account_nonce_response* _this = reinterpret_cast< get_account_nonce_response* >(object);
  (void)_this;
}
void get_account_nonce_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_account_nonce_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_account_nonce_response& get_account_nonce_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_account_nonce_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void get_account_nonce_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.get_account_nonce_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_account_nonce_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_account_nonce_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.get_account_nonce_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.get_account_nonce_response)
  return target;
}

size_t get_account_nonce_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.get_account_nonce_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 nonce = 1;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_account_nonce_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.get_account_nonce_response)
  GOOGLE_DCHECK_NE(&from, this);
  const get_account_nonce_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_account_nonce_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.get_account_nonce_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.get_account_nonce_response)
    MergeFrom(*source);
  }
}

void get_account_nonce_response::MergeFrom(const get_account_nonce_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.get_account_nonce_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
}

void get_account_nonce_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.get_account_nonce_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_account_nonce_response::CopyFrom(const get_account_nonce_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.get_account_nonce_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_nonce_response::IsInitialized() const {
  return true;
}

void get_account_nonce_response::InternalSwap(get_account_nonce_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(nonce_, other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_account_nonce_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class chain_request::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const chain_request* msg);
  static const ::koinos::rpc::chain::submit_block_request& submit_block(const chain_request* msg);
  static const ::koinos::rpc::chain::submit_transaction_request& submit_transaction(const chain_request* msg);
  static const ::koinos::rpc::chain::get_head_info_request& get_head_info(const chain_request* msg);
  static const ::koinos::rpc::chain::get_chain_id_request& get_chain_id(const chain_request* msg);
  static const ::koinos::rpc::chain::get_fork_heads_request& get_fork_heads(const chain_request* msg);
  static const ::koinos::rpc::chain::read_contract_request& read_contract(const chain_request* msg);
  static const ::koinos::rpc::chain::get_account_nonce_request& get_account_nonce(const chain_request* msg);
};

const ::koinos::rpc::reserved_rpc&
chain_request::_Internal::reserved(const chain_request* msg) {
  return *msg->request_.reserved_;
}
const ::koinos::rpc::chain::submit_block_request&
chain_request::_Internal::submit_block(const chain_request* msg) {
  return *msg->request_.submit_block_;
}
const ::koinos::rpc::chain::submit_transaction_request&
chain_request::_Internal::submit_transaction(const chain_request* msg) {
  return *msg->request_.submit_transaction_;
}
const ::koinos::rpc::chain::get_head_info_request&
chain_request::_Internal::get_head_info(const chain_request* msg) {
  return *msg->request_.get_head_info_;
}
const ::koinos::rpc::chain::get_chain_id_request&
chain_request::_Internal::get_chain_id(const chain_request* msg) {
  return *msg->request_.get_chain_id_;
}
const ::koinos::rpc::chain::get_fork_heads_request&
chain_request::_Internal::get_fork_heads(const chain_request* msg) {
  return *msg->request_.get_fork_heads_;
}
const ::koinos::rpc::chain::read_contract_request&
chain_request::_Internal::read_contract(const chain_request* msg) {
  return *msg->request_.read_contract_;
}
const ::koinos::rpc::chain::get_account_nonce_request&
chain_request::_Internal::get_account_nonce(const chain_request* msg) {
  return *msg->request_.get_account_nonce_;
}
void chain_request::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved)->GetArena();
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    request_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.reserved)
}
void chain_request::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArena() == nullptr) {
      delete request_.reserved_;
    }
    clear_has_request();
  }
}
void chain_request::set_allocated_submit_block(::koinos::rpc::chain::submit_block_request* submit_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (submit_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(submit_block);
    if (message_arena != submessage_arena) {
      submit_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submit_block, submessage_arena);
    }
    set_has_submit_block();
    request_.submit_block_ = submit_block;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.submit_block)
}
void chain_request::set_allocated_submit_transaction(::koinos::rpc::chain::submit_transaction_request* submit_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (submit_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(submit_transaction);
    if (message_arena != submessage_arena) {
      submit_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submit_transaction, submessage_arena);
    }
    set_has_submit_transaction();
    request_.submit_transaction_ = submit_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.submit_transaction)
}
void chain_request::set_allocated_get_head_info(::koinos::rpc::chain::get_head_info_request* get_head_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (get_head_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_head_info);
    if (message_arena != submessage_arena) {
      get_head_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_head_info, submessage_arena);
    }
    set_has_get_head_info();
    request_.get_head_info_ = get_head_info;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.get_head_info)
}
void chain_request::set_allocated_get_chain_id(::koinos::rpc::chain::get_chain_id_request* get_chain_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (get_chain_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_chain_id);
    if (message_arena != submessage_arena) {
      get_chain_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_chain_id, submessage_arena);
    }
    set_has_get_chain_id();
    request_.get_chain_id_ = get_chain_id;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.get_chain_id)
}
void chain_request::set_allocated_get_fork_heads(::koinos::rpc::chain::get_fork_heads_request* get_fork_heads) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (get_fork_heads) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_fork_heads);
    if (message_arena != submessage_arena) {
      get_fork_heads = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_fork_heads, submessage_arena);
    }
    set_has_get_fork_heads();
    request_.get_fork_heads_ = get_fork_heads;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.get_fork_heads)
}
void chain_request::set_allocated_read_contract(::koinos::rpc::chain::read_contract_request* read_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (read_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(read_contract);
    if (message_arena != submessage_arena) {
      read_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_contract, submessage_arena);
    }
    set_has_read_contract();
    request_.read_contract_ = read_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.read_contract)
}
void chain_request::set_allocated_get_account_nonce(::koinos::rpc::chain::get_account_nonce_request* get_account_nonce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (get_account_nonce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_account_nonce);
    if (message_arena != submessage_arena) {
      get_account_nonce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_nonce, submessage_arena);
    }
    set_has_get_account_nonce();
    request_.get_account_nonce_ = get_account_nonce;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_request.get_account_nonce)
}
chain_request::chain_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.chain_request)
}
chain_request::chain_request(const chain_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kSubmitBlock: {
      _internal_mutable_submit_block()->::koinos::rpc::chain::submit_block_request::MergeFrom(from._internal_submit_block());
      break;
    }
    case kSubmitTransaction: {
      _internal_mutable_submit_transaction()->::koinos::rpc::chain::submit_transaction_request::MergeFrom(from._internal_submit_transaction());
      break;
    }
    case kGetHeadInfo: {
      _internal_mutable_get_head_info()->::koinos::rpc::chain::get_head_info_request::MergeFrom(from._internal_get_head_info());
      break;
    }
    case kGetChainId: {
      _internal_mutable_get_chain_id()->::koinos::rpc::chain::get_chain_id_request::MergeFrom(from._internal_get_chain_id());
      break;
    }
    case kGetForkHeads: {
      _internal_mutable_get_fork_heads()->::koinos::rpc::chain::get_fork_heads_request::MergeFrom(from._internal_get_fork_heads());
      break;
    }
    case kReadContract: {
      _internal_mutable_read_contract()->::koinos::rpc::chain::read_contract_request::MergeFrom(from._internal_read_contract());
      break;
    }
    case kGetAccountNonce: {
      _internal_mutable_get_account_nonce()->::koinos::rpc::chain::get_account_nonce_request::MergeFrom(from._internal_get_account_nonce());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.chain_request)
}

void chain_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_chain_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  clear_has_request();
}

chain_request::~chain_request() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.chain_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void chain_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void chain_request::ArenaDtor(void* object) {
  chain_request* _this = reinterpret_cast< chain_request* >(object);
  (void)_this;
}
void chain_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void chain_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const chain_request& chain_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_chain_request_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void chain_request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.chain.chain_request)
  switch (request_case()) {
    case kReserved: {
      if (GetArena() == nullptr) {
        delete request_.reserved_;
      }
      break;
    }
    case kSubmitBlock: {
      if (GetArena() == nullptr) {
        delete request_.submit_block_;
      }
      break;
    }
    case kSubmitTransaction: {
      if (GetArena() == nullptr) {
        delete request_.submit_transaction_;
      }
      break;
    }
    case kGetHeadInfo: {
      if (GetArena() == nullptr) {
        delete request_.get_head_info_;
      }
      break;
    }
    case kGetChainId: {
      if (GetArena() == nullptr) {
        delete request_.get_chain_id_;
      }
      break;
    }
    case kGetForkHeads: {
      if (GetArena() == nullptr) {
        delete request_.get_fork_heads_;
      }
      break;
    }
    case kReadContract: {
      if (GetArena() == nullptr) {
        delete request_.read_contract_;
      }
      break;
    }
    case kGetAccountNonce: {
      if (GetArena() == nullptr) {
        delete request_.get_account_nonce_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void chain_request::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.chain_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* chain_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.submit_block_request submit_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_submit_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.submit_transaction_request submit_transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_submit_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_head_info_request get_head_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_head_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_chain_id_request get_chain_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_chain_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_fork_heads_request get_fork_heads = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_fork_heads(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.read_contract_request read_contract = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_account_nonce_request get_account_nonce = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_nonce(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* chain_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.chain_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.chain.submit_block_request submit_block = 2;
  if (_internal_has_submit_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::submit_block(this), target, stream);
  }

  // .koinos.rpc.chain.submit_transaction_request submit_transaction = 3;
  if (_internal_has_submit_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::submit_transaction(this), target, stream);
  }

  // .koinos.rpc.chain.get_head_info_request get_head_info = 4;
  if (_internal_has_get_head_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::get_head_info(this), target, stream);
  }

  // .koinos.rpc.chain.get_chain_id_request get_chain_id = 5;
  if (_internal_has_get_chain_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::get_chain_id(this), target, stream);
  }

  // .koinos.rpc.chain.get_fork_heads_request get_fork_heads = 6;
  if (_internal_has_get_fork_heads()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::get_fork_heads(this), target, stream);
  }

  // .koinos.rpc.chain.read_contract_request read_contract = 7;
  if (_internal_has_read_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::read_contract(this), target, stream);
  }

  // .koinos.rpc.chain.get_account_nonce_request get_account_nonce = 8;
  if (_internal_has_get_account_nonce()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::get_account_nonce(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.chain_request)
  return target;
}

size_t chain_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.chain_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.reserved_);
      break;
    }
    // .koinos.rpc.chain.submit_block_request submit_block = 2;
    case kSubmitBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.submit_block_);
      break;
    }
    // .koinos.rpc.chain.submit_transaction_request submit_transaction = 3;
    case kSubmitTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.submit_transaction_);
      break;
    }
    // .koinos.rpc.chain.get_head_info_request get_head_info = 4;
    case kGetHeadInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_head_info_);
      break;
    }
    // .koinos.rpc.chain.get_chain_id_request get_chain_id = 5;
    case kGetChainId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_chain_id_);
      break;
    }
    // .koinos.rpc.chain.get_fork_heads_request get_fork_heads = 6;
    case kGetForkHeads: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_fork_heads_);
      break;
    }
    // .koinos.rpc.chain.read_contract_request read_contract = 7;
    case kReadContract: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.read_contract_);
      break;
    }
    // .koinos.rpc.chain.get_account_nonce_request get_account_nonce = 8;
    case kGetAccountNonce: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_account_nonce_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void chain_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.chain_request)
  GOOGLE_DCHECK_NE(&from, this);
  const chain_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<chain_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.chain_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.chain_request)
    MergeFrom(*source);
  }
}

void chain_request::MergeFrom(const chain_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.chain_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kSubmitBlock: {
      _internal_mutable_submit_block()->::koinos::rpc::chain::submit_block_request::MergeFrom(from._internal_submit_block());
      break;
    }
    case kSubmitTransaction: {
      _internal_mutable_submit_transaction()->::koinos::rpc::chain::submit_transaction_request::MergeFrom(from._internal_submit_transaction());
      break;
    }
    case kGetHeadInfo: {
      _internal_mutable_get_head_info()->::koinos::rpc::chain::get_head_info_request::MergeFrom(from._internal_get_head_info());
      break;
    }
    case kGetChainId: {
      _internal_mutable_get_chain_id()->::koinos::rpc::chain::get_chain_id_request::MergeFrom(from._internal_get_chain_id());
      break;
    }
    case kGetForkHeads: {
      _internal_mutable_get_fork_heads()->::koinos::rpc::chain::get_fork_heads_request::MergeFrom(from._internal_get_fork_heads());
      break;
    }
    case kReadContract: {
      _internal_mutable_read_contract()->::koinos::rpc::chain::read_contract_request::MergeFrom(from._internal_read_contract());
      break;
    }
    case kGetAccountNonce: {
      _internal_mutable_get_account_nonce()->::koinos::rpc::chain::get_account_nonce_request::MergeFrom(from._internal_get_account_nonce());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void chain_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.chain_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chain_request::CopyFrom(const chain_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.chain_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chain_request::IsInitialized() const {
  return true;
}

void chain_request::InternalSwap(chain_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata chain_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class chain_response::_Internal {
 public:
  static const ::koinos::rpc::reserved_rpc& reserved(const chain_response* msg);
  static const ::koinos::rpc::error_response& error(const chain_response* msg);
  static const ::koinos::rpc::chain::submit_block_response& submit_block(const chain_response* msg);
  static const ::koinos::rpc::chain::submit_transaction_response& submit_transaction(const chain_response* msg);
  static const ::koinos::rpc::chain::get_head_info_response& get_head_info(const chain_response* msg);
  static const ::koinos::rpc::chain::get_chain_id_response& get_chain_id(const chain_response* msg);
  static const ::koinos::rpc::chain::get_fork_heads_response& get_fork_heads(const chain_response* msg);
  static const ::koinos::rpc::chain::read_contract_response& read_contract(const chain_response* msg);
  static const ::koinos::rpc::chain::get_account_nonce_response& get_account_nonce(const chain_response* msg);
};

const ::koinos::rpc::reserved_rpc&
chain_response::_Internal::reserved(const chain_response* msg) {
  return *msg->response_.reserved_;
}
const ::koinos::rpc::error_response&
chain_response::_Internal::error(const chain_response* msg) {
  return *msg->response_.error_;
}
const ::koinos::rpc::chain::submit_block_response&
chain_response::_Internal::submit_block(const chain_response* msg) {
  return *msg->response_.submit_block_;
}
const ::koinos::rpc::chain::submit_transaction_response&
chain_response::_Internal::submit_transaction(const chain_response* msg) {
  return *msg->response_.submit_transaction_;
}
const ::koinos::rpc::chain::get_head_info_response&
chain_response::_Internal::get_head_info(const chain_response* msg) {
  return *msg->response_.get_head_info_;
}
const ::koinos::rpc::chain::get_chain_id_response&
chain_response::_Internal::get_chain_id(const chain_response* msg) {
  return *msg->response_.get_chain_id_;
}
const ::koinos::rpc::chain::get_fork_heads_response&
chain_response::_Internal::get_fork_heads(const chain_response* msg) {
  return *msg->response_.get_fork_heads_;
}
const ::koinos::rpc::chain::read_contract_response&
chain_response::_Internal::read_contract(const chain_response* msg) {
  return *msg->response_.read_contract_;
}
const ::koinos::rpc::chain::get_account_nonce_response&
chain_response::_Internal::get_account_nonce(const chain_response* msg) {
  return *msg->response_.get_account_nonce_;
}
void chain_response::set_allocated_reserved(::koinos::rpc::reserved_rpc* reserved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (reserved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reserved)->GetArena();
    if (message_arena != submessage_arena) {
      reserved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reserved, submessage_arena);
    }
    set_has_reserved();
    response_.reserved_ = reserved;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.reserved)
}
void chain_response::clear_reserved() {
  if (_internal_has_reserved()) {
    if (GetArena() == nullptr) {
      delete response_.reserved_;
    }
    clear_has_response();
  }
}
void chain_response::set_allocated_error(::koinos::rpc::error_response* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.error)
}
void chain_response::clear_error() {
  if (_internal_has_error()) {
    if (GetArena() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
void chain_response::set_allocated_submit_block(::koinos::rpc::chain::submit_block_response* submit_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (submit_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(submit_block);
    if (message_arena != submessage_arena) {
      submit_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submit_block, submessage_arena);
    }
    set_has_submit_block();
    response_.submit_block_ = submit_block;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.submit_block)
}
void chain_response::set_allocated_submit_transaction(::koinos::rpc::chain::submit_transaction_response* submit_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (submit_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(submit_transaction);
    if (message_arena != submessage_arena) {
      submit_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submit_transaction, submessage_arena);
    }
    set_has_submit_transaction();
    response_.submit_transaction_ = submit_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.submit_transaction)
}
void chain_response::set_allocated_get_head_info(::koinos::rpc::chain::get_head_info_response* get_head_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (get_head_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_head_info);
    if (message_arena != submessage_arena) {
      get_head_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_head_info, submessage_arena);
    }
    set_has_get_head_info();
    response_.get_head_info_ = get_head_info;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.get_head_info)
}
void chain_response::set_allocated_get_chain_id(::koinos::rpc::chain::get_chain_id_response* get_chain_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (get_chain_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_chain_id);
    if (message_arena != submessage_arena) {
      get_chain_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_chain_id, submessage_arena);
    }
    set_has_get_chain_id();
    response_.get_chain_id_ = get_chain_id;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.get_chain_id)
}
void chain_response::set_allocated_get_fork_heads(::koinos::rpc::chain::get_fork_heads_response* get_fork_heads) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (get_fork_heads) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_fork_heads);
    if (message_arena != submessage_arena) {
      get_fork_heads = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_fork_heads, submessage_arena);
    }
    set_has_get_fork_heads();
    response_.get_fork_heads_ = get_fork_heads;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.get_fork_heads)
}
void chain_response::set_allocated_read_contract(::koinos::rpc::chain::read_contract_response* read_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (read_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(read_contract);
    if (message_arena != submessage_arena) {
      read_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_contract, submessage_arena);
    }
    set_has_read_contract();
    response_.read_contract_ = read_contract;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.read_contract)
}
void chain_response::set_allocated_get_account_nonce(::koinos::rpc::chain::get_account_nonce_response* get_account_nonce) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (get_account_nonce) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_account_nonce);
    if (message_arena != submessage_arena) {
      get_account_nonce = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_account_nonce, submessage_arena);
    }
    set_has_get_account_nonce();
    response_.get_account_nonce_ = get_account_nonce;
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.rpc.chain.chain_response.get_account_nonce)
}
chain_response::chain_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:koinos.rpc.chain.chain_response)
}
chain_response::chain_response(const chain_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_response::MergeFrom(from._internal_error());
      break;
    }
    case kSubmitBlock: {
      _internal_mutable_submit_block()->::koinos::rpc::chain::submit_block_response::MergeFrom(from._internal_submit_block());
      break;
    }
    case kSubmitTransaction: {
      _internal_mutable_submit_transaction()->::koinos::rpc::chain::submit_transaction_response::MergeFrom(from._internal_submit_transaction());
      break;
    }
    case kGetHeadInfo: {
      _internal_mutable_get_head_info()->::koinos::rpc::chain::get_head_info_response::MergeFrom(from._internal_get_head_info());
      break;
    }
    case kGetChainId: {
      _internal_mutable_get_chain_id()->::koinos::rpc::chain::get_chain_id_response::MergeFrom(from._internal_get_chain_id());
      break;
    }
    case kGetForkHeads: {
      _internal_mutable_get_fork_heads()->::koinos::rpc::chain::get_fork_heads_response::MergeFrom(from._internal_get_fork_heads());
      break;
    }
    case kReadContract: {
      _internal_mutable_read_contract()->::koinos::rpc::chain::read_contract_response::MergeFrom(from._internal_read_contract());
      break;
    }
    case kGetAccountNonce: {
      _internal_mutable_get_account_nonce()->::koinos::rpc::chain::get_account_nonce_response::MergeFrom(from._internal_get_account_nonce());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:koinos.rpc.chain.chain_response)
}

void chain_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_chain_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  clear_has_response();
}

chain_response::~chain_response() {
  // @@protoc_insertion_point(destructor:koinos.rpc.chain.chain_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void chain_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void chain_response::ArenaDtor(void* object) {
  chain_response* _this = reinterpret_cast< chain_response* >(object);
  (void)_this;
}
void chain_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void chain_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const chain_response& chain_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_chain_response_koinos_2frpc_2fchain_2fchain_5frpc_2eproto.base);
  return *internal_default_instance();
}


void chain_response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:koinos.rpc.chain.chain_response)
  switch (response_case()) {
    case kReserved: {
      if (GetArena() == nullptr) {
        delete response_.reserved_;
      }
      break;
    }
    case kError: {
      if (GetArena() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case kSubmitBlock: {
      if (GetArena() == nullptr) {
        delete response_.submit_block_;
      }
      break;
    }
    case kSubmitTransaction: {
      if (GetArena() == nullptr) {
        delete response_.submit_transaction_;
      }
      break;
    }
    case kGetHeadInfo: {
      if (GetArena() == nullptr) {
        delete response_.get_head_info_;
      }
      break;
    }
    case kGetChainId: {
      if (GetArena() == nullptr) {
        delete response_.get_chain_id_;
      }
      break;
    }
    case kGetForkHeads: {
      if (GetArena() == nullptr) {
        delete response_.get_fork_heads_;
      }
      break;
    }
    case kReadContract: {
      if (GetArena() == nullptr) {
        delete response_.read_contract_;
      }
      break;
    }
    case kGetAccountNonce: {
      if (GetArena() == nullptr) {
        delete response_.get_account_nonce_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void chain_response::Clear() {
// @@protoc_insertion_point(message_clear_start:koinos.rpc.chain.chain_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* chain_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .koinos.rpc.reserved_rpc reserved = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reserved(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.error_response error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.submit_block_response submit_block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_submit_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.submit_transaction_response submit_transaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_submit_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_head_info_response get_head_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_head_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_chain_id_response get_chain_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_chain_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_fork_heads_response get_fork_heads = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_fork_heads(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.read_contract_response read_contract = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .koinos.rpc.chain.get_account_nonce_response get_account_nonce = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_account_nonce(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* chain_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:koinos.rpc.chain.chain_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .koinos.rpc.reserved_rpc reserved = 1;
  if (_internal_has_reserved()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reserved(this), target, stream);
  }

  // .koinos.rpc.error_response error = 2;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // .koinos.rpc.chain.submit_block_response submit_block = 3;
  if (_internal_has_submit_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::submit_block(this), target, stream);
  }

  // .koinos.rpc.chain.submit_transaction_response submit_transaction = 4;
  if (_internal_has_submit_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::submit_transaction(this), target, stream);
  }

  // .koinos.rpc.chain.get_head_info_response get_head_info = 5;
  if (_internal_has_get_head_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::get_head_info(this), target, stream);
  }

  // .koinos.rpc.chain.get_chain_id_response get_chain_id = 6;
  if (_internal_has_get_chain_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::get_chain_id(this), target, stream);
  }

  // .koinos.rpc.chain.get_fork_heads_response get_fork_heads = 7;
  if (_internal_has_get_fork_heads()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::get_fork_heads(this), target, stream);
  }

  // .koinos.rpc.chain.read_contract_response read_contract = 8;
  if (_internal_has_read_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::read_contract(this), target, stream);
  }

  // .koinos.rpc.chain.get_account_nonce_response get_account_nonce = 9;
  if (_internal_has_get_account_nonce()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::get_account_nonce(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:koinos.rpc.chain.chain_response)
  return target;
}

size_t chain_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:koinos.rpc.chain.chain_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .koinos.rpc.reserved_rpc reserved = 1;
    case kReserved: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.reserved_);
      break;
    }
    // .koinos.rpc.error_response error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    // .koinos.rpc.chain.submit_block_response submit_block = 3;
    case kSubmitBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.submit_block_);
      break;
    }
    // .koinos.rpc.chain.submit_transaction_response submit_transaction = 4;
    case kSubmitTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.submit_transaction_);
      break;
    }
    // .koinos.rpc.chain.get_head_info_response get_head_info = 5;
    case kGetHeadInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_head_info_);
      break;
    }
    // .koinos.rpc.chain.get_chain_id_response get_chain_id = 6;
    case kGetChainId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_chain_id_);
      break;
    }
    // .koinos.rpc.chain.get_fork_heads_response get_fork_heads = 7;
    case kGetForkHeads: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_fork_heads_);
      break;
    }
    // .koinos.rpc.chain.read_contract_response read_contract = 8;
    case kReadContract: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.read_contract_);
      break;
    }
    // .koinos.rpc.chain.get_account_nonce_response get_account_nonce = 9;
    case kGetAccountNonce: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_account_nonce_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void chain_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:koinos.rpc.chain.chain_response)
  GOOGLE_DCHECK_NE(&from, this);
  const chain_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<chain_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:koinos.rpc.chain.chain_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:koinos.rpc.chain.chain_response)
    MergeFrom(*source);
  }
}

void chain_response::MergeFrom(const chain_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:koinos.rpc.chain.chain_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kReserved: {
      _internal_mutable_reserved()->::koinos::rpc::reserved_rpc::MergeFrom(from._internal_reserved());
      break;
    }
    case kError: {
      _internal_mutable_error()->::koinos::rpc::error_response::MergeFrom(from._internal_error());
      break;
    }
    case kSubmitBlock: {
      _internal_mutable_submit_block()->::koinos::rpc::chain::submit_block_response::MergeFrom(from._internal_submit_block());
      break;
    }
    case kSubmitTransaction: {
      _internal_mutable_submit_transaction()->::koinos::rpc::chain::submit_transaction_response::MergeFrom(from._internal_submit_transaction());
      break;
    }
    case kGetHeadInfo: {
      _internal_mutable_get_head_info()->::koinos::rpc::chain::get_head_info_response::MergeFrom(from._internal_get_head_info());
      break;
    }
    case kGetChainId: {
      _internal_mutable_get_chain_id()->::koinos::rpc::chain::get_chain_id_response::MergeFrom(from._internal_get_chain_id());
      break;
    }
    case kGetForkHeads: {
      _internal_mutable_get_fork_heads()->::koinos::rpc::chain::get_fork_heads_response::MergeFrom(from._internal_get_fork_heads());
      break;
    }
    case kReadContract: {
      _internal_mutable_read_contract()->::koinos::rpc::chain::read_contract_response::MergeFrom(from._internal_read_contract());
      break;
    }
    case kGetAccountNonce: {
      _internal_mutable_get_account_nonce()->::koinos::rpc::chain::get_account_nonce_response::MergeFrom(from._internal_get_account_nonce());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void chain_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:koinos.rpc.chain.chain_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chain_response::CopyFrom(const chain_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:koinos.rpc.chain.chain_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chain_response::IsInitialized() const {
  return true;
}

void chain_response::InternalSwap(chain_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata chain_response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chain
}  // namespace rpc
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::submit_block_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::submit_block_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::submit_block_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::submit_block_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::submit_block_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::submit_block_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::submit_transaction_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::submit_transaction_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::submit_transaction_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::submit_transaction_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::submit_transaction_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::submit_transaction_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_head_info_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_head_info_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_head_info_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_head_info_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_head_info_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_head_info_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_chain_id_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_chain_id_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_chain_id_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_chain_id_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_chain_id_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_chain_id_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_fork_heads_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_fork_heads_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_fork_heads_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_fork_heads_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_fork_heads_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_fork_heads_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::read_contract_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::read_contract_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::read_contract_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::read_contract_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::read_contract_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::read_contract_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_account_nonce_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_account_nonce_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_account_nonce_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::get_account_nonce_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::get_account_nonce_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::get_account_nonce_response >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::chain_request* Arena::CreateMaybeMessage< ::koinos::rpc::chain::chain_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::chain_request >(arena);
}
template<> PROTOBUF_NOINLINE ::koinos::rpc::chain::chain_response* Arena::CreateMaybeMessage< ::koinos::rpc::chain::chain_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::koinos::rpc::chain::chain_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
