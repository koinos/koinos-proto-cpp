// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/koindx_tracker/koindx_tracker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "koinos/options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto;
namespace koinos {
namespace koindx_tracker {
class initialize_event;
struct initialize_eventDefaultTypeInternal;
extern initialize_eventDefaultTypeInternal _initialize_event_default_instance_;
class liquidity_record;
struct liquidity_recordDefaultTypeInternal;
extern liquidity_recordDefaultTypeInternal _liquidity_record_default_instance_;
class sync_event;
struct sync_eventDefaultTypeInternal;
extern sync_eventDefaultTypeInternal _sync_event_default_instance_;
class tvl_record;
struct tvl_recordDefaultTypeInternal;
extern tvl_recordDefaultTypeInternal _tvl_record_default_instance_;
}  // namespace koindx_tracker
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::koindx_tracker::initialize_event* Arena::CreateMaybeMessage<::koinos::koindx_tracker::initialize_event>(Arena*);
template<> ::koinos::koindx_tracker::liquidity_record* Arena::CreateMaybeMessage<::koinos::koindx_tracker::liquidity_record>(Arena*);
template<> ::koinos::koindx_tracker::sync_event* Arena::CreateMaybeMessage<::koinos::koindx_tracker::sync_event>(Arena*);
template<> ::koinos::koindx_tracker::tvl_record* Arena::CreateMaybeMessage<::koinos::koindx_tracker::tvl_record>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace koindx_tracker {

// ===================================================================

class liquidity_record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.koindx_tracker.liquidity_record) */ {
 public:
  inline liquidity_record() : liquidity_record(nullptr) {}
  ~liquidity_record() override;
  explicit constexpr liquidity_record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  liquidity_record(const liquidity_record& from);
  liquidity_record(liquidity_record&& from) noexcept
    : liquidity_record() {
    *this = ::std::move(from);
  }

  inline liquidity_record& operator=(const liquidity_record& from) {
    CopyFrom(from);
    return *this;
  }
  inline liquidity_record& operator=(liquidity_record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const liquidity_record& default_instance() {
    return *internal_default_instance();
  }
  static inline const liquidity_record* internal_default_instance() {
    return reinterpret_cast<const liquidity_record*>(
               &_liquidity_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(liquidity_record& a, liquidity_record& b) {
    a.Swap(&b);
  }
  inline void Swap(liquidity_record* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(liquidity_record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline liquidity_record* New() const final {
    return new liquidity_record();
  }

  liquidity_record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<liquidity_record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const liquidity_record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const liquidity_record& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(liquidity_record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.koindx_tracker.liquidity_record";
  }
  protected:
  explicit liquidity_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kBalanceFieldNumber = 2,
    kPrevCoinMsHiFieldNumber = 3,
    kPrevCoinMsLoFieldNumber = 4,
    kLastUpdateFieldNumber = 5,
  };
  // bytes address = 1 [(.koinos.btype) = ADDRESS];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint64 balance = 2 [jstype = JS_STRING];
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::uint64 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prev_coin_ms_hi = 3 [jstype = JS_STRING];
  void clear_prev_coin_ms_hi();
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_coin_ms_hi() const;
  void set_prev_coin_ms_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prev_coin_ms_hi() const;
  void _internal_set_prev_coin_ms_hi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prev_coin_ms_lo = 4 [jstype = JS_STRING];
  void clear_prev_coin_ms_lo();
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_coin_ms_lo() const;
  void set_prev_coin_ms_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prev_coin_ms_lo() const;
  void _internal_set_prev_coin_ms_lo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_update = 5 [jstype = JS_STRING];
  void clear_last_update();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_update() const;
  void set_last_update(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_update() const;
  void _internal_set_last_update(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.koindx_tracker.liquidity_record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 balance_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_coin_ms_hi_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_coin_ms_lo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto;
};
// -------------------------------------------------------------------

class tvl_record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.koindx_tracker.tvl_record) */ {
 public:
  inline tvl_record() : tvl_record(nullptr) {}
  ~tvl_record() override;
  explicit constexpr tvl_record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  tvl_record(const tvl_record& from);
  tvl_record(tvl_record&& from) noexcept
    : tvl_record() {
    *this = ::std::move(from);
  }

  inline tvl_record& operator=(const tvl_record& from) {
    CopyFrom(from);
    return *this;
  }
  inline tvl_record& operator=(tvl_record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tvl_record& default_instance() {
    return *internal_default_instance();
  }
  static inline const tvl_record* internal_default_instance() {
    return reinterpret_cast<const tvl_record*>(
               &_tvl_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(tvl_record& a, tvl_record& b) {
    a.Swap(&b);
  }
  inline void Swap(tvl_record* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tvl_record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline tvl_record* New() const final {
    return new tvl_record();
  }

  tvl_record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<tvl_record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const tvl_record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const tvl_record& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tvl_record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.koindx_tracker.tvl_record";
  }
  protected:
  explicit tvl_record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1 [jstype = JS_STRING];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.koindx_tracker.tvl_record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto;
};
// -------------------------------------------------------------------

class initialize_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.koindx_tracker.initialize_event) */ {
 public:
  inline initialize_event() : initialize_event(nullptr) {}
  ~initialize_event() override;
  explicit constexpr initialize_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  initialize_event(const initialize_event& from);
  initialize_event(initialize_event&& from) noexcept
    : initialize_event() {
    *this = ::std::move(from);
  }

  inline initialize_event& operator=(const initialize_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline initialize_event& operator=(initialize_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const initialize_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const initialize_event* internal_default_instance() {
    return reinterpret_cast<const initialize_event*>(
               &_initialize_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(initialize_event& a, initialize_event& b) {
    a.Swap(&b);
  }
  inline void Swap(initialize_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(initialize_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline initialize_event* New() const final {
    return new initialize_event();
  }

  initialize_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<initialize_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const initialize_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const initialize_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(initialize_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.koindx_tracker.initialize_event";
  }
  protected:
  explicit initialize_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenAFieldNumber = 1,
    kTokenBFieldNumber = 2,
  };
  // string token_a = 1;
  void clear_token_a();
  const std::string& token_a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_a();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_a();
  void set_allocated_token_a(std::string* token_a);
  private:
  const std::string& _internal_token_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_a(const std::string& value);
  std::string* _internal_mutable_token_a();
  public:

  // string token_b = 2;
  void clear_token_b();
  const std::string& token_b() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token_b(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token_b();
  PROTOBUF_MUST_USE_RESULT std::string* release_token_b();
  void set_allocated_token_b(std::string* token_b);
  private:
  const std::string& _internal_token_b() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token_b(const std::string& value);
  std::string* _internal_mutable_token_b();
  public:

  // @@protoc_insertion_point(class_scope:koinos.koindx_tracker.initialize_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_a_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto;
};
// -------------------------------------------------------------------

class sync_event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.koindx_tracker.sync_event) */ {
 public:
  inline sync_event() : sync_event(nullptr) {}
  ~sync_event() override;
  explicit constexpr sync_event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  sync_event(const sync_event& from);
  sync_event(sync_event&& from) noexcept
    : sync_event() {
    *this = ::std::move(from);
  }

  inline sync_event& operator=(const sync_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline sync_event& operator=(sync_event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const sync_event& default_instance() {
    return *internal_default_instance();
  }
  static inline const sync_event* internal_default_instance() {
    return reinterpret_cast<const sync_event*>(
               &_sync_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(sync_event& a, sync_event& b) {
    a.Swap(&b);
  }
  inline void Swap(sync_event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sync_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sync_event* New() const final {
    return new sync_event();
  }

  sync_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sync_event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const sync_event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const sync_event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sync_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.koindx_tracker.sync_event";
  }
  protected:
  explicit sync_event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReserveAFieldNumber = 1,
    kReserveBFieldNumber = 2,
  };
  // uint64 reserve_a = 1 [jstype = JS_STRING];
  void clear_reserve_a();
  ::PROTOBUF_NAMESPACE_ID::uint64 reserve_a() const;
  void set_reserve_a(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reserve_a() const;
  void _internal_set_reserve_a(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 reserve_b = 2 [jstype = JS_STRING];
  void clear_reserve_b();
  ::PROTOBUF_NAMESPACE_ID::uint64 reserve_b() const;
  void set_reserve_b(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reserve_b() const;
  void _internal_set_reserve_b(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.koindx_tracker.sync_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reserve_a_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reserve_b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// liquidity_record

// bytes address = 1 [(.koinos.btype) = ADDRESS];
inline void liquidity_record::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& liquidity_record::address() const {
  // @@protoc_insertion_point(field_get:koinos.koindx_tracker.liquidity_record.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void liquidity_record::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.koindx_tracker.liquidity_record.address)
}
inline std::string* liquidity_record::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:koinos.koindx_tracker.liquidity_record.address)
  return _s;
}
inline const std::string& liquidity_record::_internal_address() const {
  return address_.Get();
}
inline void liquidity_record::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* liquidity_record::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* liquidity_record::release_address() {
  // @@protoc_insertion_point(field_release:koinos.koindx_tracker.liquidity_record.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void liquidity_record::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.koindx_tracker.liquidity_record.address)
}

// uint64 balance = 2 [jstype = JS_STRING];
inline void liquidity_record::clear_balance() {
  balance_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 liquidity_record::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 liquidity_record::balance() const {
  // @@protoc_insertion_point(field_get:koinos.koindx_tracker.liquidity_record.balance)
  return _internal_balance();
}
inline void liquidity_record::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  balance_ = value;
}
inline void liquidity_record::set_balance(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:koinos.koindx_tracker.liquidity_record.balance)
}

// uint64 prev_coin_ms_hi = 3 [jstype = JS_STRING];
inline void liquidity_record::clear_prev_coin_ms_hi() {
  prev_coin_ms_hi_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 liquidity_record::_internal_prev_coin_ms_hi() const {
  return prev_coin_ms_hi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 liquidity_record::prev_coin_ms_hi() const {
  // @@protoc_insertion_point(field_get:koinos.koindx_tracker.liquidity_record.prev_coin_ms_hi)
  return _internal_prev_coin_ms_hi();
}
inline void liquidity_record::_internal_set_prev_coin_ms_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prev_coin_ms_hi_ = value;
}
inline void liquidity_record::set_prev_coin_ms_hi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prev_coin_ms_hi(value);
  // @@protoc_insertion_point(field_set:koinos.koindx_tracker.liquidity_record.prev_coin_ms_hi)
}

// uint64 prev_coin_ms_lo = 4 [jstype = JS_STRING];
inline void liquidity_record::clear_prev_coin_ms_lo() {
  prev_coin_ms_lo_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 liquidity_record::_internal_prev_coin_ms_lo() const {
  return prev_coin_ms_lo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 liquidity_record::prev_coin_ms_lo() const {
  // @@protoc_insertion_point(field_get:koinos.koindx_tracker.liquidity_record.prev_coin_ms_lo)
  return _internal_prev_coin_ms_lo();
}
inline void liquidity_record::_internal_set_prev_coin_ms_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prev_coin_ms_lo_ = value;
}
inline void liquidity_record::set_prev_coin_ms_lo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prev_coin_ms_lo(value);
  // @@protoc_insertion_point(field_set:koinos.koindx_tracker.liquidity_record.prev_coin_ms_lo)
}

// uint64 last_update = 5 [jstype = JS_STRING];
inline void liquidity_record::clear_last_update() {
  last_update_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 liquidity_record::_internal_last_update() const {
  return last_update_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 liquidity_record::last_update() const {
  // @@protoc_insertion_point(field_get:koinos.koindx_tracker.liquidity_record.last_update)
  return _internal_last_update();
}
inline void liquidity_record::_internal_set_last_update(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_update_ = value;
}
inline void liquidity_record::set_last_update(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_update(value);
  // @@protoc_insertion_point(field_set:koinos.koindx_tracker.liquidity_record.last_update)
}

// -------------------------------------------------------------------

// tvl_record

// uint64 value = 1 [jstype = JS_STRING];
inline void tvl_record::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tvl_record::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 tvl_record::value() const {
  // @@protoc_insertion_point(field_get:koinos.koindx_tracker.tvl_record.value)
  return _internal_value();
}
inline void tvl_record::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void tvl_record::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.koindx_tracker.tvl_record.value)
}

// -------------------------------------------------------------------

// initialize_event

// string token_a = 1;
inline void initialize_event::clear_token_a() {
  token_a_.ClearToEmpty();
}
inline const std::string& initialize_event::token_a() const {
  // @@protoc_insertion_point(field_get:koinos.koindx_tracker.initialize_event.token_a)
  return _internal_token_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void initialize_event::set_token_a(ArgT0&& arg0, ArgT... args) {
 
 token_a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.koindx_tracker.initialize_event.token_a)
}
inline std::string* initialize_event::mutable_token_a() {
  std::string* _s = _internal_mutable_token_a();
  // @@protoc_insertion_point(field_mutable:koinos.koindx_tracker.initialize_event.token_a)
  return _s;
}
inline const std::string& initialize_event::_internal_token_a() const {
  return token_a_.Get();
}
inline void initialize_event::_internal_set_token_a(const std::string& value) {
  
  token_a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* initialize_event::_internal_mutable_token_a() {
  
  return token_a_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* initialize_event::release_token_a() {
  // @@protoc_insertion_point(field_release:koinos.koindx_tracker.initialize_event.token_a)
  return token_a_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void initialize_event::set_allocated_token_a(std::string* token_a) {
  if (token_a != nullptr) {
    
  } else {
    
  }
  token_a_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_a,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.koindx_tracker.initialize_event.token_a)
}

// string token_b = 2;
inline void initialize_event::clear_token_b() {
  token_b_.ClearToEmpty();
}
inline const std::string& initialize_event::token_b() const {
  // @@protoc_insertion_point(field_get:koinos.koindx_tracker.initialize_event.token_b)
  return _internal_token_b();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void initialize_event::set_token_b(ArgT0&& arg0, ArgT... args) {
 
 token_b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:koinos.koindx_tracker.initialize_event.token_b)
}
inline std::string* initialize_event::mutable_token_b() {
  std::string* _s = _internal_mutable_token_b();
  // @@protoc_insertion_point(field_mutable:koinos.koindx_tracker.initialize_event.token_b)
  return _s;
}
inline const std::string& initialize_event::_internal_token_b() const {
  return token_b_.Get();
}
inline void initialize_event::_internal_set_token_b(const std::string& value) {
  
  token_b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* initialize_event::_internal_mutable_token_b() {
  
  return token_b_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* initialize_event::release_token_b() {
  // @@protoc_insertion_point(field_release:koinos.koindx_tracker.initialize_event.token_b)
  return token_b_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void initialize_event::set_allocated_token_b(std::string* token_b) {
  if (token_b != nullptr) {
    
  } else {
    
  }
  token_b_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_b,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:koinos.koindx_tracker.initialize_event.token_b)
}

// -------------------------------------------------------------------

// sync_event

// uint64 reserve_a = 1 [jstype = JS_STRING];
inline void sync_event::clear_reserve_a() {
  reserve_a_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 sync_event::_internal_reserve_a() const {
  return reserve_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 sync_event::reserve_a() const {
  // @@protoc_insertion_point(field_get:koinos.koindx_tracker.sync_event.reserve_a)
  return _internal_reserve_a();
}
inline void sync_event::_internal_set_reserve_a(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  reserve_a_ = value;
}
inline void sync_event::set_reserve_a(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reserve_a(value);
  // @@protoc_insertion_point(field_set:koinos.koindx_tracker.sync_event.reserve_a)
}

// uint64 reserve_b = 2 [jstype = JS_STRING];
inline void sync_event::clear_reserve_b() {
  reserve_b_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 sync_event::_internal_reserve_b() const {
  return reserve_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 sync_event::reserve_b() const {
  // @@protoc_insertion_point(field_get:koinos.koindx_tracker.sync_event.reserve_b)
  return _internal_reserve_b();
}
inline void sync_event::_internal_set_reserve_b(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  reserve_b_ = value;
}
inline void sync_event::set_reserve_b(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reserve_b(value);
  // @@protoc_insertion_point(field_set:koinos.koindx_tracker.sync_event.reserve_b)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace koindx_tracker
}  // namespace koinos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fkoindx_5ftracker_2fkoindx_5ftracker_2eproto
