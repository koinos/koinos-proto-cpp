// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: koinos/chain/chain.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2fchain_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2fchain_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "koinos/common.pb.h"
#include "koinos/protocol/protocol.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_koinos_2fchain_2fchain_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_koinos_2fchain_2fchain_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[60]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_koinos_2fchain_2fchain_2eproto;
namespace koinos {
namespace chain {
class apply_block_args;
class apply_block_argsDefaultTypeInternal;
extern apply_block_argsDefaultTypeInternal _apply_block_args_default_instance_;
class apply_block_return;
class apply_block_returnDefaultTypeInternal;
extern apply_block_returnDefaultTypeInternal _apply_block_return_default_instance_;
class apply_call_contract_operation_args;
class apply_call_contract_operation_argsDefaultTypeInternal;
extern apply_call_contract_operation_argsDefaultTypeInternal _apply_call_contract_operation_args_default_instance_;
class apply_call_contract_operation_return;
class apply_call_contract_operation_returnDefaultTypeInternal;
extern apply_call_contract_operation_returnDefaultTypeInternal _apply_call_contract_operation_return_default_instance_;
class apply_set_system_call_operation_args;
class apply_set_system_call_operation_argsDefaultTypeInternal;
extern apply_set_system_call_operation_argsDefaultTypeInternal _apply_set_system_call_operation_args_default_instance_;
class apply_transaction_args;
class apply_transaction_argsDefaultTypeInternal;
extern apply_transaction_argsDefaultTypeInternal _apply_transaction_args_default_instance_;
class apply_transaction_return;
class apply_transaction_returnDefaultTypeInternal;
extern apply_transaction_returnDefaultTypeInternal _apply_transaction_return_default_instance_;
class apply_upload_contract_operation_args;
class apply_upload_contract_operation_argsDefaultTypeInternal;
extern apply_upload_contract_operation_argsDefaultTypeInternal _apply_upload_contract_operation_args_default_instance_;
class apply_upload_contract_operation_return;
class apply_upload_contract_operation_returnDefaultTypeInternal;
extern apply_upload_contract_operation_returnDefaultTypeInternal _apply_upload_contract_operation_return_default_instance_;
class call_contract_args;
class call_contract_argsDefaultTypeInternal;
extern call_contract_argsDefaultTypeInternal _call_contract_args_default_instance_;
class call_contract_return;
class call_contract_returnDefaultTypeInternal;
extern call_contract_returnDefaultTypeInternal _call_contract_return_default_instance_;
class db_get_next_object_args;
class db_get_next_object_argsDefaultTypeInternal;
extern db_get_next_object_argsDefaultTypeInternal _db_get_next_object_args_default_instance_;
class db_get_next_object_return;
class db_get_next_object_returnDefaultTypeInternal;
extern db_get_next_object_returnDefaultTypeInternal _db_get_next_object_return_default_instance_;
class db_get_object_args;
class db_get_object_argsDefaultTypeInternal;
extern db_get_object_argsDefaultTypeInternal _db_get_object_args_default_instance_;
class db_get_object_return;
class db_get_object_returnDefaultTypeInternal;
extern db_get_object_returnDefaultTypeInternal _db_get_object_return_default_instance_;
class db_get_prev_object_args;
class db_get_prev_object_argsDefaultTypeInternal;
extern db_get_prev_object_argsDefaultTypeInternal _db_get_prev_object_args_default_instance_;
class db_get_prev_object_return;
class db_get_prev_object_returnDefaultTypeInternal;
extern db_get_prev_object_returnDefaultTypeInternal _db_get_prev_object_return_default_instance_;
class db_put_object_args;
class db_put_object_argsDefaultTypeInternal;
extern db_put_object_argsDefaultTypeInternal _db_put_object_args_default_instance_;
class db_put_object_return;
class db_put_object_returnDefaultTypeInternal;
extern db_put_object_returnDefaultTypeInternal _db_put_object_return_default_instance_;
class exit_contract_args;
class exit_contract_argsDefaultTypeInternal;
extern exit_contract_argsDefaultTypeInternal _exit_contract_args_default_instance_;
class exit_contract_return;
class exit_contract_returnDefaultTypeInternal;
extern exit_contract_returnDefaultTypeInternal _exit_contract_return_default_instance_;
class get_account_nonce_args;
class get_account_nonce_argsDefaultTypeInternal;
extern get_account_nonce_argsDefaultTypeInternal _get_account_nonce_args_default_instance_;
class get_account_nonce_return;
class get_account_nonce_returnDefaultTypeInternal;
extern get_account_nonce_returnDefaultTypeInternal _get_account_nonce_return_default_instance_;
class get_caller_args;
class get_caller_argsDefaultTypeInternal;
extern get_caller_argsDefaultTypeInternal _get_caller_args_default_instance_;
class get_caller_return;
class get_caller_returnDefaultTypeInternal;
extern get_caller_returnDefaultTypeInternal _get_caller_return_default_instance_;
class get_contract_args_args;
class get_contract_args_argsDefaultTypeInternal;
extern get_contract_args_argsDefaultTypeInternal _get_contract_args_args_default_instance_;
class get_contract_args_return;
class get_contract_args_returnDefaultTypeInternal;
extern get_contract_args_returnDefaultTypeInternal _get_contract_args_return_default_instance_;
class get_contract_args_size_args;
class get_contract_args_size_argsDefaultTypeInternal;
extern get_contract_args_size_argsDefaultTypeInternal _get_contract_args_size_args_default_instance_;
class get_contract_args_size_return;
class get_contract_args_size_returnDefaultTypeInternal;
extern get_contract_args_size_returnDefaultTypeInternal _get_contract_args_size_return_default_instance_;
class get_contract_id_args;
class get_contract_id_argsDefaultTypeInternal;
extern get_contract_id_argsDefaultTypeInternal _get_contract_id_args_default_instance_;
class get_contract_id_return;
class get_contract_id_returnDefaultTypeInternal;
extern get_contract_id_returnDefaultTypeInternal _get_contract_id_return_default_instance_;
class get_entry_point_args;
class get_entry_point_argsDefaultTypeInternal;
extern get_entry_point_argsDefaultTypeInternal _get_entry_point_args_default_instance_;
class get_entry_point_return;
class get_entry_point_returnDefaultTypeInternal;
extern get_entry_point_returnDefaultTypeInternal _get_entry_point_return_default_instance_;
class get_head_info_args;
class get_head_info_argsDefaultTypeInternal;
extern get_head_info_argsDefaultTypeInternal _get_head_info_args_default_instance_;
class get_head_info_return;
class get_head_info_returnDefaultTypeInternal;
extern get_head_info_returnDefaultTypeInternal _get_head_info_return_default_instance_;
class get_last_irreversible_block_args;
class get_last_irreversible_block_argsDefaultTypeInternal;
extern get_last_irreversible_block_argsDefaultTypeInternal _get_last_irreversible_block_args_default_instance_;
class get_last_irreversible_block_return;
class get_last_irreversible_block_returnDefaultTypeInternal;
extern get_last_irreversible_block_returnDefaultTypeInternal _get_last_irreversible_block_return_default_instance_;
class get_max_account_resources_args;
class get_max_account_resources_argsDefaultTypeInternal;
extern get_max_account_resources_argsDefaultTypeInternal _get_max_account_resources_args_default_instance_;
class get_max_account_resources_return;
class get_max_account_resources_returnDefaultTypeInternal;
extern get_max_account_resources_returnDefaultTypeInternal _get_max_account_resources_return_default_instance_;
class get_transaction_payer_args;
class get_transaction_payer_argsDefaultTypeInternal;
extern get_transaction_payer_argsDefaultTypeInternal _get_transaction_payer_args_default_instance_;
class get_transaction_payer_return;
class get_transaction_payer_returnDefaultTypeInternal;
extern get_transaction_payer_returnDefaultTypeInternal _get_transaction_payer_return_default_instance_;
class get_transaction_resource_limit_args;
class get_transaction_resource_limit_argsDefaultTypeInternal;
extern get_transaction_resource_limit_argsDefaultTypeInternal _get_transaction_resource_limit_args_default_instance_;
class get_transaction_resource_limit_return;
class get_transaction_resource_limit_returnDefaultTypeInternal;
extern get_transaction_resource_limit_returnDefaultTypeInternal _get_transaction_resource_limit_return_default_instance_;
class get_transaction_signature_args;
class get_transaction_signature_argsDefaultTypeInternal;
extern get_transaction_signature_argsDefaultTypeInternal _get_transaction_signature_args_default_instance_;
class get_transaction_signature_return;
class get_transaction_signature_returnDefaultTypeInternal;
extern get_transaction_signature_returnDefaultTypeInternal _get_transaction_signature_return_default_instance_;
class hash_args;
class hash_argsDefaultTypeInternal;
extern hash_argsDefaultTypeInternal _hash_args_default_instance_;
class hash_return;
class hash_returnDefaultTypeInternal;
extern hash_returnDefaultTypeInternal _hash_return_default_instance_;
class head_info;
class head_infoDefaultTypeInternal;
extern head_infoDefaultTypeInternal _head_info_default_instance_;
class prints_args;
class prints_argsDefaultTypeInternal;
extern prints_argsDefaultTypeInternal _prints_args_default_instance_;
class prints_return;
class prints_returnDefaultTypeInternal;
extern prints_returnDefaultTypeInternal _prints_return_default_instance_;
class recover_public_key_args;
class recover_public_key_argsDefaultTypeInternal;
extern recover_public_key_argsDefaultTypeInternal _recover_public_key_args_default_instance_;
class recover_public_key_return;
class recover_public_key_returnDefaultTypeInternal;
extern recover_public_key_returnDefaultTypeInternal _recover_public_key_return_default_instance_;
class require_authority_args;
class require_authority_argsDefaultTypeInternal;
extern require_authority_argsDefaultTypeInternal _require_authority_args_default_instance_;
class require_authority_return;
class require_authority_returnDefaultTypeInternal;
extern require_authority_returnDefaultTypeInternal _require_authority_return_default_instance_;
class set_contract_return_args;
class set_contract_return_argsDefaultTypeInternal;
extern set_contract_return_argsDefaultTypeInternal _set_contract_return_args_default_instance_;
class set_contract_return_return;
class set_contract_return_returnDefaultTypeInternal;
extern set_contract_return_returnDefaultTypeInternal _set_contract_return_return_default_instance_;
class verify_block_signature_args;
class verify_block_signature_argsDefaultTypeInternal;
extern verify_block_signature_argsDefaultTypeInternal _verify_block_signature_args_default_instance_;
class verify_block_signature_return;
class verify_block_signature_returnDefaultTypeInternal;
extern verify_block_signature_returnDefaultTypeInternal _verify_block_signature_return_default_instance_;
class verify_merkle_root_args;
class verify_merkle_root_argsDefaultTypeInternal;
extern verify_merkle_root_argsDefaultTypeInternal _verify_merkle_root_args_default_instance_;
class verify_merkle_root_return;
class verify_merkle_root_returnDefaultTypeInternal;
extern verify_merkle_root_returnDefaultTypeInternal _verify_merkle_root_return_default_instance_;
}  // namespace chain
}  // namespace koinos
PROTOBUF_NAMESPACE_OPEN
template<> ::koinos::chain::apply_block_args* Arena::CreateMaybeMessage<::koinos::chain::apply_block_args>(Arena*);
template<> ::koinos::chain::apply_block_return* Arena::CreateMaybeMessage<::koinos::chain::apply_block_return>(Arena*);
template<> ::koinos::chain::apply_call_contract_operation_args* Arena::CreateMaybeMessage<::koinos::chain::apply_call_contract_operation_args>(Arena*);
template<> ::koinos::chain::apply_call_contract_operation_return* Arena::CreateMaybeMessage<::koinos::chain::apply_call_contract_operation_return>(Arena*);
template<> ::koinos::chain::apply_set_system_call_operation_args* Arena::CreateMaybeMessage<::koinos::chain::apply_set_system_call_operation_args>(Arena*);
template<> ::koinos::chain::apply_transaction_args* Arena::CreateMaybeMessage<::koinos::chain::apply_transaction_args>(Arena*);
template<> ::koinos::chain::apply_transaction_return* Arena::CreateMaybeMessage<::koinos::chain::apply_transaction_return>(Arena*);
template<> ::koinos::chain::apply_upload_contract_operation_args* Arena::CreateMaybeMessage<::koinos::chain::apply_upload_contract_operation_args>(Arena*);
template<> ::koinos::chain::apply_upload_contract_operation_return* Arena::CreateMaybeMessage<::koinos::chain::apply_upload_contract_operation_return>(Arena*);
template<> ::koinos::chain::call_contract_args* Arena::CreateMaybeMessage<::koinos::chain::call_contract_args>(Arena*);
template<> ::koinos::chain::call_contract_return* Arena::CreateMaybeMessage<::koinos::chain::call_contract_return>(Arena*);
template<> ::koinos::chain::db_get_next_object_args* Arena::CreateMaybeMessage<::koinos::chain::db_get_next_object_args>(Arena*);
template<> ::koinos::chain::db_get_next_object_return* Arena::CreateMaybeMessage<::koinos::chain::db_get_next_object_return>(Arena*);
template<> ::koinos::chain::db_get_object_args* Arena::CreateMaybeMessage<::koinos::chain::db_get_object_args>(Arena*);
template<> ::koinos::chain::db_get_object_return* Arena::CreateMaybeMessage<::koinos::chain::db_get_object_return>(Arena*);
template<> ::koinos::chain::db_get_prev_object_args* Arena::CreateMaybeMessage<::koinos::chain::db_get_prev_object_args>(Arena*);
template<> ::koinos::chain::db_get_prev_object_return* Arena::CreateMaybeMessage<::koinos::chain::db_get_prev_object_return>(Arena*);
template<> ::koinos::chain::db_put_object_args* Arena::CreateMaybeMessage<::koinos::chain::db_put_object_args>(Arena*);
template<> ::koinos::chain::db_put_object_return* Arena::CreateMaybeMessage<::koinos::chain::db_put_object_return>(Arena*);
template<> ::koinos::chain::exit_contract_args* Arena::CreateMaybeMessage<::koinos::chain::exit_contract_args>(Arena*);
template<> ::koinos::chain::exit_contract_return* Arena::CreateMaybeMessage<::koinos::chain::exit_contract_return>(Arena*);
template<> ::koinos::chain::get_account_nonce_args* Arena::CreateMaybeMessage<::koinos::chain::get_account_nonce_args>(Arena*);
template<> ::koinos::chain::get_account_nonce_return* Arena::CreateMaybeMessage<::koinos::chain::get_account_nonce_return>(Arena*);
template<> ::koinos::chain::get_caller_args* Arena::CreateMaybeMessage<::koinos::chain::get_caller_args>(Arena*);
template<> ::koinos::chain::get_caller_return* Arena::CreateMaybeMessage<::koinos::chain::get_caller_return>(Arena*);
template<> ::koinos::chain::get_contract_args_args* Arena::CreateMaybeMessage<::koinos::chain::get_contract_args_args>(Arena*);
template<> ::koinos::chain::get_contract_args_return* Arena::CreateMaybeMessage<::koinos::chain::get_contract_args_return>(Arena*);
template<> ::koinos::chain::get_contract_args_size_args* Arena::CreateMaybeMessage<::koinos::chain::get_contract_args_size_args>(Arena*);
template<> ::koinos::chain::get_contract_args_size_return* Arena::CreateMaybeMessage<::koinos::chain::get_contract_args_size_return>(Arena*);
template<> ::koinos::chain::get_contract_id_args* Arena::CreateMaybeMessage<::koinos::chain::get_contract_id_args>(Arena*);
template<> ::koinos::chain::get_contract_id_return* Arena::CreateMaybeMessage<::koinos::chain::get_contract_id_return>(Arena*);
template<> ::koinos::chain::get_entry_point_args* Arena::CreateMaybeMessage<::koinos::chain::get_entry_point_args>(Arena*);
template<> ::koinos::chain::get_entry_point_return* Arena::CreateMaybeMessage<::koinos::chain::get_entry_point_return>(Arena*);
template<> ::koinos::chain::get_head_info_args* Arena::CreateMaybeMessage<::koinos::chain::get_head_info_args>(Arena*);
template<> ::koinos::chain::get_head_info_return* Arena::CreateMaybeMessage<::koinos::chain::get_head_info_return>(Arena*);
template<> ::koinos::chain::get_last_irreversible_block_args* Arena::CreateMaybeMessage<::koinos::chain::get_last_irreversible_block_args>(Arena*);
template<> ::koinos::chain::get_last_irreversible_block_return* Arena::CreateMaybeMessage<::koinos::chain::get_last_irreversible_block_return>(Arena*);
template<> ::koinos::chain::get_max_account_resources_args* Arena::CreateMaybeMessage<::koinos::chain::get_max_account_resources_args>(Arena*);
template<> ::koinos::chain::get_max_account_resources_return* Arena::CreateMaybeMessage<::koinos::chain::get_max_account_resources_return>(Arena*);
template<> ::koinos::chain::get_transaction_payer_args* Arena::CreateMaybeMessage<::koinos::chain::get_transaction_payer_args>(Arena*);
template<> ::koinos::chain::get_transaction_payer_return* Arena::CreateMaybeMessage<::koinos::chain::get_transaction_payer_return>(Arena*);
template<> ::koinos::chain::get_transaction_resource_limit_args* Arena::CreateMaybeMessage<::koinos::chain::get_transaction_resource_limit_args>(Arena*);
template<> ::koinos::chain::get_transaction_resource_limit_return* Arena::CreateMaybeMessage<::koinos::chain::get_transaction_resource_limit_return>(Arena*);
template<> ::koinos::chain::get_transaction_signature_args* Arena::CreateMaybeMessage<::koinos::chain::get_transaction_signature_args>(Arena*);
template<> ::koinos::chain::get_transaction_signature_return* Arena::CreateMaybeMessage<::koinos::chain::get_transaction_signature_return>(Arena*);
template<> ::koinos::chain::hash_args* Arena::CreateMaybeMessage<::koinos::chain::hash_args>(Arena*);
template<> ::koinos::chain::hash_return* Arena::CreateMaybeMessage<::koinos::chain::hash_return>(Arena*);
template<> ::koinos::chain::head_info* Arena::CreateMaybeMessage<::koinos::chain::head_info>(Arena*);
template<> ::koinos::chain::prints_args* Arena::CreateMaybeMessage<::koinos::chain::prints_args>(Arena*);
template<> ::koinos::chain::prints_return* Arena::CreateMaybeMessage<::koinos::chain::prints_return>(Arena*);
template<> ::koinos::chain::recover_public_key_args* Arena::CreateMaybeMessage<::koinos::chain::recover_public_key_args>(Arena*);
template<> ::koinos::chain::recover_public_key_return* Arena::CreateMaybeMessage<::koinos::chain::recover_public_key_return>(Arena*);
template<> ::koinos::chain::require_authority_args* Arena::CreateMaybeMessage<::koinos::chain::require_authority_args>(Arena*);
template<> ::koinos::chain::require_authority_return* Arena::CreateMaybeMessage<::koinos::chain::require_authority_return>(Arena*);
template<> ::koinos::chain::set_contract_return_args* Arena::CreateMaybeMessage<::koinos::chain::set_contract_return_args>(Arena*);
template<> ::koinos::chain::set_contract_return_return* Arena::CreateMaybeMessage<::koinos::chain::set_contract_return_return>(Arena*);
template<> ::koinos::chain::verify_block_signature_args* Arena::CreateMaybeMessage<::koinos::chain::verify_block_signature_args>(Arena*);
template<> ::koinos::chain::verify_block_signature_return* Arena::CreateMaybeMessage<::koinos::chain::verify_block_signature_return>(Arena*);
template<> ::koinos::chain::verify_merkle_root_args* Arena::CreateMaybeMessage<::koinos::chain::verify_merkle_root_args>(Arena*);
template<> ::koinos::chain::verify_merkle_root_return* Arena::CreateMaybeMessage<::koinos::chain::verify_merkle_root_return>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace koinos {
namespace chain {

enum privilege : int {
  kernel_mode = 0,
  user_mode = 1,
  privilege_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  privilege_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool privilege_IsValid(int value);
constexpr privilege privilege_MIN = kernel_mode;
constexpr privilege privilege_MAX = user_mode;
constexpr int privilege_ARRAYSIZE = privilege_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* privilege_descriptor();
template<typename T>
inline const std::string& privilege_Name(T enum_t_value) {
  static_assert(::std::is_same<T, privilege>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function privilege_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    privilege_descriptor(), enum_t_value);
}
inline bool privilege_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, privilege* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<privilege>(
    privilege_descriptor(), name, value);
}
// ===================================================================

class head_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.head_info) */ {
 public:
  inline head_info() : head_info(nullptr) {}
  virtual ~head_info();

  head_info(const head_info& from);
  head_info(head_info&& from) noexcept
    : head_info() {
    *this = ::std::move(from);
  }

  inline head_info& operator=(const head_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline head_info& operator=(head_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const head_info& default_instance();

  static inline const head_info* internal_default_instance() {
    return reinterpret_cast<const head_info*>(
               &_head_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(head_info& a, head_info& b) {
    a.Swap(&b);
  }
  inline void Swap(head_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(head_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline head_info* New() const final {
    return CreateMaybeMessage<head_info>(nullptr);
  }

  head_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<head_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const head_info& from);
  void MergeFrom(const head_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(head_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.head_info";
  }
  protected:
  explicit head_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadTopologyFieldNumber = 1,
    kHeadBlockTimeFieldNumber = 2,
    kLastIrreversibleBlockFieldNumber = 3,
  };
  // .koinos.block_topology head_topology = 1;
  bool has_head_topology() const;
  private:
  bool _internal_has_head_topology() const;
  public:
  void clear_head_topology();
  const ::koinos::block_topology& head_topology() const;
  ::koinos::block_topology* release_head_topology();
  ::koinos::block_topology* mutable_head_topology();
  void set_allocated_head_topology(::koinos::block_topology* head_topology);
  private:
  const ::koinos::block_topology& _internal_head_topology() const;
  ::koinos::block_topology* _internal_mutable_head_topology();
  public:
  void unsafe_arena_set_allocated_head_topology(
      ::koinos::block_topology* head_topology);
  ::koinos::block_topology* unsafe_arena_release_head_topology();

  // uint64 head_block_time = 2;
  void clear_head_block_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 head_block_time() const;
  void set_head_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_head_block_time() const;
  void _internal_set_head_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_irreversible_block = 3;
  void clear_last_irreversible_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_irreversible_block() const;
  void set_last_irreversible_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_irreversible_block() const;
  void _internal_set_last_irreversible_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.head_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::block_topology* head_topology_;
  ::PROTOBUF_NAMESPACE_ID::uint64 head_block_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_irreversible_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class prints_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.prints_args) */ {
 public:
  inline prints_args() : prints_args(nullptr) {}
  virtual ~prints_args();

  prints_args(const prints_args& from);
  prints_args(prints_args&& from) noexcept
    : prints_args() {
    *this = ::std::move(from);
  }

  inline prints_args& operator=(const prints_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline prints_args& operator=(prints_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const prints_args& default_instance();

  static inline const prints_args* internal_default_instance() {
    return reinterpret_cast<const prints_args*>(
               &_prints_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(prints_args& a, prints_args& b) {
    a.Swap(&b);
  }
  inline void Swap(prints_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(prints_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline prints_args* New() const final {
    return CreateMaybeMessage<prints_args>(nullptr);
  }

  prints_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<prints_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const prints_args& from);
  void MergeFrom(const prints_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(prints_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.prints_args";
  }
  protected:
  explicit prints_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.prints_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class prints_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.prints_return) */ {
 public:
  inline prints_return() : prints_return(nullptr) {}
  virtual ~prints_return();

  prints_return(const prints_return& from);
  prints_return(prints_return&& from) noexcept
    : prints_return() {
    *this = ::std::move(from);
  }

  inline prints_return& operator=(const prints_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline prints_return& operator=(prints_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const prints_return& default_instance();

  static inline const prints_return* internal_default_instance() {
    return reinterpret_cast<const prints_return*>(
               &_prints_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(prints_return& a, prints_return& b) {
    a.Swap(&b);
  }
  inline void Swap(prints_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(prints_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline prints_return* New() const final {
    return CreateMaybeMessage<prints_return>(nullptr);
  }

  prints_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<prints_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const prints_return& from);
  void MergeFrom(const prints_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(prints_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.prints_return";
  }
  protected:
  explicit prints_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.prints_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class verify_block_signature_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.verify_block_signature_args) */ {
 public:
  inline verify_block_signature_args() : verify_block_signature_args(nullptr) {}
  virtual ~verify_block_signature_args();

  verify_block_signature_args(const verify_block_signature_args& from);
  verify_block_signature_args(verify_block_signature_args&& from) noexcept
    : verify_block_signature_args() {
    *this = ::std::move(from);
  }

  inline verify_block_signature_args& operator=(const verify_block_signature_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline verify_block_signature_args& operator=(verify_block_signature_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const verify_block_signature_args& default_instance();

  enum ActiveDataCase {
    kActiveNative = 2,
    kActiveBlob = 3,
    ACTIVE_DATA_NOT_SET = 0,
  };

  static inline const verify_block_signature_args* internal_default_instance() {
    return reinterpret_cast<const verify_block_signature_args*>(
               &_verify_block_signature_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(verify_block_signature_args& a, verify_block_signature_args& b) {
    a.Swap(&b);
  }
  inline void Swap(verify_block_signature_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(verify_block_signature_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline verify_block_signature_args* New() const final {
    return CreateMaybeMessage<verify_block_signature_args>(nullptr);
  }

  verify_block_signature_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<verify_block_signature_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const verify_block_signature_args& from);
  void MergeFrom(const verify_block_signature_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(verify_block_signature_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.verify_block_signature_args";
  }
  protected:
  explicit verify_block_signature_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigestFieldNumber = 1,
    kSignatureDataFieldNumber = 4,
    kActiveNativeFieldNumber = 2,
    kActiveBlobFieldNumber = 3,
  };
  // bytes digest = 1;
  void clear_digest();
  const std::string& digest() const;
  void set_digest(const std::string& value);
  void set_digest(std::string&& value);
  void set_digest(const char* value);
  void set_digest(const void* value, size_t size);
  std::string* mutable_digest();
  std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // bytes signature_data = 4;
  void clear_signature_data();
  const std::string& signature_data() const;
  void set_signature_data(const std::string& value);
  void set_signature_data(std::string&& value);
  void set_signature_data(const char* value);
  void set_signature_data(const void* value, size_t size);
  std::string* mutable_signature_data();
  std::string* release_signature_data();
  void set_allocated_signature_data(std::string* signature_data);
  private:
  const std::string& _internal_signature_data() const;
  void _internal_set_signature_data(const std::string& value);
  std::string* _internal_mutable_signature_data();
  public:

  // .koinos.protocol.active_block_data active_native = 2;
  bool has_active_native() const;
  private:
  bool _internal_has_active_native() const;
  public:
  void clear_active_native();
  const ::koinos::protocol::active_block_data& active_native() const;
  ::koinos::protocol::active_block_data* release_active_native();
  ::koinos::protocol::active_block_data* mutable_active_native();
  void set_allocated_active_native(::koinos::protocol::active_block_data* active_native);
  private:
  const ::koinos::protocol::active_block_data& _internal_active_native() const;
  ::koinos::protocol::active_block_data* _internal_mutable_active_native();
  public:
  void unsafe_arena_set_allocated_active_native(
      ::koinos::protocol::active_block_data* active_native);
  ::koinos::protocol::active_block_data* unsafe_arena_release_active_native();

  // bytes active_blob = 3;
  private:
  bool _internal_has_active_blob() const;
  public:
  void clear_active_blob();
  const std::string& active_blob() const;
  void set_active_blob(const std::string& value);
  void set_active_blob(std::string&& value);
  void set_active_blob(const char* value);
  void set_active_blob(const void* value, size_t size);
  std::string* mutable_active_blob();
  std::string* release_active_blob();
  void set_allocated_active_blob(std::string* active_blob);
  private:
  const std::string& _internal_active_blob() const;
  void _internal_set_active_blob(const std::string& value);
  std::string* _internal_mutable_active_blob();
  public:

  void clear_active_data();
  ActiveDataCase active_data_case() const;
  // @@protoc_insertion_point(class_scope:koinos.chain.verify_block_signature_args)
 private:
  class _Internal;
  void set_has_active_native();
  void set_has_active_blob();

  inline bool has_active_data() const;
  inline void clear_has_active_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_data_;
  union ActiveDataUnion {
    ActiveDataUnion() {}
    ::koinos::protocol::active_block_data* active_native_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_blob_;
  } active_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class verify_block_signature_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.verify_block_signature_return) */ {
 public:
  inline verify_block_signature_return() : verify_block_signature_return(nullptr) {}
  virtual ~verify_block_signature_return();

  verify_block_signature_return(const verify_block_signature_return& from);
  verify_block_signature_return(verify_block_signature_return&& from) noexcept
    : verify_block_signature_return() {
    *this = ::std::move(from);
  }

  inline verify_block_signature_return& operator=(const verify_block_signature_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline verify_block_signature_return& operator=(verify_block_signature_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const verify_block_signature_return& default_instance();

  static inline const verify_block_signature_return* internal_default_instance() {
    return reinterpret_cast<const verify_block_signature_return*>(
               &_verify_block_signature_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(verify_block_signature_return& a, verify_block_signature_return& b) {
    a.Swap(&b);
  }
  inline void Swap(verify_block_signature_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(verify_block_signature_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline verify_block_signature_return* New() const final {
    return CreateMaybeMessage<verify_block_signature_return>(nullptr);
  }

  verify_block_signature_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<verify_block_signature_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const verify_block_signature_return& from);
  void MergeFrom(const verify_block_signature_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(verify_block_signature_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.verify_block_signature_return";
  }
  protected:
  explicit verify_block_signature_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.verify_block_signature_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class verify_merkle_root_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.verify_merkle_root_args) */ {
 public:
  inline verify_merkle_root_args() : verify_merkle_root_args(nullptr) {}
  virtual ~verify_merkle_root_args();

  verify_merkle_root_args(const verify_merkle_root_args& from);
  verify_merkle_root_args(verify_merkle_root_args&& from) noexcept
    : verify_merkle_root_args() {
    *this = ::std::move(from);
  }

  inline verify_merkle_root_args& operator=(const verify_merkle_root_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline verify_merkle_root_args& operator=(verify_merkle_root_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const verify_merkle_root_args& default_instance();

  static inline const verify_merkle_root_args* internal_default_instance() {
    return reinterpret_cast<const verify_merkle_root_args*>(
               &_verify_merkle_root_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(verify_merkle_root_args& a, verify_merkle_root_args& b) {
    a.Swap(&b);
  }
  inline void Swap(verify_merkle_root_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(verify_merkle_root_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline verify_merkle_root_args* New() const final {
    return CreateMaybeMessage<verify_merkle_root_args>(nullptr);
  }

  verify_merkle_root_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<verify_merkle_root_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const verify_merkle_root_args& from);
  void MergeFrom(const verify_merkle_root_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(verify_merkle_root_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.verify_merkle_root_args";
  }
  protected:
  explicit verify_merkle_root_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 2,
    kRootFieldNumber = 1,
  };
  // repeated bytes hashes = 2;
  int hashes_size() const;
  private:
  int _internal_hashes_size() const;
  public:
  void clear_hashes();
  const std::string& hashes(int index) const;
  std::string* mutable_hashes(int index);
  void set_hashes(int index, const std::string& value);
  void set_hashes(int index, std::string&& value);
  void set_hashes(int index, const char* value);
  void set_hashes(int index, const void* value, size_t size);
  std::string* add_hashes();
  void add_hashes(const std::string& value);
  void add_hashes(std::string&& value);
  void add_hashes(const char* value);
  void add_hashes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hashes();
  private:
  const std::string& _internal_hashes(int index) const;
  std::string* _internal_add_hashes();
  public:

  // bytes root = 1;
  void clear_root();
  const std::string& root() const;
  void set_root(const std::string& value);
  void set_root(std::string&& value);
  void set_root(const char* value);
  void set_root(const void* value, size_t size);
  std::string* mutable_root();
  std::string* release_root();
  void set_allocated_root(std::string* root);
  private:
  const std::string& _internal_root() const;
  void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.verify_merkle_root_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hashes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class verify_merkle_root_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.verify_merkle_root_return) */ {
 public:
  inline verify_merkle_root_return() : verify_merkle_root_return(nullptr) {}
  virtual ~verify_merkle_root_return();

  verify_merkle_root_return(const verify_merkle_root_return& from);
  verify_merkle_root_return(verify_merkle_root_return&& from) noexcept
    : verify_merkle_root_return() {
    *this = ::std::move(from);
  }

  inline verify_merkle_root_return& operator=(const verify_merkle_root_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline verify_merkle_root_return& operator=(verify_merkle_root_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const verify_merkle_root_return& default_instance();

  static inline const verify_merkle_root_return* internal_default_instance() {
    return reinterpret_cast<const verify_merkle_root_return*>(
               &_verify_merkle_root_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(verify_merkle_root_return& a, verify_merkle_root_return& b) {
    a.Swap(&b);
  }
  inline void Swap(verify_merkle_root_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(verify_merkle_root_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline verify_merkle_root_return* New() const final {
    return CreateMaybeMessage<verify_merkle_root_return>(nullptr);
  }

  verify_merkle_root_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<verify_merkle_root_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const verify_merkle_root_return& from);
  void MergeFrom(const verify_merkle_root_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(verify_merkle_root_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.verify_merkle_root_return";
  }
  protected:
  explicit verify_merkle_root_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.verify_merkle_root_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class apply_block_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.apply_block_args) */ {
 public:
  inline apply_block_args() : apply_block_args(nullptr) {}
  virtual ~apply_block_args();

  apply_block_args(const apply_block_args& from);
  apply_block_args(apply_block_args&& from) noexcept
    : apply_block_args() {
    *this = ::std::move(from);
  }

  inline apply_block_args& operator=(const apply_block_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline apply_block_args& operator=(apply_block_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const apply_block_args& default_instance();

  static inline const apply_block_args* internal_default_instance() {
    return reinterpret_cast<const apply_block_args*>(
               &_apply_block_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(apply_block_args& a, apply_block_args& b) {
    a.Swap(&b);
  }
  inline void Swap(apply_block_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(apply_block_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline apply_block_args* New() const final {
    return CreateMaybeMessage<apply_block_args>(nullptr);
  }

  apply_block_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<apply_block_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const apply_block_args& from);
  void MergeFrom(const apply_block_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(apply_block_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.apply_block_args";
  }
  protected:
  explicit apply_block_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
    kCheckPassiveDataFieldNumber = 2,
    kCheckBlockSignatureFieldNumber = 3,
    kCheckTransactionSignatureFieldNumber = 4,
  };
  // .koinos.protocol.block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::koinos::protocol::block& block() const;
  ::koinos::protocol::block* release_block();
  ::koinos::protocol::block* mutable_block();
  void set_allocated_block(::koinos::protocol::block* block);
  private:
  const ::koinos::protocol::block& _internal_block() const;
  ::koinos::protocol::block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::koinos::protocol::block* block);
  ::koinos::protocol::block* unsafe_arena_release_block();

  // bool check_passive_data = 2;
  void clear_check_passive_data();
  bool check_passive_data() const;
  void set_check_passive_data(bool value);
  private:
  bool _internal_check_passive_data() const;
  void _internal_set_check_passive_data(bool value);
  public:

  // bool check_block_signature = 3;
  void clear_check_block_signature();
  bool check_block_signature() const;
  void set_check_block_signature(bool value);
  private:
  bool _internal_check_block_signature() const;
  void _internal_set_check_block_signature(bool value);
  public:

  // bool check_transaction_signature = 4;
  void clear_check_transaction_signature();
  bool check_transaction_signature() const;
  void set_check_transaction_signature(bool value);
  private:
  bool _internal_check_transaction_signature() const;
  void _internal_set_check_transaction_signature(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.apply_block_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::block* block_;
  bool check_passive_data_;
  bool check_block_signature_;
  bool check_transaction_signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class apply_block_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.apply_block_return) */ {
 public:
  inline apply_block_return() : apply_block_return(nullptr) {}
  virtual ~apply_block_return();

  apply_block_return(const apply_block_return& from);
  apply_block_return(apply_block_return&& from) noexcept
    : apply_block_return() {
    *this = ::std::move(from);
  }

  inline apply_block_return& operator=(const apply_block_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline apply_block_return& operator=(apply_block_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const apply_block_return& default_instance();

  static inline const apply_block_return* internal_default_instance() {
    return reinterpret_cast<const apply_block_return*>(
               &_apply_block_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(apply_block_return& a, apply_block_return& b) {
    a.Swap(&b);
  }
  inline void Swap(apply_block_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(apply_block_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline apply_block_return* New() const final {
    return CreateMaybeMessage<apply_block_return>(nullptr);
  }

  apply_block_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<apply_block_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const apply_block_return& from);
  void MergeFrom(const apply_block_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(apply_block_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.apply_block_return";
  }
  protected:
  explicit apply_block_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.apply_block_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class apply_transaction_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.apply_transaction_args) */ {
 public:
  inline apply_transaction_args() : apply_transaction_args(nullptr) {}
  virtual ~apply_transaction_args();

  apply_transaction_args(const apply_transaction_args& from);
  apply_transaction_args(apply_transaction_args&& from) noexcept
    : apply_transaction_args() {
    *this = ::std::move(from);
  }

  inline apply_transaction_args& operator=(const apply_transaction_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline apply_transaction_args& operator=(apply_transaction_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const apply_transaction_args& default_instance();

  static inline const apply_transaction_args* internal_default_instance() {
    return reinterpret_cast<const apply_transaction_args*>(
               &_apply_transaction_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(apply_transaction_args& a, apply_transaction_args& b) {
    a.Swap(&b);
  }
  inline void Swap(apply_transaction_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(apply_transaction_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline apply_transaction_args* New() const final {
    return CreateMaybeMessage<apply_transaction_args>(nullptr);
  }

  apply_transaction_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<apply_transaction_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const apply_transaction_args& from);
  void MergeFrom(const apply_transaction_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(apply_transaction_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.apply_transaction_args";
  }
  protected:
  explicit apply_transaction_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // .koinos.protocol.transaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::koinos::protocol::transaction& transaction() const;
  ::koinos::protocol::transaction* release_transaction();
  ::koinos::protocol::transaction* mutable_transaction();
  void set_allocated_transaction(::koinos::protocol::transaction* transaction);
  private:
  const ::koinos::protocol::transaction& _internal_transaction() const;
  ::koinos::protocol::transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::koinos::protocol::transaction* transaction);
  ::koinos::protocol::transaction* unsafe_arena_release_transaction();

  // @@protoc_insertion_point(class_scope:koinos.chain.apply_transaction_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::transaction* transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class apply_transaction_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.apply_transaction_return) */ {
 public:
  inline apply_transaction_return() : apply_transaction_return(nullptr) {}
  virtual ~apply_transaction_return();

  apply_transaction_return(const apply_transaction_return& from);
  apply_transaction_return(apply_transaction_return&& from) noexcept
    : apply_transaction_return() {
    *this = ::std::move(from);
  }

  inline apply_transaction_return& operator=(const apply_transaction_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline apply_transaction_return& operator=(apply_transaction_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const apply_transaction_return& default_instance();

  static inline const apply_transaction_return* internal_default_instance() {
    return reinterpret_cast<const apply_transaction_return*>(
               &_apply_transaction_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(apply_transaction_return& a, apply_transaction_return& b) {
    a.Swap(&b);
  }
  inline void Swap(apply_transaction_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(apply_transaction_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline apply_transaction_return* New() const final {
    return CreateMaybeMessage<apply_transaction_return>(nullptr);
  }

  apply_transaction_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<apply_transaction_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const apply_transaction_return& from);
  void MergeFrom(const apply_transaction_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(apply_transaction_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.apply_transaction_return";
  }
  protected:
  explicit apply_transaction_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.apply_transaction_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class apply_upload_contract_operation_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.apply_upload_contract_operation_args) */ {
 public:
  inline apply_upload_contract_operation_args() : apply_upload_contract_operation_args(nullptr) {}
  virtual ~apply_upload_contract_operation_args();

  apply_upload_contract_operation_args(const apply_upload_contract_operation_args& from);
  apply_upload_contract_operation_args(apply_upload_contract_operation_args&& from) noexcept
    : apply_upload_contract_operation_args() {
    *this = ::std::move(from);
  }

  inline apply_upload_contract_operation_args& operator=(const apply_upload_contract_operation_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline apply_upload_contract_operation_args& operator=(apply_upload_contract_operation_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const apply_upload_contract_operation_args& default_instance();

  static inline const apply_upload_contract_operation_args* internal_default_instance() {
    return reinterpret_cast<const apply_upload_contract_operation_args*>(
               &_apply_upload_contract_operation_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(apply_upload_contract_operation_args& a, apply_upload_contract_operation_args& b) {
    a.Swap(&b);
  }
  inline void Swap(apply_upload_contract_operation_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(apply_upload_contract_operation_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline apply_upload_contract_operation_args* New() const final {
    return CreateMaybeMessage<apply_upload_contract_operation_args>(nullptr);
  }

  apply_upload_contract_operation_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<apply_upload_contract_operation_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const apply_upload_contract_operation_args& from);
  void MergeFrom(const apply_upload_contract_operation_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(apply_upload_contract_operation_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.apply_upload_contract_operation_args";
  }
  protected:
  explicit apply_upload_contract_operation_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
  };
  // .koinos.protocol.upload_contract_operation op = 1;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  const ::koinos::protocol::upload_contract_operation& op() const;
  ::koinos::protocol::upload_contract_operation* release_op();
  ::koinos::protocol::upload_contract_operation* mutable_op();
  void set_allocated_op(::koinos::protocol::upload_contract_operation* op);
  private:
  const ::koinos::protocol::upload_contract_operation& _internal_op() const;
  ::koinos::protocol::upload_contract_operation* _internal_mutable_op();
  public:
  void unsafe_arena_set_allocated_op(
      ::koinos::protocol::upload_contract_operation* op);
  ::koinos::protocol::upload_contract_operation* unsafe_arena_release_op();

  // @@protoc_insertion_point(class_scope:koinos.chain.apply_upload_contract_operation_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::upload_contract_operation* op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class apply_upload_contract_operation_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.apply_upload_contract_operation_return) */ {
 public:
  inline apply_upload_contract_operation_return() : apply_upload_contract_operation_return(nullptr) {}
  virtual ~apply_upload_contract_operation_return();

  apply_upload_contract_operation_return(const apply_upload_contract_operation_return& from);
  apply_upload_contract_operation_return(apply_upload_contract_operation_return&& from) noexcept
    : apply_upload_contract_operation_return() {
    *this = ::std::move(from);
  }

  inline apply_upload_contract_operation_return& operator=(const apply_upload_contract_operation_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline apply_upload_contract_operation_return& operator=(apply_upload_contract_operation_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const apply_upload_contract_operation_return& default_instance();

  static inline const apply_upload_contract_operation_return* internal_default_instance() {
    return reinterpret_cast<const apply_upload_contract_operation_return*>(
               &_apply_upload_contract_operation_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(apply_upload_contract_operation_return& a, apply_upload_contract_operation_return& b) {
    a.Swap(&b);
  }
  inline void Swap(apply_upload_contract_operation_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(apply_upload_contract_operation_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline apply_upload_contract_operation_return* New() const final {
    return CreateMaybeMessage<apply_upload_contract_operation_return>(nullptr);
  }

  apply_upload_contract_operation_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<apply_upload_contract_operation_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const apply_upload_contract_operation_return& from);
  void MergeFrom(const apply_upload_contract_operation_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(apply_upload_contract_operation_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.apply_upload_contract_operation_return";
  }
  protected:
  explicit apply_upload_contract_operation_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.apply_upload_contract_operation_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class apply_call_contract_operation_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.apply_call_contract_operation_args) */ {
 public:
  inline apply_call_contract_operation_args() : apply_call_contract_operation_args(nullptr) {}
  virtual ~apply_call_contract_operation_args();

  apply_call_contract_operation_args(const apply_call_contract_operation_args& from);
  apply_call_contract_operation_args(apply_call_contract_operation_args&& from) noexcept
    : apply_call_contract_operation_args() {
    *this = ::std::move(from);
  }

  inline apply_call_contract_operation_args& operator=(const apply_call_contract_operation_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline apply_call_contract_operation_args& operator=(apply_call_contract_operation_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const apply_call_contract_operation_args& default_instance();

  static inline const apply_call_contract_operation_args* internal_default_instance() {
    return reinterpret_cast<const apply_call_contract_operation_args*>(
               &_apply_call_contract_operation_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(apply_call_contract_operation_args& a, apply_call_contract_operation_args& b) {
    a.Swap(&b);
  }
  inline void Swap(apply_call_contract_operation_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(apply_call_contract_operation_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline apply_call_contract_operation_args* New() const final {
    return CreateMaybeMessage<apply_call_contract_operation_args>(nullptr);
  }

  apply_call_contract_operation_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<apply_call_contract_operation_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const apply_call_contract_operation_args& from);
  void MergeFrom(const apply_call_contract_operation_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(apply_call_contract_operation_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.apply_call_contract_operation_args";
  }
  protected:
  explicit apply_call_contract_operation_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
  };
  // .koinos.protocol.call_contract_operation op = 1;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  const ::koinos::protocol::call_contract_operation& op() const;
  ::koinos::protocol::call_contract_operation* release_op();
  ::koinos::protocol::call_contract_operation* mutable_op();
  void set_allocated_op(::koinos::protocol::call_contract_operation* op);
  private:
  const ::koinos::protocol::call_contract_operation& _internal_op() const;
  ::koinos::protocol::call_contract_operation* _internal_mutable_op();
  public:
  void unsafe_arena_set_allocated_op(
      ::koinos::protocol::call_contract_operation* op);
  ::koinos::protocol::call_contract_operation* unsafe_arena_release_op();

  // @@protoc_insertion_point(class_scope:koinos.chain.apply_call_contract_operation_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::call_contract_operation* op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class apply_call_contract_operation_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.apply_call_contract_operation_return) */ {
 public:
  inline apply_call_contract_operation_return() : apply_call_contract_operation_return(nullptr) {}
  virtual ~apply_call_contract_operation_return();

  apply_call_contract_operation_return(const apply_call_contract_operation_return& from);
  apply_call_contract_operation_return(apply_call_contract_operation_return&& from) noexcept
    : apply_call_contract_operation_return() {
    *this = ::std::move(from);
  }

  inline apply_call_contract_operation_return& operator=(const apply_call_contract_operation_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline apply_call_contract_operation_return& operator=(apply_call_contract_operation_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const apply_call_contract_operation_return& default_instance();

  static inline const apply_call_contract_operation_return* internal_default_instance() {
    return reinterpret_cast<const apply_call_contract_operation_return*>(
               &_apply_call_contract_operation_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(apply_call_contract_operation_return& a, apply_call_contract_operation_return& b) {
    a.Swap(&b);
  }
  inline void Swap(apply_call_contract_operation_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(apply_call_contract_operation_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline apply_call_contract_operation_return* New() const final {
    return CreateMaybeMessage<apply_call_contract_operation_return>(nullptr);
  }

  apply_call_contract_operation_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<apply_call_contract_operation_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const apply_call_contract_operation_return& from);
  void MergeFrom(const apply_call_contract_operation_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(apply_call_contract_operation_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.apply_call_contract_operation_return";
  }
  protected:
  explicit apply_call_contract_operation_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.apply_call_contract_operation_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class apply_set_system_call_operation_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.apply_set_system_call_operation_args) */ {
 public:
  inline apply_set_system_call_operation_args() : apply_set_system_call_operation_args(nullptr) {}
  virtual ~apply_set_system_call_operation_args();

  apply_set_system_call_operation_args(const apply_set_system_call_operation_args& from);
  apply_set_system_call_operation_args(apply_set_system_call_operation_args&& from) noexcept
    : apply_set_system_call_operation_args() {
    *this = ::std::move(from);
  }

  inline apply_set_system_call_operation_args& operator=(const apply_set_system_call_operation_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline apply_set_system_call_operation_args& operator=(apply_set_system_call_operation_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const apply_set_system_call_operation_args& default_instance();

  static inline const apply_set_system_call_operation_args* internal_default_instance() {
    return reinterpret_cast<const apply_set_system_call_operation_args*>(
               &_apply_set_system_call_operation_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(apply_set_system_call_operation_args& a, apply_set_system_call_operation_args& b) {
    a.Swap(&b);
  }
  inline void Swap(apply_set_system_call_operation_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(apply_set_system_call_operation_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline apply_set_system_call_operation_args* New() const final {
    return CreateMaybeMessage<apply_set_system_call_operation_args>(nullptr);
  }

  apply_set_system_call_operation_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<apply_set_system_call_operation_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const apply_set_system_call_operation_args& from);
  void MergeFrom(const apply_set_system_call_operation_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(apply_set_system_call_operation_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.apply_set_system_call_operation_args";
  }
  protected:
  explicit apply_set_system_call_operation_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
  };
  // .koinos.protocol.set_system_call_operation op = 1;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  const ::koinos::protocol::set_system_call_operation& op() const;
  ::koinos::protocol::set_system_call_operation* release_op();
  ::koinos::protocol::set_system_call_operation* mutable_op();
  void set_allocated_op(::koinos::protocol::set_system_call_operation* op);
  private:
  const ::koinos::protocol::set_system_call_operation& _internal_op() const;
  ::koinos::protocol::set_system_call_operation* _internal_mutable_op();
  public:
  void unsafe_arena_set_allocated_op(
      ::koinos::protocol::set_system_call_operation* op);
  ::koinos::protocol::set_system_call_operation* unsafe_arena_release_op();

  // @@protoc_insertion_point(class_scope:koinos.chain.apply_set_system_call_operation_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::set_system_call_operation* op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class db_put_object_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.db_put_object_args) */ {
 public:
  inline db_put_object_args() : db_put_object_args(nullptr) {}
  virtual ~db_put_object_args();

  db_put_object_args(const db_put_object_args& from);
  db_put_object_args(db_put_object_args&& from) noexcept
    : db_put_object_args() {
    *this = ::std::move(from);
  }

  inline db_put_object_args& operator=(const db_put_object_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_put_object_args& operator=(db_put_object_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_put_object_args& default_instance();

  static inline const db_put_object_args* internal_default_instance() {
    return reinterpret_cast<const db_put_object_args*>(
               &_db_put_object_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(db_put_object_args& a, db_put_object_args& b) {
    a.Swap(&b);
  }
  inline void Swap(db_put_object_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_put_object_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_put_object_args* New() const final {
    return CreateMaybeMessage<db_put_object_args>(nullptr);
  }

  db_put_object_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_put_object_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_put_object_args& from);
  void MergeFrom(const db_put_object_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_put_object_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.db_put_object_args";
  }
  protected:
  explicit db_put_object_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceFieldNumber = 1,
    kKeyFieldNumber = 2,
    kObjFieldNumber = 3,
  };
  // bytes space = 1;
  void clear_space();
  const std::string& space() const;
  void set_space(const std::string& value);
  void set_space(std::string&& value);
  void set_space(const char* value);
  void set_space(const void* value, size_t size);
  std::string* mutable_space();
  std::string* release_space();
  void set_allocated_space(std::string* space);
  private:
  const std::string& _internal_space() const;
  void _internal_set_space(const std::string& value);
  std::string* _internal_mutable_space();
  public:

  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes obj = 3;
  void clear_obj();
  const std::string& obj() const;
  void set_obj(const std::string& value);
  void set_obj(std::string&& value);
  void set_obj(const char* value);
  void set_obj(const void* value, size_t size);
  std::string* mutable_obj();
  std::string* release_obj();
  void set_allocated_obj(std::string* obj);
  private:
  const std::string& _internal_obj() const;
  void _internal_set_obj(const std::string& value);
  std::string* _internal_mutable_obj();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.db_put_object_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr space_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class db_put_object_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.db_put_object_return) */ {
 public:
  inline db_put_object_return() : db_put_object_return(nullptr) {}
  virtual ~db_put_object_return();

  db_put_object_return(const db_put_object_return& from);
  db_put_object_return(db_put_object_return&& from) noexcept
    : db_put_object_return() {
    *this = ::std::move(from);
  }

  inline db_put_object_return& operator=(const db_put_object_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_put_object_return& operator=(db_put_object_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_put_object_return& default_instance();

  static inline const db_put_object_return* internal_default_instance() {
    return reinterpret_cast<const db_put_object_return*>(
               &_db_put_object_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(db_put_object_return& a, db_put_object_return& b) {
    a.Swap(&b);
  }
  inline void Swap(db_put_object_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_put_object_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_put_object_return* New() const final {
    return CreateMaybeMessage<db_put_object_return>(nullptr);
  }

  db_put_object_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_put_object_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_put_object_return& from);
  void MergeFrom(const db_put_object_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_put_object_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.db_put_object_return";
  }
  protected:
  explicit db_put_object_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.db_put_object_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class db_get_object_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.db_get_object_args) */ {
 public:
  inline db_get_object_args() : db_get_object_args(nullptr) {}
  virtual ~db_get_object_args();

  db_get_object_args(const db_get_object_args& from);
  db_get_object_args(db_get_object_args&& from) noexcept
    : db_get_object_args() {
    *this = ::std::move(from);
  }

  inline db_get_object_args& operator=(const db_get_object_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_get_object_args& operator=(db_get_object_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_get_object_args& default_instance();

  static inline const db_get_object_args* internal_default_instance() {
    return reinterpret_cast<const db_get_object_args*>(
               &_db_get_object_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(db_get_object_args& a, db_get_object_args& b) {
    a.Swap(&b);
  }
  inline void Swap(db_get_object_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_get_object_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_get_object_args* New() const final {
    return CreateMaybeMessage<db_get_object_args>(nullptr);
  }

  db_get_object_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_get_object_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_get_object_args& from);
  void MergeFrom(const db_get_object_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_get_object_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.db_get_object_args";
  }
  protected:
  explicit db_get_object_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceFieldNumber = 1,
    kKeyFieldNumber = 2,
    kObjectSizeHintFieldNumber = 3,
  };
  // bytes space = 1;
  void clear_space();
  const std::string& space() const;
  void set_space(const std::string& value);
  void set_space(std::string&& value);
  void set_space(const char* value);
  void set_space(const void* value, size_t size);
  std::string* mutable_space();
  std::string* release_space();
  void set_allocated_space(std::string* space);
  private:
  const std::string& _internal_space() const;
  void _internal_set_space(const std::string& value);
  std::string* _internal_mutable_space();
  public:

  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint32 object_size_hint = 3;
  bool has_object_size_hint() const;
  private:
  bool _internal_has_object_size_hint() const;
  public:
  void clear_object_size_hint();
  ::PROTOBUF_NAMESPACE_ID::uint32 object_size_hint() const;
  void set_object_size_hint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_object_size_hint() const;
  void _internal_set_object_size_hint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.db_get_object_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr space_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 object_size_hint_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class db_get_object_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.db_get_object_return) */ {
 public:
  inline db_get_object_return() : db_get_object_return(nullptr) {}
  virtual ~db_get_object_return();

  db_get_object_return(const db_get_object_return& from);
  db_get_object_return(db_get_object_return&& from) noexcept
    : db_get_object_return() {
    *this = ::std::move(from);
  }

  inline db_get_object_return& operator=(const db_get_object_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_get_object_return& operator=(db_get_object_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_get_object_return& default_instance();

  static inline const db_get_object_return* internal_default_instance() {
    return reinterpret_cast<const db_get_object_return*>(
               &_db_get_object_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(db_get_object_return& a, db_get_object_return& b) {
    a.Swap(&b);
  }
  inline void Swap(db_get_object_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_get_object_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_get_object_return* New() const final {
    return CreateMaybeMessage<db_get_object_return>(nullptr);
  }

  db_get_object_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_get_object_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_get_object_return& from);
  void MergeFrom(const db_get_object_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_get_object_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.db_get_object_return";
  }
  protected:
  explicit db_get_object_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 3,
  };
  // bytes result = 3;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const void* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.db_get_object_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class db_get_next_object_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.db_get_next_object_args) */ {
 public:
  inline db_get_next_object_args() : db_get_next_object_args(nullptr) {}
  virtual ~db_get_next_object_args();

  db_get_next_object_args(const db_get_next_object_args& from);
  db_get_next_object_args(db_get_next_object_args&& from) noexcept
    : db_get_next_object_args() {
    *this = ::std::move(from);
  }

  inline db_get_next_object_args& operator=(const db_get_next_object_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_get_next_object_args& operator=(db_get_next_object_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_get_next_object_args& default_instance();

  static inline const db_get_next_object_args* internal_default_instance() {
    return reinterpret_cast<const db_get_next_object_args*>(
               &_db_get_next_object_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(db_get_next_object_args& a, db_get_next_object_args& b) {
    a.Swap(&b);
  }
  inline void Swap(db_get_next_object_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_get_next_object_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_get_next_object_args* New() const final {
    return CreateMaybeMessage<db_get_next_object_args>(nullptr);
  }

  db_get_next_object_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_get_next_object_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_get_next_object_args& from);
  void MergeFrom(const db_get_next_object_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_get_next_object_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.db_get_next_object_args";
  }
  protected:
  explicit db_get_next_object_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceFieldNumber = 1,
    kKeyFieldNumber = 2,
    kObjectSizeHintFieldNumber = 3,
  };
  // bytes space = 1;
  void clear_space();
  const std::string& space() const;
  void set_space(const std::string& value);
  void set_space(std::string&& value);
  void set_space(const char* value);
  void set_space(const void* value, size_t size);
  std::string* mutable_space();
  std::string* release_space();
  void set_allocated_space(std::string* space);
  private:
  const std::string& _internal_space() const;
  void _internal_set_space(const std::string& value);
  std::string* _internal_mutable_space();
  public:

  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint32 object_size_hint = 3;
  bool has_object_size_hint() const;
  private:
  bool _internal_has_object_size_hint() const;
  public:
  void clear_object_size_hint();
  ::PROTOBUF_NAMESPACE_ID::uint32 object_size_hint() const;
  void set_object_size_hint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_object_size_hint() const;
  void _internal_set_object_size_hint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.db_get_next_object_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr space_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 object_size_hint_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class db_get_next_object_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.db_get_next_object_return) */ {
 public:
  inline db_get_next_object_return() : db_get_next_object_return(nullptr) {}
  virtual ~db_get_next_object_return();

  db_get_next_object_return(const db_get_next_object_return& from);
  db_get_next_object_return(db_get_next_object_return&& from) noexcept
    : db_get_next_object_return() {
    *this = ::std::move(from);
  }

  inline db_get_next_object_return& operator=(const db_get_next_object_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_get_next_object_return& operator=(db_get_next_object_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_get_next_object_return& default_instance();

  static inline const db_get_next_object_return* internal_default_instance() {
    return reinterpret_cast<const db_get_next_object_return*>(
               &_db_get_next_object_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(db_get_next_object_return& a, db_get_next_object_return& b) {
    a.Swap(&b);
  }
  inline void Swap(db_get_next_object_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_get_next_object_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_get_next_object_return* New() const final {
    return CreateMaybeMessage<db_get_next_object_return>(nullptr);
  }

  db_get_next_object_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_get_next_object_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_get_next_object_return& from);
  void MergeFrom(const db_get_next_object_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_get_next_object_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.db_get_next_object_return";
  }
  protected:
  explicit db_get_next_object_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 3,
  };
  // bytes result = 3;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const void* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.db_get_next_object_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class db_get_prev_object_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.db_get_prev_object_args) */ {
 public:
  inline db_get_prev_object_args() : db_get_prev_object_args(nullptr) {}
  virtual ~db_get_prev_object_args();

  db_get_prev_object_args(const db_get_prev_object_args& from);
  db_get_prev_object_args(db_get_prev_object_args&& from) noexcept
    : db_get_prev_object_args() {
    *this = ::std::move(from);
  }

  inline db_get_prev_object_args& operator=(const db_get_prev_object_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_get_prev_object_args& operator=(db_get_prev_object_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_get_prev_object_args& default_instance();

  static inline const db_get_prev_object_args* internal_default_instance() {
    return reinterpret_cast<const db_get_prev_object_args*>(
               &_db_get_prev_object_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(db_get_prev_object_args& a, db_get_prev_object_args& b) {
    a.Swap(&b);
  }
  inline void Swap(db_get_prev_object_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_get_prev_object_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_get_prev_object_args* New() const final {
    return CreateMaybeMessage<db_get_prev_object_args>(nullptr);
  }

  db_get_prev_object_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_get_prev_object_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_get_prev_object_args& from);
  void MergeFrom(const db_get_prev_object_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_get_prev_object_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.db_get_prev_object_args";
  }
  protected:
  explicit db_get_prev_object_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceFieldNumber = 1,
    kKeyFieldNumber = 2,
    kObjectSizeHintFieldNumber = 3,
  };
  // bytes space = 1;
  void clear_space();
  const std::string& space() const;
  void set_space(const std::string& value);
  void set_space(std::string&& value);
  void set_space(const char* value);
  void set_space(const void* value, size_t size);
  std::string* mutable_space();
  std::string* release_space();
  void set_allocated_space(std::string* space);
  private:
  const std::string& _internal_space() const;
  void _internal_set_space(const std::string& value);
  std::string* _internal_mutable_space();
  public:

  // bytes key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // uint32 object_size_hint = 3;
  bool has_object_size_hint() const;
  private:
  bool _internal_has_object_size_hint() const;
  public:
  void clear_object_size_hint();
  ::PROTOBUF_NAMESPACE_ID::uint32 object_size_hint() const;
  void set_object_size_hint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_object_size_hint() const;
  void _internal_set_object_size_hint(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.db_get_prev_object_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr space_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 object_size_hint_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class db_get_prev_object_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.db_get_prev_object_return) */ {
 public:
  inline db_get_prev_object_return() : db_get_prev_object_return(nullptr) {}
  virtual ~db_get_prev_object_return();

  db_get_prev_object_return(const db_get_prev_object_return& from);
  db_get_prev_object_return(db_get_prev_object_return&& from) noexcept
    : db_get_prev_object_return() {
    *this = ::std::move(from);
  }

  inline db_get_prev_object_return& operator=(const db_get_prev_object_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline db_get_prev_object_return& operator=(db_get_prev_object_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const db_get_prev_object_return& default_instance();

  static inline const db_get_prev_object_return* internal_default_instance() {
    return reinterpret_cast<const db_get_prev_object_return*>(
               &_db_get_prev_object_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(db_get_prev_object_return& a, db_get_prev_object_return& b) {
    a.Swap(&b);
  }
  inline void Swap(db_get_prev_object_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(db_get_prev_object_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline db_get_prev_object_return* New() const final {
    return CreateMaybeMessage<db_get_prev_object_return>(nullptr);
  }

  db_get_prev_object_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<db_get_prev_object_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const db_get_prev_object_return& from);
  void MergeFrom(const db_get_prev_object_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(db_get_prev_object_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.db_get_prev_object_return";
  }
  protected:
  explicit db_get_prev_object_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 3,
  };
  // bytes result = 3;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const void* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.db_get_prev_object_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class call_contract_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.call_contract_args) */ {
 public:
  inline call_contract_args() : call_contract_args(nullptr) {}
  virtual ~call_contract_args();

  call_contract_args(const call_contract_args& from);
  call_contract_args(call_contract_args&& from) noexcept
    : call_contract_args() {
    *this = ::std::move(from);
  }

  inline call_contract_args& operator=(const call_contract_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline call_contract_args& operator=(call_contract_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const call_contract_args& default_instance();

  static inline const call_contract_args* internal_default_instance() {
    return reinterpret_cast<const call_contract_args*>(
               &_call_contract_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(call_contract_args& a, call_contract_args& b) {
    a.Swap(&b);
  }
  inline void Swap(call_contract_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(call_contract_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline call_contract_args* New() const final {
    return CreateMaybeMessage<call_contract_args>(nullptr);
  }

  call_contract_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<call_contract_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const call_contract_args& from);
  void MergeFrom(const call_contract_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(call_contract_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.call_contract_args";
  }
  protected:
  explicit call_contract_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kArgsFieldNumber = 3,
    kEntryPointFieldNumber = 2,
  };
  // bytes contract_id = 1;
  void clear_contract_id();
  const std::string& contract_id() const;
  void set_contract_id(const std::string& value);
  void set_contract_id(std::string&& value);
  void set_contract_id(const char* value);
  void set_contract_id(const void* value, size_t size);
  std::string* mutable_contract_id();
  std::string* release_contract_id();
  void set_allocated_contract_id(std::string* contract_id);
  private:
  const std::string& _internal_contract_id() const;
  void _internal_set_contract_id(const std::string& value);
  std::string* _internal_mutable_contract_id();
  public:

  // bytes args = 3;
  void clear_args();
  const std::string& args() const;
  void set_args(const std::string& value);
  void set_args(std::string&& value);
  void set_args(const char* value);
  void set_args(const void* value, size_t size);
  std::string* mutable_args();
  std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // uint32 entry_point = 2;
  void clear_entry_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point() const;
  void set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entry_point() const;
  void _internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.call_contract_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class call_contract_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.call_contract_return) */ {
 public:
  inline call_contract_return() : call_contract_return(nullptr) {}
  virtual ~call_contract_return();

  call_contract_return(const call_contract_return& from);
  call_contract_return(call_contract_return&& from) noexcept
    : call_contract_return() {
    *this = ::std::move(from);
  }

  inline call_contract_return& operator=(const call_contract_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline call_contract_return& operator=(call_contract_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const call_contract_return& default_instance();

  static inline const call_contract_return* internal_default_instance() {
    return reinterpret_cast<const call_contract_return*>(
               &_call_contract_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(call_contract_return& a, call_contract_return& b) {
    a.Swap(&b);
  }
  inline void Swap(call_contract_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(call_contract_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline call_contract_return* New() const final {
    return CreateMaybeMessage<call_contract_return>(nullptr);
  }

  call_contract_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<call_contract_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const call_contract_return& from);
  void MergeFrom(const call_contract_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(call_contract_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.call_contract_return";
  }
  protected:
  explicit call_contract_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bytes result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const void* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.call_contract_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_entry_point_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_entry_point_args) */ {
 public:
  inline get_entry_point_args() : get_entry_point_args(nullptr) {}
  virtual ~get_entry_point_args();

  get_entry_point_args(const get_entry_point_args& from);
  get_entry_point_args(get_entry_point_args&& from) noexcept
    : get_entry_point_args() {
    *this = ::std::move(from);
  }

  inline get_entry_point_args& operator=(const get_entry_point_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_entry_point_args& operator=(get_entry_point_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_entry_point_args& default_instance();

  static inline const get_entry_point_args* internal_default_instance() {
    return reinterpret_cast<const get_entry_point_args*>(
               &_get_entry_point_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(get_entry_point_args& a, get_entry_point_args& b) {
    a.Swap(&b);
  }
  inline void Swap(get_entry_point_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_entry_point_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_entry_point_args* New() const final {
    return CreateMaybeMessage<get_entry_point_args>(nullptr);
  }

  get_entry_point_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_entry_point_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_entry_point_args& from);
  void MergeFrom(const get_entry_point_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_entry_point_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_entry_point_args";
  }
  protected:
  explicit get_entry_point_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.get_entry_point_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_entry_point_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_entry_point_return) */ {
 public:
  inline get_entry_point_return() : get_entry_point_return(nullptr) {}
  virtual ~get_entry_point_return();

  get_entry_point_return(const get_entry_point_return& from);
  get_entry_point_return(get_entry_point_return&& from) noexcept
    : get_entry_point_return() {
    *this = ::std::move(from);
  }

  inline get_entry_point_return& operator=(const get_entry_point_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_entry_point_return& operator=(get_entry_point_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_entry_point_return& default_instance();

  static inline const get_entry_point_return* internal_default_instance() {
    return reinterpret_cast<const get_entry_point_return*>(
               &_get_entry_point_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(get_entry_point_return& a, get_entry_point_return& b) {
    a.Swap(&b);
  }
  inline void Swap(get_entry_point_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_entry_point_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_entry_point_return* New() const final {
    return CreateMaybeMessage<get_entry_point_return>(nullptr);
  }

  get_entry_point_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_entry_point_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_entry_point_return& from);
  void MergeFrom(const get_entry_point_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_entry_point_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_entry_point_return";
  }
  protected:
  explicit get_entry_point_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryPointFieldNumber = 1,
  };
  // uint32 entry_point = 1;
  void clear_entry_point();
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point() const;
  void set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entry_point() const;
  void _internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.get_entry_point_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_contract_args_size_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_contract_args_size_args) */ {
 public:
  inline get_contract_args_size_args() : get_contract_args_size_args(nullptr) {}
  virtual ~get_contract_args_size_args();

  get_contract_args_size_args(const get_contract_args_size_args& from);
  get_contract_args_size_args(get_contract_args_size_args&& from) noexcept
    : get_contract_args_size_args() {
    *this = ::std::move(from);
  }

  inline get_contract_args_size_args& operator=(const get_contract_args_size_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_contract_args_size_args& operator=(get_contract_args_size_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_contract_args_size_args& default_instance();

  static inline const get_contract_args_size_args* internal_default_instance() {
    return reinterpret_cast<const get_contract_args_size_args*>(
               &_get_contract_args_size_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(get_contract_args_size_args& a, get_contract_args_size_args& b) {
    a.Swap(&b);
  }
  inline void Swap(get_contract_args_size_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_contract_args_size_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_contract_args_size_args* New() const final {
    return CreateMaybeMessage<get_contract_args_size_args>(nullptr);
  }

  get_contract_args_size_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_contract_args_size_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_contract_args_size_args& from);
  void MergeFrom(const get_contract_args_size_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_contract_args_size_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_contract_args_size_args";
  }
  protected:
  explicit get_contract_args_size_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.get_contract_args_size_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_contract_args_size_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_contract_args_size_return) */ {
 public:
  inline get_contract_args_size_return() : get_contract_args_size_return(nullptr) {}
  virtual ~get_contract_args_size_return();

  get_contract_args_size_return(const get_contract_args_size_return& from);
  get_contract_args_size_return(get_contract_args_size_return&& from) noexcept
    : get_contract_args_size_return() {
    *this = ::std::move(from);
  }

  inline get_contract_args_size_return& operator=(const get_contract_args_size_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_contract_args_size_return& operator=(get_contract_args_size_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_contract_args_size_return& default_instance();

  static inline const get_contract_args_size_return* internal_default_instance() {
    return reinterpret_cast<const get_contract_args_size_return*>(
               &_get_contract_args_size_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(get_contract_args_size_return& a, get_contract_args_size_return& b) {
    a.Swap(&b);
  }
  inline void Swap(get_contract_args_size_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_contract_args_size_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_contract_args_size_return* New() const final {
    return CreateMaybeMessage<get_contract_args_size_return>(nullptr);
  }

  get_contract_args_size_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_contract_args_size_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_contract_args_size_return& from);
  void MergeFrom(const get_contract_args_size_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_contract_args_size_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_contract_args_size_return";
  }
  protected:
  explicit get_contract_args_size_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.get_contract_args_size_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_contract_args_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_contract_args_args) */ {
 public:
  inline get_contract_args_args() : get_contract_args_args(nullptr) {}
  virtual ~get_contract_args_args();

  get_contract_args_args(const get_contract_args_args& from);
  get_contract_args_args(get_contract_args_args&& from) noexcept
    : get_contract_args_args() {
    *this = ::std::move(from);
  }

  inline get_contract_args_args& operator=(const get_contract_args_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_contract_args_args& operator=(get_contract_args_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_contract_args_args& default_instance();

  static inline const get_contract_args_args* internal_default_instance() {
    return reinterpret_cast<const get_contract_args_args*>(
               &_get_contract_args_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(get_contract_args_args& a, get_contract_args_args& b) {
    a.Swap(&b);
  }
  inline void Swap(get_contract_args_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_contract_args_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_contract_args_args* New() const final {
    return CreateMaybeMessage<get_contract_args_args>(nullptr);
  }

  get_contract_args_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_contract_args_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_contract_args_args& from);
  void MergeFrom(const get_contract_args_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_contract_args_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_contract_args_args";
  }
  protected:
  explicit get_contract_args_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.get_contract_args_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_contract_args_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_contract_args_return) */ {
 public:
  inline get_contract_args_return() : get_contract_args_return(nullptr) {}
  virtual ~get_contract_args_return();

  get_contract_args_return(const get_contract_args_return& from);
  get_contract_args_return(get_contract_args_return&& from) noexcept
    : get_contract_args_return() {
    *this = ::std::move(from);
  }

  inline get_contract_args_return& operator=(const get_contract_args_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_contract_args_return& operator=(get_contract_args_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_contract_args_return& default_instance();

  static inline const get_contract_args_return* internal_default_instance() {
    return reinterpret_cast<const get_contract_args_return*>(
               &_get_contract_args_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(get_contract_args_return& a, get_contract_args_return& b) {
    a.Swap(&b);
  }
  inline void Swap(get_contract_args_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_contract_args_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_contract_args_return* New() const final {
    return CreateMaybeMessage<get_contract_args_return>(nullptr);
  }

  get_contract_args_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_contract_args_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_contract_args_return& from);
  void MergeFrom(const get_contract_args_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_contract_args_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_contract_args_return";
  }
  protected:
  explicit get_contract_args_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.get_contract_args_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class set_contract_return_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.set_contract_return_args) */ {
 public:
  inline set_contract_return_args() : set_contract_return_args(nullptr) {}
  virtual ~set_contract_return_args();

  set_contract_return_args(const set_contract_return_args& from);
  set_contract_return_args(set_contract_return_args&& from) noexcept
    : set_contract_return_args() {
    *this = ::std::move(from);
  }

  inline set_contract_return_args& operator=(const set_contract_return_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_contract_return_args& operator=(set_contract_return_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const set_contract_return_args& default_instance();

  static inline const set_contract_return_args* internal_default_instance() {
    return reinterpret_cast<const set_contract_return_args*>(
               &_set_contract_return_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(set_contract_return_args& a, set_contract_return_args& b) {
    a.Swap(&b);
  }
  inline void Swap(set_contract_return_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_contract_return_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_contract_return_args* New() const final {
    return CreateMaybeMessage<set_contract_return_args>(nullptr);
  }

  set_contract_return_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_contract_return_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const set_contract_return_args& from);
  void MergeFrom(const set_contract_return_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_contract_return_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.set_contract_return_args";
  }
  protected:
  explicit set_contract_return_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.set_contract_return_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class set_contract_return_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.set_contract_return_return) */ {
 public:
  inline set_contract_return_return() : set_contract_return_return(nullptr) {}
  virtual ~set_contract_return_return();

  set_contract_return_return(const set_contract_return_return& from);
  set_contract_return_return(set_contract_return_return&& from) noexcept
    : set_contract_return_return() {
    *this = ::std::move(from);
  }

  inline set_contract_return_return& operator=(const set_contract_return_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline set_contract_return_return& operator=(set_contract_return_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const set_contract_return_return& default_instance();

  static inline const set_contract_return_return* internal_default_instance() {
    return reinterpret_cast<const set_contract_return_return*>(
               &_set_contract_return_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(set_contract_return_return& a, set_contract_return_return& b) {
    a.Swap(&b);
  }
  inline void Swap(set_contract_return_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set_contract_return_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline set_contract_return_return* New() const final {
    return CreateMaybeMessage<set_contract_return_return>(nullptr);
  }

  set_contract_return_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<set_contract_return_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const set_contract_return_return& from);
  void MergeFrom(const set_contract_return_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set_contract_return_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.set_contract_return_return";
  }
  protected:
  explicit set_contract_return_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.set_contract_return_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class exit_contract_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.exit_contract_args) */ {
 public:
  inline exit_contract_args() : exit_contract_args(nullptr) {}
  virtual ~exit_contract_args();

  exit_contract_args(const exit_contract_args& from);
  exit_contract_args(exit_contract_args&& from) noexcept
    : exit_contract_args() {
    *this = ::std::move(from);
  }

  inline exit_contract_args& operator=(const exit_contract_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline exit_contract_args& operator=(exit_contract_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const exit_contract_args& default_instance();

  static inline const exit_contract_args* internal_default_instance() {
    return reinterpret_cast<const exit_contract_args*>(
               &_exit_contract_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(exit_contract_args& a, exit_contract_args& b) {
    a.Swap(&b);
  }
  inline void Swap(exit_contract_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(exit_contract_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline exit_contract_args* New() const final {
    return CreateMaybeMessage<exit_contract_args>(nullptr);
  }

  exit_contract_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<exit_contract_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const exit_contract_args& from);
  void MergeFrom(const exit_contract_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(exit_contract_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.exit_contract_args";
  }
  protected:
  explicit exit_contract_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExitCodeFieldNumber = 1,
  };
  // uint32 exit_code = 1;
  void clear_exit_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_code() const;
  void set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exit_code() const;
  void _internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.exit_contract_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exit_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class exit_contract_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.exit_contract_return) */ {
 public:
  inline exit_contract_return() : exit_contract_return(nullptr) {}
  virtual ~exit_contract_return();

  exit_contract_return(const exit_contract_return& from);
  exit_contract_return(exit_contract_return&& from) noexcept
    : exit_contract_return() {
    *this = ::std::move(from);
  }

  inline exit_contract_return& operator=(const exit_contract_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline exit_contract_return& operator=(exit_contract_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const exit_contract_return& default_instance();

  static inline const exit_contract_return* internal_default_instance() {
    return reinterpret_cast<const exit_contract_return*>(
               &_exit_contract_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(exit_contract_return& a, exit_contract_return& b) {
    a.Swap(&b);
  }
  inline void Swap(exit_contract_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(exit_contract_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline exit_contract_return* New() const final {
    return CreateMaybeMessage<exit_contract_return>(nullptr);
  }

  exit_contract_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<exit_contract_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const exit_contract_return& from);
  void MergeFrom(const exit_contract_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(exit_contract_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.exit_contract_return";
  }
  protected:
  explicit exit_contract_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.exit_contract_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_head_info_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_head_info_args) */ {
 public:
  inline get_head_info_args() : get_head_info_args(nullptr) {}
  virtual ~get_head_info_args();

  get_head_info_args(const get_head_info_args& from);
  get_head_info_args(get_head_info_args&& from) noexcept
    : get_head_info_args() {
    *this = ::std::move(from);
  }

  inline get_head_info_args& operator=(const get_head_info_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_head_info_args& operator=(get_head_info_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_head_info_args& default_instance();

  static inline const get_head_info_args* internal_default_instance() {
    return reinterpret_cast<const get_head_info_args*>(
               &_get_head_info_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(get_head_info_args& a, get_head_info_args& b) {
    a.Swap(&b);
  }
  inline void Swap(get_head_info_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_head_info_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_head_info_args* New() const final {
    return CreateMaybeMessage<get_head_info_args>(nullptr);
  }

  get_head_info_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_head_info_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_head_info_args& from);
  void MergeFrom(const get_head_info_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_head_info_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_head_info_args";
  }
  protected:
  explicit get_head_info_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.get_head_info_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_head_info_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_head_info_return) */ {
 public:
  inline get_head_info_return() : get_head_info_return(nullptr) {}
  virtual ~get_head_info_return();

  get_head_info_return(const get_head_info_return& from);
  get_head_info_return(get_head_info_return&& from) noexcept
    : get_head_info_return() {
    *this = ::std::move(from);
  }

  inline get_head_info_return& operator=(const get_head_info_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_head_info_return& operator=(get_head_info_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_head_info_return& default_instance();

  static inline const get_head_info_return* internal_default_instance() {
    return reinterpret_cast<const get_head_info_return*>(
               &_get_head_info_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(get_head_info_return& a, get_head_info_return& b) {
    a.Swap(&b);
  }
  inline void Swap(get_head_info_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_head_info_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_head_info_return* New() const final {
    return CreateMaybeMessage<get_head_info_return>(nullptr);
  }

  get_head_info_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_head_info_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_head_info_return& from);
  void MergeFrom(const get_head_info_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_head_info_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_head_info_return";
  }
  protected:
  explicit get_head_info_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .koinos.chain.head_info value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::koinos::chain::head_info& value() const;
  ::koinos::chain::head_info* release_value();
  ::koinos::chain::head_info* mutable_value();
  void set_allocated_value(::koinos::chain::head_info* value);
  private:
  const ::koinos::chain::head_info& _internal_value() const;
  ::koinos::chain::head_info* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::koinos::chain::head_info* value);
  ::koinos::chain::head_info* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:koinos.chain.get_head_info_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::chain::head_info* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class hash_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.hash_args) */ {
 public:
  inline hash_args() : hash_args(nullptr) {}
  virtual ~hash_args();

  hash_args(const hash_args& from);
  hash_args(hash_args&& from) noexcept
    : hash_args() {
    *this = ::std::move(from);
  }

  inline hash_args& operator=(const hash_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline hash_args& operator=(hash_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const hash_args& default_instance();

  static inline const hash_args* internal_default_instance() {
    return reinterpret_cast<const hash_args*>(
               &_hash_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(hash_args& a, hash_args& b) {
    a.Swap(&b);
  }
  inline void Swap(hash_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hash_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline hash_args* New() const final {
    return CreateMaybeMessage<hash_args>(nullptr);
  }

  hash_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<hash_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const hash_args& from);
  void MergeFrom(const hash_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hash_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.hash_args";
  }
  protected:
  explicit hash_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjFieldNumber = 2,
    kCodeFieldNumber = 1,
    kSizeFieldNumber = 3,
  };
  // bytes obj = 2;
  void clear_obj();
  const std::string& obj() const;
  void set_obj(const std::string& value);
  void set_obj(std::string&& value);
  void set_obj(const char* value);
  void set_obj(const void* value, size_t size);
  std::string* mutable_obj();
  std::string* release_obj();
  void set_allocated_obj(std::string* obj);
  private:
  const std::string& _internal_obj() const;
  void _internal_set_obj(const std::string& value);
  std::string* _internal_mutable_obj();
  public:

  // uint64 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint64 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.hash_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_;
  ::PROTOBUF_NAMESPACE_ID::uint64 code_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class hash_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.hash_return) */ {
 public:
  inline hash_return() : hash_return(nullptr) {}
  virtual ~hash_return();

  hash_return(const hash_return& from);
  hash_return(hash_return&& from) noexcept
    : hash_return() {
    *this = ::std::move(from);
  }

  inline hash_return& operator=(const hash_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline hash_return& operator=(hash_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const hash_return& default_instance();

  static inline const hash_return* internal_default_instance() {
    return reinterpret_cast<const hash_return*>(
               &_hash_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(hash_return& a, hash_return& b) {
    a.Swap(&b);
  }
  inline void Swap(hash_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hash_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline hash_return* New() const final {
    return CreateMaybeMessage<hash_return>(nullptr);
  }

  hash_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<hash_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const hash_return& from);
  void MergeFrom(const hash_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hash_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.hash_return";
  }
  protected:
  explicit hash_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.hash_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class recover_public_key_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.recover_public_key_args) */ {
 public:
  inline recover_public_key_args() : recover_public_key_args(nullptr) {}
  virtual ~recover_public_key_args();

  recover_public_key_args(const recover_public_key_args& from);
  recover_public_key_args(recover_public_key_args&& from) noexcept
    : recover_public_key_args() {
    *this = ::std::move(from);
  }

  inline recover_public_key_args& operator=(const recover_public_key_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline recover_public_key_args& operator=(recover_public_key_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const recover_public_key_args& default_instance();

  static inline const recover_public_key_args* internal_default_instance() {
    return reinterpret_cast<const recover_public_key_args*>(
               &_recover_public_key_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(recover_public_key_args& a, recover_public_key_args& b) {
    a.Swap(&b);
  }
  inline void Swap(recover_public_key_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(recover_public_key_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline recover_public_key_args* New() const final {
    return CreateMaybeMessage<recover_public_key_args>(nullptr);
  }

  recover_public_key_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<recover_public_key_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const recover_public_key_args& from);
  void MergeFrom(const recover_public_key_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recover_public_key_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.recover_public_key_args";
  }
  protected:
  explicit recover_public_key_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureDataFieldNumber = 1,
    kDigestFieldNumber = 2,
  };
  // bytes signature_data = 1;
  void clear_signature_data();
  const std::string& signature_data() const;
  void set_signature_data(const std::string& value);
  void set_signature_data(std::string&& value);
  void set_signature_data(const char* value);
  void set_signature_data(const void* value, size_t size);
  std::string* mutable_signature_data();
  std::string* release_signature_data();
  void set_allocated_signature_data(std::string* signature_data);
  private:
  const std::string& _internal_signature_data() const;
  void _internal_set_signature_data(const std::string& value);
  std::string* _internal_mutable_signature_data();
  public:

  // bytes digest = 2;
  void clear_digest();
  const std::string& digest() const;
  void set_digest(const std::string& value);
  void set_digest(std::string&& value);
  void set_digest(const char* value);
  void set_digest(const void* value, size_t size);
  std::string* mutable_digest();
  std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.recover_public_key_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class recover_public_key_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.recover_public_key_return) */ {
 public:
  inline recover_public_key_return() : recover_public_key_return(nullptr) {}
  virtual ~recover_public_key_return();

  recover_public_key_return(const recover_public_key_return& from);
  recover_public_key_return(recover_public_key_return&& from) noexcept
    : recover_public_key_return() {
    *this = ::std::move(from);
  }

  inline recover_public_key_return& operator=(const recover_public_key_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline recover_public_key_return& operator=(recover_public_key_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const recover_public_key_return& default_instance();

  static inline const recover_public_key_return* internal_default_instance() {
    return reinterpret_cast<const recover_public_key_return*>(
               &_recover_public_key_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(recover_public_key_return& a, recover_public_key_return& b) {
    a.Swap(&b);
  }
  inline void Swap(recover_public_key_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(recover_public_key_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline recover_public_key_return* New() const final {
    return CreateMaybeMessage<recover_public_key_return>(nullptr);
  }

  recover_public_key_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<recover_public_key_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const recover_public_key_return& from);
  void MergeFrom(const recover_public_key_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recover_public_key_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.recover_public_key_return";
  }
  protected:
  explicit recover_public_key_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.recover_public_key_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_transaction_payer_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_transaction_payer_args) */ {
 public:
  inline get_transaction_payer_args() : get_transaction_payer_args(nullptr) {}
  virtual ~get_transaction_payer_args();

  get_transaction_payer_args(const get_transaction_payer_args& from);
  get_transaction_payer_args(get_transaction_payer_args&& from) noexcept
    : get_transaction_payer_args() {
    *this = ::std::move(from);
  }

  inline get_transaction_payer_args& operator=(const get_transaction_payer_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_transaction_payer_args& operator=(get_transaction_payer_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_transaction_payer_args& default_instance();

  static inline const get_transaction_payer_args* internal_default_instance() {
    return reinterpret_cast<const get_transaction_payer_args*>(
               &_get_transaction_payer_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(get_transaction_payer_args& a, get_transaction_payer_args& b) {
    a.Swap(&b);
  }
  inline void Swap(get_transaction_payer_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_transaction_payer_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_transaction_payer_args* New() const final {
    return CreateMaybeMessage<get_transaction_payer_args>(nullptr);
  }

  get_transaction_payer_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_transaction_payer_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_transaction_payer_args& from);
  void MergeFrom(const get_transaction_payer_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_transaction_payer_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_transaction_payer_args";
  }
  protected:
  explicit get_transaction_payer_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // .koinos.protocol.transaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::koinos::protocol::transaction& transaction() const;
  ::koinos::protocol::transaction* release_transaction();
  ::koinos::protocol::transaction* mutable_transaction();
  void set_allocated_transaction(::koinos::protocol::transaction* transaction);
  private:
  const ::koinos::protocol::transaction& _internal_transaction() const;
  ::koinos::protocol::transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::koinos::protocol::transaction* transaction);
  ::koinos::protocol::transaction* unsafe_arena_release_transaction();

  // @@protoc_insertion_point(class_scope:koinos.chain.get_transaction_payer_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::transaction* transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_transaction_payer_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_transaction_payer_return) */ {
 public:
  inline get_transaction_payer_return() : get_transaction_payer_return(nullptr) {}
  virtual ~get_transaction_payer_return();

  get_transaction_payer_return(const get_transaction_payer_return& from);
  get_transaction_payer_return(get_transaction_payer_return&& from) noexcept
    : get_transaction_payer_return() {
    *this = ::std::move(from);
  }

  inline get_transaction_payer_return& operator=(const get_transaction_payer_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_transaction_payer_return& operator=(get_transaction_payer_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_transaction_payer_return& default_instance();

  static inline const get_transaction_payer_return* internal_default_instance() {
    return reinterpret_cast<const get_transaction_payer_return*>(
               &_get_transaction_payer_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(get_transaction_payer_return& a, get_transaction_payer_return& b) {
    a.Swap(&b);
  }
  inline void Swap(get_transaction_payer_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_transaction_payer_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_transaction_payer_return* New() const final {
    return CreateMaybeMessage<get_transaction_payer_return>(nullptr);
  }

  get_transaction_payer_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_transaction_payer_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_transaction_payer_return& from);
  void MergeFrom(const get_transaction_payer_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_transaction_payer_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_transaction_payer_return";
  }
  protected:
  explicit get_transaction_payer_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.get_transaction_payer_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_max_account_resources_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_max_account_resources_args) */ {
 public:
  inline get_max_account_resources_args() : get_max_account_resources_args(nullptr) {}
  virtual ~get_max_account_resources_args();

  get_max_account_resources_args(const get_max_account_resources_args& from);
  get_max_account_resources_args(get_max_account_resources_args&& from) noexcept
    : get_max_account_resources_args() {
    *this = ::std::move(from);
  }

  inline get_max_account_resources_args& operator=(const get_max_account_resources_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_max_account_resources_args& operator=(get_max_account_resources_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_max_account_resources_args& default_instance();

  static inline const get_max_account_resources_args* internal_default_instance() {
    return reinterpret_cast<const get_max_account_resources_args*>(
               &_get_max_account_resources_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(get_max_account_resources_args& a, get_max_account_resources_args& b) {
    a.Swap(&b);
  }
  inline void Swap(get_max_account_resources_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_max_account_resources_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_max_account_resources_args* New() const final {
    return CreateMaybeMessage<get_max_account_resources_args>(nullptr);
  }

  get_max_account_resources_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_max_account_resources_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_max_account_resources_args& from);
  void MergeFrom(const get_max_account_resources_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_max_account_resources_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_max_account_resources_args";
  }
  protected:
  explicit get_max_account_resources_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.get_max_account_resources_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_max_account_resources_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_max_account_resources_return) */ {
 public:
  inline get_max_account_resources_return() : get_max_account_resources_return(nullptr) {}
  virtual ~get_max_account_resources_return();

  get_max_account_resources_return(const get_max_account_resources_return& from);
  get_max_account_resources_return(get_max_account_resources_return&& from) noexcept
    : get_max_account_resources_return() {
    *this = ::std::move(from);
  }

  inline get_max_account_resources_return& operator=(const get_max_account_resources_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_max_account_resources_return& operator=(get_max_account_resources_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_max_account_resources_return& default_instance();

  static inline const get_max_account_resources_return* internal_default_instance() {
    return reinterpret_cast<const get_max_account_resources_return*>(
               &_get_max_account_resources_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(get_max_account_resources_return& a, get_max_account_resources_return& b) {
    a.Swap(&b);
  }
  inline void Swap(get_max_account_resources_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_max_account_resources_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_max_account_resources_return* New() const final {
    return CreateMaybeMessage<get_max_account_resources_return>(nullptr);
  }

  get_max_account_resources_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_max_account_resources_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_max_account_resources_return& from);
  void MergeFrom(const get_max_account_resources_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_max_account_resources_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_max_account_resources_return";
  }
  protected:
  explicit get_max_account_resources_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.get_max_account_resources_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_transaction_resource_limit_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_transaction_resource_limit_args) */ {
 public:
  inline get_transaction_resource_limit_args() : get_transaction_resource_limit_args(nullptr) {}
  virtual ~get_transaction_resource_limit_args();

  get_transaction_resource_limit_args(const get_transaction_resource_limit_args& from);
  get_transaction_resource_limit_args(get_transaction_resource_limit_args&& from) noexcept
    : get_transaction_resource_limit_args() {
    *this = ::std::move(from);
  }

  inline get_transaction_resource_limit_args& operator=(const get_transaction_resource_limit_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_transaction_resource_limit_args& operator=(get_transaction_resource_limit_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_transaction_resource_limit_args& default_instance();

  static inline const get_transaction_resource_limit_args* internal_default_instance() {
    return reinterpret_cast<const get_transaction_resource_limit_args*>(
               &_get_transaction_resource_limit_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(get_transaction_resource_limit_args& a, get_transaction_resource_limit_args& b) {
    a.Swap(&b);
  }
  inline void Swap(get_transaction_resource_limit_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_transaction_resource_limit_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_transaction_resource_limit_args* New() const final {
    return CreateMaybeMessage<get_transaction_resource_limit_args>(nullptr);
  }

  get_transaction_resource_limit_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_transaction_resource_limit_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_transaction_resource_limit_args& from);
  void MergeFrom(const get_transaction_resource_limit_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_transaction_resource_limit_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_transaction_resource_limit_args";
  }
  protected:
  explicit get_transaction_resource_limit_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransctionFieldNumber = 1,
  };
  // .koinos.protocol.transaction transction = 1;
  bool has_transction() const;
  private:
  bool _internal_has_transction() const;
  public:
  void clear_transction();
  const ::koinos::protocol::transaction& transction() const;
  ::koinos::protocol::transaction* release_transction();
  ::koinos::protocol::transaction* mutable_transction();
  void set_allocated_transction(::koinos::protocol::transaction* transction);
  private:
  const ::koinos::protocol::transaction& _internal_transction() const;
  ::koinos::protocol::transaction* _internal_mutable_transction();
  public:
  void unsafe_arena_set_allocated_transction(
      ::koinos::protocol::transaction* transction);
  ::koinos::protocol::transaction* unsafe_arena_release_transction();

  // @@protoc_insertion_point(class_scope:koinos.chain.get_transaction_resource_limit_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::protocol::transaction* transction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_transaction_resource_limit_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_transaction_resource_limit_return) */ {
 public:
  inline get_transaction_resource_limit_return() : get_transaction_resource_limit_return(nullptr) {}
  virtual ~get_transaction_resource_limit_return();

  get_transaction_resource_limit_return(const get_transaction_resource_limit_return& from);
  get_transaction_resource_limit_return(get_transaction_resource_limit_return&& from) noexcept
    : get_transaction_resource_limit_return() {
    *this = ::std::move(from);
  }

  inline get_transaction_resource_limit_return& operator=(const get_transaction_resource_limit_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_transaction_resource_limit_return& operator=(get_transaction_resource_limit_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_transaction_resource_limit_return& default_instance();

  static inline const get_transaction_resource_limit_return* internal_default_instance() {
    return reinterpret_cast<const get_transaction_resource_limit_return*>(
               &_get_transaction_resource_limit_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(get_transaction_resource_limit_return& a, get_transaction_resource_limit_return& b) {
    a.Swap(&b);
  }
  inline void Swap(get_transaction_resource_limit_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_transaction_resource_limit_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_transaction_resource_limit_return* New() const final {
    return CreateMaybeMessage<get_transaction_resource_limit_return>(nullptr);
  }

  get_transaction_resource_limit_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_transaction_resource_limit_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_transaction_resource_limit_return& from);
  void MergeFrom(const get_transaction_resource_limit_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_transaction_resource_limit_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_transaction_resource_limit_return";
  }
  protected:
  explicit get_transaction_resource_limit_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.get_transaction_resource_limit_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_last_irreversible_block_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_last_irreversible_block_args) */ {
 public:
  inline get_last_irreversible_block_args() : get_last_irreversible_block_args(nullptr) {}
  virtual ~get_last_irreversible_block_args();

  get_last_irreversible_block_args(const get_last_irreversible_block_args& from);
  get_last_irreversible_block_args(get_last_irreversible_block_args&& from) noexcept
    : get_last_irreversible_block_args() {
    *this = ::std::move(from);
  }

  inline get_last_irreversible_block_args& operator=(const get_last_irreversible_block_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_last_irreversible_block_args& operator=(get_last_irreversible_block_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_last_irreversible_block_args& default_instance();

  static inline const get_last_irreversible_block_args* internal_default_instance() {
    return reinterpret_cast<const get_last_irreversible_block_args*>(
               &_get_last_irreversible_block_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(get_last_irreversible_block_args& a, get_last_irreversible_block_args& b) {
    a.Swap(&b);
  }
  inline void Swap(get_last_irreversible_block_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_last_irreversible_block_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_last_irreversible_block_args* New() const final {
    return CreateMaybeMessage<get_last_irreversible_block_args>(nullptr);
  }

  get_last_irreversible_block_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_last_irreversible_block_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_last_irreversible_block_args& from);
  void MergeFrom(const get_last_irreversible_block_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_last_irreversible_block_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_last_irreversible_block_args";
  }
  protected:
  explicit get_last_irreversible_block_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.get_last_irreversible_block_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_last_irreversible_block_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_last_irreversible_block_return) */ {
 public:
  inline get_last_irreversible_block_return() : get_last_irreversible_block_return(nullptr) {}
  virtual ~get_last_irreversible_block_return();

  get_last_irreversible_block_return(const get_last_irreversible_block_return& from);
  get_last_irreversible_block_return(get_last_irreversible_block_return&& from) noexcept
    : get_last_irreversible_block_return() {
    *this = ::std::move(from);
  }

  inline get_last_irreversible_block_return& operator=(const get_last_irreversible_block_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_last_irreversible_block_return& operator=(get_last_irreversible_block_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_last_irreversible_block_return& default_instance();

  static inline const get_last_irreversible_block_return* internal_default_instance() {
    return reinterpret_cast<const get_last_irreversible_block_return*>(
               &_get_last_irreversible_block_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(get_last_irreversible_block_return& a, get_last_irreversible_block_return& b) {
    a.Swap(&b);
  }
  inline void Swap(get_last_irreversible_block_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_last_irreversible_block_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_last_irreversible_block_return* New() const final {
    return CreateMaybeMessage<get_last_irreversible_block_return>(nullptr);
  }

  get_last_irreversible_block_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_last_irreversible_block_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_last_irreversible_block_return& from);
  void MergeFrom(const get_last_irreversible_block_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_last_irreversible_block_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_last_irreversible_block_return";
  }
  protected:
  explicit get_last_irreversible_block_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // .koinos.block_topology value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::koinos::block_topology& value() const;
  ::koinos::block_topology* release_value();
  ::koinos::block_topology* mutable_value();
  void set_allocated_value(::koinos::block_topology* value);
  private:
  const ::koinos::block_topology& _internal_value() const;
  ::koinos::block_topology* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::koinos::block_topology* value);
  ::koinos::block_topology* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:koinos.chain.get_last_irreversible_block_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::koinos::block_topology* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_caller_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_caller_args) */ {
 public:
  inline get_caller_args() : get_caller_args(nullptr) {}
  virtual ~get_caller_args();

  get_caller_args(const get_caller_args& from);
  get_caller_args(get_caller_args&& from) noexcept
    : get_caller_args() {
    *this = ::std::move(from);
  }

  inline get_caller_args& operator=(const get_caller_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_caller_args& operator=(get_caller_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_caller_args& default_instance();

  static inline const get_caller_args* internal_default_instance() {
    return reinterpret_cast<const get_caller_args*>(
               &_get_caller_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(get_caller_args& a, get_caller_args& b) {
    a.Swap(&b);
  }
  inline void Swap(get_caller_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_caller_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_caller_args* New() const final {
    return CreateMaybeMessage<get_caller_args>(nullptr);
  }

  get_caller_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_caller_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_caller_args& from);
  void MergeFrom(const get_caller_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_caller_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_caller_args";
  }
  protected:
  explicit get_caller_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.get_caller_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_caller_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_caller_return) */ {
 public:
  inline get_caller_return() : get_caller_return(nullptr) {}
  virtual ~get_caller_return();

  get_caller_return(const get_caller_return& from);
  get_caller_return(get_caller_return&& from) noexcept
    : get_caller_return() {
    *this = ::std::move(from);
  }

  inline get_caller_return& operator=(const get_caller_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_caller_return& operator=(get_caller_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_caller_return& default_instance();

  static inline const get_caller_return* internal_default_instance() {
    return reinterpret_cast<const get_caller_return*>(
               &_get_caller_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(get_caller_return& a, get_caller_return& b) {
    a.Swap(&b);
  }
  inline void Swap(get_caller_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_caller_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_caller_return* New() const final {
    return CreateMaybeMessage<get_caller_return>(nullptr);
  }

  get_caller_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_caller_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_caller_return& from);
  void MergeFrom(const get_caller_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_caller_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_caller_return";
  }
  protected:
  explicit get_caller_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallerFieldNumber = 1,
    kCallerPrivilegeFieldNumber = 2,
  };
  // bytes caller = 1;
  void clear_caller();
  const std::string& caller() const;
  void set_caller(const std::string& value);
  void set_caller(std::string&& value);
  void set_caller(const char* value);
  void set_caller(const void* value, size_t size);
  std::string* mutable_caller();
  std::string* release_caller();
  void set_allocated_caller(std::string* caller);
  private:
  const std::string& _internal_caller() const;
  void _internal_set_caller(const std::string& value);
  std::string* _internal_mutable_caller();
  public:

  // .koinos.chain.privilege caller_privilege = 2;
  void clear_caller_privilege();
  ::koinos::chain::privilege caller_privilege() const;
  void set_caller_privilege(::koinos::chain::privilege value);
  private:
  ::koinos::chain::privilege _internal_caller_privilege() const;
  void _internal_set_caller_privilege(::koinos::chain::privilege value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.get_caller_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caller_;
  int caller_privilege_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class require_authority_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.require_authority_args) */ {
 public:
  inline require_authority_args() : require_authority_args(nullptr) {}
  virtual ~require_authority_args();

  require_authority_args(const require_authority_args& from);
  require_authority_args(require_authority_args&& from) noexcept
    : require_authority_args() {
    *this = ::std::move(from);
  }

  inline require_authority_args& operator=(const require_authority_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline require_authority_args& operator=(require_authority_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const require_authority_args& default_instance();

  static inline const require_authority_args* internal_default_instance() {
    return reinterpret_cast<const require_authority_args*>(
               &_require_authority_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(require_authority_args& a, require_authority_args& b) {
    a.Swap(&b);
  }
  inline void Swap(require_authority_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(require_authority_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline require_authority_args* New() const final {
    return CreateMaybeMessage<require_authority_args>(nullptr);
  }

  require_authority_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<require_authority_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const require_authority_args& from);
  void MergeFrom(const require_authority_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(require_authority_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.require_authority_args";
  }
  protected:
  explicit require_authority_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.require_authority_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class require_authority_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.require_authority_return) */ {
 public:
  inline require_authority_return() : require_authority_return(nullptr) {}
  virtual ~require_authority_return();

  require_authority_return(const require_authority_return& from);
  require_authority_return(require_authority_return&& from) noexcept
    : require_authority_return() {
    *this = ::std::move(from);
  }

  inline require_authority_return& operator=(const require_authority_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline require_authority_return& operator=(require_authority_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const require_authority_return& default_instance();

  static inline const require_authority_return* internal_default_instance() {
    return reinterpret_cast<const require_authority_return*>(
               &_require_authority_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(require_authority_return& a, require_authority_return& b) {
    a.Swap(&b);
  }
  inline void Swap(require_authority_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(require_authority_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline require_authority_return* New() const final {
    return CreateMaybeMessage<require_authority_return>(nullptr);
  }

  require_authority_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<require_authority_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const require_authority_return& from);
  void MergeFrom(const require_authority_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(require_authority_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.require_authority_return";
  }
  protected:
  explicit require_authority_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.require_authority_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_transaction_signature_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_transaction_signature_args) */ {
 public:
  inline get_transaction_signature_args() : get_transaction_signature_args(nullptr) {}
  virtual ~get_transaction_signature_args();

  get_transaction_signature_args(const get_transaction_signature_args& from);
  get_transaction_signature_args(get_transaction_signature_args&& from) noexcept
    : get_transaction_signature_args() {
    *this = ::std::move(from);
  }

  inline get_transaction_signature_args& operator=(const get_transaction_signature_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_transaction_signature_args& operator=(get_transaction_signature_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_transaction_signature_args& default_instance();

  static inline const get_transaction_signature_args* internal_default_instance() {
    return reinterpret_cast<const get_transaction_signature_args*>(
               &_get_transaction_signature_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(get_transaction_signature_args& a, get_transaction_signature_args& b) {
    a.Swap(&b);
  }
  inline void Swap(get_transaction_signature_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_transaction_signature_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_transaction_signature_args* New() const final {
    return CreateMaybeMessage<get_transaction_signature_args>(nullptr);
  }

  get_transaction_signature_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_transaction_signature_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_transaction_signature_args& from);
  void MergeFrom(const get_transaction_signature_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_transaction_signature_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_transaction_signature_args";
  }
  protected:
  explicit get_transaction_signature_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.get_transaction_signature_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_transaction_signature_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_transaction_signature_return) */ {
 public:
  inline get_transaction_signature_return() : get_transaction_signature_return(nullptr) {}
  virtual ~get_transaction_signature_return();

  get_transaction_signature_return(const get_transaction_signature_return& from);
  get_transaction_signature_return(get_transaction_signature_return&& from) noexcept
    : get_transaction_signature_return() {
    *this = ::std::move(from);
  }

  inline get_transaction_signature_return& operator=(const get_transaction_signature_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_transaction_signature_return& operator=(get_transaction_signature_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_transaction_signature_return& default_instance();

  static inline const get_transaction_signature_return* internal_default_instance() {
    return reinterpret_cast<const get_transaction_signature_return*>(
               &_get_transaction_signature_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(get_transaction_signature_return& a, get_transaction_signature_return& b) {
    a.Swap(&b);
  }
  inline void Swap(get_transaction_signature_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_transaction_signature_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_transaction_signature_return* New() const final {
    return CreateMaybeMessage<get_transaction_signature_return>(nullptr);
  }

  get_transaction_signature_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_transaction_signature_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_transaction_signature_return& from);
  void MergeFrom(const get_transaction_signature_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_transaction_signature_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_transaction_signature_return";
  }
  protected:
  explicit get_transaction_signature_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.get_transaction_signature_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_contract_id_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_contract_id_args) */ {
 public:
  inline get_contract_id_args() : get_contract_id_args(nullptr) {}
  virtual ~get_contract_id_args();

  get_contract_id_args(const get_contract_id_args& from);
  get_contract_id_args(get_contract_id_args&& from) noexcept
    : get_contract_id_args() {
    *this = ::std::move(from);
  }

  inline get_contract_id_args& operator=(const get_contract_id_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_contract_id_args& operator=(get_contract_id_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_contract_id_args& default_instance();

  static inline const get_contract_id_args* internal_default_instance() {
    return reinterpret_cast<const get_contract_id_args*>(
               &_get_contract_id_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(get_contract_id_args& a, get_contract_id_args& b) {
    a.Swap(&b);
  }
  inline void Swap(get_contract_id_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_contract_id_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_contract_id_args* New() const final {
    return CreateMaybeMessage<get_contract_id_args>(nullptr);
  }

  get_contract_id_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_contract_id_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_contract_id_args& from);
  void MergeFrom(const get_contract_id_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_contract_id_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_contract_id_args";
  }
  protected:
  explicit get_contract_id_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:koinos.chain.get_contract_id_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_contract_id_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_contract_id_return) */ {
 public:
  inline get_contract_id_return() : get_contract_id_return(nullptr) {}
  virtual ~get_contract_id_return();

  get_contract_id_return(const get_contract_id_return& from);
  get_contract_id_return(get_contract_id_return&& from) noexcept
    : get_contract_id_return() {
    *this = ::std::move(from);
  }

  inline get_contract_id_return& operator=(const get_contract_id_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_contract_id_return& operator=(get_contract_id_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_contract_id_return& default_instance();

  static inline const get_contract_id_return* internal_default_instance() {
    return reinterpret_cast<const get_contract_id_return*>(
               &_get_contract_id_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(get_contract_id_return& a, get_contract_id_return& b) {
    a.Swap(&b);
  }
  inline void Swap(get_contract_id_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_contract_id_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_contract_id_return* New() const final {
    return CreateMaybeMessage<get_contract_id_return>(nullptr);
  }

  get_contract_id_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_contract_id_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_contract_id_return& from);
  void MergeFrom(const get_contract_id_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_contract_id_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_contract_id_return";
  }
  protected:
  explicit get_contract_id_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.get_contract_id_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_account_nonce_args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_account_nonce_args) */ {
 public:
  inline get_account_nonce_args() : get_account_nonce_args(nullptr) {}
  virtual ~get_account_nonce_args();

  get_account_nonce_args(const get_account_nonce_args& from);
  get_account_nonce_args(get_account_nonce_args&& from) noexcept
    : get_account_nonce_args() {
    *this = ::std::move(from);
  }

  inline get_account_nonce_args& operator=(const get_account_nonce_args& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_account_nonce_args& operator=(get_account_nonce_args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_account_nonce_args& default_instance();

  static inline const get_account_nonce_args* internal_default_instance() {
    return reinterpret_cast<const get_account_nonce_args*>(
               &_get_account_nonce_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(get_account_nonce_args& a, get_account_nonce_args& b) {
    a.Swap(&b);
  }
  inline void Swap(get_account_nonce_args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_account_nonce_args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_account_nonce_args* New() const final {
    return CreateMaybeMessage<get_account_nonce_args>(nullptr);
  }

  get_account_nonce_args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_account_nonce_args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_account_nonce_args& from);
  void MergeFrom(const get_account_nonce_args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_account_nonce_args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_account_nonce_args";
  }
  protected:
  explicit get_account_nonce_args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.get_account_nonce_args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// -------------------------------------------------------------------

class get_account_nonce_return PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:koinos.chain.get_account_nonce_return) */ {
 public:
  inline get_account_nonce_return() : get_account_nonce_return(nullptr) {}
  virtual ~get_account_nonce_return();

  get_account_nonce_return(const get_account_nonce_return& from);
  get_account_nonce_return(get_account_nonce_return&& from) noexcept
    : get_account_nonce_return() {
    *this = ::std::move(from);
  }

  inline get_account_nonce_return& operator=(const get_account_nonce_return& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_account_nonce_return& operator=(get_account_nonce_return&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_account_nonce_return& default_instance();

  static inline const get_account_nonce_return* internal_default_instance() {
    return reinterpret_cast<const get_account_nonce_return*>(
               &_get_account_nonce_return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(get_account_nonce_return& a, get_account_nonce_return& b) {
    a.Swap(&b);
  }
  inline void Swap(get_account_nonce_return* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_account_nonce_return* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_account_nonce_return* New() const final {
    return CreateMaybeMessage<get_account_nonce_return>(nullptr);
  }

  get_account_nonce_return* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_account_nonce_return>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_account_nonce_return& from);
  void MergeFrom(const get_account_nonce_return& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_account_nonce_return* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "koinos.chain.get_account_nonce_return";
  }
  protected:
  explicit get_account_nonce_return(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_koinos_2fchain_2fchain_2eproto);
    return ::descriptor_table_koinos_2fchain_2fchain_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceFieldNumber = 1,
  };
  // uint64 nonce = 1;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:koinos.chain.get_account_nonce_return)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_koinos_2fchain_2fchain_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// head_info

// .koinos.block_topology head_topology = 1;
inline bool head_info::_internal_has_head_topology() const {
  return this != internal_default_instance() && head_topology_ != nullptr;
}
inline bool head_info::has_head_topology() const {
  return _internal_has_head_topology();
}
inline const ::koinos::block_topology& head_info::_internal_head_topology() const {
  const ::koinos::block_topology* p = head_topology_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::block_topology&>(
      ::koinos::_block_topology_default_instance_);
}
inline const ::koinos::block_topology& head_info::head_topology() const {
  // @@protoc_insertion_point(field_get:koinos.chain.head_info.head_topology)
  return _internal_head_topology();
}
inline void head_info::unsafe_arena_set_allocated_head_topology(
    ::koinos::block_topology* head_topology) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_topology_);
  }
  head_topology_ = head_topology;
  if (head_topology) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.head_info.head_topology)
}
inline ::koinos::block_topology* head_info::release_head_topology() {
  
  ::koinos::block_topology* temp = head_topology_;
  head_topology_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::block_topology* head_info::unsafe_arena_release_head_topology() {
  // @@protoc_insertion_point(field_release:koinos.chain.head_info.head_topology)
  
  ::koinos::block_topology* temp = head_topology_;
  head_topology_ = nullptr;
  return temp;
}
inline ::koinos::block_topology* head_info::_internal_mutable_head_topology() {
  
  if (head_topology_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::block_topology>(GetArena());
    head_topology_ = p;
  }
  return head_topology_;
}
inline ::koinos::block_topology* head_info::mutable_head_topology() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.head_info.head_topology)
  return _internal_mutable_head_topology();
}
inline void head_info::set_allocated_head_topology(::koinos::block_topology* head_topology) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_topology_);
  }
  if (head_topology) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(head_topology)->GetArena();
    if (message_arena != submessage_arena) {
      head_topology = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head_topology, submessage_arena);
    }
    
  } else {
    
  }
  head_topology_ = head_topology;
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.head_info.head_topology)
}

// uint64 head_block_time = 2;
inline void head_info::clear_head_block_time() {
  head_block_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 head_info::_internal_head_block_time() const {
  return head_block_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 head_info::head_block_time() const {
  // @@protoc_insertion_point(field_get:koinos.chain.head_info.head_block_time)
  return _internal_head_block_time();
}
inline void head_info::_internal_set_head_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  head_block_time_ = value;
}
inline void head_info::set_head_block_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_head_block_time(value);
  // @@protoc_insertion_point(field_set:koinos.chain.head_info.head_block_time)
}

// uint64 last_irreversible_block = 3;
inline void head_info::clear_last_irreversible_block() {
  last_irreversible_block_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 head_info::_internal_last_irreversible_block() const {
  return last_irreversible_block_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 head_info::last_irreversible_block() const {
  // @@protoc_insertion_point(field_get:koinos.chain.head_info.last_irreversible_block)
  return _internal_last_irreversible_block();
}
inline void head_info::_internal_set_last_irreversible_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_irreversible_block_ = value;
}
inline void head_info::set_last_irreversible_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_irreversible_block(value);
  // @@protoc_insertion_point(field_set:koinos.chain.head_info.last_irreversible_block)
}

// -------------------------------------------------------------------

// prints_args

// string message = 1;
inline void prints_args::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& prints_args::message() const {
  // @@protoc_insertion_point(field_get:koinos.chain.prints_args.message)
  return _internal_message();
}
inline void prints_args::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:koinos.chain.prints_args.message)
}
inline std::string* prints_args::mutable_message() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.prints_args.message)
  return _internal_mutable_message();
}
inline const std::string& prints_args::_internal_message() const {
  return message_.Get();
}
inline void prints_args::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void prints_args::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.prints_args.message)
}
inline void prints_args::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.prints_args.message)
}
inline void prints_args::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.prints_args.message)
}
inline std::string* prints_args::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* prints_args::release_message() {
  // @@protoc_insertion_point(field_release:koinos.chain.prints_args.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void prints_args::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.prints_args.message)
}

// -------------------------------------------------------------------

// prints_return

// -------------------------------------------------------------------

// verify_block_signature_args

// bytes digest = 1;
inline void verify_block_signature_args::clear_digest() {
  digest_.ClearToEmpty();
}
inline const std::string& verify_block_signature_args::digest() const {
  // @@protoc_insertion_point(field_get:koinos.chain.verify_block_signature_args.digest)
  return _internal_digest();
}
inline void verify_block_signature_args::set_digest(const std::string& value) {
  _internal_set_digest(value);
  // @@protoc_insertion_point(field_set:koinos.chain.verify_block_signature_args.digest)
}
inline std::string* verify_block_signature_args::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.verify_block_signature_args.digest)
  return _internal_mutable_digest();
}
inline const std::string& verify_block_signature_args::_internal_digest() const {
  return digest_.Get();
}
inline void verify_block_signature_args::_internal_set_digest(const std::string& value) {
  
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void verify_block_signature_args::set_digest(std::string&& value) {
  
  digest_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.verify_block_signature_args.digest)
}
inline void verify_block_signature_args::set_digest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.verify_block_signature_args.digest)
}
inline void verify_block_signature_args::set_digest(const void* value,
    size_t size) {
  
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.verify_block_signature_args.digest)
}
inline std::string* verify_block_signature_args::_internal_mutable_digest() {
  
  return digest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* verify_block_signature_args::release_digest() {
  // @@protoc_insertion_point(field_release:koinos.chain.verify_block_signature_args.digest)
  return digest_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void verify_block_signature_args::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    
  } else {
    
  }
  digest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.verify_block_signature_args.digest)
}

// .koinos.protocol.active_block_data active_native = 2;
inline bool verify_block_signature_args::_internal_has_active_native() const {
  return active_data_case() == kActiveNative;
}
inline bool verify_block_signature_args::has_active_native() const {
  return _internal_has_active_native();
}
inline void verify_block_signature_args::set_has_active_native() {
  _oneof_case_[0] = kActiveNative;
}
inline ::koinos::protocol::active_block_data* verify_block_signature_args::release_active_native() {
  // @@protoc_insertion_point(field_release:koinos.chain.verify_block_signature_args.active_native)
  if (_internal_has_active_native()) {
    clear_has_active_data();
      ::koinos::protocol::active_block_data* temp = active_data_.active_native_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    active_data_.active_native_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::koinos::protocol::active_block_data& verify_block_signature_args::_internal_active_native() const {
  return _internal_has_active_native()
      ? *active_data_.active_native_
      : reinterpret_cast< ::koinos::protocol::active_block_data&>(::koinos::protocol::_active_block_data_default_instance_);
}
inline const ::koinos::protocol::active_block_data& verify_block_signature_args::active_native() const {
  // @@protoc_insertion_point(field_get:koinos.chain.verify_block_signature_args.active_native)
  return _internal_active_native();
}
inline ::koinos::protocol::active_block_data* verify_block_signature_args::unsafe_arena_release_active_native() {
  // @@protoc_insertion_point(field_unsafe_arena_release:koinos.chain.verify_block_signature_args.active_native)
  if (_internal_has_active_native()) {
    clear_has_active_data();
    ::koinos::protocol::active_block_data* temp = active_data_.active_native_;
    active_data_.active_native_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void verify_block_signature_args::unsafe_arena_set_allocated_active_native(::koinos::protocol::active_block_data* active_native) {
  clear_active_data();
  if (active_native) {
    set_has_active_native();
    active_data_.active_native_ = active_native;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.verify_block_signature_args.active_native)
}
inline ::koinos::protocol::active_block_data* verify_block_signature_args::_internal_mutable_active_native() {
  if (!_internal_has_active_native()) {
    clear_active_data();
    set_has_active_native();
    active_data_.active_native_ = CreateMaybeMessage< ::koinos::protocol::active_block_data >(GetArena());
  }
  return active_data_.active_native_;
}
inline ::koinos::protocol::active_block_data* verify_block_signature_args::mutable_active_native() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.verify_block_signature_args.active_native)
  return _internal_mutable_active_native();
}

// bytes active_blob = 3;
inline bool verify_block_signature_args::_internal_has_active_blob() const {
  return active_data_case() == kActiveBlob;
}
inline void verify_block_signature_args::set_has_active_blob() {
  _oneof_case_[0] = kActiveBlob;
}
inline void verify_block_signature_args::clear_active_blob() {
  if (_internal_has_active_blob()) {
    active_data_.active_blob_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_active_data();
  }
}
inline const std::string& verify_block_signature_args::active_blob() const {
  // @@protoc_insertion_point(field_get:koinos.chain.verify_block_signature_args.active_blob)
  return _internal_active_blob();
}
inline void verify_block_signature_args::set_active_blob(const std::string& value) {
  _internal_set_active_blob(value);
  // @@protoc_insertion_point(field_set:koinos.chain.verify_block_signature_args.active_blob)
}
inline std::string* verify_block_signature_args::mutable_active_blob() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.verify_block_signature_args.active_blob)
  return _internal_mutable_active_blob();
}
inline const std::string& verify_block_signature_args::_internal_active_blob() const {
  if (_internal_has_active_blob()) {
    return active_data_.active_blob_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void verify_block_signature_args::_internal_set_active_blob(const std::string& value) {
  if (!_internal_has_active_blob()) {
    clear_active_data();
    set_has_active_blob();
    active_data_.active_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  active_data_.active_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void verify_block_signature_args::set_active_blob(std::string&& value) {
  // @@protoc_insertion_point(field_set:koinos.chain.verify_block_signature_args.active_blob)
  if (!_internal_has_active_blob()) {
    clear_active_data();
    set_has_active_blob();
    active_data_.active_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  active_data_.active_blob_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.verify_block_signature_args.active_blob)
}
inline void verify_block_signature_args::set_active_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_active_blob()) {
    clear_active_data();
    set_has_active_blob();
    active_data_.active_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  active_data_.active_blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.verify_block_signature_args.active_blob)
}
inline void verify_block_signature_args::set_active_blob(const void* value,
                             size_t size) {
  if (!_internal_has_active_blob()) {
    clear_active_data();
    set_has_active_blob();
    active_data_.active_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  active_data_.active_blob_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.verify_block_signature_args.active_blob)
}
inline std::string* verify_block_signature_args::_internal_mutable_active_blob() {
  if (!_internal_has_active_blob()) {
    clear_active_data();
    set_has_active_blob();
    active_data_.active_blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return active_data_.active_blob_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* verify_block_signature_args::release_active_blob() {
  // @@protoc_insertion_point(field_release:koinos.chain.verify_block_signature_args.active_blob)
  if (_internal_has_active_blob()) {
    clear_has_active_data();
    return active_data_.active_blob_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void verify_block_signature_args::set_allocated_active_blob(std::string* active_blob) {
  if (has_active_data()) {
    clear_active_data();
  }
  if (active_blob != nullptr) {
    set_has_active_blob();
    active_data_.active_blob_.UnsafeSetDefault(active_blob);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(active_blob);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.verify_block_signature_args.active_blob)
}

// bytes signature_data = 4;
inline void verify_block_signature_args::clear_signature_data() {
  signature_data_.ClearToEmpty();
}
inline const std::string& verify_block_signature_args::signature_data() const {
  // @@protoc_insertion_point(field_get:koinos.chain.verify_block_signature_args.signature_data)
  return _internal_signature_data();
}
inline void verify_block_signature_args::set_signature_data(const std::string& value) {
  _internal_set_signature_data(value);
  // @@protoc_insertion_point(field_set:koinos.chain.verify_block_signature_args.signature_data)
}
inline std::string* verify_block_signature_args::mutable_signature_data() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.verify_block_signature_args.signature_data)
  return _internal_mutable_signature_data();
}
inline const std::string& verify_block_signature_args::_internal_signature_data() const {
  return signature_data_.Get();
}
inline void verify_block_signature_args::_internal_set_signature_data(const std::string& value) {
  
  signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void verify_block_signature_args::set_signature_data(std::string&& value) {
  
  signature_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.verify_block_signature_args.signature_data)
}
inline void verify_block_signature_args::set_signature_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.verify_block_signature_args.signature_data)
}
inline void verify_block_signature_args::set_signature_data(const void* value,
    size_t size) {
  
  signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.verify_block_signature_args.signature_data)
}
inline std::string* verify_block_signature_args::_internal_mutable_signature_data() {
  
  return signature_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* verify_block_signature_args::release_signature_data() {
  // @@protoc_insertion_point(field_release:koinos.chain.verify_block_signature_args.signature_data)
  return signature_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void verify_block_signature_args::set_allocated_signature_data(std::string* signature_data) {
  if (signature_data != nullptr) {
    
  } else {
    
  }
  signature_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.verify_block_signature_args.signature_data)
}

inline bool verify_block_signature_args::has_active_data() const {
  return active_data_case() != ACTIVE_DATA_NOT_SET;
}
inline void verify_block_signature_args::clear_has_active_data() {
  _oneof_case_[0] = ACTIVE_DATA_NOT_SET;
}
inline verify_block_signature_args::ActiveDataCase verify_block_signature_args::active_data_case() const {
  return verify_block_signature_args::ActiveDataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// verify_block_signature_return

// bool result = 1;
inline void verify_block_signature_return::clear_result() {
  result_ = false;
}
inline bool verify_block_signature_return::_internal_result() const {
  return result_;
}
inline bool verify_block_signature_return::result() const {
  // @@protoc_insertion_point(field_get:koinos.chain.verify_block_signature_return.result)
  return _internal_result();
}
inline void verify_block_signature_return::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void verify_block_signature_return::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:koinos.chain.verify_block_signature_return.result)
}

// -------------------------------------------------------------------

// verify_merkle_root_args

// bytes root = 1;
inline void verify_merkle_root_args::clear_root() {
  root_.ClearToEmpty();
}
inline const std::string& verify_merkle_root_args::root() const {
  // @@protoc_insertion_point(field_get:koinos.chain.verify_merkle_root_args.root)
  return _internal_root();
}
inline void verify_merkle_root_args::set_root(const std::string& value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:koinos.chain.verify_merkle_root_args.root)
}
inline std::string* verify_merkle_root_args::mutable_root() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.verify_merkle_root_args.root)
  return _internal_mutable_root();
}
inline const std::string& verify_merkle_root_args::_internal_root() const {
  return root_.Get();
}
inline void verify_merkle_root_args::_internal_set_root(const std::string& value) {
  
  root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void verify_merkle_root_args::set_root(std::string&& value) {
  
  root_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.verify_merkle_root_args.root)
}
inline void verify_merkle_root_args::set_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.verify_merkle_root_args.root)
}
inline void verify_merkle_root_args::set_root(const void* value,
    size_t size) {
  
  root_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.verify_merkle_root_args.root)
}
inline std::string* verify_merkle_root_args::_internal_mutable_root() {
  
  return root_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* verify_merkle_root_args::release_root() {
  // @@protoc_insertion_point(field_release:koinos.chain.verify_merkle_root_args.root)
  return root_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void verify_merkle_root_args::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  root_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.verify_merkle_root_args.root)
}

// repeated bytes hashes = 2;
inline int verify_merkle_root_args::_internal_hashes_size() const {
  return hashes_.size();
}
inline int verify_merkle_root_args::hashes_size() const {
  return _internal_hashes_size();
}
inline void verify_merkle_root_args::clear_hashes() {
  hashes_.Clear();
}
inline std::string* verify_merkle_root_args::add_hashes() {
  // @@protoc_insertion_point(field_add_mutable:koinos.chain.verify_merkle_root_args.hashes)
  return _internal_add_hashes();
}
inline const std::string& verify_merkle_root_args::_internal_hashes(int index) const {
  return hashes_.Get(index);
}
inline const std::string& verify_merkle_root_args::hashes(int index) const {
  // @@protoc_insertion_point(field_get:koinos.chain.verify_merkle_root_args.hashes)
  return _internal_hashes(index);
}
inline std::string* verify_merkle_root_args::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:koinos.chain.verify_merkle_root_args.hashes)
  return hashes_.Mutable(index);
}
inline void verify_merkle_root_args::set_hashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:koinos.chain.verify_merkle_root_args.hashes)
  hashes_.Mutable(index)->assign(value);
}
inline void verify_merkle_root_args::set_hashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:koinos.chain.verify_merkle_root_args.hashes)
  hashes_.Mutable(index)->assign(std::move(value));
}
inline void verify_merkle_root_args::set_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:koinos.chain.verify_merkle_root_args.hashes)
}
inline void verify_merkle_root_args::set_hashes(int index, const void* value, size_t size) {
  hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.verify_merkle_root_args.hashes)
}
inline std::string* verify_merkle_root_args::_internal_add_hashes() {
  return hashes_.Add();
}
inline void verify_merkle_root_args::add_hashes(const std::string& value) {
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:koinos.chain.verify_merkle_root_args.hashes)
}
inline void verify_merkle_root_args::add_hashes(std::string&& value) {
  hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:koinos.chain.verify_merkle_root_args.hashes)
}
inline void verify_merkle_root_args::add_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:koinos.chain.verify_merkle_root_args.hashes)
}
inline void verify_merkle_root_args::add_hashes(const void* value, size_t size) {
  hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:koinos.chain.verify_merkle_root_args.hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
verify_merkle_root_args::hashes() const {
  // @@protoc_insertion_point(field_list:koinos.chain.verify_merkle_root_args.hashes)
  return hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
verify_merkle_root_args::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:koinos.chain.verify_merkle_root_args.hashes)
  return &hashes_;
}

// -------------------------------------------------------------------

// verify_merkle_root_return

// bool result = 1;
inline void verify_merkle_root_return::clear_result() {
  result_ = false;
}
inline bool verify_merkle_root_return::_internal_result() const {
  return result_;
}
inline bool verify_merkle_root_return::result() const {
  // @@protoc_insertion_point(field_get:koinos.chain.verify_merkle_root_return.result)
  return _internal_result();
}
inline void verify_merkle_root_return::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void verify_merkle_root_return::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:koinos.chain.verify_merkle_root_return.result)
}

// -------------------------------------------------------------------

// apply_block_args

// .koinos.protocol.block block = 1;
inline bool apply_block_args::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool apply_block_args::has_block() const {
  return _internal_has_block();
}
inline const ::koinos::protocol::block& apply_block_args::_internal_block() const {
  const ::koinos::protocol::block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::block&>(
      ::koinos::protocol::_block_default_instance_);
}
inline const ::koinos::protocol::block& apply_block_args::block() const {
  // @@protoc_insertion_point(field_get:koinos.chain.apply_block_args.block)
  return _internal_block();
}
inline void apply_block_args::unsafe_arena_set_allocated_block(
    ::koinos::protocol::block* block) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.apply_block_args.block)
}
inline ::koinos::protocol::block* apply_block_args::release_block() {
  
  ::koinos::protocol::block* temp = block_;
  block_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::block* apply_block_args::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:koinos.chain.apply_block_args.block)
  
  ::koinos::protocol::block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::koinos::protocol::block* apply_block_args::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::block>(GetArena());
    block_ = p;
  }
  return block_;
}
inline ::koinos::protocol::block* apply_block_args::mutable_block() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.apply_block_args.block)
  return _internal_mutable_block();
}
inline void apply_block_args::set_allocated_block(::koinos::protocol::block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block)->GetArena();
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.apply_block_args.block)
}

// bool check_passive_data = 2;
inline void apply_block_args::clear_check_passive_data() {
  check_passive_data_ = false;
}
inline bool apply_block_args::_internal_check_passive_data() const {
  return check_passive_data_;
}
inline bool apply_block_args::check_passive_data() const {
  // @@protoc_insertion_point(field_get:koinos.chain.apply_block_args.check_passive_data)
  return _internal_check_passive_data();
}
inline void apply_block_args::_internal_set_check_passive_data(bool value) {
  
  check_passive_data_ = value;
}
inline void apply_block_args::set_check_passive_data(bool value) {
  _internal_set_check_passive_data(value);
  // @@protoc_insertion_point(field_set:koinos.chain.apply_block_args.check_passive_data)
}

// bool check_block_signature = 3;
inline void apply_block_args::clear_check_block_signature() {
  check_block_signature_ = false;
}
inline bool apply_block_args::_internal_check_block_signature() const {
  return check_block_signature_;
}
inline bool apply_block_args::check_block_signature() const {
  // @@protoc_insertion_point(field_get:koinos.chain.apply_block_args.check_block_signature)
  return _internal_check_block_signature();
}
inline void apply_block_args::_internal_set_check_block_signature(bool value) {
  
  check_block_signature_ = value;
}
inline void apply_block_args::set_check_block_signature(bool value) {
  _internal_set_check_block_signature(value);
  // @@protoc_insertion_point(field_set:koinos.chain.apply_block_args.check_block_signature)
}

// bool check_transaction_signature = 4;
inline void apply_block_args::clear_check_transaction_signature() {
  check_transaction_signature_ = false;
}
inline bool apply_block_args::_internal_check_transaction_signature() const {
  return check_transaction_signature_;
}
inline bool apply_block_args::check_transaction_signature() const {
  // @@protoc_insertion_point(field_get:koinos.chain.apply_block_args.check_transaction_signature)
  return _internal_check_transaction_signature();
}
inline void apply_block_args::_internal_set_check_transaction_signature(bool value) {
  
  check_transaction_signature_ = value;
}
inline void apply_block_args::set_check_transaction_signature(bool value) {
  _internal_set_check_transaction_signature(value);
  // @@protoc_insertion_point(field_set:koinos.chain.apply_block_args.check_transaction_signature)
}

// -------------------------------------------------------------------

// apply_block_return

// -------------------------------------------------------------------

// apply_transaction_args

// .koinos.protocol.transaction transaction = 1;
inline bool apply_transaction_args::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool apply_transaction_args::has_transaction() const {
  return _internal_has_transaction();
}
inline const ::koinos::protocol::transaction& apply_transaction_args::_internal_transaction() const {
  const ::koinos::protocol::transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::transaction&>(
      ::koinos::protocol::_transaction_default_instance_);
}
inline const ::koinos::protocol::transaction& apply_transaction_args::transaction() const {
  // @@protoc_insertion_point(field_get:koinos.chain.apply_transaction_args.transaction)
  return _internal_transaction();
}
inline void apply_transaction_args::unsafe_arena_set_allocated_transaction(
    ::koinos::protocol::transaction* transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.apply_transaction_args.transaction)
}
inline ::koinos::protocol::transaction* apply_transaction_args::release_transaction() {
  
  ::koinos::protocol::transaction* temp = transaction_;
  transaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::transaction* apply_transaction_args::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:koinos.chain.apply_transaction_args.transaction)
  
  ::koinos::protocol::transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::koinos::protocol::transaction* apply_transaction_args::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::transaction>(GetArena());
    transaction_ = p;
  }
  return transaction_;
}
inline ::koinos::protocol::transaction* apply_transaction_args::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.apply_transaction_args.transaction)
  return _internal_mutable_transaction();
}
inline void apply_transaction_args::set_allocated_transaction(::koinos::protocol::transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction)->GetArena();
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.apply_transaction_args.transaction)
}

// -------------------------------------------------------------------

// apply_transaction_return

// -------------------------------------------------------------------

// apply_upload_contract_operation_args

// .koinos.protocol.upload_contract_operation op = 1;
inline bool apply_upload_contract_operation_args::_internal_has_op() const {
  return this != internal_default_instance() && op_ != nullptr;
}
inline bool apply_upload_contract_operation_args::has_op() const {
  return _internal_has_op();
}
inline const ::koinos::protocol::upload_contract_operation& apply_upload_contract_operation_args::_internal_op() const {
  const ::koinos::protocol::upload_contract_operation* p = op_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::upload_contract_operation&>(
      ::koinos::protocol::_upload_contract_operation_default_instance_);
}
inline const ::koinos::protocol::upload_contract_operation& apply_upload_contract_operation_args::op() const {
  // @@protoc_insertion_point(field_get:koinos.chain.apply_upload_contract_operation_args.op)
  return _internal_op();
}
inline void apply_upload_contract_operation_args::unsafe_arena_set_allocated_op(
    ::koinos::protocol::upload_contract_operation* op) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_);
  }
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.apply_upload_contract_operation_args.op)
}
inline ::koinos::protocol::upload_contract_operation* apply_upload_contract_operation_args::release_op() {
  
  ::koinos::protocol::upload_contract_operation* temp = op_;
  op_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::upload_contract_operation* apply_upload_contract_operation_args::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_release:koinos.chain.apply_upload_contract_operation_args.op)
  
  ::koinos::protocol::upload_contract_operation* temp = op_;
  op_ = nullptr;
  return temp;
}
inline ::koinos::protocol::upload_contract_operation* apply_upload_contract_operation_args::_internal_mutable_op() {
  
  if (op_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::upload_contract_operation>(GetArena());
    op_ = p;
  }
  return op_;
}
inline ::koinos::protocol::upload_contract_operation* apply_upload_contract_operation_args::mutable_op() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.apply_upload_contract_operation_args.op)
  return _internal_mutable_op();
}
inline void apply_upload_contract_operation_args::set_allocated_op(::koinos::protocol::upload_contract_operation* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_);
  }
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op)->GetArena();
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    
  } else {
    
  }
  op_ = op;
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.apply_upload_contract_operation_args.op)
}

// -------------------------------------------------------------------

// apply_upload_contract_operation_return

// -------------------------------------------------------------------

// apply_call_contract_operation_args

// .koinos.protocol.call_contract_operation op = 1;
inline bool apply_call_contract_operation_args::_internal_has_op() const {
  return this != internal_default_instance() && op_ != nullptr;
}
inline bool apply_call_contract_operation_args::has_op() const {
  return _internal_has_op();
}
inline const ::koinos::protocol::call_contract_operation& apply_call_contract_operation_args::_internal_op() const {
  const ::koinos::protocol::call_contract_operation* p = op_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::call_contract_operation&>(
      ::koinos::protocol::_call_contract_operation_default_instance_);
}
inline const ::koinos::protocol::call_contract_operation& apply_call_contract_operation_args::op() const {
  // @@protoc_insertion_point(field_get:koinos.chain.apply_call_contract_operation_args.op)
  return _internal_op();
}
inline void apply_call_contract_operation_args::unsafe_arena_set_allocated_op(
    ::koinos::protocol::call_contract_operation* op) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_);
  }
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.apply_call_contract_operation_args.op)
}
inline ::koinos::protocol::call_contract_operation* apply_call_contract_operation_args::release_op() {
  
  ::koinos::protocol::call_contract_operation* temp = op_;
  op_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::call_contract_operation* apply_call_contract_operation_args::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_release:koinos.chain.apply_call_contract_operation_args.op)
  
  ::koinos::protocol::call_contract_operation* temp = op_;
  op_ = nullptr;
  return temp;
}
inline ::koinos::protocol::call_contract_operation* apply_call_contract_operation_args::_internal_mutable_op() {
  
  if (op_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::call_contract_operation>(GetArena());
    op_ = p;
  }
  return op_;
}
inline ::koinos::protocol::call_contract_operation* apply_call_contract_operation_args::mutable_op() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.apply_call_contract_operation_args.op)
  return _internal_mutable_op();
}
inline void apply_call_contract_operation_args::set_allocated_op(::koinos::protocol::call_contract_operation* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_);
  }
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op)->GetArena();
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    
  } else {
    
  }
  op_ = op;
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.apply_call_contract_operation_args.op)
}

// -------------------------------------------------------------------

// apply_call_contract_operation_return

// -------------------------------------------------------------------

// apply_set_system_call_operation_args

// .koinos.protocol.set_system_call_operation op = 1;
inline bool apply_set_system_call_operation_args::_internal_has_op() const {
  return this != internal_default_instance() && op_ != nullptr;
}
inline bool apply_set_system_call_operation_args::has_op() const {
  return _internal_has_op();
}
inline const ::koinos::protocol::set_system_call_operation& apply_set_system_call_operation_args::_internal_op() const {
  const ::koinos::protocol::set_system_call_operation* p = op_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::set_system_call_operation&>(
      ::koinos::protocol::_set_system_call_operation_default_instance_);
}
inline const ::koinos::protocol::set_system_call_operation& apply_set_system_call_operation_args::op() const {
  // @@protoc_insertion_point(field_get:koinos.chain.apply_set_system_call_operation_args.op)
  return _internal_op();
}
inline void apply_set_system_call_operation_args::unsafe_arena_set_allocated_op(
    ::koinos::protocol::set_system_call_operation* op) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_);
  }
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.apply_set_system_call_operation_args.op)
}
inline ::koinos::protocol::set_system_call_operation* apply_set_system_call_operation_args::release_op() {
  
  ::koinos::protocol::set_system_call_operation* temp = op_;
  op_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::set_system_call_operation* apply_set_system_call_operation_args::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_release:koinos.chain.apply_set_system_call_operation_args.op)
  
  ::koinos::protocol::set_system_call_operation* temp = op_;
  op_ = nullptr;
  return temp;
}
inline ::koinos::protocol::set_system_call_operation* apply_set_system_call_operation_args::_internal_mutable_op() {
  
  if (op_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::set_system_call_operation>(GetArena());
    op_ = p;
  }
  return op_;
}
inline ::koinos::protocol::set_system_call_operation* apply_set_system_call_operation_args::mutable_op() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.apply_set_system_call_operation_args.op)
  return _internal_mutable_op();
}
inline void apply_set_system_call_operation_args::set_allocated_op(::koinos::protocol::set_system_call_operation* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_);
  }
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op)->GetArena();
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    
  } else {
    
  }
  op_ = op;
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.apply_set_system_call_operation_args.op)
}

// -------------------------------------------------------------------

// db_put_object_args

// bytes space = 1;
inline void db_put_object_args::clear_space() {
  space_.ClearToEmpty();
}
inline const std::string& db_put_object_args::space() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_put_object_args.space)
  return _internal_space();
}
inline void db_put_object_args::set_space(const std::string& value) {
  _internal_set_space(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_put_object_args.space)
}
inline std::string* db_put_object_args::mutable_space() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.db_put_object_args.space)
  return _internal_mutable_space();
}
inline const std::string& db_put_object_args::_internal_space() const {
  return space_.Get();
}
inline void db_put_object_args::_internal_set_space(const std::string& value) {
  
  space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void db_put_object_args::set_space(std::string&& value) {
  
  space_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.db_put_object_args.space)
}
inline void db_put_object_args::set_space(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.db_put_object_args.space)
}
inline void db_put_object_args::set_space(const void* value,
    size_t size) {
  
  space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.db_put_object_args.space)
}
inline std::string* db_put_object_args::_internal_mutable_space() {
  
  return space_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* db_put_object_args::release_space() {
  // @@protoc_insertion_point(field_release:koinos.chain.db_put_object_args.space)
  return space_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_put_object_args::set_allocated_space(std::string* space) {
  if (space != nullptr) {
    
  } else {
    
  }
  space_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), space,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.db_put_object_args.space)
}

// bytes key = 2;
inline void db_put_object_args::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& db_put_object_args::key() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_put_object_args.key)
  return _internal_key();
}
inline void db_put_object_args::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_put_object_args.key)
}
inline std::string* db_put_object_args::mutable_key() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.db_put_object_args.key)
  return _internal_mutable_key();
}
inline const std::string& db_put_object_args::_internal_key() const {
  return key_.Get();
}
inline void db_put_object_args::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void db_put_object_args::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.db_put_object_args.key)
}
inline void db_put_object_args::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.db_put_object_args.key)
}
inline void db_put_object_args::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.db_put_object_args.key)
}
inline std::string* db_put_object_args::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* db_put_object_args::release_key() {
  // @@protoc_insertion_point(field_release:koinos.chain.db_put_object_args.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_put_object_args::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.db_put_object_args.key)
}

// bytes obj = 3;
inline void db_put_object_args::clear_obj() {
  obj_.ClearToEmpty();
}
inline const std::string& db_put_object_args::obj() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_put_object_args.obj)
  return _internal_obj();
}
inline void db_put_object_args::set_obj(const std::string& value) {
  _internal_set_obj(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_put_object_args.obj)
}
inline std::string* db_put_object_args::mutable_obj() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.db_put_object_args.obj)
  return _internal_mutable_obj();
}
inline const std::string& db_put_object_args::_internal_obj() const {
  return obj_.Get();
}
inline void db_put_object_args::_internal_set_obj(const std::string& value) {
  
  obj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void db_put_object_args::set_obj(std::string&& value) {
  
  obj_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.db_put_object_args.obj)
}
inline void db_put_object_args::set_obj(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.db_put_object_args.obj)
}
inline void db_put_object_args::set_obj(const void* value,
    size_t size) {
  
  obj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.db_put_object_args.obj)
}
inline std::string* db_put_object_args::_internal_mutable_obj() {
  
  return obj_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* db_put_object_args::release_obj() {
  // @@protoc_insertion_point(field_release:koinos.chain.db_put_object_args.obj)
  return obj_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_put_object_args::set_allocated_obj(std::string* obj) {
  if (obj != nullptr) {
    
  } else {
    
  }
  obj_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.db_put_object_args.obj)
}

// -------------------------------------------------------------------

// db_put_object_return

// bool result = 1;
inline void db_put_object_return::clear_result() {
  result_ = false;
}
inline bool db_put_object_return::_internal_result() const {
  return result_;
}
inline bool db_put_object_return::result() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_put_object_return.result)
  return _internal_result();
}
inline void db_put_object_return::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void db_put_object_return::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_put_object_return.result)
}

// -------------------------------------------------------------------

// db_get_object_args

// bytes space = 1;
inline void db_get_object_args::clear_space() {
  space_.ClearToEmpty();
}
inline const std::string& db_get_object_args::space() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_get_object_args.space)
  return _internal_space();
}
inline void db_get_object_args::set_space(const std::string& value) {
  _internal_set_space(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_get_object_args.space)
}
inline std::string* db_get_object_args::mutable_space() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.db_get_object_args.space)
  return _internal_mutable_space();
}
inline const std::string& db_get_object_args::_internal_space() const {
  return space_.Get();
}
inline void db_get_object_args::_internal_set_space(const std::string& value) {
  
  space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void db_get_object_args::set_space(std::string&& value) {
  
  space_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.db_get_object_args.space)
}
inline void db_get_object_args::set_space(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.db_get_object_args.space)
}
inline void db_get_object_args::set_space(const void* value,
    size_t size) {
  
  space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.db_get_object_args.space)
}
inline std::string* db_get_object_args::_internal_mutable_space() {
  
  return space_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* db_get_object_args::release_space() {
  // @@protoc_insertion_point(field_release:koinos.chain.db_get_object_args.space)
  return space_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_get_object_args::set_allocated_space(std::string* space) {
  if (space != nullptr) {
    
  } else {
    
  }
  space_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), space,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.db_get_object_args.space)
}

// bytes key = 2;
inline void db_get_object_args::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& db_get_object_args::key() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_get_object_args.key)
  return _internal_key();
}
inline void db_get_object_args::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_get_object_args.key)
}
inline std::string* db_get_object_args::mutable_key() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.db_get_object_args.key)
  return _internal_mutable_key();
}
inline const std::string& db_get_object_args::_internal_key() const {
  return key_.Get();
}
inline void db_get_object_args::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void db_get_object_args::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.db_get_object_args.key)
}
inline void db_get_object_args::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.db_get_object_args.key)
}
inline void db_get_object_args::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.db_get_object_args.key)
}
inline std::string* db_get_object_args::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* db_get_object_args::release_key() {
  // @@protoc_insertion_point(field_release:koinos.chain.db_get_object_args.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_get_object_args::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.db_get_object_args.key)
}

// uint32 object_size_hint = 3;
inline bool db_get_object_args::_internal_has_object_size_hint() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_get_object_args::has_object_size_hint() const {
  return _internal_has_object_size_hint();
}
inline void db_get_object_args::clear_object_size_hint() {
  object_size_hint_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 db_get_object_args::_internal_object_size_hint() const {
  return object_size_hint_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 db_get_object_args::object_size_hint() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_get_object_args.object_size_hint)
  return _internal_object_size_hint();
}
inline void db_get_object_args::_internal_set_object_size_hint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_size_hint_ = value;
}
inline void db_get_object_args::set_object_size_hint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_object_size_hint(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_get_object_args.object_size_hint)
}

// -------------------------------------------------------------------

// db_get_object_return

// bytes result = 3;
inline void db_get_object_return::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& db_get_object_return::result() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_get_object_return.result)
  return _internal_result();
}
inline void db_get_object_return::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_get_object_return.result)
}
inline std::string* db_get_object_return::mutable_result() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.db_get_object_return.result)
  return _internal_mutable_result();
}
inline const std::string& db_get_object_return::_internal_result() const {
  return result_.Get();
}
inline void db_get_object_return::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void db_get_object_return::set_result(std::string&& value) {
  
  result_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.db_get_object_return.result)
}
inline void db_get_object_return::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.db_get_object_return.result)
}
inline void db_get_object_return::set_result(const void* value,
    size_t size) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.db_get_object_return.result)
}
inline std::string* db_get_object_return::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* db_get_object_return::release_result() {
  // @@protoc_insertion_point(field_release:koinos.chain.db_get_object_return.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_get_object_return::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.db_get_object_return.result)
}

// -------------------------------------------------------------------

// db_get_next_object_args

// bytes space = 1;
inline void db_get_next_object_args::clear_space() {
  space_.ClearToEmpty();
}
inline const std::string& db_get_next_object_args::space() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_get_next_object_args.space)
  return _internal_space();
}
inline void db_get_next_object_args::set_space(const std::string& value) {
  _internal_set_space(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_get_next_object_args.space)
}
inline std::string* db_get_next_object_args::mutable_space() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.db_get_next_object_args.space)
  return _internal_mutable_space();
}
inline const std::string& db_get_next_object_args::_internal_space() const {
  return space_.Get();
}
inline void db_get_next_object_args::_internal_set_space(const std::string& value) {
  
  space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void db_get_next_object_args::set_space(std::string&& value) {
  
  space_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.db_get_next_object_args.space)
}
inline void db_get_next_object_args::set_space(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.db_get_next_object_args.space)
}
inline void db_get_next_object_args::set_space(const void* value,
    size_t size) {
  
  space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.db_get_next_object_args.space)
}
inline std::string* db_get_next_object_args::_internal_mutable_space() {
  
  return space_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* db_get_next_object_args::release_space() {
  // @@protoc_insertion_point(field_release:koinos.chain.db_get_next_object_args.space)
  return space_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_get_next_object_args::set_allocated_space(std::string* space) {
  if (space != nullptr) {
    
  } else {
    
  }
  space_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), space,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.db_get_next_object_args.space)
}

// bytes key = 2;
inline void db_get_next_object_args::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& db_get_next_object_args::key() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_get_next_object_args.key)
  return _internal_key();
}
inline void db_get_next_object_args::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_get_next_object_args.key)
}
inline std::string* db_get_next_object_args::mutable_key() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.db_get_next_object_args.key)
  return _internal_mutable_key();
}
inline const std::string& db_get_next_object_args::_internal_key() const {
  return key_.Get();
}
inline void db_get_next_object_args::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void db_get_next_object_args::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.db_get_next_object_args.key)
}
inline void db_get_next_object_args::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.db_get_next_object_args.key)
}
inline void db_get_next_object_args::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.db_get_next_object_args.key)
}
inline std::string* db_get_next_object_args::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* db_get_next_object_args::release_key() {
  // @@protoc_insertion_point(field_release:koinos.chain.db_get_next_object_args.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_get_next_object_args::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.db_get_next_object_args.key)
}

// uint32 object_size_hint = 3;
inline bool db_get_next_object_args::_internal_has_object_size_hint() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_get_next_object_args::has_object_size_hint() const {
  return _internal_has_object_size_hint();
}
inline void db_get_next_object_args::clear_object_size_hint() {
  object_size_hint_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 db_get_next_object_args::_internal_object_size_hint() const {
  return object_size_hint_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 db_get_next_object_args::object_size_hint() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_get_next_object_args.object_size_hint)
  return _internal_object_size_hint();
}
inline void db_get_next_object_args::_internal_set_object_size_hint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_size_hint_ = value;
}
inline void db_get_next_object_args::set_object_size_hint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_object_size_hint(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_get_next_object_args.object_size_hint)
}

// -------------------------------------------------------------------

// db_get_next_object_return

// bytes result = 3;
inline void db_get_next_object_return::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& db_get_next_object_return::result() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_get_next_object_return.result)
  return _internal_result();
}
inline void db_get_next_object_return::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_get_next_object_return.result)
}
inline std::string* db_get_next_object_return::mutable_result() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.db_get_next_object_return.result)
  return _internal_mutable_result();
}
inline const std::string& db_get_next_object_return::_internal_result() const {
  return result_.Get();
}
inline void db_get_next_object_return::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void db_get_next_object_return::set_result(std::string&& value) {
  
  result_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.db_get_next_object_return.result)
}
inline void db_get_next_object_return::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.db_get_next_object_return.result)
}
inline void db_get_next_object_return::set_result(const void* value,
    size_t size) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.db_get_next_object_return.result)
}
inline std::string* db_get_next_object_return::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* db_get_next_object_return::release_result() {
  // @@protoc_insertion_point(field_release:koinos.chain.db_get_next_object_return.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_get_next_object_return::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.db_get_next_object_return.result)
}

// -------------------------------------------------------------------

// db_get_prev_object_args

// bytes space = 1;
inline void db_get_prev_object_args::clear_space() {
  space_.ClearToEmpty();
}
inline const std::string& db_get_prev_object_args::space() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_get_prev_object_args.space)
  return _internal_space();
}
inline void db_get_prev_object_args::set_space(const std::string& value) {
  _internal_set_space(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_get_prev_object_args.space)
}
inline std::string* db_get_prev_object_args::mutable_space() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.db_get_prev_object_args.space)
  return _internal_mutable_space();
}
inline const std::string& db_get_prev_object_args::_internal_space() const {
  return space_.Get();
}
inline void db_get_prev_object_args::_internal_set_space(const std::string& value) {
  
  space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void db_get_prev_object_args::set_space(std::string&& value) {
  
  space_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.db_get_prev_object_args.space)
}
inline void db_get_prev_object_args::set_space(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.db_get_prev_object_args.space)
}
inline void db_get_prev_object_args::set_space(const void* value,
    size_t size) {
  
  space_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.db_get_prev_object_args.space)
}
inline std::string* db_get_prev_object_args::_internal_mutable_space() {
  
  return space_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* db_get_prev_object_args::release_space() {
  // @@protoc_insertion_point(field_release:koinos.chain.db_get_prev_object_args.space)
  return space_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_get_prev_object_args::set_allocated_space(std::string* space) {
  if (space != nullptr) {
    
  } else {
    
  }
  space_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), space,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.db_get_prev_object_args.space)
}

// bytes key = 2;
inline void db_get_prev_object_args::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& db_get_prev_object_args::key() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_get_prev_object_args.key)
  return _internal_key();
}
inline void db_get_prev_object_args::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_get_prev_object_args.key)
}
inline std::string* db_get_prev_object_args::mutable_key() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.db_get_prev_object_args.key)
  return _internal_mutable_key();
}
inline const std::string& db_get_prev_object_args::_internal_key() const {
  return key_.Get();
}
inline void db_get_prev_object_args::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void db_get_prev_object_args::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.db_get_prev_object_args.key)
}
inline void db_get_prev_object_args::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.db_get_prev_object_args.key)
}
inline void db_get_prev_object_args::set_key(const void* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.db_get_prev_object_args.key)
}
inline std::string* db_get_prev_object_args::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* db_get_prev_object_args::release_key() {
  // @@protoc_insertion_point(field_release:koinos.chain.db_get_prev_object_args.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_get_prev_object_args::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.db_get_prev_object_args.key)
}

// uint32 object_size_hint = 3;
inline bool db_get_prev_object_args::_internal_has_object_size_hint() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool db_get_prev_object_args::has_object_size_hint() const {
  return _internal_has_object_size_hint();
}
inline void db_get_prev_object_args::clear_object_size_hint() {
  object_size_hint_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 db_get_prev_object_args::_internal_object_size_hint() const {
  return object_size_hint_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 db_get_prev_object_args::object_size_hint() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_get_prev_object_args.object_size_hint)
  return _internal_object_size_hint();
}
inline void db_get_prev_object_args::_internal_set_object_size_hint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  object_size_hint_ = value;
}
inline void db_get_prev_object_args::set_object_size_hint(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_object_size_hint(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_get_prev_object_args.object_size_hint)
}

// -------------------------------------------------------------------

// db_get_prev_object_return

// bytes result = 3;
inline void db_get_prev_object_return::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& db_get_prev_object_return::result() const {
  // @@protoc_insertion_point(field_get:koinos.chain.db_get_prev_object_return.result)
  return _internal_result();
}
inline void db_get_prev_object_return::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:koinos.chain.db_get_prev_object_return.result)
}
inline std::string* db_get_prev_object_return::mutable_result() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.db_get_prev_object_return.result)
  return _internal_mutable_result();
}
inline const std::string& db_get_prev_object_return::_internal_result() const {
  return result_.Get();
}
inline void db_get_prev_object_return::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void db_get_prev_object_return::set_result(std::string&& value) {
  
  result_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.db_get_prev_object_return.result)
}
inline void db_get_prev_object_return::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.db_get_prev_object_return.result)
}
inline void db_get_prev_object_return::set_result(const void* value,
    size_t size) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.db_get_prev_object_return.result)
}
inline std::string* db_get_prev_object_return::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* db_get_prev_object_return::release_result() {
  // @@protoc_insertion_point(field_release:koinos.chain.db_get_prev_object_return.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void db_get_prev_object_return::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.db_get_prev_object_return.result)
}

// -------------------------------------------------------------------

// call_contract_args

// bytes contract_id = 1;
inline void call_contract_args::clear_contract_id() {
  contract_id_.ClearToEmpty();
}
inline const std::string& call_contract_args::contract_id() const {
  // @@protoc_insertion_point(field_get:koinos.chain.call_contract_args.contract_id)
  return _internal_contract_id();
}
inline void call_contract_args::set_contract_id(const std::string& value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:koinos.chain.call_contract_args.contract_id)
}
inline std::string* call_contract_args::mutable_contract_id() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.call_contract_args.contract_id)
  return _internal_mutable_contract_id();
}
inline const std::string& call_contract_args::_internal_contract_id() const {
  return contract_id_.Get();
}
inline void call_contract_args::_internal_set_contract_id(const std::string& value) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void call_contract_args::set_contract_id(std::string&& value) {
  
  contract_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.call_contract_args.contract_id)
}
inline void call_contract_args::set_contract_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.call_contract_args.contract_id)
}
inline void call_contract_args::set_contract_id(const void* value,
    size_t size) {
  
  contract_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.call_contract_args.contract_id)
}
inline std::string* call_contract_args::_internal_mutable_contract_id() {
  
  return contract_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* call_contract_args::release_contract_id() {
  // @@protoc_insertion_point(field_release:koinos.chain.call_contract_args.contract_id)
  return contract_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void call_contract_args::set_allocated_contract_id(std::string* contract_id) {
  if (contract_id != nullptr) {
    
  } else {
    
  }
  contract_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.call_contract_args.contract_id)
}

// uint32 entry_point = 2;
inline void call_contract_args::clear_entry_point() {
  entry_point_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 call_contract_args::_internal_entry_point() const {
  return entry_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 call_contract_args::entry_point() const {
  // @@protoc_insertion_point(field_get:koinos.chain.call_contract_args.entry_point)
  return _internal_entry_point();
}
inline void call_contract_args::_internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entry_point_ = value;
}
inline void call_contract_args::set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entry_point(value);
  // @@protoc_insertion_point(field_set:koinos.chain.call_contract_args.entry_point)
}

// bytes args = 3;
inline void call_contract_args::clear_args() {
  args_.ClearToEmpty();
}
inline const std::string& call_contract_args::args() const {
  // @@protoc_insertion_point(field_get:koinos.chain.call_contract_args.args)
  return _internal_args();
}
inline void call_contract_args::set_args(const std::string& value) {
  _internal_set_args(value);
  // @@protoc_insertion_point(field_set:koinos.chain.call_contract_args.args)
}
inline std::string* call_contract_args::mutable_args() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.call_contract_args.args)
  return _internal_mutable_args();
}
inline const std::string& call_contract_args::_internal_args() const {
  return args_.Get();
}
inline void call_contract_args::_internal_set_args(const std::string& value) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void call_contract_args::set_args(std::string&& value) {
  
  args_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.call_contract_args.args)
}
inline void call_contract_args::set_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.call_contract_args.args)
}
inline void call_contract_args::set_args(const void* value,
    size_t size) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.call_contract_args.args)
}
inline std::string* call_contract_args::_internal_mutable_args() {
  
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* call_contract_args::release_args() {
  // @@protoc_insertion_point(field_release:koinos.chain.call_contract_args.args)
  return args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void call_contract_args::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.call_contract_args.args)
}

// -------------------------------------------------------------------

// call_contract_return

// bytes result = 1;
inline void call_contract_return::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& call_contract_return::result() const {
  // @@protoc_insertion_point(field_get:koinos.chain.call_contract_return.result)
  return _internal_result();
}
inline void call_contract_return::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:koinos.chain.call_contract_return.result)
}
inline std::string* call_contract_return::mutable_result() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.call_contract_return.result)
  return _internal_mutable_result();
}
inline const std::string& call_contract_return::_internal_result() const {
  return result_.Get();
}
inline void call_contract_return::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void call_contract_return::set_result(std::string&& value) {
  
  result_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.call_contract_return.result)
}
inline void call_contract_return::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.call_contract_return.result)
}
inline void call_contract_return::set_result(const void* value,
    size_t size) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.call_contract_return.result)
}
inline std::string* call_contract_return::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* call_contract_return::release_result() {
  // @@protoc_insertion_point(field_release:koinos.chain.call_contract_return.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void call_contract_return::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.call_contract_return.result)
}

// -------------------------------------------------------------------

// get_entry_point_args

// -------------------------------------------------------------------

// get_entry_point_return

// uint32 entry_point = 1;
inline void get_entry_point_return::clear_entry_point() {
  entry_point_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 get_entry_point_return::_internal_entry_point() const {
  return entry_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 get_entry_point_return::entry_point() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_entry_point_return.entry_point)
  return _internal_entry_point();
}
inline void get_entry_point_return::_internal_set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entry_point_ = value;
}
inline void get_entry_point_return::set_entry_point(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entry_point(value);
  // @@protoc_insertion_point(field_set:koinos.chain.get_entry_point_return.entry_point)
}

// -------------------------------------------------------------------

// get_contract_args_size_args

// -------------------------------------------------------------------

// get_contract_args_size_return

// uint32 value = 1;
inline void get_contract_args_size_return::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 get_contract_args_size_return::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 get_contract_args_size_return::value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_contract_args_size_return.value)
  return _internal_value();
}
inline void get_contract_args_size_return::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void get_contract_args_size_return::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.get_contract_args_size_return.value)
}

// -------------------------------------------------------------------

// get_contract_args_args

// -------------------------------------------------------------------

// get_contract_args_return

// bytes value = 1;
inline void get_contract_args_return::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& get_contract_args_return::value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_contract_args_return.value)
  return _internal_value();
}
inline void get_contract_args_return::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.get_contract_args_return.value)
}
inline std::string* get_contract_args_return::mutable_value() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.get_contract_args_return.value)
  return _internal_mutable_value();
}
inline const std::string& get_contract_args_return::_internal_value() const {
  return value_.Get();
}
inline void get_contract_args_return::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void get_contract_args_return::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.get_contract_args_return.value)
}
inline void get_contract_args_return::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.get_contract_args_return.value)
}
inline void get_contract_args_return::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.get_contract_args_return.value)
}
inline std::string* get_contract_args_return::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* get_contract_args_return::release_value() {
  // @@protoc_insertion_point(field_release:koinos.chain.get_contract_args_return.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_contract_args_return::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.get_contract_args_return.value)
}

// -------------------------------------------------------------------

// set_contract_return_args

// bytes value = 1;
inline void set_contract_return_args::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& set_contract_return_args::value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.set_contract_return_args.value)
  return _internal_value();
}
inline void set_contract_return_args::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.set_contract_return_args.value)
}
inline std::string* set_contract_return_args::mutable_value() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.set_contract_return_args.value)
  return _internal_mutable_value();
}
inline const std::string& set_contract_return_args::_internal_value() const {
  return value_.Get();
}
inline void set_contract_return_args::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void set_contract_return_args::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.set_contract_return_args.value)
}
inline void set_contract_return_args::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.set_contract_return_args.value)
}
inline void set_contract_return_args::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.set_contract_return_args.value)
}
inline std::string* set_contract_return_args::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* set_contract_return_args::release_value() {
  // @@protoc_insertion_point(field_release:koinos.chain.set_contract_return_args.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void set_contract_return_args::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.set_contract_return_args.value)
}

// -------------------------------------------------------------------

// set_contract_return_return

// -------------------------------------------------------------------

// exit_contract_args

// uint32 exit_code = 1;
inline void exit_contract_args::clear_exit_code() {
  exit_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 exit_contract_args::_internal_exit_code() const {
  return exit_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 exit_contract_args::exit_code() const {
  // @@protoc_insertion_point(field_get:koinos.chain.exit_contract_args.exit_code)
  return _internal_exit_code();
}
inline void exit_contract_args::_internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  exit_code_ = value;
}
inline void exit_contract_args::set_exit_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exit_code(value);
  // @@protoc_insertion_point(field_set:koinos.chain.exit_contract_args.exit_code)
}

// -------------------------------------------------------------------

// exit_contract_return

// -------------------------------------------------------------------

// get_head_info_args

// -------------------------------------------------------------------

// get_head_info_return

// .koinos.chain.head_info value = 1;
inline bool get_head_info_return::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool get_head_info_return::has_value() const {
  return _internal_has_value();
}
inline void get_head_info_return::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::koinos::chain::head_info& get_head_info_return::_internal_value() const {
  const ::koinos::chain::head_info* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::chain::head_info&>(
      ::koinos::chain::_head_info_default_instance_);
}
inline const ::koinos::chain::head_info& get_head_info_return::value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_head_info_return.value)
  return _internal_value();
}
inline void get_head_info_return::unsafe_arena_set_allocated_value(
    ::koinos::chain::head_info* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.get_head_info_return.value)
}
inline ::koinos::chain::head_info* get_head_info_return::release_value() {
  
  ::koinos::chain::head_info* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::chain::head_info* get_head_info_return::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:koinos.chain.get_head_info_return.value)
  
  ::koinos::chain::head_info* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::koinos::chain::head_info* get_head_info_return::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::chain::head_info>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::koinos::chain::head_info* get_head_info_return::mutable_value() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.get_head_info_return.value)
  return _internal_mutable_value();
}
inline void get_head_info_return::set_allocated_value(::koinos::chain::head_info* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.get_head_info_return.value)
}

// -------------------------------------------------------------------

// hash_args

// uint64 code = 1;
inline void hash_args::clear_code() {
  code_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 hash_args::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 hash_args::code() const {
  // @@protoc_insertion_point(field_get:koinos.chain.hash_args.code)
  return _internal_code();
}
inline void hash_args::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  code_ = value;
}
inline void hash_args::set_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:koinos.chain.hash_args.code)
}

// bytes obj = 2;
inline void hash_args::clear_obj() {
  obj_.ClearToEmpty();
}
inline const std::string& hash_args::obj() const {
  // @@protoc_insertion_point(field_get:koinos.chain.hash_args.obj)
  return _internal_obj();
}
inline void hash_args::set_obj(const std::string& value) {
  _internal_set_obj(value);
  // @@protoc_insertion_point(field_set:koinos.chain.hash_args.obj)
}
inline std::string* hash_args::mutable_obj() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.hash_args.obj)
  return _internal_mutable_obj();
}
inline const std::string& hash_args::_internal_obj() const {
  return obj_.Get();
}
inline void hash_args::_internal_set_obj(const std::string& value) {
  
  obj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void hash_args::set_obj(std::string&& value) {
  
  obj_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.hash_args.obj)
}
inline void hash_args::set_obj(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  obj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.hash_args.obj)
}
inline void hash_args::set_obj(const void* value,
    size_t size) {
  
  obj_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.hash_args.obj)
}
inline std::string* hash_args::_internal_mutable_obj() {
  
  return obj_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* hash_args::release_obj() {
  // @@protoc_insertion_point(field_release:koinos.chain.hash_args.obj)
  return obj_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void hash_args::set_allocated_obj(std::string* obj) {
  if (obj != nullptr) {
    
  } else {
    
  }
  obj_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.hash_args.obj)
}

// uint64 size = 3;
inline void hash_args::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 hash_args::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 hash_args::size() const {
  // @@protoc_insertion_point(field_get:koinos.chain.hash_args.size)
  return _internal_size();
}
inline void hash_args::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void hash_args::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:koinos.chain.hash_args.size)
}

// -------------------------------------------------------------------

// hash_return

// bytes value = 1;
inline void hash_return::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& hash_return::value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.hash_return.value)
  return _internal_value();
}
inline void hash_return::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.hash_return.value)
}
inline std::string* hash_return::mutable_value() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.hash_return.value)
  return _internal_mutable_value();
}
inline const std::string& hash_return::_internal_value() const {
  return value_.Get();
}
inline void hash_return::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void hash_return::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.hash_return.value)
}
inline void hash_return::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.hash_return.value)
}
inline void hash_return::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.hash_return.value)
}
inline std::string* hash_return::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* hash_return::release_value() {
  // @@protoc_insertion_point(field_release:koinos.chain.hash_return.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void hash_return::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.hash_return.value)
}

// -------------------------------------------------------------------

// recover_public_key_args

// bytes signature_data = 1;
inline void recover_public_key_args::clear_signature_data() {
  signature_data_.ClearToEmpty();
}
inline const std::string& recover_public_key_args::signature_data() const {
  // @@protoc_insertion_point(field_get:koinos.chain.recover_public_key_args.signature_data)
  return _internal_signature_data();
}
inline void recover_public_key_args::set_signature_data(const std::string& value) {
  _internal_set_signature_data(value);
  // @@protoc_insertion_point(field_set:koinos.chain.recover_public_key_args.signature_data)
}
inline std::string* recover_public_key_args::mutable_signature_data() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.recover_public_key_args.signature_data)
  return _internal_mutable_signature_data();
}
inline const std::string& recover_public_key_args::_internal_signature_data() const {
  return signature_data_.Get();
}
inline void recover_public_key_args::_internal_set_signature_data(const std::string& value) {
  
  signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void recover_public_key_args::set_signature_data(std::string&& value) {
  
  signature_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.recover_public_key_args.signature_data)
}
inline void recover_public_key_args::set_signature_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.recover_public_key_args.signature_data)
}
inline void recover_public_key_args::set_signature_data(const void* value,
    size_t size) {
  
  signature_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.recover_public_key_args.signature_data)
}
inline std::string* recover_public_key_args::_internal_mutable_signature_data() {
  
  return signature_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* recover_public_key_args::release_signature_data() {
  // @@protoc_insertion_point(field_release:koinos.chain.recover_public_key_args.signature_data)
  return signature_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void recover_public_key_args::set_allocated_signature_data(std::string* signature_data) {
  if (signature_data != nullptr) {
    
  } else {
    
  }
  signature_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.recover_public_key_args.signature_data)
}

// bytes digest = 2;
inline void recover_public_key_args::clear_digest() {
  digest_.ClearToEmpty();
}
inline const std::string& recover_public_key_args::digest() const {
  // @@protoc_insertion_point(field_get:koinos.chain.recover_public_key_args.digest)
  return _internal_digest();
}
inline void recover_public_key_args::set_digest(const std::string& value) {
  _internal_set_digest(value);
  // @@protoc_insertion_point(field_set:koinos.chain.recover_public_key_args.digest)
}
inline std::string* recover_public_key_args::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.recover_public_key_args.digest)
  return _internal_mutable_digest();
}
inline const std::string& recover_public_key_args::_internal_digest() const {
  return digest_.Get();
}
inline void recover_public_key_args::_internal_set_digest(const std::string& value) {
  
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void recover_public_key_args::set_digest(std::string&& value) {
  
  digest_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.recover_public_key_args.digest)
}
inline void recover_public_key_args::set_digest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.recover_public_key_args.digest)
}
inline void recover_public_key_args::set_digest(const void* value,
    size_t size) {
  
  digest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.recover_public_key_args.digest)
}
inline std::string* recover_public_key_args::_internal_mutable_digest() {
  
  return digest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* recover_public_key_args::release_digest() {
  // @@protoc_insertion_point(field_release:koinos.chain.recover_public_key_args.digest)
  return digest_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void recover_public_key_args::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    
  } else {
    
  }
  digest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.recover_public_key_args.digest)
}

// -------------------------------------------------------------------

// recover_public_key_return

// bytes value = 1;
inline void recover_public_key_return::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& recover_public_key_return::value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.recover_public_key_return.value)
  return _internal_value();
}
inline void recover_public_key_return::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.recover_public_key_return.value)
}
inline std::string* recover_public_key_return::mutable_value() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.recover_public_key_return.value)
  return _internal_mutable_value();
}
inline const std::string& recover_public_key_return::_internal_value() const {
  return value_.Get();
}
inline void recover_public_key_return::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void recover_public_key_return::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.recover_public_key_return.value)
}
inline void recover_public_key_return::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.recover_public_key_return.value)
}
inline void recover_public_key_return::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.recover_public_key_return.value)
}
inline std::string* recover_public_key_return::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* recover_public_key_return::release_value() {
  // @@protoc_insertion_point(field_release:koinos.chain.recover_public_key_return.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void recover_public_key_return::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.recover_public_key_return.value)
}

// -------------------------------------------------------------------

// get_transaction_payer_args

// .koinos.protocol.transaction transaction = 1;
inline bool get_transaction_payer_args::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool get_transaction_payer_args::has_transaction() const {
  return _internal_has_transaction();
}
inline const ::koinos::protocol::transaction& get_transaction_payer_args::_internal_transaction() const {
  const ::koinos::protocol::transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::transaction&>(
      ::koinos::protocol::_transaction_default_instance_);
}
inline const ::koinos::protocol::transaction& get_transaction_payer_args::transaction() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_transaction_payer_args.transaction)
  return _internal_transaction();
}
inline void get_transaction_payer_args::unsafe_arena_set_allocated_transaction(
    ::koinos::protocol::transaction* transaction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.get_transaction_payer_args.transaction)
}
inline ::koinos::protocol::transaction* get_transaction_payer_args::release_transaction() {
  
  ::koinos::protocol::transaction* temp = transaction_;
  transaction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::transaction* get_transaction_payer_args::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:koinos.chain.get_transaction_payer_args.transaction)
  
  ::koinos::protocol::transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::koinos::protocol::transaction* get_transaction_payer_args::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::transaction>(GetArena());
    transaction_ = p;
  }
  return transaction_;
}
inline ::koinos::protocol::transaction* get_transaction_payer_args::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.get_transaction_payer_args.transaction)
  return _internal_mutable_transaction();
}
inline void get_transaction_payer_args::set_allocated_transaction(::koinos::protocol::transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction)->GetArena();
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.get_transaction_payer_args.transaction)
}

// -------------------------------------------------------------------

// get_transaction_payer_return

// bytes value = 1;
inline void get_transaction_payer_return::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& get_transaction_payer_return::value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_transaction_payer_return.value)
  return _internal_value();
}
inline void get_transaction_payer_return::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.get_transaction_payer_return.value)
}
inline std::string* get_transaction_payer_return::mutable_value() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.get_transaction_payer_return.value)
  return _internal_mutable_value();
}
inline const std::string& get_transaction_payer_return::_internal_value() const {
  return value_.Get();
}
inline void get_transaction_payer_return::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void get_transaction_payer_return::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.get_transaction_payer_return.value)
}
inline void get_transaction_payer_return::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.get_transaction_payer_return.value)
}
inline void get_transaction_payer_return::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.get_transaction_payer_return.value)
}
inline std::string* get_transaction_payer_return::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* get_transaction_payer_return::release_value() {
  // @@protoc_insertion_point(field_release:koinos.chain.get_transaction_payer_return.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_transaction_payer_return::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.get_transaction_payer_return.value)
}

// -------------------------------------------------------------------

// get_max_account_resources_args

// bytes account = 1;
inline void get_max_account_resources_args::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& get_max_account_resources_args::account() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_max_account_resources_args.account)
  return _internal_account();
}
inline void get_max_account_resources_args::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:koinos.chain.get_max_account_resources_args.account)
}
inline std::string* get_max_account_resources_args::mutable_account() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.get_max_account_resources_args.account)
  return _internal_mutable_account();
}
inline const std::string& get_max_account_resources_args::_internal_account() const {
  return account_.Get();
}
inline void get_max_account_resources_args::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void get_max_account_resources_args::set_account(std::string&& value) {
  
  account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.get_max_account_resources_args.account)
}
inline void get_max_account_resources_args::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.get_max_account_resources_args.account)
}
inline void get_max_account_resources_args::set_account(const void* value,
    size_t size) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.get_max_account_resources_args.account)
}
inline std::string* get_max_account_resources_args::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* get_max_account_resources_args::release_account() {
  // @@protoc_insertion_point(field_release:koinos.chain.get_max_account_resources_args.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_max_account_resources_args::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.get_max_account_resources_args.account)
}

// -------------------------------------------------------------------

// get_max_account_resources_return

// uint64 value = 1;
inline void get_max_account_resources_return::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_max_account_resources_return::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_max_account_resources_return::value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_max_account_resources_return.value)
  return _internal_value();
}
inline void get_max_account_resources_return::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void get_max_account_resources_return::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.get_max_account_resources_return.value)
}

// -------------------------------------------------------------------

// get_transaction_resource_limit_args

// .koinos.protocol.transaction transction = 1;
inline bool get_transaction_resource_limit_args::_internal_has_transction() const {
  return this != internal_default_instance() && transction_ != nullptr;
}
inline bool get_transaction_resource_limit_args::has_transction() const {
  return _internal_has_transction();
}
inline const ::koinos::protocol::transaction& get_transaction_resource_limit_args::_internal_transction() const {
  const ::koinos::protocol::transaction* p = transction_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::protocol::transaction&>(
      ::koinos::protocol::_transaction_default_instance_);
}
inline const ::koinos::protocol::transaction& get_transaction_resource_limit_args::transction() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_transaction_resource_limit_args.transction)
  return _internal_transction();
}
inline void get_transaction_resource_limit_args::unsafe_arena_set_allocated_transction(
    ::koinos::protocol::transaction* transction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transction_);
  }
  transction_ = transction;
  if (transction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.get_transaction_resource_limit_args.transction)
}
inline ::koinos::protocol::transaction* get_transaction_resource_limit_args::release_transction() {
  
  ::koinos::protocol::transaction* temp = transction_;
  transction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::protocol::transaction* get_transaction_resource_limit_args::unsafe_arena_release_transction() {
  // @@protoc_insertion_point(field_release:koinos.chain.get_transaction_resource_limit_args.transction)
  
  ::koinos::protocol::transaction* temp = transction_;
  transction_ = nullptr;
  return temp;
}
inline ::koinos::protocol::transaction* get_transaction_resource_limit_args::_internal_mutable_transction() {
  
  if (transction_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::protocol::transaction>(GetArena());
    transction_ = p;
  }
  return transction_;
}
inline ::koinos::protocol::transaction* get_transaction_resource_limit_args::mutable_transction() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.get_transaction_resource_limit_args.transction)
  return _internal_mutable_transction();
}
inline void get_transaction_resource_limit_args::set_allocated_transction(::koinos::protocol::transaction* transction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transction_);
  }
  if (transction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transction)->GetArena();
    if (message_arena != submessage_arena) {
      transction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transction, submessage_arena);
    }
    
  } else {
    
  }
  transction_ = transction;
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.get_transaction_resource_limit_args.transction)
}

// -------------------------------------------------------------------

// get_transaction_resource_limit_return

// uint64 value = 1;
inline void get_transaction_resource_limit_return::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_transaction_resource_limit_return::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_transaction_resource_limit_return::value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_transaction_resource_limit_return.value)
  return _internal_value();
}
inline void get_transaction_resource_limit_return::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void get_transaction_resource_limit_return::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.get_transaction_resource_limit_return.value)
}

// -------------------------------------------------------------------

// get_last_irreversible_block_args

// -------------------------------------------------------------------

// get_last_irreversible_block_return

// .koinos.block_topology value = 1;
inline bool get_last_irreversible_block_return::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool get_last_irreversible_block_return::has_value() const {
  return _internal_has_value();
}
inline const ::koinos::block_topology& get_last_irreversible_block_return::_internal_value() const {
  const ::koinos::block_topology* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::koinos::block_topology&>(
      ::koinos::_block_topology_default_instance_);
}
inline const ::koinos::block_topology& get_last_irreversible_block_return::value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_last_irreversible_block_return.value)
  return _internal_value();
}
inline void get_last_irreversible_block_return::unsafe_arena_set_allocated_value(
    ::koinos::block_topology* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:koinos.chain.get_last_irreversible_block_return.value)
}
inline ::koinos::block_topology* get_last_irreversible_block_return::release_value() {
  
  ::koinos::block_topology* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::koinos::block_topology* get_last_irreversible_block_return::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:koinos.chain.get_last_irreversible_block_return.value)
  
  ::koinos::block_topology* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::koinos::block_topology* get_last_irreversible_block_return::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::koinos::block_topology>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::koinos::block_topology* get_last_irreversible_block_return::mutable_value() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.get_last_irreversible_block_return.value)
  return _internal_mutable_value();
}
inline void get_last_irreversible_block_return::set_allocated_value(::koinos::block_topology* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.get_last_irreversible_block_return.value)
}

// -------------------------------------------------------------------

// get_caller_args

// -------------------------------------------------------------------

// get_caller_return

// bytes caller = 1;
inline void get_caller_return::clear_caller() {
  caller_.ClearToEmpty();
}
inline const std::string& get_caller_return::caller() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_caller_return.caller)
  return _internal_caller();
}
inline void get_caller_return::set_caller(const std::string& value) {
  _internal_set_caller(value);
  // @@protoc_insertion_point(field_set:koinos.chain.get_caller_return.caller)
}
inline std::string* get_caller_return::mutable_caller() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.get_caller_return.caller)
  return _internal_mutable_caller();
}
inline const std::string& get_caller_return::_internal_caller() const {
  return caller_.Get();
}
inline void get_caller_return::_internal_set_caller(const std::string& value) {
  
  caller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void get_caller_return::set_caller(std::string&& value) {
  
  caller_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.get_caller_return.caller)
}
inline void get_caller_return::set_caller(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  caller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.get_caller_return.caller)
}
inline void get_caller_return::set_caller(const void* value,
    size_t size) {
  
  caller_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.get_caller_return.caller)
}
inline std::string* get_caller_return::_internal_mutable_caller() {
  
  return caller_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* get_caller_return::release_caller() {
  // @@protoc_insertion_point(field_release:koinos.chain.get_caller_return.caller)
  return caller_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_caller_return::set_allocated_caller(std::string* caller) {
  if (caller != nullptr) {
    
  } else {
    
  }
  caller_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caller,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.get_caller_return.caller)
}

// .koinos.chain.privilege caller_privilege = 2;
inline void get_caller_return::clear_caller_privilege() {
  caller_privilege_ = 0;
}
inline ::koinos::chain::privilege get_caller_return::_internal_caller_privilege() const {
  return static_cast< ::koinos::chain::privilege >(caller_privilege_);
}
inline ::koinos::chain::privilege get_caller_return::caller_privilege() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_caller_return.caller_privilege)
  return _internal_caller_privilege();
}
inline void get_caller_return::_internal_set_caller_privilege(::koinos::chain::privilege value) {
  
  caller_privilege_ = value;
}
inline void get_caller_return::set_caller_privilege(::koinos::chain::privilege value) {
  _internal_set_caller_privilege(value);
  // @@protoc_insertion_point(field_set:koinos.chain.get_caller_return.caller_privilege)
}

// -------------------------------------------------------------------

// require_authority_args

// bytes account = 1;
inline void require_authority_args::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& require_authority_args::account() const {
  // @@protoc_insertion_point(field_get:koinos.chain.require_authority_args.account)
  return _internal_account();
}
inline void require_authority_args::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:koinos.chain.require_authority_args.account)
}
inline std::string* require_authority_args::mutable_account() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.require_authority_args.account)
  return _internal_mutable_account();
}
inline const std::string& require_authority_args::_internal_account() const {
  return account_.Get();
}
inline void require_authority_args::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void require_authority_args::set_account(std::string&& value) {
  
  account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.require_authority_args.account)
}
inline void require_authority_args::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.require_authority_args.account)
}
inline void require_authority_args::set_account(const void* value,
    size_t size) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.require_authority_args.account)
}
inline std::string* require_authority_args::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* require_authority_args::release_account() {
  // @@protoc_insertion_point(field_release:koinos.chain.require_authority_args.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void require_authority_args::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.require_authority_args.account)
}

// -------------------------------------------------------------------

// require_authority_return

// -------------------------------------------------------------------

// get_transaction_signature_args

// -------------------------------------------------------------------

// get_transaction_signature_return

// bytes value = 1;
inline void get_transaction_signature_return::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& get_transaction_signature_return::value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_transaction_signature_return.value)
  return _internal_value();
}
inline void get_transaction_signature_return::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.get_transaction_signature_return.value)
}
inline std::string* get_transaction_signature_return::mutable_value() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.get_transaction_signature_return.value)
  return _internal_mutable_value();
}
inline const std::string& get_transaction_signature_return::_internal_value() const {
  return value_.Get();
}
inline void get_transaction_signature_return::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void get_transaction_signature_return::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.get_transaction_signature_return.value)
}
inline void get_transaction_signature_return::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.get_transaction_signature_return.value)
}
inline void get_transaction_signature_return::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.get_transaction_signature_return.value)
}
inline std::string* get_transaction_signature_return::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* get_transaction_signature_return::release_value() {
  // @@protoc_insertion_point(field_release:koinos.chain.get_transaction_signature_return.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_transaction_signature_return::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.get_transaction_signature_return.value)
}

// -------------------------------------------------------------------

// get_contract_id_args

// -------------------------------------------------------------------

// get_contract_id_return

// bytes value = 1;
inline void get_contract_id_return::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& get_contract_id_return::value() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_contract_id_return.value)
  return _internal_value();
}
inline void get_contract_id_return::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:koinos.chain.get_contract_id_return.value)
}
inline std::string* get_contract_id_return::mutable_value() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.get_contract_id_return.value)
  return _internal_mutable_value();
}
inline const std::string& get_contract_id_return::_internal_value() const {
  return value_.Get();
}
inline void get_contract_id_return::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void get_contract_id_return::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.get_contract_id_return.value)
}
inline void get_contract_id_return::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.get_contract_id_return.value)
}
inline void get_contract_id_return::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.get_contract_id_return.value)
}
inline std::string* get_contract_id_return::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* get_contract_id_return::release_value() {
  // @@protoc_insertion_point(field_release:koinos.chain.get_contract_id_return.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_contract_id_return::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.get_contract_id_return.value)
}

// -------------------------------------------------------------------

// get_account_nonce_args

// bytes account = 1;
inline void get_account_nonce_args::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& get_account_nonce_args::account() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_account_nonce_args.account)
  return _internal_account();
}
inline void get_account_nonce_args::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:koinos.chain.get_account_nonce_args.account)
}
inline std::string* get_account_nonce_args::mutable_account() {
  // @@protoc_insertion_point(field_mutable:koinos.chain.get_account_nonce_args.account)
  return _internal_mutable_account();
}
inline const std::string& get_account_nonce_args::_internal_account() const {
  return account_.Get();
}
inline void get_account_nonce_args::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void get_account_nonce_args::set_account(std::string&& value) {
  
  account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:koinos.chain.get_account_nonce_args.account)
}
inline void get_account_nonce_args::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:koinos.chain.get_account_nonce_args.account)
}
inline void get_account_nonce_args::set_account(const void* value,
    size_t size) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:koinos.chain.get_account_nonce_args.account)
}
inline std::string* get_account_nonce_args::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* get_account_nonce_args::release_account() {
  // @@protoc_insertion_point(field_release:koinos.chain.get_account_nonce_args.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_account_nonce_args::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:koinos.chain.get_account_nonce_args.account)
}

// -------------------------------------------------------------------

// get_account_nonce_return

// uint64 nonce = 1;
inline void get_account_nonce_return::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_account_nonce_return::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 get_account_nonce_return::nonce() const {
  // @@protoc_insertion_point(field_get:koinos.chain.get_account_nonce_return.nonce)
  return _internal_nonce();
}
inline void get_account_nonce_return::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void get_account_nonce_return::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:koinos.chain.get_account_nonce_return.nonce)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chain
}  // namespace koinos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::koinos::chain::privilege> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::koinos::chain::privilege>() {
  return ::koinos::chain::privilege_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_koinos_2fchain_2fchain_2eproto
